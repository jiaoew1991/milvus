// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_coord.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_5fcoord_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_5fcoord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "internal.pb.h"
#include "milvus.pb.h"
#include "schema.pb.h"
#include "msg.pb.h"
#include "index_coord.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_5fcoord_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_5fcoord_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_5fcoord_2eproto;
namespace milvus {
namespace proto {
namespace data {
class AddImportSegmentRequest;
struct AddImportSegmentRequestDefaultTypeInternal;
extern AddImportSegmentRequestDefaultTypeInternal _AddImportSegmentRequest_default_instance_;
class AddImportSegmentResponse;
struct AddImportSegmentResponseDefaultTypeInternal;
extern AddImportSegmentResponseDefaultTypeInternal _AddImportSegmentResponse_default_instance_;
class AlterCollectionRequest;
struct AlterCollectionRequestDefaultTypeInternal;
extern AlterCollectionRequestDefaultTypeInternal _AlterCollectionRequest_default_instance_;
class AssignSegmentIDRequest;
struct AssignSegmentIDRequestDefaultTypeInternal;
extern AssignSegmentIDRequestDefaultTypeInternal _AssignSegmentIDRequest_default_instance_;
class AssignSegmentIDResponse;
struct AssignSegmentIDResponseDefaultTypeInternal;
extern AssignSegmentIDResponseDefaultTypeInternal _AssignSegmentIDResponse_default_instance_;
class Binlog;
struct BinlogDefaultTypeInternal;
extern BinlogDefaultTypeInternal _Binlog_default_instance_;
class ChannelStatus;
struct ChannelStatusDefaultTypeInternal;
extern ChannelStatusDefaultTypeInternal _ChannelStatus_default_instance_;
class ChannelWatchInfo;
struct ChannelWatchInfoDefaultTypeInternal;
extern ChannelWatchInfoDefaultTypeInternal _ChannelWatchInfo_default_instance_;
class CheckPoint;
struct CheckPointDefaultTypeInternal;
extern CheckPointDefaultTypeInternal _CheckPoint_default_instance_;
class CompactionPlan;
struct CompactionPlanDefaultTypeInternal;
extern CompactionPlanDefaultTypeInternal _CompactionPlan_default_instance_;
class CompactionResult;
struct CompactionResultDefaultTypeInternal;
extern CompactionResultDefaultTypeInternal _CompactionResult_default_instance_;
class CompactionSegmentBinlogs;
struct CompactionSegmentBinlogsDefaultTypeInternal;
extern CompactionSegmentBinlogsDefaultTypeInternal _CompactionSegmentBinlogs_default_instance_;
class CompactionStateRequest;
struct CompactionStateRequestDefaultTypeInternal;
extern CompactionStateRequestDefaultTypeInternal _CompactionStateRequest_default_instance_;
class CompactionStateResponse;
struct CompactionStateResponseDefaultTypeInternal;
extern CompactionStateResponseDefaultTypeInternal _CompactionStateResponse_default_instance_;
class CompactionStateResult;
struct CompactionStateResultDefaultTypeInternal;
extern CompactionStateResultDefaultTypeInternal _CompactionStateResult_default_instance_;
class DataNodeInfo;
struct DataNodeInfoDefaultTypeInternal;
extern DataNodeInfoDefaultTypeInternal _DataNodeInfo_default_instance_;
class DeltaLogInfo;
struct DeltaLogInfoDefaultTypeInternal;
extern DeltaLogInfoDefaultTypeInternal _DeltaLogInfo_default_instance_;
class DropVirtualChannelRequest;
struct DropVirtualChannelRequestDefaultTypeInternal;
extern DropVirtualChannelRequestDefaultTypeInternal _DropVirtualChannelRequest_default_instance_;
class DropVirtualChannelResponse;
struct DropVirtualChannelResponseDefaultTypeInternal;
extern DropVirtualChannelResponseDefaultTypeInternal _DropVirtualChannelResponse_default_instance_;
class DropVirtualChannelSegment;
struct DropVirtualChannelSegmentDefaultTypeInternal;
extern DropVirtualChannelSegmentDefaultTypeInternal _DropVirtualChannelSegment_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class FieldBinlog;
struct FieldBinlogDefaultTypeInternal;
extern FieldBinlogDefaultTypeInternal _FieldBinlog_default_instance_;
class FlushRequest;
struct FlushRequestDefaultTypeInternal;
extern FlushRequestDefaultTypeInternal _FlushRequest_default_instance_;
class FlushResponse;
struct FlushResponseDefaultTypeInternal;
extern FlushResponseDefaultTypeInternal _FlushResponse_default_instance_;
class FlushSegmentsRequest;
struct FlushSegmentsRequestDefaultTypeInternal;
extern FlushSegmentsRequestDefaultTypeInternal _FlushSegmentsRequest_default_instance_;
class GcConfirmRequest;
struct GcConfirmRequestDefaultTypeInternal;
extern GcConfirmRequestDefaultTypeInternal _GcConfirmRequest_default_instance_;
class GcConfirmResponse;
struct GcConfirmResponseDefaultTypeInternal;
extern GcConfirmResponseDefaultTypeInternal _GcConfirmResponse_default_instance_;
class GetCollectionStatisticsRequest;
struct GetCollectionStatisticsRequestDefaultTypeInternal;
extern GetCollectionStatisticsRequestDefaultTypeInternal _GetCollectionStatisticsRequest_default_instance_;
class GetCollectionStatisticsResponse;
struct GetCollectionStatisticsResponseDefaultTypeInternal;
extern GetCollectionStatisticsResponseDefaultTypeInternal _GetCollectionStatisticsResponse_default_instance_;
class GetFlushedSegmentsRequest;
struct GetFlushedSegmentsRequestDefaultTypeInternal;
extern GetFlushedSegmentsRequestDefaultTypeInternal _GetFlushedSegmentsRequest_default_instance_;
class GetFlushedSegmentsResponse;
struct GetFlushedSegmentsResponseDefaultTypeInternal;
extern GetFlushedSegmentsResponseDefaultTypeInternal _GetFlushedSegmentsResponse_default_instance_;
class GetInsertBinlogPathsRequest;
struct GetInsertBinlogPathsRequestDefaultTypeInternal;
extern GetInsertBinlogPathsRequestDefaultTypeInternal _GetInsertBinlogPathsRequest_default_instance_;
class GetInsertBinlogPathsResponse;
struct GetInsertBinlogPathsResponseDefaultTypeInternal;
extern GetInsertBinlogPathsResponseDefaultTypeInternal _GetInsertBinlogPathsResponse_default_instance_;
class GetPartitionStatisticsRequest;
struct GetPartitionStatisticsRequestDefaultTypeInternal;
extern GetPartitionStatisticsRequestDefaultTypeInternal _GetPartitionStatisticsRequest_default_instance_;
class GetPartitionStatisticsResponse;
struct GetPartitionStatisticsResponseDefaultTypeInternal;
extern GetPartitionStatisticsResponseDefaultTypeInternal _GetPartitionStatisticsResponse_default_instance_;
class GetRecoveryInfoRequest;
struct GetRecoveryInfoRequestDefaultTypeInternal;
extern GetRecoveryInfoRequestDefaultTypeInternal _GetRecoveryInfoRequest_default_instance_;
class GetRecoveryInfoRequestV2;
struct GetRecoveryInfoRequestV2DefaultTypeInternal;
extern GetRecoveryInfoRequestV2DefaultTypeInternal _GetRecoveryInfoRequestV2_default_instance_;
class GetRecoveryInfoResponse;
struct GetRecoveryInfoResponseDefaultTypeInternal;
extern GetRecoveryInfoResponseDefaultTypeInternal _GetRecoveryInfoResponse_default_instance_;
class GetRecoveryInfoResponseV2;
struct GetRecoveryInfoResponseV2DefaultTypeInternal;
extern GetRecoveryInfoResponseV2DefaultTypeInternal _GetRecoveryInfoResponseV2_default_instance_;
class GetSegmentInfoChannelRequest;
struct GetSegmentInfoChannelRequestDefaultTypeInternal;
extern GetSegmentInfoChannelRequestDefaultTypeInternal _GetSegmentInfoChannelRequest_default_instance_;
class GetSegmentInfoRequest;
struct GetSegmentInfoRequestDefaultTypeInternal;
extern GetSegmentInfoRequestDefaultTypeInternal _GetSegmentInfoRequest_default_instance_;
class GetSegmentInfoResponse;
struct GetSegmentInfoResponseDefaultTypeInternal;
extern GetSegmentInfoResponseDefaultTypeInternal _GetSegmentInfoResponse_default_instance_;
class GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse;
struct GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUseDefaultTypeInternal;
extern GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUseDefaultTypeInternal _GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse_default_instance_;
class GetSegmentStatesRequest;
struct GetSegmentStatesRequestDefaultTypeInternal;
extern GetSegmentStatesRequestDefaultTypeInternal _GetSegmentStatesRequest_default_instance_;
class GetSegmentStatesResponse;
struct GetSegmentStatesResponseDefaultTypeInternal;
extern GetSegmentStatesResponseDefaultTypeInternal _GetSegmentStatesResponse_default_instance_;
class GetSegmentsByStatesRequest;
struct GetSegmentsByStatesRequestDefaultTypeInternal;
extern GetSegmentsByStatesRequestDefaultTypeInternal _GetSegmentsByStatesRequest_default_instance_;
class GetSegmentsByStatesResponse;
struct GetSegmentsByStatesResponseDefaultTypeInternal;
extern GetSegmentsByStatesResponseDefaultTypeInternal _GetSegmentsByStatesResponse_default_instance_;
class ImportTask;
struct ImportTaskDefaultTypeInternal;
extern ImportTaskDefaultTypeInternal _ImportTask_default_instance_;
class ImportTaskInfo;
struct ImportTaskInfoDefaultTypeInternal;
extern ImportTaskInfoDefaultTypeInternal _ImportTaskInfo_default_instance_;
class ImportTaskRequest;
struct ImportTaskRequestDefaultTypeInternal;
extern ImportTaskRequestDefaultTypeInternal _ImportTaskRequest_default_instance_;
class ImportTaskResponse;
struct ImportTaskResponseDefaultTypeInternal;
extern ImportTaskResponseDefaultTypeInternal _ImportTaskResponse_default_instance_;
class ImportTaskState;
struct ImportTaskStateDefaultTypeInternal;
extern ImportTaskStateDefaultTypeInternal _ImportTaskState_default_instance_;
class MarkSegmentsDroppedRequest;
struct MarkSegmentsDroppedRequestDefaultTypeInternal;
extern MarkSegmentsDroppedRequestDefaultTypeInternal _MarkSegmentsDroppedRequest_default_instance_;
class ReportDataNodeTtMsgsRequest;
struct ReportDataNodeTtMsgsRequestDefaultTypeInternal;
extern ReportDataNodeTtMsgsRequestDefaultTypeInternal _ReportDataNodeTtMsgsRequest_default_instance_;
class ResendSegmentStatsRequest;
struct ResendSegmentStatsRequestDefaultTypeInternal;
extern ResendSegmentStatsRequestDefaultTypeInternal _ResendSegmentStatsRequest_default_instance_;
class ResendSegmentStatsResponse;
struct ResendSegmentStatsResponseDefaultTypeInternal;
extern ResendSegmentStatsResponseDefaultTypeInternal _ResendSegmentStatsResponse_default_instance_;
class SaveBinlogPathsRequest;
struct SaveBinlogPathsRequestDefaultTypeInternal;
extern SaveBinlogPathsRequestDefaultTypeInternal _SaveBinlogPathsRequest_default_instance_;
class SaveImportSegmentRequest;
struct SaveImportSegmentRequestDefaultTypeInternal;
extern SaveImportSegmentRequestDefaultTypeInternal _SaveImportSegmentRequest_default_instance_;
class SegmentBinlogs;
struct SegmentBinlogsDefaultTypeInternal;
extern SegmentBinlogsDefaultTypeInternal _SegmentBinlogs_default_instance_;
class SegmentFieldBinlogMeta;
struct SegmentFieldBinlogMetaDefaultTypeInternal;
extern SegmentFieldBinlogMetaDefaultTypeInternal _SegmentFieldBinlogMeta_default_instance_;
class SegmentFlushCompletedMsg;
struct SegmentFlushCompletedMsgDefaultTypeInternal;
extern SegmentFlushCompletedMsgDefaultTypeInternal _SegmentFlushCompletedMsg_default_instance_;
class SegmentIDAssignment;
struct SegmentIDAssignmentDefaultTypeInternal;
extern SegmentIDAssignmentDefaultTypeInternal _SegmentIDAssignment_default_instance_;
class SegmentIDRequest;
struct SegmentIDRequestDefaultTypeInternal;
extern SegmentIDRequestDefaultTypeInternal _SegmentIDRequest_default_instance_;
class SegmentInfo;
struct SegmentInfoDefaultTypeInternal;
extern SegmentInfoDefaultTypeInternal _SegmentInfo_default_instance_;
class SegmentMsg;
struct SegmentMsgDefaultTypeInternal;
extern SegmentMsgDefaultTypeInternal _SegmentMsg_default_instance_;
class SegmentReferenceLock;
struct SegmentReferenceLockDefaultTypeInternal;
extern SegmentReferenceLockDefaultTypeInternal _SegmentReferenceLock_default_instance_;
class SegmentStartPosition;
struct SegmentStartPositionDefaultTypeInternal;
extern SegmentStartPositionDefaultTypeInternal _SegmentStartPosition_default_instance_;
class SegmentStateInfo;
struct SegmentStateInfoDefaultTypeInternal;
extern SegmentStateInfoDefaultTypeInternal _SegmentStateInfo_default_instance_;
class SetSegmentStateRequest;
struct SetSegmentStateRequestDefaultTypeInternal;
extern SetSegmentStateRequestDefaultTypeInternal _SetSegmentStateRequest_default_instance_;
class SetSegmentStateResponse;
struct SetSegmentStateResponseDefaultTypeInternal;
extern SetSegmentStateResponseDefaultTypeInternal _SetSegmentStateResponse_default_instance_;
class SyncSegmentsRequest;
struct SyncSegmentsRequestDefaultTypeInternal;
extern SyncSegmentsRequestDefaultTypeInternal _SyncSegmentsRequest_default_instance_;
class UnsetIsImportingStateRequest;
struct UnsetIsImportingStateRequestDefaultTypeInternal;
extern UnsetIsImportingStateRequestDefaultTypeInternal _UnsetIsImportingStateRequest_default_instance_;
class UpdateChannelCheckpointRequest;
struct UpdateChannelCheckpointRequestDefaultTypeInternal;
extern UpdateChannelCheckpointRequestDefaultTypeInternal _UpdateChannelCheckpointRequest_default_instance_;
class UpdateSegmentStatisticsRequest;
struct UpdateSegmentStatisticsRequestDefaultTypeInternal;
extern UpdateSegmentStatisticsRequestDefaultTypeInternal _UpdateSegmentStatisticsRequest_default_instance_;
class VchannelInfo;
struct VchannelInfoDefaultTypeInternal;
extern VchannelInfoDefaultTypeInternal _VchannelInfo_default_instance_;
class WatchChannelsRequest;
struct WatchChannelsRequestDefaultTypeInternal;
extern WatchChannelsRequestDefaultTypeInternal _WatchChannelsRequest_default_instance_;
class WatchChannelsResponse;
struct WatchChannelsResponseDefaultTypeInternal;
extern WatchChannelsResponseDefaultTypeInternal _WatchChannelsResponse_default_instance_;
class WatchDmChannelsRequest;
struct WatchDmChannelsRequestDefaultTypeInternal;
extern WatchDmChannelsRequestDefaultTypeInternal _WatchDmChannelsRequest_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> ::milvus::proto::data::AddImportSegmentRequest* Arena::CreateMaybeMessage<::milvus::proto::data::AddImportSegmentRequest>(Arena*);
template<> ::milvus::proto::data::AddImportSegmentResponse* Arena::CreateMaybeMessage<::milvus::proto::data::AddImportSegmentResponse>(Arena*);
template<> ::milvus::proto::data::AlterCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::data::AlterCollectionRequest>(Arena*);
template<> ::milvus::proto::data::AssignSegmentIDRequest* Arena::CreateMaybeMessage<::milvus::proto::data::AssignSegmentIDRequest>(Arena*);
template<> ::milvus::proto::data::AssignSegmentIDResponse* Arena::CreateMaybeMessage<::milvus::proto::data::AssignSegmentIDResponse>(Arena*);
template<> ::milvus::proto::data::Binlog* Arena::CreateMaybeMessage<::milvus::proto::data::Binlog>(Arena*);
template<> ::milvus::proto::data::ChannelStatus* Arena::CreateMaybeMessage<::milvus::proto::data::ChannelStatus>(Arena*);
template<> ::milvus::proto::data::ChannelWatchInfo* Arena::CreateMaybeMessage<::milvus::proto::data::ChannelWatchInfo>(Arena*);
template<> ::milvus::proto::data::CheckPoint* Arena::CreateMaybeMessage<::milvus::proto::data::CheckPoint>(Arena*);
template<> ::milvus::proto::data::CompactionPlan* Arena::CreateMaybeMessage<::milvus::proto::data::CompactionPlan>(Arena*);
template<> ::milvus::proto::data::CompactionResult* Arena::CreateMaybeMessage<::milvus::proto::data::CompactionResult>(Arena*);
template<> ::milvus::proto::data::CompactionSegmentBinlogs* Arena::CreateMaybeMessage<::milvus::proto::data::CompactionSegmentBinlogs>(Arena*);
template<> ::milvus::proto::data::CompactionStateRequest* Arena::CreateMaybeMessage<::milvus::proto::data::CompactionStateRequest>(Arena*);
template<> ::milvus::proto::data::CompactionStateResponse* Arena::CreateMaybeMessage<::milvus::proto::data::CompactionStateResponse>(Arena*);
template<> ::milvus::proto::data::CompactionStateResult* Arena::CreateMaybeMessage<::milvus::proto::data::CompactionStateResult>(Arena*);
template<> ::milvus::proto::data::DataNodeInfo* Arena::CreateMaybeMessage<::milvus::proto::data::DataNodeInfo>(Arena*);
template<> ::milvus::proto::data::DeltaLogInfo* Arena::CreateMaybeMessage<::milvus::proto::data::DeltaLogInfo>(Arena*);
template<> ::milvus::proto::data::DropVirtualChannelRequest* Arena::CreateMaybeMessage<::milvus::proto::data::DropVirtualChannelRequest>(Arena*);
template<> ::milvus::proto::data::DropVirtualChannelResponse* Arena::CreateMaybeMessage<::milvus::proto::data::DropVirtualChannelResponse>(Arena*);
template<> ::milvus::proto::data::DropVirtualChannelSegment* Arena::CreateMaybeMessage<::milvus::proto::data::DropVirtualChannelSegment>(Arena*);
template<> ::milvus::proto::data::Empty* Arena::CreateMaybeMessage<::milvus::proto::data::Empty>(Arena*);
template<> ::milvus::proto::data::FieldBinlog* Arena::CreateMaybeMessage<::milvus::proto::data::FieldBinlog>(Arena*);
template<> ::milvus::proto::data::FlushRequest* Arena::CreateMaybeMessage<::milvus::proto::data::FlushRequest>(Arena*);
template<> ::milvus::proto::data::FlushResponse* Arena::CreateMaybeMessage<::milvus::proto::data::FlushResponse>(Arena*);
template<> ::milvus::proto::data::FlushSegmentsRequest* Arena::CreateMaybeMessage<::milvus::proto::data::FlushSegmentsRequest>(Arena*);
template<> ::milvus::proto::data::GcConfirmRequest* Arena::CreateMaybeMessage<::milvus::proto::data::GcConfirmRequest>(Arena*);
template<> ::milvus::proto::data::GcConfirmResponse* Arena::CreateMaybeMessage<::milvus::proto::data::GcConfirmResponse>(Arena*);
template<> ::milvus::proto::data::GetCollectionStatisticsRequest* Arena::CreateMaybeMessage<::milvus::proto::data::GetCollectionStatisticsRequest>(Arena*);
template<> ::milvus::proto::data::GetCollectionStatisticsResponse* Arena::CreateMaybeMessage<::milvus::proto::data::GetCollectionStatisticsResponse>(Arena*);
template<> ::milvus::proto::data::GetFlushedSegmentsRequest* Arena::CreateMaybeMessage<::milvus::proto::data::GetFlushedSegmentsRequest>(Arena*);
template<> ::milvus::proto::data::GetFlushedSegmentsResponse* Arena::CreateMaybeMessage<::milvus::proto::data::GetFlushedSegmentsResponse>(Arena*);
template<> ::milvus::proto::data::GetInsertBinlogPathsRequest* Arena::CreateMaybeMessage<::milvus::proto::data::GetInsertBinlogPathsRequest>(Arena*);
template<> ::milvus::proto::data::GetInsertBinlogPathsResponse* Arena::CreateMaybeMessage<::milvus::proto::data::GetInsertBinlogPathsResponse>(Arena*);
template<> ::milvus::proto::data::GetPartitionStatisticsRequest* Arena::CreateMaybeMessage<::milvus::proto::data::GetPartitionStatisticsRequest>(Arena*);
template<> ::milvus::proto::data::GetPartitionStatisticsResponse* Arena::CreateMaybeMessage<::milvus::proto::data::GetPartitionStatisticsResponse>(Arena*);
template<> ::milvus::proto::data::GetRecoveryInfoRequest* Arena::CreateMaybeMessage<::milvus::proto::data::GetRecoveryInfoRequest>(Arena*);
template<> ::milvus::proto::data::GetRecoveryInfoRequestV2* Arena::CreateMaybeMessage<::milvus::proto::data::GetRecoveryInfoRequestV2>(Arena*);
template<> ::milvus::proto::data::GetRecoveryInfoResponse* Arena::CreateMaybeMessage<::milvus::proto::data::GetRecoveryInfoResponse>(Arena*);
template<> ::milvus::proto::data::GetRecoveryInfoResponseV2* Arena::CreateMaybeMessage<::milvus::proto::data::GetRecoveryInfoResponseV2>(Arena*);
template<> ::milvus::proto::data::GetSegmentInfoChannelRequest* Arena::CreateMaybeMessage<::milvus::proto::data::GetSegmentInfoChannelRequest>(Arena*);
template<> ::milvus::proto::data::GetSegmentInfoRequest* Arena::CreateMaybeMessage<::milvus::proto::data::GetSegmentInfoRequest>(Arena*);
template<> ::milvus::proto::data::GetSegmentInfoResponse* Arena::CreateMaybeMessage<::milvus::proto::data::GetSegmentInfoResponse>(Arena*);
template<> ::milvus::proto::data::GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse* Arena::CreateMaybeMessage<::milvus::proto::data::GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse>(Arena*);
template<> ::milvus::proto::data::GetSegmentStatesRequest* Arena::CreateMaybeMessage<::milvus::proto::data::GetSegmentStatesRequest>(Arena*);
template<> ::milvus::proto::data::GetSegmentStatesResponse* Arena::CreateMaybeMessage<::milvus::proto::data::GetSegmentStatesResponse>(Arena*);
template<> ::milvus::proto::data::GetSegmentsByStatesRequest* Arena::CreateMaybeMessage<::milvus::proto::data::GetSegmentsByStatesRequest>(Arena*);
template<> ::milvus::proto::data::GetSegmentsByStatesResponse* Arena::CreateMaybeMessage<::milvus::proto::data::GetSegmentsByStatesResponse>(Arena*);
template<> ::milvus::proto::data::ImportTask* Arena::CreateMaybeMessage<::milvus::proto::data::ImportTask>(Arena*);
template<> ::milvus::proto::data::ImportTaskInfo* Arena::CreateMaybeMessage<::milvus::proto::data::ImportTaskInfo>(Arena*);
template<> ::milvus::proto::data::ImportTaskRequest* Arena::CreateMaybeMessage<::milvus::proto::data::ImportTaskRequest>(Arena*);
template<> ::milvus::proto::data::ImportTaskResponse* Arena::CreateMaybeMessage<::milvus::proto::data::ImportTaskResponse>(Arena*);
template<> ::milvus::proto::data::ImportTaskState* Arena::CreateMaybeMessage<::milvus::proto::data::ImportTaskState>(Arena*);
template<> ::milvus::proto::data::MarkSegmentsDroppedRequest* Arena::CreateMaybeMessage<::milvus::proto::data::MarkSegmentsDroppedRequest>(Arena*);
template<> ::milvus::proto::data::ReportDataNodeTtMsgsRequest* Arena::CreateMaybeMessage<::milvus::proto::data::ReportDataNodeTtMsgsRequest>(Arena*);
template<> ::milvus::proto::data::ResendSegmentStatsRequest* Arena::CreateMaybeMessage<::milvus::proto::data::ResendSegmentStatsRequest>(Arena*);
template<> ::milvus::proto::data::ResendSegmentStatsResponse* Arena::CreateMaybeMessage<::milvus::proto::data::ResendSegmentStatsResponse>(Arena*);
template<> ::milvus::proto::data::SaveBinlogPathsRequest* Arena::CreateMaybeMessage<::milvus::proto::data::SaveBinlogPathsRequest>(Arena*);
template<> ::milvus::proto::data::SaveImportSegmentRequest* Arena::CreateMaybeMessage<::milvus::proto::data::SaveImportSegmentRequest>(Arena*);
template<> ::milvus::proto::data::SegmentBinlogs* Arena::CreateMaybeMessage<::milvus::proto::data::SegmentBinlogs>(Arena*);
template<> ::milvus::proto::data::SegmentFieldBinlogMeta* Arena::CreateMaybeMessage<::milvus::proto::data::SegmentFieldBinlogMeta>(Arena*);
template<> ::milvus::proto::data::SegmentFlushCompletedMsg* Arena::CreateMaybeMessage<::milvus::proto::data::SegmentFlushCompletedMsg>(Arena*);
template<> ::milvus::proto::data::SegmentIDAssignment* Arena::CreateMaybeMessage<::milvus::proto::data::SegmentIDAssignment>(Arena*);
template<> ::milvus::proto::data::SegmentIDRequest* Arena::CreateMaybeMessage<::milvus::proto::data::SegmentIDRequest>(Arena*);
template<> ::milvus::proto::data::SegmentInfo* Arena::CreateMaybeMessage<::milvus::proto::data::SegmentInfo>(Arena*);
template<> ::milvus::proto::data::SegmentMsg* Arena::CreateMaybeMessage<::milvus::proto::data::SegmentMsg>(Arena*);
template<> ::milvus::proto::data::SegmentReferenceLock* Arena::CreateMaybeMessage<::milvus::proto::data::SegmentReferenceLock>(Arena*);
template<> ::milvus::proto::data::SegmentStartPosition* Arena::CreateMaybeMessage<::milvus::proto::data::SegmentStartPosition>(Arena*);
template<> ::milvus::proto::data::SegmentStateInfo* Arena::CreateMaybeMessage<::milvus::proto::data::SegmentStateInfo>(Arena*);
template<> ::milvus::proto::data::SetSegmentStateRequest* Arena::CreateMaybeMessage<::milvus::proto::data::SetSegmentStateRequest>(Arena*);
template<> ::milvus::proto::data::SetSegmentStateResponse* Arena::CreateMaybeMessage<::milvus::proto::data::SetSegmentStateResponse>(Arena*);
template<> ::milvus::proto::data::SyncSegmentsRequest* Arena::CreateMaybeMessage<::milvus::proto::data::SyncSegmentsRequest>(Arena*);
template<> ::milvus::proto::data::UnsetIsImportingStateRequest* Arena::CreateMaybeMessage<::milvus::proto::data::UnsetIsImportingStateRequest>(Arena*);
template<> ::milvus::proto::data::UpdateChannelCheckpointRequest* Arena::CreateMaybeMessage<::milvus::proto::data::UpdateChannelCheckpointRequest>(Arena*);
template<> ::milvus::proto::data::UpdateSegmentStatisticsRequest* Arena::CreateMaybeMessage<::milvus::proto::data::UpdateSegmentStatisticsRequest>(Arena*);
template<> ::milvus::proto::data::VchannelInfo* Arena::CreateMaybeMessage<::milvus::proto::data::VchannelInfo>(Arena*);
template<> ::milvus::proto::data::WatchChannelsRequest* Arena::CreateMaybeMessage<::milvus::proto::data::WatchChannelsRequest>(Arena*);
template<> ::milvus::proto::data::WatchChannelsResponse* Arena::CreateMaybeMessage<::milvus::proto::data::WatchChannelsResponse>(Arena*);
template<> ::milvus::proto::data::WatchDmChannelsRequest* Arena::CreateMaybeMessage<::milvus::proto::data::WatchDmChannelsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace milvus {
namespace proto {
namespace data {

enum SegmentType : int {
  New = 0,
  Normal = 1,
  Flushed = 2,
  Compacted = 3,
  SegmentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SegmentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SegmentType_IsValid(int value);
constexpr SegmentType SegmentType_MIN = New;
constexpr SegmentType SegmentType_MAX = Compacted;
constexpr int SegmentType_ARRAYSIZE = SegmentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SegmentType_descriptor();
template<typename T>
inline const std::string& SegmentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SegmentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SegmentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SegmentType_descriptor(), enum_t_value);
}
inline bool SegmentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SegmentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SegmentType>(
    SegmentType_descriptor(), name, value);
}
enum ChannelWatchState : int {
  Uncomplete = 0,
  Complete = 1,
  ToWatch = 2,
  WatchSuccess = 3,
  WatchFailure = 4,
  ToRelease = 5,
  ReleaseSuccess = 6,
  ReleaseFailure = 7,
  ChannelWatchState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChannelWatchState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChannelWatchState_IsValid(int value);
constexpr ChannelWatchState ChannelWatchState_MIN = Uncomplete;
constexpr ChannelWatchState ChannelWatchState_MAX = ReleaseFailure;
constexpr int ChannelWatchState_ARRAYSIZE = ChannelWatchState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelWatchState_descriptor();
template<typename T>
inline const std::string& ChannelWatchState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelWatchState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelWatchState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChannelWatchState_descriptor(), enum_t_value);
}
inline bool ChannelWatchState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChannelWatchState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelWatchState>(
    ChannelWatchState_descriptor(), name, value);
}
enum CompactionType : int {
  UndefinedCompaction = 0,
  MergeCompaction = 2,
  MixCompaction = 3,
  CompactionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CompactionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CompactionType_IsValid(int value);
constexpr CompactionType CompactionType_MIN = UndefinedCompaction;
constexpr CompactionType CompactionType_MAX = MixCompaction;
constexpr int CompactionType_ARRAYSIZE = CompactionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompactionType_descriptor();
template<typename T>
inline const std::string& CompactionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompactionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompactionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompactionType_descriptor(), enum_t_value);
}
inline bool CompactionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompactionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompactionType>(
    CompactionType_descriptor(), name, value);
}
// ===================================================================

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:milvus.proto.data.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:milvus.proto.data.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class FlushRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.FlushRequest) */ {
 public:
  inline FlushRequest() : FlushRequest(nullptr) {}
  ~FlushRequest() override;
  explicit PROTOBUF_CONSTEXPR FlushRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlushRequest(const FlushRequest& from);
  FlushRequest(FlushRequest&& from) noexcept
    : FlushRequest() {
    *this = ::std::move(from);
  }

  inline FlushRequest& operator=(const FlushRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushRequest& operator=(FlushRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushRequest* internal_default_instance() {
    return reinterpret_cast<const FlushRequest*>(
               &_FlushRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FlushRequest& a, FlushRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlushRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlushRequest& from) {
    FlushRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.FlushRequest";
  }
  protected:
  explicit FlushRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDsFieldNumber = 3,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 2,
    kCollectionIDFieldNumber = 4,
    kIsImportFieldNumber = 5,
  };
  // repeated int64 segmentIDs = 3;
  int segmentids_size() const;
  private:
  int _internal_segmentids_size() const;
  public:
  void clear_segmentids();
  private:
  int64_t _internal_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segmentids() const;
  void _internal_add_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segmentids();
  public:
  int64_t segmentids(int index) const;
  void set_segmentids(int index, int64_t value);
  void add_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segmentids();

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 2;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 4;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // bool isImport = 5;
  void clear_isimport();
  bool isimport() const;
  void set_isimport(bool value);
  private:
  bool _internal_isimport() const;
  void _internal_set_isimport(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.FlushRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segmentids_;
    mutable std::atomic<int> _segmentids_cached_byte_size_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t dbid_;
    int64_t collectionid_;
    bool isimport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class FlushResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.FlushResponse) */ {
 public:
  inline FlushResponse() : FlushResponse(nullptr) {}
  ~FlushResponse() override;
  explicit PROTOBUF_CONSTEXPR FlushResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlushResponse(const FlushResponse& from);
  FlushResponse(FlushResponse&& from) noexcept
    : FlushResponse() {
    *this = ::std::move(from);
  }

  inline FlushResponse& operator=(const FlushResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushResponse& operator=(FlushResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushResponse* internal_default_instance() {
    return reinterpret_cast<const FlushResponse*>(
               &_FlushResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FlushResponse& a, FlushResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlushResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlushResponse& from) {
    FlushResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.FlushResponse";
  }
  protected:
  explicit FlushResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDsFieldNumber = 4,
    kFlushSegmentIDsFieldNumber = 5,
    kStatusFieldNumber = 1,
    kDbIDFieldNumber = 2,
    kCollectionIDFieldNumber = 3,
    kTimeOfSealFieldNumber = 6,
  };
  // repeated int64 segmentIDs = 4;
  int segmentids_size() const;
  private:
  int _internal_segmentids_size() const;
  public:
  void clear_segmentids();
  private:
  int64_t _internal_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segmentids() const;
  void _internal_add_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segmentids();
  public:
  int64_t segmentids(int index) const;
  void set_segmentids(int index, int64_t value);
  void add_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segmentids();

  // repeated int64 flushSegmentIDs = 5;
  int flushsegmentids_size() const;
  private:
  int _internal_flushsegmentids_size() const;
  public:
  void clear_flushsegmentids();
  private:
  int64_t _internal_flushsegmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_flushsegmentids() const;
  void _internal_add_flushsegmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_flushsegmentids();
  public:
  int64_t flushsegmentids(int index) const;
  void set_flushsegmentids(int index, int64_t value);
  void add_flushsegmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      flushsegmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_flushsegmentids();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // int64 dbID = 2;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 3;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 timeOfSeal = 6;
  void clear_timeofseal();
  int64_t timeofseal() const;
  void set_timeofseal(int64_t value);
  private:
  int64_t _internal_timeofseal() const;
  void _internal_set_timeofseal(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.FlushResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segmentids_;
    mutable std::atomic<int> _segmentids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > flushsegmentids_;
    mutable std::atomic<int> _flushsegmentids_cached_byte_size_;
    ::milvus::proto::common::Status* status_;
    int64_t dbid_;
    int64_t collectionid_;
    int64_t timeofseal_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SegmentIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SegmentIDRequest) */ {
 public:
  inline SegmentIDRequest() : SegmentIDRequest(nullptr) {}
  ~SegmentIDRequest() override;
  explicit PROTOBUF_CONSTEXPR SegmentIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentIDRequest(const SegmentIDRequest& from);
  SegmentIDRequest(SegmentIDRequest&& from) noexcept
    : SegmentIDRequest() {
    *this = ::std::move(from);
  }

  inline SegmentIDRequest& operator=(const SegmentIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentIDRequest& operator=(SegmentIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentIDRequest* internal_default_instance() {
    return reinterpret_cast<const SegmentIDRequest*>(
               &_SegmentIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SegmentIDRequest& a, SegmentIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentIDRequest& from) {
    SegmentIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SegmentIDRequest";
  }
  protected:
  explicit SegmentIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 2,
    kCollectionIDFieldNumber = 3,
    kCountFieldNumber = 1,
    kIsImportFieldNumber = 5,
    kPartitionIDFieldNumber = 4,
    kImportTaskIDFieldNumber = 6,
  };
  // string channel_name = 2;
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_NODISCARD std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // int64 collectionID = 3;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // uint32 count = 1;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // bool isImport = 5;
  void clear_isimport();
  bool isimport() const;
  void set_isimport(bool value);
  private:
  bool _internal_isimport() const;
  void _internal_set_isimport(bool value);
  public:

  // int64 partitionID = 4;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // int64 importTaskID = 6;
  void clear_importtaskid();
  int64_t importtaskid() const;
  void set_importtaskid(int64_t value);
  private:
  int64_t _internal_importtaskid() const;
  void _internal_set_importtaskid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SegmentIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
    int64_t collectionid_;
    uint32_t count_;
    bool isimport_;
    int64_t partitionid_;
    int64_t importtaskid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class AssignSegmentIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.AssignSegmentIDRequest) */ {
 public:
  inline AssignSegmentIDRequest() : AssignSegmentIDRequest(nullptr) {}
  ~AssignSegmentIDRequest() override;
  explicit PROTOBUF_CONSTEXPR AssignSegmentIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssignSegmentIDRequest(const AssignSegmentIDRequest& from);
  AssignSegmentIDRequest(AssignSegmentIDRequest&& from) noexcept
    : AssignSegmentIDRequest() {
    *this = ::std::move(from);
  }

  inline AssignSegmentIDRequest& operator=(const AssignSegmentIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignSegmentIDRequest& operator=(AssignSegmentIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssignSegmentIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssignSegmentIDRequest* internal_default_instance() {
    return reinterpret_cast<const AssignSegmentIDRequest*>(
               &_AssignSegmentIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AssignSegmentIDRequest& a, AssignSegmentIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignSegmentIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssignSegmentIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssignSegmentIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssignSegmentIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssignSegmentIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AssignSegmentIDRequest& from) {
    AssignSegmentIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignSegmentIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.AssignSegmentIDRequest";
  }
  protected:
  explicit AssignSegmentIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDRequestsFieldNumber = 3,
    kPeerRoleFieldNumber = 2,
    kNodeIDFieldNumber = 1,
  };
  // repeated .milvus.proto.data.SegmentIDRequest segmentIDRequests = 3;
  int segmentidrequests_size() const;
  private:
  int _internal_segmentidrequests_size() const;
  public:
  void clear_segmentidrequests();
  ::milvus::proto::data::SegmentIDRequest* mutable_segmentidrequests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentIDRequest >*
      mutable_segmentidrequests();
  private:
  const ::milvus::proto::data::SegmentIDRequest& _internal_segmentidrequests(int index) const;
  ::milvus::proto::data::SegmentIDRequest* _internal_add_segmentidrequests();
  public:
  const ::milvus::proto::data::SegmentIDRequest& segmentidrequests(int index) const;
  ::milvus::proto::data::SegmentIDRequest* add_segmentidrequests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentIDRequest >&
      segmentidrequests() const;

  // string peer_role = 2;
  void clear_peer_role();
  const std::string& peer_role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_peer_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_peer_role();
  PROTOBUF_NODISCARD std::string* release_peer_role();
  void set_allocated_peer_role(std::string* peer_role);
  private:
  const std::string& _internal_peer_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peer_role(const std::string& value);
  std::string* _internal_mutable_peer_role();
  public:

  // int64 nodeID = 1;
  void clear_nodeid();
  int64_t nodeid() const;
  void set_nodeid(int64_t value);
  private:
  int64_t _internal_nodeid() const;
  void _internal_set_nodeid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.AssignSegmentIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentIDRequest > segmentidrequests_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_role_;
    int64_t nodeid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SegmentIDAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SegmentIDAssignment) */ {
 public:
  inline SegmentIDAssignment() : SegmentIDAssignment(nullptr) {}
  ~SegmentIDAssignment() override;
  explicit PROTOBUF_CONSTEXPR SegmentIDAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentIDAssignment(const SegmentIDAssignment& from);
  SegmentIDAssignment(SegmentIDAssignment&& from) noexcept
    : SegmentIDAssignment() {
    *this = ::std::move(from);
  }

  inline SegmentIDAssignment& operator=(const SegmentIDAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentIDAssignment& operator=(SegmentIDAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentIDAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentIDAssignment* internal_default_instance() {
    return reinterpret_cast<const SegmentIDAssignment*>(
               &_SegmentIDAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SegmentIDAssignment& a, SegmentIDAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentIDAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentIDAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentIDAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentIDAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentIDAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentIDAssignment& from) {
    SegmentIDAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentIDAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SegmentIDAssignment";
  }
  protected:
  explicit SegmentIDAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 2,
    kStatusFieldNumber = 7,
    kSegIDFieldNumber = 1,
    kCollectionIDFieldNumber = 4,
    kPartitionIDFieldNumber = 5,
    kExpireTimeFieldNumber = 6,
    kCountFieldNumber = 3,
  };
  // string channel_name = 2;
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_NODISCARD std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // .milvus.proto.common.Status status = 7;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // int64 segID = 1;
  void clear_segid();
  int64_t segid() const;
  void set_segid(int64_t value);
  private:
  int64_t _internal_segid() const;
  void _internal_set_segid(int64_t value);
  public:

  // int64 collectionID = 4;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 partitionID = 5;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // uint64 expire_time = 6;
  void clear_expire_time();
  uint64_t expire_time() const;
  void set_expire_time(uint64_t value);
  private:
  uint64_t _internal_expire_time() const;
  void _internal_set_expire_time(uint64_t value);
  public:

  // uint32 count = 3;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SegmentIDAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
    ::milvus::proto::common::Status* status_;
    int64_t segid_;
    int64_t collectionid_;
    int64_t partitionid_;
    uint64_t expire_time_;
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class AssignSegmentIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.AssignSegmentIDResponse) */ {
 public:
  inline AssignSegmentIDResponse() : AssignSegmentIDResponse(nullptr) {}
  ~AssignSegmentIDResponse() override;
  explicit PROTOBUF_CONSTEXPR AssignSegmentIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssignSegmentIDResponse(const AssignSegmentIDResponse& from);
  AssignSegmentIDResponse(AssignSegmentIDResponse&& from) noexcept
    : AssignSegmentIDResponse() {
    *this = ::std::move(from);
  }

  inline AssignSegmentIDResponse& operator=(const AssignSegmentIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignSegmentIDResponse& operator=(AssignSegmentIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssignSegmentIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssignSegmentIDResponse* internal_default_instance() {
    return reinterpret_cast<const AssignSegmentIDResponse*>(
               &_AssignSegmentIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AssignSegmentIDResponse& a, AssignSegmentIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignSegmentIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssignSegmentIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssignSegmentIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssignSegmentIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssignSegmentIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AssignSegmentIDResponse& from) {
    AssignSegmentIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignSegmentIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.AssignSegmentIDResponse";
  }
  protected:
  explicit AssignSegmentIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegIDAssignmentsFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .milvus.proto.data.SegmentIDAssignment segIDAssignments = 1;
  int segidassignments_size() const;
  private:
  int _internal_segidassignments_size() const;
  public:
  void clear_segidassignments();
  ::milvus::proto::data::SegmentIDAssignment* mutable_segidassignments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentIDAssignment >*
      mutable_segidassignments();
  private:
  const ::milvus::proto::data::SegmentIDAssignment& _internal_segidassignments(int index) const;
  ::milvus::proto::data::SegmentIDAssignment* _internal_add_segidassignments();
  public:
  const ::milvus::proto::data::SegmentIDAssignment& segidassignments(int index) const;
  ::milvus::proto::data::SegmentIDAssignment* add_segidassignments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentIDAssignment >&
      segidassignments() const;

  // .milvus.proto.common.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.AssignSegmentIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentIDAssignment > segidassignments_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetSegmentStatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetSegmentStatesRequest) */ {
 public:
  inline GetSegmentStatesRequest() : GetSegmentStatesRequest(nullptr) {}
  ~GetSegmentStatesRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSegmentStatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSegmentStatesRequest(const GetSegmentStatesRequest& from);
  GetSegmentStatesRequest(GetSegmentStatesRequest&& from) noexcept
    : GetSegmentStatesRequest() {
    *this = ::std::move(from);
  }

  inline GetSegmentStatesRequest& operator=(const GetSegmentStatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSegmentStatesRequest& operator=(GetSegmentStatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSegmentStatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSegmentStatesRequest* internal_default_instance() {
    return reinterpret_cast<const GetSegmentStatesRequest*>(
               &_GetSegmentStatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetSegmentStatesRequest& a, GetSegmentStatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSegmentStatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSegmentStatesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSegmentStatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSegmentStatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSegmentStatesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSegmentStatesRequest& from) {
    GetSegmentStatesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSegmentStatesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetSegmentStatesRequest";
  }
  protected:
  explicit GetSegmentStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDsFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated int64 segmentIDs = 2;
  int segmentids_size() const;
  private:
  int _internal_segmentids_size() const;
  public:
  void clear_segmentids();
  private:
  int64_t _internal_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segmentids() const;
  void _internal_add_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segmentids();
  public:
  int64_t segmentids(int index) const;
  void set_segmentids(int index, int64_t value);
  void add_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segmentids();

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetSegmentStatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segmentids_;
    mutable std::atomic<int> _segmentids_cached_byte_size_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SegmentStateInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SegmentStateInfo) */ {
 public:
  inline SegmentStateInfo() : SegmentStateInfo(nullptr) {}
  ~SegmentStateInfo() override;
  explicit PROTOBUF_CONSTEXPR SegmentStateInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentStateInfo(const SegmentStateInfo& from);
  SegmentStateInfo(SegmentStateInfo&& from) noexcept
    : SegmentStateInfo() {
    *this = ::std::move(from);
  }

  inline SegmentStateInfo& operator=(const SegmentStateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentStateInfo& operator=(SegmentStateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentStateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentStateInfo* internal_default_instance() {
    return reinterpret_cast<const SegmentStateInfo*>(
               &_SegmentStateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SegmentStateInfo& a, SegmentStateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentStateInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentStateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentStateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentStateInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentStateInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentStateInfo& from) {
    SegmentStateInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentStateInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SegmentStateInfo";
  }
  protected:
  explicit SegmentStateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPositionFieldNumber = 3,
    kEndPositionFieldNumber = 4,
    kStatusFieldNumber = 5,
    kSegmentIDFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .milvus.proto.msg.MsgPosition start_position = 3;
  bool has_start_position() const;
  private:
  bool _internal_has_start_position() const;
  public:
  void clear_start_position();
  const ::milvus::proto::msg::MsgPosition& start_position() const;
  PROTOBUF_NODISCARD ::milvus::proto::msg::MsgPosition* release_start_position();
  ::milvus::proto::msg::MsgPosition* mutable_start_position();
  void set_allocated_start_position(::milvus::proto::msg::MsgPosition* start_position);
  private:
  const ::milvus::proto::msg::MsgPosition& _internal_start_position() const;
  ::milvus::proto::msg::MsgPosition* _internal_mutable_start_position();
  public:
  void unsafe_arena_set_allocated_start_position(
      ::milvus::proto::msg::MsgPosition* start_position);
  ::milvus::proto::msg::MsgPosition* unsafe_arena_release_start_position();

  // .milvus.proto.msg.MsgPosition end_position = 4;
  bool has_end_position() const;
  private:
  bool _internal_has_end_position() const;
  public:
  void clear_end_position();
  const ::milvus::proto::msg::MsgPosition& end_position() const;
  PROTOBUF_NODISCARD ::milvus::proto::msg::MsgPosition* release_end_position();
  ::milvus::proto::msg::MsgPosition* mutable_end_position();
  void set_allocated_end_position(::milvus::proto::msg::MsgPosition* end_position);
  private:
  const ::milvus::proto::msg::MsgPosition& _internal_end_position() const;
  ::milvus::proto::msg::MsgPosition* _internal_mutable_end_position();
  public:
  void unsafe_arena_set_allocated_end_position(
      ::milvus::proto::msg::MsgPosition* end_position);
  ::milvus::proto::msg::MsgPosition* unsafe_arena_release_end_position();

  // .milvus.proto.common.Status status = 5;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // int64 segmentID = 1;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // .milvus.proto.common.SegmentState state = 2;
  void clear_state();
  ::milvus::proto::common::SegmentState state() const;
  void set_state(::milvus::proto::common::SegmentState value);
  private:
  ::milvus::proto::common::SegmentState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::SegmentState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SegmentStateInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::msg::MsgPosition* start_position_;
    ::milvus::proto::msg::MsgPosition* end_position_;
    ::milvus::proto::common::Status* status_;
    int64_t segmentid_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetSegmentStatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetSegmentStatesResponse) */ {
 public:
  inline GetSegmentStatesResponse() : GetSegmentStatesResponse(nullptr) {}
  ~GetSegmentStatesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSegmentStatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSegmentStatesResponse(const GetSegmentStatesResponse& from);
  GetSegmentStatesResponse(GetSegmentStatesResponse&& from) noexcept
    : GetSegmentStatesResponse() {
    *this = ::std::move(from);
  }

  inline GetSegmentStatesResponse& operator=(const GetSegmentStatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSegmentStatesResponse& operator=(GetSegmentStatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSegmentStatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSegmentStatesResponse* internal_default_instance() {
    return reinterpret_cast<const GetSegmentStatesResponse*>(
               &_GetSegmentStatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetSegmentStatesResponse& a, GetSegmentStatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSegmentStatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSegmentStatesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSegmentStatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSegmentStatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSegmentStatesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSegmentStatesResponse& from) {
    GetSegmentStatesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSegmentStatesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetSegmentStatesResponse";
  }
  protected:
  explicit GetSegmentStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.data.SegmentStateInfo states = 2;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::milvus::proto::data::SegmentStateInfo* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentStateInfo >*
      mutable_states();
  private:
  const ::milvus::proto::data::SegmentStateInfo& _internal_states(int index) const;
  ::milvus::proto::data::SegmentStateInfo* _internal_add_states();
  public:
  const ::milvus::proto::data::SegmentStateInfo& states(int index) const;
  ::milvus::proto::data::SegmentStateInfo* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentStateInfo >&
      states() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetSegmentStatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentStateInfo > states_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetSegmentInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetSegmentInfoRequest) */ {
 public:
  inline GetSegmentInfoRequest() : GetSegmentInfoRequest(nullptr) {}
  ~GetSegmentInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSegmentInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSegmentInfoRequest(const GetSegmentInfoRequest& from);
  GetSegmentInfoRequest(GetSegmentInfoRequest&& from) noexcept
    : GetSegmentInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetSegmentInfoRequest& operator=(const GetSegmentInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSegmentInfoRequest& operator=(GetSegmentInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSegmentInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSegmentInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetSegmentInfoRequest*>(
               &_GetSegmentInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetSegmentInfoRequest& a, GetSegmentInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSegmentInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSegmentInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSegmentInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSegmentInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSegmentInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSegmentInfoRequest& from) {
    GetSegmentInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSegmentInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetSegmentInfoRequest";
  }
  protected:
  explicit GetSegmentInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDsFieldNumber = 2,
    kBaseFieldNumber = 1,
    kIncludeUnHealthyFieldNumber = 3,
  };
  // repeated int64 segmentIDs = 2;
  int segmentids_size() const;
  private:
  int _internal_segmentids_size() const;
  public:
  void clear_segmentids();
  private:
  int64_t _internal_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segmentids() const;
  void _internal_add_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segmentids();
  public:
  int64_t segmentids(int index) const;
  void set_segmentids(int index, int64_t value);
  void add_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segmentids();

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // bool includeUnHealthy = 3;
  void clear_includeunhealthy();
  bool includeunhealthy() const;
  void set_includeunhealthy(bool value);
  private:
  bool _internal_includeunhealthy() const;
  void _internal_set_includeunhealthy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetSegmentInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segmentids_;
    mutable std::atomic<int> _segmentids_cached_byte_size_;
    ::milvus::proto::common::MsgBase* base_;
    bool includeunhealthy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse, 
    std::string, ::milvus::proto::msg::MsgPosition,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse, 
    std::string, ::milvus::proto::msg::MsgPosition,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse& other);
  static const GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse*>(&_GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "milvus.proto.data.GetSegmentInfoResponse.ChannelCheckpointEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_data_5fcoord_2eproto;
};

// -------------------------------------------------------------------

class GetSegmentInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetSegmentInfoResponse) */ {
 public:
  inline GetSegmentInfoResponse() : GetSegmentInfoResponse(nullptr) {}
  ~GetSegmentInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSegmentInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSegmentInfoResponse(const GetSegmentInfoResponse& from);
  GetSegmentInfoResponse(GetSegmentInfoResponse&& from) noexcept
    : GetSegmentInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetSegmentInfoResponse& operator=(const GetSegmentInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSegmentInfoResponse& operator=(GetSegmentInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSegmentInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSegmentInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetSegmentInfoResponse*>(
               &_GetSegmentInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetSegmentInfoResponse& a, GetSegmentInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSegmentInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSegmentInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSegmentInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSegmentInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSegmentInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSegmentInfoResponse& from) {
    GetSegmentInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSegmentInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetSegmentInfoResponse";
  }
  protected:
  explicit GetSegmentInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 2,
    kChannelCheckpointFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.data.SegmentInfo infos = 2;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::milvus::proto::data::SegmentInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >*
      mutable_infos();
  private:
  const ::milvus::proto::data::SegmentInfo& _internal_infos(int index) const;
  ::milvus::proto::data::SegmentInfo* _internal_add_infos();
  public:
  const ::milvus::proto::data::SegmentInfo& infos(int index) const;
  ::milvus::proto::data::SegmentInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >&
      infos() const;

  // map<string, .milvus.proto.msg.MsgPosition> channel_checkpoint = 3;
  int channel_checkpoint_size() const;
  private:
  int _internal_channel_checkpoint_size() const;
  public:
  void clear_channel_checkpoint();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::msg::MsgPosition >&
      _internal_channel_checkpoint() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::msg::MsgPosition >*
      _internal_mutable_channel_checkpoint();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::msg::MsgPosition >&
      channel_checkpoint() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::msg::MsgPosition >*
      mutable_channel_checkpoint();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetSegmentInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo > infos_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse,
        std::string, ::milvus::proto::msg::MsgPosition,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> channel_checkpoint_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetInsertBinlogPathsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetInsertBinlogPathsRequest) */ {
 public:
  inline GetInsertBinlogPathsRequest() : GetInsertBinlogPathsRequest(nullptr) {}
  ~GetInsertBinlogPathsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetInsertBinlogPathsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInsertBinlogPathsRequest(const GetInsertBinlogPathsRequest& from);
  GetInsertBinlogPathsRequest(GetInsertBinlogPathsRequest&& from) noexcept
    : GetInsertBinlogPathsRequest() {
    *this = ::std::move(from);
  }

  inline GetInsertBinlogPathsRequest& operator=(const GetInsertBinlogPathsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInsertBinlogPathsRequest& operator=(GetInsertBinlogPathsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInsertBinlogPathsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInsertBinlogPathsRequest* internal_default_instance() {
    return reinterpret_cast<const GetInsertBinlogPathsRequest*>(
               &_GetInsertBinlogPathsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetInsertBinlogPathsRequest& a, GetInsertBinlogPathsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInsertBinlogPathsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInsertBinlogPathsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInsertBinlogPathsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInsertBinlogPathsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInsertBinlogPathsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetInsertBinlogPathsRequest& from) {
    GetInsertBinlogPathsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInsertBinlogPathsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetInsertBinlogPathsRequest";
  }
  protected:
  explicit GetInsertBinlogPathsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kSegmentIDFieldNumber = 2,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 segmentID = 2;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetInsertBinlogPathsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    int64_t segmentid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetInsertBinlogPathsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetInsertBinlogPathsResponse) */ {
 public:
  inline GetInsertBinlogPathsResponse() : GetInsertBinlogPathsResponse(nullptr) {}
  ~GetInsertBinlogPathsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetInsertBinlogPathsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInsertBinlogPathsResponse(const GetInsertBinlogPathsResponse& from);
  GetInsertBinlogPathsResponse(GetInsertBinlogPathsResponse&& from) noexcept
    : GetInsertBinlogPathsResponse() {
    *this = ::std::move(from);
  }

  inline GetInsertBinlogPathsResponse& operator=(const GetInsertBinlogPathsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInsertBinlogPathsResponse& operator=(GetInsertBinlogPathsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInsertBinlogPathsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInsertBinlogPathsResponse* internal_default_instance() {
    return reinterpret_cast<const GetInsertBinlogPathsResponse*>(
               &_GetInsertBinlogPathsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetInsertBinlogPathsResponse& a, GetInsertBinlogPathsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInsertBinlogPathsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInsertBinlogPathsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInsertBinlogPathsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInsertBinlogPathsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInsertBinlogPathsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetInsertBinlogPathsResponse& from) {
    GetInsertBinlogPathsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInsertBinlogPathsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetInsertBinlogPathsResponse";
  }
  protected:
  explicit GetInsertBinlogPathsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldIDsFieldNumber = 1,
    kPathsFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // repeated int64 fieldIDs = 1;
  int fieldids_size() const;
  private:
  int _internal_fieldids_size() const;
  public:
  void clear_fieldids();
  private:
  int64_t _internal_fieldids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_fieldids() const;
  void _internal_add_fieldids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_fieldids();
  public:
  int64_t fieldids(int index) const;
  void set_fieldids(int index, int64_t value);
  void add_fieldids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      fieldids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_fieldids();

  // repeated .milvus.proto.internal.StringList paths = 2;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::milvus::proto::internal::StringList* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::internal::StringList >*
      mutable_paths();
  private:
  const ::milvus::proto::internal::StringList& _internal_paths(int index) const;
  ::milvus::proto::internal::StringList* _internal_add_paths();
  public:
  const ::milvus::proto::internal::StringList& paths(int index) const;
  ::milvus::proto::internal::StringList* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::internal::StringList >&
      paths() const;

  // .milvus.proto.common.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetInsertBinlogPathsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > fieldids_;
    mutable std::atomic<int> _fieldids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::internal::StringList > paths_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetCollectionStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetCollectionStatisticsRequest) */ {
 public:
  inline GetCollectionStatisticsRequest() : GetCollectionStatisticsRequest(nullptr) {}
  ~GetCollectionStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetCollectionStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCollectionStatisticsRequest(const GetCollectionStatisticsRequest& from);
  GetCollectionStatisticsRequest(GetCollectionStatisticsRequest&& from) noexcept
    : GetCollectionStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetCollectionStatisticsRequest& operator=(const GetCollectionStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollectionStatisticsRequest& operator=(GetCollectionStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCollectionStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCollectionStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetCollectionStatisticsRequest*>(
               &_GetCollectionStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetCollectionStatisticsRequest& a, GetCollectionStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCollectionStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCollectionStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCollectionStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCollectionStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCollectionStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCollectionStatisticsRequest& from) {
    GetCollectionStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollectionStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetCollectionStatisticsRequest";
  }
  protected:
  explicit GetCollectionStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 2,
    kCollectionIDFieldNumber = 3,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 2;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 3;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetCollectionStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    int64_t dbid_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetCollectionStatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetCollectionStatisticsResponse) */ {
 public:
  inline GetCollectionStatisticsResponse() : GetCollectionStatisticsResponse(nullptr) {}
  ~GetCollectionStatisticsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetCollectionStatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCollectionStatisticsResponse(const GetCollectionStatisticsResponse& from);
  GetCollectionStatisticsResponse(GetCollectionStatisticsResponse&& from) noexcept
    : GetCollectionStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline GetCollectionStatisticsResponse& operator=(const GetCollectionStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollectionStatisticsResponse& operator=(GetCollectionStatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCollectionStatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCollectionStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const GetCollectionStatisticsResponse*>(
               &_GetCollectionStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetCollectionStatisticsResponse& a, GetCollectionStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCollectionStatisticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCollectionStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCollectionStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCollectionStatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCollectionStatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCollectionStatisticsResponse& from) {
    GetCollectionStatisticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollectionStatisticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetCollectionStatisticsResponse";
  }
  protected:
  explicit GetCollectionStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .milvus.proto.common.KeyValuePair stats = 1;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::milvus::proto::common::KeyValuePair* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_stats();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_stats(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_stats();
  public:
  const ::milvus::proto::common::KeyValuePair& stats(int index) const;
  ::milvus::proto::common::KeyValuePair* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      stats() const;

  // .milvus.proto.common.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetCollectionStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > stats_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetPartitionStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetPartitionStatisticsRequest) */ {
 public:
  inline GetPartitionStatisticsRequest() : GetPartitionStatisticsRequest(nullptr) {}
  ~GetPartitionStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPartitionStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPartitionStatisticsRequest(const GetPartitionStatisticsRequest& from);
  GetPartitionStatisticsRequest(GetPartitionStatisticsRequest&& from) noexcept
    : GetPartitionStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetPartitionStatisticsRequest& operator=(const GetPartitionStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPartitionStatisticsRequest& operator=(GetPartitionStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPartitionStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPartitionStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetPartitionStatisticsRequest*>(
               &_GetPartitionStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetPartitionStatisticsRequest& a, GetPartitionStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPartitionStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPartitionStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPartitionStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPartitionStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPartitionStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPartitionStatisticsRequest& from) {
    GetPartitionStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPartitionStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetPartitionStatisticsRequest";
  }
  protected:
  explicit GetPartitionStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionIDsFieldNumber = 4,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 2,
    kCollectionIDFieldNumber = 3,
  };
  // repeated int64 partitionIDs = 4;
  int partitionids_size() const;
  private:
  int _internal_partitionids_size() const;
  public:
  void clear_partitionids();
  private:
  int64_t _internal_partitionids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_partitionids() const;
  void _internal_add_partitionids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_partitionids();
  public:
  int64_t partitionids(int index) const;
  void set_partitionids(int index, int64_t value);
  void add_partitionids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      partitionids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_partitionids();

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 2;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 3;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetPartitionStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > partitionids_;
    mutable std::atomic<int> _partitionids_cached_byte_size_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t dbid_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetPartitionStatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetPartitionStatisticsResponse) */ {
 public:
  inline GetPartitionStatisticsResponse() : GetPartitionStatisticsResponse(nullptr) {}
  ~GetPartitionStatisticsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPartitionStatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPartitionStatisticsResponse(const GetPartitionStatisticsResponse& from);
  GetPartitionStatisticsResponse(GetPartitionStatisticsResponse&& from) noexcept
    : GetPartitionStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline GetPartitionStatisticsResponse& operator=(const GetPartitionStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPartitionStatisticsResponse& operator=(GetPartitionStatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPartitionStatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPartitionStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const GetPartitionStatisticsResponse*>(
               &_GetPartitionStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetPartitionStatisticsResponse& a, GetPartitionStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPartitionStatisticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPartitionStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPartitionStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPartitionStatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPartitionStatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPartitionStatisticsResponse& from) {
    GetPartitionStatisticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPartitionStatisticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetPartitionStatisticsResponse";
  }
  protected:
  explicit GetPartitionStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .milvus.proto.common.KeyValuePair stats = 1;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::milvus::proto::common::KeyValuePair* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_stats();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_stats(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_stats();
  public:
  const ::milvus::proto::common::KeyValuePair& stats(int index) const;
  ::milvus::proto::common::KeyValuePair* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      stats() const;

  // .milvus.proto.common.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetPartitionStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > stats_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetSegmentInfoChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetSegmentInfoChannelRequest) */ {
 public:
  inline GetSegmentInfoChannelRequest() : GetSegmentInfoChannelRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetSegmentInfoChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSegmentInfoChannelRequest(const GetSegmentInfoChannelRequest& from);
  GetSegmentInfoChannelRequest(GetSegmentInfoChannelRequest&& from) noexcept
    : GetSegmentInfoChannelRequest() {
    *this = ::std::move(from);
  }

  inline GetSegmentInfoChannelRequest& operator=(const GetSegmentInfoChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSegmentInfoChannelRequest& operator=(GetSegmentInfoChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSegmentInfoChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSegmentInfoChannelRequest* internal_default_instance() {
    return reinterpret_cast<const GetSegmentInfoChannelRequest*>(
               &_GetSegmentInfoChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetSegmentInfoChannelRequest& a, GetSegmentInfoChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSegmentInfoChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSegmentInfoChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSegmentInfoChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSegmentInfoChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetSegmentInfoChannelRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetSegmentInfoChannelRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetSegmentInfoChannelRequest";
  }
  protected:
  explicit GetSegmentInfoChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetSegmentInfoChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class VchannelInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.VchannelInfo) */ {
 public:
  inline VchannelInfo() : VchannelInfo(nullptr) {}
  ~VchannelInfo() override;
  explicit PROTOBUF_CONSTEXPR VchannelInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VchannelInfo(const VchannelInfo& from);
  VchannelInfo(VchannelInfo&& from) noexcept
    : VchannelInfo() {
    *this = ::std::move(from);
  }

  inline VchannelInfo& operator=(const VchannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VchannelInfo& operator=(VchannelInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VchannelInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VchannelInfo* internal_default_instance() {
    return reinterpret_cast<const VchannelInfo*>(
               &_VchannelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(VchannelInfo& a, VchannelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VchannelInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VchannelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VchannelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VchannelInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VchannelInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VchannelInfo& from) {
    VchannelInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VchannelInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.VchannelInfo";
  }
  protected:
  explicit VchannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnflushedSegmentsFieldNumber = 4,
    kFlushedSegmentsFieldNumber = 5,
    kDroppedSegmentsFieldNumber = 6,
    kUnflushedSegmentIdsFieldNumber = 7,
    kFlushedSegmentIdsFieldNumber = 8,
    kDroppedSegmentIdsFieldNumber = 9,
    kIndexedSegmentIdsFieldNumber = 10,
    kIndexedSegmentsFieldNumber = 11,
    kChannelNameFieldNumber = 2,
    kSeekPositionFieldNumber = 3,
    kCollectionIDFieldNumber = 1,
  };
  // repeated .milvus.proto.data.SegmentInfo unflushedSegments = 4;
  int unflushedsegments_size() const;
  private:
  int _internal_unflushedsegments_size() const;
  public:
  void clear_unflushedsegments();
  ::milvus::proto::data::SegmentInfo* mutable_unflushedsegments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >*
      mutable_unflushedsegments();
  private:
  const ::milvus::proto::data::SegmentInfo& _internal_unflushedsegments(int index) const;
  ::milvus::proto::data::SegmentInfo* _internal_add_unflushedsegments();
  public:
  const ::milvus::proto::data::SegmentInfo& unflushedsegments(int index) const;
  ::milvus::proto::data::SegmentInfo* add_unflushedsegments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >&
      unflushedsegments() const;

  // repeated .milvus.proto.data.SegmentInfo flushedSegments = 5;
  int flushedsegments_size() const;
  private:
  int _internal_flushedsegments_size() const;
  public:
  void clear_flushedsegments();
  ::milvus::proto::data::SegmentInfo* mutable_flushedsegments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >*
      mutable_flushedsegments();
  private:
  const ::milvus::proto::data::SegmentInfo& _internal_flushedsegments(int index) const;
  ::milvus::proto::data::SegmentInfo* _internal_add_flushedsegments();
  public:
  const ::milvus::proto::data::SegmentInfo& flushedsegments(int index) const;
  ::milvus::proto::data::SegmentInfo* add_flushedsegments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >&
      flushedsegments() const;

  // repeated .milvus.proto.data.SegmentInfo dropped_segments = 6;
  int dropped_segments_size() const;
  private:
  int _internal_dropped_segments_size() const;
  public:
  void clear_dropped_segments();
  ::milvus::proto::data::SegmentInfo* mutable_dropped_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >*
      mutable_dropped_segments();
  private:
  const ::milvus::proto::data::SegmentInfo& _internal_dropped_segments(int index) const;
  ::milvus::proto::data::SegmentInfo* _internal_add_dropped_segments();
  public:
  const ::milvus::proto::data::SegmentInfo& dropped_segments(int index) const;
  ::milvus::proto::data::SegmentInfo* add_dropped_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >&
      dropped_segments() const;

  // repeated int64 unflushedSegmentIds = 7;
  int unflushedsegmentids_size() const;
  private:
  int _internal_unflushedsegmentids_size() const;
  public:
  void clear_unflushedsegmentids();
  private:
  int64_t _internal_unflushedsegmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_unflushedsegmentids() const;
  void _internal_add_unflushedsegmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_unflushedsegmentids();
  public:
  int64_t unflushedsegmentids(int index) const;
  void set_unflushedsegmentids(int index, int64_t value);
  void add_unflushedsegmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      unflushedsegmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_unflushedsegmentids();

  // repeated int64 flushedSegmentIds = 8;
  int flushedsegmentids_size() const;
  private:
  int _internal_flushedsegmentids_size() const;
  public:
  void clear_flushedsegmentids();
  private:
  int64_t _internal_flushedsegmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_flushedsegmentids() const;
  void _internal_add_flushedsegmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_flushedsegmentids();
  public:
  int64_t flushedsegmentids(int index) const;
  void set_flushedsegmentids(int index, int64_t value);
  void add_flushedsegmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      flushedsegmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_flushedsegmentids();

  // repeated int64 dropped_segmentIds = 9;
  int dropped_segmentids_size() const;
  private:
  int _internal_dropped_segmentids_size() const;
  public:
  void clear_dropped_segmentids();
  private:
  int64_t _internal_dropped_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_dropped_segmentids() const;
  void _internal_add_dropped_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_dropped_segmentids();
  public:
  int64_t dropped_segmentids(int index) const;
  void set_dropped_segmentids(int index, int64_t value);
  void add_dropped_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      dropped_segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_dropped_segmentids();

  // repeated int64 indexed_segmentIds = 10;
  int indexed_segmentids_size() const;
  private:
  int _internal_indexed_segmentids_size() const;
  public:
  void clear_indexed_segmentids();
  private:
  int64_t _internal_indexed_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_indexed_segmentids() const;
  void _internal_add_indexed_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_indexed_segmentids();
  public:
  int64_t indexed_segmentids(int index) const;
  void set_indexed_segmentids(int index, int64_t value);
  void add_indexed_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      indexed_segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_indexed_segmentids();

  // repeated .milvus.proto.data.SegmentInfo indexed_segments = 11;
  int indexed_segments_size() const;
  private:
  int _internal_indexed_segments_size() const;
  public:
  void clear_indexed_segments();
  ::milvus::proto::data::SegmentInfo* mutable_indexed_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >*
      mutable_indexed_segments();
  private:
  const ::milvus::proto::data::SegmentInfo& _internal_indexed_segments(int index) const;
  ::milvus::proto::data::SegmentInfo* _internal_add_indexed_segments();
  public:
  const ::milvus::proto::data::SegmentInfo& indexed_segments(int index) const;
  ::milvus::proto::data::SegmentInfo* add_indexed_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >&
      indexed_segments() const;

  // string channelName = 2;
  void clear_channelname();
  const std::string& channelname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelname();
  PROTOBUF_NODISCARD std::string* release_channelname();
  void set_allocated_channelname(std::string* channelname);
  private:
  const std::string& _internal_channelname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelname(const std::string& value);
  std::string* _internal_mutable_channelname();
  public:

  // .milvus.proto.msg.MsgPosition seek_position = 3;
  bool has_seek_position() const;
  private:
  bool _internal_has_seek_position() const;
  public:
  void clear_seek_position();
  const ::milvus::proto::msg::MsgPosition& seek_position() const;
  PROTOBUF_NODISCARD ::milvus::proto::msg::MsgPosition* release_seek_position();
  ::milvus::proto::msg::MsgPosition* mutable_seek_position();
  void set_allocated_seek_position(::milvus::proto::msg::MsgPosition* seek_position);
  private:
  const ::milvus::proto::msg::MsgPosition& _internal_seek_position() const;
  ::milvus::proto::msg::MsgPosition* _internal_mutable_seek_position();
  public:
  void unsafe_arena_set_allocated_seek_position(
      ::milvus::proto::msg::MsgPosition* seek_position);
  ::milvus::proto::msg::MsgPosition* unsafe_arena_release_seek_position();

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.VchannelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo > unflushedsegments_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo > flushedsegments_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo > dropped_segments_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > unflushedsegmentids_;
    mutable std::atomic<int> _unflushedsegmentids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > flushedsegmentids_;
    mutable std::atomic<int> _flushedsegmentids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > dropped_segmentids_;
    mutable std::atomic<int> _dropped_segmentids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > indexed_segmentids_;
    mutable std::atomic<int> _indexed_segmentids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo > indexed_segments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelname_;
    ::milvus::proto::msg::MsgPosition* seek_position_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class WatchDmChannelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.WatchDmChannelsRequest) */ {
 public:
  inline WatchDmChannelsRequest() : WatchDmChannelsRequest(nullptr) {}
  ~WatchDmChannelsRequest() override;
  explicit PROTOBUF_CONSTEXPR WatchDmChannelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchDmChannelsRequest(const WatchDmChannelsRequest& from);
  WatchDmChannelsRequest(WatchDmChannelsRequest&& from) noexcept
    : WatchDmChannelsRequest() {
    *this = ::std::move(from);
  }

  inline WatchDmChannelsRequest& operator=(const WatchDmChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchDmChannelsRequest& operator=(WatchDmChannelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchDmChannelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchDmChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const WatchDmChannelsRequest*>(
               &_WatchDmChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(WatchDmChannelsRequest& a, WatchDmChannelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchDmChannelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchDmChannelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchDmChannelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchDmChannelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchDmChannelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WatchDmChannelsRequest& from) {
    WatchDmChannelsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchDmChannelsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.WatchDmChannelsRequest";
  }
  protected:
  explicit WatchDmChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVchannelsFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated .milvus.proto.data.VchannelInfo vchannels = 2;
  int vchannels_size() const;
  private:
  int _internal_vchannels_size() const;
  public:
  void clear_vchannels();
  ::milvus::proto::data::VchannelInfo* mutable_vchannels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo >*
      mutable_vchannels();
  private:
  const ::milvus::proto::data::VchannelInfo& _internal_vchannels(int index) const;
  ::milvus::proto::data::VchannelInfo* _internal_add_vchannels();
  public:
  const ::milvus::proto::data::VchannelInfo& vchannels(int index) const;
  ::milvus::proto::data::VchannelInfo* add_vchannels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo >&
      vchannels() const;

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.WatchDmChannelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo > vchannels_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class FlushSegmentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.FlushSegmentsRequest) */ {
 public:
  inline FlushSegmentsRequest() : FlushSegmentsRequest(nullptr) {}
  ~FlushSegmentsRequest() override;
  explicit PROTOBUF_CONSTEXPR FlushSegmentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlushSegmentsRequest(const FlushSegmentsRequest& from);
  FlushSegmentsRequest(FlushSegmentsRequest&& from) noexcept
    : FlushSegmentsRequest() {
    *this = ::std::move(from);
  }

  inline FlushSegmentsRequest& operator=(const FlushSegmentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushSegmentsRequest& operator=(FlushSegmentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushSegmentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushSegmentsRequest* internal_default_instance() {
    return reinterpret_cast<const FlushSegmentsRequest*>(
               &_FlushSegmentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(FlushSegmentsRequest& a, FlushSegmentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushSegmentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushSegmentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushSegmentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushSegmentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlushSegmentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlushSegmentsRequest& from) {
    FlushSegmentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushSegmentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.FlushSegmentsRequest";
  }
  protected:
  explicit FlushSegmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDsFieldNumber = 4,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 2,
    kCollectionIDFieldNumber = 3,
  };
  // repeated int64 segmentIDs = 4;
  int segmentids_size() const;
  private:
  int _internal_segmentids_size() const;
  public:
  void clear_segmentids();
  private:
  int64_t _internal_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segmentids() const;
  void _internal_add_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segmentids();
  public:
  int64_t segmentids(int index) const;
  void set_segmentids(int index, int64_t value);
  void add_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segmentids();

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 2;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 3;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.FlushSegmentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segmentids_;
    mutable std::atomic<int> _segmentids_cached_byte_size_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t dbid_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SegmentMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SegmentMsg) */ {
 public:
  inline SegmentMsg() : SegmentMsg(nullptr) {}
  ~SegmentMsg() override;
  explicit PROTOBUF_CONSTEXPR SegmentMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentMsg(const SegmentMsg& from);
  SegmentMsg(SegmentMsg&& from) noexcept
    : SegmentMsg() {
    *this = ::std::move(from);
  }

  inline SegmentMsg& operator=(const SegmentMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentMsg& operator=(SegmentMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentMsg* internal_default_instance() {
    return reinterpret_cast<const SegmentMsg*>(
               &_SegmentMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SegmentMsg& a, SegmentMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentMsg& from) {
    SegmentMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SegmentMsg";
  }
  protected:
  explicit SegmentMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kSegmentFieldNumber = 2,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.data.SegmentInfo segment = 2;
  bool has_segment() const;
  private:
  bool _internal_has_segment() const;
  public:
  void clear_segment();
  const ::milvus::proto::data::SegmentInfo& segment() const;
  PROTOBUF_NODISCARD ::milvus::proto::data::SegmentInfo* release_segment();
  ::milvus::proto::data::SegmentInfo* mutable_segment();
  void set_allocated_segment(::milvus::proto::data::SegmentInfo* segment);
  private:
  const ::milvus::proto::data::SegmentInfo& _internal_segment() const;
  ::milvus::proto::data::SegmentInfo* _internal_mutable_segment();
  public:
  void unsafe_arena_set_allocated_segment(
      ::milvus::proto::data::SegmentInfo* segment);
  ::milvus::proto::data::SegmentInfo* unsafe_arena_release_segment();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SegmentMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::data::SegmentInfo* segment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SegmentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SegmentInfo) */ {
 public:
  inline SegmentInfo() : SegmentInfo(nullptr) {}
  ~SegmentInfo() override;
  explicit PROTOBUF_CONSTEXPR SegmentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentInfo(const SegmentInfo& from);
  SegmentInfo(SegmentInfo&& from) noexcept
    : SegmentInfo() {
    *this = ::std::move(from);
  }

  inline SegmentInfo& operator=(const SegmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentInfo& operator=(SegmentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentInfo* internal_default_instance() {
    return reinterpret_cast<const SegmentInfo*>(
               &_SegmentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SegmentInfo& a, SegmentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentInfo& from) {
    SegmentInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SegmentInfo";
  }
  protected:
  explicit SegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinlogsFieldNumber = 11,
    kStatslogsFieldNumber = 12,
    kDeltalogsFieldNumber = 13,
    kCompactionFromFieldNumber = 15,
    kInsertChannelFieldNumber = 4,
    kStartPositionFieldNumber = 9,
    kDmlPositionFieldNumber = 10,
    kIDFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kPartitionIDFieldNumber = 3,
    kNumOfRowsFieldNumber = 5,
    kMaxRowNumFieldNumber = 7,
    kLastExpireTimeFieldNumber = 8,
    kStateFieldNumber = 6,
    kCreatedByCompactionFieldNumber = 14,
    kIsImportingFieldNumber = 17,
    kIsFakeFieldNumber = 18,
    kDroppedAtFieldNumber = 16,
  };
  // repeated .milvus.proto.data.FieldBinlog binlogs = 11;
  int binlogs_size() const;
  private:
  int _internal_binlogs_size() const;
  public:
  void clear_binlogs();
  ::milvus::proto::data::FieldBinlog* mutable_binlogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_binlogs();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_binlogs(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_binlogs();
  public:
  const ::milvus::proto::data::FieldBinlog& binlogs(int index) const;
  ::milvus::proto::data::FieldBinlog* add_binlogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      binlogs() const;

  // repeated .milvus.proto.data.FieldBinlog statslogs = 12;
  int statslogs_size() const;
  private:
  int _internal_statslogs_size() const;
  public:
  void clear_statslogs();
  ::milvus::proto::data::FieldBinlog* mutable_statslogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_statslogs();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_statslogs(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_statslogs();
  public:
  const ::milvus::proto::data::FieldBinlog& statslogs(int index) const;
  ::milvus::proto::data::FieldBinlog* add_statslogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      statslogs() const;

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 13;
  int deltalogs_size() const;
  private:
  int _internal_deltalogs_size() const;
  public:
  void clear_deltalogs();
  ::milvus::proto::data::FieldBinlog* mutable_deltalogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_deltalogs();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_deltalogs(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_deltalogs();
  public:
  const ::milvus::proto::data::FieldBinlog& deltalogs(int index) const;
  ::milvus::proto::data::FieldBinlog* add_deltalogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      deltalogs() const;

  // repeated int64 compactionFrom = 15;
  int compactionfrom_size() const;
  private:
  int _internal_compactionfrom_size() const;
  public:
  void clear_compactionfrom();
  private:
  int64_t _internal_compactionfrom(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_compactionfrom() const;
  void _internal_add_compactionfrom(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_compactionfrom();
  public:
  int64_t compactionfrom(int index) const;
  void set_compactionfrom(int index, int64_t value);
  void add_compactionfrom(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      compactionfrom() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_compactionfrom();

  // string insert_channel = 4;
  void clear_insert_channel();
  const std::string& insert_channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_insert_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_insert_channel();
  PROTOBUF_NODISCARD std::string* release_insert_channel();
  void set_allocated_insert_channel(std::string* insert_channel);
  private:
  const std::string& _internal_insert_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_insert_channel(const std::string& value);
  std::string* _internal_mutable_insert_channel();
  public:

  // .milvus.proto.msg.MsgPosition start_position = 9;
  bool has_start_position() const;
  private:
  bool _internal_has_start_position() const;
  public:
  void clear_start_position();
  const ::milvus::proto::msg::MsgPosition& start_position() const;
  PROTOBUF_NODISCARD ::milvus::proto::msg::MsgPosition* release_start_position();
  ::milvus::proto::msg::MsgPosition* mutable_start_position();
  void set_allocated_start_position(::milvus::proto::msg::MsgPosition* start_position);
  private:
  const ::milvus::proto::msg::MsgPosition& _internal_start_position() const;
  ::milvus::proto::msg::MsgPosition* _internal_mutable_start_position();
  public:
  void unsafe_arena_set_allocated_start_position(
      ::milvus::proto::msg::MsgPosition* start_position);
  ::milvus::proto::msg::MsgPosition* unsafe_arena_release_start_position();

  // .milvus.proto.msg.MsgPosition dml_position = 10;
  bool has_dml_position() const;
  private:
  bool _internal_has_dml_position() const;
  public:
  void clear_dml_position();
  const ::milvus::proto::msg::MsgPosition& dml_position() const;
  PROTOBUF_NODISCARD ::milvus::proto::msg::MsgPosition* release_dml_position();
  ::milvus::proto::msg::MsgPosition* mutable_dml_position();
  void set_allocated_dml_position(::milvus::proto::msg::MsgPosition* dml_position);
  private:
  const ::milvus::proto::msg::MsgPosition& _internal_dml_position() const;
  ::milvus::proto::msg::MsgPosition* _internal_mutable_dml_position();
  public:
  void unsafe_arena_set_allocated_dml_position(
      ::milvus::proto::msg::MsgPosition* dml_position);
  ::milvus::proto::msg::MsgPosition* unsafe_arena_release_dml_position();

  // int64 ID = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 collectionID = 2;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 partitionID = 3;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // int64 num_of_rows = 5;
  void clear_num_of_rows();
  int64_t num_of_rows() const;
  void set_num_of_rows(int64_t value);
  private:
  int64_t _internal_num_of_rows() const;
  void _internal_set_num_of_rows(int64_t value);
  public:

  // int64 max_row_num = 7;
  void clear_max_row_num();
  int64_t max_row_num() const;
  void set_max_row_num(int64_t value);
  private:
  int64_t _internal_max_row_num() const;
  void _internal_set_max_row_num(int64_t value);
  public:

  // uint64 last_expire_time = 8;
  void clear_last_expire_time();
  uint64_t last_expire_time() const;
  void set_last_expire_time(uint64_t value);
  private:
  uint64_t _internal_last_expire_time() const;
  void _internal_set_last_expire_time(uint64_t value);
  public:

  // .milvus.proto.common.SegmentState state = 6;
  void clear_state();
  ::milvus::proto::common::SegmentState state() const;
  void set_state(::milvus::proto::common::SegmentState value);
  private:
  ::milvus::proto::common::SegmentState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::SegmentState value);
  public:

  // bool createdByCompaction = 14;
  void clear_createdbycompaction();
  bool createdbycompaction() const;
  void set_createdbycompaction(bool value);
  private:
  bool _internal_createdbycompaction() const;
  void _internal_set_createdbycompaction(bool value);
  public:

  // bool is_importing = 17;
  void clear_is_importing();
  bool is_importing() const;
  void set_is_importing(bool value);
  private:
  bool _internal_is_importing() const;
  void _internal_set_is_importing(bool value);
  public:

  // bool is_fake = 18;
  void clear_is_fake();
  bool is_fake() const;
  void set_is_fake(bool value);
  private:
  bool _internal_is_fake() const;
  void _internal_set_is_fake(bool value);
  public:

  // uint64 dropped_at = 16;
  void clear_dropped_at();
  uint64_t dropped_at() const;
  void set_dropped_at(uint64_t value);
  private:
  uint64_t _internal_dropped_at() const;
  void _internal_set_dropped_at(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SegmentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > binlogs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > statslogs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > deltalogs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > compactionfrom_;
    mutable std::atomic<int> _compactionfrom_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_channel_;
    ::milvus::proto::msg::MsgPosition* start_position_;
    ::milvus::proto::msg::MsgPosition* dml_position_;
    int64_t id_;
    int64_t collectionid_;
    int64_t partitionid_;
    int64_t num_of_rows_;
    int64_t max_row_num_;
    uint64_t last_expire_time_;
    int state_;
    bool createdbycompaction_;
    bool is_importing_;
    bool is_fake_;
    uint64_t dropped_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SegmentStartPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SegmentStartPosition) */ {
 public:
  inline SegmentStartPosition() : SegmentStartPosition(nullptr) {}
  ~SegmentStartPosition() override;
  explicit PROTOBUF_CONSTEXPR SegmentStartPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentStartPosition(const SegmentStartPosition& from);
  SegmentStartPosition(SegmentStartPosition&& from) noexcept
    : SegmentStartPosition() {
    *this = ::std::move(from);
  }

  inline SegmentStartPosition& operator=(const SegmentStartPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentStartPosition& operator=(SegmentStartPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentStartPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentStartPosition* internal_default_instance() {
    return reinterpret_cast<const SegmentStartPosition*>(
               &_SegmentStartPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SegmentStartPosition& a, SegmentStartPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentStartPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentStartPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentStartPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentStartPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentStartPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentStartPosition& from) {
    SegmentStartPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentStartPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SegmentStartPosition";
  }
  protected:
  explicit SegmentStartPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPositionFieldNumber = 1,
    kSegmentIDFieldNumber = 2,
  };
  // .milvus.proto.msg.MsgPosition start_position = 1;
  bool has_start_position() const;
  private:
  bool _internal_has_start_position() const;
  public:
  void clear_start_position();
  const ::milvus::proto::msg::MsgPosition& start_position() const;
  PROTOBUF_NODISCARD ::milvus::proto::msg::MsgPosition* release_start_position();
  ::milvus::proto::msg::MsgPosition* mutable_start_position();
  void set_allocated_start_position(::milvus::proto::msg::MsgPosition* start_position);
  private:
  const ::milvus::proto::msg::MsgPosition& _internal_start_position() const;
  ::milvus::proto::msg::MsgPosition* _internal_mutable_start_position();
  public:
  void unsafe_arena_set_allocated_start_position(
      ::milvus::proto::msg::MsgPosition* start_position);
  ::milvus::proto::msg::MsgPosition* unsafe_arena_release_start_position();

  // int64 segmentID = 2;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SegmentStartPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::msg::MsgPosition* start_position_;
    int64_t segmentid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SaveBinlogPathsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SaveBinlogPathsRequest) */ {
 public:
  inline SaveBinlogPathsRequest() : SaveBinlogPathsRequest(nullptr) {}
  ~SaveBinlogPathsRequest() override;
  explicit PROTOBUF_CONSTEXPR SaveBinlogPathsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveBinlogPathsRequest(const SaveBinlogPathsRequest& from);
  SaveBinlogPathsRequest(SaveBinlogPathsRequest&& from) noexcept
    : SaveBinlogPathsRequest() {
    *this = ::std::move(from);
  }

  inline SaveBinlogPathsRequest& operator=(const SaveBinlogPathsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveBinlogPathsRequest& operator=(SaveBinlogPathsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveBinlogPathsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveBinlogPathsRequest* internal_default_instance() {
    return reinterpret_cast<const SaveBinlogPathsRequest*>(
               &_SaveBinlogPathsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SaveBinlogPathsRequest& a, SaveBinlogPathsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveBinlogPathsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveBinlogPathsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveBinlogPathsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SaveBinlogPathsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaveBinlogPathsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SaveBinlogPathsRequest& from) {
    SaveBinlogPathsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveBinlogPathsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SaveBinlogPathsRequest";
  }
  protected:
  explicit SaveBinlogPathsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kField2BinlogPathsFieldNumber = 4,
    kCheckPointsFieldNumber = 5,
    kStartPositionsFieldNumber = 6,
    kField2StatslogPathsFieldNumber = 8,
    kDeltalogsFieldNumber = 9,
    kChannelFieldNumber = 12,
    kBaseFieldNumber = 1,
    kSegmentIDFieldNumber = 2,
    kCollectionIDFieldNumber = 3,
    kFlushedFieldNumber = 7,
    kDroppedFieldNumber = 10,
    kImportingFieldNumber = 11,
  };
  // repeated .milvus.proto.data.FieldBinlog field2BinlogPaths = 4;
  int field2binlogpaths_size() const;
  private:
  int _internal_field2binlogpaths_size() const;
  public:
  void clear_field2binlogpaths();
  ::milvus::proto::data::FieldBinlog* mutable_field2binlogpaths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_field2binlogpaths();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_field2binlogpaths(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_field2binlogpaths();
  public:
  const ::milvus::proto::data::FieldBinlog& field2binlogpaths(int index) const;
  ::milvus::proto::data::FieldBinlog* add_field2binlogpaths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      field2binlogpaths() const;

  // repeated .milvus.proto.data.CheckPoint checkPoints = 5;
  int checkpoints_size() const;
  private:
  int _internal_checkpoints_size() const;
  public:
  void clear_checkpoints();
  ::milvus::proto::data::CheckPoint* mutable_checkpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CheckPoint >*
      mutable_checkpoints();
  private:
  const ::milvus::proto::data::CheckPoint& _internal_checkpoints(int index) const;
  ::milvus::proto::data::CheckPoint* _internal_add_checkpoints();
  public:
  const ::milvus::proto::data::CheckPoint& checkpoints(int index) const;
  ::milvus::proto::data::CheckPoint* add_checkpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CheckPoint >&
      checkpoints() const;

  // repeated .milvus.proto.data.SegmentStartPosition start_positions = 6;
  int start_positions_size() const;
  private:
  int _internal_start_positions_size() const;
  public:
  void clear_start_positions();
  ::milvus::proto::data::SegmentStartPosition* mutable_start_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentStartPosition >*
      mutable_start_positions();
  private:
  const ::milvus::proto::data::SegmentStartPosition& _internal_start_positions(int index) const;
  ::milvus::proto::data::SegmentStartPosition* _internal_add_start_positions();
  public:
  const ::milvus::proto::data::SegmentStartPosition& start_positions(int index) const;
  ::milvus::proto::data::SegmentStartPosition* add_start_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentStartPosition >&
      start_positions() const;

  // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 8;
  int field2statslogpaths_size() const;
  private:
  int _internal_field2statslogpaths_size() const;
  public:
  void clear_field2statslogpaths();
  ::milvus::proto::data::FieldBinlog* mutable_field2statslogpaths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_field2statslogpaths();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_field2statslogpaths(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_field2statslogpaths();
  public:
  const ::milvus::proto::data::FieldBinlog& field2statslogpaths(int index) const;
  ::milvus::proto::data::FieldBinlog* add_field2statslogpaths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      field2statslogpaths() const;

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 9;
  int deltalogs_size() const;
  private:
  int _internal_deltalogs_size() const;
  public:
  void clear_deltalogs();
  ::milvus::proto::data::FieldBinlog* mutable_deltalogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_deltalogs();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_deltalogs(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_deltalogs();
  public:
  const ::milvus::proto::data::FieldBinlog& deltalogs(int index) const;
  ::milvus::proto::data::FieldBinlog* add_deltalogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      deltalogs() const;

  // string channel = 12;
  void clear_channel();
  const std::string& channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 segmentID = 2;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // int64 collectionID = 3;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // bool flushed = 7;
  void clear_flushed();
  bool flushed() const;
  void set_flushed(bool value);
  private:
  bool _internal_flushed() const;
  void _internal_set_flushed(bool value);
  public:

  // bool dropped = 10;
  void clear_dropped();
  bool dropped() const;
  void set_dropped(bool value);
  private:
  bool _internal_dropped() const;
  void _internal_set_dropped(bool value);
  public:

  // bool importing = 11;
  void clear_importing();
  bool importing() const;
  void set_importing(bool value);
  private:
  bool _internal_importing() const;
  void _internal_set_importing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SaveBinlogPathsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > field2binlogpaths_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CheckPoint > checkpoints_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentStartPosition > start_positions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > field2statslogpaths_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > deltalogs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t segmentid_;
    int64_t collectionid_;
    bool flushed_;
    bool dropped_;
    bool importing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class CheckPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.CheckPoint) */ {
 public:
  inline CheckPoint() : CheckPoint(nullptr) {}
  ~CheckPoint() override;
  explicit PROTOBUF_CONSTEXPR CheckPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckPoint(const CheckPoint& from);
  CheckPoint(CheckPoint&& from) noexcept
    : CheckPoint() {
    *this = ::std::move(from);
  }

  inline CheckPoint& operator=(const CheckPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckPoint& operator=(CheckPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckPoint* internal_default_instance() {
    return reinterpret_cast<const CheckPoint*>(
               &_CheckPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CheckPoint& a, CheckPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckPoint& from) {
    CheckPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.CheckPoint";
  }
  protected:
  explicit CheckPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kSegmentIDFieldNumber = 1,
    kNumOfRowsFieldNumber = 3,
  };
  // .milvus.proto.msg.MsgPosition position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::milvus::proto::msg::MsgPosition& position() const;
  PROTOBUF_NODISCARD ::milvus::proto::msg::MsgPosition* release_position();
  ::milvus::proto::msg::MsgPosition* mutable_position();
  void set_allocated_position(::milvus::proto::msg::MsgPosition* position);
  private:
  const ::milvus::proto::msg::MsgPosition& _internal_position() const;
  ::milvus::proto::msg::MsgPosition* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::milvus::proto::msg::MsgPosition* position);
  ::milvus::proto::msg::MsgPosition* unsafe_arena_release_position();

  // int64 segmentID = 1;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // int64 num_of_rows = 3;
  void clear_num_of_rows();
  int64_t num_of_rows() const;
  void set_num_of_rows(int64_t value);
  private:
  int64_t _internal_num_of_rows() const;
  void _internal_set_num_of_rows(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.CheckPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::msg::MsgPosition* position_;
    int64_t segmentid_;
    int64_t num_of_rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class DeltaLogInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.DeltaLogInfo) */ {
 public:
  inline DeltaLogInfo() : DeltaLogInfo(nullptr) {}
  ~DeltaLogInfo() override;
  explicit PROTOBUF_CONSTEXPR DeltaLogInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeltaLogInfo(const DeltaLogInfo& from);
  DeltaLogInfo(DeltaLogInfo&& from) noexcept
    : DeltaLogInfo() {
    *this = ::std::move(from);
  }

  inline DeltaLogInfo& operator=(const DeltaLogInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeltaLogInfo& operator=(DeltaLogInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeltaLogInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeltaLogInfo* internal_default_instance() {
    return reinterpret_cast<const DeltaLogInfo*>(
               &_DeltaLogInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DeltaLogInfo& a, DeltaLogInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeltaLogInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeltaLogInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeltaLogInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeltaLogInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeltaLogInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeltaLogInfo& from) {
    DeltaLogInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeltaLogInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.DeltaLogInfo";
  }
  protected:
  explicit DeltaLogInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeltaLogPathFieldNumber = 4,
    kRecordEntriesFieldNumber = 1,
    kTimestampFromFieldNumber = 2,
    kTimestampToFieldNumber = 3,
    kDeltaLogSizeFieldNumber = 5,
  };
  // string delta_log_path = 4;
  void clear_delta_log_path();
  const std::string& delta_log_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delta_log_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delta_log_path();
  PROTOBUF_NODISCARD std::string* release_delta_log_path();
  void set_allocated_delta_log_path(std::string* delta_log_path);
  private:
  const std::string& _internal_delta_log_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delta_log_path(const std::string& value);
  std::string* _internal_mutable_delta_log_path();
  public:

  // uint64 record_entries = 1;
  void clear_record_entries();
  uint64_t record_entries() const;
  void set_record_entries(uint64_t value);
  private:
  uint64_t _internal_record_entries() const;
  void _internal_set_record_entries(uint64_t value);
  public:

  // uint64 timestamp_from = 2;
  void clear_timestamp_from();
  uint64_t timestamp_from() const;
  void set_timestamp_from(uint64_t value);
  private:
  uint64_t _internal_timestamp_from() const;
  void _internal_set_timestamp_from(uint64_t value);
  public:

  // uint64 timestamp_to = 3;
  void clear_timestamp_to();
  uint64_t timestamp_to() const;
  void set_timestamp_to(uint64_t value);
  private:
  uint64_t _internal_timestamp_to() const;
  void _internal_set_timestamp_to(uint64_t value);
  public:

  // int64 delta_log_size = 5;
  void clear_delta_log_size();
  int64_t delta_log_size() const;
  void set_delta_log_size(int64_t value);
  private:
  int64_t _internal_delta_log_size() const;
  void _internal_set_delta_log_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.DeltaLogInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delta_log_path_;
    uint64_t record_entries_;
    uint64_t timestamp_from_;
    uint64_t timestamp_to_;
    int64_t delta_log_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class ChannelStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.ChannelStatus) */ {
 public:
  inline ChannelStatus() : ChannelStatus(nullptr) {}
  ~ChannelStatus() override;
  explicit PROTOBUF_CONSTEXPR ChannelStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelStatus(const ChannelStatus& from);
  ChannelStatus(ChannelStatus&& from) noexcept
    : ChannelStatus() {
    *this = ::std::move(from);
  }

  inline ChannelStatus& operator=(const ChannelStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelStatus& operator=(ChannelStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelStatus* internal_default_instance() {
    return reinterpret_cast<const ChannelStatus*>(
               &_ChannelStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ChannelStatus& a, ChannelStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChannelStatus& from) {
    ChannelStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.ChannelStatus";
  }
  protected:
  explicit ChannelStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCollectionIDFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 collectionID = 3;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // .milvus.proto.data.ChannelWatchState state = 2;
  void clear_state();
  ::milvus::proto::data::ChannelWatchState state() const;
  void set_state(::milvus::proto::data::ChannelWatchState value);
  private:
  ::milvus::proto::data::ChannelWatchState _internal_state() const;
  void _internal_set_state(::milvus::proto::data::ChannelWatchState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.ChannelStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t collectionid_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class DataNodeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.DataNodeInfo) */ {
 public:
  inline DataNodeInfo() : DataNodeInfo(nullptr) {}
  ~DataNodeInfo() override;
  explicit PROTOBUF_CONSTEXPR DataNodeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataNodeInfo(const DataNodeInfo& from);
  DataNodeInfo(DataNodeInfo&& from) noexcept
    : DataNodeInfo() {
    *this = ::std::move(from);
  }

  inline DataNodeInfo& operator=(const DataNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataNodeInfo& operator=(DataNodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataNodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataNodeInfo* internal_default_instance() {
    return reinterpret_cast<const DataNodeInfo*>(
               &_DataNodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DataNodeInfo& a, DataNodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DataNodeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataNodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataNodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataNodeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataNodeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataNodeInfo& from) {
    DataNodeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataNodeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.DataNodeInfo";
  }
  protected:
  explicit DataNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 3,
    kAddressFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // repeated .milvus.proto.data.ChannelStatus channels = 3;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::milvus::proto::data::ChannelStatus* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::ChannelStatus >*
      mutable_channels();
  private:
  const ::milvus::proto::data::ChannelStatus& _internal_channels(int index) const;
  ::milvus::proto::data::ChannelStatus* _internal_add_channels();
  public:
  const ::milvus::proto::data::ChannelStatus& channels(int index) const;
  ::milvus::proto::data::ChannelStatus* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::ChannelStatus >&
      channels() const;

  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int64 version = 2;
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.DataNodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::ChannelStatus > channels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    int64_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SegmentBinlogs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SegmentBinlogs) */ {
 public:
  inline SegmentBinlogs() : SegmentBinlogs(nullptr) {}
  ~SegmentBinlogs() override;
  explicit PROTOBUF_CONSTEXPR SegmentBinlogs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentBinlogs(const SegmentBinlogs& from);
  SegmentBinlogs(SegmentBinlogs&& from) noexcept
    : SegmentBinlogs() {
    *this = ::std::move(from);
  }

  inline SegmentBinlogs& operator=(const SegmentBinlogs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentBinlogs& operator=(SegmentBinlogs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentBinlogs& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentBinlogs* internal_default_instance() {
    return reinterpret_cast<const SegmentBinlogs*>(
               &_SegmentBinlogs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SegmentBinlogs& a, SegmentBinlogs& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentBinlogs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentBinlogs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentBinlogs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentBinlogs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentBinlogs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentBinlogs& from) {
    SegmentBinlogs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentBinlogs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SegmentBinlogs";
  }
  protected:
  explicit SegmentBinlogs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldBinlogsFieldNumber = 2,
    kStatslogsFieldNumber = 4,
    kDeltalogsFieldNumber = 5,
    kInsertChannelFieldNumber = 6,
    kSegmentIDFieldNumber = 1,
    kNumOfRowsFieldNumber = 3,
  };
  // repeated .milvus.proto.data.FieldBinlog fieldBinlogs = 2;
  int fieldbinlogs_size() const;
  private:
  int _internal_fieldbinlogs_size() const;
  public:
  void clear_fieldbinlogs();
  ::milvus::proto::data::FieldBinlog* mutable_fieldbinlogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_fieldbinlogs();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_fieldbinlogs(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_fieldbinlogs();
  public:
  const ::milvus::proto::data::FieldBinlog& fieldbinlogs(int index) const;
  ::milvus::proto::data::FieldBinlog* add_fieldbinlogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      fieldbinlogs() const;

  // repeated .milvus.proto.data.FieldBinlog statslogs = 4;
  int statslogs_size() const;
  private:
  int _internal_statslogs_size() const;
  public:
  void clear_statslogs();
  ::milvus::proto::data::FieldBinlog* mutable_statslogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_statslogs();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_statslogs(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_statslogs();
  public:
  const ::milvus::proto::data::FieldBinlog& statslogs(int index) const;
  ::milvus::proto::data::FieldBinlog* add_statslogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      statslogs() const;

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 5;
  int deltalogs_size() const;
  private:
  int _internal_deltalogs_size() const;
  public:
  void clear_deltalogs();
  ::milvus::proto::data::FieldBinlog* mutable_deltalogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_deltalogs();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_deltalogs(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_deltalogs();
  public:
  const ::milvus::proto::data::FieldBinlog& deltalogs(int index) const;
  ::milvus::proto::data::FieldBinlog* add_deltalogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      deltalogs() const;

  // string insert_channel = 6;
  void clear_insert_channel();
  const std::string& insert_channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_insert_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_insert_channel();
  PROTOBUF_NODISCARD std::string* release_insert_channel();
  void set_allocated_insert_channel(std::string* insert_channel);
  private:
  const std::string& _internal_insert_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_insert_channel(const std::string& value);
  std::string* _internal_mutable_insert_channel();
  public:

  // int64 segmentID = 1;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // int64 num_of_rows = 3;
  void clear_num_of_rows();
  int64_t num_of_rows() const;
  void set_num_of_rows(int64_t value);
  private:
  int64_t _internal_num_of_rows() const;
  void _internal_set_num_of_rows(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SegmentBinlogs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > fieldbinlogs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > statslogs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > deltalogs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_channel_;
    int64_t segmentid_;
    int64_t num_of_rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class FieldBinlog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.FieldBinlog) */ {
 public:
  inline FieldBinlog() : FieldBinlog(nullptr) {}
  ~FieldBinlog() override;
  explicit PROTOBUF_CONSTEXPR FieldBinlog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldBinlog(const FieldBinlog& from);
  FieldBinlog(FieldBinlog&& from) noexcept
    : FieldBinlog() {
    *this = ::std::move(from);
  }

  inline FieldBinlog& operator=(const FieldBinlog& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldBinlog& operator=(FieldBinlog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldBinlog& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldBinlog* internal_default_instance() {
    return reinterpret_cast<const FieldBinlog*>(
               &_FieldBinlog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(FieldBinlog& a, FieldBinlog& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldBinlog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldBinlog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldBinlog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldBinlog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldBinlog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldBinlog& from) {
    FieldBinlog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldBinlog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.FieldBinlog";
  }
  protected:
  explicit FieldBinlog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinlogsFieldNumber = 2,
    kFieldIDFieldNumber = 1,
  };
  // repeated .milvus.proto.data.Binlog binlogs = 2;
  int binlogs_size() const;
  private:
  int _internal_binlogs_size() const;
  public:
  void clear_binlogs();
  ::milvus::proto::data::Binlog* mutable_binlogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::Binlog >*
      mutable_binlogs();
  private:
  const ::milvus::proto::data::Binlog& _internal_binlogs(int index) const;
  ::milvus::proto::data::Binlog* _internal_add_binlogs();
  public:
  const ::milvus::proto::data::Binlog& binlogs(int index) const;
  ::milvus::proto::data::Binlog* add_binlogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::Binlog >&
      binlogs() const;

  // int64 fieldID = 1;
  void clear_fieldid();
  int64_t fieldid() const;
  void set_fieldid(int64_t value);
  private:
  int64_t _internal_fieldid() const;
  void _internal_set_fieldid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.FieldBinlog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::Binlog > binlogs_;
    int64_t fieldid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class Binlog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.Binlog) */ {
 public:
  inline Binlog() : Binlog(nullptr) {}
  ~Binlog() override;
  explicit PROTOBUF_CONSTEXPR Binlog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Binlog(const Binlog& from);
  Binlog(Binlog&& from) noexcept
    : Binlog() {
    *this = ::std::move(from);
  }

  inline Binlog& operator=(const Binlog& from) {
    CopyFrom(from);
    return *this;
  }
  inline Binlog& operator=(Binlog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Binlog& default_instance() {
    return *internal_default_instance();
  }
  static inline const Binlog* internal_default_instance() {
    return reinterpret_cast<const Binlog*>(
               &_Binlog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Binlog& a, Binlog& b) {
    a.Swap(&b);
  }
  inline void Swap(Binlog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Binlog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Binlog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Binlog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Binlog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Binlog& from) {
    Binlog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Binlog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.Binlog";
  }
  protected:
  explicit Binlog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogPathFieldNumber = 4,
    kEntriesNumFieldNumber = 1,
    kTimestampFromFieldNumber = 2,
    kTimestampToFieldNumber = 3,
    kLogSizeFieldNumber = 5,
    kLogIDFieldNumber = 6,
  };
  // string log_path = 4;
  void clear_log_path();
  const std::string& log_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log_path();
  PROTOBUF_NODISCARD std::string* release_log_path();
  void set_allocated_log_path(std::string* log_path);
  private:
  const std::string& _internal_log_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_path(const std::string& value);
  std::string* _internal_mutable_log_path();
  public:

  // int64 entries_num = 1;
  void clear_entries_num();
  int64_t entries_num() const;
  void set_entries_num(int64_t value);
  private:
  int64_t _internal_entries_num() const;
  void _internal_set_entries_num(int64_t value);
  public:

  // uint64 timestamp_from = 2;
  void clear_timestamp_from();
  uint64_t timestamp_from() const;
  void set_timestamp_from(uint64_t value);
  private:
  uint64_t _internal_timestamp_from() const;
  void _internal_set_timestamp_from(uint64_t value);
  public:

  // uint64 timestamp_to = 3;
  void clear_timestamp_to();
  uint64_t timestamp_to() const;
  void set_timestamp_to(uint64_t value);
  private:
  uint64_t _internal_timestamp_to() const;
  void _internal_set_timestamp_to(uint64_t value);
  public:

  // int64 log_size = 5;
  void clear_log_size();
  int64_t log_size() const;
  void set_log_size(int64_t value);
  private:
  int64_t _internal_log_size() const;
  void _internal_set_log_size(int64_t value);
  public:

  // int64 logID = 6;
  void clear_logid();
  int64_t logid() const;
  void set_logid(int64_t value);
  private:
  int64_t _internal_logid() const;
  void _internal_set_logid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.Binlog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_path_;
    int64_t entries_num_;
    uint64_t timestamp_from_;
    uint64_t timestamp_to_;
    int64_t log_size_;
    int64_t logid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetRecoveryInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetRecoveryInfoResponse) */ {
 public:
  inline GetRecoveryInfoResponse() : GetRecoveryInfoResponse(nullptr) {}
  ~GetRecoveryInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetRecoveryInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecoveryInfoResponse(const GetRecoveryInfoResponse& from);
  GetRecoveryInfoResponse(GetRecoveryInfoResponse&& from) noexcept
    : GetRecoveryInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetRecoveryInfoResponse& operator=(const GetRecoveryInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecoveryInfoResponse& operator=(GetRecoveryInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecoveryInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecoveryInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetRecoveryInfoResponse*>(
               &_GetRecoveryInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetRecoveryInfoResponse& a, GetRecoveryInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecoveryInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecoveryInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecoveryInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecoveryInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecoveryInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecoveryInfoResponse& from) {
    GetRecoveryInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecoveryInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetRecoveryInfoResponse";
  }
  protected:
  explicit GetRecoveryInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 2,
    kBinlogsFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.data.VchannelInfo channels = 2;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::milvus::proto::data::VchannelInfo* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo >*
      mutable_channels();
  private:
  const ::milvus::proto::data::VchannelInfo& _internal_channels(int index) const;
  ::milvus::proto::data::VchannelInfo* _internal_add_channels();
  public:
  const ::milvus::proto::data::VchannelInfo& channels(int index) const;
  ::milvus::proto::data::VchannelInfo* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo >&
      channels() const;

  // repeated .milvus.proto.data.SegmentBinlogs binlogs = 3;
  int binlogs_size() const;
  private:
  int _internal_binlogs_size() const;
  public:
  void clear_binlogs();
  ::milvus::proto::data::SegmentBinlogs* mutable_binlogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentBinlogs >*
      mutable_binlogs();
  private:
  const ::milvus::proto::data::SegmentBinlogs& _internal_binlogs(int index) const;
  ::milvus::proto::data::SegmentBinlogs* _internal_add_binlogs();
  public:
  const ::milvus::proto::data::SegmentBinlogs& binlogs(int index) const;
  ::milvus::proto::data::SegmentBinlogs* add_binlogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentBinlogs >&
      binlogs() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetRecoveryInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo > channels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentBinlogs > binlogs_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetRecoveryInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetRecoveryInfoRequest) */ {
 public:
  inline GetRecoveryInfoRequest() : GetRecoveryInfoRequest(nullptr) {}
  ~GetRecoveryInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetRecoveryInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecoveryInfoRequest(const GetRecoveryInfoRequest& from);
  GetRecoveryInfoRequest(GetRecoveryInfoRequest&& from) noexcept
    : GetRecoveryInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetRecoveryInfoRequest& operator=(const GetRecoveryInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecoveryInfoRequest& operator=(GetRecoveryInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecoveryInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecoveryInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetRecoveryInfoRequest*>(
               &_GetRecoveryInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetRecoveryInfoRequest& a, GetRecoveryInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecoveryInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecoveryInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecoveryInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecoveryInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecoveryInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecoveryInfoRequest& from) {
    GetRecoveryInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecoveryInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetRecoveryInfoRequest";
  }
  protected:
  explicit GetRecoveryInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kPartitionIDFieldNumber = 3,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 collectionID = 2;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 partitionID = 3;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetRecoveryInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    int64_t collectionid_;
    int64_t partitionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetRecoveryInfoResponseV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetRecoveryInfoResponseV2) */ {
 public:
  inline GetRecoveryInfoResponseV2() : GetRecoveryInfoResponseV2(nullptr) {}
  ~GetRecoveryInfoResponseV2() override;
  explicit PROTOBUF_CONSTEXPR GetRecoveryInfoResponseV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecoveryInfoResponseV2(const GetRecoveryInfoResponseV2& from);
  GetRecoveryInfoResponseV2(GetRecoveryInfoResponseV2&& from) noexcept
    : GetRecoveryInfoResponseV2() {
    *this = ::std::move(from);
  }

  inline GetRecoveryInfoResponseV2& operator=(const GetRecoveryInfoResponseV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecoveryInfoResponseV2& operator=(GetRecoveryInfoResponseV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecoveryInfoResponseV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecoveryInfoResponseV2* internal_default_instance() {
    return reinterpret_cast<const GetRecoveryInfoResponseV2*>(
               &_GetRecoveryInfoResponseV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetRecoveryInfoResponseV2& a, GetRecoveryInfoResponseV2& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecoveryInfoResponseV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecoveryInfoResponseV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecoveryInfoResponseV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecoveryInfoResponseV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecoveryInfoResponseV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecoveryInfoResponseV2& from) {
    GetRecoveryInfoResponseV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecoveryInfoResponseV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetRecoveryInfoResponseV2";
  }
  protected:
  explicit GetRecoveryInfoResponseV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 2,
    kSegmentsFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.data.VchannelInfo channels = 2;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::milvus::proto::data::VchannelInfo* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo >*
      mutable_channels();
  private:
  const ::milvus::proto::data::VchannelInfo& _internal_channels(int index) const;
  ::milvus::proto::data::VchannelInfo* _internal_add_channels();
  public:
  const ::milvus::proto::data::VchannelInfo& channels(int index) const;
  ::milvus::proto::data::VchannelInfo* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo >&
      channels() const;

  // repeated .milvus.proto.data.SegmentInfo segments = 3;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::milvus::proto::data::SegmentInfo* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >*
      mutable_segments();
  private:
  const ::milvus::proto::data::SegmentInfo& _internal_segments(int index) const;
  ::milvus::proto::data::SegmentInfo* _internal_add_segments();
  public:
  const ::milvus::proto::data::SegmentInfo& segments(int index) const;
  ::milvus::proto::data::SegmentInfo* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >&
      segments() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetRecoveryInfoResponseV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo > channels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo > segments_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetRecoveryInfoRequestV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetRecoveryInfoRequestV2) */ {
 public:
  inline GetRecoveryInfoRequestV2() : GetRecoveryInfoRequestV2(nullptr) {}
  ~GetRecoveryInfoRequestV2() override;
  explicit PROTOBUF_CONSTEXPR GetRecoveryInfoRequestV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecoveryInfoRequestV2(const GetRecoveryInfoRequestV2& from);
  GetRecoveryInfoRequestV2(GetRecoveryInfoRequestV2&& from) noexcept
    : GetRecoveryInfoRequestV2() {
    *this = ::std::move(from);
  }

  inline GetRecoveryInfoRequestV2& operator=(const GetRecoveryInfoRequestV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecoveryInfoRequestV2& operator=(GetRecoveryInfoRequestV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecoveryInfoRequestV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecoveryInfoRequestV2* internal_default_instance() {
    return reinterpret_cast<const GetRecoveryInfoRequestV2*>(
               &_GetRecoveryInfoRequestV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetRecoveryInfoRequestV2& a, GetRecoveryInfoRequestV2& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecoveryInfoRequestV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecoveryInfoRequestV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecoveryInfoRequestV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecoveryInfoRequestV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecoveryInfoRequestV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecoveryInfoRequestV2& from) {
    GetRecoveryInfoRequestV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecoveryInfoRequestV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetRecoveryInfoRequestV2";
  }
  protected:
  explicit GetRecoveryInfoRequestV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionIDsFieldNumber = 3,
    kBaseFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
  };
  // repeated int64 partitionIDs = 3;
  int partitionids_size() const;
  private:
  int _internal_partitionids_size() const;
  public:
  void clear_partitionids();
  private:
  int64_t _internal_partitionids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_partitionids() const;
  void _internal_add_partitionids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_partitionids();
  public:
  int64_t partitionids(int index) const;
  void set_partitionids(int index, int64_t value);
  void add_partitionids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      partitionids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_partitionids();

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 collectionID = 2;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetRecoveryInfoRequestV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > partitionids_;
    mutable std::atomic<int> _partitionids_cached_byte_size_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetSegmentsByStatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetSegmentsByStatesRequest) */ {
 public:
  inline GetSegmentsByStatesRequest() : GetSegmentsByStatesRequest(nullptr) {}
  ~GetSegmentsByStatesRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSegmentsByStatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSegmentsByStatesRequest(const GetSegmentsByStatesRequest& from);
  GetSegmentsByStatesRequest(GetSegmentsByStatesRequest&& from) noexcept
    : GetSegmentsByStatesRequest() {
    *this = ::std::move(from);
  }

  inline GetSegmentsByStatesRequest& operator=(const GetSegmentsByStatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSegmentsByStatesRequest& operator=(GetSegmentsByStatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSegmentsByStatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSegmentsByStatesRequest* internal_default_instance() {
    return reinterpret_cast<const GetSegmentsByStatesRequest*>(
               &_GetSegmentsByStatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetSegmentsByStatesRequest& a, GetSegmentsByStatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSegmentsByStatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSegmentsByStatesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSegmentsByStatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSegmentsByStatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSegmentsByStatesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSegmentsByStatesRequest& from) {
    GetSegmentsByStatesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSegmentsByStatesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetSegmentsByStatesRequest";
  }
  protected:
  explicit GetSegmentsByStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 4,
    kBaseFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kPartitionIDFieldNumber = 3,
  };
  // repeated .milvus.proto.common.SegmentState states = 4;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  private:
  ::milvus::proto::common::SegmentState _internal_states(int index) const;
  void _internal_add_states(::milvus::proto::common::SegmentState value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_states();
  public:
  ::milvus::proto::common::SegmentState states(int index) const;
  void set_states(int index, ::milvus::proto::common::SegmentState value);
  void add_states(::milvus::proto::common::SegmentState value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_states();

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 collectionID = 2;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 partitionID = 3;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetSegmentsByStatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> states_;
    mutable std::atomic<int> _states_cached_byte_size_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t collectionid_;
    int64_t partitionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetSegmentsByStatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetSegmentsByStatesResponse) */ {
 public:
  inline GetSegmentsByStatesResponse() : GetSegmentsByStatesResponse(nullptr) {}
  ~GetSegmentsByStatesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSegmentsByStatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSegmentsByStatesResponse(const GetSegmentsByStatesResponse& from);
  GetSegmentsByStatesResponse(GetSegmentsByStatesResponse&& from) noexcept
    : GetSegmentsByStatesResponse() {
    *this = ::std::move(from);
  }

  inline GetSegmentsByStatesResponse& operator=(const GetSegmentsByStatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSegmentsByStatesResponse& operator=(GetSegmentsByStatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSegmentsByStatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSegmentsByStatesResponse* internal_default_instance() {
    return reinterpret_cast<const GetSegmentsByStatesResponse*>(
               &_GetSegmentsByStatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GetSegmentsByStatesResponse& a, GetSegmentsByStatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSegmentsByStatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSegmentsByStatesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSegmentsByStatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSegmentsByStatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSegmentsByStatesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSegmentsByStatesResponse& from) {
    GetSegmentsByStatesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSegmentsByStatesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetSegmentsByStatesResponse";
  }
  protected:
  explicit GetSegmentsByStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated int64 segments = 2;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  private:
  int64_t _internal_segments(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segments() const;
  void _internal_add_segments(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segments();
  public:
  int64_t segments(int index) const;
  void set_segments(int index, int64_t value);
  void add_segments(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segments();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetSegmentsByStatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segments_;
    mutable std::atomic<int> _segments_cached_byte_size_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetFlushedSegmentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetFlushedSegmentsRequest) */ {
 public:
  inline GetFlushedSegmentsRequest() : GetFlushedSegmentsRequest(nullptr) {}
  ~GetFlushedSegmentsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetFlushedSegmentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFlushedSegmentsRequest(const GetFlushedSegmentsRequest& from);
  GetFlushedSegmentsRequest(GetFlushedSegmentsRequest&& from) noexcept
    : GetFlushedSegmentsRequest() {
    *this = ::std::move(from);
  }

  inline GetFlushedSegmentsRequest& operator=(const GetFlushedSegmentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFlushedSegmentsRequest& operator=(GetFlushedSegmentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFlushedSegmentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFlushedSegmentsRequest* internal_default_instance() {
    return reinterpret_cast<const GetFlushedSegmentsRequest*>(
               &_GetFlushedSegmentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetFlushedSegmentsRequest& a, GetFlushedSegmentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFlushedSegmentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFlushedSegmentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFlushedSegmentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFlushedSegmentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFlushedSegmentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFlushedSegmentsRequest& from) {
    GetFlushedSegmentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFlushedSegmentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetFlushedSegmentsRequest";
  }
  protected:
  explicit GetFlushedSegmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kPartitionIDFieldNumber = 3,
    kIncludeUnhealthyFieldNumber = 4,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 collectionID = 2;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 partitionID = 3;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // bool includeUnhealthy = 4;
  void clear_includeunhealthy();
  bool includeunhealthy() const;
  void set_includeunhealthy(bool value);
  private:
  bool _internal_includeunhealthy() const;
  void _internal_set_includeunhealthy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetFlushedSegmentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    int64_t collectionid_;
    int64_t partitionid_;
    bool includeunhealthy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetFlushedSegmentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GetFlushedSegmentsResponse) */ {
 public:
  inline GetFlushedSegmentsResponse() : GetFlushedSegmentsResponse(nullptr) {}
  ~GetFlushedSegmentsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetFlushedSegmentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFlushedSegmentsResponse(const GetFlushedSegmentsResponse& from);
  GetFlushedSegmentsResponse(GetFlushedSegmentsResponse&& from) noexcept
    : GetFlushedSegmentsResponse() {
    *this = ::std::move(from);
  }

  inline GetFlushedSegmentsResponse& operator=(const GetFlushedSegmentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFlushedSegmentsResponse& operator=(GetFlushedSegmentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFlushedSegmentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFlushedSegmentsResponse* internal_default_instance() {
    return reinterpret_cast<const GetFlushedSegmentsResponse*>(
               &_GetFlushedSegmentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GetFlushedSegmentsResponse& a, GetFlushedSegmentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFlushedSegmentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFlushedSegmentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFlushedSegmentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFlushedSegmentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFlushedSegmentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFlushedSegmentsResponse& from) {
    GetFlushedSegmentsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFlushedSegmentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GetFlushedSegmentsResponse";
  }
  protected:
  explicit GetFlushedSegmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated int64 segments = 2;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  private:
  int64_t _internal_segments(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segments() const;
  void _internal_add_segments(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segments();
  public:
  int64_t segments(int index) const;
  void set_segments(int index, int64_t value);
  void add_segments(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segments();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GetFlushedSegmentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segments_;
    mutable std::atomic<int> _segments_cached_byte_size_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SegmentFlushCompletedMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SegmentFlushCompletedMsg) */ {
 public:
  inline SegmentFlushCompletedMsg() : SegmentFlushCompletedMsg(nullptr) {}
  ~SegmentFlushCompletedMsg() override;
  explicit PROTOBUF_CONSTEXPR SegmentFlushCompletedMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentFlushCompletedMsg(const SegmentFlushCompletedMsg& from);
  SegmentFlushCompletedMsg(SegmentFlushCompletedMsg&& from) noexcept
    : SegmentFlushCompletedMsg() {
    *this = ::std::move(from);
  }

  inline SegmentFlushCompletedMsg& operator=(const SegmentFlushCompletedMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentFlushCompletedMsg& operator=(SegmentFlushCompletedMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentFlushCompletedMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentFlushCompletedMsg* internal_default_instance() {
    return reinterpret_cast<const SegmentFlushCompletedMsg*>(
               &_SegmentFlushCompletedMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SegmentFlushCompletedMsg& a, SegmentFlushCompletedMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentFlushCompletedMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentFlushCompletedMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentFlushCompletedMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentFlushCompletedMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentFlushCompletedMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentFlushCompletedMsg& from) {
    SegmentFlushCompletedMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentFlushCompletedMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SegmentFlushCompletedMsg";
  }
  protected:
  explicit SegmentFlushCompletedMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kSegmentFieldNumber = 2,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.data.SegmentInfo segment = 2;
  bool has_segment() const;
  private:
  bool _internal_has_segment() const;
  public:
  void clear_segment();
  const ::milvus::proto::data::SegmentInfo& segment() const;
  PROTOBUF_NODISCARD ::milvus::proto::data::SegmentInfo* release_segment();
  ::milvus::proto::data::SegmentInfo* mutable_segment();
  void set_allocated_segment(::milvus::proto::data::SegmentInfo* segment);
  private:
  const ::milvus::proto::data::SegmentInfo& _internal_segment() const;
  ::milvus::proto::data::SegmentInfo* _internal_mutable_segment();
  public:
  void unsafe_arena_set_allocated_segment(
      ::milvus::proto::data::SegmentInfo* segment);
  ::milvus::proto::data::SegmentInfo* unsafe_arena_release_segment();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SegmentFlushCompletedMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::data::SegmentInfo* segment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class ChannelWatchInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.ChannelWatchInfo) */ {
 public:
  inline ChannelWatchInfo() : ChannelWatchInfo(nullptr) {}
  ~ChannelWatchInfo() override;
  explicit PROTOBUF_CONSTEXPR ChannelWatchInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelWatchInfo(const ChannelWatchInfo& from);
  ChannelWatchInfo(ChannelWatchInfo&& from) noexcept
    : ChannelWatchInfo() {
    *this = ::std::move(from);
  }

  inline ChannelWatchInfo& operator=(const ChannelWatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelWatchInfo& operator=(ChannelWatchInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelWatchInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelWatchInfo* internal_default_instance() {
    return reinterpret_cast<const ChannelWatchInfo*>(
               &_ChannelWatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ChannelWatchInfo& a, ChannelWatchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelWatchInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelWatchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelWatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelWatchInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelWatchInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChannelWatchInfo& from) {
    ChannelWatchInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelWatchInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.ChannelWatchInfo";
  }
  protected:
  explicit ChannelWatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVchanFieldNumber = 1,
    kSchemaFieldNumber = 5,
    kStartTsFieldNumber = 2,
    kTimeoutTsFieldNumber = 4,
    kStateFieldNumber = 3,
    kProgressFieldNumber = 6,
  };
  // .milvus.proto.data.VchannelInfo vchan = 1;
  bool has_vchan() const;
  private:
  bool _internal_has_vchan() const;
  public:
  void clear_vchan();
  const ::milvus::proto::data::VchannelInfo& vchan() const;
  PROTOBUF_NODISCARD ::milvus::proto::data::VchannelInfo* release_vchan();
  ::milvus::proto::data::VchannelInfo* mutable_vchan();
  void set_allocated_vchan(::milvus::proto::data::VchannelInfo* vchan);
  private:
  const ::milvus::proto::data::VchannelInfo& _internal_vchan() const;
  ::milvus::proto::data::VchannelInfo* _internal_mutable_vchan();
  public:
  void unsafe_arena_set_allocated_vchan(
      ::milvus::proto::data::VchannelInfo* vchan);
  ::milvus::proto::data::VchannelInfo* unsafe_arena_release_vchan();

  // .milvus.proto.schema.CollectionSchema schema = 5;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::milvus::proto::schema::CollectionSchema& schema() const;
  PROTOBUF_NODISCARD ::milvus::proto::schema::CollectionSchema* release_schema();
  ::milvus::proto::schema::CollectionSchema* mutable_schema();
  void set_allocated_schema(::milvus::proto::schema::CollectionSchema* schema);
  private:
  const ::milvus::proto::schema::CollectionSchema& _internal_schema() const;
  ::milvus::proto::schema::CollectionSchema* _internal_mutable_schema();
  public:
  void unsafe_arena_set_allocated_schema(
      ::milvus::proto::schema::CollectionSchema* schema);
  ::milvus::proto::schema::CollectionSchema* unsafe_arena_release_schema();

  // int64 startTs = 2;
  void clear_startts();
  int64_t startts() const;
  void set_startts(int64_t value);
  private:
  int64_t _internal_startts() const;
  void _internal_set_startts(int64_t value);
  public:

  // int64 timeoutTs = 4;
  void clear_timeoutts();
  int64_t timeoutts() const;
  void set_timeoutts(int64_t value);
  private:
  int64_t _internal_timeoutts() const;
  void _internal_set_timeoutts(int64_t value);
  public:

  // .milvus.proto.data.ChannelWatchState state = 3;
  void clear_state();
  ::milvus::proto::data::ChannelWatchState state() const;
  void set_state(::milvus::proto::data::ChannelWatchState value);
  private:
  ::milvus::proto::data::ChannelWatchState _internal_state() const;
  void _internal_set_state(::milvus::proto::data::ChannelWatchState value);
  public:

  // int32 progress = 6;
  void clear_progress();
  int32_t progress() const;
  void set_progress(int32_t value);
  private:
  int32_t _internal_progress() const;
  void _internal_set_progress(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.ChannelWatchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::data::VchannelInfo* vchan_;
    ::milvus::proto::schema::CollectionSchema* schema_;
    int64_t startts_;
    int64_t timeoutts_;
    int state_;
    int32_t progress_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class CompactionStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.CompactionStateRequest) */ {
 public:
  inline CompactionStateRequest() : CompactionStateRequest(nullptr) {}
  ~CompactionStateRequest() override;
  explicit PROTOBUF_CONSTEXPR CompactionStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompactionStateRequest(const CompactionStateRequest& from);
  CompactionStateRequest(CompactionStateRequest&& from) noexcept
    : CompactionStateRequest() {
    *this = ::std::move(from);
  }

  inline CompactionStateRequest& operator=(const CompactionStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactionStateRequest& operator=(CompactionStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompactionStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompactionStateRequest* internal_default_instance() {
    return reinterpret_cast<const CompactionStateRequest*>(
               &_CompactionStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CompactionStateRequest& a, CompactionStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactionStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompactionStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompactionStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompactionStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompactionStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompactionStateRequest& from) {
    CompactionStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactionStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.CompactionStateRequest";
  }
  protected:
  explicit CompactionStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.CompactionStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SyncSegmentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SyncSegmentsRequest) */ {
 public:
  inline SyncSegmentsRequest() : SyncSegmentsRequest(nullptr) {}
  ~SyncSegmentsRequest() override;
  explicit PROTOBUF_CONSTEXPR SyncSegmentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncSegmentsRequest(const SyncSegmentsRequest& from);
  SyncSegmentsRequest(SyncSegmentsRequest&& from) noexcept
    : SyncSegmentsRequest() {
    *this = ::std::move(from);
  }

  inline SyncSegmentsRequest& operator=(const SyncSegmentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncSegmentsRequest& operator=(SyncSegmentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncSegmentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncSegmentsRequest* internal_default_instance() {
    return reinterpret_cast<const SyncSegmentsRequest*>(
               &_SyncSegmentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SyncSegmentsRequest& a, SyncSegmentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncSegmentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncSegmentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncSegmentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncSegmentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncSegmentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncSegmentsRequest& from) {
    SyncSegmentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncSegmentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SyncSegmentsRequest";
  }
  protected:
  explicit SyncSegmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompactedFromFieldNumber = 4,
    kStatsLogsFieldNumber = 5,
    kPlanIDFieldNumber = 1,
    kCompactedToFieldNumber = 2,
    kNumOfRowsFieldNumber = 3,
  };
  // repeated int64 compacted_from = 4;
  int compacted_from_size() const;
  private:
  int _internal_compacted_from_size() const;
  public:
  void clear_compacted_from();
  private:
  int64_t _internal_compacted_from(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_compacted_from() const;
  void _internal_add_compacted_from(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_compacted_from();
  public:
  int64_t compacted_from(int index) const;
  void set_compacted_from(int index, int64_t value);
  void add_compacted_from(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      compacted_from() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_compacted_from();

  // repeated .milvus.proto.data.FieldBinlog stats_logs = 5;
  int stats_logs_size() const;
  private:
  int _internal_stats_logs_size() const;
  public:
  void clear_stats_logs();
  ::milvus::proto::data::FieldBinlog* mutable_stats_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_stats_logs();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_stats_logs(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_stats_logs();
  public:
  const ::milvus::proto::data::FieldBinlog& stats_logs(int index) const;
  ::milvus::proto::data::FieldBinlog* add_stats_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      stats_logs() const;

  // int64 planID = 1;
  void clear_planid();
  int64_t planid() const;
  void set_planid(int64_t value);
  private:
  int64_t _internal_planid() const;
  void _internal_set_planid(int64_t value);
  public:

  // int64 compacted_to = 2;
  void clear_compacted_to();
  int64_t compacted_to() const;
  void set_compacted_to(int64_t value);
  private:
  int64_t _internal_compacted_to() const;
  void _internal_set_compacted_to(int64_t value);
  public:

  // int64 num_of_rows = 3;
  void clear_num_of_rows();
  int64_t num_of_rows() const;
  void set_num_of_rows(int64_t value);
  private:
  int64_t _internal_num_of_rows() const;
  void _internal_set_num_of_rows(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SyncSegmentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > compacted_from_;
    mutable std::atomic<int> _compacted_from_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > stats_logs_;
    int64_t planid_;
    int64_t compacted_to_;
    int64_t num_of_rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class CompactionSegmentBinlogs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.CompactionSegmentBinlogs) */ {
 public:
  inline CompactionSegmentBinlogs() : CompactionSegmentBinlogs(nullptr) {}
  ~CompactionSegmentBinlogs() override;
  explicit PROTOBUF_CONSTEXPR CompactionSegmentBinlogs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompactionSegmentBinlogs(const CompactionSegmentBinlogs& from);
  CompactionSegmentBinlogs(CompactionSegmentBinlogs&& from) noexcept
    : CompactionSegmentBinlogs() {
    *this = ::std::move(from);
  }

  inline CompactionSegmentBinlogs& operator=(const CompactionSegmentBinlogs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactionSegmentBinlogs& operator=(CompactionSegmentBinlogs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompactionSegmentBinlogs& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompactionSegmentBinlogs* internal_default_instance() {
    return reinterpret_cast<const CompactionSegmentBinlogs*>(
               &_CompactionSegmentBinlogs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CompactionSegmentBinlogs& a, CompactionSegmentBinlogs& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactionSegmentBinlogs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompactionSegmentBinlogs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompactionSegmentBinlogs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompactionSegmentBinlogs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompactionSegmentBinlogs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompactionSegmentBinlogs& from) {
    CompactionSegmentBinlogs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactionSegmentBinlogs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.CompactionSegmentBinlogs";
  }
  protected:
  explicit CompactionSegmentBinlogs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldBinlogsFieldNumber = 2,
    kField2StatslogPathsFieldNumber = 3,
    kDeltalogsFieldNumber = 4,
    kInsertChannelFieldNumber = 5,
    kSegmentIDFieldNumber = 1,
  };
  // repeated .milvus.proto.data.FieldBinlog fieldBinlogs = 2;
  int fieldbinlogs_size() const;
  private:
  int _internal_fieldbinlogs_size() const;
  public:
  void clear_fieldbinlogs();
  ::milvus::proto::data::FieldBinlog* mutable_fieldbinlogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_fieldbinlogs();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_fieldbinlogs(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_fieldbinlogs();
  public:
  const ::milvus::proto::data::FieldBinlog& fieldbinlogs(int index) const;
  ::milvus::proto::data::FieldBinlog* add_fieldbinlogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      fieldbinlogs() const;

  // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 3;
  int field2statslogpaths_size() const;
  private:
  int _internal_field2statslogpaths_size() const;
  public:
  void clear_field2statslogpaths();
  ::milvus::proto::data::FieldBinlog* mutable_field2statslogpaths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_field2statslogpaths();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_field2statslogpaths(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_field2statslogpaths();
  public:
  const ::milvus::proto::data::FieldBinlog& field2statslogpaths(int index) const;
  ::milvus::proto::data::FieldBinlog* add_field2statslogpaths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      field2statslogpaths() const;

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 4;
  int deltalogs_size() const;
  private:
  int _internal_deltalogs_size() const;
  public:
  void clear_deltalogs();
  ::milvus::proto::data::FieldBinlog* mutable_deltalogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_deltalogs();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_deltalogs(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_deltalogs();
  public:
  const ::milvus::proto::data::FieldBinlog& deltalogs(int index) const;
  ::milvus::proto::data::FieldBinlog* add_deltalogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      deltalogs() const;

  // string insert_channel = 5;
  void clear_insert_channel();
  const std::string& insert_channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_insert_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_insert_channel();
  PROTOBUF_NODISCARD std::string* release_insert_channel();
  void set_allocated_insert_channel(std::string* insert_channel);
  private:
  const std::string& _internal_insert_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_insert_channel(const std::string& value);
  std::string* _internal_mutable_insert_channel();
  public:

  // int64 segmentID = 1;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.CompactionSegmentBinlogs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > fieldbinlogs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > field2statslogpaths_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > deltalogs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_channel_;
    int64_t segmentid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class CompactionPlan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.CompactionPlan) */ {
 public:
  inline CompactionPlan() : CompactionPlan(nullptr) {}
  ~CompactionPlan() override;
  explicit PROTOBUF_CONSTEXPR CompactionPlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompactionPlan(const CompactionPlan& from);
  CompactionPlan(CompactionPlan&& from) noexcept
    : CompactionPlan() {
    *this = ::std::move(from);
  }

  inline CompactionPlan& operator=(const CompactionPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactionPlan& operator=(CompactionPlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompactionPlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompactionPlan* internal_default_instance() {
    return reinterpret_cast<const CompactionPlan*>(
               &_CompactionPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CompactionPlan& a, CompactionPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactionPlan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompactionPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompactionPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompactionPlan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompactionPlan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompactionPlan& from) {
    CompactionPlan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactionPlan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.CompactionPlan";
  }
  protected:
  explicit CompactionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentBinlogsFieldNumber = 2,
    kChannelFieldNumber = 7,
    kPlanIDFieldNumber = 1,
    kStartTimeFieldNumber = 3,
    kTimeoutInSecondsFieldNumber = 4,
    kTypeFieldNumber = 5,
    kTimetravelFieldNumber = 6,
    kCollectionTtlFieldNumber = 8,
    kTotalRowsFieldNumber = 9,
  };
  // repeated .milvus.proto.data.CompactionSegmentBinlogs segmentBinlogs = 2;
  int segmentbinlogs_size() const;
  private:
  int _internal_segmentbinlogs_size() const;
  public:
  void clear_segmentbinlogs();
  ::milvus::proto::data::CompactionSegmentBinlogs* mutable_segmentbinlogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CompactionSegmentBinlogs >*
      mutable_segmentbinlogs();
  private:
  const ::milvus::proto::data::CompactionSegmentBinlogs& _internal_segmentbinlogs(int index) const;
  ::milvus::proto::data::CompactionSegmentBinlogs* _internal_add_segmentbinlogs();
  public:
  const ::milvus::proto::data::CompactionSegmentBinlogs& segmentbinlogs(int index) const;
  ::milvus::proto::data::CompactionSegmentBinlogs* add_segmentbinlogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CompactionSegmentBinlogs >&
      segmentbinlogs() const;

  // string channel = 7;
  void clear_channel();
  const std::string& channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // int64 planID = 1;
  void clear_planid();
  int64_t planid() const;
  void set_planid(int64_t value);
  private:
  int64_t _internal_planid() const;
  void _internal_set_planid(int64_t value);
  public:

  // uint64 start_time = 3;
  void clear_start_time();
  uint64_t start_time() const;
  void set_start_time(uint64_t value);
  private:
  uint64_t _internal_start_time() const;
  void _internal_set_start_time(uint64_t value);
  public:

  // int32 timeout_in_seconds = 4;
  void clear_timeout_in_seconds();
  int32_t timeout_in_seconds() const;
  void set_timeout_in_seconds(int32_t value);
  private:
  int32_t _internal_timeout_in_seconds() const;
  void _internal_set_timeout_in_seconds(int32_t value);
  public:

  // .milvus.proto.data.CompactionType type = 5;
  void clear_type();
  ::milvus::proto::data::CompactionType type() const;
  void set_type(::milvus::proto::data::CompactionType value);
  private:
  ::milvus::proto::data::CompactionType _internal_type() const;
  void _internal_set_type(::milvus::proto::data::CompactionType value);
  public:

  // uint64 timetravel = 6;
  void clear_timetravel();
  uint64_t timetravel() const;
  void set_timetravel(uint64_t value);
  private:
  uint64_t _internal_timetravel() const;
  void _internal_set_timetravel(uint64_t value);
  public:

  // int64 collection_ttl = 8;
  void clear_collection_ttl();
  int64_t collection_ttl() const;
  void set_collection_ttl(int64_t value);
  private:
  int64_t _internal_collection_ttl() const;
  void _internal_set_collection_ttl(int64_t value);
  public:

  // int64 total_rows = 9;
  void clear_total_rows();
  int64_t total_rows() const;
  void set_total_rows(int64_t value);
  private:
  int64_t _internal_total_rows() const;
  void _internal_set_total_rows(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.CompactionPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CompactionSegmentBinlogs > segmentbinlogs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
    int64_t planid_;
    uint64_t start_time_;
    int32_t timeout_in_seconds_;
    int type_;
    uint64_t timetravel_;
    int64_t collection_ttl_;
    int64_t total_rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class CompactionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.CompactionResult) */ {
 public:
  inline CompactionResult() : CompactionResult(nullptr) {}
  ~CompactionResult() override;
  explicit PROTOBUF_CONSTEXPR CompactionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompactionResult(const CompactionResult& from);
  CompactionResult(CompactionResult&& from) noexcept
    : CompactionResult() {
    *this = ::std::move(from);
  }

  inline CompactionResult& operator=(const CompactionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactionResult& operator=(CompactionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompactionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompactionResult* internal_default_instance() {
    return reinterpret_cast<const CompactionResult*>(
               &_CompactionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CompactionResult& a, CompactionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompactionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompactionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompactionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompactionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompactionResult& from) {
    CompactionResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.CompactionResult";
  }
  protected:
  explicit CompactionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsertLogsFieldNumber = 4,
    kField2StatslogPathsFieldNumber = 5,
    kDeltalogsFieldNumber = 6,
    kChannelFieldNumber = 7,
    kPlanIDFieldNumber = 1,
    kSegmentIDFieldNumber = 2,
    kNumOfRowsFieldNumber = 3,
  };
  // repeated .milvus.proto.data.FieldBinlog insert_logs = 4;
  int insert_logs_size() const;
  private:
  int _internal_insert_logs_size() const;
  public:
  void clear_insert_logs();
  ::milvus::proto::data::FieldBinlog* mutable_insert_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_insert_logs();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_insert_logs(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_insert_logs();
  public:
  const ::milvus::proto::data::FieldBinlog& insert_logs(int index) const;
  ::milvus::proto::data::FieldBinlog* add_insert_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      insert_logs() const;

  // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 5;
  int field2statslogpaths_size() const;
  private:
  int _internal_field2statslogpaths_size() const;
  public:
  void clear_field2statslogpaths();
  ::milvus::proto::data::FieldBinlog* mutable_field2statslogpaths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_field2statslogpaths();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_field2statslogpaths(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_field2statslogpaths();
  public:
  const ::milvus::proto::data::FieldBinlog& field2statslogpaths(int index) const;
  ::milvus::proto::data::FieldBinlog* add_field2statslogpaths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      field2statslogpaths() const;

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 6;
  int deltalogs_size() const;
  private:
  int _internal_deltalogs_size() const;
  public:
  void clear_deltalogs();
  ::milvus::proto::data::FieldBinlog* mutable_deltalogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_deltalogs();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_deltalogs(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_deltalogs();
  public:
  const ::milvus::proto::data::FieldBinlog& deltalogs(int index) const;
  ::milvus::proto::data::FieldBinlog* add_deltalogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      deltalogs() const;

  // string channel = 7;
  void clear_channel();
  const std::string& channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // int64 planID = 1;
  void clear_planid();
  int64_t planid() const;
  void set_planid(int64_t value);
  private:
  int64_t _internal_planid() const;
  void _internal_set_planid(int64_t value);
  public:

  // int64 segmentID = 2;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // int64 num_of_rows = 3;
  void clear_num_of_rows();
  int64_t num_of_rows() const;
  void set_num_of_rows(int64_t value);
  private:
  int64_t _internal_num_of_rows() const;
  void _internal_set_num_of_rows(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.CompactionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > insert_logs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > field2statslogpaths_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > deltalogs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
    int64_t planid_;
    int64_t segmentid_;
    int64_t num_of_rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class CompactionStateResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.CompactionStateResult) */ {
 public:
  inline CompactionStateResult() : CompactionStateResult(nullptr) {}
  ~CompactionStateResult() override;
  explicit PROTOBUF_CONSTEXPR CompactionStateResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompactionStateResult(const CompactionStateResult& from);
  CompactionStateResult(CompactionStateResult&& from) noexcept
    : CompactionStateResult() {
    *this = ::std::move(from);
  }

  inline CompactionStateResult& operator=(const CompactionStateResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactionStateResult& operator=(CompactionStateResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompactionStateResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompactionStateResult* internal_default_instance() {
    return reinterpret_cast<const CompactionStateResult*>(
               &_CompactionStateResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CompactionStateResult& a, CompactionStateResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactionStateResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompactionStateResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompactionStateResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompactionStateResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompactionStateResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompactionStateResult& from) {
    CompactionStateResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactionStateResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.CompactionStateResult";
  }
  protected:
  explicit CompactionStateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 3,
    kPlanIDFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .milvus.proto.data.CompactionResult result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::milvus::proto::data::CompactionResult& result() const;
  PROTOBUF_NODISCARD ::milvus::proto::data::CompactionResult* release_result();
  ::milvus::proto::data::CompactionResult* mutable_result();
  void set_allocated_result(::milvus::proto::data::CompactionResult* result);
  private:
  const ::milvus::proto::data::CompactionResult& _internal_result() const;
  ::milvus::proto::data::CompactionResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::milvus::proto::data::CompactionResult* result);
  ::milvus::proto::data::CompactionResult* unsafe_arena_release_result();

  // int64 planID = 1;
  void clear_planid();
  int64_t planid() const;
  void set_planid(int64_t value);
  private:
  int64_t _internal_planid() const;
  void _internal_set_planid(int64_t value);
  public:

  // .milvus.proto.common.CompactionState state = 2;
  void clear_state();
  ::milvus::proto::common::CompactionState state() const;
  void set_state(::milvus::proto::common::CompactionState value);
  private:
  ::milvus::proto::common::CompactionState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::CompactionState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.CompactionStateResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::data::CompactionResult* result_;
    int64_t planid_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class CompactionStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.CompactionStateResponse) */ {
 public:
  inline CompactionStateResponse() : CompactionStateResponse(nullptr) {}
  ~CompactionStateResponse() override;
  explicit PROTOBUF_CONSTEXPR CompactionStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompactionStateResponse(const CompactionStateResponse& from);
  CompactionStateResponse(CompactionStateResponse&& from) noexcept
    : CompactionStateResponse() {
    *this = ::std::move(from);
  }

  inline CompactionStateResponse& operator=(const CompactionStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactionStateResponse& operator=(CompactionStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompactionStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompactionStateResponse* internal_default_instance() {
    return reinterpret_cast<const CompactionStateResponse*>(
               &_CompactionStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CompactionStateResponse& a, CompactionStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactionStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompactionStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompactionStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompactionStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompactionStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompactionStateResponse& from) {
    CompactionStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactionStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.CompactionStateResponse";
  }
  protected:
  explicit CompactionStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.data.CompactionStateResult results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::milvus::proto::data::CompactionStateResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CompactionStateResult >*
      mutable_results();
  private:
  const ::milvus::proto::data::CompactionStateResult& _internal_results(int index) const;
  ::milvus::proto::data::CompactionStateResult* _internal_add_results();
  public:
  const ::milvus::proto::data::CompactionStateResult& results(int index) const;
  ::milvus::proto::data::CompactionStateResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CompactionStateResult >&
      results() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.CompactionStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CompactionStateResult > results_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SegmentFieldBinlogMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SegmentFieldBinlogMeta) */ {
 public:
  inline SegmentFieldBinlogMeta() : SegmentFieldBinlogMeta(nullptr) {}
  ~SegmentFieldBinlogMeta() override;
  explicit PROTOBUF_CONSTEXPR SegmentFieldBinlogMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentFieldBinlogMeta(const SegmentFieldBinlogMeta& from);
  SegmentFieldBinlogMeta(SegmentFieldBinlogMeta&& from) noexcept
    : SegmentFieldBinlogMeta() {
    *this = ::std::move(from);
  }

  inline SegmentFieldBinlogMeta& operator=(const SegmentFieldBinlogMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentFieldBinlogMeta& operator=(SegmentFieldBinlogMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentFieldBinlogMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentFieldBinlogMeta* internal_default_instance() {
    return reinterpret_cast<const SegmentFieldBinlogMeta*>(
               &_SegmentFieldBinlogMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(SegmentFieldBinlogMeta& a, SegmentFieldBinlogMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentFieldBinlogMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentFieldBinlogMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentFieldBinlogMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentFieldBinlogMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentFieldBinlogMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentFieldBinlogMeta& from) {
    SegmentFieldBinlogMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentFieldBinlogMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SegmentFieldBinlogMeta";
  }
  protected:
  explicit SegmentFieldBinlogMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinlogPathFieldNumber = 2,
    kFieldIDFieldNumber = 1,
  };
  // string binlog_path = 2;
  void clear_binlog_path();
  const std::string& binlog_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_binlog_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_binlog_path();
  PROTOBUF_NODISCARD std::string* release_binlog_path();
  void set_allocated_binlog_path(std::string* binlog_path);
  private:
  const std::string& _internal_binlog_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_binlog_path(const std::string& value);
  std::string* _internal_mutable_binlog_path();
  public:

  // int64 fieldID = 1;
  void clear_fieldid();
  int64_t fieldid() const;
  void set_fieldid(int64_t value);
  private:
  int64_t _internal_fieldid() const;
  void _internal_set_fieldid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SegmentFieldBinlogMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binlog_path_;
    int64_t fieldid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class WatchChannelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.WatchChannelsRequest) */ {
 public:
  inline WatchChannelsRequest() : WatchChannelsRequest(nullptr) {}
  ~WatchChannelsRequest() override;
  explicit PROTOBUF_CONSTEXPR WatchChannelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchChannelsRequest(const WatchChannelsRequest& from);
  WatchChannelsRequest(WatchChannelsRequest&& from) noexcept
    : WatchChannelsRequest() {
    *this = ::std::move(from);
  }

  inline WatchChannelsRequest& operator=(const WatchChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchChannelsRequest& operator=(WatchChannelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchChannelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const WatchChannelsRequest*>(
               &_WatchChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(WatchChannelsRequest& a, WatchChannelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchChannelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchChannelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchChannelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchChannelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchChannelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WatchChannelsRequest& from) {
    WatchChannelsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchChannelsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.WatchChannelsRequest";
  }
  protected:
  explicit WatchChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNamesFieldNumber = 2,
    kStartPositionsFieldNumber = 3,
    kSchemaFieldNumber = 4,
    kCollectionIDFieldNumber = 1,
  };
  // repeated string channelNames = 2;
  int channelnames_size() const;
  private:
  int _internal_channelnames_size() const;
  public:
  void clear_channelnames();
  const std::string& channelnames(int index) const;
  std::string* mutable_channelnames(int index);
  void set_channelnames(int index, const std::string& value);
  void set_channelnames(int index, std::string&& value);
  void set_channelnames(int index, const char* value);
  void set_channelnames(int index, const char* value, size_t size);
  std::string* add_channelnames();
  void add_channelnames(const std::string& value);
  void add_channelnames(std::string&& value);
  void add_channelnames(const char* value);
  void add_channelnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channelnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channelnames();
  private:
  const std::string& _internal_channelnames(int index) const;
  std::string* _internal_add_channelnames();
  public:

  // repeated .milvus.proto.common.KeyDataPair start_positions = 3;
  int start_positions_size() const;
  private:
  int _internal_start_positions_size() const;
  public:
  void clear_start_positions();
  ::milvus::proto::common::KeyDataPair* mutable_start_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >*
      mutable_start_positions();
  private:
  const ::milvus::proto::common::KeyDataPair& _internal_start_positions(int index) const;
  ::milvus::proto::common::KeyDataPair* _internal_add_start_positions();
  public:
  const ::milvus::proto::common::KeyDataPair& start_positions(int index) const;
  ::milvus::proto::common::KeyDataPair* add_start_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >&
      start_positions() const;

  // .milvus.proto.schema.CollectionSchema schema = 4;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::milvus::proto::schema::CollectionSchema& schema() const;
  PROTOBUF_NODISCARD ::milvus::proto::schema::CollectionSchema* release_schema();
  ::milvus::proto::schema::CollectionSchema* mutable_schema();
  void set_allocated_schema(::milvus::proto::schema::CollectionSchema* schema);
  private:
  const ::milvus::proto::schema::CollectionSchema& _internal_schema() const;
  ::milvus::proto::schema::CollectionSchema* _internal_mutable_schema();
  public:
  void unsafe_arena_set_allocated_schema(
      ::milvus::proto::schema::CollectionSchema* schema);
  ::milvus::proto::schema::CollectionSchema* unsafe_arena_release_schema();

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.WatchChannelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channelnames_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair > start_positions_;
    ::milvus::proto::schema::CollectionSchema* schema_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class WatchChannelsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.WatchChannelsResponse) */ {
 public:
  inline WatchChannelsResponse() : WatchChannelsResponse(nullptr) {}
  ~WatchChannelsResponse() override;
  explicit PROTOBUF_CONSTEXPR WatchChannelsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchChannelsResponse(const WatchChannelsResponse& from);
  WatchChannelsResponse(WatchChannelsResponse&& from) noexcept
    : WatchChannelsResponse() {
    *this = ::std::move(from);
  }

  inline WatchChannelsResponse& operator=(const WatchChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchChannelsResponse& operator=(WatchChannelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchChannelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const WatchChannelsResponse*>(
               &_WatchChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(WatchChannelsResponse& a, WatchChannelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchChannelsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchChannelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchChannelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchChannelsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchChannelsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WatchChannelsResponse& from) {
    WatchChannelsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchChannelsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.WatchChannelsResponse";
  }
  protected:
  explicit WatchChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.WatchChannelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SetSegmentStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SetSegmentStateRequest) */ {
 public:
  inline SetSegmentStateRequest() : SetSegmentStateRequest(nullptr) {}
  ~SetSegmentStateRequest() override;
  explicit PROTOBUF_CONSTEXPR SetSegmentStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSegmentStateRequest(const SetSegmentStateRequest& from);
  SetSegmentStateRequest(SetSegmentStateRequest&& from) noexcept
    : SetSegmentStateRequest() {
    *this = ::std::move(from);
  }

  inline SetSegmentStateRequest& operator=(const SetSegmentStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSegmentStateRequest& operator=(SetSegmentStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSegmentStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSegmentStateRequest* internal_default_instance() {
    return reinterpret_cast<const SetSegmentStateRequest*>(
               &_SetSegmentStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SetSegmentStateRequest& a, SetSegmentStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSegmentStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSegmentStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSegmentStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSegmentStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetSegmentStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetSegmentStateRequest& from) {
    SetSegmentStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSegmentStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SetSegmentStateRequest";
  }
  protected:
  explicit SetSegmentStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kSegmentIdFieldNumber = 2,
    kNewStateFieldNumber = 3,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 segment_id = 2;
  void clear_segment_id();
  int64_t segment_id() const;
  void set_segment_id(int64_t value);
  private:
  int64_t _internal_segment_id() const;
  void _internal_set_segment_id(int64_t value);
  public:

  // .milvus.proto.common.SegmentState new_state = 3;
  void clear_new_state();
  ::milvus::proto::common::SegmentState new_state() const;
  void set_new_state(::milvus::proto::common::SegmentState value);
  private:
  ::milvus::proto::common::SegmentState _internal_new_state() const;
  void _internal_set_new_state(::milvus::proto::common::SegmentState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SetSegmentStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    int64_t segment_id_;
    int new_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SetSegmentStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SetSegmentStateResponse) */ {
 public:
  inline SetSegmentStateResponse() : SetSegmentStateResponse(nullptr) {}
  ~SetSegmentStateResponse() override;
  explicit PROTOBUF_CONSTEXPR SetSegmentStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSegmentStateResponse(const SetSegmentStateResponse& from);
  SetSegmentStateResponse(SetSegmentStateResponse&& from) noexcept
    : SetSegmentStateResponse() {
    *this = ::std::move(from);
  }

  inline SetSegmentStateResponse& operator=(const SetSegmentStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSegmentStateResponse& operator=(SetSegmentStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSegmentStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSegmentStateResponse* internal_default_instance() {
    return reinterpret_cast<const SetSegmentStateResponse*>(
               &_SetSegmentStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(SetSegmentStateResponse& a, SetSegmentStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSegmentStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSegmentStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSegmentStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSegmentStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetSegmentStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetSegmentStateResponse& from) {
    SetSegmentStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSegmentStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SetSegmentStateResponse";
  }
  protected:
  explicit SetSegmentStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SetSegmentStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class DropVirtualChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.DropVirtualChannelRequest) */ {
 public:
  inline DropVirtualChannelRequest() : DropVirtualChannelRequest(nullptr) {}
  ~DropVirtualChannelRequest() override;
  explicit PROTOBUF_CONSTEXPR DropVirtualChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropVirtualChannelRequest(const DropVirtualChannelRequest& from);
  DropVirtualChannelRequest(DropVirtualChannelRequest&& from) noexcept
    : DropVirtualChannelRequest() {
    *this = ::std::move(from);
  }

  inline DropVirtualChannelRequest& operator=(const DropVirtualChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropVirtualChannelRequest& operator=(DropVirtualChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropVirtualChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropVirtualChannelRequest* internal_default_instance() {
    return reinterpret_cast<const DropVirtualChannelRequest*>(
               &_DropVirtualChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(DropVirtualChannelRequest& a, DropVirtualChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropVirtualChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropVirtualChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropVirtualChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropVirtualChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropVirtualChannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropVirtualChannelRequest& from) {
    DropVirtualChannelRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropVirtualChannelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.DropVirtualChannelRequest";
  }
  protected:
  explicit DropVirtualChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 3,
    kChannelNameFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated .milvus.proto.data.DropVirtualChannelSegment segments = 3;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::milvus::proto::data::DropVirtualChannelSegment* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::DropVirtualChannelSegment >*
      mutable_segments();
  private:
  const ::milvus::proto::data::DropVirtualChannelSegment& _internal_segments(int index) const;
  ::milvus::proto::data::DropVirtualChannelSegment* _internal_add_segments();
  public:
  const ::milvus::proto::data::DropVirtualChannelSegment& segments(int index) const;
  ::milvus::proto::data::DropVirtualChannelSegment* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::DropVirtualChannelSegment >&
      segments() const;

  // string channel_name = 2;
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_NODISCARD std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.DropVirtualChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::DropVirtualChannelSegment > segments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class DropVirtualChannelSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.DropVirtualChannelSegment) */ {
 public:
  inline DropVirtualChannelSegment() : DropVirtualChannelSegment(nullptr) {}
  ~DropVirtualChannelSegment() override;
  explicit PROTOBUF_CONSTEXPR DropVirtualChannelSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropVirtualChannelSegment(const DropVirtualChannelSegment& from);
  DropVirtualChannelSegment(DropVirtualChannelSegment&& from) noexcept
    : DropVirtualChannelSegment() {
    *this = ::std::move(from);
  }

  inline DropVirtualChannelSegment& operator=(const DropVirtualChannelSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropVirtualChannelSegment& operator=(DropVirtualChannelSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropVirtualChannelSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropVirtualChannelSegment* internal_default_instance() {
    return reinterpret_cast<const DropVirtualChannelSegment*>(
               &_DropVirtualChannelSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(DropVirtualChannelSegment& a, DropVirtualChannelSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(DropVirtualChannelSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropVirtualChannelSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropVirtualChannelSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropVirtualChannelSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropVirtualChannelSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropVirtualChannelSegment& from) {
    DropVirtualChannelSegment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropVirtualChannelSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.DropVirtualChannelSegment";
  }
  protected:
  explicit DropVirtualChannelSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kField2BinlogPathsFieldNumber = 3,
    kField2StatslogPathsFieldNumber = 4,
    kDeltalogsFieldNumber = 5,
    kStartPositionFieldNumber = 6,
    kCheckPointFieldNumber = 7,
    kSegmentIDFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kNumOfRowsFieldNumber = 8,
  };
  // repeated .milvus.proto.data.FieldBinlog field2BinlogPaths = 3;
  int field2binlogpaths_size() const;
  private:
  int _internal_field2binlogpaths_size() const;
  public:
  void clear_field2binlogpaths();
  ::milvus::proto::data::FieldBinlog* mutable_field2binlogpaths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_field2binlogpaths();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_field2binlogpaths(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_field2binlogpaths();
  public:
  const ::milvus::proto::data::FieldBinlog& field2binlogpaths(int index) const;
  ::milvus::proto::data::FieldBinlog* add_field2binlogpaths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      field2binlogpaths() const;

  // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 4;
  int field2statslogpaths_size() const;
  private:
  int _internal_field2statslogpaths_size() const;
  public:
  void clear_field2statslogpaths();
  ::milvus::proto::data::FieldBinlog* mutable_field2statslogpaths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_field2statslogpaths();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_field2statslogpaths(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_field2statslogpaths();
  public:
  const ::milvus::proto::data::FieldBinlog& field2statslogpaths(int index) const;
  ::milvus::proto::data::FieldBinlog* add_field2statslogpaths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      field2statslogpaths() const;

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 5;
  int deltalogs_size() const;
  private:
  int _internal_deltalogs_size() const;
  public:
  void clear_deltalogs();
  ::milvus::proto::data::FieldBinlog* mutable_deltalogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_deltalogs();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_deltalogs(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_deltalogs();
  public:
  const ::milvus::proto::data::FieldBinlog& deltalogs(int index) const;
  ::milvus::proto::data::FieldBinlog* add_deltalogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      deltalogs() const;

  // .milvus.proto.msg.MsgPosition startPosition = 6;
  bool has_startposition() const;
  private:
  bool _internal_has_startposition() const;
  public:
  void clear_startposition();
  const ::milvus::proto::msg::MsgPosition& startposition() const;
  PROTOBUF_NODISCARD ::milvus::proto::msg::MsgPosition* release_startposition();
  ::milvus::proto::msg::MsgPosition* mutable_startposition();
  void set_allocated_startposition(::milvus::proto::msg::MsgPosition* startposition);
  private:
  const ::milvus::proto::msg::MsgPosition& _internal_startposition() const;
  ::milvus::proto::msg::MsgPosition* _internal_mutable_startposition();
  public:
  void unsafe_arena_set_allocated_startposition(
      ::milvus::proto::msg::MsgPosition* startposition);
  ::milvus::proto::msg::MsgPosition* unsafe_arena_release_startposition();

  // .milvus.proto.msg.MsgPosition checkPoint = 7;
  bool has_checkpoint() const;
  private:
  bool _internal_has_checkpoint() const;
  public:
  void clear_checkpoint();
  const ::milvus::proto::msg::MsgPosition& checkpoint() const;
  PROTOBUF_NODISCARD ::milvus::proto::msg::MsgPosition* release_checkpoint();
  ::milvus::proto::msg::MsgPosition* mutable_checkpoint();
  void set_allocated_checkpoint(::milvus::proto::msg::MsgPosition* checkpoint);
  private:
  const ::milvus::proto::msg::MsgPosition& _internal_checkpoint() const;
  ::milvus::proto::msg::MsgPosition* _internal_mutable_checkpoint();
  public:
  void unsafe_arena_set_allocated_checkpoint(
      ::milvus::proto::msg::MsgPosition* checkpoint);
  ::milvus::proto::msg::MsgPosition* unsafe_arena_release_checkpoint();

  // int64 segmentID = 1;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // int64 collectionID = 2;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 numOfRows = 8;
  void clear_numofrows();
  int64_t numofrows() const;
  void set_numofrows(int64_t value);
  private:
  int64_t _internal_numofrows() const;
  void _internal_set_numofrows(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.DropVirtualChannelSegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > field2binlogpaths_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > field2statslogpaths_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > deltalogs_;
    ::milvus::proto::msg::MsgPosition* startposition_;
    ::milvus::proto::msg::MsgPosition* checkpoint_;
    int64_t segmentid_;
    int64_t collectionid_;
    int64_t numofrows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class DropVirtualChannelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.DropVirtualChannelResponse) */ {
 public:
  inline DropVirtualChannelResponse() : DropVirtualChannelResponse(nullptr) {}
  ~DropVirtualChannelResponse() override;
  explicit PROTOBUF_CONSTEXPR DropVirtualChannelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropVirtualChannelResponse(const DropVirtualChannelResponse& from);
  DropVirtualChannelResponse(DropVirtualChannelResponse&& from) noexcept
    : DropVirtualChannelResponse() {
    *this = ::std::move(from);
  }

  inline DropVirtualChannelResponse& operator=(const DropVirtualChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropVirtualChannelResponse& operator=(DropVirtualChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropVirtualChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropVirtualChannelResponse* internal_default_instance() {
    return reinterpret_cast<const DropVirtualChannelResponse*>(
               &_DropVirtualChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(DropVirtualChannelResponse& a, DropVirtualChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DropVirtualChannelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropVirtualChannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropVirtualChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropVirtualChannelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropVirtualChannelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropVirtualChannelResponse& from) {
    DropVirtualChannelResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropVirtualChannelResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.DropVirtualChannelResponse";
  }
  protected:
  explicit DropVirtualChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.DropVirtualChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class ImportTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.ImportTask) */ {
 public:
  inline ImportTask() : ImportTask(nullptr) {}
  ~ImportTask() override;
  explicit PROTOBUF_CONSTEXPR ImportTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportTask(const ImportTask& from);
  ImportTask(ImportTask&& from) noexcept
    : ImportTask() {
    *this = ::std::move(from);
  }

  inline ImportTask& operator=(const ImportTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportTask& operator=(ImportTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportTask* internal_default_instance() {
    return reinterpret_cast<const ImportTask*>(
               &_ImportTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(ImportTask& a, ImportTask& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportTask& from) {
    ImportTask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.ImportTask";
  }
  protected:
  explicit ImportTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNamesFieldNumber = 4,
    kFilesFieldNumber = 7,
    kInfosFieldNumber = 8,
    kDatabaseNameFieldNumber = 16,
    kStatusFieldNumber = 1,
    kCollectionIdFieldNumber = 2,
    kPartitionIdFieldNumber = 3,
    kTaskIdFieldNumber = 6,
    kRowBasedFieldNumber = 5,
  };
  // repeated string channel_names = 4;
  int channel_names_size() const;
  private:
  int _internal_channel_names_size() const;
  public:
  void clear_channel_names();
  const std::string& channel_names(int index) const;
  std::string* mutable_channel_names(int index);
  void set_channel_names(int index, const std::string& value);
  void set_channel_names(int index, std::string&& value);
  void set_channel_names(int index, const char* value);
  void set_channel_names(int index, const char* value, size_t size);
  std::string* add_channel_names();
  void add_channel_names(const std::string& value);
  void add_channel_names(std::string&& value);
  void add_channel_names(const char* value);
  void add_channel_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channel_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channel_names();
  private:
  const std::string& _internal_channel_names(int index) const;
  std::string* _internal_add_channel_names();
  public:

  // repeated string files = 7;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  const std::string& files(int index) const;
  std::string* mutable_files(int index);
  void set_files(int index, const std::string& value);
  void set_files(int index, std::string&& value);
  void set_files(int index, const char* value);
  void set_files(int index, const char* value, size_t size);
  std::string* add_files();
  void add_files(const std::string& value);
  void add_files(std::string&& value);
  void add_files(const char* value);
  void add_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_files();
  private:
  const std::string& _internal_files(int index) const;
  std::string* _internal_add_files();
  public:

  // repeated .milvus.proto.common.KeyValuePair infos = 8;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::milvus::proto::common::KeyValuePair* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_infos();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_infos(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_infos();
  public:
  const ::milvus::proto::common::KeyValuePair& infos(int index) const;
  ::milvus::proto::common::KeyValuePair* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      infos() const;

  // string database_name = 16;
  void clear_database_name();
  const std::string& database_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_name();
  PROTOBUF_NODISCARD std::string* release_database_name();
  void set_allocated_database_name(std::string* database_name);
  private:
  const std::string& _internal_database_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_name(const std::string& value);
  std::string* _internal_mutable_database_name();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // int64 collection_id = 2;
  void clear_collection_id();
  int64_t collection_id() const;
  void set_collection_id(int64_t value);
  private:
  int64_t _internal_collection_id() const;
  void _internal_set_collection_id(int64_t value);
  public:

  // int64 partition_id = 3;
  void clear_partition_id();
  int64_t partition_id() const;
  void set_partition_id(int64_t value);
  private:
  int64_t _internal_partition_id() const;
  void _internal_set_partition_id(int64_t value);
  public:

  // int64 task_id = 6;
  void clear_task_id();
  int64_t task_id() const;
  void set_task_id(int64_t value);
  private:
  int64_t _internal_task_id() const;
  void _internal_set_task_id(int64_t value);
  public:

  // bool row_based = 5;
  void clear_row_based();
  bool row_based() const;
  void set_row_based(bool value);
  private:
  bool _internal_row_based() const;
  void _internal_set_row_based(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.ImportTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channel_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> files_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > infos_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_name_;
    ::milvus::proto::common::Status* status_;
    int64_t collection_id_;
    int64_t partition_id_;
    int64_t task_id_;
    bool row_based_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class ImportTaskState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.ImportTaskState) */ {
 public:
  inline ImportTaskState() : ImportTaskState(nullptr) {}
  ~ImportTaskState() override;
  explicit PROTOBUF_CONSTEXPR ImportTaskState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportTaskState(const ImportTaskState& from);
  ImportTaskState(ImportTaskState&& from) noexcept
    : ImportTaskState() {
    *this = ::std::move(from);
  }

  inline ImportTaskState& operator=(const ImportTaskState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportTaskState& operator=(ImportTaskState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportTaskState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportTaskState* internal_default_instance() {
    return reinterpret_cast<const ImportTaskState*>(
               &_ImportTaskState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(ImportTaskState& a, ImportTaskState& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportTaskState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportTaskState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportTaskState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportTaskState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportTaskState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportTaskState& from) {
    ImportTaskState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportTaskState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.ImportTaskState";
  }
  protected:
  explicit ImportTaskState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 2,
    kRowIdsFieldNumber = 3,
    kErrorMessageFieldNumber = 5,
    kRowCountFieldNumber = 4,
    kStateCodeFieldNumber = 1,
  };
  // repeated int64 segments = 2;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  private:
  int64_t _internal_segments(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segments() const;
  void _internal_add_segments(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segments();
  public:
  int64_t segments(int index) const;
  void set_segments(int index, int64_t value);
  void add_segments(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segments();

  // repeated int64 row_ids = 3;
  int row_ids_size() const;
  private:
  int _internal_row_ids_size() const;
  public:
  void clear_row_ids();
  private:
  int64_t _internal_row_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_row_ids() const;
  void _internal_add_row_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_row_ids();
  public:
  int64_t row_ids(int index) const;
  void set_row_ids(int index, int64_t value);
  void add_row_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      row_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_row_ids();

  // string error_message = 5;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // int64 row_count = 4;
  void clear_row_count();
  int64_t row_count() const;
  void set_row_count(int64_t value);
  private:
  int64_t _internal_row_count() const;
  void _internal_set_row_count(int64_t value);
  public:

  // .milvus.proto.common.ImportState stateCode = 1;
  void clear_statecode();
  ::milvus::proto::common::ImportState statecode() const;
  void set_statecode(::milvus::proto::common::ImportState value);
  private:
  ::milvus::proto::common::ImportState _internal_statecode() const;
  void _internal_set_statecode(::milvus::proto::common::ImportState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.ImportTaskState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segments_;
    mutable std::atomic<int> _segments_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > row_ids_;
    mutable std::atomic<int> _row_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    int64_t row_count_;
    int statecode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class ImportTaskInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.ImportTaskInfo) */ {
 public:
  inline ImportTaskInfo() : ImportTaskInfo(nullptr) {}
  ~ImportTaskInfo() override;
  explicit PROTOBUF_CONSTEXPR ImportTaskInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportTaskInfo(const ImportTaskInfo& from);
  ImportTaskInfo(ImportTaskInfo&& from) noexcept
    : ImportTaskInfo() {
    *this = ::std::move(from);
  }

  inline ImportTaskInfo& operator=(const ImportTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportTaskInfo& operator=(ImportTaskInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportTaskInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportTaskInfo* internal_default_instance() {
    return reinterpret_cast<const ImportTaskInfo*>(
               &_ImportTaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ImportTaskInfo& a, ImportTaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportTaskInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportTaskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportTaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportTaskInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportTaskInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportTaskInfo& from) {
    ImportTaskInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportTaskInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.ImportTaskInfo";
  }
  protected:
  explicit ImportTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNamesFieldNumber = 6,
    kFilesFieldNumber = 9,
    kInfosFieldNumber = 14,
    kBucketFieldNumber = 7,
    kCollectionNameFieldNumber = 12,
    kPartitionNameFieldNumber = 13,
    kDatabaseNameFieldNumber = 16,
    kStateFieldNumber = 11,
    kIdFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kDatanodeIdFieldNumber = 3,
    kCollectionIdFieldNumber = 4,
    kPartitionIdFieldNumber = 5,
    kCreateTsFieldNumber = 10,
    kStartTsFieldNumber = 15,
    kRowBasedFieldNumber = 8,
  };
  // repeated string channel_names = 6;
  int channel_names_size() const;
  private:
  int _internal_channel_names_size() const;
  public:
  void clear_channel_names();
  const std::string& channel_names(int index) const;
  std::string* mutable_channel_names(int index);
  void set_channel_names(int index, const std::string& value);
  void set_channel_names(int index, std::string&& value);
  void set_channel_names(int index, const char* value);
  void set_channel_names(int index, const char* value, size_t size);
  std::string* add_channel_names();
  void add_channel_names(const std::string& value);
  void add_channel_names(std::string&& value);
  void add_channel_names(const char* value);
  void add_channel_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channel_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channel_names();
  private:
  const std::string& _internal_channel_names(int index) const;
  std::string* _internal_add_channel_names();
  public:

  // repeated string files = 9;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  const std::string& files(int index) const;
  std::string* mutable_files(int index);
  void set_files(int index, const std::string& value);
  void set_files(int index, std::string&& value);
  void set_files(int index, const char* value);
  void set_files(int index, const char* value, size_t size);
  std::string* add_files();
  void add_files(const std::string& value);
  void add_files(std::string&& value);
  void add_files(const char* value);
  void add_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_files();
  private:
  const std::string& _internal_files(int index) const;
  std::string* _internal_add_files();
  public:

  // repeated .milvus.proto.common.KeyValuePair infos = 14;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::milvus::proto::common::KeyValuePair* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_infos();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_infos(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_infos();
  public:
  const ::milvus::proto::common::KeyValuePair& infos(int index) const;
  ::milvus::proto::common::KeyValuePair* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      infos() const;

  // string bucket = 7;
  void clear_bucket();
  const std::string& bucket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string collection_name = 12;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 13;
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // string database_name = 16;
  void clear_database_name();
  const std::string& database_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_name();
  PROTOBUF_NODISCARD std::string* release_database_name();
  void set_allocated_database_name(std::string* database_name);
  private:
  const std::string& _internal_database_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_name(const std::string& value);
  std::string* _internal_mutable_database_name();
  public:

  // .milvus.proto.data.ImportTaskState state = 11;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::milvus::proto::data::ImportTaskState& state() const;
  PROTOBUF_NODISCARD ::milvus::proto::data::ImportTaskState* release_state();
  ::milvus::proto::data::ImportTaskState* mutable_state();
  void set_allocated_state(::milvus::proto::data::ImportTaskState* state);
  private:
  const ::milvus::proto::data::ImportTaskState& _internal_state() const;
  ::milvus::proto::data::ImportTaskState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::milvus::proto::data::ImportTaskState* state);
  ::milvus::proto::data::ImportTaskState* unsafe_arena_release_state();

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 request_id = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_request_id();
  PROTOBUF_DEPRECATED int64_t request_id() const;
  PROTOBUF_DEPRECATED void set_request_id(int64_t value);
  private:
  int64_t _internal_request_id() const;
  void _internal_set_request_id(int64_t value);
  public:

  // int64 datanode_id = 3;
  void clear_datanode_id();
  int64_t datanode_id() const;
  void set_datanode_id(int64_t value);
  private:
  int64_t _internal_datanode_id() const;
  void _internal_set_datanode_id(int64_t value);
  public:

  // int64 collection_id = 4;
  void clear_collection_id();
  int64_t collection_id() const;
  void set_collection_id(int64_t value);
  private:
  int64_t _internal_collection_id() const;
  void _internal_set_collection_id(int64_t value);
  public:

  // int64 partition_id = 5;
  void clear_partition_id();
  int64_t partition_id() const;
  void set_partition_id(int64_t value);
  private:
  int64_t _internal_partition_id() const;
  void _internal_set_partition_id(int64_t value);
  public:

  // int64 create_ts = 10;
  void clear_create_ts();
  int64_t create_ts() const;
  void set_create_ts(int64_t value);
  private:
  int64_t _internal_create_ts() const;
  void _internal_set_create_ts(int64_t value);
  public:

  // int64 start_ts = 15;
  void clear_start_ts();
  int64_t start_ts() const;
  void set_start_ts(int64_t value);
  private:
  int64_t _internal_start_ts() const;
  void _internal_set_start_ts(int64_t value);
  public:

  // bool row_based = 8;
  void clear_row_based();
  bool row_based() const;
  void set_row_based(bool value);
  private:
  bool _internal_row_based() const;
  void _internal_set_row_based(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.ImportTaskInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channel_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> files_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > infos_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_name_;
    ::milvus::proto::data::ImportTaskState* state_;
    int64_t id_;
    int64_t request_id_;
    int64_t datanode_id_;
    int64_t collection_id_;
    int64_t partition_id_;
    int64_t create_ts_;
    int64_t start_ts_;
    bool row_based_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class ImportTaskResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.ImportTaskResponse) */ {
 public:
  inline ImportTaskResponse() : ImportTaskResponse(nullptr) {}
  ~ImportTaskResponse() override;
  explicit PROTOBUF_CONSTEXPR ImportTaskResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportTaskResponse(const ImportTaskResponse& from);
  ImportTaskResponse(ImportTaskResponse&& from) noexcept
    : ImportTaskResponse() {
    *this = ::std::move(from);
  }

  inline ImportTaskResponse& operator=(const ImportTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportTaskResponse& operator=(ImportTaskResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportTaskResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportTaskResponse* internal_default_instance() {
    return reinterpret_cast<const ImportTaskResponse*>(
               &_ImportTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ImportTaskResponse& a, ImportTaskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportTaskResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportTaskResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportTaskResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportTaskResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportTaskResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportTaskResponse& from) {
    ImportTaskResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportTaskResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.ImportTaskResponse";
  }
  protected:
  explicit ImportTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDatanodeIdFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // int64 datanode_id = 2;
  void clear_datanode_id();
  int64_t datanode_id() const;
  void set_datanode_id(int64_t value);
  private:
  int64_t _internal_datanode_id() const;
  void _internal_set_datanode_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.ImportTaskResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    int64_t datanode_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class ImportTaskRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.ImportTaskRequest) */ {
 public:
  inline ImportTaskRequest() : ImportTaskRequest(nullptr) {}
  ~ImportTaskRequest() override;
  explicit PROTOBUF_CONSTEXPR ImportTaskRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportTaskRequest(const ImportTaskRequest& from);
  ImportTaskRequest(ImportTaskRequest&& from) noexcept
    : ImportTaskRequest() {
    *this = ::std::move(from);
  }

  inline ImportTaskRequest& operator=(const ImportTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportTaskRequest& operator=(ImportTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportTaskRequest* internal_default_instance() {
    return reinterpret_cast<const ImportTaskRequest*>(
               &_ImportTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ImportTaskRequest& a, ImportTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportTaskRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportTaskRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportTaskRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportTaskRequest& from) {
    ImportTaskRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportTaskRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.ImportTaskRequest";
  }
  protected:
  explicit ImportTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkingNodesFieldNumber = 3,
    kBaseFieldNumber = 1,
    kImportTaskFieldNumber = 2,
  };
  // repeated int64 working_nodes = 3;
  int working_nodes_size() const;
  private:
  int _internal_working_nodes_size() const;
  public:
  void clear_working_nodes();
  private:
  int64_t _internal_working_nodes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_working_nodes() const;
  void _internal_add_working_nodes(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_working_nodes();
  public:
  int64_t working_nodes(int index) const;
  void set_working_nodes(int index, int64_t value);
  void add_working_nodes(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      working_nodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_working_nodes();

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.data.ImportTask import_task = 2;
  bool has_import_task() const;
  private:
  bool _internal_has_import_task() const;
  public:
  void clear_import_task();
  const ::milvus::proto::data::ImportTask& import_task() const;
  PROTOBUF_NODISCARD ::milvus::proto::data::ImportTask* release_import_task();
  ::milvus::proto::data::ImportTask* mutable_import_task();
  void set_allocated_import_task(::milvus::proto::data::ImportTask* import_task);
  private:
  const ::milvus::proto::data::ImportTask& _internal_import_task() const;
  ::milvus::proto::data::ImportTask* _internal_mutable_import_task();
  public:
  void unsafe_arena_set_allocated_import_task(
      ::milvus::proto::data::ImportTask* import_task);
  ::milvus::proto::data::ImportTask* unsafe_arena_release_import_task();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.ImportTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > working_nodes_;
    mutable std::atomic<int> _working_nodes_cached_byte_size_;
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::data::ImportTask* import_task_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class UpdateSegmentStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.UpdateSegmentStatisticsRequest) */ {
 public:
  inline UpdateSegmentStatisticsRequest() : UpdateSegmentStatisticsRequest(nullptr) {}
  ~UpdateSegmentStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateSegmentStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSegmentStatisticsRequest(const UpdateSegmentStatisticsRequest& from);
  UpdateSegmentStatisticsRequest(UpdateSegmentStatisticsRequest&& from) noexcept
    : UpdateSegmentStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSegmentStatisticsRequest& operator=(const UpdateSegmentStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSegmentStatisticsRequest& operator=(UpdateSegmentStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSegmentStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSegmentStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSegmentStatisticsRequest*>(
               &_UpdateSegmentStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(UpdateSegmentStatisticsRequest& a, UpdateSegmentStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSegmentStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSegmentStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSegmentStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSegmentStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSegmentStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSegmentStatisticsRequest& from) {
    UpdateSegmentStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSegmentStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.UpdateSegmentStatisticsRequest";
  }
  protected:
  explicit UpdateSegmentStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated .milvus.proto.common.SegmentStats stats = 2;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::milvus::proto::common::SegmentStats* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats >*
      mutable_stats();
  private:
  const ::milvus::proto::common::SegmentStats& _internal_stats(int index) const;
  ::milvus::proto::common::SegmentStats* _internal_add_stats();
  public:
  const ::milvus::proto::common::SegmentStats& stats(int index) const;
  ::milvus::proto::common::SegmentStats* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats >&
      stats() const;

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.UpdateSegmentStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats > stats_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class UpdateChannelCheckpointRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.UpdateChannelCheckpointRequest) */ {
 public:
  inline UpdateChannelCheckpointRequest() : UpdateChannelCheckpointRequest(nullptr) {}
  ~UpdateChannelCheckpointRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateChannelCheckpointRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateChannelCheckpointRequest(const UpdateChannelCheckpointRequest& from);
  UpdateChannelCheckpointRequest(UpdateChannelCheckpointRequest&& from) noexcept
    : UpdateChannelCheckpointRequest() {
    *this = ::std::move(from);
  }

  inline UpdateChannelCheckpointRequest& operator=(const UpdateChannelCheckpointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateChannelCheckpointRequest& operator=(UpdateChannelCheckpointRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateChannelCheckpointRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateChannelCheckpointRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateChannelCheckpointRequest*>(
               &_UpdateChannelCheckpointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(UpdateChannelCheckpointRequest& a, UpdateChannelCheckpointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateChannelCheckpointRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateChannelCheckpointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateChannelCheckpointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateChannelCheckpointRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateChannelCheckpointRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateChannelCheckpointRequest& from) {
    UpdateChannelCheckpointRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateChannelCheckpointRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.UpdateChannelCheckpointRequest";
  }
  protected:
  explicit UpdateChannelCheckpointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVChannelFieldNumber = 2,
    kBaseFieldNumber = 1,
    kPositionFieldNumber = 3,
  };
  // string vChannel = 2;
  void clear_vchannel();
  const std::string& vchannel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vchannel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vchannel();
  PROTOBUF_NODISCARD std::string* release_vchannel();
  void set_allocated_vchannel(std::string* vchannel);
  private:
  const std::string& _internal_vchannel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vchannel(const std::string& value);
  std::string* _internal_mutable_vchannel();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.msg.MsgPosition position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::milvus::proto::msg::MsgPosition& position() const;
  PROTOBUF_NODISCARD ::milvus::proto::msg::MsgPosition* release_position();
  ::milvus::proto::msg::MsgPosition* mutable_position();
  void set_allocated_position(::milvus::proto::msg::MsgPosition* position);
  private:
  const ::milvus::proto::msg::MsgPosition& _internal_position() const;
  ::milvus::proto::msg::MsgPosition* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::milvus::proto::msg::MsgPosition* position);
  ::milvus::proto::msg::MsgPosition* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.UpdateChannelCheckpointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vchannel_;
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::msg::MsgPosition* position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class ResendSegmentStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.ResendSegmentStatsRequest) */ {
 public:
  inline ResendSegmentStatsRequest() : ResendSegmentStatsRequest(nullptr) {}
  ~ResendSegmentStatsRequest() override;
  explicit PROTOBUF_CONSTEXPR ResendSegmentStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResendSegmentStatsRequest(const ResendSegmentStatsRequest& from);
  ResendSegmentStatsRequest(ResendSegmentStatsRequest&& from) noexcept
    : ResendSegmentStatsRequest() {
    *this = ::std::move(from);
  }

  inline ResendSegmentStatsRequest& operator=(const ResendSegmentStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResendSegmentStatsRequest& operator=(ResendSegmentStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResendSegmentStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResendSegmentStatsRequest* internal_default_instance() {
    return reinterpret_cast<const ResendSegmentStatsRequest*>(
               &_ResendSegmentStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(ResendSegmentStatsRequest& a, ResendSegmentStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResendSegmentStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResendSegmentStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResendSegmentStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResendSegmentStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResendSegmentStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResendSegmentStatsRequest& from) {
    ResendSegmentStatsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResendSegmentStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.ResendSegmentStatsRequest";
  }
  protected:
  explicit ResendSegmentStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.ResendSegmentStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class ResendSegmentStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.ResendSegmentStatsResponse) */ {
 public:
  inline ResendSegmentStatsResponse() : ResendSegmentStatsResponse(nullptr) {}
  ~ResendSegmentStatsResponse() override;
  explicit PROTOBUF_CONSTEXPR ResendSegmentStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResendSegmentStatsResponse(const ResendSegmentStatsResponse& from);
  ResendSegmentStatsResponse(ResendSegmentStatsResponse&& from) noexcept
    : ResendSegmentStatsResponse() {
    *this = ::std::move(from);
  }

  inline ResendSegmentStatsResponse& operator=(const ResendSegmentStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResendSegmentStatsResponse& operator=(ResendSegmentStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResendSegmentStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResendSegmentStatsResponse* internal_default_instance() {
    return reinterpret_cast<const ResendSegmentStatsResponse*>(
               &_ResendSegmentStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(ResendSegmentStatsResponse& a, ResendSegmentStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResendSegmentStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResendSegmentStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResendSegmentStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResendSegmentStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResendSegmentStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResendSegmentStatsResponse& from) {
    ResendSegmentStatsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResendSegmentStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.ResendSegmentStatsResponse";
  }
  protected:
  explicit ResendSegmentStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegResentFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated int64 seg_resent = 2;
  int seg_resent_size() const;
  private:
  int _internal_seg_resent_size() const;
  public:
  void clear_seg_resent();
  private:
  int64_t _internal_seg_resent(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_seg_resent() const;
  void _internal_add_seg_resent(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_seg_resent();
  public:
  int64_t seg_resent(int index) const;
  void set_seg_resent(int index, int64_t value);
  void add_seg_resent(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      seg_resent() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_seg_resent();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.ResendSegmentStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > seg_resent_;
    mutable std::atomic<int> _seg_resent_cached_byte_size_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class AddImportSegmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.AddImportSegmentRequest) */ {
 public:
  inline AddImportSegmentRequest() : AddImportSegmentRequest(nullptr) {}
  ~AddImportSegmentRequest() override;
  explicit PROTOBUF_CONSTEXPR AddImportSegmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddImportSegmentRequest(const AddImportSegmentRequest& from);
  AddImportSegmentRequest(AddImportSegmentRequest&& from) noexcept
    : AddImportSegmentRequest() {
    *this = ::std::move(from);
  }

  inline AddImportSegmentRequest& operator=(const AddImportSegmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddImportSegmentRequest& operator=(AddImportSegmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddImportSegmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddImportSegmentRequest* internal_default_instance() {
    return reinterpret_cast<const AddImportSegmentRequest*>(
               &_AddImportSegmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(AddImportSegmentRequest& a, AddImportSegmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddImportSegmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddImportSegmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddImportSegmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddImportSegmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddImportSegmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddImportSegmentRequest& from) {
    AddImportSegmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddImportSegmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.AddImportSegmentRequest";
  }
  protected:
  explicit AddImportSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsLogFieldNumber = 7,
    kChannelNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kSegmentIdFieldNumber = 2,
    kCollectionIdFieldNumber = 4,
    kPartitionIdFieldNumber = 5,
    kRowNumFieldNumber = 6,
  };
  // repeated .milvus.proto.data.FieldBinlog stats_log = 7;
  int stats_log_size() const;
  private:
  int _internal_stats_log_size() const;
  public:
  void clear_stats_log();
  ::milvus::proto::data::FieldBinlog* mutable_stats_log(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
      mutable_stats_log();
  private:
  const ::milvus::proto::data::FieldBinlog& _internal_stats_log(int index) const;
  ::milvus::proto::data::FieldBinlog* _internal_add_stats_log();
  public:
  const ::milvus::proto::data::FieldBinlog& stats_log(int index) const;
  ::milvus::proto::data::FieldBinlog* add_stats_log();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
      stats_log() const;

  // string channel_name = 3;
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_NODISCARD std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 segment_id = 2;
  void clear_segment_id();
  int64_t segment_id() const;
  void set_segment_id(int64_t value);
  private:
  int64_t _internal_segment_id() const;
  void _internal_set_segment_id(int64_t value);
  public:

  // int64 collection_id = 4;
  void clear_collection_id();
  int64_t collection_id() const;
  void set_collection_id(int64_t value);
  private:
  int64_t _internal_collection_id() const;
  void _internal_set_collection_id(int64_t value);
  public:

  // int64 partition_id = 5;
  void clear_partition_id();
  int64_t partition_id() const;
  void set_partition_id(int64_t value);
  private:
  int64_t _internal_partition_id() const;
  void _internal_set_partition_id(int64_t value);
  public:

  // int64 row_num = 6;
  void clear_row_num();
  int64_t row_num() const;
  void set_row_num(int64_t value);
  private:
  int64_t _internal_row_num() const;
  void _internal_set_row_num(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.AddImportSegmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog > stats_log_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t segment_id_;
    int64_t collection_id_;
    int64_t partition_id_;
    int64_t row_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class AddImportSegmentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.AddImportSegmentResponse) */ {
 public:
  inline AddImportSegmentResponse() : AddImportSegmentResponse(nullptr) {}
  ~AddImportSegmentResponse() override;
  explicit PROTOBUF_CONSTEXPR AddImportSegmentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddImportSegmentResponse(const AddImportSegmentResponse& from);
  AddImportSegmentResponse(AddImportSegmentResponse&& from) noexcept
    : AddImportSegmentResponse() {
    *this = ::std::move(from);
  }

  inline AddImportSegmentResponse& operator=(const AddImportSegmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddImportSegmentResponse& operator=(AddImportSegmentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddImportSegmentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddImportSegmentResponse* internal_default_instance() {
    return reinterpret_cast<const AddImportSegmentResponse*>(
               &_AddImportSegmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(AddImportSegmentResponse& a, AddImportSegmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddImportSegmentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddImportSegmentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddImportSegmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddImportSegmentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddImportSegmentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddImportSegmentResponse& from) {
    AddImportSegmentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddImportSegmentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.AddImportSegmentResponse";
  }
  protected:
  explicit AddImportSegmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelPosFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // bytes channel_pos = 2;
  void clear_channel_pos();
  const std::string& channel_pos() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_pos(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_pos();
  PROTOBUF_NODISCARD std::string* release_channel_pos();
  void set_allocated_channel_pos(std::string* channel_pos);
  private:
  const std::string& _internal_channel_pos() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_pos(const std::string& value);
  std::string* _internal_mutable_channel_pos();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.AddImportSegmentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_pos_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SaveImportSegmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SaveImportSegmentRequest) */ {
 public:
  inline SaveImportSegmentRequest() : SaveImportSegmentRequest(nullptr) {}
  ~SaveImportSegmentRequest() override;
  explicit PROTOBUF_CONSTEXPR SaveImportSegmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveImportSegmentRequest(const SaveImportSegmentRequest& from);
  SaveImportSegmentRequest(SaveImportSegmentRequest&& from) noexcept
    : SaveImportSegmentRequest() {
    *this = ::std::move(from);
  }

  inline SaveImportSegmentRequest& operator=(const SaveImportSegmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveImportSegmentRequest& operator=(SaveImportSegmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveImportSegmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveImportSegmentRequest* internal_default_instance() {
    return reinterpret_cast<const SaveImportSegmentRequest*>(
               &_SaveImportSegmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(SaveImportSegmentRequest& a, SaveImportSegmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveImportSegmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveImportSegmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveImportSegmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SaveImportSegmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaveImportSegmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SaveImportSegmentRequest& from) {
    SaveImportSegmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveImportSegmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SaveImportSegmentRequest";
  }
  protected:
  explicit SaveImportSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 3,
    kDmlPositionIdFieldNumber = 8,
    kBaseFieldNumber = 1,
    kSaveBinlogPathReqFieldNumber = 7,
    kSegmentIdFieldNumber = 2,
    kCollectionIdFieldNumber = 4,
    kPartitionIdFieldNumber = 5,
    kRowNumFieldNumber = 6,
  };
  // string channel_name = 3;
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_NODISCARD std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // bytes dml_position_id = 8;
  void clear_dml_position_id();
  const std::string& dml_position_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dml_position_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dml_position_id();
  PROTOBUF_NODISCARD std::string* release_dml_position_id();
  void set_allocated_dml_position_id(std::string* dml_position_id);
  private:
  const std::string& _internal_dml_position_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dml_position_id(const std::string& value);
  std::string* _internal_mutable_dml_position_id();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.data.SaveBinlogPathsRequest save_binlog_path_req = 7;
  bool has_save_binlog_path_req() const;
  private:
  bool _internal_has_save_binlog_path_req() const;
  public:
  void clear_save_binlog_path_req();
  const ::milvus::proto::data::SaveBinlogPathsRequest& save_binlog_path_req() const;
  PROTOBUF_NODISCARD ::milvus::proto::data::SaveBinlogPathsRequest* release_save_binlog_path_req();
  ::milvus::proto::data::SaveBinlogPathsRequest* mutable_save_binlog_path_req();
  void set_allocated_save_binlog_path_req(::milvus::proto::data::SaveBinlogPathsRequest* save_binlog_path_req);
  private:
  const ::milvus::proto::data::SaveBinlogPathsRequest& _internal_save_binlog_path_req() const;
  ::milvus::proto::data::SaveBinlogPathsRequest* _internal_mutable_save_binlog_path_req();
  public:
  void unsafe_arena_set_allocated_save_binlog_path_req(
      ::milvus::proto::data::SaveBinlogPathsRequest* save_binlog_path_req);
  ::milvus::proto::data::SaveBinlogPathsRequest* unsafe_arena_release_save_binlog_path_req();

  // int64 segment_id = 2;
  void clear_segment_id();
  int64_t segment_id() const;
  void set_segment_id(int64_t value);
  private:
  int64_t _internal_segment_id() const;
  void _internal_set_segment_id(int64_t value);
  public:

  // int64 collection_id = 4;
  void clear_collection_id();
  int64_t collection_id() const;
  void set_collection_id(int64_t value);
  private:
  int64_t _internal_collection_id() const;
  void _internal_set_collection_id(int64_t value);
  public:

  // int64 partition_id = 5;
  void clear_partition_id();
  int64_t partition_id() const;
  void set_partition_id(int64_t value);
  private:
  int64_t _internal_partition_id() const;
  void _internal_set_partition_id(int64_t value);
  public:

  // int64 row_num = 6;
  void clear_row_num();
  int64_t row_num() const;
  void set_row_num(int64_t value);
  private:
  int64_t _internal_row_num() const;
  void _internal_set_row_num(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SaveImportSegmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dml_position_id_;
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::data::SaveBinlogPathsRequest* save_binlog_path_req_;
    int64_t segment_id_;
    int64_t collection_id_;
    int64_t partition_id_;
    int64_t row_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class UnsetIsImportingStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.UnsetIsImportingStateRequest) */ {
 public:
  inline UnsetIsImportingStateRequest() : UnsetIsImportingStateRequest(nullptr) {}
  ~UnsetIsImportingStateRequest() override;
  explicit PROTOBUF_CONSTEXPR UnsetIsImportingStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnsetIsImportingStateRequest(const UnsetIsImportingStateRequest& from);
  UnsetIsImportingStateRequest(UnsetIsImportingStateRequest&& from) noexcept
    : UnsetIsImportingStateRequest() {
    *this = ::std::move(from);
  }

  inline UnsetIsImportingStateRequest& operator=(const UnsetIsImportingStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsetIsImportingStateRequest& operator=(UnsetIsImportingStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnsetIsImportingStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnsetIsImportingStateRequest* internal_default_instance() {
    return reinterpret_cast<const UnsetIsImportingStateRequest*>(
               &_UnsetIsImportingStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(UnsetIsImportingStateRequest& a, UnsetIsImportingStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsetIsImportingStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnsetIsImportingStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnsetIsImportingStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnsetIsImportingStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnsetIsImportingStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnsetIsImportingStateRequest& from) {
    UnsetIsImportingStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsetIsImportingStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.UnsetIsImportingStateRequest";
  }
  protected:
  explicit UnsetIsImportingStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIdsFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated int64 segment_ids = 2;
  int segment_ids_size() const;
  private:
  int _internal_segment_ids_size() const;
  public:
  void clear_segment_ids();
  private:
  int64_t _internal_segment_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segment_ids() const;
  void _internal_add_segment_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segment_ids();
  public:
  int64_t segment_ids(int index) const;
  void set_segment_ids(int index, int64_t value);
  void add_segment_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segment_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segment_ids();

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.UnsetIsImportingStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segment_ids_;
    mutable std::atomic<int> _segment_ids_cached_byte_size_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class MarkSegmentsDroppedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.MarkSegmentsDroppedRequest) */ {
 public:
  inline MarkSegmentsDroppedRequest() : MarkSegmentsDroppedRequest(nullptr) {}
  ~MarkSegmentsDroppedRequest() override;
  explicit PROTOBUF_CONSTEXPR MarkSegmentsDroppedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarkSegmentsDroppedRequest(const MarkSegmentsDroppedRequest& from);
  MarkSegmentsDroppedRequest(MarkSegmentsDroppedRequest&& from) noexcept
    : MarkSegmentsDroppedRequest() {
    *this = ::std::move(from);
  }

  inline MarkSegmentsDroppedRequest& operator=(const MarkSegmentsDroppedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkSegmentsDroppedRequest& operator=(MarkSegmentsDroppedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarkSegmentsDroppedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarkSegmentsDroppedRequest* internal_default_instance() {
    return reinterpret_cast<const MarkSegmentsDroppedRequest*>(
               &_MarkSegmentsDroppedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(MarkSegmentsDroppedRequest& a, MarkSegmentsDroppedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarkSegmentsDroppedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarkSegmentsDroppedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarkSegmentsDroppedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarkSegmentsDroppedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarkSegmentsDroppedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarkSegmentsDroppedRequest& from) {
    MarkSegmentsDroppedRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkSegmentsDroppedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.MarkSegmentsDroppedRequest";
  }
  protected:
  explicit MarkSegmentsDroppedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIdsFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated int64 segment_ids = 2;
  int segment_ids_size() const;
  private:
  int _internal_segment_ids_size() const;
  public:
  void clear_segment_ids();
  private:
  int64_t _internal_segment_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segment_ids() const;
  void _internal_add_segment_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segment_ids();
  public:
  int64_t segment_ids(int index) const;
  void set_segment_ids(int index, int64_t value);
  void add_segment_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segment_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segment_ids();

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.MarkSegmentsDroppedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segment_ids_;
    mutable std::atomic<int> _segment_ids_cached_byte_size_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SegmentReferenceLock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.SegmentReferenceLock) */ {
 public:
  inline SegmentReferenceLock() : SegmentReferenceLock(nullptr) {}
  ~SegmentReferenceLock() override;
  explicit PROTOBUF_CONSTEXPR SegmentReferenceLock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentReferenceLock(const SegmentReferenceLock& from);
  SegmentReferenceLock(SegmentReferenceLock&& from) noexcept
    : SegmentReferenceLock() {
    *this = ::std::move(from);
  }

  inline SegmentReferenceLock& operator=(const SegmentReferenceLock& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentReferenceLock& operator=(SegmentReferenceLock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentReferenceLock& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentReferenceLock* internal_default_instance() {
    return reinterpret_cast<const SegmentReferenceLock*>(
               &_SegmentReferenceLock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(SegmentReferenceLock& a, SegmentReferenceLock& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentReferenceLock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentReferenceLock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentReferenceLock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentReferenceLock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentReferenceLock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentReferenceLock& from) {
    SegmentReferenceLock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentReferenceLock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.SegmentReferenceLock";
  }
  protected:
  explicit SegmentReferenceLock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDsFieldNumber = 3,
    kTaskIDFieldNumber = 1,
    kNodeIDFieldNumber = 2,
  };
  // repeated int64 segmentIDs = 3;
  int segmentids_size() const;
  private:
  int _internal_segmentids_size() const;
  public:
  void clear_segmentids();
  private:
  int64_t _internal_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segmentids() const;
  void _internal_add_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segmentids();
  public:
  int64_t segmentids(int index) const;
  void set_segmentids(int index, int64_t value);
  void add_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segmentids();

  // int64 taskID = 1;
  void clear_taskid();
  int64_t taskid() const;
  void set_taskid(int64_t value);
  private:
  int64_t _internal_taskid() const;
  void _internal_set_taskid(int64_t value);
  public:

  // int64 nodeID = 2;
  void clear_nodeid();
  int64_t nodeid() const;
  void set_nodeid(int64_t value);
  private:
  int64_t _internal_nodeid() const;
  void _internal_set_nodeid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.SegmentReferenceLock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segmentids_;
    mutable std::atomic<int> _segmentids_cached_byte_size_;
    int64_t taskid_;
    int64_t nodeid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class AlterCollectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.AlterCollectionRequest) */ {
 public:
  inline AlterCollectionRequest() : AlterCollectionRequest(nullptr) {}
  ~AlterCollectionRequest() override;
  explicit PROTOBUF_CONSTEXPR AlterCollectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlterCollectionRequest(const AlterCollectionRequest& from);
  AlterCollectionRequest(AlterCollectionRequest&& from) noexcept
    : AlterCollectionRequest() {
    *this = ::std::move(from);
  }

  inline AlterCollectionRequest& operator=(const AlterCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlterCollectionRequest& operator=(AlterCollectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlterCollectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlterCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const AlterCollectionRequest*>(
               &_AlterCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(AlterCollectionRequest& a, AlterCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlterCollectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlterCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlterCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlterCollectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlterCollectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlterCollectionRequest& from) {
    AlterCollectionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlterCollectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.AlterCollectionRequest";
  }
  protected:
  explicit AlterCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionIDsFieldNumber = 3,
    kStartPositionsFieldNumber = 4,
    kPropertiesFieldNumber = 5,
    kSchemaFieldNumber = 2,
    kCollectionIDFieldNumber = 1,
  };
  // repeated int64 partitionIDs = 3;
  int partitionids_size() const;
  private:
  int _internal_partitionids_size() const;
  public:
  void clear_partitionids();
  private:
  int64_t _internal_partitionids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_partitionids() const;
  void _internal_add_partitionids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_partitionids();
  public:
  int64_t partitionids(int index) const;
  void set_partitionids(int index, int64_t value);
  void add_partitionids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      partitionids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_partitionids();

  // repeated .milvus.proto.common.KeyDataPair start_positions = 4;
  int start_positions_size() const;
  private:
  int _internal_start_positions_size() const;
  public:
  void clear_start_positions();
  ::milvus::proto::common::KeyDataPair* mutable_start_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >*
      mutable_start_positions();
  private:
  const ::milvus::proto::common::KeyDataPair& _internal_start_positions(int index) const;
  ::milvus::proto::common::KeyDataPair* _internal_add_start_positions();
  public:
  const ::milvus::proto::common::KeyDataPair& start_positions(int index) const;
  ::milvus::proto::common::KeyDataPair* add_start_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >&
      start_positions() const;

  // repeated .milvus.proto.common.KeyValuePair properties = 5;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::milvus::proto::common::KeyValuePair* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_properties();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_properties(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_properties();
  public:
  const ::milvus::proto::common::KeyValuePair& properties(int index) const;
  ::milvus::proto::common::KeyValuePair* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      properties() const;

  // .milvus.proto.schema.CollectionSchema schema = 2;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::milvus::proto::schema::CollectionSchema& schema() const;
  PROTOBUF_NODISCARD ::milvus::proto::schema::CollectionSchema* release_schema();
  ::milvus::proto::schema::CollectionSchema* mutable_schema();
  void set_allocated_schema(::milvus::proto::schema::CollectionSchema* schema);
  private:
  const ::milvus::proto::schema::CollectionSchema& _internal_schema() const;
  ::milvus::proto::schema::CollectionSchema* _internal_mutable_schema();
  public:
  void unsafe_arena_set_allocated_schema(
      ::milvus::proto::schema::CollectionSchema* schema);
  ::milvus::proto::schema::CollectionSchema* unsafe_arena_release_schema();

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.AlterCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > partitionids_;
    mutable std::atomic<int> _partitionids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair > start_positions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > properties_;
    ::milvus::proto::schema::CollectionSchema* schema_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GcConfirmRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GcConfirmRequest) */ {
 public:
  inline GcConfirmRequest() : GcConfirmRequest(nullptr) {}
  ~GcConfirmRequest() override;
  explicit PROTOBUF_CONSTEXPR GcConfirmRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GcConfirmRequest(const GcConfirmRequest& from);
  GcConfirmRequest(GcConfirmRequest&& from) noexcept
    : GcConfirmRequest() {
    *this = ::std::move(from);
  }

  inline GcConfirmRequest& operator=(const GcConfirmRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GcConfirmRequest& operator=(GcConfirmRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GcConfirmRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GcConfirmRequest* internal_default_instance() {
    return reinterpret_cast<const GcConfirmRequest*>(
               &_GcConfirmRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GcConfirmRequest& a, GcConfirmRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GcConfirmRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GcConfirmRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GcConfirmRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GcConfirmRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GcConfirmRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GcConfirmRequest& from) {
    GcConfirmRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcConfirmRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GcConfirmRequest";
  }
  protected:
  explicit GcConfirmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionIdFieldNumber = 1,
    kPartitionIdFieldNumber = 2,
  };
  // int64 collection_id = 1;
  void clear_collection_id();
  int64_t collection_id() const;
  void set_collection_id(int64_t value);
  private:
  int64_t _internal_collection_id() const;
  void _internal_set_collection_id(int64_t value);
  public:

  // int64 partition_id = 2;
  void clear_partition_id();
  int64_t partition_id() const;
  void set_partition_id(int64_t value);
  private:
  int64_t _internal_partition_id() const;
  void _internal_set_partition_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GcConfirmRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t collection_id_;
    int64_t partition_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GcConfirmResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.GcConfirmResponse) */ {
 public:
  inline GcConfirmResponse() : GcConfirmResponse(nullptr) {}
  ~GcConfirmResponse() override;
  explicit PROTOBUF_CONSTEXPR GcConfirmResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GcConfirmResponse(const GcConfirmResponse& from);
  GcConfirmResponse(GcConfirmResponse&& from) noexcept
    : GcConfirmResponse() {
    *this = ::std::move(from);
  }

  inline GcConfirmResponse& operator=(const GcConfirmResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GcConfirmResponse& operator=(GcConfirmResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GcConfirmResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GcConfirmResponse* internal_default_instance() {
    return reinterpret_cast<const GcConfirmResponse*>(
               &_GcConfirmResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(GcConfirmResponse& a, GcConfirmResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GcConfirmResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GcConfirmResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GcConfirmResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GcConfirmResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GcConfirmResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GcConfirmResponse& from) {
    GcConfirmResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcConfirmResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.GcConfirmResponse";
  }
  protected:
  explicit GcConfirmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kGcFinishedFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // bool gc_finished = 2;
  void clear_gc_finished();
  bool gc_finished() const;
  void set_gc_finished(bool value);
  private:
  bool _internal_gc_finished() const;
  void _internal_set_gc_finished(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.data.GcConfirmResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    bool gc_finished_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class ReportDataNodeTtMsgsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.data.ReportDataNodeTtMsgsRequest) */ {
 public:
  inline ReportDataNodeTtMsgsRequest() : ReportDataNodeTtMsgsRequest(nullptr) {}
  ~ReportDataNodeTtMsgsRequest() override;
  explicit PROTOBUF_CONSTEXPR ReportDataNodeTtMsgsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportDataNodeTtMsgsRequest(const ReportDataNodeTtMsgsRequest& from);
  ReportDataNodeTtMsgsRequest(ReportDataNodeTtMsgsRequest&& from) noexcept
    : ReportDataNodeTtMsgsRequest() {
    *this = ::std::move(from);
  }

  inline ReportDataNodeTtMsgsRequest& operator=(const ReportDataNodeTtMsgsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportDataNodeTtMsgsRequest& operator=(ReportDataNodeTtMsgsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportDataNodeTtMsgsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportDataNodeTtMsgsRequest* internal_default_instance() {
    return reinterpret_cast<const ReportDataNodeTtMsgsRequest*>(
               &_ReportDataNodeTtMsgsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(ReportDataNodeTtMsgsRequest& a, ReportDataNodeTtMsgsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportDataNodeTtMsgsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportDataNodeTtMsgsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportDataNodeTtMsgsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportDataNodeTtMsgsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportDataNodeTtMsgsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReportDataNodeTtMsgsRequest& from) {
    ReportDataNodeTtMsgsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportDataNodeTtMsgsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.data.ReportDataNodeTtMsgsRequest";
  }
  protected:
  explicit ReportDataNodeTtMsgsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated .milvus.proto.msg.DataNodeTtMsg msgs = 2;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;
  public:
  void clear_msgs();
  ::milvus::proto::msg::DataNodeTtMsg* mutable_msgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::msg::DataNodeTtMsg >*
      mutable_msgs();
  private:
  const ::milvus::proto::msg::DataNodeTtMsg& _internal_msgs(int index) const;
  ::milvus::proto::msg::DataNodeTtMsg* _internal_add_msgs();
  public:
  const ::milvus::proto::msg::DataNodeTtMsg& msgs(int index) const;
  ::milvus::proto::msg::DataNodeTtMsg* add_msgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::msg::DataNodeTtMsg >&
      msgs() const;

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.data.ReportDataNodeTtMsgsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::msg::DataNodeTtMsg > msgs_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fcoord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// FlushRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool FlushRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool FlushRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& FlushRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& FlushRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushRequest.base)
  return _internal_base();
}
inline void FlushRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.FlushRequest.base)
}
inline ::milvus::proto::common::MsgBase* FlushRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* FlushRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.FlushRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* FlushRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* FlushRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.FlushRequest.base)
  return _msg;
}
inline void FlushRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.FlushRequest.base)
}

// int64 dbID = 2;
inline void FlushRequest::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t FlushRequest::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t FlushRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushRequest.dbID)
  return _internal_dbid();
}
inline void FlushRequest::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void FlushRequest::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.FlushRequest.dbID)
}

// repeated int64 segmentIDs = 3;
inline int FlushRequest::_internal_segmentids_size() const {
  return _impl_.segmentids_.size();
}
inline int FlushRequest::segmentids_size() const {
  return _internal_segmentids_size();
}
inline void FlushRequest::clear_segmentids() {
  _impl_.segmentids_.Clear();
}
inline int64_t FlushRequest::_internal_segmentids(int index) const {
  return _impl_.segmentids_.Get(index);
}
inline int64_t FlushRequest::segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushRequest.segmentIDs)
  return _internal_segmentids(index);
}
inline void FlushRequest::set_segmentids(int index, int64_t value) {
  _impl_.segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.FlushRequest.segmentIDs)
}
inline void FlushRequest::_internal_add_segmentids(int64_t value) {
  _impl_.segmentids_.Add(value);
}
inline void FlushRequest::add_segmentids(int64_t value) {
  _internal_add_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.FlushRequest.segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FlushRequest::_internal_segmentids() const {
  return _impl_.segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FlushRequest::segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.FlushRequest.segmentIDs)
  return _internal_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FlushRequest::_internal_mutable_segmentids() {
  return &_impl_.segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FlushRequest::mutable_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.FlushRequest.segmentIDs)
  return _internal_mutable_segmentids();
}

// int64 collectionID = 4;
inline void FlushRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t FlushRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t FlushRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushRequest.collectionID)
  return _internal_collectionid();
}
inline void FlushRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void FlushRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.FlushRequest.collectionID)
}

// bool isImport = 5;
inline void FlushRequest::clear_isimport() {
  _impl_.isimport_ = false;
}
inline bool FlushRequest::_internal_isimport() const {
  return _impl_.isimport_;
}
inline bool FlushRequest::isimport() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushRequest.isImport)
  return _internal_isimport();
}
inline void FlushRequest::_internal_set_isimport(bool value) {
  
  _impl_.isimport_ = value;
}
inline void FlushRequest::set_isimport(bool value) {
  _internal_set_isimport(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.FlushRequest.isImport)
}

// -------------------------------------------------------------------

// FlushResponse

// .milvus.proto.common.Status status = 1;
inline bool FlushResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool FlushResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& FlushResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& FlushResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushResponse.status)
  return _internal_status();
}
inline void FlushResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.FlushResponse.status)
}
inline ::milvus::proto::common::Status* FlushResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* FlushResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.FlushResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* FlushResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* FlushResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.FlushResponse.status)
  return _msg;
}
inline void FlushResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.FlushResponse.status)
}

// int64 dbID = 2;
inline void FlushResponse::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t FlushResponse::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t FlushResponse::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushResponse.dbID)
  return _internal_dbid();
}
inline void FlushResponse::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void FlushResponse::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.FlushResponse.dbID)
}

// int64 collectionID = 3;
inline void FlushResponse::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t FlushResponse::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t FlushResponse::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushResponse.collectionID)
  return _internal_collectionid();
}
inline void FlushResponse::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void FlushResponse::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.FlushResponse.collectionID)
}

// repeated int64 segmentIDs = 4;
inline int FlushResponse::_internal_segmentids_size() const {
  return _impl_.segmentids_.size();
}
inline int FlushResponse::segmentids_size() const {
  return _internal_segmentids_size();
}
inline void FlushResponse::clear_segmentids() {
  _impl_.segmentids_.Clear();
}
inline int64_t FlushResponse::_internal_segmentids(int index) const {
  return _impl_.segmentids_.Get(index);
}
inline int64_t FlushResponse::segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushResponse.segmentIDs)
  return _internal_segmentids(index);
}
inline void FlushResponse::set_segmentids(int index, int64_t value) {
  _impl_.segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.FlushResponse.segmentIDs)
}
inline void FlushResponse::_internal_add_segmentids(int64_t value) {
  _impl_.segmentids_.Add(value);
}
inline void FlushResponse::add_segmentids(int64_t value) {
  _internal_add_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.FlushResponse.segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FlushResponse::_internal_segmentids() const {
  return _impl_.segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FlushResponse::segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.FlushResponse.segmentIDs)
  return _internal_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FlushResponse::_internal_mutable_segmentids() {
  return &_impl_.segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FlushResponse::mutable_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.FlushResponse.segmentIDs)
  return _internal_mutable_segmentids();
}

// repeated int64 flushSegmentIDs = 5;
inline int FlushResponse::_internal_flushsegmentids_size() const {
  return _impl_.flushsegmentids_.size();
}
inline int FlushResponse::flushsegmentids_size() const {
  return _internal_flushsegmentids_size();
}
inline void FlushResponse::clear_flushsegmentids() {
  _impl_.flushsegmentids_.Clear();
}
inline int64_t FlushResponse::_internal_flushsegmentids(int index) const {
  return _impl_.flushsegmentids_.Get(index);
}
inline int64_t FlushResponse::flushsegmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushResponse.flushSegmentIDs)
  return _internal_flushsegmentids(index);
}
inline void FlushResponse::set_flushsegmentids(int index, int64_t value) {
  _impl_.flushsegmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.FlushResponse.flushSegmentIDs)
}
inline void FlushResponse::_internal_add_flushsegmentids(int64_t value) {
  _impl_.flushsegmentids_.Add(value);
}
inline void FlushResponse::add_flushsegmentids(int64_t value) {
  _internal_add_flushsegmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.FlushResponse.flushSegmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FlushResponse::_internal_flushsegmentids() const {
  return _impl_.flushsegmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FlushResponse::flushsegmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.FlushResponse.flushSegmentIDs)
  return _internal_flushsegmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FlushResponse::_internal_mutable_flushsegmentids() {
  return &_impl_.flushsegmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FlushResponse::mutable_flushsegmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.FlushResponse.flushSegmentIDs)
  return _internal_mutable_flushsegmentids();
}

// int64 timeOfSeal = 6;
inline void FlushResponse::clear_timeofseal() {
  _impl_.timeofseal_ = int64_t{0};
}
inline int64_t FlushResponse::_internal_timeofseal() const {
  return _impl_.timeofseal_;
}
inline int64_t FlushResponse::timeofseal() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushResponse.timeOfSeal)
  return _internal_timeofseal();
}
inline void FlushResponse::_internal_set_timeofseal(int64_t value) {
  
  _impl_.timeofseal_ = value;
}
inline void FlushResponse::set_timeofseal(int64_t value) {
  _internal_set_timeofseal(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.FlushResponse.timeOfSeal)
}

// -------------------------------------------------------------------

// SegmentIDRequest

// uint32 count = 1;
inline void SegmentIDRequest::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t SegmentIDRequest::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t SegmentIDRequest::count() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentIDRequest.count)
  return _internal_count();
}
inline void SegmentIDRequest::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void SegmentIDRequest::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentIDRequest.count)
}

// string channel_name = 2;
inline void SegmentIDRequest::clear_channel_name() {
  _impl_.channel_name_.ClearToEmpty();
}
inline const std::string& SegmentIDRequest::channel_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentIDRequest.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegmentIDRequest::set_channel_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentIDRequest.channel_name)
}
inline std::string* SegmentIDRequest::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentIDRequest.channel_name)
  return _s;
}
inline const std::string& SegmentIDRequest::_internal_channel_name() const {
  return _impl_.channel_name_.Get();
}
inline void SegmentIDRequest::_internal_set_channel_name(const std::string& value) {
  
  _impl_.channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SegmentIDRequest::_internal_mutable_channel_name() {
  
  return _impl_.channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SegmentIDRequest::release_channel_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentIDRequest.channel_name)
  return _impl_.channel_name_.Release();
}
inline void SegmentIDRequest::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  _impl_.channel_name_.SetAllocated(channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentIDRequest.channel_name)
}

// int64 collectionID = 3;
inline void SegmentIDRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t SegmentIDRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t SegmentIDRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentIDRequest.collectionID)
  return _internal_collectionid();
}
inline void SegmentIDRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void SegmentIDRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentIDRequest.collectionID)
}

// int64 partitionID = 4;
inline void SegmentIDRequest::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t SegmentIDRequest::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t SegmentIDRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentIDRequest.partitionID)
  return _internal_partitionid();
}
inline void SegmentIDRequest::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void SegmentIDRequest::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentIDRequest.partitionID)
}

// bool isImport = 5;
inline void SegmentIDRequest::clear_isimport() {
  _impl_.isimport_ = false;
}
inline bool SegmentIDRequest::_internal_isimport() const {
  return _impl_.isimport_;
}
inline bool SegmentIDRequest::isimport() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentIDRequest.isImport)
  return _internal_isimport();
}
inline void SegmentIDRequest::_internal_set_isimport(bool value) {
  
  _impl_.isimport_ = value;
}
inline void SegmentIDRequest::set_isimport(bool value) {
  _internal_set_isimport(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentIDRequest.isImport)
}

// int64 importTaskID = 6;
inline void SegmentIDRequest::clear_importtaskid() {
  _impl_.importtaskid_ = int64_t{0};
}
inline int64_t SegmentIDRequest::_internal_importtaskid() const {
  return _impl_.importtaskid_;
}
inline int64_t SegmentIDRequest::importtaskid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentIDRequest.importTaskID)
  return _internal_importtaskid();
}
inline void SegmentIDRequest::_internal_set_importtaskid(int64_t value) {
  
  _impl_.importtaskid_ = value;
}
inline void SegmentIDRequest::set_importtaskid(int64_t value) {
  _internal_set_importtaskid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentIDRequest.importTaskID)
}

// -------------------------------------------------------------------

// AssignSegmentIDRequest

// int64 nodeID = 1;
inline void AssignSegmentIDRequest::clear_nodeid() {
  _impl_.nodeid_ = int64_t{0};
}
inline int64_t AssignSegmentIDRequest::_internal_nodeid() const {
  return _impl_.nodeid_;
}
inline int64_t AssignSegmentIDRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AssignSegmentIDRequest.nodeID)
  return _internal_nodeid();
}
inline void AssignSegmentIDRequest::_internal_set_nodeid(int64_t value) {
  
  _impl_.nodeid_ = value;
}
inline void AssignSegmentIDRequest::set_nodeid(int64_t value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.AssignSegmentIDRequest.nodeID)
}

// string peer_role = 2;
inline void AssignSegmentIDRequest::clear_peer_role() {
  _impl_.peer_role_.ClearToEmpty();
}
inline const std::string& AssignSegmentIDRequest::peer_role() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AssignSegmentIDRequest.peer_role)
  return _internal_peer_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssignSegmentIDRequest::set_peer_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.peer_role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.AssignSegmentIDRequest.peer_role)
}
inline std::string* AssignSegmentIDRequest::mutable_peer_role() {
  std::string* _s = _internal_mutable_peer_role();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.AssignSegmentIDRequest.peer_role)
  return _s;
}
inline const std::string& AssignSegmentIDRequest::_internal_peer_role() const {
  return _impl_.peer_role_.Get();
}
inline void AssignSegmentIDRequest::_internal_set_peer_role(const std::string& value) {
  
  _impl_.peer_role_.Set(value, GetArenaForAllocation());
}
inline std::string* AssignSegmentIDRequest::_internal_mutable_peer_role() {
  
  return _impl_.peer_role_.Mutable(GetArenaForAllocation());
}
inline std::string* AssignSegmentIDRequest::release_peer_role() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.AssignSegmentIDRequest.peer_role)
  return _impl_.peer_role_.Release();
}
inline void AssignSegmentIDRequest::set_allocated_peer_role(std::string* peer_role) {
  if (peer_role != nullptr) {
    
  } else {
    
  }
  _impl_.peer_role_.SetAllocated(peer_role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.peer_role_.IsDefault()) {
    _impl_.peer_role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.AssignSegmentIDRequest.peer_role)
}

// repeated .milvus.proto.data.SegmentIDRequest segmentIDRequests = 3;
inline int AssignSegmentIDRequest::_internal_segmentidrequests_size() const {
  return _impl_.segmentidrequests_.size();
}
inline int AssignSegmentIDRequest::segmentidrequests_size() const {
  return _internal_segmentidrequests_size();
}
inline void AssignSegmentIDRequest::clear_segmentidrequests() {
  _impl_.segmentidrequests_.Clear();
}
inline ::milvus::proto::data::SegmentIDRequest* AssignSegmentIDRequest::mutable_segmentidrequests(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.AssignSegmentIDRequest.segmentIDRequests)
  return _impl_.segmentidrequests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentIDRequest >*
AssignSegmentIDRequest::mutable_segmentidrequests() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.AssignSegmentIDRequest.segmentIDRequests)
  return &_impl_.segmentidrequests_;
}
inline const ::milvus::proto::data::SegmentIDRequest& AssignSegmentIDRequest::_internal_segmentidrequests(int index) const {
  return _impl_.segmentidrequests_.Get(index);
}
inline const ::milvus::proto::data::SegmentIDRequest& AssignSegmentIDRequest::segmentidrequests(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AssignSegmentIDRequest.segmentIDRequests)
  return _internal_segmentidrequests(index);
}
inline ::milvus::proto::data::SegmentIDRequest* AssignSegmentIDRequest::_internal_add_segmentidrequests() {
  return _impl_.segmentidrequests_.Add();
}
inline ::milvus::proto::data::SegmentIDRequest* AssignSegmentIDRequest::add_segmentidrequests() {
  ::milvus::proto::data::SegmentIDRequest* _add = _internal_add_segmentidrequests();
  // @@protoc_insertion_point(field_add:milvus.proto.data.AssignSegmentIDRequest.segmentIDRequests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentIDRequest >&
AssignSegmentIDRequest::segmentidrequests() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.AssignSegmentIDRequest.segmentIDRequests)
  return _impl_.segmentidrequests_;
}

// -------------------------------------------------------------------

// SegmentIDAssignment

// int64 segID = 1;
inline void SegmentIDAssignment::clear_segid() {
  _impl_.segid_ = int64_t{0};
}
inline int64_t SegmentIDAssignment::_internal_segid() const {
  return _impl_.segid_;
}
inline int64_t SegmentIDAssignment::segid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentIDAssignment.segID)
  return _internal_segid();
}
inline void SegmentIDAssignment::_internal_set_segid(int64_t value) {
  
  _impl_.segid_ = value;
}
inline void SegmentIDAssignment::set_segid(int64_t value) {
  _internal_set_segid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentIDAssignment.segID)
}

// string channel_name = 2;
inline void SegmentIDAssignment::clear_channel_name() {
  _impl_.channel_name_.ClearToEmpty();
}
inline const std::string& SegmentIDAssignment::channel_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentIDAssignment.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegmentIDAssignment::set_channel_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentIDAssignment.channel_name)
}
inline std::string* SegmentIDAssignment::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentIDAssignment.channel_name)
  return _s;
}
inline const std::string& SegmentIDAssignment::_internal_channel_name() const {
  return _impl_.channel_name_.Get();
}
inline void SegmentIDAssignment::_internal_set_channel_name(const std::string& value) {
  
  _impl_.channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SegmentIDAssignment::_internal_mutable_channel_name() {
  
  return _impl_.channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SegmentIDAssignment::release_channel_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentIDAssignment.channel_name)
  return _impl_.channel_name_.Release();
}
inline void SegmentIDAssignment::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  _impl_.channel_name_.SetAllocated(channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentIDAssignment.channel_name)
}

// uint32 count = 3;
inline void SegmentIDAssignment::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t SegmentIDAssignment::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t SegmentIDAssignment::count() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentIDAssignment.count)
  return _internal_count();
}
inline void SegmentIDAssignment::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void SegmentIDAssignment::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentIDAssignment.count)
}

// int64 collectionID = 4;
inline void SegmentIDAssignment::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t SegmentIDAssignment::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t SegmentIDAssignment::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentIDAssignment.collectionID)
  return _internal_collectionid();
}
inline void SegmentIDAssignment::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void SegmentIDAssignment::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentIDAssignment.collectionID)
}

// int64 partitionID = 5;
inline void SegmentIDAssignment::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t SegmentIDAssignment::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t SegmentIDAssignment::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentIDAssignment.partitionID)
  return _internal_partitionid();
}
inline void SegmentIDAssignment::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void SegmentIDAssignment::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentIDAssignment.partitionID)
}

// uint64 expire_time = 6;
inline void SegmentIDAssignment::clear_expire_time() {
  _impl_.expire_time_ = uint64_t{0u};
}
inline uint64_t SegmentIDAssignment::_internal_expire_time() const {
  return _impl_.expire_time_;
}
inline uint64_t SegmentIDAssignment::expire_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentIDAssignment.expire_time)
  return _internal_expire_time();
}
inline void SegmentIDAssignment::_internal_set_expire_time(uint64_t value) {
  
  _impl_.expire_time_ = value;
}
inline void SegmentIDAssignment::set_expire_time(uint64_t value) {
  _internal_set_expire_time(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentIDAssignment.expire_time)
}

// .milvus.proto.common.Status status = 7;
inline bool SegmentIDAssignment::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool SegmentIDAssignment::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& SegmentIDAssignment::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& SegmentIDAssignment::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentIDAssignment.status)
  return _internal_status();
}
inline void SegmentIDAssignment::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SegmentIDAssignment.status)
}
inline ::milvus::proto::common::Status* SegmentIDAssignment::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* SegmentIDAssignment::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentIDAssignment.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* SegmentIDAssignment::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* SegmentIDAssignment::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentIDAssignment.status)
  return _msg;
}
inline void SegmentIDAssignment::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentIDAssignment.status)
}

// -------------------------------------------------------------------

// AssignSegmentIDResponse

// repeated .milvus.proto.data.SegmentIDAssignment segIDAssignments = 1;
inline int AssignSegmentIDResponse::_internal_segidassignments_size() const {
  return _impl_.segidassignments_.size();
}
inline int AssignSegmentIDResponse::segidassignments_size() const {
  return _internal_segidassignments_size();
}
inline void AssignSegmentIDResponse::clear_segidassignments() {
  _impl_.segidassignments_.Clear();
}
inline ::milvus::proto::data::SegmentIDAssignment* AssignSegmentIDResponse::mutable_segidassignments(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.AssignSegmentIDResponse.segIDAssignments)
  return _impl_.segidassignments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentIDAssignment >*
AssignSegmentIDResponse::mutable_segidassignments() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.AssignSegmentIDResponse.segIDAssignments)
  return &_impl_.segidassignments_;
}
inline const ::milvus::proto::data::SegmentIDAssignment& AssignSegmentIDResponse::_internal_segidassignments(int index) const {
  return _impl_.segidassignments_.Get(index);
}
inline const ::milvus::proto::data::SegmentIDAssignment& AssignSegmentIDResponse::segidassignments(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AssignSegmentIDResponse.segIDAssignments)
  return _internal_segidassignments(index);
}
inline ::milvus::proto::data::SegmentIDAssignment* AssignSegmentIDResponse::_internal_add_segidassignments() {
  return _impl_.segidassignments_.Add();
}
inline ::milvus::proto::data::SegmentIDAssignment* AssignSegmentIDResponse::add_segidassignments() {
  ::milvus::proto::data::SegmentIDAssignment* _add = _internal_add_segidassignments();
  // @@protoc_insertion_point(field_add:milvus.proto.data.AssignSegmentIDResponse.segIDAssignments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentIDAssignment >&
AssignSegmentIDResponse::segidassignments() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.AssignSegmentIDResponse.segIDAssignments)
  return _impl_.segidassignments_;
}

// .milvus.proto.common.Status status = 2;
inline bool AssignSegmentIDResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool AssignSegmentIDResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& AssignSegmentIDResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& AssignSegmentIDResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AssignSegmentIDResponse.status)
  return _internal_status();
}
inline void AssignSegmentIDResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.AssignSegmentIDResponse.status)
}
inline ::milvus::proto::common::Status* AssignSegmentIDResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* AssignSegmentIDResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.AssignSegmentIDResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* AssignSegmentIDResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* AssignSegmentIDResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.AssignSegmentIDResponse.status)
  return _msg;
}
inline void AssignSegmentIDResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.AssignSegmentIDResponse.status)
}

// -------------------------------------------------------------------

// GetSegmentStatesRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetSegmentStatesRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetSegmentStatesRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetSegmentStatesRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetSegmentStatesRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentStatesRequest.base)
  return _internal_base();
}
inline void GetSegmentStatesRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetSegmentStatesRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetSegmentStatesRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetSegmentStatesRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetSegmentStatesRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetSegmentStatesRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetSegmentStatesRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetSegmentStatesRequest.base)
  return _msg;
}
inline void GetSegmentStatesRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetSegmentStatesRequest.base)
}

// repeated int64 segmentIDs = 2;
inline int GetSegmentStatesRequest::_internal_segmentids_size() const {
  return _impl_.segmentids_.size();
}
inline int GetSegmentStatesRequest::segmentids_size() const {
  return _internal_segmentids_size();
}
inline void GetSegmentStatesRequest::clear_segmentids() {
  _impl_.segmentids_.Clear();
}
inline int64_t GetSegmentStatesRequest::_internal_segmentids(int index) const {
  return _impl_.segmentids_.Get(index);
}
inline int64_t GetSegmentStatesRequest::segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentStatesRequest.segmentIDs)
  return _internal_segmentids(index);
}
inline void GetSegmentStatesRequest::set_segmentids(int index, int64_t value) {
  _impl_.segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetSegmentStatesRequest.segmentIDs)
}
inline void GetSegmentStatesRequest::_internal_add_segmentids(int64_t value) {
  _impl_.segmentids_.Add(value);
}
inline void GetSegmentStatesRequest::add_segmentids(int64_t value) {
  _internal_add_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetSegmentStatesRequest.segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetSegmentStatesRequest::_internal_segmentids() const {
  return _impl_.segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetSegmentStatesRequest::segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetSegmentStatesRequest.segmentIDs)
  return _internal_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetSegmentStatesRequest::_internal_mutable_segmentids() {
  return &_impl_.segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetSegmentStatesRequest::mutable_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetSegmentStatesRequest.segmentIDs)
  return _internal_mutable_segmentids();
}

// -------------------------------------------------------------------

// SegmentStateInfo

// int64 segmentID = 1;
inline void SegmentStateInfo::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t SegmentStateInfo::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t SegmentStateInfo::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentStateInfo.segmentID)
  return _internal_segmentid();
}
inline void SegmentStateInfo::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void SegmentStateInfo::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentStateInfo.segmentID)
}

// .milvus.proto.common.SegmentState state = 2;
inline void SegmentStateInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::SegmentState SegmentStateInfo::_internal_state() const {
  return static_cast< ::milvus::proto::common::SegmentState >(_impl_.state_);
}
inline ::milvus::proto::common::SegmentState SegmentStateInfo::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentStateInfo.state)
  return _internal_state();
}
inline void SegmentStateInfo::_internal_set_state(::milvus::proto::common::SegmentState value) {
  
  _impl_.state_ = value;
}
inline void SegmentStateInfo::set_state(::milvus::proto::common::SegmentState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentStateInfo.state)
}

// .milvus.proto.msg.MsgPosition start_position = 3;
inline bool SegmentStateInfo::_internal_has_start_position() const {
  return this != internal_default_instance() && _impl_.start_position_ != nullptr;
}
inline bool SegmentStateInfo::has_start_position() const {
  return _internal_has_start_position();
}
inline const ::milvus::proto::msg::MsgPosition& SegmentStateInfo::_internal_start_position() const {
  const ::milvus::proto::msg::MsgPosition* p = _impl_.start_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::msg::MsgPosition&>(
      ::milvus::proto::msg::_MsgPosition_default_instance_);
}
inline const ::milvus::proto::msg::MsgPosition& SegmentStateInfo::start_position() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentStateInfo.start_position)
  return _internal_start_position();
}
inline void SegmentStateInfo::unsafe_arena_set_allocated_start_position(
    ::milvus::proto::msg::MsgPosition* start_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_position_);
  }
  _impl_.start_position_ = start_position;
  if (start_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SegmentStateInfo.start_position)
}
inline ::milvus::proto::msg::MsgPosition* SegmentStateInfo::release_start_position() {
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.start_position_;
  _impl_.start_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* SegmentStateInfo::unsafe_arena_release_start_position() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentStateInfo.start_position)
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.start_position_;
  _impl_.start_position_ = nullptr;
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* SegmentStateInfo::_internal_mutable_start_position() {
  
  if (_impl_.start_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::msg::MsgPosition>(GetArenaForAllocation());
    _impl_.start_position_ = p;
  }
  return _impl_.start_position_;
}
inline ::milvus::proto::msg::MsgPosition* SegmentStateInfo::mutable_start_position() {
  ::milvus::proto::msg::MsgPosition* _msg = _internal_mutable_start_position();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentStateInfo.start_position)
  return _msg;
}
inline void SegmentStateInfo::set_allocated_start_position(::milvus::proto::msg::MsgPosition* start_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_position_);
  }
  if (start_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_position));
    if (message_arena != submessage_arena) {
      start_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_position_ = start_position;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentStateInfo.start_position)
}

// .milvus.proto.msg.MsgPosition end_position = 4;
inline bool SegmentStateInfo::_internal_has_end_position() const {
  return this != internal_default_instance() && _impl_.end_position_ != nullptr;
}
inline bool SegmentStateInfo::has_end_position() const {
  return _internal_has_end_position();
}
inline const ::milvus::proto::msg::MsgPosition& SegmentStateInfo::_internal_end_position() const {
  const ::milvus::proto::msg::MsgPosition* p = _impl_.end_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::msg::MsgPosition&>(
      ::milvus::proto::msg::_MsgPosition_default_instance_);
}
inline const ::milvus::proto::msg::MsgPosition& SegmentStateInfo::end_position() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentStateInfo.end_position)
  return _internal_end_position();
}
inline void SegmentStateInfo::unsafe_arena_set_allocated_end_position(
    ::milvus::proto::msg::MsgPosition* end_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_position_);
  }
  _impl_.end_position_ = end_position;
  if (end_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SegmentStateInfo.end_position)
}
inline ::milvus::proto::msg::MsgPosition* SegmentStateInfo::release_end_position() {
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.end_position_;
  _impl_.end_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* SegmentStateInfo::unsafe_arena_release_end_position() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentStateInfo.end_position)
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.end_position_;
  _impl_.end_position_ = nullptr;
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* SegmentStateInfo::_internal_mutable_end_position() {
  
  if (_impl_.end_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::msg::MsgPosition>(GetArenaForAllocation());
    _impl_.end_position_ = p;
  }
  return _impl_.end_position_;
}
inline ::milvus::proto::msg::MsgPosition* SegmentStateInfo::mutable_end_position() {
  ::milvus::proto::msg::MsgPosition* _msg = _internal_mutable_end_position();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentStateInfo.end_position)
  return _msg;
}
inline void SegmentStateInfo::set_allocated_end_position(::milvus::proto::msg::MsgPosition* end_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_position_);
  }
  if (end_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_position));
    if (message_arena != submessage_arena) {
      end_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_position_ = end_position;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentStateInfo.end_position)
}

// .milvus.proto.common.Status status = 5;
inline bool SegmentStateInfo::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool SegmentStateInfo::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& SegmentStateInfo::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& SegmentStateInfo::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentStateInfo.status)
  return _internal_status();
}
inline void SegmentStateInfo::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SegmentStateInfo.status)
}
inline ::milvus::proto::common::Status* SegmentStateInfo::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* SegmentStateInfo::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentStateInfo.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* SegmentStateInfo::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* SegmentStateInfo::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentStateInfo.status)
  return _msg;
}
inline void SegmentStateInfo::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentStateInfo.status)
}

// -------------------------------------------------------------------

// GetSegmentStatesResponse

// .milvus.proto.common.Status status = 1;
inline bool GetSegmentStatesResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetSegmentStatesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetSegmentStatesResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetSegmentStatesResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentStatesResponse.status)
  return _internal_status();
}
inline void GetSegmentStatesResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetSegmentStatesResponse.status)
}
inline ::milvus::proto::common::Status* GetSegmentStatesResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetSegmentStatesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetSegmentStatesResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetSegmentStatesResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetSegmentStatesResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetSegmentStatesResponse.status)
  return _msg;
}
inline void GetSegmentStatesResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetSegmentStatesResponse.status)
}

// repeated .milvus.proto.data.SegmentStateInfo states = 2;
inline int GetSegmentStatesResponse::_internal_states_size() const {
  return _impl_.states_.size();
}
inline int GetSegmentStatesResponse::states_size() const {
  return _internal_states_size();
}
inline void GetSegmentStatesResponse::clear_states() {
  _impl_.states_.Clear();
}
inline ::milvus::proto::data::SegmentStateInfo* GetSegmentStatesResponse::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetSegmentStatesResponse.states)
  return _impl_.states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentStateInfo >*
GetSegmentStatesResponse::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetSegmentStatesResponse.states)
  return &_impl_.states_;
}
inline const ::milvus::proto::data::SegmentStateInfo& GetSegmentStatesResponse::_internal_states(int index) const {
  return _impl_.states_.Get(index);
}
inline const ::milvus::proto::data::SegmentStateInfo& GetSegmentStatesResponse::states(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentStatesResponse.states)
  return _internal_states(index);
}
inline ::milvus::proto::data::SegmentStateInfo* GetSegmentStatesResponse::_internal_add_states() {
  return _impl_.states_.Add();
}
inline ::milvus::proto::data::SegmentStateInfo* GetSegmentStatesResponse::add_states() {
  ::milvus::proto::data::SegmentStateInfo* _add = _internal_add_states();
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetSegmentStatesResponse.states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentStateInfo >&
GetSegmentStatesResponse::states() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetSegmentStatesResponse.states)
  return _impl_.states_;
}

// -------------------------------------------------------------------

// GetSegmentInfoRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetSegmentInfoRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetSegmentInfoRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetSegmentInfoRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetSegmentInfoRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentInfoRequest.base)
  return _internal_base();
}
inline void GetSegmentInfoRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetSegmentInfoRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetSegmentInfoRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetSegmentInfoRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetSegmentInfoRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetSegmentInfoRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetSegmentInfoRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetSegmentInfoRequest.base)
  return _msg;
}
inline void GetSegmentInfoRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetSegmentInfoRequest.base)
}

// repeated int64 segmentIDs = 2;
inline int GetSegmentInfoRequest::_internal_segmentids_size() const {
  return _impl_.segmentids_.size();
}
inline int GetSegmentInfoRequest::segmentids_size() const {
  return _internal_segmentids_size();
}
inline void GetSegmentInfoRequest::clear_segmentids() {
  _impl_.segmentids_.Clear();
}
inline int64_t GetSegmentInfoRequest::_internal_segmentids(int index) const {
  return _impl_.segmentids_.Get(index);
}
inline int64_t GetSegmentInfoRequest::segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentInfoRequest.segmentIDs)
  return _internal_segmentids(index);
}
inline void GetSegmentInfoRequest::set_segmentids(int index, int64_t value) {
  _impl_.segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetSegmentInfoRequest.segmentIDs)
}
inline void GetSegmentInfoRequest::_internal_add_segmentids(int64_t value) {
  _impl_.segmentids_.Add(value);
}
inline void GetSegmentInfoRequest::add_segmentids(int64_t value) {
  _internal_add_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetSegmentInfoRequest.segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetSegmentInfoRequest::_internal_segmentids() const {
  return _impl_.segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetSegmentInfoRequest::segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetSegmentInfoRequest.segmentIDs)
  return _internal_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetSegmentInfoRequest::_internal_mutable_segmentids() {
  return &_impl_.segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetSegmentInfoRequest::mutable_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetSegmentInfoRequest.segmentIDs)
  return _internal_mutable_segmentids();
}

// bool includeUnHealthy = 3;
inline void GetSegmentInfoRequest::clear_includeunhealthy() {
  _impl_.includeunhealthy_ = false;
}
inline bool GetSegmentInfoRequest::_internal_includeunhealthy() const {
  return _impl_.includeunhealthy_;
}
inline bool GetSegmentInfoRequest::includeunhealthy() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentInfoRequest.includeUnHealthy)
  return _internal_includeunhealthy();
}
inline void GetSegmentInfoRequest::_internal_set_includeunhealthy(bool value) {
  
  _impl_.includeunhealthy_ = value;
}
inline void GetSegmentInfoRequest::set_includeunhealthy(bool value) {
  _internal_set_includeunhealthy(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetSegmentInfoRequest.includeUnHealthy)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetSegmentInfoResponse

// .milvus.proto.common.Status status = 1;
inline bool GetSegmentInfoResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetSegmentInfoResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetSegmentInfoResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetSegmentInfoResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentInfoResponse.status)
  return _internal_status();
}
inline void GetSegmentInfoResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetSegmentInfoResponse.status)
}
inline ::milvus::proto::common::Status* GetSegmentInfoResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetSegmentInfoResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetSegmentInfoResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetSegmentInfoResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetSegmentInfoResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetSegmentInfoResponse.status)
  return _msg;
}
inline void GetSegmentInfoResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetSegmentInfoResponse.status)
}

// repeated .milvus.proto.data.SegmentInfo infos = 2;
inline int GetSegmentInfoResponse::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int GetSegmentInfoResponse::infos_size() const {
  return _internal_infos_size();
}
inline void GetSegmentInfoResponse::clear_infos() {
  _impl_.infos_.Clear();
}
inline ::milvus::proto::data::SegmentInfo* GetSegmentInfoResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetSegmentInfoResponse.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >*
GetSegmentInfoResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetSegmentInfoResponse.infos)
  return &_impl_.infos_;
}
inline const ::milvus::proto::data::SegmentInfo& GetSegmentInfoResponse::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::milvus::proto::data::SegmentInfo& GetSegmentInfoResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentInfoResponse.infos)
  return _internal_infos(index);
}
inline ::milvus::proto::data::SegmentInfo* GetSegmentInfoResponse::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::milvus::proto::data::SegmentInfo* GetSegmentInfoResponse::add_infos() {
  ::milvus::proto::data::SegmentInfo* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetSegmentInfoResponse.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >&
GetSegmentInfoResponse::infos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetSegmentInfoResponse.infos)
  return _impl_.infos_;
}

// map<string, .milvus.proto.msg.MsgPosition> channel_checkpoint = 3;
inline int GetSegmentInfoResponse::_internal_channel_checkpoint_size() const {
  return _impl_.channel_checkpoint_.size();
}
inline int GetSegmentInfoResponse::channel_checkpoint_size() const {
  return _internal_channel_checkpoint_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::msg::MsgPosition >&
GetSegmentInfoResponse::_internal_channel_checkpoint() const {
  return _impl_.channel_checkpoint_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::msg::MsgPosition >&
GetSegmentInfoResponse::channel_checkpoint() const {
  // @@protoc_insertion_point(field_map:milvus.proto.data.GetSegmentInfoResponse.channel_checkpoint)
  return _internal_channel_checkpoint();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::msg::MsgPosition >*
GetSegmentInfoResponse::_internal_mutable_channel_checkpoint() {
  return _impl_.channel_checkpoint_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::msg::MsgPosition >*
GetSegmentInfoResponse::mutable_channel_checkpoint() {
  // @@protoc_insertion_point(field_mutable_map:milvus.proto.data.GetSegmentInfoResponse.channel_checkpoint)
  return _internal_mutable_channel_checkpoint();
}

// -------------------------------------------------------------------

// GetInsertBinlogPathsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetInsertBinlogPathsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetInsertBinlogPathsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetInsertBinlogPathsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetInsertBinlogPathsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetInsertBinlogPathsRequest.base)
  return _internal_base();
}
inline void GetInsertBinlogPathsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetInsertBinlogPathsRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetInsertBinlogPathsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetInsertBinlogPathsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetInsertBinlogPathsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetInsertBinlogPathsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetInsertBinlogPathsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetInsertBinlogPathsRequest.base)
  return _msg;
}
inline void GetInsertBinlogPathsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetInsertBinlogPathsRequest.base)
}

// int64 segmentID = 2;
inline void GetInsertBinlogPathsRequest::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t GetInsertBinlogPathsRequest::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t GetInsertBinlogPathsRequest::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetInsertBinlogPathsRequest.segmentID)
  return _internal_segmentid();
}
inline void GetInsertBinlogPathsRequest::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void GetInsertBinlogPathsRequest::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetInsertBinlogPathsRequest.segmentID)
}

// -------------------------------------------------------------------

// GetInsertBinlogPathsResponse

// repeated int64 fieldIDs = 1;
inline int GetInsertBinlogPathsResponse::_internal_fieldids_size() const {
  return _impl_.fieldids_.size();
}
inline int GetInsertBinlogPathsResponse::fieldids_size() const {
  return _internal_fieldids_size();
}
inline void GetInsertBinlogPathsResponse::clear_fieldids() {
  _impl_.fieldids_.Clear();
}
inline int64_t GetInsertBinlogPathsResponse::_internal_fieldids(int index) const {
  return _impl_.fieldids_.Get(index);
}
inline int64_t GetInsertBinlogPathsResponse::fieldids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetInsertBinlogPathsResponse.fieldIDs)
  return _internal_fieldids(index);
}
inline void GetInsertBinlogPathsResponse::set_fieldids(int index, int64_t value) {
  _impl_.fieldids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetInsertBinlogPathsResponse.fieldIDs)
}
inline void GetInsertBinlogPathsResponse::_internal_add_fieldids(int64_t value) {
  _impl_.fieldids_.Add(value);
}
inline void GetInsertBinlogPathsResponse::add_fieldids(int64_t value) {
  _internal_add_fieldids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetInsertBinlogPathsResponse.fieldIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetInsertBinlogPathsResponse::_internal_fieldids() const {
  return _impl_.fieldids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetInsertBinlogPathsResponse::fieldids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetInsertBinlogPathsResponse.fieldIDs)
  return _internal_fieldids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetInsertBinlogPathsResponse::_internal_mutable_fieldids() {
  return &_impl_.fieldids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetInsertBinlogPathsResponse::mutable_fieldids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetInsertBinlogPathsResponse.fieldIDs)
  return _internal_mutable_fieldids();
}

// repeated .milvus.proto.internal.StringList paths = 2;
inline int GetInsertBinlogPathsResponse::_internal_paths_size() const {
  return _impl_.paths_.size();
}
inline int GetInsertBinlogPathsResponse::paths_size() const {
  return _internal_paths_size();
}
inline ::milvus::proto::internal::StringList* GetInsertBinlogPathsResponse::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetInsertBinlogPathsResponse.paths)
  return _impl_.paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::internal::StringList >*
GetInsertBinlogPathsResponse::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetInsertBinlogPathsResponse.paths)
  return &_impl_.paths_;
}
inline const ::milvus::proto::internal::StringList& GetInsertBinlogPathsResponse::_internal_paths(int index) const {
  return _impl_.paths_.Get(index);
}
inline const ::milvus::proto::internal::StringList& GetInsertBinlogPathsResponse::paths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetInsertBinlogPathsResponse.paths)
  return _internal_paths(index);
}
inline ::milvus::proto::internal::StringList* GetInsertBinlogPathsResponse::_internal_add_paths() {
  return _impl_.paths_.Add();
}
inline ::milvus::proto::internal::StringList* GetInsertBinlogPathsResponse::add_paths() {
  ::milvus::proto::internal::StringList* _add = _internal_add_paths();
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetInsertBinlogPathsResponse.paths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::internal::StringList >&
GetInsertBinlogPathsResponse::paths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetInsertBinlogPathsResponse.paths)
  return _impl_.paths_;
}

// .milvus.proto.common.Status status = 3;
inline bool GetInsertBinlogPathsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetInsertBinlogPathsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetInsertBinlogPathsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetInsertBinlogPathsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetInsertBinlogPathsResponse.status)
  return _internal_status();
}
inline void GetInsertBinlogPathsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetInsertBinlogPathsResponse.status)
}
inline ::milvus::proto::common::Status* GetInsertBinlogPathsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetInsertBinlogPathsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetInsertBinlogPathsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetInsertBinlogPathsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetInsertBinlogPathsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetInsertBinlogPathsResponse.status)
  return _msg;
}
inline void GetInsertBinlogPathsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetInsertBinlogPathsResponse.status)
}

// -------------------------------------------------------------------

// GetCollectionStatisticsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetCollectionStatisticsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetCollectionStatisticsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetCollectionStatisticsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetCollectionStatisticsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetCollectionStatisticsRequest.base)
  return _internal_base();
}
inline void GetCollectionStatisticsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetCollectionStatisticsRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetCollectionStatisticsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetCollectionStatisticsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetCollectionStatisticsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetCollectionStatisticsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetCollectionStatisticsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetCollectionStatisticsRequest.base)
  return _msg;
}
inline void GetCollectionStatisticsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetCollectionStatisticsRequest.base)
}

// int64 dbID = 2;
inline void GetCollectionStatisticsRequest::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t GetCollectionStatisticsRequest::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t GetCollectionStatisticsRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetCollectionStatisticsRequest.dbID)
  return _internal_dbid();
}
inline void GetCollectionStatisticsRequest::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void GetCollectionStatisticsRequest::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetCollectionStatisticsRequest.dbID)
}

// int64 collectionID = 3;
inline void GetCollectionStatisticsRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t GetCollectionStatisticsRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t GetCollectionStatisticsRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetCollectionStatisticsRequest.collectionID)
  return _internal_collectionid();
}
inline void GetCollectionStatisticsRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void GetCollectionStatisticsRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetCollectionStatisticsRequest.collectionID)
}

// -------------------------------------------------------------------

// GetCollectionStatisticsResponse

// repeated .milvus.proto.common.KeyValuePair stats = 1;
inline int GetCollectionStatisticsResponse::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int GetCollectionStatisticsResponse::stats_size() const {
  return _internal_stats_size();
}
inline ::milvus::proto::common::KeyValuePair* GetCollectionStatisticsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetCollectionStatisticsResponse.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
GetCollectionStatisticsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetCollectionStatisticsResponse.stats)
  return &_impl_.stats_;
}
inline const ::milvus::proto::common::KeyValuePair& GetCollectionStatisticsResponse::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& GetCollectionStatisticsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetCollectionStatisticsResponse.stats)
  return _internal_stats(index);
}
inline ::milvus::proto::common::KeyValuePair* GetCollectionStatisticsResponse::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::milvus::proto::common::KeyValuePair* GetCollectionStatisticsResponse::add_stats() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetCollectionStatisticsResponse.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
GetCollectionStatisticsResponse::stats() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetCollectionStatisticsResponse.stats)
  return _impl_.stats_;
}

// .milvus.proto.common.Status status = 2;
inline bool GetCollectionStatisticsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetCollectionStatisticsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetCollectionStatisticsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetCollectionStatisticsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetCollectionStatisticsResponse.status)
  return _internal_status();
}
inline void GetCollectionStatisticsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetCollectionStatisticsResponse.status)
}
inline ::milvus::proto::common::Status* GetCollectionStatisticsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetCollectionStatisticsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetCollectionStatisticsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetCollectionStatisticsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetCollectionStatisticsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetCollectionStatisticsResponse.status)
  return _msg;
}
inline void GetCollectionStatisticsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetCollectionStatisticsResponse.status)
}

// -------------------------------------------------------------------

// GetPartitionStatisticsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetPartitionStatisticsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetPartitionStatisticsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetPartitionStatisticsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetPartitionStatisticsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetPartitionStatisticsRequest.base)
  return _internal_base();
}
inline void GetPartitionStatisticsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetPartitionStatisticsRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetPartitionStatisticsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetPartitionStatisticsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetPartitionStatisticsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetPartitionStatisticsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetPartitionStatisticsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetPartitionStatisticsRequest.base)
  return _msg;
}
inline void GetPartitionStatisticsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetPartitionStatisticsRequest.base)
}

// int64 dbID = 2;
inline void GetPartitionStatisticsRequest::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t GetPartitionStatisticsRequest::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t GetPartitionStatisticsRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetPartitionStatisticsRequest.dbID)
  return _internal_dbid();
}
inline void GetPartitionStatisticsRequest::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void GetPartitionStatisticsRequest::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetPartitionStatisticsRequest.dbID)
}

// int64 collectionID = 3;
inline void GetPartitionStatisticsRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t GetPartitionStatisticsRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t GetPartitionStatisticsRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetPartitionStatisticsRequest.collectionID)
  return _internal_collectionid();
}
inline void GetPartitionStatisticsRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void GetPartitionStatisticsRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetPartitionStatisticsRequest.collectionID)
}

// repeated int64 partitionIDs = 4;
inline int GetPartitionStatisticsRequest::_internal_partitionids_size() const {
  return _impl_.partitionids_.size();
}
inline int GetPartitionStatisticsRequest::partitionids_size() const {
  return _internal_partitionids_size();
}
inline void GetPartitionStatisticsRequest::clear_partitionids() {
  _impl_.partitionids_.Clear();
}
inline int64_t GetPartitionStatisticsRequest::_internal_partitionids(int index) const {
  return _impl_.partitionids_.Get(index);
}
inline int64_t GetPartitionStatisticsRequest::partitionids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetPartitionStatisticsRequest.partitionIDs)
  return _internal_partitionids(index);
}
inline void GetPartitionStatisticsRequest::set_partitionids(int index, int64_t value) {
  _impl_.partitionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetPartitionStatisticsRequest.partitionIDs)
}
inline void GetPartitionStatisticsRequest::_internal_add_partitionids(int64_t value) {
  _impl_.partitionids_.Add(value);
}
inline void GetPartitionStatisticsRequest::add_partitionids(int64_t value) {
  _internal_add_partitionids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetPartitionStatisticsRequest.partitionIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetPartitionStatisticsRequest::_internal_partitionids() const {
  return _impl_.partitionids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetPartitionStatisticsRequest::partitionids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetPartitionStatisticsRequest.partitionIDs)
  return _internal_partitionids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetPartitionStatisticsRequest::_internal_mutable_partitionids() {
  return &_impl_.partitionids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetPartitionStatisticsRequest::mutable_partitionids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetPartitionStatisticsRequest.partitionIDs)
  return _internal_mutable_partitionids();
}

// -------------------------------------------------------------------

// GetPartitionStatisticsResponse

// repeated .milvus.proto.common.KeyValuePair stats = 1;
inline int GetPartitionStatisticsResponse::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int GetPartitionStatisticsResponse::stats_size() const {
  return _internal_stats_size();
}
inline ::milvus::proto::common::KeyValuePair* GetPartitionStatisticsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetPartitionStatisticsResponse.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
GetPartitionStatisticsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetPartitionStatisticsResponse.stats)
  return &_impl_.stats_;
}
inline const ::milvus::proto::common::KeyValuePair& GetPartitionStatisticsResponse::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& GetPartitionStatisticsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetPartitionStatisticsResponse.stats)
  return _internal_stats(index);
}
inline ::milvus::proto::common::KeyValuePair* GetPartitionStatisticsResponse::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::milvus::proto::common::KeyValuePair* GetPartitionStatisticsResponse::add_stats() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetPartitionStatisticsResponse.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
GetPartitionStatisticsResponse::stats() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetPartitionStatisticsResponse.stats)
  return _impl_.stats_;
}

// .milvus.proto.common.Status status = 2;
inline bool GetPartitionStatisticsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetPartitionStatisticsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetPartitionStatisticsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetPartitionStatisticsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetPartitionStatisticsResponse.status)
  return _internal_status();
}
inline void GetPartitionStatisticsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetPartitionStatisticsResponse.status)
}
inline ::milvus::proto::common::Status* GetPartitionStatisticsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetPartitionStatisticsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetPartitionStatisticsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetPartitionStatisticsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetPartitionStatisticsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetPartitionStatisticsResponse.status)
  return _msg;
}
inline void GetPartitionStatisticsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetPartitionStatisticsResponse.status)
}

// -------------------------------------------------------------------

// GetSegmentInfoChannelRequest

// -------------------------------------------------------------------

// VchannelInfo

// int64 collectionID = 1;
inline void VchannelInfo::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t VchannelInfo::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t VchannelInfo::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.VchannelInfo.collectionID)
  return _internal_collectionid();
}
inline void VchannelInfo::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void VchannelInfo::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.VchannelInfo.collectionID)
}

// string channelName = 2;
inline void VchannelInfo::clear_channelname() {
  _impl_.channelname_.ClearToEmpty();
}
inline const std::string& VchannelInfo::channelname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.VchannelInfo.channelName)
  return _internal_channelname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VchannelInfo::set_channelname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.VchannelInfo.channelName)
}
inline std::string* VchannelInfo::mutable_channelname() {
  std::string* _s = _internal_mutable_channelname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.VchannelInfo.channelName)
  return _s;
}
inline const std::string& VchannelInfo::_internal_channelname() const {
  return _impl_.channelname_.Get();
}
inline void VchannelInfo::_internal_set_channelname(const std::string& value) {
  
  _impl_.channelname_.Set(value, GetArenaForAllocation());
}
inline std::string* VchannelInfo::_internal_mutable_channelname() {
  
  return _impl_.channelname_.Mutable(GetArenaForAllocation());
}
inline std::string* VchannelInfo::release_channelname() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.VchannelInfo.channelName)
  return _impl_.channelname_.Release();
}
inline void VchannelInfo::set_allocated_channelname(std::string* channelname) {
  if (channelname != nullptr) {
    
  } else {
    
  }
  _impl_.channelname_.SetAllocated(channelname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelname_.IsDefault()) {
    _impl_.channelname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.VchannelInfo.channelName)
}

// .milvus.proto.msg.MsgPosition seek_position = 3;
inline bool VchannelInfo::_internal_has_seek_position() const {
  return this != internal_default_instance() && _impl_.seek_position_ != nullptr;
}
inline bool VchannelInfo::has_seek_position() const {
  return _internal_has_seek_position();
}
inline const ::milvus::proto::msg::MsgPosition& VchannelInfo::_internal_seek_position() const {
  const ::milvus::proto::msg::MsgPosition* p = _impl_.seek_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::msg::MsgPosition&>(
      ::milvus::proto::msg::_MsgPosition_default_instance_);
}
inline const ::milvus::proto::msg::MsgPosition& VchannelInfo::seek_position() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.VchannelInfo.seek_position)
  return _internal_seek_position();
}
inline void VchannelInfo::unsafe_arena_set_allocated_seek_position(
    ::milvus::proto::msg::MsgPosition* seek_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seek_position_);
  }
  _impl_.seek_position_ = seek_position;
  if (seek_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.VchannelInfo.seek_position)
}
inline ::milvus::proto::msg::MsgPosition* VchannelInfo::release_seek_position() {
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.seek_position_;
  _impl_.seek_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* VchannelInfo::unsafe_arena_release_seek_position() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.VchannelInfo.seek_position)
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.seek_position_;
  _impl_.seek_position_ = nullptr;
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* VchannelInfo::_internal_mutable_seek_position() {
  
  if (_impl_.seek_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::msg::MsgPosition>(GetArenaForAllocation());
    _impl_.seek_position_ = p;
  }
  return _impl_.seek_position_;
}
inline ::milvus::proto::msg::MsgPosition* VchannelInfo::mutable_seek_position() {
  ::milvus::proto::msg::MsgPosition* _msg = _internal_mutable_seek_position();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.VchannelInfo.seek_position)
  return _msg;
}
inline void VchannelInfo::set_allocated_seek_position(::milvus::proto::msg::MsgPosition* seek_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seek_position_);
  }
  if (seek_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seek_position));
    if (message_arena != submessage_arena) {
      seek_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seek_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.seek_position_ = seek_position;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.VchannelInfo.seek_position)
}

// repeated .milvus.proto.data.SegmentInfo unflushedSegments = 4;
inline int VchannelInfo::_internal_unflushedsegments_size() const {
  return _impl_.unflushedsegments_.size();
}
inline int VchannelInfo::unflushedsegments_size() const {
  return _internal_unflushedsegments_size();
}
inline void VchannelInfo::clear_unflushedsegments() {
  _impl_.unflushedsegments_.Clear();
}
inline ::milvus::proto::data::SegmentInfo* VchannelInfo::mutable_unflushedsegments(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.VchannelInfo.unflushedSegments)
  return _impl_.unflushedsegments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >*
VchannelInfo::mutable_unflushedsegments() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.VchannelInfo.unflushedSegments)
  return &_impl_.unflushedsegments_;
}
inline const ::milvus::proto::data::SegmentInfo& VchannelInfo::_internal_unflushedsegments(int index) const {
  return _impl_.unflushedsegments_.Get(index);
}
inline const ::milvus::proto::data::SegmentInfo& VchannelInfo::unflushedsegments(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.VchannelInfo.unflushedSegments)
  return _internal_unflushedsegments(index);
}
inline ::milvus::proto::data::SegmentInfo* VchannelInfo::_internal_add_unflushedsegments() {
  return _impl_.unflushedsegments_.Add();
}
inline ::milvus::proto::data::SegmentInfo* VchannelInfo::add_unflushedsegments() {
  ::milvus::proto::data::SegmentInfo* _add = _internal_add_unflushedsegments();
  // @@protoc_insertion_point(field_add:milvus.proto.data.VchannelInfo.unflushedSegments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >&
VchannelInfo::unflushedsegments() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.VchannelInfo.unflushedSegments)
  return _impl_.unflushedsegments_;
}

// repeated .milvus.proto.data.SegmentInfo flushedSegments = 5;
inline int VchannelInfo::_internal_flushedsegments_size() const {
  return _impl_.flushedsegments_.size();
}
inline int VchannelInfo::flushedsegments_size() const {
  return _internal_flushedsegments_size();
}
inline void VchannelInfo::clear_flushedsegments() {
  _impl_.flushedsegments_.Clear();
}
inline ::milvus::proto::data::SegmentInfo* VchannelInfo::mutable_flushedsegments(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.VchannelInfo.flushedSegments)
  return _impl_.flushedsegments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >*
VchannelInfo::mutable_flushedsegments() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.VchannelInfo.flushedSegments)
  return &_impl_.flushedsegments_;
}
inline const ::milvus::proto::data::SegmentInfo& VchannelInfo::_internal_flushedsegments(int index) const {
  return _impl_.flushedsegments_.Get(index);
}
inline const ::milvus::proto::data::SegmentInfo& VchannelInfo::flushedsegments(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.VchannelInfo.flushedSegments)
  return _internal_flushedsegments(index);
}
inline ::milvus::proto::data::SegmentInfo* VchannelInfo::_internal_add_flushedsegments() {
  return _impl_.flushedsegments_.Add();
}
inline ::milvus::proto::data::SegmentInfo* VchannelInfo::add_flushedsegments() {
  ::milvus::proto::data::SegmentInfo* _add = _internal_add_flushedsegments();
  // @@protoc_insertion_point(field_add:milvus.proto.data.VchannelInfo.flushedSegments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >&
VchannelInfo::flushedsegments() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.VchannelInfo.flushedSegments)
  return _impl_.flushedsegments_;
}

// repeated .milvus.proto.data.SegmentInfo dropped_segments = 6;
inline int VchannelInfo::_internal_dropped_segments_size() const {
  return _impl_.dropped_segments_.size();
}
inline int VchannelInfo::dropped_segments_size() const {
  return _internal_dropped_segments_size();
}
inline void VchannelInfo::clear_dropped_segments() {
  _impl_.dropped_segments_.Clear();
}
inline ::milvus::proto::data::SegmentInfo* VchannelInfo::mutable_dropped_segments(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.VchannelInfo.dropped_segments)
  return _impl_.dropped_segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >*
VchannelInfo::mutable_dropped_segments() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.VchannelInfo.dropped_segments)
  return &_impl_.dropped_segments_;
}
inline const ::milvus::proto::data::SegmentInfo& VchannelInfo::_internal_dropped_segments(int index) const {
  return _impl_.dropped_segments_.Get(index);
}
inline const ::milvus::proto::data::SegmentInfo& VchannelInfo::dropped_segments(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.VchannelInfo.dropped_segments)
  return _internal_dropped_segments(index);
}
inline ::milvus::proto::data::SegmentInfo* VchannelInfo::_internal_add_dropped_segments() {
  return _impl_.dropped_segments_.Add();
}
inline ::milvus::proto::data::SegmentInfo* VchannelInfo::add_dropped_segments() {
  ::milvus::proto::data::SegmentInfo* _add = _internal_add_dropped_segments();
  // @@protoc_insertion_point(field_add:milvus.proto.data.VchannelInfo.dropped_segments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >&
VchannelInfo::dropped_segments() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.VchannelInfo.dropped_segments)
  return _impl_.dropped_segments_;
}

// repeated int64 unflushedSegmentIds = 7;
inline int VchannelInfo::_internal_unflushedsegmentids_size() const {
  return _impl_.unflushedsegmentids_.size();
}
inline int VchannelInfo::unflushedsegmentids_size() const {
  return _internal_unflushedsegmentids_size();
}
inline void VchannelInfo::clear_unflushedsegmentids() {
  _impl_.unflushedsegmentids_.Clear();
}
inline int64_t VchannelInfo::_internal_unflushedsegmentids(int index) const {
  return _impl_.unflushedsegmentids_.Get(index);
}
inline int64_t VchannelInfo::unflushedsegmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.VchannelInfo.unflushedSegmentIds)
  return _internal_unflushedsegmentids(index);
}
inline void VchannelInfo::set_unflushedsegmentids(int index, int64_t value) {
  _impl_.unflushedsegmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.VchannelInfo.unflushedSegmentIds)
}
inline void VchannelInfo::_internal_add_unflushedsegmentids(int64_t value) {
  _impl_.unflushedsegmentids_.Add(value);
}
inline void VchannelInfo::add_unflushedsegmentids(int64_t value) {
  _internal_add_unflushedsegmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.VchannelInfo.unflushedSegmentIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
VchannelInfo::_internal_unflushedsegmentids() const {
  return _impl_.unflushedsegmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
VchannelInfo::unflushedsegmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.VchannelInfo.unflushedSegmentIds)
  return _internal_unflushedsegmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
VchannelInfo::_internal_mutable_unflushedsegmentids() {
  return &_impl_.unflushedsegmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
VchannelInfo::mutable_unflushedsegmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.VchannelInfo.unflushedSegmentIds)
  return _internal_mutable_unflushedsegmentids();
}

// repeated int64 flushedSegmentIds = 8;
inline int VchannelInfo::_internal_flushedsegmentids_size() const {
  return _impl_.flushedsegmentids_.size();
}
inline int VchannelInfo::flushedsegmentids_size() const {
  return _internal_flushedsegmentids_size();
}
inline void VchannelInfo::clear_flushedsegmentids() {
  _impl_.flushedsegmentids_.Clear();
}
inline int64_t VchannelInfo::_internal_flushedsegmentids(int index) const {
  return _impl_.flushedsegmentids_.Get(index);
}
inline int64_t VchannelInfo::flushedsegmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.VchannelInfo.flushedSegmentIds)
  return _internal_flushedsegmentids(index);
}
inline void VchannelInfo::set_flushedsegmentids(int index, int64_t value) {
  _impl_.flushedsegmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.VchannelInfo.flushedSegmentIds)
}
inline void VchannelInfo::_internal_add_flushedsegmentids(int64_t value) {
  _impl_.flushedsegmentids_.Add(value);
}
inline void VchannelInfo::add_flushedsegmentids(int64_t value) {
  _internal_add_flushedsegmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.VchannelInfo.flushedSegmentIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
VchannelInfo::_internal_flushedsegmentids() const {
  return _impl_.flushedsegmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
VchannelInfo::flushedsegmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.VchannelInfo.flushedSegmentIds)
  return _internal_flushedsegmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
VchannelInfo::_internal_mutable_flushedsegmentids() {
  return &_impl_.flushedsegmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
VchannelInfo::mutable_flushedsegmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.VchannelInfo.flushedSegmentIds)
  return _internal_mutable_flushedsegmentids();
}

// repeated int64 dropped_segmentIds = 9;
inline int VchannelInfo::_internal_dropped_segmentids_size() const {
  return _impl_.dropped_segmentids_.size();
}
inline int VchannelInfo::dropped_segmentids_size() const {
  return _internal_dropped_segmentids_size();
}
inline void VchannelInfo::clear_dropped_segmentids() {
  _impl_.dropped_segmentids_.Clear();
}
inline int64_t VchannelInfo::_internal_dropped_segmentids(int index) const {
  return _impl_.dropped_segmentids_.Get(index);
}
inline int64_t VchannelInfo::dropped_segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.VchannelInfo.dropped_segmentIds)
  return _internal_dropped_segmentids(index);
}
inline void VchannelInfo::set_dropped_segmentids(int index, int64_t value) {
  _impl_.dropped_segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.VchannelInfo.dropped_segmentIds)
}
inline void VchannelInfo::_internal_add_dropped_segmentids(int64_t value) {
  _impl_.dropped_segmentids_.Add(value);
}
inline void VchannelInfo::add_dropped_segmentids(int64_t value) {
  _internal_add_dropped_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.VchannelInfo.dropped_segmentIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
VchannelInfo::_internal_dropped_segmentids() const {
  return _impl_.dropped_segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
VchannelInfo::dropped_segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.VchannelInfo.dropped_segmentIds)
  return _internal_dropped_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
VchannelInfo::_internal_mutable_dropped_segmentids() {
  return &_impl_.dropped_segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
VchannelInfo::mutable_dropped_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.VchannelInfo.dropped_segmentIds)
  return _internal_mutable_dropped_segmentids();
}

// repeated int64 indexed_segmentIds = 10;
inline int VchannelInfo::_internal_indexed_segmentids_size() const {
  return _impl_.indexed_segmentids_.size();
}
inline int VchannelInfo::indexed_segmentids_size() const {
  return _internal_indexed_segmentids_size();
}
inline void VchannelInfo::clear_indexed_segmentids() {
  _impl_.indexed_segmentids_.Clear();
}
inline int64_t VchannelInfo::_internal_indexed_segmentids(int index) const {
  return _impl_.indexed_segmentids_.Get(index);
}
inline int64_t VchannelInfo::indexed_segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.VchannelInfo.indexed_segmentIds)
  return _internal_indexed_segmentids(index);
}
inline void VchannelInfo::set_indexed_segmentids(int index, int64_t value) {
  _impl_.indexed_segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.VchannelInfo.indexed_segmentIds)
}
inline void VchannelInfo::_internal_add_indexed_segmentids(int64_t value) {
  _impl_.indexed_segmentids_.Add(value);
}
inline void VchannelInfo::add_indexed_segmentids(int64_t value) {
  _internal_add_indexed_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.VchannelInfo.indexed_segmentIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
VchannelInfo::_internal_indexed_segmentids() const {
  return _impl_.indexed_segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
VchannelInfo::indexed_segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.VchannelInfo.indexed_segmentIds)
  return _internal_indexed_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
VchannelInfo::_internal_mutable_indexed_segmentids() {
  return &_impl_.indexed_segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
VchannelInfo::mutable_indexed_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.VchannelInfo.indexed_segmentIds)
  return _internal_mutable_indexed_segmentids();
}

// repeated .milvus.proto.data.SegmentInfo indexed_segments = 11;
inline int VchannelInfo::_internal_indexed_segments_size() const {
  return _impl_.indexed_segments_.size();
}
inline int VchannelInfo::indexed_segments_size() const {
  return _internal_indexed_segments_size();
}
inline void VchannelInfo::clear_indexed_segments() {
  _impl_.indexed_segments_.Clear();
}
inline ::milvus::proto::data::SegmentInfo* VchannelInfo::mutable_indexed_segments(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.VchannelInfo.indexed_segments)
  return _impl_.indexed_segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >*
VchannelInfo::mutable_indexed_segments() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.VchannelInfo.indexed_segments)
  return &_impl_.indexed_segments_;
}
inline const ::milvus::proto::data::SegmentInfo& VchannelInfo::_internal_indexed_segments(int index) const {
  return _impl_.indexed_segments_.Get(index);
}
inline const ::milvus::proto::data::SegmentInfo& VchannelInfo::indexed_segments(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.VchannelInfo.indexed_segments)
  return _internal_indexed_segments(index);
}
inline ::milvus::proto::data::SegmentInfo* VchannelInfo::_internal_add_indexed_segments() {
  return _impl_.indexed_segments_.Add();
}
inline ::milvus::proto::data::SegmentInfo* VchannelInfo::add_indexed_segments() {
  ::milvus::proto::data::SegmentInfo* _add = _internal_add_indexed_segments();
  // @@protoc_insertion_point(field_add:milvus.proto.data.VchannelInfo.indexed_segments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >&
VchannelInfo::indexed_segments() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.VchannelInfo.indexed_segments)
  return _impl_.indexed_segments_;
}

// -------------------------------------------------------------------

// WatchDmChannelsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool WatchDmChannelsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool WatchDmChannelsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& WatchDmChannelsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& WatchDmChannelsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.WatchDmChannelsRequest.base)
  return _internal_base();
}
inline void WatchDmChannelsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.WatchDmChannelsRequest.base)
}
inline ::milvus::proto::common::MsgBase* WatchDmChannelsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* WatchDmChannelsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.WatchDmChannelsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* WatchDmChannelsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* WatchDmChannelsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.WatchDmChannelsRequest.base)
  return _msg;
}
inline void WatchDmChannelsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.WatchDmChannelsRequest.base)
}

// repeated .milvus.proto.data.VchannelInfo vchannels = 2;
inline int WatchDmChannelsRequest::_internal_vchannels_size() const {
  return _impl_.vchannels_.size();
}
inline int WatchDmChannelsRequest::vchannels_size() const {
  return _internal_vchannels_size();
}
inline void WatchDmChannelsRequest::clear_vchannels() {
  _impl_.vchannels_.Clear();
}
inline ::milvus::proto::data::VchannelInfo* WatchDmChannelsRequest::mutable_vchannels(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.WatchDmChannelsRequest.vchannels)
  return _impl_.vchannels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo >*
WatchDmChannelsRequest::mutable_vchannels() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.WatchDmChannelsRequest.vchannels)
  return &_impl_.vchannels_;
}
inline const ::milvus::proto::data::VchannelInfo& WatchDmChannelsRequest::_internal_vchannels(int index) const {
  return _impl_.vchannels_.Get(index);
}
inline const ::milvus::proto::data::VchannelInfo& WatchDmChannelsRequest::vchannels(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.WatchDmChannelsRequest.vchannels)
  return _internal_vchannels(index);
}
inline ::milvus::proto::data::VchannelInfo* WatchDmChannelsRequest::_internal_add_vchannels() {
  return _impl_.vchannels_.Add();
}
inline ::milvus::proto::data::VchannelInfo* WatchDmChannelsRequest::add_vchannels() {
  ::milvus::proto::data::VchannelInfo* _add = _internal_add_vchannels();
  // @@protoc_insertion_point(field_add:milvus.proto.data.WatchDmChannelsRequest.vchannels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo >&
WatchDmChannelsRequest::vchannels() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.WatchDmChannelsRequest.vchannels)
  return _impl_.vchannels_;
}

// -------------------------------------------------------------------

// FlushSegmentsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool FlushSegmentsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool FlushSegmentsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& FlushSegmentsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& FlushSegmentsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushSegmentsRequest.base)
  return _internal_base();
}
inline void FlushSegmentsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.FlushSegmentsRequest.base)
}
inline ::milvus::proto::common::MsgBase* FlushSegmentsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* FlushSegmentsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.FlushSegmentsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* FlushSegmentsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* FlushSegmentsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.FlushSegmentsRequest.base)
  return _msg;
}
inline void FlushSegmentsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.FlushSegmentsRequest.base)
}

// int64 dbID = 2;
inline void FlushSegmentsRequest::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t FlushSegmentsRequest::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t FlushSegmentsRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushSegmentsRequest.dbID)
  return _internal_dbid();
}
inline void FlushSegmentsRequest::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void FlushSegmentsRequest::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.FlushSegmentsRequest.dbID)
}

// int64 collectionID = 3;
inline void FlushSegmentsRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t FlushSegmentsRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t FlushSegmentsRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushSegmentsRequest.collectionID)
  return _internal_collectionid();
}
inline void FlushSegmentsRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void FlushSegmentsRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.FlushSegmentsRequest.collectionID)
}

// repeated int64 segmentIDs = 4;
inline int FlushSegmentsRequest::_internal_segmentids_size() const {
  return _impl_.segmentids_.size();
}
inline int FlushSegmentsRequest::segmentids_size() const {
  return _internal_segmentids_size();
}
inline void FlushSegmentsRequest::clear_segmentids() {
  _impl_.segmentids_.Clear();
}
inline int64_t FlushSegmentsRequest::_internal_segmentids(int index) const {
  return _impl_.segmentids_.Get(index);
}
inline int64_t FlushSegmentsRequest::segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FlushSegmentsRequest.segmentIDs)
  return _internal_segmentids(index);
}
inline void FlushSegmentsRequest::set_segmentids(int index, int64_t value) {
  _impl_.segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.FlushSegmentsRequest.segmentIDs)
}
inline void FlushSegmentsRequest::_internal_add_segmentids(int64_t value) {
  _impl_.segmentids_.Add(value);
}
inline void FlushSegmentsRequest::add_segmentids(int64_t value) {
  _internal_add_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.FlushSegmentsRequest.segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FlushSegmentsRequest::_internal_segmentids() const {
  return _impl_.segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FlushSegmentsRequest::segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.FlushSegmentsRequest.segmentIDs)
  return _internal_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FlushSegmentsRequest::_internal_mutable_segmentids() {
  return &_impl_.segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FlushSegmentsRequest::mutable_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.FlushSegmentsRequest.segmentIDs)
  return _internal_mutable_segmentids();
}

// -------------------------------------------------------------------

// SegmentMsg

// .milvus.proto.common.MsgBase base = 1;
inline bool SegmentMsg::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SegmentMsg::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& SegmentMsg::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& SegmentMsg::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentMsg.base)
  return _internal_base();
}
inline void SegmentMsg::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SegmentMsg.base)
}
inline ::milvus::proto::common::MsgBase* SegmentMsg::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* SegmentMsg::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentMsg.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* SegmentMsg::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* SegmentMsg::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentMsg.base)
  return _msg;
}
inline void SegmentMsg::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentMsg.base)
}

// .milvus.proto.data.SegmentInfo segment = 2;
inline bool SegmentMsg::_internal_has_segment() const {
  return this != internal_default_instance() && _impl_.segment_ != nullptr;
}
inline bool SegmentMsg::has_segment() const {
  return _internal_has_segment();
}
inline void SegmentMsg::clear_segment() {
  if (GetArenaForAllocation() == nullptr && _impl_.segment_ != nullptr) {
    delete _impl_.segment_;
  }
  _impl_.segment_ = nullptr;
}
inline const ::milvus::proto::data::SegmentInfo& SegmentMsg::_internal_segment() const {
  const ::milvus::proto::data::SegmentInfo* p = _impl_.segment_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::data::SegmentInfo&>(
      ::milvus::proto::data::_SegmentInfo_default_instance_);
}
inline const ::milvus::proto::data::SegmentInfo& SegmentMsg::segment() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentMsg.segment)
  return _internal_segment();
}
inline void SegmentMsg::unsafe_arena_set_allocated_segment(
    ::milvus::proto::data::SegmentInfo* segment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.segment_);
  }
  _impl_.segment_ = segment;
  if (segment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SegmentMsg.segment)
}
inline ::milvus::proto::data::SegmentInfo* SegmentMsg::release_segment() {
  
  ::milvus::proto::data::SegmentInfo* temp = _impl_.segment_;
  _impl_.segment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::data::SegmentInfo* SegmentMsg::unsafe_arena_release_segment() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentMsg.segment)
  
  ::milvus::proto::data::SegmentInfo* temp = _impl_.segment_;
  _impl_.segment_ = nullptr;
  return temp;
}
inline ::milvus::proto::data::SegmentInfo* SegmentMsg::_internal_mutable_segment() {
  
  if (_impl_.segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::data::SegmentInfo>(GetArenaForAllocation());
    _impl_.segment_ = p;
  }
  return _impl_.segment_;
}
inline ::milvus::proto::data::SegmentInfo* SegmentMsg::mutable_segment() {
  ::milvus::proto::data::SegmentInfo* _msg = _internal_mutable_segment();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentMsg.segment)
  return _msg;
}
inline void SegmentMsg::set_allocated_segment(::milvus::proto::data::SegmentInfo* segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.segment_;
  }
  if (segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(segment);
    if (message_arena != submessage_arena) {
      segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.segment_ = segment;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentMsg.segment)
}

// -------------------------------------------------------------------

// SegmentInfo

// int64 ID = 1;
inline void SegmentInfo::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t SegmentInfo::_internal_id() const {
  return _impl_.id_;
}
inline int64_t SegmentInfo::id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.ID)
  return _internal_id();
}
inline void SegmentInfo::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void SegmentInfo::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentInfo.ID)
}

// int64 collectionID = 2;
inline void SegmentInfo::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t SegmentInfo::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t SegmentInfo::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.collectionID)
  return _internal_collectionid();
}
inline void SegmentInfo::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void SegmentInfo::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentInfo.collectionID)
}

// int64 partitionID = 3;
inline void SegmentInfo::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t SegmentInfo::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t SegmentInfo::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.partitionID)
  return _internal_partitionid();
}
inline void SegmentInfo::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void SegmentInfo::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentInfo.partitionID)
}

// string insert_channel = 4;
inline void SegmentInfo::clear_insert_channel() {
  _impl_.insert_channel_.ClearToEmpty();
}
inline const std::string& SegmentInfo::insert_channel() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.insert_channel)
  return _internal_insert_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegmentInfo::set_insert_channel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.insert_channel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentInfo.insert_channel)
}
inline std::string* SegmentInfo::mutable_insert_channel() {
  std::string* _s = _internal_mutable_insert_channel();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentInfo.insert_channel)
  return _s;
}
inline const std::string& SegmentInfo::_internal_insert_channel() const {
  return _impl_.insert_channel_.Get();
}
inline void SegmentInfo::_internal_set_insert_channel(const std::string& value) {
  
  _impl_.insert_channel_.Set(value, GetArenaForAllocation());
}
inline std::string* SegmentInfo::_internal_mutable_insert_channel() {
  
  return _impl_.insert_channel_.Mutable(GetArenaForAllocation());
}
inline std::string* SegmentInfo::release_insert_channel() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentInfo.insert_channel)
  return _impl_.insert_channel_.Release();
}
inline void SegmentInfo::set_allocated_insert_channel(std::string* insert_channel) {
  if (insert_channel != nullptr) {
    
  } else {
    
  }
  _impl_.insert_channel_.SetAllocated(insert_channel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.insert_channel_.IsDefault()) {
    _impl_.insert_channel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentInfo.insert_channel)
}

// int64 num_of_rows = 5;
inline void SegmentInfo::clear_num_of_rows() {
  _impl_.num_of_rows_ = int64_t{0};
}
inline int64_t SegmentInfo::_internal_num_of_rows() const {
  return _impl_.num_of_rows_;
}
inline int64_t SegmentInfo::num_of_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.num_of_rows)
  return _internal_num_of_rows();
}
inline void SegmentInfo::_internal_set_num_of_rows(int64_t value) {
  
  _impl_.num_of_rows_ = value;
}
inline void SegmentInfo::set_num_of_rows(int64_t value) {
  _internal_set_num_of_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentInfo.num_of_rows)
}

// .milvus.proto.common.SegmentState state = 6;
inline void SegmentInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::SegmentState SegmentInfo::_internal_state() const {
  return static_cast< ::milvus::proto::common::SegmentState >(_impl_.state_);
}
inline ::milvus::proto::common::SegmentState SegmentInfo::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.state)
  return _internal_state();
}
inline void SegmentInfo::_internal_set_state(::milvus::proto::common::SegmentState value) {
  
  _impl_.state_ = value;
}
inline void SegmentInfo::set_state(::milvus::proto::common::SegmentState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentInfo.state)
}

// int64 max_row_num = 7;
inline void SegmentInfo::clear_max_row_num() {
  _impl_.max_row_num_ = int64_t{0};
}
inline int64_t SegmentInfo::_internal_max_row_num() const {
  return _impl_.max_row_num_;
}
inline int64_t SegmentInfo::max_row_num() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.max_row_num)
  return _internal_max_row_num();
}
inline void SegmentInfo::_internal_set_max_row_num(int64_t value) {
  
  _impl_.max_row_num_ = value;
}
inline void SegmentInfo::set_max_row_num(int64_t value) {
  _internal_set_max_row_num(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentInfo.max_row_num)
}

// uint64 last_expire_time = 8;
inline void SegmentInfo::clear_last_expire_time() {
  _impl_.last_expire_time_ = uint64_t{0u};
}
inline uint64_t SegmentInfo::_internal_last_expire_time() const {
  return _impl_.last_expire_time_;
}
inline uint64_t SegmentInfo::last_expire_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.last_expire_time)
  return _internal_last_expire_time();
}
inline void SegmentInfo::_internal_set_last_expire_time(uint64_t value) {
  
  _impl_.last_expire_time_ = value;
}
inline void SegmentInfo::set_last_expire_time(uint64_t value) {
  _internal_set_last_expire_time(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentInfo.last_expire_time)
}

// .milvus.proto.msg.MsgPosition start_position = 9;
inline bool SegmentInfo::_internal_has_start_position() const {
  return this != internal_default_instance() && _impl_.start_position_ != nullptr;
}
inline bool SegmentInfo::has_start_position() const {
  return _internal_has_start_position();
}
inline const ::milvus::proto::msg::MsgPosition& SegmentInfo::_internal_start_position() const {
  const ::milvus::proto::msg::MsgPosition* p = _impl_.start_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::msg::MsgPosition&>(
      ::milvus::proto::msg::_MsgPosition_default_instance_);
}
inline const ::milvus::proto::msg::MsgPosition& SegmentInfo::start_position() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.start_position)
  return _internal_start_position();
}
inline void SegmentInfo::unsafe_arena_set_allocated_start_position(
    ::milvus::proto::msg::MsgPosition* start_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_position_);
  }
  _impl_.start_position_ = start_position;
  if (start_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SegmentInfo.start_position)
}
inline ::milvus::proto::msg::MsgPosition* SegmentInfo::release_start_position() {
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.start_position_;
  _impl_.start_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* SegmentInfo::unsafe_arena_release_start_position() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentInfo.start_position)
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.start_position_;
  _impl_.start_position_ = nullptr;
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* SegmentInfo::_internal_mutable_start_position() {
  
  if (_impl_.start_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::msg::MsgPosition>(GetArenaForAllocation());
    _impl_.start_position_ = p;
  }
  return _impl_.start_position_;
}
inline ::milvus::proto::msg::MsgPosition* SegmentInfo::mutable_start_position() {
  ::milvus::proto::msg::MsgPosition* _msg = _internal_mutable_start_position();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentInfo.start_position)
  return _msg;
}
inline void SegmentInfo::set_allocated_start_position(::milvus::proto::msg::MsgPosition* start_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_position_);
  }
  if (start_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_position));
    if (message_arena != submessage_arena) {
      start_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_position_ = start_position;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentInfo.start_position)
}

// .milvus.proto.msg.MsgPosition dml_position = 10;
inline bool SegmentInfo::_internal_has_dml_position() const {
  return this != internal_default_instance() && _impl_.dml_position_ != nullptr;
}
inline bool SegmentInfo::has_dml_position() const {
  return _internal_has_dml_position();
}
inline const ::milvus::proto::msg::MsgPosition& SegmentInfo::_internal_dml_position() const {
  const ::milvus::proto::msg::MsgPosition* p = _impl_.dml_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::msg::MsgPosition&>(
      ::milvus::proto::msg::_MsgPosition_default_instance_);
}
inline const ::milvus::proto::msg::MsgPosition& SegmentInfo::dml_position() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.dml_position)
  return _internal_dml_position();
}
inline void SegmentInfo::unsafe_arena_set_allocated_dml_position(
    ::milvus::proto::msg::MsgPosition* dml_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dml_position_);
  }
  _impl_.dml_position_ = dml_position;
  if (dml_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SegmentInfo.dml_position)
}
inline ::milvus::proto::msg::MsgPosition* SegmentInfo::release_dml_position() {
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.dml_position_;
  _impl_.dml_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* SegmentInfo::unsafe_arena_release_dml_position() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentInfo.dml_position)
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.dml_position_;
  _impl_.dml_position_ = nullptr;
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* SegmentInfo::_internal_mutable_dml_position() {
  
  if (_impl_.dml_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::msg::MsgPosition>(GetArenaForAllocation());
    _impl_.dml_position_ = p;
  }
  return _impl_.dml_position_;
}
inline ::milvus::proto::msg::MsgPosition* SegmentInfo::mutable_dml_position() {
  ::milvus::proto::msg::MsgPosition* _msg = _internal_mutable_dml_position();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentInfo.dml_position)
  return _msg;
}
inline void SegmentInfo::set_allocated_dml_position(::milvus::proto::msg::MsgPosition* dml_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dml_position_);
  }
  if (dml_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dml_position));
    if (message_arena != submessage_arena) {
      dml_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dml_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dml_position_ = dml_position;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentInfo.dml_position)
}

// repeated .milvus.proto.data.FieldBinlog binlogs = 11;
inline int SegmentInfo::_internal_binlogs_size() const {
  return _impl_.binlogs_.size();
}
inline int SegmentInfo::binlogs_size() const {
  return _internal_binlogs_size();
}
inline void SegmentInfo::clear_binlogs() {
  _impl_.binlogs_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* SegmentInfo::mutable_binlogs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentInfo.binlogs)
  return _impl_.binlogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
SegmentInfo::mutable_binlogs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SegmentInfo.binlogs)
  return &_impl_.binlogs_;
}
inline const ::milvus::proto::data::FieldBinlog& SegmentInfo::_internal_binlogs(int index) const {
  return _impl_.binlogs_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& SegmentInfo::binlogs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.binlogs)
  return _internal_binlogs(index);
}
inline ::milvus::proto::data::FieldBinlog* SegmentInfo::_internal_add_binlogs() {
  return _impl_.binlogs_.Add();
}
inline ::milvus::proto::data::FieldBinlog* SegmentInfo::add_binlogs() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_binlogs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.SegmentInfo.binlogs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
SegmentInfo::binlogs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SegmentInfo.binlogs)
  return _impl_.binlogs_;
}

// repeated .milvus.proto.data.FieldBinlog statslogs = 12;
inline int SegmentInfo::_internal_statslogs_size() const {
  return _impl_.statslogs_.size();
}
inline int SegmentInfo::statslogs_size() const {
  return _internal_statslogs_size();
}
inline void SegmentInfo::clear_statslogs() {
  _impl_.statslogs_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* SegmentInfo::mutable_statslogs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentInfo.statslogs)
  return _impl_.statslogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
SegmentInfo::mutable_statslogs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SegmentInfo.statslogs)
  return &_impl_.statslogs_;
}
inline const ::milvus::proto::data::FieldBinlog& SegmentInfo::_internal_statslogs(int index) const {
  return _impl_.statslogs_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& SegmentInfo::statslogs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.statslogs)
  return _internal_statslogs(index);
}
inline ::milvus::proto::data::FieldBinlog* SegmentInfo::_internal_add_statslogs() {
  return _impl_.statslogs_.Add();
}
inline ::milvus::proto::data::FieldBinlog* SegmentInfo::add_statslogs() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_statslogs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.SegmentInfo.statslogs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
SegmentInfo::statslogs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SegmentInfo.statslogs)
  return _impl_.statslogs_;
}

// repeated .milvus.proto.data.FieldBinlog deltalogs = 13;
inline int SegmentInfo::_internal_deltalogs_size() const {
  return _impl_.deltalogs_.size();
}
inline int SegmentInfo::deltalogs_size() const {
  return _internal_deltalogs_size();
}
inline void SegmentInfo::clear_deltalogs() {
  _impl_.deltalogs_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* SegmentInfo::mutable_deltalogs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentInfo.deltalogs)
  return _impl_.deltalogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
SegmentInfo::mutable_deltalogs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SegmentInfo.deltalogs)
  return &_impl_.deltalogs_;
}
inline const ::milvus::proto::data::FieldBinlog& SegmentInfo::_internal_deltalogs(int index) const {
  return _impl_.deltalogs_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& SegmentInfo::deltalogs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.deltalogs)
  return _internal_deltalogs(index);
}
inline ::milvus::proto::data::FieldBinlog* SegmentInfo::_internal_add_deltalogs() {
  return _impl_.deltalogs_.Add();
}
inline ::milvus::proto::data::FieldBinlog* SegmentInfo::add_deltalogs() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_deltalogs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.SegmentInfo.deltalogs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
SegmentInfo::deltalogs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SegmentInfo.deltalogs)
  return _impl_.deltalogs_;
}

// bool createdByCompaction = 14;
inline void SegmentInfo::clear_createdbycompaction() {
  _impl_.createdbycompaction_ = false;
}
inline bool SegmentInfo::_internal_createdbycompaction() const {
  return _impl_.createdbycompaction_;
}
inline bool SegmentInfo::createdbycompaction() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.createdByCompaction)
  return _internal_createdbycompaction();
}
inline void SegmentInfo::_internal_set_createdbycompaction(bool value) {
  
  _impl_.createdbycompaction_ = value;
}
inline void SegmentInfo::set_createdbycompaction(bool value) {
  _internal_set_createdbycompaction(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentInfo.createdByCompaction)
}

// repeated int64 compactionFrom = 15;
inline int SegmentInfo::_internal_compactionfrom_size() const {
  return _impl_.compactionfrom_.size();
}
inline int SegmentInfo::compactionfrom_size() const {
  return _internal_compactionfrom_size();
}
inline void SegmentInfo::clear_compactionfrom() {
  _impl_.compactionfrom_.Clear();
}
inline int64_t SegmentInfo::_internal_compactionfrom(int index) const {
  return _impl_.compactionfrom_.Get(index);
}
inline int64_t SegmentInfo::compactionfrom(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.compactionFrom)
  return _internal_compactionfrom(index);
}
inline void SegmentInfo::set_compactionfrom(int index, int64_t value) {
  _impl_.compactionfrom_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentInfo.compactionFrom)
}
inline void SegmentInfo::_internal_add_compactionfrom(int64_t value) {
  _impl_.compactionfrom_.Add(value);
}
inline void SegmentInfo::add_compactionfrom(int64_t value) {
  _internal_add_compactionfrom(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.SegmentInfo.compactionFrom)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SegmentInfo::_internal_compactionfrom() const {
  return _impl_.compactionfrom_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SegmentInfo::compactionfrom() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SegmentInfo.compactionFrom)
  return _internal_compactionfrom();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SegmentInfo::_internal_mutable_compactionfrom() {
  return &_impl_.compactionfrom_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SegmentInfo::mutable_compactionfrom() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SegmentInfo.compactionFrom)
  return _internal_mutable_compactionfrom();
}

// uint64 dropped_at = 16;
inline void SegmentInfo::clear_dropped_at() {
  _impl_.dropped_at_ = uint64_t{0u};
}
inline uint64_t SegmentInfo::_internal_dropped_at() const {
  return _impl_.dropped_at_;
}
inline uint64_t SegmentInfo::dropped_at() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.dropped_at)
  return _internal_dropped_at();
}
inline void SegmentInfo::_internal_set_dropped_at(uint64_t value) {
  
  _impl_.dropped_at_ = value;
}
inline void SegmentInfo::set_dropped_at(uint64_t value) {
  _internal_set_dropped_at(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentInfo.dropped_at)
}

// bool is_importing = 17;
inline void SegmentInfo::clear_is_importing() {
  _impl_.is_importing_ = false;
}
inline bool SegmentInfo::_internal_is_importing() const {
  return _impl_.is_importing_;
}
inline bool SegmentInfo::is_importing() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.is_importing)
  return _internal_is_importing();
}
inline void SegmentInfo::_internal_set_is_importing(bool value) {
  
  _impl_.is_importing_ = value;
}
inline void SegmentInfo::set_is_importing(bool value) {
  _internal_set_is_importing(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentInfo.is_importing)
}

// bool is_fake = 18;
inline void SegmentInfo::clear_is_fake() {
  _impl_.is_fake_ = false;
}
inline bool SegmentInfo::_internal_is_fake() const {
  return _impl_.is_fake_;
}
inline bool SegmentInfo::is_fake() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentInfo.is_fake)
  return _internal_is_fake();
}
inline void SegmentInfo::_internal_set_is_fake(bool value) {
  
  _impl_.is_fake_ = value;
}
inline void SegmentInfo::set_is_fake(bool value) {
  _internal_set_is_fake(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentInfo.is_fake)
}

// -------------------------------------------------------------------

// SegmentStartPosition

// .milvus.proto.msg.MsgPosition start_position = 1;
inline bool SegmentStartPosition::_internal_has_start_position() const {
  return this != internal_default_instance() && _impl_.start_position_ != nullptr;
}
inline bool SegmentStartPosition::has_start_position() const {
  return _internal_has_start_position();
}
inline const ::milvus::proto::msg::MsgPosition& SegmentStartPosition::_internal_start_position() const {
  const ::milvus::proto::msg::MsgPosition* p = _impl_.start_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::msg::MsgPosition&>(
      ::milvus::proto::msg::_MsgPosition_default_instance_);
}
inline const ::milvus::proto::msg::MsgPosition& SegmentStartPosition::start_position() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentStartPosition.start_position)
  return _internal_start_position();
}
inline void SegmentStartPosition::unsafe_arena_set_allocated_start_position(
    ::milvus::proto::msg::MsgPosition* start_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_position_);
  }
  _impl_.start_position_ = start_position;
  if (start_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SegmentStartPosition.start_position)
}
inline ::milvus::proto::msg::MsgPosition* SegmentStartPosition::release_start_position() {
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.start_position_;
  _impl_.start_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* SegmentStartPosition::unsafe_arena_release_start_position() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentStartPosition.start_position)
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.start_position_;
  _impl_.start_position_ = nullptr;
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* SegmentStartPosition::_internal_mutable_start_position() {
  
  if (_impl_.start_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::msg::MsgPosition>(GetArenaForAllocation());
    _impl_.start_position_ = p;
  }
  return _impl_.start_position_;
}
inline ::milvus::proto::msg::MsgPosition* SegmentStartPosition::mutable_start_position() {
  ::milvus::proto::msg::MsgPosition* _msg = _internal_mutable_start_position();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentStartPosition.start_position)
  return _msg;
}
inline void SegmentStartPosition::set_allocated_start_position(::milvus::proto::msg::MsgPosition* start_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_position_);
  }
  if (start_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_position));
    if (message_arena != submessage_arena) {
      start_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_position_ = start_position;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentStartPosition.start_position)
}

// int64 segmentID = 2;
inline void SegmentStartPosition::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t SegmentStartPosition::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t SegmentStartPosition::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentStartPosition.segmentID)
  return _internal_segmentid();
}
inline void SegmentStartPosition::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void SegmentStartPosition::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentStartPosition.segmentID)
}

// -------------------------------------------------------------------

// SaveBinlogPathsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool SaveBinlogPathsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SaveBinlogPathsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& SaveBinlogPathsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& SaveBinlogPathsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveBinlogPathsRequest.base)
  return _internal_base();
}
inline void SaveBinlogPathsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SaveBinlogPathsRequest.base)
}
inline ::milvus::proto::common::MsgBase* SaveBinlogPathsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* SaveBinlogPathsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SaveBinlogPathsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* SaveBinlogPathsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* SaveBinlogPathsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SaveBinlogPathsRequest.base)
  return _msg;
}
inline void SaveBinlogPathsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SaveBinlogPathsRequest.base)
}

// int64 segmentID = 2;
inline void SaveBinlogPathsRequest::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t SaveBinlogPathsRequest::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t SaveBinlogPathsRequest::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveBinlogPathsRequest.segmentID)
  return _internal_segmentid();
}
inline void SaveBinlogPathsRequest::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void SaveBinlogPathsRequest::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SaveBinlogPathsRequest.segmentID)
}

// int64 collectionID = 3;
inline void SaveBinlogPathsRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t SaveBinlogPathsRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t SaveBinlogPathsRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveBinlogPathsRequest.collectionID)
  return _internal_collectionid();
}
inline void SaveBinlogPathsRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void SaveBinlogPathsRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SaveBinlogPathsRequest.collectionID)
}

// repeated .milvus.proto.data.FieldBinlog field2BinlogPaths = 4;
inline int SaveBinlogPathsRequest::_internal_field2binlogpaths_size() const {
  return _impl_.field2binlogpaths_.size();
}
inline int SaveBinlogPathsRequest::field2binlogpaths_size() const {
  return _internal_field2binlogpaths_size();
}
inline void SaveBinlogPathsRequest::clear_field2binlogpaths() {
  _impl_.field2binlogpaths_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* SaveBinlogPathsRequest::mutable_field2binlogpaths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SaveBinlogPathsRequest.field2BinlogPaths)
  return _impl_.field2binlogpaths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
SaveBinlogPathsRequest::mutable_field2binlogpaths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SaveBinlogPathsRequest.field2BinlogPaths)
  return &_impl_.field2binlogpaths_;
}
inline const ::milvus::proto::data::FieldBinlog& SaveBinlogPathsRequest::_internal_field2binlogpaths(int index) const {
  return _impl_.field2binlogpaths_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& SaveBinlogPathsRequest::field2binlogpaths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveBinlogPathsRequest.field2BinlogPaths)
  return _internal_field2binlogpaths(index);
}
inline ::milvus::proto::data::FieldBinlog* SaveBinlogPathsRequest::_internal_add_field2binlogpaths() {
  return _impl_.field2binlogpaths_.Add();
}
inline ::milvus::proto::data::FieldBinlog* SaveBinlogPathsRequest::add_field2binlogpaths() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_field2binlogpaths();
  // @@protoc_insertion_point(field_add:milvus.proto.data.SaveBinlogPathsRequest.field2BinlogPaths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
SaveBinlogPathsRequest::field2binlogpaths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SaveBinlogPathsRequest.field2BinlogPaths)
  return _impl_.field2binlogpaths_;
}

// repeated .milvus.proto.data.CheckPoint checkPoints = 5;
inline int SaveBinlogPathsRequest::_internal_checkpoints_size() const {
  return _impl_.checkpoints_.size();
}
inline int SaveBinlogPathsRequest::checkpoints_size() const {
  return _internal_checkpoints_size();
}
inline void SaveBinlogPathsRequest::clear_checkpoints() {
  _impl_.checkpoints_.Clear();
}
inline ::milvus::proto::data::CheckPoint* SaveBinlogPathsRequest::mutable_checkpoints(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SaveBinlogPathsRequest.checkPoints)
  return _impl_.checkpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CheckPoint >*
SaveBinlogPathsRequest::mutable_checkpoints() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SaveBinlogPathsRequest.checkPoints)
  return &_impl_.checkpoints_;
}
inline const ::milvus::proto::data::CheckPoint& SaveBinlogPathsRequest::_internal_checkpoints(int index) const {
  return _impl_.checkpoints_.Get(index);
}
inline const ::milvus::proto::data::CheckPoint& SaveBinlogPathsRequest::checkpoints(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveBinlogPathsRequest.checkPoints)
  return _internal_checkpoints(index);
}
inline ::milvus::proto::data::CheckPoint* SaveBinlogPathsRequest::_internal_add_checkpoints() {
  return _impl_.checkpoints_.Add();
}
inline ::milvus::proto::data::CheckPoint* SaveBinlogPathsRequest::add_checkpoints() {
  ::milvus::proto::data::CheckPoint* _add = _internal_add_checkpoints();
  // @@protoc_insertion_point(field_add:milvus.proto.data.SaveBinlogPathsRequest.checkPoints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CheckPoint >&
SaveBinlogPathsRequest::checkpoints() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SaveBinlogPathsRequest.checkPoints)
  return _impl_.checkpoints_;
}

// repeated .milvus.proto.data.SegmentStartPosition start_positions = 6;
inline int SaveBinlogPathsRequest::_internal_start_positions_size() const {
  return _impl_.start_positions_.size();
}
inline int SaveBinlogPathsRequest::start_positions_size() const {
  return _internal_start_positions_size();
}
inline void SaveBinlogPathsRequest::clear_start_positions() {
  _impl_.start_positions_.Clear();
}
inline ::milvus::proto::data::SegmentStartPosition* SaveBinlogPathsRequest::mutable_start_positions(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SaveBinlogPathsRequest.start_positions)
  return _impl_.start_positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentStartPosition >*
SaveBinlogPathsRequest::mutable_start_positions() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SaveBinlogPathsRequest.start_positions)
  return &_impl_.start_positions_;
}
inline const ::milvus::proto::data::SegmentStartPosition& SaveBinlogPathsRequest::_internal_start_positions(int index) const {
  return _impl_.start_positions_.Get(index);
}
inline const ::milvus::proto::data::SegmentStartPosition& SaveBinlogPathsRequest::start_positions(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveBinlogPathsRequest.start_positions)
  return _internal_start_positions(index);
}
inline ::milvus::proto::data::SegmentStartPosition* SaveBinlogPathsRequest::_internal_add_start_positions() {
  return _impl_.start_positions_.Add();
}
inline ::milvus::proto::data::SegmentStartPosition* SaveBinlogPathsRequest::add_start_positions() {
  ::milvus::proto::data::SegmentStartPosition* _add = _internal_add_start_positions();
  // @@protoc_insertion_point(field_add:milvus.proto.data.SaveBinlogPathsRequest.start_positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentStartPosition >&
SaveBinlogPathsRequest::start_positions() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SaveBinlogPathsRequest.start_positions)
  return _impl_.start_positions_;
}

// bool flushed = 7;
inline void SaveBinlogPathsRequest::clear_flushed() {
  _impl_.flushed_ = false;
}
inline bool SaveBinlogPathsRequest::_internal_flushed() const {
  return _impl_.flushed_;
}
inline bool SaveBinlogPathsRequest::flushed() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveBinlogPathsRequest.flushed)
  return _internal_flushed();
}
inline void SaveBinlogPathsRequest::_internal_set_flushed(bool value) {
  
  _impl_.flushed_ = value;
}
inline void SaveBinlogPathsRequest::set_flushed(bool value) {
  _internal_set_flushed(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SaveBinlogPathsRequest.flushed)
}

// repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 8;
inline int SaveBinlogPathsRequest::_internal_field2statslogpaths_size() const {
  return _impl_.field2statslogpaths_.size();
}
inline int SaveBinlogPathsRequest::field2statslogpaths_size() const {
  return _internal_field2statslogpaths_size();
}
inline void SaveBinlogPathsRequest::clear_field2statslogpaths() {
  _impl_.field2statslogpaths_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* SaveBinlogPathsRequest::mutable_field2statslogpaths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SaveBinlogPathsRequest.field2StatslogPaths)
  return _impl_.field2statslogpaths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
SaveBinlogPathsRequest::mutable_field2statslogpaths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SaveBinlogPathsRequest.field2StatslogPaths)
  return &_impl_.field2statslogpaths_;
}
inline const ::milvus::proto::data::FieldBinlog& SaveBinlogPathsRequest::_internal_field2statslogpaths(int index) const {
  return _impl_.field2statslogpaths_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& SaveBinlogPathsRequest::field2statslogpaths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveBinlogPathsRequest.field2StatslogPaths)
  return _internal_field2statslogpaths(index);
}
inline ::milvus::proto::data::FieldBinlog* SaveBinlogPathsRequest::_internal_add_field2statslogpaths() {
  return _impl_.field2statslogpaths_.Add();
}
inline ::milvus::proto::data::FieldBinlog* SaveBinlogPathsRequest::add_field2statslogpaths() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_field2statslogpaths();
  // @@protoc_insertion_point(field_add:milvus.proto.data.SaveBinlogPathsRequest.field2StatslogPaths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
SaveBinlogPathsRequest::field2statslogpaths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SaveBinlogPathsRequest.field2StatslogPaths)
  return _impl_.field2statslogpaths_;
}

// repeated .milvus.proto.data.FieldBinlog deltalogs = 9;
inline int SaveBinlogPathsRequest::_internal_deltalogs_size() const {
  return _impl_.deltalogs_.size();
}
inline int SaveBinlogPathsRequest::deltalogs_size() const {
  return _internal_deltalogs_size();
}
inline void SaveBinlogPathsRequest::clear_deltalogs() {
  _impl_.deltalogs_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* SaveBinlogPathsRequest::mutable_deltalogs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SaveBinlogPathsRequest.deltalogs)
  return _impl_.deltalogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
SaveBinlogPathsRequest::mutable_deltalogs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SaveBinlogPathsRequest.deltalogs)
  return &_impl_.deltalogs_;
}
inline const ::milvus::proto::data::FieldBinlog& SaveBinlogPathsRequest::_internal_deltalogs(int index) const {
  return _impl_.deltalogs_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& SaveBinlogPathsRequest::deltalogs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveBinlogPathsRequest.deltalogs)
  return _internal_deltalogs(index);
}
inline ::milvus::proto::data::FieldBinlog* SaveBinlogPathsRequest::_internal_add_deltalogs() {
  return _impl_.deltalogs_.Add();
}
inline ::milvus::proto::data::FieldBinlog* SaveBinlogPathsRequest::add_deltalogs() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_deltalogs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.SaveBinlogPathsRequest.deltalogs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
SaveBinlogPathsRequest::deltalogs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SaveBinlogPathsRequest.deltalogs)
  return _impl_.deltalogs_;
}

// bool dropped = 10;
inline void SaveBinlogPathsRequest::clear_dropped() {
  _impl_.dropped_ = false;
}
inline bool SaveBinlogPathsRequest::_internal_dropped() const {
  return _impl_.dropped_;
}
inline bool SaveBinlogPathsRequest::dropped() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveBinlogPathsRequest.dropped)
  return _internal_dropped();
}
inline void SaveBinlogPathsRequest::_internal_set_dropped(bool value) {
  
  _impl_.dropped_ = value;
}
inline void SaveBinlogPathsRequest::set_dropped(bool value) {
  _internal_set_dropped(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SaveBinlogPathsRequest.dropped)
}

// bool importing = 11;
inline void SaveBinlogPathsRequest::clear_importing() {
  _impl_.importing_ = false;
}
inline bool SaveBinlogPathsRequest::_internal_importing() const {
  return _impl_.importing_;
}
inline bool SaveBinlogPathsRequest::importing() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveBinlogPathsRequest.importing)
  return _internal_importing();
}
inline void SaveBinlogPathsRequest::_internal_set_importing(bool value) {
  
  _impl_.importing_ = value;
}
inline void SaveBinlogPathsRequest::set_importing(bool value) {
  _internal_set_importing(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SaveBinlogPathsRequest.importing)
}

// string channel = 12;
inline void SaveBinlogPathsRequest::clear_channel() {
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& SaveBinlogPathsRequest::channel() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveBinlogPathsRequest.channel)
  return _internal_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveBinlogPathsRequest::set_channel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.SaveBinlogPathsRequest.channel)
}
inline std::string* SaveBinlogPathsRequest::mutable_channel() {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SaveBinlogPathsRequest.channel)
  return _s;
}
inline const std::string& SaveBinlogPathsRequest::_internal_channel() const {
  return _impl_.channel_.Get();
}
inline void SaveBinlogPathsRequest::_internal_set_channel(const std::string& value) {
  
  _impl_.channel_.Set(value, GetArenaForAllocation());
}
inline std::string* SaveBinlogPathsRequest::_internal_mutable_channel() {
  
  return _impl_.channel_.Mutable(GetArenaForAllocation());
}
inline std::string* SaveBinlogPathsRequest::release_channel() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SaveBinlogPathsRequest.channel)
  return _impl_.channel_.Release();
}
inline void SaveBinlogPathsRequest::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  _impl_.channel_.SetAllocated(channel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_.IsDefault()) {
    _impl_.channel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SaveBinlogPathsRequest.channel)
}

// -------------------------------------------------------------------

// CheckPoint

// int64 segmentID = 1;
inline void CheckPoint::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t CheckPoint::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t CheckPoint::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CheckPoint.segmentID)
  return _internal_segmentid();
}
inline void CheckPoint::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void CheckPoint::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CheckPoint.segmentID)
}

// .milvus.proto.msg.MsgPosition position = 2;
inline bool CheckPoint::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool CheckPoint::has_position() const {
  return _internal_has_position();
}
inline const ::milvus::proto::msg::MsgPosition& CheckPoint::_internal_position() const {
  const ::milvus::proto::msg::MsgPosition* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::msg::MsgPosition&>(
      ::milvus::proto::msg::_MsgPosition_default_instance_);
}
inline const ::milvus::proto::msg::MsgPosition& CheckPoint::position() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CheckPoint.position)
  return _internal_position();
}
inline void CheckPoint::unsafe_arena_set_allocated_position(
    ::milvus::proto::msg::MsgPosition* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.CheckPoint.position)
}
inline ::milvus::proto::msg::MsgPosition* CheckPoint::release_position() {
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* CheckPoint::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.CheckPoint.position)
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* CheckPoint::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::msg::MsgPosition>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::milvus::proto::msg::MsgPosition* CheckPoint::mutable_position() {
  ::milvus::proto::msg::MsgPosition* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CheckPoint.position)
  return _msg;
}
inline void CheckPoint::set_allocated_position(::milvus::proto::msg::MsgPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.CheckPoint.position)
}

// int64 num_of_rows = 3;
inline void CheckPoint::clear_num_of_rows() {
  _impl_.num_of_rows_ = int64_t{0};
}
inline int64_t CheckPoint::_internal_num_of_rows() const {
  return _impl_.num_of_rows_;
}
inline int64_t CheckPoint::num_of_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CheckPoint.num_of_rows)
  return _internal_num_of_rows();
}
inline void CheckPoint::_internal_set_num_of_rows(int64_t value) {
  
  _impl_.num_of_rows_ = value;
}
inline void CheckPoint::set_num_of_rows(int64_t value) {
  _internal_set_num_of_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CheckPoint.num_of_rows)
}

// -------------------------------------------------------------------

// DeltaLogInfo

// uint64 record_entries = 1;
inline void DeltaLogInfo::clear_record_entries() {
  _impl_.record_entries_ = uint64_t{0u};
}
inline uint64_t DeltaLogInfo::_internal_record_entries() const {
  return _impl_.record_entries_;
}
inline uint64_t DeltaLogInfo::record_entries() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DeltaLogInfo.record_entries)
  return _internal_record_entries();
}
inline void DeltaLogInfo::_internal_set_record_entries(uint64_t value) {
  
  _impl_.record_entries_ = value;
}
inline void DeltaLogInfo::set_record_entries(uint64_t value) {
  _internal_set_record_entries(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.DeltaLogInfo.record_entries)
}

// uint64 timestamp_from = 2;
inline void DeltaLogInfo::clear_timestamp_from() {
  _impl_.timestamp_from_ = uint64_t{0u};
}
inline uint64_t DeltaLogInfo::_internal_timestamp_from() const {
  return _impl_.timestamp_from_;
}
inline uint64_t DeltaLogInfo::timestamp_from() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DeltaLogInfo.timestamp_from)
  return _internal_timestamp_from();
}
inline void DeltaLogInfo::_internal_set_timestamp_from(uint64_t value) {
  
  _impl_.timestamp_from_ = value;
}
inline void DeltaLogInfo::set_timestamp_from(uint64_t value) {
  _internal_set_timestamp_from(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.DeltaLogInfo.timestamp_from)
}

// uint64 timestamp_to = 3;
inline void DeltaLogInfo::clear_timestamp_to() {
  _impl_.timestamp_to_ = uint64_t{0u};
}
inline uint64_t DeltaLogInfo::_internal_timestamp_to() const {
  return _impl_.timestamp_to_;
}
inline uint64_t DeltaLogInfo::timestamp_to() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DeltaLogInfo.timestamp_to)
  return _internal_timestamp_to();
}
inline void DeltaLogInfo::_internal_set_timestamp_to(uint64_t value) {
  
  _impl_.timestamp_to_ = value;
}
inline void DeltaLogInfo::set_timestamp_to(uint64_t value) {
  _internal_set_timestamp_to(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.DeltaLogInfo.timestamp_to)
}

// string delta_log_path = 4;
inline void DeltaLogInfo::clear_delta_log_path() {
  _impl_.delta_log_path_.ClearToEmpty();
}
inline const std::string& DeltaLogInfo::delta_log_path() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DeltaLogInfo.delta_log_path)
  return _internal_delta_log_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeltaLogInfo::set_delta_log_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.delta_log_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.DeltaLogInfo.delta_log_path)
}
inline std::string* DeltaLogInfo::mutable_delta_log_path() {
  std::string* _s = _internal_mutable_delta_log_path();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.DeltaLogInfo.delta_log_path)
  return _s;
}
inline const std::string& DeltaLogInfo::_internal_delta_log_path() const {
  return _impl_.delta_log_path_.Get();
}
inline void DeltaLogInfo::_internal_set_delta_log_path(const std::string& value) {
  
  _impl_.delta_log_path_.Set(value, GetArenaForAllocation());
}
inline std::string* DeltaLogInfo::_internal_mutable_delta_log_path() {
  
  return _impl_.delta_log_path_.Mutable(GetArenaForAllocation());
}
inline std::string* DeltaLogInfo::release_delta_log_path() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.DeltaLogInfo.delta_log_path)
  return _impl_.delta_log_path_.Release();
}
inline void DeltaLogInfo::set_allocated_delta_log_path(std::string* delta_log_path) {
  if (delta_log_path != nullptr) {
    
  } else {
    
  }
  _impl_.delta_log_path_.SetAllocated(delta_log_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.delta_log_path_.IsDefault()) {
    _impl_.delta_log_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.DeltaLogInfo.delta_log_path)
}

// int64 delta_log_size = 5;
inline void DeltaLogInfo::clear_delta_log_size() {
  _impl_.delta_log_size_ = int64_t{0};
}
inline int64_t DeltaLogInfo::_internal_delta_log_size() const {
  return _impl_.delta_log_size_;
}
inline int64_t DeltaLogInfo::delta_log_size() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DeltaLogInfo.delta_log_size)
  return _internal_delta_log_size();
}
inline void DeltaLogInfo::_internal_set_delta_log_size(int64_t value) {
  
  _impl_.delta_log_size_ = value;
}
inline void DeltaLogInfo::set_delta_log_size(int64_t value) {
  _internal_set_delta_log_size(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.DeltaLogInfo.delta_log_size)
}

// -------------------------------------------------------------------

// ChannelStatus

// string name = 1;
inline void ChannelStatus::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ChannelStatus::name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ChannelStatus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelStatus::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.ChannelStatus.name)
}
inline std::string* ChannelStatus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ChannelStatus.name)
  return _s;
}
inline const std::string& ChannelStatus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ChannelStatus::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChannelStatus::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChannelStatus::release_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ChannelStatus.name)
  return _impl_.name_.Release();
}
inline void ChannelStatus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ChannelStatus.name)
}

// .milvus.proto.data.ChannelWatchState state = 2;
inline void ChannelStatus::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::data::ChannelWatchState ChannelStatus::_internal_state() const {
  return static_cast< ::milvus::proto::data::ChannelWatchState >(_impl_.state_);
}
inline ::milvus::proto::data::ChannelWatchState ChannelStatus::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ChannelStatus.state)
  return _internal_state();
}
inline void ChannelStatus::_internal_set_state(::milvus::proto::data::ChannelWatchState value) {
  
  _impl_.state_ = value;
}
inline void ChannelStatus::set_state(::milvus::proto::data::ChannelWatchState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ChannelStatus.state)
}

// int64 collectionID = 3;
inline void ChannelStatus::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t ChannelStatus::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t ChannelStatus::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ChannelStatus.collectionID)
  return _internal_collectionid();
}
inline void ChannelStatus::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void ChannelStatus::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ChannelStatus.collectionID)
}

// -------------------------------------------------------------------

// DataNodeInfo

// string address = 1;
inline void DataNodeInfo::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& DataNodeInfo::address() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DataNodeInfo.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataNodeInfo::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.DataNodeInfo.address)
}
inline std::string* DataNodeInfo::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.DataNodeInfo.address)
  return _s;
}
inline const std::string& DataNodeInfo::_internal_address() const {
  return _impl_.address_.Get();
}
inline void DataNodeInfo::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* DataNodeInfo::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* DataNodeInfo::release_address() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.DataNodeInfo.address)
  return _impl_.address_.Release();
}
inline void DataNodeInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.DataNodeInfo.address)
}

// int64 version = 2;
inline void DataNodeInfo::clear_version() {
  _impl_.version_ = int64_t{0};
}
inline int64_t DataNodeInfo::_internal_version() const {
  return _impl_.version_;
}
inline int64_t DataNodeInfo::version() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DataNodeInfo.version)
  return _internal_version();
}
inline void DataNodeInfo::_internal_set_version(int64_t value) {
  
  _impl_.version_ = value;
}
inline void DataNodeInfo::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.DataNodeInfo.version)
}

// repeated .milvus.proto.data.ChannelStatus channels = 3;
inline int DataNodeInfo::_internal_channels_size() const {
  return _impl_.channels_.size();
}
inline int DataNodeInfo::channels_size() const {
  return _internal_channels_size();
}
inline void DataNodeInfo::clear_channels() {
  _impl_.channels_.Clear();
}
inline ::milvus::proto::data::ChannelStatus* DataNodeInfo::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.DataNodeInfo.channels)
  return _impl_.channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::ChannelStatus >*
DataNodeInfo::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.DataNodeInfo.channels)
  return &_impl_.channels_;
}
inline const ::milvus::proto::data::ChannelStatus& DataNodeInfo::_internal_channels(int index) const {
  return _impl_.channels_.Get(index);
}
inline const ::milvus::proto::data::ChannelStatus& DataNodeInfo::channels(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DataNodeInfo.channels)
  return _internal_channels(index);
}
inline ::milvus::proto::data::ChannelStatus* DataNodeInfo::_internal_add_channels() {
  return _impl_.channels_.Add();
}
inline ::milvus::proto::data::ChannelStatus* DataNodeInfo::add_channels() {
  ::milvus::proto::data::ChannelStatus* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:milvus.proto.data.DataNodeInfo.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::ChannelStatus >&
DataNodeInfo::channels() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.DataNodeInfo.channels)
  return _impl_.channels_;
}

// -------------------------------------------------------------------

// SegmentBinlogs

// int64 segmentID = 1;
inline void SegmentBinlogs::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t SegmentBinlogs::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t SegmentBinlogs::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentBinlogs.segmentID)
  return _internal_segmentid();
}
inline void SegmentBinlogs::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void SegmentBinlogs::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentBinlogs.segmentID)
}

// repeated .milvus.proto.data.FieldBinlog fieldBinlogs = 2;
inline int SegmentBinlogs::_internal_fieldbinlogs_size() const {
  return _impl_.fieldbinlogs_.size();
}
inline int SegmentBinlogs::fieldbinlogs_size() const {
  return _internal_fieldbinlogs_size();
}
inline void SegmentBinlogs::clear_fieldbinlogs() {
  _impl_.fieldbinlogs_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* SegmentBinlogs::mutable_fieldbinlogs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentBinlogs.fieldBinlogs)
  return _impl_.fieldbinlogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
SegmentBinlogs::mutable_fieldbinlogs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SegmentBinlogs.fieldBinlogs)
  return &_impl_.fieldbinlogs_;
}
inline const ::milvus::proto::data::FieldBinlog& SegmentBinlogs::_internal_fieldbinlogs(int index) const {
  return _impl_.fieldbinlogs_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& SegmentBinlogs::fieldbinlogs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentBinlogs.fieldBinlogs)
  return _internal_fieldbinlogs(index);
}
inline ::milvus::proto::data::FieldBinlog* SegmentBinlogs::_internal_add_fieldbinlogs() {
  return _impl_.fieldbinlogs_.Add();
}
inline ::milvus::proto::data::FieldBinlog* SegmentBinlogs::add_fieldbinlogs() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_fieldbinlogs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.SegmentBinlogs.fieldBinlogs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
SegmentBinlogs::fieldbinlogs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SegmentBinlogs.fieldBinlogs)
  return _impl_.fieldbinlogs_;
}

// int64 num_of_rows = 3;
inline void SegmentBinlogs::clear_num_of_rows() {
  _impl_.num_of_rows_ = int64_t{0};
}
inline int64_t SegmentBinlogs::_internal_num_of_rows() const {
  return _impl_.num_of_rows_;
}
inline int64_t SegmentBinlogs::num_of_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentBinlogs.num_of_rows)
  return _internal_num_of_rows();
}
inline void SegmentBinlogs::_internal_set_num_of_rows(int64_t value) {
  
  _impl_.num_of_rows_ = value;
}
inline void SegmentBinlogs::set_num_of_rows(int64_t value) {
  _internal_set_num_of_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentBinlogs.num_of_rows)
}

// repeated .milvus.proto.data.FieldBinlog statslogs = 4;
inline int SegmentBinlogs::_internal_statslogs_size() const {
  return _impl_.statslogs_.size();
}
inline int SegmentBinlogs::statslogs_size() const {
  return _internal_statslogs_size();
}
inline void SegmentBinlogs::clear_statslogs() {
  _impl_.statslogs_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* SegmentBinlogs::mutable_statslogs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentBinlogs.statslogs)
  return _impl_.statslogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
SegmentBinlogs::mutable_statslogs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SegmentBinlogs.statslogs)
  return &_impl_.statslogs_;
}
inline const ::milvus::proto::data::FieldBinlog& SegmentBinlogs::_internal_statslogs(int index) const {
  return _impl_.statslogs_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& SegmentBinlogs::statslogs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentBinlogs.statslogs)
  return _internal_statslogs(index);
}
inline ::milvus::proto::data::FieldBinlog* SegmentBinlogs::_internal_add_statslogs() {
  return _impl_.statslogs_.Add();
}
inline ::milvus::proto::data::FieldBinlog* SegmentBinlogs::add_statslogs() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_statslogs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.SegmentBinlogs.statslogs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
SegmentBinlogs::statslogs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SegmentBinlogs.statslogs)
  return _impl_.statslogs_;
}

// repeated .milvus.proto.data.FieldBinlog deltalogs = 5;
inline int SegmentBinlogs::_internal_deltalogs_size() const {
  return _impl_.deltalogs_.size();
}
inline int SegmentBinlogs::deltalogs_size() const {
  return _internal_deltalogs_size();
}
inline void SegmentBinlogs::clear_deltalogs() {
  _impl_.deltalogs_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* SegmentBinlogs::mutable_deltalogs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentBinlogs.deltalogs)
  return _impl_.deltalogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
SegmentBinlogs::mutable_deltalogs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SegmentBinlogs.deltalogs)
  return &_impl_.deltalogs_;
}
inline const ::milvus::proto::data::FieldBinlog& SegmentBinlogs::_internal_deltalogs(int index) const {
  return _impl_.deltalogs_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& SegmentBinlogs::deltalogs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentBinlogs.deltalogs)
  return _internal_deltalogs(index);
}
inline ::milvus::proto::data::FieldBinlog* SegmentBinlogs::_internal_add_deltalogs() {
  return _impl_.deltalogs_.Add();
}
inline ::milvus::proto::data::FieldBinlog* SegmentBinlogs::add_deltalogs() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_deltalogs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.SegmentBinlogs.deltalogs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
SegmentBinlogs::deltalogs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SegmentBinlogs.deltalogs)
  return _impl_.deltalogs_;
}

// string insert_channel = 6;
inline void SegmentBinlogs::clear_insert_channel() {
  _impl_.insert_channel_.ClearToEmpty();
}
inline const std::string& SegmentBinlogs::insert_channel() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentBinlogs.insert_channel)
  return _internal_insert_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegmentBinlogs::set_insert_channel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.insert_channel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentBinlogs.insert_channel)
}
inline std::string* SegmentBinlogs::mutable_insert_channel() {
  std::string* _s = _internal_mutable_insert_channel();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentBinlogs.insert_channel)
  return _s;
}
inline const std::string& SegmentBinlogs::_internal_insert_channel() const {
  return _impl_.insert_channel_.Get();
}
inline void SegmentBinlogs::_internal_set_insert_channel(const std::string& value) {
  
  _impl_.insert_channel_.Set(value, GetArenaForAllocation());
}
inline std::string* SegmentBinlogs::_internal_mutable_insert_channel() {
  
  return _impl_.insert_channel_.Mutable(GetArenaForAllocation());
}
inline std::string* SegmentBinlogs::release_insert_channel() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentBinlogs.insert_channel)
  return _impl_.insert_channel_.Release();
}
inline void SegmentBinlogs::set_allocated_insert_channel(std::string* insert_channel) {
  if (insert_channel != nullptr) {
    
  } else {
    
  }
  _impl_.insert_channel_.SetAllocated(insert_channel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.insert_channel_.IsDefault()) {
    _impl_.insert_channel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentBinlogs.insert_channel)
}

// -------------------------------------------------------------------

// FieldBinlog

// int64 fieldID = 1;
inline void FieldBinlog::clear_fieldid() {
  _impl_.fieldid_ = int64_t{0};
}
inline int64_t FieldBinlog::_internal_fieldid() const {
  return _impl_.fieldid_;
}
inline int64_t FieldBinlog::fieldid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FieldBinlog.fieldID)
  return _internal_fieldid();
}
inline void FieldBinlog::_internal_set_fieldid(int64_t value) {
  
  _impl_.fieldid_ = value;
}
inline void FieldBinlog::set_fieldid(int64_t value) {
  _internal_set_fieldid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.FieldBinlog.fieldID)
}

// repeated .milvus.proto.data.Binlog binlogs = 2;
inline int FieldBinlog::_internal_binlogs_size() const {
  return _impl_.binlogs_.size();
}
inline int FieldBinlog::binlogs_size() const {
  return _internal_binlogs_size();
}
inline void FieldBinlog::clear_binlogs() {
  _impl_.binlogs_.Clear();
}
inline ::milvus::proto::data::Binlog* FieldBinlog::mutable_binlogs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.FieldBinlog.binlogs)
  return _impl_.binlogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::Binlog >*
FieldBinlog::mutable_binlogs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.FieldBinlog.binlogs)
  return &_impl_.binlogs_;
}
inline const ::milvus::proto::data::Binlog& FieldBinlog::_internal_binlogs(int index) const {
  return _impl_.binlogs_.Get(index);
}
inline const ::milvus::proto::data::Binlog& FieldBinlog::binlogs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.FieldBinlog.binlogs)
  return _internal_binlogs(index);
}
inline ::milvus::proto::data::Binlog* FieldBinlog::_internal_add_binlogs() {
  return _impl_.binlogs_.Add();
}
inline ::milvus::proto::data::Binlog* FieldBinlog::add_binlogs() {
  ::milvus::proto::data::Binlog* _add = _internal_add_binlogs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.FieldBinlog.binlogs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::Binlog >&
FieldBinlog::binlogs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.FieldBinlog.binlogs)
  return _impl_.binlogs_;
}

// -------------------------------------------------------------------

// Binlog

// int64 entries_num = 1;
inline void Binlog::clear_entries_num() {
  _impl_.entries_num_ = int64_t{0};
}
inline int64_t Binlog::_internal_entries_num() const {
  return _impl_.entries_num_;
}
inline int64_t Binlog::entries_num() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.Binlog.entries_num)
  return _internal_entries_num();
}
inline void Binlog::_internal_set_entries_num(int64_t value) {
  
  _impl_.entries_num_ = value;
}
inline void Binlog::set_entries_num(int64_t value) {
  _internal_set_entries_num(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.Binlog.entries_num)
}

// uint64 timestamp_from = 2;
inline void Binlog::clear_timestamp_from() {
  _impl_.timestamp_from_ = uint64_t{0u};
}
inline uint64_t Binlog::_internal_timestamp_from() const {
  return _impl_.timestamp_from_;
}
inline uint64_t Binlog::timestamp_from() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.Binlog.timestamp_from)
  return _internal_timestamp_from();
}
inline void Binlog::_internal_set_timestamp_from(uint64_t value) {
  
  _impl_.timestamp_from_ = value;
}
inline void Binlog::set_timestamp_from(uint64_t value) {
  _internal_set_timestamp_from(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.Binlog.timestamp_from)
}

// uint64 timestamp_to = 3;
inline void Binlog::clear_timestamp_to() {
  _impl_.timestamp_to_ = uint64_t{0u};
}
inline uint64_t Binlog::_internal_timestamp_to() const {
  return _impl_.timestamp_to_;
}
inline uint64_t Binlog::timestamp_to() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.Binlog.timestamp_to)
  return _internal_timestamp_to();
}
inline void Binlog::_internal_set_timestamp_to(uint64_t value) {
  
  _impl_.timestamp_to_ = value;
}
inline void Binlog::set_timestamp_to(uint64_t value) {
  _internal_set_timestamp_to(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.Binlog.timestamp_to)
}

// string log_path = 4;
inline void Binlog::clear_log_path() {
  _impl_.log_path_.ClearToEmpty();
}
inline const std::string& Binlog::log_path() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.Binlog.log_path)
  return _internal_log_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Binlog::set_log_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.log_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.Binlog.log_path)
}
inline std::string* Binlog::mutable_log_path() {
  std::string* _s = _internal_mutable_log_path();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.Binlog.log_path)
  return _s;
}
inline const std::string& Binlog::_internal_log_path() const {
  return _impl_.log_path_.Get();
}
inline void Binlog::_internal_set_log_path(const std::string& value) {
  
  _impl_.log_path_.Set(value, GetArenaForAllocation());
}
inline std::string* Binlog::_internal_mutable_log_path() {
  
  return _impl_.log_path_.Mutable(GetArenaForAllocation());
}
inline std::string* Binlog::release_log_path() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.Binlog.log_path)
  return _impl_.log_path_.Release();
}
inline void Binlog::set_allocated_log_path(std::string* log_path) {
  if (log_path != nullptr) {
    
  } else {
    
  }
  _impl_.log_path_.SetAllocated(log_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.log_path_.IsDefault()) {
    _impl_.log_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.Binlog.log_path)
}

// int64 log_size = 5;
inline void Binlog::clear_log_size() {
  _impl_.log_size_ = int64_t{0};
}
inline int64_t Binlog::_internal_log_size() const {
  return _impl_.log_size_;
}
inline int64_t Binlog::log_size() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.Binlog.log_size)
  return _internal_log_size();
}
inline void Binlog::_internal_set_log_size(int64_t value) {
  
  _impl_.log_size_ = value;
}
inline void Binlog::set_log_size(int64_t value) {
  _internal_set_log_size(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.Binlog.log_size)
}

// int64 logID = 6;
inline void Binlog::clear_logid() {
  _impl_.logid_ = int64_t{0};
}
inline int64_t Binlog::_internal_logid() const {
  return _impl_.logid_;
}
inline int64_t Binlog::logid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.Binlog.logID)
  return _internal_logid();
}
inline void Binlog::_internal_set_logid(int64_t value) {
  
  _impl_.logid_ = value;
}
inline void Binlog::set_logid(int64_t value) {
  _internal_set_logid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.Binlog.logID)
}

// -------------------------------------------------------------------

// GetRecoveryInfoResponse

// .milvus.proto.common.Status status = 1;
inline bool GetRecoveryInfoResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetRecoveryInfoResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetRecoveryInfoResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetRecoveryInfoResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetRecoveryInfoResponse.status)
  return _internal_status();
}
inline void GetRecoveryInfoResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetRecoveryInfoResponse.status)
}
inline ::milvus::proto::common::Status* GetRecoveryInfoResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetRecoveryInfoResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetRecoveryInfoResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetRecoveryInfoResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetRecoveryInfoResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetRecoveryInfoResponse.status)
  return _msg;
}
inline void GetRecoveryInfoResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetRecoveryInfoResponse.status)
}

// repeated .milvus.proto.data.VchannelInfo channels = 2;
inline int GetRecoveryInfoResponse::_internal_channels_size() const {
  return _impl_.channels_.size();
}
inline int GetRecoveryInfoResponse::channels_size() const {
  return _internal_channels_size();
}
inline void GetRecoveryInfoResponse::clear_channels() {
  _impl_.channels_.Clear();
}
inline ::milvus::proto::data::VchannelInfo* GetRecoveryInfoResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetRecoveryInfoResponse.channels)
  return _impl_.channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo >*
GetRecoveryInfoResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetRecoveryInfoResponse.channels)
  return &_impl_.channels_;
}
inline const ::milvus::proto::data::VchannelInfo& GetRecoveryInfoResponse::_internal_channels(int index) const {
  return _impl_.channels_.Get(index);
}
inline const ::milvus::proto::data::VchannelInfo& GetRecoveryInfoResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetRecoveryInfoResponse.channels)
  return _internal_channels(index);
}
inline ::milvus::proto::data::VchannelInfo* GetRecoveryInfoResponse::_internal_add_channels() {
  return _impl_.channels_.Add();
}
inline ::milvus::proto::data::VchannelInfo* GetRecoveryInfoResponse::add_channels() {
  ::milvus::proto::data::VchannelInfo* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetRecoveryInfoResponse.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo >&
GetRecoveryInfoResponse::channels() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetRecoveryInfoResponse.channels)
  return _impl_.channels_;
}

// repeated .milvus.proto.data.SegmentBinlogs binlogs = 3;
inline int GetRecoveryInfoResponse::_internal_binlogs_size() const {
  return _impl_.binlogs_.size();
}
inline int GetRecoveryInfoResponse::binlogs_size() const {
  return _internal_binlogs_size();
}
inline void GetRecoveryInfoResponse::clear_binlogs() {
  _impl_.binlogs_.Clear();
}
inline ::milvus::proto::data::SegmentBinlogs* GetRecoveryInfoResponse::mutable_binlogs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetRecoveryInfoResponse.binlogs)
  return _impl_.binlogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentBinlogs >*
GetRecoveryInfoResponse::mutable_binlogs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetRecoveryInfoResponse.binlogs)
  return &_impl_.binlogs_;
}
inline const ::milvus::proto::data::SegmentBinlogs& GetRecoveryInfoResponse::_internal_binlogs(int index) const {
  return _impl_.binlogs_.Get(index);
}
inline const ::milvus::proto::data::SegmentBinlogs& GetRecoveryInfoResponse::binlogs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetRecoveryInfoResponse.binlogs)
  return _internal_binlogs(index);
}
inline ::milvus::proto::data::SegmentBinlogs* GetRecoveryInfoResponse::_internal_add_binlogs() {
  return _impl_.binlogs_.Add();
}
inline ::milvus::proto::data::SegmentBinlogs* GetRecoveryInfoResponse::add_binlogs() {
  ::milvus::proto::data::SegmentBinlogs* _add = _internal_add_binlogs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetRecoveryInfoResponse.binlogs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentBinlogs >&
GetRecoveryInfoResponse::binlogs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetRecoveryInfoResponse.binlogs)
  return _impl_.binlogs_;
}

// -------------------------------------------------------------------

// GetRecoveryInfoRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetRecoveryInfoRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetRecoveryInfoRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetRecoveryInfoRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetRecoveryInfoRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetRecoveryInfoRequest.base)
  return _internal_base();
}
inline void GetRecoveryInfoRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetRecoveryInfoRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetRecoveryInfoRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetRecoveryInfoRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetRecoveryInfoRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetRecoveryInfoRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetRecoveryInfoRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetRecoveryInfoRequest.base)
  return _msg;
}
inline void GetRecoveryInfoRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetRecoveryInfoRequest.base)
}

// int64 collectionID = 2;
inline void GetRecoveryInfoRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t GetRecoveryInfoRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t GetRecoveryInfoRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetRecoveryInfoRequest.collectionID)
  return _internal_collectionid();
}
inline void GetRecoveryInfoRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void GetRecoveryInfoRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetRecoveryInfoRequest.collectionID)
}

// int64 partitionID = 3;
inline void GetRecoveryInfoRequest::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t GetRecoveryInfoRequest::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t GetRecoveryInfoRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetRecoveryInfoRequest.partitionID)
  return _internal_partitionid();
}
inline void GetRecoveryInfoRequest::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void GetRecoveryInfoRequest::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetRecoveryInfoRequest.partitionID)
}

// -------------------------------------------------------------------

// GetRecoveryInfoResponseV2

// .milvus.proto.common.Status status = 1;
inline bool GetRecoveryInfoResponseV2::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetRecoveryInfoResponseV2::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetRecoveryInfoResponseV2::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetRecoveryInfoResponseV2::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetRecoveryInfoResponseV2.status)
  return _internal_status();
}
inline void GetRecoveryInfoResponseV2::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetRecoveryInfoResponseV2.status)
}
inline ::milvus::proto::common::Status* GetRecoveryInfoResponseV2::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetRecoveryInfoResponseV2::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetRecoveryInfoResponseV2.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetRecoveryInfoResponseV2::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetRecoveryInfoResponseV2::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetRecoveryInfoResponseV2.status)
  return _msg;
}
inline void GetRecoveryInfoResponseV2::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetRecoveryInfoResponseV2.status)
}

// repeated .milvus.proto.data.VchannelInfo channels = 2;
inline int GetRecoveryInfoResponseV2::_internal_channels_size() const {
  return _impl_.channels_.size();
}
inline int GetRecoveryInfoResponseV2::channels_size() const {
  return _internal_channels_size();
}
inline void GetRecoveryInfoResponseV2::clear_channels() {
  _impl_.channels_.Clear();
}
inline ::milvus::proto::data::VchannelInfo* GetRecoveryInfoResponseV2::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetRecoveryInfoResponseV2.channels)
  return _impl_.channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo >*
GetRecoveryInfoResponseV2::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetRecoveryInfoResponseV2.channels)
  return &_impl_.channels_;
}
inline const ::milvus::proto::data::VchannelInfo& GetRecoveryInfoResponseV2::_internal_channels(int index) const {
  return _impl_.channels_.Get(index);
}
inline const ::milvus::proto::data::VchannelInfo& GetRecoveryInfoResponseV2::channels(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetRecoveryInfoResponseV2.channels)
  return _internal_channels(index);
}
inline ::milvus::proto::data::VchannelInfo* GetRecoveryInfoResponseV2::_internal_add_channels() {
  return _impl_.channels_.Add();
}
inline ::milvus::proto::data::VchannelInfo* GetRecoveryInfoResponseV2::add_channels() {
  ::milvus::proto::data::VchannelInfo* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetRecoveryInfoResponseV2.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::VchannelInfo >&
GetRecoveryInfoResponseV2::channels() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetRecoveryInfoResponseV2.channels)
  return _impl_.channels_;
}

// repeated .milvus.proto.data.SegmentInfo segments = 3;
inline int GetRecoveryInfoResponseV2::_internal_segments_size() const {
  return _impl_.segments_.size();
}
inline int GetRecoveryInfoResponseV2::segments_size() const {
  return _internal_segments_size();
}
inline void GetRecoveryInfoResponseV2::clear_segments() {
  _impl_.segments_.Clear();
}
inline ::milvus::proto::data::SegmentInfo* GetRecoveryInfoResponseV2::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetRecoveryInfoResponseV2.segments)
  return _impl_.segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >*
GetRecoveryInfoResponseV2::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetRecoveryInfoResponseV2.segments)
  return &_impl_.segments_;
}
inline const ::milvus::proto::data::SegmentInfo& GetRecoveryInfoResponseV2::_internal_segments(int index) const {
  return _impl_.segments_.Get(index);
}
inline const ::milvus::proto::data::SegmentInfo& GetRecoveryInfoResponseV2::segments(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetRecoveryInfoResponseV2.segments)
  return _internal_segments(index);
}
inline ::milvus::proto::data::SegmentInfo* GetRecoveryInfoResponseV2::_internal_add_segments() {
  return _impl_.segments_.Add();
}
inline ::milvus::proto::data::SegmentInfo* GetRecoveryInfoResponseV2::add_segments() {
  ::milvus::proto::data::SegmentInfo* _add = _internal_add_segments();
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetRecoveryInfoResponseV2.segments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::SegmentInfo >&
GetRecoveryInfoResponseV2::segments() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetRecoveryInfoResponseV2.segments)
  return _impl_.segments_;
}

// -------------------------------------------------------------------

// GetRecoveryInfoRequestV2

// .milvus.proto.common.MsgBase base = 1;
inline bool GetRecoveryInfoRequestV2::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetRecoveryInfoRequestV2::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetRecoveryInfoRequestV2::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetRecoveryInfoRequestV2::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetRecoveryInfoRequestV2.base)
  return _internal_base();
}
inline void GetRecoveryInfoRequestV2::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetRecoveryInfoRequestV2.base)
}
inline ::milvus::proto::common::MsgBase* GetRecoveryInfoRequestV2::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetRecoveryInfoRequestV2::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetRecoveryInfoRequestV2.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetRecoveryInfoRequestV2::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetRecoveryInfoRequestV2::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetRecoveryInfoRequestV2.base)
  return _msg;
}
inline void GetRecoveryInfoRequestV2::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetRecoveryInfoRequestV2.base)
}

// int64 collectionID = 2;
inline void GetRecoveryInfoRequestV2::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t GetRecoveryInfoRequestV2::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t GetRecoveryInfoRequestV2::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetRecoveryInfoRequestV2.collectionID)
  return _internal_collectionid();
}
inline void GetRecoveryInfoRequestV2::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void GetRecoveryInfoRequestV2::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetRecoveryInfoRequestV2.collectionID)
}

// repeated int64 partitionIDs = 3;
inline int GetRecoveryInfoRequestV2::_internal_partitionids_size() const {
  return _impl_.partitionids_.size();
}
inline int GetRecoveryInfoRequestV2::partitionids_size() const {
  return _internal_partitionids_size();
}
inline void GetRecoveryInfoRequestV2::clear_partitionids() {
  _impl_.partitionids_.Clear();
}
inline int64_t GetRecoveryInfoRequestV2::_internal_partitionids(int index) const {
  return _impl_.partitionids_.Get(index);
}
inline int64_t GetRecoveryInfoRequestV2::partitionids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetRecoveryInfoRequestV2.partitionIDs)
  return _internal_partitionids(index);
}
inline void GetRecoveryInfoRequestV2::set_partitionids(int index, int64_t value) {
  _impl_.partitionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetRecoveryInfoRequestV2.partitionIDs)
}
inline void GetRecoveryInfoRequestV2::_internal_add_partitionids(int64_t value) {
  _impl_.partitionids_.Add(value);
}
inline void GetRecoveryInfoRequestV2::add_partitionids(int64_t value) {
  _internal_add_partitionids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetRecoveryInfoRequestV2.partitionIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetRecoveryInfoRequestV2::_internal_partitionids() const {
  return _impl_.partitionids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetRecoveryInfoRequestV2::partitionids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetRecoveryInfoRequestV2.partitionIDs)
  return _internal_partitionids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetRecoveryInfoRequestV2::_internal_mutable_partitionids() {
  return &_impl_.partitionids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetRecoveryInfoRequestV2::mutable_partitionids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetRecoveryInfoRequestV2.partitionIDs)
  return _internal_mutable_partitionids();
}

// -------------------------------------------------------------------

// GetSegmentsByStatesRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetSegmentsByStatesRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetSegmentsByStatesRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetSegmentsByStatesRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetSegmentsByStatesRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentsByStatesRequest.base)
  return _internal_base();
}
inline void GetSegmentsByStatesRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetSegmentsByStatesRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetSegmentsByStatesRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetSegmentsByStatesRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetSegmentsByStatesRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetSegmentsByStatesRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetSegmentsByStatesRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetSegmentsByStatesRequest.base)
  return _msg;
}
inline void GetSegmentsByStatesRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetSegmentsByStatesRequest.base)
}

// int64 collectionID = 2;
inline void GetSegmentsByStatesRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t GetSegmentsByStatesRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t GetSegmentsByStatesRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentsByStatesRequest.collectionID)
  return _internal_collectionid();
}
inline void GetSegmentsByStatesRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void GetSegmentsByStatesRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetSegmentsByStatesRequest.collectionID)
}

// int64 partitionID = 3;
inline void GetSegmentsByStatesRequest::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t GetSegmentsByStatesRequest::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t GetSegmentsByStatesRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentsByStatesRequest.partitionID)
  return _internal_partitionid();
}
inline void GetSegmentsByStatesRequest::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void GetSegmentsByStatesRequest::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetSegmentsByStatesRequest.partitionID)
}

// repeated .milvus.proto.common.SegmentState states = 4;
inline int GetSegmentsByStatesRequest::_internal_states_size() const {
  return _impl_.states_.size();
}
inline int GetSegmentsByStatesRequest::states_size() const {
  return _internal_states_size();
}
inline void GetSegmentsByStatesRequest::clear_states() {
  _impl_.states_.Clear();
}
inline ::milvus::proto::common::SegmentState GetSegmentsByStatesRequest::_internal_states(int index) const {
  return static_cast< ::milvus::proto::common::SegmentState >(_impl_.states_.Get(index));
}
inline ::milvus::proto::common::SegmentState GetSegmentsByStatesRequest::states(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentsByStatesRequest.states)
  return _internal_states(index);
}
inline void GetSegmentsByStatesRequest::set_states(int index, ::milvus::proto::common::SegmentState value) {
  _impl_.states_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetSegmentsByStatesRequest.states)
}
inline void GetSegmentsByStatesRequest::_internal_add_states(::milvus::proto::common::SegmentState value) {
  _impl_.states_.Add(value);
}
inline void GetSegmentsByStatesRequest::add_states(::milvus::proto::common::SegmentState value) {
  _internal_add_states(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetSegmentsByStatesRequest.states)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetSegmentsByStatesRequest::states() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetSegmentsByStatesRequest.states)
  return _impl_.states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetSegmentsByStatesRequest::_internal_mutable_states() {
  return &_impl_.states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetSegmentsByStatesRequest::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetSegmentsByStatesRequest.states)
  return _internal_mutable_states();
}

// -------------------------------------------------------------------

// GetSegmentsByStatesResponse

// .milvus.proto.common.Status status = 1;
inline bool GetSegmentsByStatesResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetSegmentsByStatesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetSegmentsByStatesResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetSegmentsByStatesResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentsByStatesResponse.status)
  return _internal_status();
}
inline void GetSegmentsByStatesResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetSegmentsByStatesResponse.status)
}
inline ::milvus::proto::common::Status* GetSegmentsByStatesResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetSegmentsByStatesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetSegmentsByStatesResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetSegmentsByStatesResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetSegmentsByStatesResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetSegmentsByStatesResponse.status)
  return _msg;
}
inline void GetSegmentsByStatesResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetSegmentsByStatesResponse.status)
}

// repeated int64 segments = 2;
inline int GetSegmentsByStatesResponse::_internal_segments_size() const {
  return _impl_.segments_.size();
}
inline int GetSegmentsByStatesResponse::segments_size() const {
  return _internal_segments_size();
}
inline void GetSegmentsByStatesResponse::clear_segments() {
  _impl_.segments_.Clear();
}
inline int64_t GetSegmentsByStatesResponse::_internal_segments(int index) const {
  return _impl_.segments_.Get(index);
}
inline int64_t GetSegmentsByStatesResponse::segments(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetSegmentsByStatesResponse.segments)
  return _internal_segments(index);
}
inline void GetSegmentsByStatesResponse::set_segments(int index, int64_t value) {
  _impl_.segments_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetSegmentsByStatesResponse.segments)
}
inline void GetSegmentsByStatesResponse::_internal_add_segments(int64_t value) {
  _impl_.segments_.Add(value);
}
inline void GetSegmentsByStatesResponse::add_segments(int64_t value) {
  _internal_add_segments(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetSegmentsByStatesResponse.segments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetSegmentsByStatesResponse::_internal_segments() const {
  return _impl_.segments_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetSegmentsByStatesResponse::segments() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetSegmentsByStatesResponse.segments)
  return _internal_segments();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetSegmentsByStatesResponse::_internal_mutable_segments() {
  return &_impl_.segments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetSegmentsByStatesResponse::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetSegmentsByStatesResponse.segments)
  return _internal_mutable_segments();
}

// -------------------------------------------------------------------

// GetFlushedSegmentsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetFlushedSegmentsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetFlushedSegmentsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetFlushedSegmentsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetFlushedSegmentsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetFlushedSegmentsRequest.base)
  return _internal_base();
}
inline void GetFlushedSegmentsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetFlushedSegmentsRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetFlushedSegmentsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetFlushedSegmentsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetFlushedSegmentsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetFlushedSegmentsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetFlushedSegmentsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetFlushedSegmentsRequest.base)
  return _msg;
}
inline void GetFlushedSegmentsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetFlushedSegmentsRequest.base)
}

// int64 collectionID = 2;
inline void GetFlushedSegmentsRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t GetFlushedSegmentsRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t GetFlushedSegmentsRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetFlushedSegmentsRequest.collectionID)
  return _internal_collectionid();
}
inline void GetFlushedSegmentsRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void GetFlushedSegmentsRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetFlushedSegmentsRequest.collectionID)
}

// int64 partitionID = 3;
inline void GetFlushedSegmentsRequest::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t GetFlushedSegmentsRequest::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t GetFlushedSegmentsRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetFlushedSegmentsRequest.partitionID)
  return _internal_partitionid();
}
inline void GetFlushedSegmentsRequest::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void GetFlushedSegmentsRequest::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetFlushedSegmentsRequest.partitionID)
}

// bool includeUnhealthy = 4;
inline void GetFlushedSegmentsRequest::clear_includeunhealthy() {
  _impl_.includeunhealthy_ = false;
}
inline bool GetFlushedSegmentsRequest::_internal_includeunhealthy() const {
  return _impl_.includeunhealthy_;
}
inline bool GetFlushedSegmentsRequest::includeunhealthy() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetFlushedSegmentsRequest.includeUnhealthy)
  return _internal_includeunhealthy();
}
inline void GetFlushedSegmentsRequest::_internal_set_includeunhealthy(bool value) {
  
  _impl_.includeunhealthy_ = value;
}
inline void GetFlushedSegmentsRequest::set_includeunhealthy(bool value) {
  _internal_set_includeunhealthy(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetFlushedSegmentsRequest.includeUnhealthy)
}

// -------------------------------------------------------------------

// GetFlushedSegmentsResponse

// .milvus.proto.common.Status status = 1;
inline bool GetFlushedSegmentsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetFlushedSegmentsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetFlushedSegmentsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetFlushedSegmentsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetFlushedSegmentsResponse.status)
  return _internal_status();
}
inline void GetFlushedSegmentsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GetFlushedSegmentsResponse.status)
}
inline ::milvus::proto::common::Status* GetFlushedSegmentsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetFlushedSegmentsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GetFlushedSegmentsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetFlushedSegmentsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetFlushedSegmentsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GetFlushedSegmentsResponse.status)
  return _msg;
}
inline void GetFlushedSegmentsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GetFlushedSegmentsResponse.status)
}

// repeated int64 segments = 2;
inline int GetFlushedSegmentsResponse::_internal_segments_size() const {
  return _impl_.segments_.size();
}
inline int GetFlushedSegmentsResponse::segments_size() const {
  return _internal_segments_size();
}
inline void GetFlushedSegmentsResponse::clear_segments() {
  _impl_.segments_.Clear();
}
inline int64_t GetFlushedSegmentsResponse::_internal_segments(int index) const {
  return _impl_.segments_.Get(index);
}
inline int64_t GetFlushedSegmentsResponse::segments(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GetFlushedSegmentsResponse.segments)
  return _internal_segments(index);
}
inline void GetFlushedSegmentsResponse::set_segments(int index, int64_t value) {
  _impl_.segments_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GetFlushedSegmentsResponse.segments)
}
inline void GetFlushedSegmentsResponse::_internal_add_segments(int64_t value) {
  _impl_.segments_.Add(value);
}
inline void GetFlushedSegmentsResponse::add_segments(int64_t value) {
  _internal_add_segments(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.GetFlushedSegmentsResponse.segments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetFlushedSegmentsResponse::_internal_segments() const {
  return _impl_.segments_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetFlushedSegmentsResponse::segments() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.GetFlushedSegmentsResponse.segments)
  return _internal_segments();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetFlushedSegmentsResponse::_internal_mutable_segments() {
  return &_impl_.segments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetFlushedSegmentsResponse::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.GetFlushedSegmentsResponse.segments)
  return _internal_mutable_segments();
}

// -------------------------------------------------------------------

// SegmentFlushCompletedMsg

// .milvus.proto.common.MsgBase base = 1;
inline bool SegmentFlushCompletedMsg::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SegmentFlushCompletedMsg::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& SegmentFlushCompletedMsg::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& SegmentFlushCompletedMsg::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentFlushCompletedMsg.base)
  return _internal_base();
}
inline void SegmentFlushCompletedMsg::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SegmentFlushCompletedMsg.base)
}
inline ::milvus::proto::common::MsgBase* SegmentFlushCompletedMsg::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* SegmentFlushCompletedMsg::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentFlushCompletedMsg.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* SegmentFlushCompletedMsg::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* SegmentFlushCompletedMsg::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentFlushCompletedMsg.base)
  return _msg;
}
inline void SegmentFlushCompletedMsg::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentFlushCompletedMsg.base)
}

// .milvus.proto.data.SegmentInfo segment = 2;
inline bool SegmentFlushCompletedMsg::_internal_has_segment() const {
  return this != internal_default_instance() && _impl_.segment_ != nullptr;
}
inline bool SegmentFlushCompletedMsg::has_segment() const {
  return _internal_has_segment();
}
inline void SegmentFlushCompletedMsg::clear_segment() {
  if (GetArenaForAllocation() == nullptr && _impl_.segment_ != nullptr) {
    delete _impl_.segment_;
  }
  _impl_.segment_ = nullptr;
}
inline const ::milvus::proto::data::SegmentInfo& SegmentFlushCompletedMsg::_internal_segment() const {
  const ::milvus::proto::data::SegmentInfo* p = _impl_.segment_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::data::SegmentInfo&>(
      ::milvus::proto::data::_SegmentInfo_default_instance_);
}
inline const ::milvus::proto::data::SegmentInfo& SegmentFlushCompletedMsg::segment() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentFlushCompletedMsg.segment)
  return _internal_segment();
}
inline void SegmentFlushCompletedMsg::unsafe_arena_set_allocated_segment(
    ::milvus::proto::data::SegmentInfo* segment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.segment_);
  }
  _impl_.segment_ = segment;
  if (segment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SegmentFlushCompletedMsg.segment)
}
inline ::milvus::proto::data::SegmentInfo* SegmentFlushCompletedMsg::release_segment() {
  
  ::milvus::proto::data::SegmentInfo* temp = _impl_.segment_;
  _impl_.segment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::data::SegmentInfo* SegmentFlushCompletedMsg::unsafe_arena_release_segment() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentFlushCompletedMsg.segment)
  
  ::milvus::proto::data::SegmentInfo* temp = _impl_.segment_;
  _impl_.segment_ = nullptr;
  return temp;
}
inline ::milvus::proto::data::SegmentInfo* SegmentFlushCompletedMsg::_internal_mutable_segment() {
  
  if (_impl_.segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::data::SegmentInfo>(GetArenaForAllocation());
    _impl_.segment_ = p;
  }
  return _impl_.segment_;
}
inline ::milvus::proto::data::SegmentInfo* SegmentFlushCompletedMsg::mutable_segment() {
  ::milvus::proto::data::SegmentInfo* _msg = _internal_mutable_segment();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentFlushCompletedMsg.segment)
  return _msg;
}
inline void SegmentFlushCompletedMsg::set_allocated_segment(::milvus::proto::data::SegmentInfo* segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.segment_;
  }
  if (segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(segment);
    if (message_arena != submessage_arena) {
      segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.segment_ = segment;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentFlushCompletedMsg.segment)
}

// -------------------------------------------------------------------

// ChannelWatchInfo

// .milvus.proto.data.VchannelInfo vchan = 1;
inline bool ChannelWatchInfo::_internal_has_vchan() const {
  return this != internal_default_instance() && _impl_.vchan_ != nullptr;
}
inline bool ChannelWatchInfo::has_vchan() const {
  return _internal_has_vchan();
}
inline void ChannelWatchInfo::clear_vchan() {
  if (GetArenaForAllocation() == nullptr && _impl_.vchan_ != nullptr) {
    delete _impl_.vchan_;
  }
  _impl_.vchan_ = nullptr;
}
inline const ::milvus::proto::data::VchannelInfo& ChannelWatchInfo::_internal_vchan() const {
  const ::milvus::proto::data::VchannelInfo* p = _impl_.vchan_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::data::VchannelInfo&>(
      ::milvus::proto::data::_VchannelInfo_default_instance_);
}
inline const ::milvus::proto::data::VchannelInfo& ChannelWatchInfo::vchan() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ChannelWatchInfo.vchan)
  return _internal_vchan();
}
inline void ChannelWatchInfo::unsafe_arena_set_allocated_vchan(
    ::milvus::proto::data::VchannelInfo* vchan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vchan_);
  }
  _impl_.vchan_ = vchan;
  if (vchan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.ChannelWatchInfo.vchan)
}
inline ::milvus::proto::data::VchannelInfo* ChannelWatchInfo::release_vchan() {
  
  ::milvus::proto::data::VchannelInfo* temp = _impl_.vchan_;
  _impl_.vchan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::data::VchannelInfo* ChannelWatchInfo::unsafe_arena_release_vchan() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ChannelWatchInfo.vchan)
  
  ::milvus::proto::data::VchannelInfo* temp = _impl_.vchan_;
  _impl_.vchan_ = nullptr;
  return temp;
}
inline ::milvus::proto::data::VchannelInfo* ChannelWatchInfo::_internal_mutable_vchan() {
  
  if (_impl_.vchan_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::data::VchannelInfo>(GetArenaForAllocation());
    _impl_.vchan_ = p;
  }
  return _impl_.vchan_;
}
inline ::milvus::proto::data::VchannelInfo* ChannelWatchInfo::mutable_vchan() {
  ::milvus::proto::data::VchannelInfo* _msg = _internal_mutable_vchan();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ChannelWatchInfo.vchan)
  return _msg;
}
inline void ChannelWatchInfo::set_allocated_vchan(::milvus::proto::data::VchannelInfo* vchan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vchan_;
  }
  if (vchan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vchan);
    if (message_arena != submessage_arena) {
      vchan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vchan, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vchan_ = vchan;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ChannelWatchInfo.vchan)
}

// int64 startTs = 2;
inline void ChannelWatchInfo::clear_startts() {
  _impl_.startts_ = int64_t{0};
}
inline int64_t ChannelWatchInfo::_internal_startts() const {
  return _impl_.startts_;
}
inline int64_t ChannelWatchInfo::startts() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ChannelWatchInfo.startTs)
  return _internal_startts();
}
inline void ChannelWatchInfo::_internal_set_startts(int64_t value) {
  
  _impl_.startts_ = value;
}
inline void ChannelWatchInfo::set_startts(int64_t value) {
  _internal_set_startts(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ChannelWatchInfo.startTs)
}

// .milvus.proto.data.ChannelWatchState state = 3;
inline void ChannelWatchInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::data::ChannelWatchState ChannelWatchInfo::_internal_state() const {
  return static_cast< ::milvus::proto::data::ChannelWatchState >(_impl_.state_);
}
inline ::milvus::proto::data::ChannelWatchState ChannelWatchInfo::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ChannelWatchInfo.state)
  return _internal_state();
}
inline void ChannelWatchInfo::_internal_set_state(::milvus::proto::data::ChannelWatchState value) {
  
  _impl_.state_ = value;
}
inline void ChannelWatchInfo::set_state(::milvus::proto::data::ChannelWatchState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ChannelWatchInfo.state)
}

// int64 timeoutTs = 4;
inline void ChannelWatchInfo::clear_timeoutts() {
  _impl_.timeoutts_ = int64_t{0};
}
inline int64_t ChannelWatchInfo::_internal_timeoutts() const {
  return _impl_.timeoutts_;
}
inline int64_t ChannelWatchInfo::timeoutts() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ChannelWatchInfo.timeoutTs)
  return _internal_timeoutts();
}
inline void ChannelWatchInfo::_internal_set_timeoutts(int64_t value) {
  
  _impl_.timeoutts_ = value;
}
inline void ChannelWatchInfo::set_timeoutts(int64_t value) {
  _internal_set_timeoutts(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ChannelWatchInfo.timeoutTs)
}

// .milvus.proto.schema.CollectionSchema schema = 5;
inline bool ChannelWatchInfo::_internal_has_schema() const {
  return this != internal_default_instance() && _impl_.schema_ != nullptr;
}
inline bool ChannelWatchInfo::has_schema() const {
  return _internal_has_schema();
}
inline const ::milvus::proto::schema::CollectionSchema& ChannelWatchInfo::_internal_schema() const {
  const ::milvus::proto::schema::CollectionSchema* p = _impl_.schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::schema::CollectionSchema&>(
      ::milvus::proto::schema::_CollectionSchema_default_instance_);
}
inline const ::milvus::proto::schema::CollectionSchema& ChannelWatchInfo::schema() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ChannelWatchInfo.schema)
  return _internal_schema();
}
inline void ChannelWatchInfo::unsafe_arena_set_allocated_schema(
    ::milvus::proto::schema::CollectionSchema* schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_);
  }
  _impl_.schema_ = schema;
  if (schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.ChannelWatchInfo.schema)
}
inline ::milvus::proto::schema::CollectionSchema* ChannelWatchInfo::release_schema() {
  
  ::milvus::proto::schema::CollectionSchema* temp = _impl_.schema_;
  _impl_.schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::schema::CollectionSchema* ChannelWatchInfo::unsafe_arena_release_schema() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ChannelWatchInfo.schema)
  
  ::milvus::proto::schema::CollectionSchema* temp = _impl_.schema_;
  _impl_.schema_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::CollectionSchema* ChannelWatchInfo::_internal_mutable_schema() {
  
  if (_impl_.schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::CollectionSchema>(GetArenaForAllocation());
    _impl_.schema_ = p;
  }
  return _impl_.schema_;
}
inline ::milvus::proto::schema::CollectionSchema* ChannelWatchInfo::mutable_schema() {
  ::milvus::proto::schema::CollectionSchema* _msg = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ChannelWatchInfo.schema)
  return _msg;
}
inline void ChannelWatchInfo::set_allocated_schema(::milvus::proto::schema::CollectionSchema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_);
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema));
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ChannelWatchInfo.schema)
}

// int32 progress = 6;
inline void ChannelWatchInfo::clear_progress() {
  _impl_.progress_ = 0;
}
inline int32_t ChannelWatchInfo::_internal_progress() const {
  return _impl_.progress_;
}
inline int32_t ChannelWatchInfo::progress() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ChannelWatchInfo.progress)
  return _internal_progress();
}
inline void ChannelWatchInfo::_internal_set_progress(int32_t value) {
  
  _impl_.progress_ = value;
}
inline void ChannelWatchInfo::set_progress(int32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ChannelWatchInfo.progress)
}

// -------------------------------------------------------------------

// CompactionStateRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CompactionStateRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool CompactionStateRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CompactionStateRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CompactionStateRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionStateRequest.base)
  return _internal_base();
}
inline void CompactionStateRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.CompactionStateRequest.base)
}
inline ::milvus::proto::common::MsgBase* CompactionStateRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* CompactionStateRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.CompactionStateRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CompactionStateRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* CompactionStateRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CompactionStateRequest.base)
  return _msg;
}
inline void CompactionStateRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.CompactionStateRequest.base)
}

// -------------------------------------------------------------------

// SyncSegmentsRequest

// int64 planID = 1;
inline void SyncSegmentsRequest::clear_planid() {
  _impl_.planid_ = int64_t{0};
}
inline int64_t SyncSegmentsRequest::_internal_planid() const {
  return _impl_.planid_;
}
inline int64_t SyncSegmentsRequest::planid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SyncSegmentsRequest.planID)
  return _internal_planid();
}
inline void SyncSegmentsRequest::_internal_set_planid(int64_t value) {
  
  _impl_.planid_ = value;
}
inline void SyncSegmentsRequest::set_planid(int64_t value) {
  _internal_set_planid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SyncSegmentsRequest.planID)
}

// int64 compacted_to = 2;
inline void SyncSegmentsRequest::clear_compacted_to() {
  _impl_.compacted_to_ = int64_t{0};
}
inline int64_t SyncSegmentsRequest::_internal_compacted_to() const {
  return _impl_.compacted_to_;
}
inline int64_t SyncSegmentsRequest::compacted_to() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SyncSegmentsRequest.compacted_to)
  return _internal_compacted_to();
}
inline void SyncSegmentsRequest::_internal_set_compacted_to(int64_t value) {
  
  _impl_.compacted_to_ = value;
}
inline void SyncSegmentsRequest::set_compacted_to(int64_t value) {
  _internal_set_compacted_to(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SyncSegmentsRequest.compacted_to)
}

// int64 num_of_rows = 3;
inline void SyncSegmentsRequest::clear_num_of_rows() {
  _impl_.num_of_rows_ = int64_t{0};
}
inline int64_t SyncSegmentsRequest::_internal_num_of_rows() const {
  return _impl_.num_of_rows_;
}
inline int64_t SyncSegmentsRequest::num_of_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SyncSegmentsRequest.num_of_rows)
  return _internal_num_of_rows();
}
inline void SyncSegmentsRequest::_internal_set_num_of_rows(int64_t value) {
  
  _impl_.num_of_rows_ = value;
}
inline void SyncSegmentsRequest::set_num_of_rows(int64_t value) {
  _internal_set_num_of_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SyncSegmentsRequest.num_of_rows)
}

// repeated int64 compacted_from = 4;
inline int SyncSegmentsRequest::_internal_compacted_from_size() const {
  return _impl_.compacted_from_.size();
}
inline int SyncSegmentsRequest::compacted_from_size() const {
  return _internal_compacted_from_size();
}
inline void SyncSegmentsRequest::clear_compacted_from() {
  _impl_.compacted_from_.Clear();
}
inline int64_t SyncSegmentsRequest::_internal_compacted_from(int index) const {
  return _impl_.compacted_from_.Get(index);
}
inline int64_t SyncSegmentsRequest::compacted_from(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SyncSegmentsRequest.compacted_from)
  return _internal_compacted_from(index);
}
inline void SyncSegmentsRequest::set_compacted_from(int index, int64_t value) {
  _impl_.compacted_from_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SyncSegmentsRequest.compacted_from)
}
inline void SyncSegmentsRequest::_internal_add_compacted_from(int64_t value) {
  _impl_.compacted_from_.Add(value);
}
inline void SyncSegmentsRequest::add_compacted_from(int64_t value) {
  _internal_add_compacted_from(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.SyncSegmentsRequest.compacted_from)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SyncSegmentsRequest::_internal_compacted_from() const {
  return _impl_.compacted_from_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SyncSegmentsRequest::compacted_from() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SyncSegmentsRequest.compacted_from)
  return _internal_compacted_from();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SyncSegmentsRequest::_internal_mutable_compacted_from() {
  return &_impl_.compacted_from_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SyncSegmentsRequest::mutable_compacted_from() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SyncSegmentsRequest.compacted_from)
  return _internal_mutable_compacted_from();
}

// repeated .milvus.proto.data.FieldBinlog stats_logs = 5;
inline int SyncSegmentsRequest::_internal_stats_logs_size() const {
  return _impl_.stats_logs_.size();
}
inline int SyncSegmentsRequest::stats_logs_size() const {
  return _internal_stats_logs_size();
}
inline void SyncSegmentsRequest::clear_stats_logs() {
  _impl_.stats_logs_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* SyncSegmentsRequest::mutable_stats_logs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SyncSegmentsRequest.stats_logs)
  return _impl_.stats_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
SyncSegmentsRequest::mutable_stats_logs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SyncSegmentsRequest.stats_logs)
  return &_impl_.stats_logs_;
}
inline const ::milvus::proto::data::FieldBinlog& SyncSegmentsRequest::_internal_stats_logs(int index) const {
  return _impl_.stats_logs_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& SyncSegmentsRequest::stats_logs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SyncSegmentsRequest.stats_logs)
  return _internal_stats_logs(index);
}
inline ::milvus::proto::data::FieldBinlog* SyncSegmentsRequest::_internal_add_stats_logs() {
  return _impl_.stats_logs_.Add();
}
inline ::milvus::proto::data::FieldBinlog* SyncSegmentsRequest::add_stats_logs() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_stats_logs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.SyncSegmentsRequest.stats_logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
SyncSegmentsRequest::stats_logs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SyncSegmentsRequest.stats_logs)
  return _impl_.stats_logs_;
}

// -------------------------------------------------------------------

// CompactionSegmentBinlogs

// int64 segmentID = 1;
inline void CompactionSegmentBinlogs::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t CompactionSegmentBinlogs::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t CompactionSegmentBinlogs::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionSegmentBinlogs.segmentID)
  return _internal_segmentid();
}
inline void CompactionSegmentBinlogs::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void CompactionSegmentBinlogs::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionSegmentBinlogs.segmentID)
}

// repeated .milvus.proto.data.FieldBinlog fieldBinlogs = 2;
inline int CompactionSegmentBinlogs::_internal_fieldbinlogs_size() const {
  return _impl_.fieldbinlogs_.size();
}
inline int CompactionSegmentBinlogs::fieldbinlogs_size() const {
  return _internal_fieldbinlogs_size();
}
inline void CompactionSegmentBinlogs::clear_fieldbinlogs() {
  _impl_.fieldbinlogs_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* CompactionSegmentBinlogs::mutable_fieldbinlogs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CompactionSegmentBinlogs.fieldBinlogs)
  return _impl_.fieldbinlogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
CompactionSegmentBinlogs::mutable_fieldbinlogs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.CompactionSegmentBinlogs.fieldBinlogs)
  return &_impl_.fieldbinlogs_;
}
inline const ::milvus::proto::data::FieldBinlog& CompactionSegmentBinlogs::_internal_fieldbinlogs(int index) const {
  return _impl_.fieldbinlogs_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& CompactionSegmentBinlogs::fieldbinlogs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionSegmentBinlogs.fieldBinlogs)
  return _internal_fieldbinlogs(index);
}
inline ::milvus::proto::data::FieldBinlog* CompactionSegmentBinlogs::_internal_add_fieldbinlogs() {
  return _impl_.fieldbinlogs_.Add();
}
inline ::milvus::proto::data::FieldBinlog* CompactionSegmentBinlogs::add_fieldbinlogs() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_fieldbinlogs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.CompactionSegmentBinlogs.fieldBinlogs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
CompactionSegmentBinlogs::fieldbinlogs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.CompactionSegmentBinlogs.fieldBinlogs)
  return _impl_.fieldbinlogs_;
}

// repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 3;
inline int CompactionSegmentBinlogs::_internal_field2statslogpaths_size() const {
  return _impl_.field2statslogpaths_.size();
}
inline int CompactionSegmentBinlogs::field2statslogpaths_size() const {
  return _internal_field2statslogpaths_size();
}
inline void CompactionSegmentBinlogs::clear_field2statslogpaths() {
  _impl_.field2statslogpaths_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* CompactionSegmentBinlogs::mutable_field2statslogpaths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CompactionSegmentBinlogs.field2StatslogPaths)
  return _impl_.field2statslogpaths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
CompactionSegmentBinlogs::mutable_field2statslogpaths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.CompactionSegmentBinlogs.field2StatslogPaths)
  return &_impl_.field2statslogpaths_;
}
inline const ::milvus::proto::data::FieldBinlog& CompactionSegmentBinlogs::_internal_field2statslogpaths(int index) const {
  return _impl_.field2statslogpaths_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& CompactionSegmentBinlogs::field2statslogpaths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionSegmentBinlogs.field2StatslogPaths)
  return _internal_field2statslogpaths(index);
}
inline ::milvus::proto::data::FieldBinlog* CompactionSegmentBinlogs::_internal_add_field2statslogpaths() {
  return _impl_.field2statslogpaths_.Add();
}
inline ::milvus::proto::data::FieldBinlog* CompactionSegmentBinlogs::add_field2statslogpaths() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_field2statslogpaths();
  // @@protoc_insertion_point(field_add:milvus.proto.data.CompactionSegmentBinlogs.field2StatslogPaths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
CompactionSegmentBinlogs::field2statslogpaths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.CompactionSegmentBinlogs.field2StatslogPaths)
  return _impl_.field2statslogpaths_;
}

// repeated .milvus.proto.data.FieldBinlog deltalogs = 4;
inline int CompactionSegmentBinlogs::_internal_deltalogs_size() const {
  return _impl_.deltalogs_.size();
}
inline int CompactionSegmentBinlogs::deltalogs_size() const {
  return _internal_deltalogs_size();
}
inline void CompactionSegmentBinlogs::clear_deltalogs() {
  _impl_.deltalogs_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* CompactionSegmentBinlogs::mutable_deltalogs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CompactionSegmentBinlogs.deltalogs)
  return _impl_.deltalogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
CompactionSegmentBinlogs::mutable_deltalogs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.CompactionSegmentBinlogs.deltalogs)
  return &_impl_.deltalogs_;
}
inline const ::milvus::proto::data::FieldBinlog& CompactionSegmentBinlogs::_internal_deltalogs(int index) const {
  return _impl_.deltalogs_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& CompactionSegmentBinlogs::deltalogs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionSegmentBinlogs.deltalogs)
  return _internal_deltalogs(index);
}
inline ::milvus::proto::data::FieldBinlog* CompactionSegmentBinlogs::_internal_add_deltalogs() {
  return _impl_.deltalogs_.Add();
}
inline ::milvus::proto::data::FieldBinlog* CompactionSegmentBinlogs::add_deltalogs() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_deltalogs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.CompactionSegmentBinlogs.deltalogs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
CompactionSegmentBinlogs::deltalogs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.CompactionSegmentBinlogs.deltalogs)
  return _impl_.deltalogs_;
}

// string insert_channel = 5;
inline void CompactionSegmentBinlogs::clear_insert_channel() {
  _impl_.insert_channel_.ClearToEmpty();
}
inline const std::string& CompactionSegmentBinlogs::insert_channel() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionSegmentBinlogs.insert_channel)
  return _internal_insert_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompactionSegmentBinlogs::set_insert_channel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.insert_channel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionSegmentBinlogs.insert_channel)
}
inline std::string* CompactionSegmentBinlogs::mutable_insert_channel() {
  std::string* _s = _internal_mutable_insert_channel();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CompactionSegmentBinlogs.insert_channel)
  return _s;
}
inline const std::string& CompactionSegmentBinlogs::_internal_insert_channel() const {
  return _impl_.insert_channel_.Get();
}
inline void CompactionSegmentBinlogs::_internal_set_insert_channel(const std::string& value) {
  
  _impl_.insert_channel_.Set(value, GetArenaForAllocation());
}
inline std::string* CompactionSegmentBinlogs::_internal_mutable_insert_channel() {
  
  return _impl_.insert_channel_.Mutable(GetArenaForAllocation());
}
inline std::string* CompactionSegmentBinlogs::release_insert_channel() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.CompactionSegmentBinlogs.insert_channel)
  return _impl_.insert_channel_.Release();
}
inline void CompactionSegmentBinlogs::set_allocated_insert_channel(std::string* insert_channel) {
  if (insert_channel != nullptr) {
    
  } else {
    
  }
  _impl_.insert_channel_.SetAllocated(insert_channel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.insert_channel_.IsDefault()) {
    _impl_.insert_channel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.CompactionSegmentBinlogs.insert_channel)
}

// -------------------------------------------------------------------

// CompactionPlan

// int64 planID = 1;
inline void CompactionPlan::clear_planid() {
  _impl_.planid_ = int64_t{0};
}
inline int64_t CompactionPlan::_internal_planid() const {
  return _impl_.planid_;
}
inline int64_t CompactionPlan::planid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionPlan.planID)
  return _internal_planid();
}
inline void CompactionPlan::_internal_set_planid(int64_t value) {
  
  _impl_.planid_ = value;
}
inline void CompactionPlan::set_planid(int64_t value) {
  _internal_set_planid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionPlan.planID)
}

// repeated .milvus.proto.data.CompactionSegmentBinlogs segmentBinlogs = 2;
inline int CompactionPlan::_internal_segmentbinlogs_size() const {
  return _impl_.segmentbinlogs_.size();
}
inline int CompactionPlan::segmentbinlogs_size() const {
  return _internal_segmentbinlogs_size();
}
inline void CompactionPlan::clear_segmentbinlogs() {
  _impl_.segmentbinlogs_.Clear();
}
inline ::milvus::proto::data::CompactionSegmentBinlogs* CompactionPlan::mutable_segmentbinlogs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CompactionPlan.segmentBinlogs)
  return _impl_.segmentbinlogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CompactionSegmentBinlogs >*
CompactionPlan::mutable_segmentbinlogs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.CompactionPlan.segmentBinlogs)
  return &_impl_.segmentbinlogs_;
}
inline const ::milvus::proto::data::CompactionSegmentBinlogs& CompactionPlan::_internal_segmentbinlogs(int index) const {
  return _impl_.segmentbinlogs_.Get(index);
}
inline const ::milvus::proto::data::CompactionSegmentBinlogs& CompactionPlan::segmentbinlogs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionPlan.segmentBinlogs)
  return _internal_segmentbinlogs(index);
}
inline ::milvus::proto::data::CompactionSegmentBinlogs* CompactionPlan::_internal_add_segmentbinlogs() {
  return _impl_.segmentbinlogs_.Add();
}
inline ::milvus::proto::data::CompactionSegmentBinlogs* CompactionPlan::add_segmentbinlogs() {
  ::milvus::proto::data::CompactionSegmentBinlogs* _add = _internal_add_segmentbinlogs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.CompactionPlan.segmentBinlogs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CompactionSegmentBinlogs >&
CompactionPlan::segmentbinlogs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.CompactionPlan.segmentBinlogs)
  return _impl_.segmentbinlogs_;
}

// uint64 start_time = 3;
inline void CompactionPlan::clear_start_time() {
  _impl_.start_time_ = uint64_t{0u};
}
inline uint64_t CompactionPlan::_internal_start_time() const {
  return _impl_.start_time_;
}
inline uint64_t CompactionPlan::start_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionPlan.start_time)
  return _internal_start_time();
}
inline void CompactionPlan::_internal_set_start_time(uint64_t value) {
  
  _impl_.start_time_ = value;
}
inline void CompactionPlan::set_start_time(uint64_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionPlan.start_time)
}

// int32 timeout_in_seconds = 4;
inline void CompactionPlan::clear_timeout_in_seconds() {
  _impl_.timeout_in_seconds_ = 0;
}
inline int32_t CompactionPlan::_internal_timeout_in_seconds() const {
  return _impl_.timeout_in_seconds_;
}
inline int32_t CompactionPlan::timeout_in_seconds() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionPlan.timeout_in_seconds)
  return _internal_timeout_in_seconds();
}
inline void CompactionPlan::_internal_set_timeout_in_seconds(int32_t value) {
  
  _impl_.timeout_in_seconds_ = value;
}
inline void CompactionPlan::set_timeout_in_seconds(int32_t value) {
  _internal_set_timeout_in_seconds(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionPlan.timeout_in_seconds)
}

// .milvus.proto.data.CompactionType type = 5;
inline void CompactionPlan::clear_type() {
  _impl_.type_ = 0;
}
inline ::milvus::proto::data::CompactionType CompactionPlan::_internal_type() const {
  return static_cast< ::milvus::proto::data::CompactionType >(_impl_.type_);
}
inline ::milvus::proto::data::CompactionType CompactionPlan::type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionPlan.type)
  return _internal_type();
}
inline void CompactionPlan::_internal_set_type(::milvus::proto::data::CompactionType value) {
  
  _impl_.type_ = value;
}
inline void CompactionPlan::set_type(::milvus::proto::data::CompactionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionPlan.type)
}

// uint64 timetravel = 6;
inline void CompactionPlan::clear_timetravel() {
  _impl_.timetravel_ = uint64_t{0u};
}
inline uint64_t CompactionPlan::_internal_timetravel() const {
  return _impl_.timetravel_;
}
inline uint64_t CompactionPlan::timetravel() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionPlan.timetravel)
  return _internal_timetravel();
}
inline void CompactionPlan::_internal_set_timetravel(uint64_t value) {
  
  _impl_.timetravel_ = value;
}
inline void CompactionPlan::set_timetravel(uint64_t value) {
  _internal_set_timetravel(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionPlan.timetravel)
}

// string channel = 7;
inline void CompactionPlan::clear_channel() {
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& CompactionPlan::channel() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionPlan.channel)
  return _internal_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompactionPlan::set_channel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionPlan.channel)
}
inline std::string* CompactionPlan::mutable_channel() {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CompactionPlan.channel)
  return _s;
}
inline const std::string& CompactionPlan::_internal_channel() const {
  return _impl_.channel_.Get();
}
inline void CompactionPlan::_internal_set_channel(const std::string& value) {
  
  _impl_.channel_.Set(value, GetArenaForAllocation());
}
inline std::string* CompactionPlan::_internal_mutable_channel() {
  
  return _impl_.channel_.Mutable(GetArenaForAllocation());
}
inline std::string* CompactionPlan::release_channel() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.CompactionPlan.channel)
  return _impl_.channel_.Release();
}
inline void CompactionPlan::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  _impl_.channel_.SetAllocated(channel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_.IsDefault()) {
    _impl_.channel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.CompactionPlan.channel)
}

// int64 collection_ttl = 8;
inline void CompactionPlan::clear_collection_ttl() {
  _impl_.collection_ttl_ = int64_t{0};
}
inline int64_t CompactionPlan::_internal_collection_ttl() const {
  return _impl_.collection_ttl_;
}
inline int64_t CompactionPlan::collection_ttl() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionPlan.collection_ttl)
  return _internal_collection_ttl();
}
inline void CompactionPlan::_internal_set_collection_ttl(int64_t value) {
  
  _impl_.collection_ttl_ = value;
}
inline void CompactionPlan::set_collection_ttl(int64_t value) {
  _internal_set_collection_ttl(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionPlan.collection_ttl)
}

// int64 total_rows = 9;
inline void CompactionPlan::clear_total_rows() {
  _impl_.total_rows_ = int64_t{0};
}
inline int64_t CompactionPlan::_internal_total_rows() const {
  return _impl_.total_rows_;
}
inline int64_t CompactionPlan::total_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionPlan.total_rows)
  return _internal_total_rows();
}
inline void CompactionPlan::_internal_set_total_rows(int64_t value) {
  
  _impl_.total_rows_ = value;
}
inline void CompactionPlan::set_total_rows(int64_t value) {
  _internal_set_total_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionPlan.total_rows)
}

// -------------------------------------------------------------------

// CompactionResult

// int64 planID = 1;
inline void CompactionResult::clear_planid() {
  _impl_.planid_ = int64_t{0};
}
inline int64_t CompactionResult::_internal_planid() const {
  return _impl_.planid_;
}
inline int64_t CompactionResult::planid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionResult.planID)
  return _internal_planid();
}
inline void CompactionResult::_internal_set_planid(int64_t value) {
  
  _impl_.planid_ = value;
}
inline void CompactionResult::set_planid(int64_t value) {
  _internal_set_planid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionResult.planID)
}

// int64 segmentID = 2;
inline void CompactionResult::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t CompactionResult::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t CompactionResult::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionResult.segmentID)
  return _internal_segmentid();
}
inline void CompactionResult::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void CompactionResult::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionResult.segmentID)
}

// int64 num_of_rows = 3;
inline void CompactionResult::clear_num_of_rows() {
  _impl_.num_of_rows_ = int64_t{0};
}
inline int64_t CompactionResult::_internal_num_of_rows() const {
  return _impl_.num_of_rows_;
}
inline int64_t CompactionResult::num_of_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionResult.num_of_rows)
  return _internal_num_of_rows();
}
inline void CompactionResult::_internal_set_num_of_rows(int64_t value) {
  
  _impl_.num_of_rows_ = value;
}
inline void CompactionResult::set_num_of_rows(int64_t value) {
  _internal_set_num_of_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionResult.num_of_rows)
}

// repeated .milvus.proto.data.FieldBinlog insert_logs = 4;
inline int CompactionResult::_internal_insert_logs_size() const {
  return _impl_.insert_logs_.size();
}
inline int CompactionResult::insert_logs_size() const {
  return _internal_insert_logs_size();
}
inline void CompactionResult::clear_insert_logs() {
  _impl_.insert_logs_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* CompactionResult::mutable_insert_logs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CompactionResult.insert_logs)
  return _impl_.insert_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
CompactionResult::mutable_insert_logs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.CompactionResult.insert_logs)
  return &_impl_.insert_logs_;
}
inline const ::milvus::proto::data::FieldBinlog& CompactionResult::_internal_insert_logs(int index) const {
  return _impl_.insert_logs_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& CompactionResult::insert_logs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionResult.insert_logs)
  return _internal_insert_logs(index);
}
inline ::milvus::proto::data::FieldBinlog* CompactionResult::_internal_add_insert_logs() {
  return _impl_.insert_logs_.Add();
}
inline ::milvus::proto::data::FieldBinlog* CompactionResult::add_insert_logs() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_insert_logs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.CompactionResult.insert_logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
CompactionResult::insert_logs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.CompactionResult.insert_logs)
  return _impl_.insert_logs_;
}

// repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 5;
inline int CompactionResult::_internal_field2statslogpaths_size() const {
  return _impl_.field2statslogpaths_.size();
}
inline int CompactionResult::field2statslogpaths_size() const {
  return _internal_field2statslogpaths_size();
}
inline void CompactionResult::clear_field2statslogpaths() {
  _impl_.field2statslogpaths_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* CompactionResult::mutable_field2statslogpaths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CompactionResult.field2StatslogPaths)
  return _impl_.field2statslogpaths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
CompactionResult::mutable_field2statslogpaths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.CompactionResult.field2StatslogPaths)
  return &_impl_.field2statslogpaths_;
}
inline const ::milvus::proto::data::FieldBinlog& CompactionResult::_internal_field2statslogpaths(int index) const {
  return _impl_.field2statslogpaths_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& CompactionResult::field2statslogpaths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionResult.field2StatslogPaths)
  return _internal_field2statslogpaths(index);
}
inline ::milvus::proto::data::FieldBinlog* CompactionResult::_internal_add_field2statslogpaths() {
  return _impl_.field2statslogpaths_.Add();
}
inline ::milvus::proto::data::FieldBinlog* CompactionResult::add_field2statslogpaths() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_field2statslogpaths();
  // @@protoc_insertion_point(field_add:milvus.proto.data.CompactionResult.field2StatslogPaths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
CompactionResult::field2statslogpaths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.CompactionResult.field2StatslogPaths)
  return _impl_.field2statslogpaths_;
}

// repeated .milvus.proto.data.FieldBinlog deltalogs = 6;
inline int CompactionResult::_internal_deltalogs_size() const {
  return _impl_.deltalogs_.size();
}
inline int CompactionResult::deltalogs_size() const {
  return _internal_deltalogs_size();
}
inline void CompactionResult::clear_deltalogs() {
  _impl_.deltalogs_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* CompactionResult::mutable_deltalogs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CompactionResult.deltalogs)
  return _impl_.deltalogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
CompactionResult::mutable_deltalogs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.CompactionResult.deltalogs)
  return &_impl_.deltalogs_;
}
inline const ::milvus::proto::data::FieldBinlog& CompactionResult::_internal_deltalogs(int index) const {
  return _impl_.deltalogs_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& CompactionResult::deltalogs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionResult.deltalogs)
  return _internal_deltalogs(index);
}
inline ::milvus::proto::data::FieldBinlog* CompactionResult::_internal_add_deltalogs() {
  return _impl_.deltalogs_.Add();
}
inline ::milvus::proto::data::FieldBinlog* CompactionResult::add_deltalogs() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_deltalogs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.CompactionResult.deltalogs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
CompactionResult::deltalogs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.CompactionResult.deltalogs)
  return _impl_.deltalogs_;
}

// string channel = 7;
inline void CompactionResult::clear_channel() {
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& CompactionResult::channel() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionResult.channel)
  return _internal_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompactionResult::set_channel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionResult.channel)
}
inline std::string* CompactionResult::mutable_channel() {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CompactionResult.channel)
  return _s;
}
inline const std::string& CompactionResult::_internal_channel() const {
  return _impl_.channel_.Get();
}
inline void CompactionResult::_internal_set_channel(const std::string& value) {
  
  _impl_.channel_.Set(value, GetArenaForAllocation());
}
inline std::string* CompactionResult::_internal_mutable_channel() {
  
  return _impl_.channel_.Mutable(GetArenaForAllocation());
}
inline std::string* CompactionResult::release_channel() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.CompactionResult.channel)
  return _impl_.channel_.Release();
}
inline void CompactionResult::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  _impl_.channel_.SetAllocated(channel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_.IsDefault()) {
    _impl_.channel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.CompactionResult.channel)
}

// -------------------------------------------------------------------

// CompactionStateResult

// int64 planID = 1;
inline void CompactionStateResult::clear_planid() {
  _impl_.planid_ = int64_t{0};
}
inline int64_t CompactionStateResult::_internal_planid() const {
  return _impl_.planid_;
}
inline int64_t CompactionStateResult::planid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionStateResult.planID)
  return _internal_planid();
}
inline void CompactionStateResult::_internal_set_planid(int64_t value) {
  
  _impl_.planid_ = value;
}
inline void CompactionStateResult::set_planid(int64_t value) {
  _internal_set_planid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionStateResult.planID)
}

// .milvus.proto.common.CompactionState state = 2;
inline void CompactionStateResult::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::CompactionState CompactionStateResult::_internal_state() const {
  return static_cast< ::milvus::proto::common::CompactionState >(_impl_.state_);
}
inline ::milvus::proto::common::CompactionState CompactionStateResult::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionStateResult.state)
  return _internal_state();
}
inline void CompactionStateResult::_internal_set_state(::milvus::proto::common::CompactionState value) {
  
  _impl_.state_ = value;
}
inline void CompactionStateResult::set_state(::milvus::proto::common::CompactionState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.CompactionStateResult.state)
}

// .milvus.proto.data.CompactionResult result = 3;
inline bool CompactionStateResult::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool CompactionStateResult::has_result() const {
  return _internal_has_result();
}
inline void CompactionStateResult::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::milvus::proto::data::CompactionResult& CompactionStateResult::_internal_result() const {
  const ::milvus::proto::data::CompactionResult* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::data::CompactionResult&>(
      ::milvus::proto::data::_CompactionResult_default_instance_);
}
inline const ::milvus::proto::data::CompactionResult& CompactionStateResult::result() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionStateResult.result)
  return _internal_result();
}
inline void CompactionStateResult::unsafe_arena_set_allocated_result(
    ::milvus::proto::data::CompactionResult* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.CompactionStateResult.result)
}
inline ::milvus::proto::data::CompactionResult* CompactionStateResult::release_result() {
  
  ::milvus::proto::data::CompactionResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::data::CompactionResult* CompactionStateResult::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.CompactionStateResult.result)
  
  ::milvus::proto::data::CompactionResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::milvus::proto::data::CompactionResult* CompactionStateResult::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::data::CompactionResult>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::milvus::proto::data::CompactionResult* CompactionStateResult::mutable_result() {
  ::milvus::proto::data::CompactionResult* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CompactionStateResult.result)
  return _msg;
}
inline void CompactionStateResult::set_allocated_result(::milvus::proto::data::CompactionResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.CompactionStateResult.result)
}

// -------------------------------------------------------------------

// CompactionStateResponse

// .milvus.proto.common.Status status = 1;
inline bool CompactionStateResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool CompactionStateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& CompactionStateResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& CompactionStateResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionStateResponse.status)
  return _internal_status();
}
inline void CompactionStateResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.CompactionStateResponse.status)
}
inline ::milvus::proto::common::Status* CompactionStateResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* CompactionStateResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.CompactionStateResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* CompactionStateResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* CompactionStateResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CompactionStateResponse.status)
  return _msg;
}
inline void CompactionStateResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.CompactionStateResponse.status)
}

// repeated .milvus.proto.data.CompactionStateResult results = 2;
inline int CompactionStateResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int CompactionStateResponse::results_size() const {
  return _internal_results_size();
}
inline void CompactionStateResponse::clear_results() {
  _impl_.results_.Clear();
}
inline ::milvus::proto::data::CompactionStateResult* CompactionStateResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.CompactionStateResponse.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CompactionStateResult >*
CompactionStateResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.CompactionStateResponse.results)
  return &_impl_.results_;
}
inline const ::milvus::proto::data::CompactionStateResult& CompactionStateResponse::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::milvus::proto::data::CompactionStateResult& CompactionStateResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.CompactionStateResponse.results)
  return _internal_results(index);
}
inline ::milvus::proto::data::CompactionStateResult* CompactionStateResponse::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::milvus::proto::data::CompactionStateResult* CompactionStateResponse::add_results() {
  ::milvus::proto::data::CompactionStateResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:milvus.proto.data.CompactionStateResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::CompactionStateResult >&
CompactionStateResponse::results() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.CompactionStateResponse.results)
  return _impl_.results_;
}

// -------------------------------------------------------------------

// SegmentFieldBinlogMeta

// int64 fieldID = 1;
inline void SegmentFieldBinlogMeta::clear_fieldid() {
  _impl_.fieldid_ = int64_t{0};
}
inline int64_t SegmentFieldBinlogMeta::_internal_fieldid() const {
  return _impl_.fieldid_;
}
inline int64_t SegmentFieldBinlogMeta::fieldid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentFieldBinlogMeta.fieldID)
  return _internal_fieldid();
}
inline void SegmentFieldBinlogMeta::_internal_set_fieldid(int64_t value) {
  
  _impl_.fieldid_ = value;
}
inline void SegmentFieldBinlogMeta::set_fieldid(int64_t value) {
  _internal_set_fieldid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentFieldBinlogMeta.fieldID)
}

// string binlog_path = 2;
inline void SegmentFieldBinlogMeta::clear_binlog_path() {
  _impl_.binlog_path_.ClearToEmpty();
}
inline const std::string& SegmentFieldBinlogMeta::binlog_path() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentFieldBinlogMeta.binlog_path)
  return _internal_binlog_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegmentFieldBinlogMeta::set_binlog_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.binlog_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentFieldBinlogMeta.binlog_path)
}
inline std::string* SegmentFieldBinlogMeta::mutable_binlog_path() {
  std::string* _s = _internal_mutable_binlog_path();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SegmentFieldBinlogMeta.binlog_path)
  return _s;
}
inline const std::string& SegmentFieldBinlogMeta::_internal_binlog_path() const {
  return _impl_.binlog_path_.Get();
}
inline void SegmentFieldBinlogMeta::_internal_set_binlog_path(const std::string& value) {
  
  _impl_.binlog_path_.Set(value, GetArenaForAllocation());
}
inline std::string* SegmentFieldBinlogMeta::_internal_mutable_binlog_path() {
  
  return _impl_.binlog_path_.Mutable(GetArenaForAllocation());
}
inline std::string* SegmentFieldBinlogMeta::release_binlog_path() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SegmentFieldBinlogMeta.binlog_path)
  return _impl_.binlog_path_.Release();
}
inline void SegmentFieldBinlogMeta::set_allocated_binlog_path(std::string* binlog_path) {
  if (binlog_path != nullptr) {
    
  } else {
    
  }
  _impl_.binlog_path_.SetAllocated(binlog_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.binlog_path_.IsDefault()) {
    _impl_.binlog_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SegmentFieldBinlogMeta.binlog_path)
}

// -------------------------------------------------------------------

// WatchChannelsRequest

// int64 collectionID = 1;
inline void WatchChannelsRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t WatchChannelsRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t WatchChannelsRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.WatchChannelsRequest.collectionID)
  return _internal_collectionid();
}
inline void WatchChannelsRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void WatchChannelsRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.WatchChannelsRequest.collectionID)
}

// repeated string channelNames = 2;
inline int WatchChannelsRequest::_internal_channelnames_size() const {
  return _impl_.channelnames_.size();
}
inline int WatchChannelsRequest::channelnames_size() const {
  return _internal_channelnames_size();
}
inline void WatchChannelsRequest::clear_channelnames() {
  _impl_.channelnames_.Clear();
}
inline std::string* WatchChannelsRequest::add_channelnames() {
  std::string* _s = _internal_add_channelnames();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.data.WatchChannelsRequest.channelNames)
  return _s;
}
inline const std::string& WatchChannelsRequest::_internal_channelnames(int index) const {
  return _impl_.channelnames_.Get(index);
}
inline const std::string& WatchChannelsRequest::channelnames(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.WatchChannelsRequest.channelNames)
  return _internal_channelnames(index);
}
inline std::string* WatchChannelsRequest::mutable_channelnames(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.WatchChannelsRequest.channelNames)
  return _impl_.channelnames_.Mutable(index);
}
inline void WatchChannelsRequest::set_channelnames(int index, const std::string& value) {
  _impl_.channelnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.WatchChannelsRequest.channelNames)
}
inline void WatchChannelsRequest::set_channelnames(int index, std::string&& value) {
  _impl_.channelnames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.data.WatchChannelsRequest.channelNames)
}
inline void WatchChannelsRequest::set_channelnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channelnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.data.WatchChannelsRequest.channelNames)
}
inline void WatchChannelsRequest::set_channelnames(int index, const char* value, size_t size) {
  _impl_.channelnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.data.WatchChannelsRequest.channelNames)
}
inline std::string* WatchChannelsRequest::_internal_add_channelnames() {
  return _impl_.channelnames_.Add();
}
inline void WatchChannelsRequest::add_channelnames(const std::string& value) {
  _impl_.channelnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.WatchChannelsRequest.channelNames)
}
inline void WatchChannelsRequest::add_channelnames(std::string&& value) {
  _impl_.channelnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.data.WatchChannelsRequest.channelNames)
}
inline void WatchChannelsRequest::add_channelnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channelnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.data.WatchChannelsRequest.channelNames)
}
inline void WatchChannelsRequest::add_channelnames(const char* value, size_t size) {
  _impl_.channelnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.data.WatchChannelsRequest.channelNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WatchChannelsRequest::channelnames() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.WatchChannelsRequest.channelNames)
  return _impl_.channelnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WatchChannelsRequest::mutable_channelnames() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.WatchChannelsRequest.channelNames)
  return &_impl_.channelnames_;
}

// repeated .milvus.proto.common.KeyDataPair start_positions = 3;
inline int WatchChannelsRequest::_internal_start_positions_size() const {
  return _impl_.start_positions_.size();
}
inline int WatchChannelsRequest::start_positions_size() const {
  return _internal_start_positions_size();
}
inline ::milvus::proto::common::KeyDataPair* WatchChannelsRequest::mutable_start_positions(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.WatchChannelsRequest.start_positions)
  return _impl_.start_positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >*
WatchChannelsRequest::mutable_start_positions() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.WatchChannelsRequest.start_positions)
  return &_impl_.start_positions_;
}
inline const ::milvus::proto::common::KeyDataPair& WatchChannelsRequest::_internal_start_positions(int index) const {
  return _impl_.start_positions_.Get(index);
}
inline const ::milvus::proto::common::KeyDataPair& WatchChannelsRequest::start_positions(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.WatchChannelsRequest.start_positions)
  return _internal_start_positions(index);
}
inline ::milvus::proto::common::KeyDataPair* WatchChannelsRequest::_internal_add_start_positions() {
  return _impl_.start_positions_.Add();
}
inline ::milvus::proto::common::KeyDataPair* WatchChannelsRequest::add_start_positions() {
  ::milvus::proto::common::KeyDataPair* _add = _internal_add_start_positions();
  // @@protoc_insertion_point(field_add:milvus.proto.data.WatchChannelsRequest.start_positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >&
WatchChannelsRequest::start_positions() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.WatchChannelsRequest.start_positions)
  return _impl_.start_positions_;
}

// .milvus.proto.schema.CollectionSchema schema = 4;
inline bool WatchChannelsRequest::_internal_has_schema() const {
  return this != internal_default_instance() && _impl_.schema_ != nullptr;
}
inline bool WatchChannelsRequest::has_schema() const {
  return _internal_has_schema();
}
inline const ::milvus::proto::schema::CollectionSchema& WatchChannelsRequest::_internal_schema() const {
  const ::milvus::proto::schema::CollectionSchema* p = _impl_.schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::schema::CollectionSchema&>(
      ::milvus::proto::schema::_CollectionSchema_default_instance_);
}
inline const ::milvus::proto::schema::CollectionSchema& WatchChannelsRequest::schema() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.WatchChannelsRequest.schema)
  return _internal_schema();
}
inline void WatchChannelsRequest::unsafe_arena_set_allocated_schema(
    ::milvus::proto::schema::CollectionSchema* schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_);
  }
  _impl_.schema_ = schema;
  if (schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.WatchChannelsRequest.schema)
}
inline ::milvus::proto::schema::CollectionSchema* WatchChannelsRequest::release_schema() {
  
  ::milvus::proto::schema::CollectionSchema* temp = _impl_.schema_;
  _impl_.schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::schema::CollectionSchema* WatchChannelsRequest::unsafe_arena_release_schema() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.WatchChannelsRequest.schema)
  
  ::milvus::proto::schema::CollectionSchema* temp = _impl_.schema_;
  _impl_.schema_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::CollectionSchema* WatchChannelsRequest::_internal_mutable_schema() {
  
  if (_impl_.schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::CollectionSchema>(GetArenaForAllocation());
    _impl_.schema_ = p;
  }
  return _impl_.schema_;
}
inline ::milvus::proto::schema::CollectionSchema* WatchChannelsRequest::mutable_schema() {
  ::milvus::proto::schema::CollectionSchema* _msg = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.WatchChannelsRequest.schema)
  return _msg;
}
inline void WatchChannelsRequest::set_allocated_schema(::milvus::proto::schema::CollectionSchema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_);
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema));
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.WatchChannelsRequest.schema)
}

// -------------------------------------------------------------------

// WatchChannelsResponse

// .milvus.proto.common.Status status = 1;
inline bool WatchChannelsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool WatchChannelsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& WatchChannelsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& WatchChannelsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.WatchChannelsResponse.status)
  return _internal_status();
}
inline void WatchChannelsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.WatchChannelsResponse.status)
}
inline ::milvus::proto::common::Status* WatchChannelsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* WatchChannelsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.WatchChannelsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* WatchChannelsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* WatchChannelsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.WatchChannelsResponse.status)
  return _msg;
}
inline void WatchChannelsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.WatchChannelsResponse.status)
}

// -------------------------------------------------------------------

// SetSegmentStateRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool SetSegmentStateRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SetSegmentStateRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& SetSegmentStateRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& SetSegmentStateRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SetSegmentStateRequest.base)
  return _internal_base();
}
inline void SetSegmentStateRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SetSegmentStateRequest.base)
}
inline ::milvus::proto::common::MsgBase* SetSegmentStateRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* SetSegmentStateRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SetSegmentStateRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* SetSegmentStateRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* SetSegmentStateRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SetSegmentStateRequest.base)
  return _msg;
}
inline void SetSegmentStateRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SetSegmentStateRequest.base)
}

// int64 segment_id = 2;
inline void SetSegmentStateRequest::clear_segment_id() {
  _impl_.segment_id_ = int64_t{0};
}
inline int64_t SetSegmentStateRequest::_internal_segment_id() const {
  return _impl_.segment_id_;
}
inline int64_t SetSegmentStateRequest::segment_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SetSegmentStateRequest.segment_id)
  return _internal_segment_id();
}
inline void SetSegmentStateRequest::_internal_set_segment_id(int64_t value) {
  
  _impl_.segment_id_ = value;
}
inline void SetSegmentStateRequest::set_segment_id(int64_t value) {
  _internal_set_segment_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SetSegmentStateRequest.segment_id)
}

// .milvus.proto.common.SegmentState new_state = 3;
inline void SetSegmentStateRequest::clear_new_state() {
  _impl_.new_state_ = 0;
}
inline ::milvus::proto::common::SegmentState SetSegmentStateRequest::_internal_new_state() const {
  return static_cast< ::milvus::proto::common::SegmentState >(_impl_.new_state_);
}
inline ::milvus::proto::common::SegmentState SetSegmentStateRequest::new_state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SetSegmentStateRequest.new_state)
  return _internal_new_state();
}
inline void SetSegmentStateRequest::_internal_set_new_state(::milvus::proto::common::SegmentState value) {
  
  _impl_.new_state_ = value;
}
inline void SetSegmentStateRequest::set_new_state(::milvus::proto::common::SegmentState value) {
  _internal_set_new_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SetSegmentStateRequest.new_state)
}

// -------------------------------------------------------------------

// SetSegmentStateResponse

// .milvus.proto.common.Status status = 1;
inline bool SetSegmentStateResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool SetSegmentStateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& SetSegmentStateResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& SetSegmentStateResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SetSegmentStateResponse.status)
  return _internal_status();
}
inline void SetSegmentStateResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SetSegmentStateResponse.status)
}
inline ::milvus::proto::common::Status* SetSegmentStateResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* SetSegmentStateResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SetSegmentStateResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* SetSegmentStateResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* SetSegmentStateResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SetSegmentStateResponse.status)
  return _msg;
}
inline void SetSegmentStateResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SetSegmentStateResponse.status)
}

// -------------------------------------------------------------------

// DropVirtualChannelRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropVirtualChannelRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DropVirtualChannelRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DropVirtualChannelRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DropVirtualChannelRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DropVirtualChannelRequest.base)
  return _internal_base();
}
inline void DropVirtualChannelRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.DropVirtualChannelRequest.base)
}
inline ::milvus::proto::common::MsgBase* DropVirtualChannelRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropVirtualChannelRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.DropVirtualChannelRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropVirtualChannelRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DropVirtualChannelRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.DropVirtualChannelRequest.base)
  return _msg;
}
inline void DropVirtualChannelRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.DropVirtualChannelRequest.base)
}

// string channel_name = 2;
inline void DropVirtualChannelRequest::clear_channel_name() {
  _impl_.channel_name_.ClearToEmpty();
}
inline const std::string& DropVirtualChannelRequest::channel_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DropVirtualChannelRequest.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropVirtualChannelRequest::set_channel_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.DropVirtualChannelRequest.channel_name)
}
inline std::string* DropVirtualChannelRequest::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.DropVirtualChannelRequest.channel_name)
  return _s;
}
inline const std::string& DropVirtualChannelRequest::_internal_channel_name() const {
  return _impl_.channel_name_.Get();
}
inline void DropVirtualChannelRequest::_internal_set_channel_name(const std::string& value) {
  
  _impl_.channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropVirtualChannelRequest::_internal_mutable_channel_name() {
  
  return _impl_.channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropVirtualChannelRequest::release_channel_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.DropVirtualChannelRequest.channel_name)
  return _impl_.channel_name_.Release();
}
inline void DropVirtualChannelRequest::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  _impl_.channel_name_.SetAllocated(channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.DropVirtualChannelRequest.channel_name)
}

// repeated .milvus.proto.data.DropVirtualChannelSegment segments = 3;
inline int DropVirtualChannelRequest::_internal_segments_size() const {
  return _impl_.segments_.size();
}
inline int DropVirtualChannelRequest::segments_size() const {
  return _internal_segments_size();
}
inline void DropVirtualChannelRequest::clear_segments() {
  _impl_.segments_.Clear();
}
inline ::milvus::proto::data::DropVirtualChannelSegment* DropVirtualChannelRequest::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.DropVirtualChannelRequest.segments)
  return _impl_.segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::DropVirtualChannelSegment >*
DropVirtualChannelRequest::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.DropVirtualChannelRequest.segments)
  return &_impl_.segments_;
}
inline const ::milvus::proto::data::DropVirtualChannelSegment& DropVirtualChannelRequest::_internal_segments(int index) const {
  return _impl_.segments_.Get(index);
}
inline const ::milvus::proto::data::DropVirtualChannelSegment& DropVirtualChannelRequest::segments(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DropVirtualChannelRequest.segments)
  return _internal_segments(index);
}
inline ::milvus::proto::data::DropVirtualChannelSegment* DropVirtualChannelRequest::_internal_add_segments() {
  return _impl_.segments_.Add();
}
inline ::milvus::proto::data::DropVirtualChannelSegment* DropVirtualChannelRequest::add_segments() {
  ::milvus::proto::data::DropVirtualChannelSegment* _add = _internal_add_segments();
  // @@protoc_insertion_point(field_add:milvus.proto.data.DropVirtualChannelRequest.segments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::DropVirtualChannelSegment >&
DropVirtualChannelRequest::segments() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.DropVirtualChannelRequest.segments)
  return _impl_.segments_;
}

// -------------------------------------------------------------------

// DropVirtualChannelSegment

// int64 segmentID = 1;
inline void DropVirtualChannelSegment::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t DropVirtualChannelSegment::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t DropVirtualChannelSegment::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DropVirtualChannelSegment.segmentID)
  return _internal_segmentid();
}
inline void DropVirtualChannelSegment::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void DropVirtualChannelSegment::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.DropVirtualChannelSegment.segmentID)
}

// int64 collectionID = 2;
inline void DropVirtualChannelSegment::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t DropVirtualChannelSegment::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t DropVirtualChannelSegment::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DropVirtualChannelSegment.collectionID)
  return _internal_collectionid();
}
inline void DropVirtualChannelSegment::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void DropVirtualChannelSegment::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.DropVirtualChannelSegment.collectionID)
}

// repeated .milvus.proto.data.FieldBinlog field2BinlogPaths = 3;
inline int DropVirtualChannelSegment::_internal_field2binlogpaths_size() const {
  return _impl_.field2binlogpaths_.size();
}
inline int DropVirtualChannelSegment::field2binlogpaths_size() const {
  return _internal_field2binlogpaths_size();
}
inline void DropVirtualChannelSegment::clear_field2binlogpaths() {
  _impl_.field2binlogpaths_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* DropVirtualChannelSegment::mutable_field2binlogpaths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.DropVirtualChannelSegment.field2BinlogPaths)
  return _impl_.field2binlogpaths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
DropVirtualChannelSegment::mutable_field2binlogpaths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.DropVirtualChannelSegment.field2BinlogPaths)
  return &_impl_.field2binlogpaths_;
}
inline const ::milvus::proto::data::FieldBinlog& DropVirtualChannelSegment::_internal_field2binlogpaths(int index) const {
  return _impl_.field2binlogpaths_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& DropVirtualChannelSegment::field2binlogpaths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DropVirtualChannelSegment.field2BinlogPaths)
  return _internal_field2binlogpaths(index);
}
inline ::milvus::proto::data::FieldBinlog* DropVirtualChannelSegment::_internal_add_field2binlogpaths() {
  return _impl_.field2binlogpaths_.Add();
}
inline ::milvus::proto::data::FieldBinlog* DropVirtualChannelSegment::add_field2binlogpaths() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_field2binlogpaths();
  // @@protoc_insertion_point(field_add:milvus.proto.data.DropVirtualChannelSegment.field2BinlogPaths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
DropVirtualChannelSegment::field2binlogpaths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.DropVirtualChannelSegment.field2BinlogPaths)
  return _impl_.field2binlogpaths_;
}

// repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 4;
inline int DropVirtualChannelSegment::_internal_field2statslogpaths_size() const {
  return _impl_.field2statslogpaths_.size();
}
inline int DropVirtualChannelSegment::field2statslogpaths_size() const {
  return _internal_field2statslogpaths_size();
}
inline void DropVirtualChannelSegment::clear_field2statslogpaths() {
  _impl_.field2statslogpaths_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* DropVirtualChannelSegment::mutable_field2statslogpaths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.DropVirtualChannelSegment.field2StatslogPaths)
  return _impl_.field2statslogpaths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
DropVirtualChannelSegment::mutable_field2statslogpaths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.DropVirtualChannelSegment.field2StatslogPaths)
  return &_impl_.field2statslogpaths_;
}
inline const ::milvus::proto::data::FieldBinlog& DropVirtualChannelSegment::_internal_field2statslogpaths(int index) const {
  return _impl_.field2statslogpaths_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& DropVirtualChannelSegment::field2statslogpaths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DropVirtualChannelSegment.field2StatslogPaths)
  return _internal_field2statslogpaths(index);
}
inline ::milvus::proto::data::FieldBinlog* DropVirtualChannelSegment::_internal_add_field2statslogpaths() {
  return _impl_.field2statslogpaths_.Add();
}
inline ::milvus::proto::data::FieldBinlog* DropVirtualChannelSegment::add_field2statslogpaths() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_field2statslogpaths();
  // @@protoc_insertion_point(field_add:milvus.proto.data.DropVirtualChannelSegment.field2StatslogPaths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
DropVirtualChannelSegment::field2statslogpaths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.DropVirtualChannelSegment.field2StatslogPaths)
  return _impl_.field2statslogpaths_;
}

// repeated .milvus.proto.data.FieldBinlog deltalogs = 5;
inline int DropVirtualChannelSegment::_internal_deltalogs_size() const {
  return _impl_.deltalogs_.size();
}
inline int DropVirtualChannelSegment::deltalogs_size() const {
  return _internal_deltalogs_size();
}
inline void DropVirtualChannelSegment::clear_deltalogs() {
  _impl_.deltalogs_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* DropVirtualChannelSegment::mutable_deltalogs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.DropVirtualChannelSegment.deltalogs)
  return _impl_.deltalogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
DropVirtualChannelSegment::mutable_deltalogs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.DropVirtualChannelSegment.deltalogs)
  return &_impl_.deltalogs_;
}
inline const ::milvus::proto::data::FieldBinlog& DropVirtualChannelSegment::_internal_deltalogs(int index) const {
  return _impl_.deltalogs_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& DropVirtualChannelSegment::deltalogs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DropVirtualChannelSegment.deltalogs)
  return _internal_deltalogs(index);
}
inline ::milvus::proto::data::FieldBinlog* DropVirtualChannelSegment::_internal_add_deltalogs() {
  return _impl_.deltalogs_.Add();
}
inline ::milvus::proto::data::FieldBinlog* DropVirtualChannelSegment::add_deltalogs() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_deltalogs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.DropVirtualChannelSegment.deltalogs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
DropVirtualChannelSegment::deltalogs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.DropVirtualChannelSegment.deltalogs)
  return _impl_.deltalogs_;
}

// .milvus.proto.msg.MsgPosition startPosition = 6;
inline bool DropVirtualChannelSegment::_internal_has_startposition() const {
  return this != internal_default_instance() && _impl_.startposition_ != nullptr;
}
inline bool DropVirtualChannelSegment::has_startposition() const {
  return _internal_has_startposition();
}
inline const ::milvus::proto::msg::MsgPosition& DropVirtualChannelSegment::_internal_startposition() const {
  const ::milvus::proto::msg::MsgPosition* p = _impl_.startposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::msg::MsgPosition&>(
      ::milvus::proto::msg::_MsgPosition_default_instance_);
}
inline const ::milvus::proto::msg::MsgPosition& DropVirtualChannelSegment::startposition() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DropVirtualChannelSegment.startPosition)
  return _internal_startposition();
}
inline void DropVirtualChannelSegment::unsafe_arena_set_allocated_startposition(
    ::milvus::proto::msg::MsgPosition* startposition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.startposition_);
  }
  _impl_.startposition_ = startposition;
  if (startposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.DropVirtualChannelSegment.startPosition)
}
inline ::milvus::proto::msg::MsgPosition* DropVirtualChannelSegment::release_startposition() {
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.startposition_;
  _impl_.startposition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* DropVirtualChannelSegment::unsafe_arena_release_startposition() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.DropVirtualChannelSegment.startPosition)
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.startposition_;
  _impl_.startposition_ = nullptr;
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* DropVirtualChannelSegment::_internal_mutable_startposition() {
  
  if (_impl_.startposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::msg::MsgPosition>(GetArenaForAllocation());
    _impl_.startposition_ = p;
  }
  return _impl_.startposition_;
}
inline ::milvus::proto::msg::MsgPosition* DropVirtualChannelSegment::mutable_startposition() {
  ::milvus::proto::msg::MsgPosition* _msg = _internal_mutable_startposition();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.DropVirtualChannelSegment.startPosition)
  return _msg;
}
inline void DropVirtualChannelSegment::set_allocated_startposition(::milvus::proto::msg::MsgPosition* startposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.startposition_);
  }
  if (startposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startposition));
    if (message_arena != submessage_arena) {
      startposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startposition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.startposition_ = startposition;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.DropVirtualChannelSegment.startPosition)
}

// .milvus.proto.msg.MsgPosition checkPoint = 7;
inline bool DropVirtualChannelSegment::_internal_has_checkpoint() const {
  return this != internal_default_instance() && _impl_.checkpoint_ != nullptr;
}
inline bool DropVirtualChannelSegment::has_checkpoint() const {
  return _internal_has_checkpoint();
}
inline const ::milvus::proto::msg::MsgPosition& DropVirtualChannelSegment::_internal_checkpoint() const {
  const ::milvus::proto::msg::MsgPosition* p = _impl_.checkpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::msg::MsgPosition&>(
      ::milvus::proto::msg::_MsgPosition_default_instance_);
}
inline const ::milvus::proto::msg::MsgPosition& DropVirtualChannelSegment::checkpoint() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DropVirtualChannelSegment.checkPoint)
  return _internal_checkpoint();
}
inline void DropVirtualChannelSegment::unsafe_arena_set_allocated_checkpoint(
    ::milvus::proto::msg::MsgPosition* checkpoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.checkpoint_);
  }
  _impl_.checkpoint_ = checkpoint;
  if (checkpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.DropVirtualChannelSegment.checkPoint)
}
inline ::milvus::proto::msg::MsgPosition* DropVirtualChannelSegment::release_checkpoint() {
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.checkpoint_;
  _impl_.checkpoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* DropVirtualChannelSegment::unsafe_arena_release_checkpoint() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.DropVirtualChannelSegment.checkPoint)
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.checkpoint_;
  _impl_.checkpoint_ = nullptr;
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* DropVirtualChannelSegment::_internal_mutable_checkpoint() {
  
  if (_impl_.checkpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::msg::MsgPosition>(GetArenaForAllocation());
    _impl_.checkpoint_ = p;
  }
  return _impl_.checkpoint_;
}
inline ::milvus::proto::msg::MsgPosition* DropVirtualChannelSegment::mutable_checkpoint() {
  ::milvus::proto::msg::MsgPosition* _msg = _internal_mutable_checkpoint();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.DropVirtualChannelSegment.checkPoint)
  return _msg;
}
inline void DropVirtualChannelSegment::set_allocated_checkpoint(::milvus::proto::msg::MsgPosition* checkpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.checkpoint_);
  }
  if (checkpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(checkpoint));
    if (message_arena != submessage_arena) {
      checkpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkpoint, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.checkpoint_ = checkpoint;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.DropVirtualChannelSegment.checkPoint)
}

// int64 numOfRows = 8;
inline void DropVirtualChannelSegment::clear_numofrows() {
  _impl_.numofrows_ = int64_t{0};
}
inline int64_t DropVirtualChannelSegment::_internal_numofrows() const {
  return _impl_.numofrows_;
}
inline int64_t DropVirtualChannelSegment::numofrows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DropVirtualChannelSegment.numOfRows)
  return _internal_numofrows();
}
inline void DropVirtualChannelSegment::_internal_set_numofrows(int64_t value) {
  
  _impl_.numofrows_ = value;
}
inline void DropVirtualChannelSegment::set_numofrows(int64_t value) {
  _internal_set_numofrows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.DropVirtualChannelSegment.numOfRows)
}

// -------------------------------------------------------------------

// DropVirtualChannelResponse

// .milvus.proto.common.Status status = 1;
inline bool DropVirtualChannelResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool DropVirtualChannelResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& DropVirtualChannelResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& DropVirtualChannelResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.DropVirtualChannelResponse.status)
  return _internal_status();
}
inline void DropVirtualChannelResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.DropVirtualChannelResponse.status)
}
inline ::milvus::proto::common::Status* DropVirtualChannelResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* DropVirtualChannelResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.DropVirtualChannelResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* DropVirtualChannelResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* DropVirtualChannelResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.DropVirtualChannelResponse.status)
  return _msg;
}
inline void DropVirtualChannelResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.DropVirtualChannelResponse.status)
}

// -------------------------------------------------------------------

// ImportTask

// .milvus.proto.common.Status status = 1;
inline bool ImportTask::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ImportTask::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ImportTask::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ImportTask::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTask.status)
  return _internal_status();
}
inline void ImportTask::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.ImportTask.status)
}
inline ::milvus::proto::common::Status* ImportTask::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ImportTask::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ImportTask.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ImportTask::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ImportTask::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTask.status)
  return _msg;
}
inline void ImportTask::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ImportTask.status)
}

// int64 collection_id = 2;
inline void ImportTask::clear_collection_id() {
  _impl_.collection_id_ = int64_t{0};
}
inline int64_t ImportTask::_internal_collection_id() const {
  return _impl_.collection_id_;
}
inline int64_t ImportTask::collection_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTask.collection_id)
  return _internal_collection_id();
}
inline void ImportTask::_internal_set_collection_id(int64_t value) {
  
  _impl_.collection_id_ = value;
}
inline void ImportTask::set_collection_id(int64_t value) {
  _internal_set_collection_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTask.collection_id)
}

// int64 partition_id = 3;
inline void ImportTask::clear_partition_id() {
  _impl_.partition_id_ = int64_t{0};
}
inline int64_t ImportTask::_internal_partition_id() const {
  return _impl_.partition_id_;
}
inline int64_t ImportTask::partition_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTask.partition_id)
  return _internal_partition_id();
}
inline void ImportTask::_internal_set_partition_id(int64_t value) {
  
  _impl_.partition_id_ = value;
}
inline void ImportTask::set_partition_id(int64_t value) {
  _internal_set_partition_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTask.partition_id)
}

// repeated string channel_names = 4;
inline int ImportTask::_internal_channel_names_size() const {
  return _impl_.channel_names_.size();
}
inline int ImportTask::channel_names_size() const {
  return _internal_channel_names_size();
}
inline void ImportTask::clear_channel_names() {
  _impl_.channel_names_.Clear();
}
inline std::string* ImportTask::add_channel_names() {
  std::string* _s = _internal_add_channel_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.data.ImportTask.channel_names)
  return _s;
}
inline const std::string& ImportTask::_internal_channel_names(int index) const {
  return _impl_.channel_names_.Get(index);
}
inline const std::string& ImportTask::channel_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTask.channel_names)
  return _internal_channel_names(index);
}
inline std::string* ImportTask::mutable_channel_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTask.channel_names)
  return _impl_.channel_names_.Mutable(index);
}
inline void ImportTask::set_channel_names(int index, const std::string& value) {
  _impl_.channel_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTask.channel_names)
}
inline void ImportTask::set_channel_names(int index, std::string&& value) {
  _impl_.channel_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTask.channel_names)
}
inline void ImportTask::set_channel_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channel_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.data.ImportTask.channel_names)
}
inline void ImportTask::set_channel_names(int index, const char* value, size_t size) {
  _impl_.channel_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.data.ImportTask.channel_names)
}
inline std::string* ImportTask::_internal_add_channel_names() {
  return _impl_.channel_names_.Add();
}
inline void ImportTask::add_channel_names(const std::string& value) {
  _impl_.channel_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.ImportTask.channel_names)
}
inline void ImportTask::add_channel_names(std::string&& value) {
  _impl_.channel_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.data.ImportTask.channel_names)
}
inline void ImportTask::add_channel_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channel_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.data.ImportTask.channel_names)
}
inline void ImportTask::add_channel_names(const char* value, size_t size) {
  _impl_.channel_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.data.ImportTask.channel_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ImportTask::channel_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.ImportTask.channel_names)
  return _impl_.channel_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ImportTask::mutable_channel_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.ImportTask.channel_names)
  return &_impl_.channel_names_;
}

// bool row_based = 5;
inline void ImportTask::clear_row_based() {
  _impl_.row_based_ = false;
}
inline bool ImportTask::_internal_row_based() const {
  return _impl_.row_based_;
}
inline bool ImportTask::row_based() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTask.row_based)
  return _internal_row_based();
}
inline void ImportTask::_internal_set_row_based(bool value) {
  
  _impl_.row_based_ = value;
}
inline void ImportTask::set_row_based(bool value) {
  _internal_set_row_based(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTask.row_based)
}

// int64 task_id = 6;
inline void ImportTask::clear_task_id() {
  _impl_.task_id_ = int64_t{0};
}
inline int64_t ImportTask::_internal_task_id() const {
  return _impl_.task_id_;
}
inline int64_t ImportTask::task_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTask.task_id)
  return _internal_task_id();
}
inline void ImportTask::_internal_set_task_id(int64_t value) {
  
  _impl_.task_id_ = value;
}
inline void ImportTask::set_task_id(int64_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTask.task_id)
}

// repeated string files = 7;
inline int ImportTask::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int ImportTask::files_size() const {
  return _internal_files_size();
}
inline void ImportTask::clear_files() {
  _impl_.files_.Clear();
}
inline std::string* ImportTask::add_files() {
  std::string* _s = _internal_add_files();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.data.ImportTask.files)
  return _s;
}
inline const std::string& ImportTask::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline const std::string& ImportTask::files(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTask.files)
  return _internal_files(index);
}
inline std::string* ImportTask::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTask.files)
  return _impl_.files_.Mutable(index);
}
inline void ImportTask::set_files(int index, const std::string& value) {
  _impl_.files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTask.files)
}
inline void ImportTask::set_files(int index, std::string&& value) {
  _impl_.files_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTask.files)
}
inline void ImportTask::set_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.data.ImportTask.files)
}
inline void ImportTask::set_files(int index, const char* value, size_t size) {
  _impl_.files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.data.ImportTask.files)
}
inline std::string* ImportTask::_internal_add_files() {
  return _impl_.files_.Add();
}
inline void ImportTask::add_files(const std::string& value) {
  _impl_.files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.ImportTask.files)
}
inline void ImportTask::add_files(std::string&& value) {
  _impl_.files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.data.ImportTask.files)
}
inline void ImportTask::add_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.data.ImportTask.files)
}
inline void ImportTask::add_files(const char* value, size_t size) {
  _impl_.files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.data.ImportTask.files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ImportTask::files() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.ImportTask.files)
  return _impl_.files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ImportTask::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.ImportTask.files)
  return &_impl_.files_;
}

// repeated .milvus.proto.common.KeyValuePair infos = 8;
inline int ImportTask::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int ImportTask::infos_size() const {
  return _internal_infos_size();
}
inline ::milvus::proto::common::KeyValuePair* ImportTask::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTask.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
ImportTask::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.ImportTask.infos)
  return &_impl_.infos_;
}
inline const ::milvus::proto::common::KeyValuePair& ImportTask::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& ImportTask::infos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTask.infos)
  return _internal_infos(index);
}
inline ::milvus::proto::common::KeyValuePair* ImportTask::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::milvus::proto::common::KeyValuePair* ImportTask::add_infos() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:milvus.proto.data.ImportTask.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
ImportTask::infos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.ImportTask.infos)
  return _impl_.infos_;
}

// string database_name = 16;
inline void ImportTask::clear_database_name() {
  _impl_.database_name_.ClearToEmpty();
}
inline const std::string& ImportTask::database_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTask.database_name)
  return _internal_database_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportTask::set_database_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.database_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTask.database_name)
}
inline std::string* ImportTask::mutable_database_name() {
  std::string* _s = _internal_mutable_database_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTask.database_name)
  return _s;
}
inline const std::string& ImportTask::_internal_database_name() const {
  return _impl_.database_name_.Get();
}
inline void ImportTask::_internal_set_database_name(const std::string& value) {
  
  _impl_.database_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportTask::_internal_mutable_database_name() {
  
  return _impl_.database_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportTask::release_database_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ImportTask.database_name)
  return _impl_.database_name_.Release();
}
inline void ImportTask::set_allocated_database_name(std::string* database_name) {
  if (database_name != nullptr) {
    
  } else {
    
  }
  _impl_.database_name_.SetAllocated(database_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_name_.IsDefault()) {
    _impl_.database_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ImportTask.database_name)
}

// -------------------------------------------------------------------

// ImportTaskState

// .milvus.proto.common.ImportState stateCode = 1;
inline void ImportTaskState::clear_statecode() {
  _impl_.statecode_ = 0;
}
inline ::milvus::proto::common::ImportState ImportTaskState::_internal_statecode() const {
  return static_cast< ::milvus::proto::common::ImportState >(_impl_.statecode_);
}
inline ::milvus::proto::common::ImportState ImportTaskState::statecode() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskState.stateCode)
  return _internal_statecode();
}
inline void ImportTaskState::_internal_set_statecode(::milvus::proto::common::ImportState value) {
  
  _impl_.statecode_ = value;
}
inline void ImportTaskState::set_statecode(::milvus::proto::common::ImportState value) {
  _internal_set_statecode(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskState.stateCode)
}

// repeated int64 segments = 2;
inline int ImportTaskState::_internal_segments_size() const {
  return _impl_.segments_.size();
}
inline int ImportTaskState::segments_size() const {
  return _internal_segments_size();
}
inline void ImportTaskState::clear_segments() {
  _impl_.segments_.Clear();
}
inline int64_t ImportTaskState::_internal_segments(int index) const {
  return _impl_.segments_.Get(index);
}
inline int64_t ImportTaskState::segments(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskState.segments)
  return _internal_segments(index);
}
inline void ImportTaskState::set_segments(int index, int64_t value) {
  _impl_.segments_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskState.segments)
}
inline void ImportTaskState::_internal_add_segments(int64_t value) {
  _impl_.segments_.Add(value);
}
inline void ImportTaskState::add_segments(int64_t value) {
  _internal_add_segments(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.ImportTaskState.segments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ImportTaskState::_internal_segments() const {
  return _impl_.segments_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ImportTaskState::segments() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.ImportTaskState.segments)
  return _internal_segments();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ImportTaskState::_internal_mutable_segments() {
  return &_impl_.segments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ImportTaskState::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.ImportTaskState.segments)
  return _internal_mutable_segments();
}

// repeated int64 row_ids = 3;
inline int ImportTaskState::_internal_row_ids_size() const {
  return _impl_.row_ids_.size();
}
inline int ImportTaskState::row_ids_size() const {
  return _internal_row_ids_size();
}
inline void ImportTaskState::clear_row_ids() {
  _impl_.row_ids_.Clear();
}
inline int64_t ImportTaskState::_internal_row_ids(int index) const {
  return _impl_.row_ids_.Get(index);
}
inline int64_t ImportTaskState::row_ids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskState.row_ids)
  return _internal_row_ids(index);
}
inline void ImportTaskState::set_row_ids(int index, int64_t value) {
  _impl_.row_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskState.row_ids)
}
inline void ImportTaskState::_internal_add_row_ids(int64_t value) {
  _impl_.row_ids_.Add(value);
}
inline void ImportTaskState::add_row_ids(int64_t value) {
  _internal_add_row_ids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.ImportTaskState.row_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ImportTaskState::_internal_row_ids() const {
  return _impl_.row_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ImportTaskState::row_ids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.ImportTaskState.row_ids)
  return _internal_row_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ImportTaskState::_internal_mutable_row_ids() {
  return &_impl_.row_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ImportTaskState::mutable_row_ids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.ImportTaskState.row_ids)
  return _internal_mutable_row_ids();
}

// int64 row_count = 4;
inline void ImportTaskState::clear_row_count() {
  _impl_.row_count_ = int64_t{0};
}
inline int64_t ImportTaskState::_internal_row_count() const {
  return _impl_.row_count_;
}
inline int64_t ImportTaskState::row_count() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskState.row_count)
  return _internal_row_count();
}
inline void ImportTaskState::_internal_set_row_count(int64_t value) {
  
  _impl_.row_count_ = value;
}
inline void ImportTaskState::set_row_count(int64_t value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskState.row_count)
}

// string error_message = 5;
inline void ImportTaskState::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& ImportTaskState::error_message() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskState.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportTaskState::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskState.error_message)
}
inline std::string* ImportTaskState::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTaskState.error_message)
  return _s;
}
inline const std::string& ImportTaskState::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void ImportTaskState::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportTaskState::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportTaskState::release_error_message() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ImportTaskState.error_message)
  return _impl_.error_message_.Release();
}
inline void ImportTaskState::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ImportTaskState.error_message)
}

// -------------------------------------------------------------------

// ImportTaskInfo

// int64 id = 1;
inline void ImportTaskInfo::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t ImportTaskInfo::_internal_id() const {
  return _impl_.id_;
}
inline int64_t ImportTaskInfo::id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.id)
  return _internal_id();
}
inline void ImportTaskInfo::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void ImportTaskInfo::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.id)
}

// int64 request_id = 2 [deprecated = true];
inline void ImportTaskInfo::clear_request_id() {
  _impl_.request_id_ = int64_t{0};
}
inline int64_t ImportTaskInfo::_internal_request_id() const {
  return _impl_.request_id_;
}
inline int64_t ImportTaskInfo::request_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.request_id)
  return _internal_request_id();
}
inline void ImportTaskInfo::_internal_set_request_id(int64_t value) {
  
  _impl_.request_id_ = value;
}
inline void ImportTaskInfo::set_request_id(int64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.request_id)
}

// int64 datanode_id = 3;
inline void ImportTaskInfo::clear_datanode_id() {
  _impl_.datanode_id_ = int64_t{0};
}
inline int64_t ImportTaskInfo::_internal_datanode_id() const {
  return _impl_.datanode_id_;
}
inline int64_t ImportTaskInfo::datanode_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.datanode_id)
  return _internal_datanode_id();
}
inline void ImportTaskInfo::_internal_set_datanode_id(int64_t value) {
  
  _impl_.datanode_id_ = value;
}
inline void ImportTaskInfo::set_datanode_id(int64_t value) {
  _internal_set_datanode_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.datanode_id)
}

// int64 collection_id = 4;
inline void ImportTaskInfo::clear_collection_id() {
  _impl_.collection_id_ = int64_t{0};
}
inline int64_t ImportTaskInfo::_internal_collection_id() const {
  return _impl_.collection_id_;
}
inline int64_t ImportTaskInfo::collection_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.collection_id)
  return _internal_collection_id();
}
inline void ImportTaskInfo::_internal_set_collection_id(int64_t value) {
  
  _impl_.collection_id_ = value;
}
inline void ImportTaskInfo::set_collection_id(int64_t value) {
  _internal_set_collection_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.collection_id)
}

// int64 partition_id = 5;
inline void ImportTaskInfo::clear_partition_id() {
  _impl_.partition_id_ = int64_t{0};
}
inline int64_t ImportTaskInfo::_internal_partition_id() const {
  return _impl_.partition_id_;
}
inline int64_t ImportTaskInfo::partition_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.partition_id)
  return _internal_partition_id();
}
inline void ImportTaskInfo::_internal_set_partition_id(int64_t value) {
  
  _impl_.partition_id_ = value;
}
inline void ImportTaskInfo::set_partition_id(int64_t value) {
  _internal_set_partition_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.partition_id)
}

// repeated string channel_names = 6;
inline int ImportTaskInfo::_internal_channel_names_size() const {
  return _impl_.channel_names_.size();
}
inline int ImportTaskInfo::channel_names_size() const {
  return _internal_channel_names_size();
}
inline void ImportTaskInfo::clear_channel_names() {
  _impl_.channel_names_.Clear();
}
inline std::string* ImportTaskInfo::add_channel_names() {
  std::string* _s = _internal_add_channel_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.data.ImportTaskInfo.channel_names)
  return _s;
}
inline const std::string& ImportTaskInfo::_internal_channel_names(int index) const {
  return _impl_.channel_names_.Get(index);
}
inline const std::string& ImportTaskInfo::channel_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.channel_names)
  return _internal_channel_names(index);
}
inline std::string* ImportTaskInfo::mutable_channel_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTaskInfo.channel_names)
  return _impl_.channel_names_.Mutable(index);
}
inline void ImportTaskInfo::set_channel_names(int index, const std::string& value) {
  _impl_.channel_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.channel_names)
}
inline void ImportTaskInfo::set_channel_names(int index, std::string&& value) {
  _impl_.channel_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.channel_names)
}
inline void ImportTaskInfo::set_channel_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channel_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.data.ImportTaskInfo.channel_names)
}
inline void ImportTaskInfo::set_channel_names(int index, const char* value, size_t size) {
  _impl_.channel_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.data.ImportTaskInfo.channel_names)
}
inline std::string* ImportTaskInfo::_internal_add_channel_names() {
  return _impl_.channel_names_.Add();
}
inline void ImportTaskInfo::add_channel_names(const std::string& value) {
  _impl_.channel_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.ImportTaskInfo.channel_names)
}
inline void ImportTaskInfo::add_channel_names(std::string&& value) {
  _impl_.channel_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.data.ImportTaskInfo.channel_names)
}
inline void ImportTaskInfo::add_channel_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channel_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.data.ImportTaskInfo.channel_names)
}
inline void ImportTaskInfo::add_channel_names(const char* value, size_t size) {
  _impl_.channel_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.data.ImportTaskInfo.channel_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ImportTaskInfo::channel_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.ImportTaskInfo.channel_names)
  return _impl_.channel_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ImportTaskInfo::mutable_channel_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.ImportTaskInfo.channel_names)
  return &_impl_.channel_names_;
}

// string bucket = 7;
inline void ImportTaskInfo::clear_bucket() {
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& ImportTaskInfo::bucket() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.bucket)
  return _internal_bucket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportTaskInfo::set_bucket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bucket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.bucket)
}
inline std::string* ImportTaskInfo::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTaskInfo.bucket)
  return _s;
}
inline const std::string& ImportTaskInfo::_internal_bucket() const {
  return _impl_.bucket_.Get();
}
inline void ImportTaskInfo::_internal_set_bucket(const std::string& value) {
  
  _impl_.bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportTaskInfo::_internal_mutable_bucket() {
  
  return _impl_.bucket_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportTaskInfo::release_bucket() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ImportTaskInfo.bucket)
  return _impl_.bucket_.Release();
}
inline void ImportTaskInfo::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  _impl_.bucket_.SetAllocated(bucket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bucket_.IsDefault()) {
    _impl_.bucket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ImportTaskInfo.bucket)
}

// bool row_based = 8;
inline void ImportTaskInfo::clear_row_based() {
  _impl_.row_based_ = false;
}
inline bool ImportTaskInfo::_internal_row_based() const {
  return _impl_.row_based_;
}
inline bool ImportTaskInfo::row_based() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.row_based)
  return _internal_row_based();
}
inline void ImportTaskInfo::_internal_set_row_based(bool value) {
  
  _impl_.row_based_ = value;
}
inline void ImportTaskInfo::set_row_based(bool value) {
  _internal_set_row_based(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.row_based)
}

// repeated string files = 9;
inline int ImportTaskInfo::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int ImportTaskInfo::files_size() const {
  return _internal_files_size();
}
inline void ImportTaskInfo::clear_files() {
  _impl_.files_.Clear();
}
inline std::string* ImportTaskInfo::add_files() {
  std::string* _s = _internal_add_files();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.data.ImportTaskInfo.files)
  return _s;
}
inline const std::string& ImportTaskInfo::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline const std::string& ImportTaskInfo::files(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.files)
  return _internal_files(index);
}
inline std::string* ImportTaskInfo::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTaskInfo.files)
  return _impl_.files_.Mutable(index);
}
inline void ImportTaskInfo::set_files(int index, const std::string& value) {
  _impl_.files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.files)
}
inline void ImportTaskInfo::set_files(int index, std::string&& value) {
  _impl_.files_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.files)
}
inline void ImportTaskInfo::set_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.data.ImportTaskInfo.files)
}
inline void ImportTaskInfo::set_files(int index, const char* value, size_t size) {
  _impl_.files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.data.ImportTaskInfo.files)
}
inline std::string* ImportTaskInfo::_internal_add_files() {
  return _impl_.files_.Add();
}
inline void ImportTaskInfo::add_files(const std::string& value) {
  _impl_.files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.ImportTaskInfo.files)
}
inline void ImportTaskInfo::add_files(std::string&& value) {
  _impl_.files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.data.ImportTaskInfo.files)
}
inline void ImportTaskInfo::add_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.data.ImportTaskInfo.files)
}
inline void ImportTaskInfo::add_files(const char* value, size_t size) {
  _impl_.files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.data.ImportTaskInfo.files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ImportTaskInfo::files() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.ImportTaskInfo.files)
  return _impl_.files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ImportTaskInfo::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.ImportTaskInfo.files)
  return &_impl_.files_;
}

// int64 create_ts = 10;
inline void ImportTaskInfo::clear_create_ts() {
  _impl_.create_ts_ = int64_t{0};
}
inline int64_t ImportTaskInfo::_internal_create_ts() const {
  return _impl_.create_ts_;
}
inline int64_t ImportTaskInfo::create_ts() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.create_ts)
  return _internal_create_ts();
}
inline void ImportTaskInfo::_internal_set_create_ts(int64_t value) {
  
  _impl_.create_ts_ = value;
}
inline void ImportTaskInfo::set_create_ts(int64_t value) {
  _internal_set_create_ts(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.create_ts)
}

// .milvus.proto.data.ImportTaskState state = 11;
inline bool ImportTaskInfo::_internal_has_state() const {
  return this != internal_default_instance() && _impl_.state_ != nullptr;
}
inline bool ImportTaskInfo::has_state() const {
  return _internal_has_state();
}
inline void ImportTaskInfo::clear_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
}
inline const ::milvus::proto::data::ImportTaskState& ImportTaskInfo::_internal_state() const {
  const ::milvus::proto::data::ImportTaskState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::data::ImportTaskState&>(
      ::milvus::proto::data::_ImportTaskState_default_instance_);
}
inline const ::milvus::proto::data::ImportTaskState& ImportTaskInfo::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.state)
  return _internal_state();
}
inline void ImportTaskInfo::unsafe_arena_set_allocated_state(
    ::milvus::proto::data::ImportTaskState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.ImportTaskInfo.state)
}
inline ::milvus::proto::data::ImportTaskState* ImportTaskInfo::release_state() {
  
  ::milvus::proto::data::ImportTaskState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::data::ImportTaskState* ImportTaskInfo::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ImportTaskInfo.state)
  
  ::milvus::proto::data::ImportTaskState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::milvus::proto::data::ImportTaskState* ImportTaskInfo::_internal_mutable_state() {
  
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::data::ImportTaskState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::milvus::proto::data::ImportTaskState* ImportTaskInfo::mutable_state() {
  ::milvus::proto::data::ImportTaskState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTaskInfo.state)
  return _msg;
}
inline void ImportTaskInfo::set_allocated_state(::milvus::proto::data::ImportTaskState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ImportTaskInfo.state)
}

// string collection_name = 12;
inline void ImportTaskInfo::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& ImportTaskInfo::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportTaskInfo::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.collection_name)
}
inline std::string* ImportTaskInfo::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTaskInfo.collection_name)
  return _s;
}
inline const std::string& ImportTaskInfo::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void ImportTaskInfo::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportTaskInfo::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportTaskInfo::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ImportTaskInfo.collection_name)
  return _impl_.collection_name_.Release();
}
inline void ImportTaskInfo::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ImportTaskInfo.collection_name)
}

// string partition_name = 13;
inline void ImportTaskInfo::clear_partition_name() {
  _impl_.partition_name_.ClearToEmpty();
}
inline const std::string& ImportTaskInfo::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportTaskInfo::set_partition_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.partition_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.partition_name)
}
inline std::string* ImportTaskInfo::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTaskInfo.partition_name)
  return _s;
}
inline const std::string& ImportTaskInfo::_internal_partition_name() const {
  return _impl_.partition_name_.Get();
}
inline void ImportTaskInfo::_internal_set_partition_name(const std::string& value) {
  
  _impl_.partition_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportTaskInfo::_internal_mutable_partition_name() {
  
  return _impl_.partition_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportTaskInfo::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ImportTaskInfo.partition_name)
  return _impl_.partition_name_.Release();
}
inline void ImportTaskInfo::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  _impl_.partition_name_.SetAllocated(partition_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partition_name_.IsDefault()) {
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ImportTaskInfo.partition_name)
}

// repeated .milvus.proto.common.KeyValuePair infos = 14;
inline int ImportTaskInfo::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int ImportTaskInfo::infos_size() const {
  return _internal_infos_size();
}
inline ::milvus::proto::common::KeyValuePair* ImportTaskInfo::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTaskInfo.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
ImportTaskInfo::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.ImportTaskInfo.infos)
  return &_impl_.infos_;
}
inline const ::milvus::proto::common::KeyValuePair& ImportTaskInfo::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& ImportTaskInfo::infos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.infos)
  return _internal_infos(index);
}
inline ::milvus::proto::common::KeyValuePair* ImportTaskInfo::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::milvus::proto::common::KeyValuePair* ImportTaskInfo::add_infos() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:milvus.proto.data.ImportTaskInfo.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
ImportTaskInfo::infos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.ImportTaskInfo.infos)
  return _impl_.infos_;
}

// int64 start_ts = 15;
inline void ImportTaskInfo::clear_start_ts() {
  _impl_.start_ts_ = int64_t{0};
}
inline int64_t ImportTaskInfo::_internal_start_ts() const {
  return _impl_.start_ts_;
}
inline int64_t ImportTaskInfo::start_ts() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.start_ts)
  return _internal_start_ts();
}
inline void ImportTaskInfo::_internal_set_start_ts(int64_t value) {
  
  _impl_.start_ts_ = value;
}
inline void ImportTaskInfo::set_start_ts(int64_t value) {
  _internal_set_start_ts(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.start_ts)
}

// string database_name = 16;
inline void ImportTaskInfo::clear_database_name() {
  _impl_.database_name_.ClearToEmpty();
}
inline const std::string& ImportTaskInfo::database_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskInfo.database_name)
  return _internal_database_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportTaskInfo::set_database_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.database_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskInfo.database_name)
}
inline std::string* ImportTaskInfo::mutable_database_name() {
  std::string* _s = _internal_mutable_database_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTaskInfo.database_name)
  return _s;
}
inline const std::string& ImportTaskInfo::_internal_database_name() const {
  return _impl_.database_name_.Get();
}
inline void ImportTaskInfo::_internal_set_database_name(const std::string& value) {
  
  _impl_.database_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportTaskInfo::_internal_mutable_database_name() {
  
  return _impl_.database_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportTaskInfo::release_database_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ImportTaskInfo.database_name)
  return _impl_.database_name_.Release();
}
inline void ImportTaskInfo::set_allocated_database_name(std::string* database_name) {
  if (database_name != nullptr) {
    
  } else {
    
  }
  _impl_.database_name_.SetAllocated(database_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_name_.IsDefault()) {
    _impl_.database_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ImportTaskInfo.database_name)
}

// -------------------------------------------------------------------

// ImportTaskResponse

// .milvus.proto.common.Status status = 1;
inline bool ImportTaskResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ImportTaskResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ImportTaskResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ImportTaskResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskResponse.status)
  return _internal_status();
}
inline void ImportTaskResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.ImportTaskResponse.status)
}
inline ::milvus::proto::common::Status* ImportTaskResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ImportTaskResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ImportTaskResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ImportTaskResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ImportTaskResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTaskResponse.status)
  return _msg;
}
inline void ImportTaskResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ImportTaskResponse.status)
}

// int64 datanode_id = 2;
inline void ImportTaskResponse::clear_datanode_id() {
  _impl_.datanode_id_ = int64_t{0};
}
inline int64_t ImportTaskResponse::_internal_datanode_id() const {
  return _impl_.datanode_id_;
}
inline int64_t ImportTaskResponse::datanode_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskResponse.datanode_id)
  return _internal_datanode_id();
}
inline void ImportTaskResponse::_internal_set_datanode_id(int64_t value) {
  
  _impl_.datanode_id_ = value;
}
inline void ImportTaskResponse::set_datanode_id(int64_t value) {
  _internal_set_datanode_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskResponse.datanode_id)
}

// -------------------------------------------------------------------

// ImportTaskRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ImportTaskRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ImportTaskRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ImportTaskRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ImportTaskRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskRequest.base)
  return _internal_base();
}
inline void ImportTaskRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.ImportTaskRequest.base)
}
inline ::milvus::proto::common::MsgBase* ImportTaskRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ImportTaskRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ImportTaskRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ImportTaskRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ImportTaskRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTaskRequest.base)
  return _msg;
}
inline void ImportTaskRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ImportTaskRequest.base)
}

// .milvus.proto.data.ImportTask import_task = 2;
inline bool ImportTaskRequest::_internal_has_import_task() const {
  return this != internal_default_instance() && _impl_.import_task_ != nullptr;
}
inline bool ImportTaskRequest::has_import_task() const {
  return _internal_has_import_task();
}
inline void ImportTaskRequest::clear_import_task() {
  if (GetArenaForAllocation() == nullptr && _impl_.import_task_ != nullptr) {
    delete _impl_.import_task_;
  }
  _impl_.import_task_ = nullptr;
}
inline const ::milvus::proto::data::ImportTask& ImportTaskRequest::_internal_import_task() const {
  const ::milvus::proto::data::ImportTask* p = _impl_.import_task_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::data::ImportTask&>(
      ::milvus::proto::data::_ImportTask_default_instance_);
}
inline const ::milvus::proto::data::ImportTask& ImportTaskRequest::import_task() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskRequest.import_task)
  return _internal_import_task();
}
inline void ImportTaskRequest::unsafe_arena_set_allocated_import_task(
    ::milvus::proto::data::ImportTask* import_task) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.import_task_);
  }
  _impl_.import_task_ = import_task;
  if (import_task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.ImportTaskRequest.import_task)
}
inline ::milvus::proto::data::ImportTask* ImportTaskRequest::release_import_task() {
  
  ::milvus::proto::data::ImportTask* temp = _impl_.import_task_;
  _impl_.import_task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::data::ImportTask* ImportTaskRequest::unsafe_arena_release_import_task() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ImportTaskRequest.import_task)
  
  ::milvus::proto::data::ImportTask* temp = _impl_.import_task_;
  _impl_.import_task_ = nullptr;
  return temp;
}
inline ::milvus::proto::data::ImportTask* ImportTaskRequest::_internal_mutable_import_task() {
  
  if (_impl_.import_task_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::data::ImportTask>(GetArenaForAllocation());
    _impl_.import_task_ = p;
  }
  return _impl_.import_task_;
}
inline ::milvus::proto::data::ImportTask* ImportTaskRequest::mutable_import_task() {
  ::milvus::proto::data::ImportTask* _msg = _internal_mutable_import_task();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ImportTaskRequest.import_task)
  return _msg;
}
inline void ImportTaskRequest::set_allocated_import_task(::milvus::proto::data::ImportTask* import_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.import_task_;
  }
  if (import_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(import_task);
    if (message_arena != submessage_arena) {
      import_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, import_task, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.import_task_ = import_task;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ImportTaskRequest.import_task)
}

// repeated int64 working_nodes = 3;
inline int ImportTaskRequest::_internal_working_nodes_size() const {
  return _impl_.working_nodes_.size();
}
inline int ImportTaskRequest::working_nodes_size() const {
  return _internal_working_nodes_size();
}
inline void ImportTaskRequest::clear_working_nodes() {
  _impl_.working_nodes_.Clear();
}
inline int64_t ImportTaskRequest::_internal_working_nodes(int index) const {
  return _impl_.working_nodes_.Get(index);
}
inline int64_t ImportTaskRequest::working_nodes(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ImportTaskRequest.working_nodes)
  return _internal_working_nodes(index);
}
inline void ImportTaskRequest::set_working_nodes(int index, int64_t value) {
  _impl_.working_nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ImportTaskRequest.working_nodes)
}
inline void ImportTaskRequest::_internal_add_working_nodes(int64_t value) {
  _impl_.working_nodes_.Add(value);
}
inline void ImportTaskRequest::add_working_nodes(int64_t value) {
  _internal_add_working_nodes(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.ImportTaskRequest.working_nodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ImportTaskRequest::_internal_working_nodes() const {
  return _impl_.working_nodes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ImportTaskRequest::working_nodes() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.ImportTaskRequest.working_nodes)
  return _internal_working_nodes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ImportTaskRequest::_internal_mutable_working_nodes() {
  return &_impl_.working_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ImportTaskRequest::mutable_working_nodes() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.ImportTaskRequest.working_nodes)
  return _internal_mutable_working_nodes();
}

// -------------------------------------------------------------------

// UpdateSegmentStatisticsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool UpdateSegmentStatisticsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool UpdateSegmentStatisticsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& UpdateSegmentStatisticsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& UpdateSegmentStatisticsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.UpdateSegmentStatisticsRequest.base)
  return _internal_base();
}
inline void UpdateSegmentStatisticsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.UpdateSegmentStatisticsRequest.base)
}
inline ::milvus::proto::common::MsgBase* UpdateSegmentStatisticsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* UpdateSegmentStatisticsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.UpdateSegmentStatisticsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* UpdateSegmentStatisticsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* UpdateSegmentStatisticsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.UpdateSegmentStatisticsRequest.base)
  return _msg;
}
inline void UpdateSegmentStatisticsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.UpdateSegmentStatisticsRequest.base)
}

// repeated .milvus.proto.common.SegmentStats stats = 2;
inline int UpdateSegmentStatisticsRequest::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int UpdateSegmentStatisticsRequest::stats_size() const {
  return _internal_stats_size();
}
inline ::milvus::proto::common::SegmentStats* UpdateSegmentStatisticsRequest::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.UpdateSegmentStatisticsRequest.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats >*
UpdateSegmentStatisticsRequest::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.UpdateSegmentStatisticsRequest.stats)
  return &_impl_.stats_;
}
inline const ::milvus::proto::common::SegmentStats& UpdateSegmentStatisticsRequest::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::milvus::proto::common::SegmentStats& UpdateSegmentStatisticsRequest::stats(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.UpdateSegmentStatisticsRequest.stats)
  return _internal_stats(index);
}
inline ::milvus::proto::common::SegmentStats* UpdateSegmentStatisticsRequest::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::milvus::proto::common::SegmentStats* UpdateSegmentStatisticsRequest::add_stats() {
  ::milvus::proto::common::SegmentStats* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:milvus.proto.data.UpdateSegmentStatisticsRequest.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats >&
UpdateSegmentStatisticsRequest::stats() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.UpdateSegmentStatisticsRequest.stats)
  return _impl_.stats_;
}

// -------------------------------------------------------------------

// UpdateChannelCheckpointRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool UpdateChannelCheckpointRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool UpdateChannelCheckpointRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& UpdateChannelCheckpointRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& UpdateChannelCheckpointRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.UpdateChannelCheckpointRequest.base)
  return _internal_base();
}
inline void UpdateChannelCheckpointRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.UpdateChannelCheckpointRequest.base)
}
inline ::milvus::proto::common::MsgBase* UpdateChannelCheckpointRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* UpdateChannelCheckpointRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.UpdateChannelCheckpointRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* UpdateChannelCheckpointRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* UpdateChannelCheckpointRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.UpdateChannelCheckpointRequest.base)
  return _msg;
}
inline void UpdateChannelCheckpointRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.UpdateChannelCheckpointRequest.base)
}

// string vChannel = 2;
inline void UpdateChannelCheckpointRequest::clear_vchannel() {
  _impl_.vchannel_.ClearToEmpty();
}
inline const std::string& UpdateChannelCheckpointRequest::vchannel() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.UpdateChannelCheckpointRequest.vChannel)
  return _internal_vchannel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateChannelCheckpointRequest::set_vchannel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vchannel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.UpdateChannelCheckpointRequest.vChannel)
}
inline std::string* UpdateChannelCheckpointRequest::mutable_vchannel() {
  std::string* _s = _internal_mutable_vchannel();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.UpdateChannelCheckpointRequest.vChannel)
  return _s;
}
inline const std::string& UpdateChannelCheckpointRequest::_internal_vchannel() const {
  return _impl_.vchannel_.Get();
}
inline void UpdateChannelCheckpointRequest::_internal_set_vchannel(const std::string& value) {
  
  _impl_.vchannel_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateChannelCheckpointRequest::_internal_mutable_vchannel() {
  
  return _impl_.vchannel_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateChannelCheckpointRequest::release_vchannel() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.UpdateChannelCheckpointRequest.vChannel)
  return _impl_.vchannel_.Release();
}
inline void UpdateChannelCheckpointRequest::set_allocated_vchannel(std::string* vchannel) {
  if (vchannel != nullptr) {
    
  } else {
    
  }
  _impl_.vchannel_.SetAllocated(vchannel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vchannel_.IsDefault()) {
    _impl_.vchannel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.UpdateChannelCheckpointRequest.vChannel)
}

// .milvus.proto.msg.MsgPosition position = 3;
inline bool UpdateChannelCheckpointRequest::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool UpdateChannelCheckpointRequest::has_position() const {
  return _internal_has_position();
}
inline const ::milvus::proto::msg::MsgPosition& UpdateChannelCheckpointRequest::_internal_position() const {
  const ::milvus::proto::msg::MsgPosition* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::msg::MsgPosition&>(
      ::milvus::proto::msg::_MsgPosition_default_instance_);
}
inline const ::milvus::proto::msg::MsgPosition& UpdateChannelCheckpointRequest::position() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.UpdateChannelCheckpointRequest.position)
  return _internal_position();
}
inline void UpdateChannelCheckpointRequest::unsafe_arena_set_allocated_position(
    ::milvus::proto::msg::MsgPosition* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.UpdateChannelCheckpointRequest.position)
}
inline ::milvus::proto::msg::MsgPosition* UpdateChannelCheckpointRequest::release_position() {
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* UpdateChannelCheckpointRequest::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.UpdateChannelCheckpointRequest.position)
  
  ::milvus::proto::msg::MsgPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::milvus::proto::msg::MsgPosition* UpdateChannelCheckpointRequest::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::msg::MsgPosition>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::milvus::proto::msg::MsgPosition* UpdateChannelCheckpointRequest::mutable_position() {
  ::milvus::proto::msg::MsgPosition* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.UpdateChannelCheckpointRequest.position)
  return _msg;
}
inline void UpdateChannelCheckpointRequest::set_allocated_position(::milvus::proto::msg::MsgPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.UpdateChannelCheckpointRequest.position)
}

// -------------------------------------------------------------------

// ResendSegmentStatsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ResendSegmentStatsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ResendSegmentStatsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ResendSegmentStatsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ResendSegmentStatsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ResendSegmentStatsRequest.base)
  return _internal_base();
}
inline void ResendSegmentStatsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.ResendSegmentStatsRequest.base)
}
inline ::milvus::proto::common::MsgBase* ResendSegmentStatsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ResendSegmentStatsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ResendSegmentStatsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ResendSegmentStatsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ResendSegmentStatsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ResendSegmentStatsRequest.base)
  return _msg;
}
inline void ResendSegmentStatsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ResendSegmentStatsRequest.base)
}

// -------------------------------------------------------------------

// ResendSegmentStatsResponse

// .milvus.proto.common.Status status = 1;
inline bool ResendSegmentStatsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ResendSegmentStatsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ResendSegmentStatsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ResendSegmentStatsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ResendSegmentStatsResponse.status)
  return _internal_status();
}
inline void ResendSegmentStatsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.ResendSegmentStatsResponse.status)
}
inline ::milvus::proto::common::Status* ResendSegmentStatsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ResendSegmentStatsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ResendSegmentStatsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ResendSegmentStatsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ResendSegmentStatsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ResendSegmentStatsResponse.status)
  return _msg;
}
inline void ResendSegmentStatsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ResendSegmentStatsResponse.status)
}

// repeated int64 seg_resent = 2;
inline int ResendSegmentStatsResponse::_internal_seg_resent_size() const {
  return _impl_.seg_resent_.size();
}
inline int ResendSegmentStatsResponse::seg_resent_size() const {
  return _internal_seg_resent_size();
}
inline void ResendSegmentStatsResponse::clear_seg_resent() {
  _impl_.seg_resent_.Clear();
}
inline int64_t ResendSegmentStatsResponse::_internal_seg_resent(int index) const {
  return _impl_.seg_resent_.Get(index);
}
inline int64_t ResendSegmentStatsResponse::seg_resent(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ResendSegmentStatsResponse.seg_resent)
  return _internal_seg_resent(index);
}
inline void ResendSegmentStatsResponse::set_seg_resent(int index, int64_t value) {
  _impl_.seg_resent_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.ResendSegmentStatsResponse.seg_resent)
}
inline void ResendSegmentStatsResponse::_internal_add_seg_resent(int64_t value) {
  _impl_.seg_resent_.Add(value);
}
inline void ResendSegmentStatsResponse::add_seg_resent(int64_t value) {
  _internal_add_seg_resent(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.ResendSegmentStatsResponse.seg_resent)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ResendSegmentStatsResponse::_internal_seg_resent() const {
  return _impl_.seg_resent_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ResendSegmentStatsResponse::seg_resent() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.ResendSegmentStatsResponse.seg_resent)
  return _internal_seg_resent();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ResendSegmentStatsResponse::_internal_mutable_seg_resent() {
  return &_impl_.seg_resent_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ResendSegmentStatsResponse::mutable_seg_resent() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.ResendSegmentStatsResponse.seg_resent)
  return _internal_mutable_seg_resent();
}

// -------------------------------------------------------------------

// AddImportSegmentRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool AddImportSegmentRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool AddImportSegmentRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& AddImportSegmentRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& AddImportSegmentRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AddImportSegmentRequest.base)
  return _internal_base();
}
inline void AddImportSegmentRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.AddImportSegmentRequest.base)
}
inline ::milvus::proto::common::MsgBase* AddImportSegmentRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* AddImportSegmentRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.AddImportSegmentRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* AddImportSegmentRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* AddImportSegmentRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.AddImportSegmentRequest.base)
  return _msg;
}
inline void AddImportSegmentRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.AddImportSegmentRequest.base)
}

// int64 segment_id = 2;
inline void AddImportSegmentRequest::clear_segment_id() {
  _impl_.segment_id_ = int64_t{0};
}
inline int64_t AddImportSegmentRequest::_internal_segment_id() const {
  return _impl_.segment_id_;
}
inline int64_t AddImportSegmentRequest::segment_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AddImportSegmentRequest.segment_id)
  return _internal_segment_id();
}
inline void AddImportSegmentRequest::_internal_set_segment_id(int64_t value) {
  
  _impl_.segment_id_ = value;
}
inline void AddImportSegmentRequest::set_segment_id(int64_t value) {
  _internal_set_segment_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.AddImportSegmentRequest.segment_id)
}

// string channel_name = 3;
inline void AddImportSegmentRequest::clear_channel_name() {
  _impl_.channel_name_.ClearToEmpty();
}
inline const std::string& AddImportSegmentRequest::channel_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AddImportSegmentRequest.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddImportSegmentRequest::set_channel_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.AddImportSegmentRequest.channel_name)
}
inline std::string* AddImportSegmentRequest::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.AddImportSegmentRequest.channel_name)
  return _s;
}
inline const std::string& AddImportSegmentRequest::_internal_channel_name() const {
  return _impl_.channel_name_.Get();
}
inline void AddImportSegmentRequest::_internal_set_channel_name(const std::string& value) {
  
  _impl_.channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AddImportSegmentRequest::_internal_mutable_channel_name() {
  
  return _impl_.channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AddImportSegmentRequest::release_channel_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.AddImportSegmentRequest.channel_name)
  return _impl_.channel_name_.Release();
}
inline void AddImportSegmentRequest::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  _impl_.channel_name_.SetAllocated(channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.AddImportSegmentRequest.channel_name)
}

// int64 collection_id = 4;
inline void AddImportSegmentRequest::clear_collection_id() {
  _impl_.collection_id_ = int64_t{0};
}
inline int64_t AddImportSegmentRequest::_internal_collection_id() const {
  return _impl_.collection_id_;
}
inline int64_t AddImportSegmentRequest::collection_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AddImportSegmentRequest.collection_id)
  return _internal_collection_id();
}
inline void AddImportSegmentRequest::_internal_set_collection_id(int64_t value) {
  
  _impl_.collection_id_ = value;
}
inline void AddImportSegmentRequest::set_collection_id(int64_t value) {
  _internal_set_collection_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.AddImportSegmentRequest.collection_id)
}

// int64 partition_id = 5;
inline void AddImportSegmentRequest::clear_partition_id() {
  _impl_.partition_id_ = int64_t{0};
}
inline int64_t AddImportSegmentRequest::_internal_partition_id() const {
  return _impl_.partition_id_;
}
inline int64_t AddImportSegmentRequest::partition_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AddImportSegmentRequest.partition_id)
  return _internal_partition_id();
}
inline void AddImportSegmentRequest::_internal_set_partition_id(int64_t value) {
  
  _impl_.partition_id_ = value;
}
inline void AddImportSegmentRequest::set_partition_id(int64_t value) {
  _internal_set_partition_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.AddImportSegmentRequest.partition_id)
}

// int64 row_num = 6;
inline void AddImportSegmentRequest::clear_row_num() {
  _impl_.row_num_ = int64_t{0};
}
inline int64_t AddImportSegmentRequest::_internal_row_num() const {
  return _impl_.row_num_;
}
inline int64_t AddImportSegmentRequest::row_num() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AddImportSegmentRequest.row_num)
  return _internal_row_num();
}
inline void AddImportSegmentRequest::_internal_set_row_num(int64_t value) {
  
  _impl_.row_num_ = value;
}
inline void AddImportSegmentRequest::set_row_num(int64_t value) {
  _internal_set_row_num(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.AddImportSegmentRequest.row_num)
}

// repeated .milvus.proto.data.FieldBinlog stats_log = 7;
inline int AddImportSegmentRequest::_internal_stats_log_size() const {
  return _impl_.stats_log_.size();
}
inline int AddImportSegmentRequest::stats_log_size() const {
  return _internal_stats_log_size();
}
inline void AddImportSegmentRequest::clear_stats_log() {
  _impl_.stats_log_.Clear();
}
inline ::milvus::proto::data::FieldBinlog* AddImportSegmentRequest::mutable_stats_log(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.AddImportSegmentRequest.stats_log)
  return _impl_.stats_log_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >*
AddImportSegmentRequest::mutable_stats_log() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.AddImportSegmentRequest.stats_log)
  return &_impl_.stats_log_;
}
inline const ::milvus::proto::data::FieldBinlog& AddImportSegmentRequest::_internal_stats_log(int index) const {
  return _impl_.stats_log_.Get(index);
}
inline const ::milvus::proto::data::FieldBinlog& AddImportSegmentRequest::stats_log(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AddImportSegmentRequest.stats_log)
  return _internal_stats_log(index);
}
inline ::milvus::proto::data::FieldBinlog* AddImportSegmentRequest::_internal_add_stats_log() {
  return _impl_.stats_log_.Add();
}
inline ::milvus::proto::data::FieldBinlog* AddImportSegmentRequest::add_stats_log() {
  ::milvus::proto::data::FieldBinlog* _add = _internal_add_stats_log();
  // @@protoc_insertion_point(field_add:milvus.proto.data.AddImportSegmentRequest.stats_log)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::data::FieldBinlog >&
AddImportSegmentRequest::stats_log() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.AddImportSegmentRequest.stats_log)
  return _impl_.stats_log_;
}

// -------------------------------------------------------------------

// AddImportSegmentResponse

// .milvus.proto.common.Status status = 1;
inline bool AddImportSegmentResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool AddImportSegmentResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& AddImportSegmentResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& AddImportSegmentResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AddImportSegmentResponse.status)
  return _internal_status();
}
inline void AddImportSegmentResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.AddImportSegmentResponse.status)
}
inline ::milvus::proto::common::Status* AddImportSegmentResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* AddImportSegmentResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.AddImportSegmentResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* AddImportSegmentResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* AddImportSegmentResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.AddImportSegmentResponse.status)
  return _msg;
}
inline void AddImportSegmentResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.AddImportSegmentResponse.status)
}

// bytes channel_pos = 2;
inline void AddImportSegmentResponse::clear_channel_pos() {
  _impl_.channel_pos_.ClearToEmpty();
}
inline const std::string& AddImportSegmentResponse::channel_pos() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AddImportSegmentResponse.channel_pos)
  return _internal_channel_pos();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddImportSegmentResponse::set_channel_pos(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channel_pos_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.AddImportSegmentResponse.channel_pos)
}
inline std::string* AddImportSegmentResponse::mutable_channel_pos() {
  std::string* _s = _internal_mutable_channel_pos();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.AddImportSegmentResponse.channel_pos)
  return _s;
}
inline const std::string& AddImportSegmentResponse::_internal_channel_pos() const {
  return _impl_.channel_pos_.Get();
}
inline void AddImportSegmentResponse::_internal_set_channel_pos(const std::string& value) {
  
  _impl_.channel_pos_.Set(value, GetArenaForAllocation());
}
inline std::string* AddImportSegmentResponse::_internal_mutable_channel_pos() {
  
  return _impl_.channel_pos_.Mutable(GetArenaForAllocation());
}
inline std::string* AddImportSegmentResponse::release_channel_pos() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.AddImportSegmentResponse.channel_pos)
  return _impl_.channel_pos_.Release();
}
inline void AddImportSegmentResponse::set_allocated_channel_pos(std::string* channel_pos) {
  if (channel_pos != nullptr) {
    
  } else {
    
  }
  _impl_.channel_pos_.SetAllocated(channel_pos, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_pos_.IsDefault()) {
    _impl_.channel_pos_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.AddImportSegmentResponse.channel_pos)
}

// -------------------------------------------------------------------

// SaveImportSegmentRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool SaveImportSegmentRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SaveImportSegmentRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& SaveImportSegmentRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& SaveImportSegmentRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveImportSegmentRequest.base)
  return _internal_base();
}
inline void SaveImportSegmentRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SaveImportSegmentRequest.base)
}
inline ::milvus::proto::common::MsgBase* SaveImportSegmentRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* SaveImportSegmentRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SaveImportSegmentRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* SaveImportSegmentRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* SaveImportSegmentRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SaveImportSegmentRequest.base)
  return _msg;
}
inline void SaveImportSegmentRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SaveImportSegmentRequest.base)
}

// int64 segment_id = 2;
inline void SaveImportSegmentRequest::clear_segment_id() {
  _impl_.segment_id_ = int64_t{0};
}
inline int64_t SaveImportSegmentRequest::_internal_segment_id() const {
  return _impl_.segment_id_;
}
inline int64_t SaveImportSegmentRequest::segment_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveImportSegmentRequest.segment_id)
  return _internal_segment_id();
}
inline void SaveImportSegmentRequest::_internal_set_segment_id(int64_t value) {
  
  _impl_.segment_id_ = value;
}
inline void SaveImportSegmentRequest::set_segment_id(int64_t value) {
  _internal_set_segment_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SaveImportSegmentRequest.segment_id)
}

// string channel_name = 3;
inline void SaveImportSegmentRequest::clear_channel_name() {
  _impl_.channel_name_.ClearToEmpty();
}
inline const std::string& SaveImportSegmentRequest::channel_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveImportSegmentRequest.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveImportSegmentRequest::set_channel_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.SaveImportSegmentRequest.channel_name)
}
inline std::string* SaveImportSegmentRequest::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SaveImportSegmentRequest.channel_name)
  return _s;
}
inline const std::string& SaveImportSegmentRequest::_internal_channel_name() const {
  return _impl_.channel_name_.Get();
}
inline void SaveImportSegmentRequest::_internal_set_channel_name(const std::string& value) {
  
  _impl_.channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SaveImportSegmentRequest::_internal_mutable_channel_name() {
  
  return _impl_.channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SaveImportSegmentRequest::release_channel_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SaveImportSegmentRequest.channel_name)
  return _impl_.channel_name_.Release();
}
inline void SaveImportSegmentRequest::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  _impl_.channel_name_.SetAllocated(channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SaveImportSegmentRequest.channel_name)
}

// int64 collection_id = 4;
inline void SaveImportSegmentRequest::clear_collection_id() {
  _impl_.collection_id_ = int64_t{0};
}
inline int64_t SaveImportSegmentRequest::_internal_collection_id() const {
  return _impl_.collection_id_;
}
inline int64_t SaveImportSegmentRequest::collection_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveImportSegmentRequest.collection_id)
  return _internal_collection_id();
}
inline void SaveImportSegmentRequest::_internal_set_collection_id(int64_t value) {
  
  _impl_.collection_id_ = value;
}
inline void SaveImportSegmentRequest::set_collection_id(int64_t value) {
  _internal_set_collection_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SaveImportSegmentRequest.collection_id)
}

// int64 partition_id = 5;
inline void SaveImportSegmentRequest::clear_partition_id() {
  _impl_.partition_id_ = int64_t{0};
}
inline int64_t SaveImportSegmentRequest::_internal_partition_id() const {
  return _impl_.partition_id_;
}
inline int64_t SaveImportSegmentRequest::partition_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveImportSegmentRequest.partition_id)
  return _internal_partition_id();
}
inline void SaveImportSegmentRequest::_internal_set_partition_id(int64_t value) {
  
  _impl_.partition_id_ = value;
}
inline void SaveImportSegmentRequest::set_partition_id(int64_t value) {
  _internal_set_partition_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SaveImportSegmentRequest.partition_id)
}

// int64 row_num = 6;
inline void SaveImportSegmentRequest::clear_row_num() {
  _impl_.row_num_ = int64_t{0};
}
inline int64_t SaveImportSegmentRequest::_internal_row_num() const {
  return _impl_.row_num_;
}
inline int64_t SaveImportSegmentRequest::row_num() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveImportSegmentRequest.row_num)
  return _internal_row_num();
}
inline void SaveImportSegmentRequest::_internal_set_row_num(int64_t value) {
  
  _impl_.row_num_ = value;
}
inline void SaveImportSegmentRequest::set_row_num(int64_t value) {
  _internal_set_row_num(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SaveImportSegmentRequest.row_num)
}

// .milvus.proto.data.SaveBinlogPathsRequest save_binlog_path_req = 7;
inline bool SaveImportSegmentRequest::_internal_has_save_binlog_path_req() const {
  return this != internal_default_instance() && _impl_.save_binlog_path_req_ != nullptr;
}
inline bool SaveImportSegmentRequest::has_save_binlog_path_req() const {
  return _internal_has_save_binlog_path_req();
}
inline void SaveImportSegmentRequest::clear_save_binlog_path_req() {
  if (GetArenaForAllocation() == nullptr && _impl_.save_binlog_path_req_ != nullptr) {
    delete _impl_.save_binlog_path_req_;
  }
  _impl_.save_binlog_path_req_ = nullptr;
}
inline const ::milvus::proto::data::SaveBinlogPathsRequest& SaveImportSegmentRequest::_internal_save_binlog_path_req() const {
  const ::milvus::proto::data::SaveBinlogPathsRequest* p = _impl_.save_binlog_path_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::data::SaveBinlogPathsRequest&>(
      ::milvus::proto::data::_SaveBinlogPathsRequest_default_instance_);
}
inline const ::milvus::proto::data::SaveBinlogPathsRequest& SaveImportSegmentRequest::save_binlog_path_req() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveImportSegmentRequest.save_binlog_path_req)
  return _internal_save_binlog_path_req();
}
inline void SaveImportSegmentRequest::unsafe_arena_set_allocated_save_binlog_path_req(
    ::milvus::proto::data::SaveBinlogPathsRequest* save_binlog_path_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.save_binlog_path_req_);
  }
  _impl_.save_binlog_path_req_ = save_binlog_path_req;
  if (save_binlog_path_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.SaveImportSegmentRequest.save_binlog_path_req)
}
inline ::milvus::proto::data::SaveBinlogPathsRequest* SaveImportSegmentRequest::release_save_binlog_path_req() {
  
  ::milvus::proto::data::SaveBinlogPathsRequest* temp = _impl_.save_binlog_path_req_;
  _impl_.save_binlog_path_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::data::SaveBinlogPathsRequest* SaveImportSegmentRequest::unsafe_arena_release_save_binlog_path_req() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SaveImportSegmentRequest.save_binlog_path_req)
  
  ::milvus::proto::data::SaveBinlogPathsRequest* temp = _impl_.save_binlog_path_req_;
  _impl_.save_binlog_path_req_ = nullptr;
  return temp;
}
inline ::milvus::proto::data::SaveBinlogPathsRequest* SaveImportSegmentRequest::_internal_mutable_save_binlog_path_req() {
  
  if (_impl_.save_binlog_path_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::data::SaveBinlogPathsRequest>(GetArenaForAllocation());
    _impl_.save_binlog_path_req_ = p;
  }
  return _impl_.save_binlog_path_req_;
}
inline ::milvus::proto::data::SaveBinlogPathsRequest* SaveImportSegmentRequest::mutable_save_binlog_path_req() {
  ::milvus::proto::data::SaveBinlogPathsRequest* _msg = _internal_mutable_save_binlog_path_req();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SaveImportSegmentRequest.save_binlog_path_req)
  return _msg;
}
inline void SaveImportSegmentRequest::set_allocated_save_binlog_path_req(::milvus::proto::data::SaveBinlogPathsRequest* save_binlog_path_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.save_binlog_path_req_;
  }
  if (save_binlog_path_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(save_binlog_path_req);
    if (message_arena != submessage_arena) {
      save_binlog_path_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_binlog_path_req, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.save_binlog_path_req_ = save_binlog_path_req;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SaveImportSegmentRequest.save_binlog_path_req)
}

// bytes dml_position_id = 8;
inline void SaveImportSegmentRequest::clear_dml_position_id() {
  _impl_.dml_position_id_.ClearToEmpty();
}
inline const std::string& SaveImportSegmentRequest::dml_position_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SaveImportSegmentRequest.dml_position_id)
  return _internal_dml_position_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveImportSegmentRequest::set_dml_position_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dml_position_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.data.SaveImportSegmentRequest.dml_position_id)
}
inline std::string* SaveImportSegmentRequest::mutable_dml_position_id() {
  std::string* _s = _internal_mutable_dml_position_id();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.SaveImportSegmentRequest.dml_position_id)
  return _s;
}
inline const std::string& SaveImportSegmentRequest::_internal_dml_position_id() const {
  return _impl_.dml_position_id_.Get();
}
inline void SaveImportSegmentRequest::_internal_set_dml_position_id(const std::string& value) {
  
  _impl_.dml_position_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SaveImportSegmentRequest::_internal_mutable_dml_position_id() {
  
  return _impl_.dml_position_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SaveImportSegmentRequest::release_dml_position_id() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.SaveImportSegmentRequest.dml_position_id)
  return _impl_.dml_position_id_.Release();
}
inline void SaveImportSegmentRequest::set_allocated_dml_position_id(std::string* dml_position_id) {
  if (dml_position_id != nullptr) {
    
  } else {
    
  }
  _impl_.dml_position_id_.SetAllocated(dml_position_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dml_position_id_.IsDefault()) {
    _impl_.dml_position_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.SaveImportSegmentRequest.dml_position_id)
}

// -------------------------------------------------------------------

// UnsetIsImportingStateRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool UnsetIsImportingStateRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool UnsetIsImportingStateRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& UnsetIsImportingStateRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& UnsetIsImportingStateRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.UnsetIsImportingStateRequest.base)
  return _internal_base();
}
inline void UnsetIsImportingStateRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.UnsetIsImportingStateRequest.base)
}
inline ::milvus::proto::common::MsgBase* UnsetIsImportingStateRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* UnsetIsImportingStateRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.UnsetIsImportingStateRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* UnsetIsImportingStateRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* UnsetIsImportingStateRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.UnsetIsImportingStateRequest.base)
  return _msg;
}
inline void UnsetIsImportingStateRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.UnsetIsImportingStateRequest.base)
}

// repeated int64 segment_ids = 2;
inline int UnsetIsImportingStateRequest::_internal_segment_ids_size() const {
  return _impl_.segment_ids_.size();
}
inline int UnsetIsImportingStateRequest::segment_ids_size() const {
  return _internal_segment_ids_size();
}
inline void UnsetIsImportingStateRequest::clear_segment_ids() {
  _impl_.segment_ids_.Clear();
}
inline int64_t UnsetIsImportingStateRequest::_internal_segment_ids(int index) const {
  return _impl_.segment_ids_.Get(index);
}
inline int64_t UnsetIsImportingStateRequest::segment_ids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.UnsetIsImportingStateRequest.segment_ids)
  return _internal_segment_ids(index);
}
inline void UnsetIsImportingStateRequest::set_segment_ids(int index, int64_t value) {
  _impl_.segment_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.UnsetIsImportingStateRequest.segment_ids)
}
inline void UnsetIsImportingStateRequest::_internal_add_segment_ids(int64_t value) {
  _impl_.segment_ids_.Add(value);
}
inline void UnsetIsImportingStateRequest::add_segment_ids(int64_t value) {
  _internal_add_segment_ids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.UnsetIsImportingStateRequest.segment_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UnsetIsImportingStateRequest::_internal_segment_ids() const {
  return _impl_.segment_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UnsetIsImportingStateRequest::segment_ids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.UnsetIsImportingStateRequest.segment_ids)
  return _internal_segment_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UnsetIsImportingStateRequest::_internal_mutable_segment_ids() {
  return &_impl_.segment_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UnsetIsImportingStateRequest::mutable_segment_ids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.UnsetIsImportingStateRequest.segment_ids)
  return _internal_mutable_segment_ids();
}

// -------------------------------------------------------------------

// MarkSegmentsDroppedRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool MarkSegmentsDroppedRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool MarkSegmentsDroppedRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& MarkSegmentsDroppedRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& MarkSegmentsDroppedRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.MarkSegmentsDroppedRequest.base)
  return _internal_base();
}
inline void MarkSegmentsDroppedRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.MarkSegmentsDroppedRequest.base)
}
inline ::milvus::proto::common::MsgBase* MarkSegmentsDroppedRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* MarkSegmentsDroppedRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.MarkSegmentsDroppedRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* MarkSegmentsDroppedRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* MarkSegmentsDroppedRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.MarkSegmentsDroppedRequest.base)
  return _msg;
}
inline void MarkSegmentsDroppedRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.MarkSegmentsDroppedRequest.base)
}

// repeated int64 segment_ids = 2;
inline int MarkSegmentsDroppedRequest::_internal_segment_ids_size() const {
  return _impl_.segment_ids_.size();
}
inline int MarkSegmentsDroppedRequest::segment_ids_size() const {
  return _internal_segment_ids_size();
}
inline void MarkSegmentsDroppedRequest::clear_segment_ids() {
  _impl_.segment_ids_.Clear();
}
inline int64_t MarkSegmentsDroppedRequest::_internal_segment_ids(int index) const {
  return _impl_.segment_ids_.Get(index);
}
inline int64_t MarkSegmentsDroppedRequest::segment_ids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.MarkSegmentsDroppedRequest.segment_ids)
  return _internal_segment_ids(index);
}
inline void MarkSegmentsDroppedRequest::set_segment_ids(int index, int64_t value) {
  _impl_.segment_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.MarkSegmentsDroppedRequest.segment_ids)
}
inline void MarkSegmentsDroppedRequest::_internal_add_segment_ids(int64_t value) {
  _impl_.segment_ids_.Add(value);
}
inline void MarkSegmentsDroppedRequest::add_segment_ids(int64_t value) {
  _internal_add_segment_ids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.MarkSegmentsDroppedRequest.segment_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MarkSegmentsDroppedRequest::_internal_segment_ids() const {
  return _impl_.segment_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MarkSegmentsDroppedRequest::segment_ids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.MarkSegmentsDroppedRequest.segment_ids)
  return _internal_segment_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MarkSegmentsDroppedRequest::_internal_mutable_segment_ids() {
  return &_impl_.segment_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MarkSegmentsDroppedRequest::mutable_segment_ids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.MarkSegmentsDroppedRequest.segment_ids)
  return _internal_mutable_segment_ids();
}

// -------------------------------------------------------------------

// SegmentReferenceLock

// int64 taskID = 1;
inline void SegmentReferenceLock::clear_taskid() {
  _impl_.taskid_ = int64_t{0};
}
inline int64_t SegmentReferenceLock::_internal_taskid() const {
  return _impl_.taskid_;
}
inline int64_t SegmentReferenceLock::taskid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentReferenceLock.taskID)
  return _internal_taskid();
}
inline void SegmentReferenceLock::_internal_set_taskid(int64_t value) {
  
  _impl_.taskid_ = value;
}
inline void SegmentReferenceLock::set_taskid(int64_t value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentReferenceLock.taskID)
}

// int64 nodeID = 2;
inline void SegmentReferenceLock::clear_nodeid() {
  _impl_.nodeid_ = int64_t{0};
}
inline int64_t SegmentReferenceLock::_internal_nodeid() const {
  return _impl_.nodeid_;
}
inline int64_t SegmentReferenceLock::nodeid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentReferenceLock.nodeID)
  return _internal_nodeid();
}
inline void SegmentReferenceLock::_internal_set_nodeid(int64_t value) {
  
  _impl_.nodeid_ = value;
}
inline void SegmentReferenceLock::set_nodeid(int64_t value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentReferenceLock.nodeID)
}

// repeated int64 segmentIDs = 3;
inline int SegmentReferenceLock::_internal_segmentids_size() const {
  return _impl_.segmentids_.size();
}
inline int SegmentReferenceLock::segmentids_size() const {
  return _internal_segmentids_size();
}
inline void SegmentReferenceLock::clear_segmentids() {
  _impl_.segmentids_.Clear();
}
inline int64_t SegmentReferenceLock::_internal_segmentids(int index) const {
  return _impl_.segmentids_.Get(index);
}
inline int64_t SegmentReferenceLock::segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.SegmentReferenceLock.segmentIDs)
  return _internal_segmentids(index);
}
inline void SegmentReferenceLock::set_segmentids(int index, int64_t value) {
  _impl_.segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.SegmentReferenceLock.segmentIDs)
}
inline void SegmentReferenceLock::_internal_add_segmentids(int64_t value) {
  _impl_.segmentids_.Add(value);
}
inline void SegmentReferenceLock::add_segmentids(int64_t value) {
  _internal_add_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.SegmentReferenceLock.segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SegmentReferenceLock::_internal_segmentids() const {
  return _impl_.segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SegmentReferenceLock::segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.SegmentReferenceLock.segmentIDs)
  return _internal_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SegmentReferenceLock::_internal_mutable_segmentids() {
  return &_impl_.segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SegmentReferenceLock::mutable_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.SegmentReferenceLock.segmentIDs)
  return _internal_mutable_segmentids();
}

// -------------------------------------------------------------------

// AlterCollectionRequest

// int64 collectionID = 1;
inline void AlterCollectionRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t AlterCollectionRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t AlterCollectionRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AlterCollectionRequest.collectionID)
  return _internal_collectionid();
}
inline void AlterCollectionRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void AlterCollectionRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.AlterCollectionRequest.collectionID)
}

// .milvus.proto.schema.CollectionSchema schema = 2;
inline bool AlterCollectionRequest::_internal_has_schema() const {
  return this != internal_default_instance() && _impl_.schema_ != nullptr;
}
inline bool AlterCollectionRequest::has_schema() const {
  return _internal_has_schema();
}
inline const ::milvus::proto::schema::CollectionSchema& AlterCollectionRequest::_internal_schema() const {
  const ::milvus::proto::schema::CollectionSchema* p = _impl_.schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::schema::CollectionSchema&>(
      ::milvus::proto::schema::_CollectionSchema_default_instance_);
}
inline const ::milvus::proto::schema::CollectionSchema& AlterCollectionRequest::schema() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AlterCollectionRequest.schema)
  return _internal_schema();
}
inline void AlterCollectionRequest::unsafe_arena_set_allocated_schema(
    ::milvus::proto::schema::CollectionSchema* schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_);
  }
  _impl_.schema_ = schema;
  if (schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.AlterCollectionRequest.schema)
}
inline ::milvus::proto::schema::CollectionSchema* AlterCollectionRequest::release_schema() {
  
  ::milvus::proto::schema::CollectionSchema* temp = _impl_.schema_;
  _impl_.schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::schema::CollectionSchema* AlterCollectionRequest::unsafe_arena_release_schema() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.AlterCollectionRequest.schema)
  
  ::milvus::proto::schema::CollectionSchema* temp = _impl_.schema_;
  _impl_.schema_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::CollectionSchema* AlterCollectionRequest::_internal_mutable_schema() {
  
  if (_impl_.schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::CollectionSchema>(GetArenaForAllocation());
    _impl_.schema_ = p;
  }
  return _impl_.schema_;
}
inline ::milvus::proto::schema::CollectionSchema* AlterCollectionRequest::mutable_schema() {
  ::milvus::proto::schema::CollectionSchema* _msg = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.AlterCollectionRequest.schema)
  return _msg;
}
inline void AlterCollectionRequest::set_allocated_schema(::milvus::proto::schema::CollectionSchema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_);
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema));
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.AlterCollectionRequest.schema)
}

// repeated int64 partitionIDs = 3;
inline int AlterCollectionRequest::_internal_partitionids_size() const {
  return _impl_.partitionids_.size();
}
inline int AlterCollectionRequest::partitionids_size() const {
  return _internal_partitionids_size();
}
inline void AlterCollectionRequest::clear_partitionids() {
  _impl_.partitionids_.Clear();
}
inline int64_t AlterCollectionRequest::_internal_partitionids(int index) const {
  return _impl_.partitionids_.Get(index);
}
inline int64_t AlterCollectionRequest::partitionids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AlterCollectionRequest.partitionIDs)
  return _internal_partitionids(index);
}
inline void AlterCollectionRequest::set_partitionids(int index, int64_t value) {
  _impl_.partitionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.AlterCollectionRequest.partitionIDs)
}
inline void AlterCollectionRequest::_internal_add_partitionids(int64_t value) {
  _impl_.partitionids_.Add(value);
}
inline void AlterCollectionRequest::add_partitionids(int64_t value) {
  _internal_add_partitionids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.data.AlterCollectionRequest.partitionIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AlterCollectionRequest::_internal_partitionids() const {
  return _impl_.partitionids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AlterCollectionRequest::partitionids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.AlterCollectionRequest.partitionIDs)
  return _internal_partitionids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AlterCollectionRequest::_internal_mutable_partitionids() {
  return &_impl_.partitionids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AlterCollectionRequest::mutable_partitionids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.AlterCollectionRequest.partitionIDs)
  return _internal_mutable_partitionids();
}

// repeated .milvus.proto.common.KeyDataPair start_positions = 4;
inline int AlterCollectionRequest::_internal_start_positions_size() const {
  return _impl_.start_positions_.size();
}
inline int AlterCollectionRequest::start_positions_size() const {
  return _internal_start_positions_size();
}
inline ::milvus::proto::common::KeyDataPair* AlterCollectionRequest::mutable_start_positions(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.AlterCollectionRequest.start_positions)
  return _impl_.start_positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >*
AlterCollectionRequest::mutable_start_positions() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.AlterCollectionRequest.start_positions)
  return &_impl_.start_positions_;
}
inline const ::milvus::proto::common::KeyDataPair& AlterCollectionRequest::_internal_start_positions(int index) const {
  return _impl_.start_positions_.Get(index);
}
inline const ::milvus::proto::common::KeyDataPair& AlterCollectionRequest::start_positions(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AlterCollectionRequest.start_positions)
  return _internal_start_positions(index);
}
inline ::milvus::proto::common::KeyDataPair* AlterCollectionRequest::_internal_add_start_positions() {
  return _impl_.start_positions_.Add();
}
inline ::milvus::proto::common::KeyDataPair* AlterCollectionRequest::add_start_positions() {
  ::milvus::proto::common::KeyDataPair* _add = _internal_add_start_positions();
  // @@protoc_insertion_point(field_add:milvus.proto.data.AlterCollectionRequest.start_positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >&
AlterCollectionRequest::start_positions() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.AlterCollectionRequest.start_positions)
  return _impl_.start_positions_;
}

// repeated .milvus.proto.common.KeyValuePair properties = 5;
inline int AlterCollectionRequest::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int AlterCollectionRequest::properties_size() const {
  return _internal_properties_size();
}
inline ::milvus::proto::common::KeyValuePair* AlterCollectionRequest::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.AlterCollectionRequest.properties)
  return _impl_.properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
AlterCollectionRequest::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.AlterCollectionRequest.properties)
  return &_impl_.properties_;
}
inline const ::milvus::proto::common::KeyValuePair& AlterCollectionRequest::_internal_properties(int index) const {
  return _impl_.properties_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& AlterCollectionRequest::properties(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.AlterCollectionRequest.properties)
  return _internal_properties(index);
}
inline ::milvus::proto::common::KeyValuePair* AlterCollectionRequest::_internal_add_properties() {
  return _impl_.properties_.Add();
}
inline ::milvus::proto::common::KeyValuePair* AlterCollectionRequest::add_properties() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:milvus.proto.data.AlterCollectionRequest.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
AlterCollectionRequest::properties() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.AlterCollectionRequest.properties)
  return _impl_.properties_;
}

// -------------------------------------------------------------------

// GcConfirmRequest

// int64 collection_id = 1;
inline void GcConfirmRequest::clear_collection_id() {
  _impl_.collection_id_ = int64_t{0};
}
inline int64_t GcConfirmRequest::_internal_collection_id() const {
  return _impl_.collection_id_;
}
inline int64_t GcConfirmRequest::collection_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GcConfirmRequest.collection_id)
  return _internal_collection_id();
}
inline void GcConfirmRequest::_internal_set_collection_id(int64_t value) {
  
  _impl_.collection_id_ = value;
}
inline void GcConfirmRequest::set_collection_id(int64_t value) {
  _internal_set_collection_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GcConfirmRequest.collection_id)
}

// int64 partition_id = 2;
inline void GcConfirmRequest::clear_partition_id() {
  _impl_.partition_id_ = int64_t{0};
}
inline int64_t GcConfirmRequest::_internal_partition_id() const {
  return _impl_.partition_id_;
}
inline int64_t GcConfirmRequest::partition_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GcConfirmRequest.partition_id)
  return _internal_partition_id();
}
inline void GcConfirmRequest::_internal_set_partition_id(int64_t value) {
  
  _impl_.partition_id_ = value;
}
inline void GcConfirmRequest::set_partition_id(int64_t value) {
  _internal_set_partition_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GcConfirmRequest.partition_id)
}

// -------------------------------------------------------------------

// GcConfirmResponse

// .milvus.proto.common.Status status = 1;
inline bool GcConfirmResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GcConfirmResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GcConfirmResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GcConfirmResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GcConfirmResponse.status)
  return _internal_status();
}
inline void GcConfirmResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.GcConfirmResponse.status)
}
inline ::milvus::proto::common::Status* GcConfirmResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GcConfirmResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.GcConfirmResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GcConfirmResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GcConfirmResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.GcConfirmResponse.status)
  return _msg;
}
inline void GcConfirmResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.GcConfirmResponse.status)
}

// bool gc_finished = 2;
inline void GcConfirmResponse::clear_gc_finished() {
  _impl_.gc_finished_ = false;
}
inline bool GcConfirmResponse::_internal_gc_finished() const {
  return _impl_.gc_finished_;
}
inline bool GcConfirmResponse::gc_finished() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.GcConfirmResponse.gc_finished)
  return _internal_gc_finished();
}
inline void GcConfirmResponse::_internal_set_gc_finished(bool value) {
  
  _impl_.gc_finished_ = value;
}
inline void GcConfirmResponse::set_gc_finished(bool value) {
  _internal_set_gc_finished(value);
  // @@protoc_insertion_point(field_set:milvus.proto.data.GcConfirmResponse.gc_finished)
}

// -------------------------------------------------------------------

// ReportDataNodeTtMsgsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ReportDataNodeTtMsgsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ReportDataNodeTtMsgsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ReportDataNodeTtMsgsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ReportDataNodeTtMsgsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ReportDataNodeTtMsgsRequest.base)
  return _internal_base();
}
inline void ReportDataNodeTtMsgsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.data.ReportDataNodeTtMsgsRequest.base)
}
inline ::milvus::proto::common::MsgBase* ReportDataNodeTtMsgsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ReportDataNodeTtMsgsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.data.ReportDataNodeTtMsgsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ReportDataNodeTtMsgsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ReportDataNodeTtMsgsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ReportDataNodeTtMsgsRequest.base)
  return _msg;
}
inline void ReportDataNodeTtMsgsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.data.ReportDataNodeTtMsgsRequest.base)
}

// repeated .milvus.proto.msg.DataNodeTtMsg msgs = 2;
inline int ReportDataNodeTtMsgsRequest::_internal_msgs_size() const {
  return _impl_.msgs_.size();
}
inline int ReportDataNodeTtMsgsRequest::msgs_size() const {
  return _internal_msgs_size();
}
inline ::milvus::proto::msg::DataNodeTtMsg* ReportDataNodeTtMsgsRequest::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.data.ReportDataNodeTtMsgsRequest.msgs)
  return _impl_.msgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::msg::DataNodeTtMsg >*
ReportDataNodeTtMsgsRequest::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.data.ReportDataNodeTtMsgsRequest.msgs)
  return &_impl_.msgs_;
}
inline const ::milvus::proto::msg::DataNodeTtMsg& ReportDataNodeTtMsgsRequest::_internal_msgs(int index) const {
  return _impl_.msgs_.Get(index);
}
inline const ::milvus::proto::msg::DataNodeTtMsg& ReportDataNodeTtMsgsRequest::msgs(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.data.ReportDataNodeTtMsgsRequest.msgs)
  return _internal_msgs(index);
}
inline ::milvus::proto::msg::DataNodeTtMsg* ReportDataNodeTtMsgsRequest::_internal_add_msgs() {
  return _impl_.msgs_.Add();
}
inline ::milvus::proto::msg::DataNodeTtMsg* ReportDataNodeTtMsgsRequest::add_msgs() {
  ::milvus::proto::msg::DataNodeTtMsg* _add = _internal_add_msgs();
  // @@protoc_insertion_point(field_add:milvus.proto.data.ReportDataNodeTtMsgsRequest.msgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::msg::DataNodeTtMsg >&
ReportDataNodeTtMsgsRequest::msgs() const {
  // @@protoc_insertion_point(field_list:milvus.proto.data.ReportDataNodeTtMsgsRequest.msgs)
  return _impl_.msgs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace proto
}  // namespace milvus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::milvus::proto::data::SegmentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::data::SegmentType>() {
  return ::milvus::proto::data::SegmentType_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::data::ChannelWatchState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::data::ChannelWatchState>() {
  return ::milvus::proto::data::ChannelWatchState_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::data::CompactionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::data::CompactionType>() {
  return ::milvus::proto::data::CompactionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_5fcoord_2eproto
