// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace milvus {
namespace proto {
namespace msg {
PROTOBUF_CONSTEXPR InsertRequest::InsertRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamps_)*/{}
  , /*decltype(_impl_._timestamps_cached_byte_size_)*/{0}
  , /*decltype(_impl_.rowids_)*/{}
  , /*decltype(_impl_._rowids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.row_data_)*/{}
  , /*decltype(_impl_.fields_data_)*/{}
  , /*decltype(_impl_.shardname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.num_rows_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertRequestDefaultTypeInternal() {}
  union {
    InsertRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertRequestDefaultTypeInternal _InsertRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteRequest::DeleteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.int64_primary_keys_)*/{}
  , /*decltype(_impl_._int64_primary_keys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.timestamps_)*/{}
  , /*decltype(_impl_._timestamps_cached_byte_size_)*/{0}
  , /*decltype(_impl_.shardname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.primary_keys_)*/nullptr
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_.num_rows_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteRequestDefaultTypeInternal() {}
  union {
    DeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
PROTOBUF_CONSTEXPR MsgPosition::MsgPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msggroup_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgPositionDefaultTypeInternal() {}
  union {
    MsgPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgPositionDefaultTypeInternal _MsgPosition_default_instance_;
PROTOBUF_CONSTEXPR CreateCollectionRequest::CreateCollectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.virtualchannelnames_)*/{}
  , /*decltype(_impl_.physicalchannelnames_)*/{}
  , /*decltype(_impl_.partitionids_)*/{}
  , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partitionname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateCollectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateCollectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateCollectionRequestDefaultTypeInternal() {}
  union {
    CreateCollectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateCollectionRequestDefaultTypeInternal _CreateCollectionRequest_default_instance_;
PROTOBUF_CONSTEXPR DropCollectionRequest::DropCollectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropCollectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropCollectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropCollectionRequestDefaultTypeInternal() {}
  union {
    DropCollectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropCollectionRequestDefaultTypeInternal _DropCollectionRequest_default_instance_;
PROTOBUF_CONSTEXPR CreatePartitionRequest::CreatePartitionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreatePartitionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreatePartitionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreatePartitionRequestDefaultTypeInternal() {}
  union {
    CreatePartitionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreatePartitionRequestDefaultTypeInternal _CreatePartitionRequest_default_instance_;
PROTOBUF_CONSTEXPR DropPartitionRequest::DropPartitionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropPartitionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropPartitionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropPartitionRequestDefaultTypeInternal() {}
  union {
    DropPartitionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropPartitionRequestDefaultTypeInternal _DropPartitionRequest_default_instance_;
PROTOBUF_CONSTEXPR TimeTickMsg::TimeTickMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeTickMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeTickMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeTickMsgDefaultTypeInternal() {}
  union {
    TimeTickMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeTickMsgDefaultTypeInternal _TimeTickMsg_default_instance_;
PROTOBUF_CONSTEXPR DataNodeTtMsg::DataNodeTtMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segments_stats_)*/{}
  , /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataNodeTtMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataNodeTtMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataNodeTtMsgDefaultTypeInternal() {}
  union {
    DataNodeTtMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataNodeTtMsgDefaultTypeInternal _DataNodeTtMsg_default_instance_;
}  // namespace msg
}  // namespace proto
}  // namespace milvus
static ::_pb::Metadata file_level_metadata_msg_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_msg_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const uint32_t TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.shardname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.partition_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.rowids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.row_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.fields_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.num_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::InsertRequest, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DeleteRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DeleteRequest, _impl_.shardname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DeleteRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DeleteRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DeleteRequest, _impl_.partition_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DeleteRequest, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DeleteRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DeleteRequest, _impl_.partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DeleteRequest, _impl_.int64_primary_keys_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DeleteRequest, _impl_.timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DeleteRequest, _impl_.num_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DeleteRequest, _impl_.primary_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::MsgPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::MsgPosition, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::MsgPosition, _impl_.msgid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::MsgPosition, _impl_.msggroup_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::MsgPosition, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreateCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreateCollectionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreateCollectionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreateCollectionRequest, _impl_.collectionname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreateCollectionRequest, _impl_.partitionname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreateCollectionRequest, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreateCollectionRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreateCollectionRequest, _impl_.partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreateCollectionRequest, _impl_.schema_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreateCollectionRequest, _impl_.virtualchannelnames_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreateCollectionRequest, _impl_.physicalchannelnames_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreateCollectionRequest, _impl_.partitionids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DropCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DropCollectionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DropCollectionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DropCollectionRequest, _impl_.collectionname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DropCollectionRequest, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DropCollectionRequest, _impl_.collectionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreatePartitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreatePartitionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreatePartitionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreatePartitionRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreatePartitionRequest, _impl_.partition_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreatePartitionRequest, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreatePartitionRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::CreatePartitionRequest, _impl_.partitionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DropPartitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DropPartitionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DropPartitionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DropPartitionRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DropPartitionRequest, _impl_.partition_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DropPartitionRequest, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DropPartitionRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DropPartitionRequest, _impl_.partitionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::TimeTickMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::TimeTickMsg, _impl_.base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DataNodeTtMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DataNodeTtMsg, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DataNodeTtMsg, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DataNodeTtMsg, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::msg::DataNodeTtMsg, _impl_.segments_stats_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::milvus::proto::msg::InsertRequest)},
  { 21, -1, -1, sizeof(::milvus::proto::msg::DeleteRequest)},
  { 39, -1, -1, sizeof(::milvus::proto::msg::MsgPosition)},
  { 49, -1, -1, sizeof(::milvus::proto::msg::CreateCollectionRequest)},
  { 66, -1, -1, sizeof(::milvus::proto::msg::DropCollectionRequest)},
  { 77, -1, -1, sizeof(::milvus::proto::msg::CreatePartitionRequest)},
  { 90, -1, -1, sizeof(::milvus::proto::msg::DropPartitionRequest)},
  { 103, -1, -1, sizeof(::milvus::proto::msg::TimeTickMsg)},
  { 110, -1, -1, sizeof(::milvus::proto::msg::DataNodeTtMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::milvus::proto::msg::_InsertRequest_default_instance_._instance,
  &::milvus::proto::msg::_DeleteRequest_default_instance_._instance,
  &::milvus::proto::msg::_MsgPosition_default_instance_._instance,
  &::milvus::proto::msg::_CreateCollectionRequest_default_instance_._instance,
  &::milvus::proto::msg::_DropCollectionRequest_default_instance_._instance,
  &::milvus::proto::msg::_CreatePartitionRequest_default_instance_._instance,
  &::milvus::proto::msg::_DropPartitionRequest_default_instance_._instance,
  &::milvus::proto::msg::_TimeTickMsg_default_instance_._instance,
  &::milvus::proto::msg::_DataNodeTtMsg_default_instance_._instance,
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\022\020milvus.proto.msg\032\014common.pr"
  "oto\032\014schema.proto\"\252\003\n\rInsertRequest\022*\n\004b"
  "ase\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022"
  "\021\n\tshardName\030\002 \001(\t\022\017\n\007db_name\030\003 \001(\t\022\027\n\017c"
  "ollection_name\030\004 \001(\t\022\026\n\016partition_name\030\005"
  " \001(\t\022\014\n\004dbID\030\006 \001(\003\022\024\n\014collectionID\030\007 \001(\003"
  "\022\023\n\013partitionID\030\010 \001(\003\022\021\n\tsegmentID\030\t \001(\003"
  "\022\022\n\ntimestamps\030\n \003(\004\022\016\n\006rowIDs\030\013 \003(\003\022+\n\010"
  "row_data\030\014 \003(\0132\031.milvus.proto.common.Blo"
  "b\0223\n\013fields_data\030\r \003(\0132\036.milvus.proto.sc"
  "hema.FieldData\022\020\n\010num_rows\030\016 \001(\004\0224\n\007vers"
  "ion\030\017 \001(\0162#.milvus.proto.msg.InsertDataV"
  "ersion\"\273\002\n\rDeleteRequest\022*\n\004base\030\001 \001(\0132\034"
  ".milvus.proto.common.MsgBase\022\021\n\tshardNam"
  "e\030\002 \001(\t\022\017\n\007db_name\030\003 \001(\t\022\027\n\017collection_n"
  "ame\030\004 \001(\t\022\026\n\016partition_name\030\005 \001(\t\022\014\n\004dbI"
  "D\030\006 \001(\003\022\024\n\014collectionID\030\007 \001(\003\022\023\n\013partiti"
  "onID\030\010 \001(\003\022\032\n\022int64_primary_keys\030\t \003(\003\022\022"
  "\n\ntimestamps\030\n \003(\004\022\020\n\010num_rows\030\013 \001(\003\022.\n\014"
  "primary_keys\030\014 \001(\0132\030.milvus.proto.schema"
  ".IDs\"W\n\013MsgPosition\022\024\n\014channel_name\030\001 \001("
  "\t\022\r\n\005msgID\030\002 \001(\014\022\020\n\010msgGroup\030\003 \001(\t\022\021\n\tti"
  "mestamp\030\004 \001(\004\"\237\002\n\027CreateCollectionReques"
  "t\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.Ms"
  "gBase\022\017\n\007db_name\030\002 \001(\t\022\026\n\016collectionName"
  "\030\003 \001(\t\022\025\n\rpartitionName\030\004 \001(\t\022\014\n\004dbID\030\005 "
  "\001(\003\022\024\n\014collectionID\030\006 \001(\003\022\023\n\013partitionID"
  "\030\007 \001(\003\022\016\n\006schema\030\010 \001(\014\022\033\n\023virtualChannel"
  "Names\030\t \003(\t\022\034\n\024physicalChannelNames\030\n \003("
  "\t\022\024\n\014partitionIDs\030\013 \003(\003\"\220\001\n\025DropCollecti"
  "onRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.c"
  "ommon.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\026\n\016collec"
  "tionName\030\003 \001(\t\022\014\n\004dbID\030\004 \001(\003\022\024\n\014collecti"
  "onID\030\005 \001(\003\"\277\001\n\026CreatePartitionRequest\022*\n"
  "\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBas"
  "e\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_name\030\003 "
  "\001(\t\022\026\n\016partition_name\030\004 \001(\t\022\014\n\004dbID\030\005 \001("
  "\003\022\024\n\014collectionID\030\006 \001(\003\022\023\n\013partitionID\030\007"
  " \001(\003\"\275\001\n\024DropPartitionRequest\022*\n\004base\030\001 "
  "\001(\0132\034.milvus.proto.common.MsgBase\022\017\n\007db_"
  "name\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\026\n\016p"
  "artition_name\030\004 \001(\t\022\014\n\004dbID\030\005 \001(\003\022\024\n\014col"
  "lectionID\030\006 \001(\003\022\023\n\013partitionID\030\007 \001(\003\"9\n\013"
  "TimeTickMsg\022*\n\004base\030\001 \001(\0132\034.milvus.proto"
  ".common.MsgBase\"\237\001\n\rDataNodeTtMsg\022*\n\004bas"
  "e\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022\024\n"
  "\014channel_name\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\004\0229"
  "\n\016segments_stats\030\004 \003(\0132!.milvus.proto.co"
  "mmon.SegmentStats*2\n\021InsertDataVersion\022\014"
  "\n\010RowBased\020\000\022\017\n\013ColumnBased\020\001B3Z1github."
  "com/milvus-io/milvus-proto/go-api/v2/msg"
  "pbb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_msg_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_schema_2eproto,
};
static ::_pbi::once_flag descriptor_table_msg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_2eproto = {
    false, false, 2050, descriptor_table_protodef_msg_2eproto,
    "msg.proto",
    &descriptor_table_msg_2eproto_once, descriptor_table_msg_2eproto_deps, 2, 9,
    schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
    file_level_metadata_msg_2eproto, file_level_enum_descriptors_msg_2eproto,
    file_level_service_descriptors_msg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_2eproto_getter() {
  return &descriptor_table_msg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);
namespace milvus {
namespace proto {
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsertDataVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[0];
}
bool InsertDataVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class InsertRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const InsertRequest* msg);
};

const ::milvus::proto::common::MsgBase&
InsertRequest::_Internal::base(const InsertRequest* msg) {
  return *msg->_impl_.base_;
}
void InsertRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void InsertRequest::clear_row_data() {
  _impl_.row_data_.Clear();
}
void InsertRequest::clear_fields_data() {
  _impl_.fields_data_.Clear();
}
InsertRequest::InsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.msg.InsertRequest)
}
InsertRequest::InsertRequest(const InsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamps_){from._impl_.timestamps_}
    , /*decltype(_impl_._timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.rowids_){from._impl_.rowids_}
    , /*decltype(_impl_._rowids_cached_byte_size_)*/{0}
    , decltype(_impl_.row_data_){from._impl_.row_data_}
    , decltype(_impl_.fields_data_){from._impl_.fields_data_}
    , decltype(_impl_.shardname_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.partitionid_){}
    , decltype(_impl_.segmentid_){}
    , decltype(_impl_.num_rows_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.shardname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shardname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shardname().empty()) {
    _this->_impl_.shardname_.Set(from._internal_shardname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_name().empty()) {
    _this->_impl_.partition_name_.Set(from._internal_partition_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.dbid_, &from._impl_.dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.msg.InsertRequest)
}

inline void InsertRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamps_){arena}
    , /*decltype(_impl_._timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.rowids_){arena}
    , /*decltype(_impl_._rowids_cached_byte_size_)*/{0}
    , decltype(_impl_.row_data_){arena}
    , decltype(_impl_.fields_data_){arena}
    , decltype(_impl_.shardname_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.num_rows_){uint64_t{0u}}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.shardname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shardname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertRequest::~InsertRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.msg.InsertRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamps_.~RepeatedField();
  _impl_.rowids_.~RepeatedField();
  _impl_.row_data_.~RepeatedPtrField();
  _impl_.fields_data_.~RepeatedPtrField();
  _impl_.shardname_.Destroy();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.partition_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void InsertRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.msg.InsertRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamps_.Clear();
  _impl_.rowids_.Clear();
  _impl_.row_data_.Clear();
  _impl_.fields_data_.Clear();
  _impl_.shardname_.ClearToEmpty();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.partition_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string shardName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_shardname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.InsertRequest.shardName"));
        } else
          goto handle_unusual;
        continue;
      // string db_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.InsertRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.InsertRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.InsertRequest.partition_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segmentID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 timestamps = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 rowIDs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_rowids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_rowids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.Blob row_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.schema.FieldData fields_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 num_rows = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.msg.InsertDataVersion version = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_version(static_cast<::milvus::proto::msg::InsertDataVersion>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.msg.InsertRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string shardName = 2;
  if (!this->_internal_shardname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shardname().data(), static_cast<int>(this->_internal_shardname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.InsertRequest.shardName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_shardname(), target);
  }

  // string db_name = 3;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.InsertRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_db_name(), target);
  }

  // string collection_name = 4;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.InsertRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_collection_name(), target);
  }

  // string partition_name = 5;
  if (!this->_internal_partition_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.InsertRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_partition_name(), target);
  }

  // int64 dbID = 6;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_dbid(), target);
  }

  // int64 collectionID = 7;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 8;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_partitionid(), target);
  }

  // int64 segmentID = 9;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_segmentid(), target);
  }

  // repeated uint64 timestamps = 10;
  {
    int byte_size = _impl_._timestamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          10, _internal_timestamps(), byte_size, target);
    }
  }

  // repeated int64 rowIDs = 11;
  {
    int byte_size = _impl_._rowids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          11, _internal_rowids(), byte_size, target);
    }
  }

  // repeated .milvus.proto.common.Blob row_data = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.schema.FieldData fields_data = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 num_rows = 14;
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_num_rows(), target);
  }

  // .milvus.proto.msg.InsertDataVersion version = 15;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.msg.InsertRequest)
  return target;
}

size_t InsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.msg.InsertRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 timestamps = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 rowIDs = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.rowids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._rowids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .milvus.proto.common.Blob row_data = 12;
  total_size += 1UL * this->_internal_row_data_size();
  for (const auto& msg : this->_impl_.row_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.schema.FieldData fields_data = 13;
  total_size += 1UL * this->_internal_fields_data_size();
  for (const auto& msg : this->_impl_.fields_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string shardName = 2;
  if (!this->_internal_shardname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shardname());
  }

  // string db_name = 3;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 4;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 5;
  if (!this->_internal_partition_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 dbID = 6;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 7;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 partitionID = 8;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  // int64 segmentID = 9;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // uint64 num_rows = 14;
  if (this->_internal_num_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_num_rows());
  }

  // .milvus.proto.msg.InsertDataVersion version = 15;
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertRequest::GetClassData() const { return &_class_data_; }


void InsertRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertRequest*>(&to_msg);
  auto& from = static_cast<const InsertRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.msg.InsertRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.timestamps_.MergeFrom(from._impl_.timestamps_);
  _this->_impl_.rowids_.MergeFrom(from._impl_.rowids_);
  _this->_impl_.row_data_.MergeFrom(from._impl_.row_data_);
  _this->_impl_.fields_data_.MergeFrom(from._impl_.fields_data_);
  if (!from._internal_shardname().empty()) {
    _this->_internal_set_shardname(from._internal_shardname());
  }
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_partition_name().empty()) {
    _this->_internal_set_partition_name(from._internal_partition_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_num_rows() != 0) {
    _this->_internal_set_num_rows(from._internal_num_rows());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertRequest::CopyFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.msg.InsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRequest::IsInitialized() const {
  return true;
}

void InsertRequest::InternalSwap(InsertRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.timestamps_.InternalSwap(&other->_impl_.timestamps_);
  _impl_.rowids_.InternalSwap(&other->_impl_.rowids_);
  _impl_.row_data_.InternalSwap(&other->_impl_.row_data_);
  _impl_.fields_data_.InternalSwap(&other->_impl_.fields_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shardname_, lhs_arena,
      &other->_impl_.shardname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_name_, lhs_arena,
      &other->_impl_.partition_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertRequest, _impl_.version_)
      + sizeof(InsertRequest::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(InsertRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[0]);
}

// ===================================================================

class DeleteRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DeleteRequest* msg);
  static const ::milvus::proto::schema::IDs& primary_keys(const DeleteRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DeleteRequest::_Internal::base(const DeleteRequest* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::schema::IDs&
DeleteRequest::_Internal::primary_keys(const DeleteRequest* msg) {
  return *msg->_impl_.primary_keys_;
}
void DeleteRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void DeleteRequest::clear_primary_keys() {
  if (GetArenaForAllocation() == nullptr && _impl_.primary_keys_ != nullptr) {
    delete _impl_.primary_keys_;
  }
  _impl_.primary_keys_ = nullptr;
}
DeleteRequest::DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.msg.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.int64_primary_keys_){from._impl_.int64_primary_keys_}
    , /*decltype(_impl_._int64_primary_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamps_){from._impl_.timestamps_}
    , /*decltype(_impl_._timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.shardname_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.primary_keys_){nullptr}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.partitionid_){}
    , decltype(_impl_.num_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.shardname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shardname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shardname().empty()) {
    _this->_impl_.shardname_.Set(from._internal_shardname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_name().empty()) {
    _this->_impl_.partition_name_.Set(from._internal_partition_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_primary_keys()) {
    _this->_impl_.primary_keys_ = new ::milvus::proto::schema::IDs(*from._impl_.primary_keys_);
  }
  ::memcpy(&_impl_.dbid_, &from._impl_.dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_rows_) -
    reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.num_rows_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.msg.DeleteRequest)
}

inline void DeleteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.int64_primary_keys_){arena}
    , /*decltype(_impl_._int64_primary_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamps_){arena}
    , /*decltype(_impl_._timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.shardname_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.primary_keys_){nullptr}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , decltype(_impl_.num_rows_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.shardname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shardname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.msg.DeleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.int64_primary_keys_.~RepeatedField();
  _impl_.timestamps_.~RepeatedField();
  _impl_.shardname_.Destroy();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.partition_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.primary_keys_;
}

void DeleteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.msg.DeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.int64_primary_keys_.Clear();
  _impl_.timestamps_.Clear();
  _impl_.shardname_.ClearToEmpty();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.partition_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.primary_keys_ != nullptr) {
    delete _impl_.primary_keys_;
  }
  _impl_.primary_keys_ = nullptr;
  ::memset(&_impl_.dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_rows_) -
      reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.num_rows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string shardName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_shardname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.DeleteRequest.shardName"));
        } else
          goto handle_unusual;
        continue;
      // string db_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.DeleteRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.DeleteRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.DeleteRequest.partition_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 int64_primary_keys = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64_primary_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_int64_primary_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 timestamps = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_rows = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.schema.IDs primary_keys = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_primary_keys(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.msg.DeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string shardName = 2;
  if (!this->_internal_shardname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shardname().data(), static_cast<int>(this->_internal_shardname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.DeleteRequest.shardName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_shardname(), target);
  }

  // string db_name = 3;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.DeleteRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_db_name(), target);
  }

  // string collection_name = 4;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.DeleteRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_collection_name(), target);
  }

  // string partition_name = 5;
  if (!this->_internal_partition_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.DeleteRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_partition_name(), target);
  }

  // int64 dbID = 6;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_dbid(), target);
  }

  // int64 collectionID = 7;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 8;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_partitionid(), target);
  }

  // repeated int64 int64_primary_keys = 9;
  {
    int byte_size = _impl_._int64_primary_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          9, _internal_int64_primary_keys(), byte_size, target);
    }
  }

  // repeated uint64 timestamps = 10;
  {
    int byte_size = _impl_._timestamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          10, _internal_timestamps(), byte_size, target);
    }
  }

  // int64 num_rows = 11;
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_num_rows(), target);
  }

  // .milvus.proto.schema.IDs primary_keys = 12;
  if (this->_internal_has_primary_keys()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::primary_keys(this),
        _Internal::primary_keys(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.msg.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.msg.DeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 int64_primary_keys = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.int64_primary_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._int64_primary_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 timestamps = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string shardName = 2;
  if (!this->_internal_shardname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shardname());
  }

  // string db_name = 3;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 4;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 5;
  if (!this->_internal_partition_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.schema.IDs primary_keys = 12;
  if (this->_internal_has_primary_keys()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.primary_keys_);
  }

  // int64 dbID = 6;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 7;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 partitionID = 8;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  // int64 num_rows = 11;
  if (this->_internal_num_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRequest::GetClassData() const { return &_class_data_; }


void DeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteRequest*>(&to_msg);
  auto& from = static_cast<const DeleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.msg.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.int64_primary_keys_.MergeFrom(from._impl_.int64_primary_keys_);
  _this->_impl_.timestamps_.MergeFrom(from._impl_.timestamps_);
  if (!from._internal_shardname().empty()) {
    _this->_internal_set_shardname(from._internal_shardname());
  }
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_partition_name().empty()) {
    _this->_internal_set_partition_name(from._internal_partition_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_primary_keys()) {
    _this->_internal_mutable_primary_keys()->::milvus::proto::schema::IDs::MergeFrom(
        from._internal_primary_keys());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  if (from._internal_num_rows() != 0) {
    _this->_internal_set_num_rows(from._internal_num_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.msg.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.int64_primary_keys_.InternalSwap(&other->_impl_.int64_primary_keys_);
  _impl_.timestamps_.InternalSwap(&other->_impl_.timestamps_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shardname_, lhs_arena,
      &other->_impl_.shardname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_name_, lhs_arena,
      &other->_impl_.partition_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteRequest, _impl_.num_rows_)
      + sizeof(DeleteRequest::_impl_.num_rows_)
      - PROTOBUF_FIELD_OFFSET(DeleteRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[1]);
}

// ===================================================================

class MsgPosition::_Internal {
 public:
};

MsgPosition::MsgPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.msg.MsgPosition)
}
MsgPosition::MsgPosition(const MsgPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_name_){}
    , decltype(_impl_.msgid_){}
    , decltype(_impl_.msggroup_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_name().empty()) {
    _this->_impl_.channel_name_.Set(from._internal_channel_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msgid().empty()) {
    _this->_impl_.msgid_.Set(from._internal_msgid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msggroup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msggroup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msggroup().empty()) {
    _this->_impl_.msggroup_.Set(from._internal_msggroup(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.msg.MsgPosition)
}

inline void MsgPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_name_){}
    , decltype(_impl_.msgid_){}
    , decltype(_impl_.msggroup_){}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msggroup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msggroup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgPosition::~MsgPosition() {
  // @@protoc_insertion_point(destructor:milvus.proto.msg.MsgPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_name_.Destroy();
  _impl_.msgid_.Destroy();
  _impl_.msggroup_.Destroy();
}

void MsgPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.msg.MsgPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_name_.ClearToEmpty();
  _impl_.msgid_.ClearToEmpty();
  _impl_.msggroup_.ClearToEmpty();
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.MsgPosition.channel_name"));
        } else
          goto handle_unusual;
        continue;
      // bytes msgID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msgid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msgGroup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msggroup();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.MsgPosition.msgGroup"));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.msg.MsgPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_name = 1;
  if (!this->_internal_channel_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.MsgPosition.channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_name(), target);
  }

  // bytes msgID = 2;
  if (!this->_internal_msgid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msgid(), target);
  }

  // string msgGroup = 3;
  if (!this->_internal_msggroup().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msggroup().data(), static_cast<int>(this->_internal_msggroup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.MsgPosition.msgGroup");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msggroup(), target);
  }

  // uint64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.msg.MsgPosition)
  return target;
}

size_t MsgPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.msg.MsgPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_name = 1;
  if (!this->_internal_channel_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_name());
  }

  // bytes msgID = 2;
  if (!this->_internal_msgid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msgid());
  }

  // string msgGroup = 3;
  if (!this->_internal_msggroup().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msggroup());
  }

  // uint64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgPosition::GetClassData() const { return &_class_data_; }


void MsgPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgPosition*>(&to_msg);
  auto& from = static_cast<const MsgPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.msg.MsgPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_name().empty()) {
    _this->_internal_set_channel_name(from._internal_channel_name());
  }
  if (!from._internal_msgid().empty()) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  if (!from._internal_msggroup().empty()) {
    _this->_internal_set_msggroup(from._internal_msggroup());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgPosition::CopyFrom(const MsgPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.msg.MsgPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPosition::IsInitialized() const {
  return true;
}

void MsgPosition::InternalSwap(MsgPosition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgid_, lhs_arena,
      &other->_impl_.msgid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msggroup_, lhs_arena,
      &other->_impl_.msggroup_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[2]);
}

// ===================================================================

class CreateCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateCollectionRequest::_Internal::base(const CreateCollectionRequest* msg) {
  return *msg->_impl_.base_;
}
void CreateCollectionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
CreateCollectionRequest::CreateCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.msg.CreateCollectionRequest)
}
CreateCollectionRequest::CreateCollectionRequest(const CreateCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateCollectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.virtualchannelnames_){from._impl_.virtualchannelnames_}
    , decltype(_impl_.physicalchannelnames_){from._impl_.physicalchannelnames_}
    , decltype(_impl_.partitionids_){from._impl_.partitionids_}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collectionname_){}
    , decltype(_impl_.partitionname_){}
    , decltype(_impl_.schema_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.partitionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collectionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collectionname().empty()) {
    _this->_impl_.collectionname_.Set(from._internal_collectionname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partitionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partitionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partitionname().empty()) {
    _this->_impl_.partitionname_.Set(from._internal_partitionname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema().empty()) {
    _this->_impl_.schema_.Set(from._internal_schema(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.dbid_, &from._impl_.dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.partitionid_) -
    reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.partitionid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.msg.CreateCollectionRequest)
}

inline void CreateCollectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.virtualchannelnames_){arena}
    , decltype(_impl_.physicalchannelnames_){arena}
    , decltype(_impl_.partitionids_){arena}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collectionname_){}
    , decltype(_impl_.partitionname_){}
    , decltype(_impl_.schema_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collectionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partitionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partitionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateCollectionRequest::~CreateCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.msg.CreateCollectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.virtualchannelnames_.~RepeatedPtrField();
  _impl_.physicalchannelnames_.~RepeatedPtrField();
  _impl_.partitionids_.~RepeatedField();
  _impl_.db_name_.Destroy();
  _impl_.collectionname_.Destroy();
  _impl_.partitionname_.Destroy();
  _impl_.schema_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void CreateCollectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.msg.CreateCollectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.virtualchannelnames_.Clear();
  _impl_.physicalchannelnames_.Clear();
  _impl_.partitionids_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collectionname_.ClearToEmpty();
  _impl_.partitionname_.ClearToEmpty();
  _impl_.schema_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.partitionid_) -
      reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.partitionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCollectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.CreateCollectionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collectionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collectionname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.CreateCollectionRequest.collectionName"));
        } else
          goto handle_unusual;
        continue;
      // string partitionName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_partitionname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.CreateCollectionRequest.partitionName"));
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes schema = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_schema();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string virtualChannelNames = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_virtualchannelnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.CreateCollectionRequest.virtualChannelNames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string physicalChannelNames = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_physicalchannelnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.CreateCollectionRequest.physicalChannelNames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 partitionIDs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_partitionids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_partitionids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateCollectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.msg.CreateCollectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.CreateCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collectionName = 3;
  if (!this->_internal_collectionname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collectionname().data(), static_cast<int>(this->_internal_collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.CreateCollectionRequest.collectionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collectionname(), target);
  }

  // string partitionName = 4;
  if (!this->_internal_partitionname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partitionname().data(), static_cast<int>(this->_internal_partitionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.CreateCollectionRequest.partitionName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partitionname(), target);
  }

  // int64 dbID = 5;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_dbid(), target);
  }

  // int64 collectionID = 6;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 7;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_partitionid(), target);
  }

  // bytes schema = 8;
  if (!this->_internal_schema().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_schema(), target);
  }

  // repeated string virtualChannelNames = 9;
  for (int i = 0, n = this->_internal_virtualchannelnames_size(); i < n; i++) {
    const auto& s = this->_internal_virtualchannelnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.CreateCollectionRequest.virtualChannelNames");
    target = stream->WriteString(9, s, target);
  }

  // repeated string physicalChannelNames = 10;
  for (int i = 0, n = this->_internal_physicalchannelnames_size(); i < n; i++) {
    const auto& s = this->_internal_physicalchannelnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.CreateCollectionRequest.physicalChannelNames");
    target = stream->WriteString(10, s, target);
  }

  // repeated int64 partitionIDs = 11;
  {
    int byte_size = _impl_._partitionids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          11, _internal_partitionids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.msg.CreateCollectionRequest)
  return target;
}

size_t CreateCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.msg.CreateCollectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string virtualChannelNames = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.virtualchannelnames_.size());
  for (int i = 0, n = _impl_.virtualchannelnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.virtualchannelnames_.Get(i));
  }

  // repeated string physicalChannelNames = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.physicalchannelnames_.size());
  for (int i = 0, n = _impl_.physicalchannelnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.physicalchannelnames_.Get(i));
  }

  // repeated int64 partitionIDs = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.partitionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._partitionids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collectionName = 3;
  if (!this->_internal_collectionname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionname());
  }

  // string partitionName = 4;
  if (!this->_internal_partitionname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partitionname());
  }

  // bytes schema = 8;
  if (!this->_internal_schema().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_schema());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 dbID = 5;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 6;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 partitionID = 7;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateCollectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateCollectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateCollectionRequest::GetClassData() const { return &_class_data_; }


void CreateCollectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateCollectionRequest*>(&to_msg);
  auto& from = static_cast<const CreateCollectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.msg.CreateCollectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.virtualchannelnames_.MergeFrom(from._impl_.virtualchannelnames_);
  _this->_impl_.physicalchannelnames_.MergeFrom(from._impl_.physicalchannelnames_);
  _this->_impl_.partitionids_.MergeFrom(from._impl_.partitionids_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collectionname().empty()) {
    _this->_internal_set_collectionname(from._internal_collectionname());
  }
  if (!from._internal_partitionname().empty()) {
    _this->_internal_set_partitionname(from._internal_partitionname());
  }
  if (!from._internal_schema().empty()) {
    _this->_internal_set_schema(from._internal_schema());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateCollectionRequest::CopyFrom(const CreateCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.msg.CreateCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCollectionRequest::IsInitialized() const {
  return true;
}

void CreateCollectionRequest::InternalSwap(CreateCollectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.virtualchannelnames_.InternalSwap(&other->_impl_.virtualchannelnames_);
  _impl_.physicalchannelnames_.InternalSwap(&other->_impl_.physicalchannelnames_);
  _impl_.partitionids_.InternalSwap(&other->_impl_.partitionids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collectionname_, lhs_arena,
      &other->_impl_.collectionname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partitionname_, lhs_arena,
      &other->_impl_.partitionname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_, lhs_arena,
      &other->_impl_.schema_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateCollectionRequest, _impl_.partitionid_)
      + sizeof(CreateCollectionRequest::_impl_.partitionid_)
      - PROTOBUF_FIELD_OFFSET(CreateCollectionRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCollectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[3]);
}

// ===================================================================

class DropCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropCollectionRequest::_Internal::base(const DropCollectionRequest* msg) {
  return *msg->_impl_.base_;
}
void DropCollectionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DropCollectionRequest::DropCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.msg.DropCollectionRequest)
}
DropCollectionRequest::DropCollectionRequest(const DropCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropCollectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collectionname_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collectionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collectionname().empty()) {
    _this->_impl_.collectionname_.Set(from._internal_collectionname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.dbid_, &from._impl_.dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.collectionid_) -
    reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.collectionid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.msg.DropCollectionRequest)
}

inline void DropCollectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collectionname_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collectionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DropCollectionRequest::~DropCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.msg.DropCollectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collectionname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DropCollectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.msg.DropCollectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collectionname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.collectionid_) -
      reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.collectionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropCollectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.DropCollectionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collectionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collectionname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.DropCollectionRequest.collectionName"));
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropCollectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.msg.DropCollectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.DropCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collectionName = 3;
  if (!this->_internal_collectionname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collectionname().data(), static_cast<int>(this->_internal_collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.DropCollectionRequest.collectionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collectionname(), target);
  }

  // int64 dbID = 4;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_dbid(), target);
  }

  // int64 collectionID = 5;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_collectionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.msg.DropCollectionRequest)
  return target;
}

size_t DropCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.msg.DropCollectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collectionName = 3;
  if (!this->_internal_collectionname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionname());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 dbID = 4;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 5;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropCollectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropCollectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropCollectionRequest::GetClassData() const { return &_class_data_; }


void DropCollectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropCollectionRequest*>(&to_msg);
  auto& from = static_cast<const DropCollectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.msg.DropCollectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collectionname().empty()) {
    _this->_internal_set_collectionname(from._internal_collectionname());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropCollectionRequest::CopyFrom(const DropCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.msg.DropCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropCollectionRequest::IsInitialized() const {
  return true;
}

void DropCollectionRequest::InternalSwap(DropCollectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collectionname_, lhs_arena,
      &other->_impl_.collectionname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropCollectionRequest, _impl_.collectionid_)
      + sizeof(DropCollectionRequest::_impl_.collectionid_)
      - PROTOBUF_FIELD_OFFSET(DropCollectionRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropCollectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[4]);
}

// ===================================================================

class CreatePartitionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreatePartitionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreatePartitionRequest::_Internal::base(const CreatePartitionRequest* msg) {
  return *msg->_impl_.base_;
}
void CreatePartitionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
CreatePartitionRequest::CreatePartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.msg.CreatePartitionRequest)
}
CreatePartitionRequest::CreatePartitionRequest(const CreatePartitionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreatePartitionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.partitionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_name().empty()) {
    _this->_impl_.partition_name_.Set(from._internal_partition_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.dbid_, &from._impl_.dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.partitionid_) -
    reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.partitionid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.msg.CreatePartitionRequest)
}

inline void CreatePartitionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreatePartitionRequest::~CreatePartitionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.msg.CreatePartitionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreatePartitionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.partition_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void CreatePartitionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreatePartitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.msg.CreatePartitionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.partition_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.partitionid_) -
      reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.partitionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatePartitionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.CreatePartitionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.CreatePartitionRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.CreatePartitionRequest.partition_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreatePartitionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.msg.CreatePartitionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.CreatePartitionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.CreatePartitionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.CreatePartitionRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  // int64 dbID = 5;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_dbid(), target);
  }

  // int64 collectionID = 6;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 7;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_partitionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.msg.CreatePartitionRequest)
  return target;
}

size_t CreatePartitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.msg.CreatePartitionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 dbID = 5;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 6;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 partitionID = 7;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreatePartitionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreatePartitionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreatePartitionRequest::GetClassData() const { return &_class_data_; }


void CreatePartitionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreatePartitionRequest*>(&to_msg);
  auto& from = static_cast<const CreatePartitionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.msg.CreatePartitionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_partition_name().empty()) {
    _this->_internal_set_partition_name(from._internal_partition_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreatePartitionRequest::CopyFrom(const CreatePartitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.msg.CreatePartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePartitionRequest::IsInitialized() const {
  return true;
}

void CreatePartitionRequest::InternalSwap(CreatePartitionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_name_, lhs_arena,
      &other->_impl_.partition_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreatePartitionRequest, _impl_.partitionid_)
      + sizeof(CreatePartitionRequest::_impl_.partitionid_)
      - PROTOBUF_FIELD_OFFSET(CreatePartitionRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePartitionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[5]);
}

// ===================================================================

class DropPartitionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropPartitionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropPartitionRequest::_Internal::base(const DropPartitionRequest* msg) {
  return *msg->_impl_.base_;
}
void DropPartitionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DropPartitionRequest::DropPartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.msg.DropPartitionRequest)
}
DropPartitionRequest::DropPartitionRequest(const DropPartitionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropPartitionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.partitionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_name().empty()) {
    _this->_impl_.partition_name_.Set(from._internal_partition_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.dbid_, &from._impl_.dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.partitionid_) -
    reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.partitionid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.msg.DropPartitionRequest)
}

inline void DropPartitionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DropPartitionRequest::~DropPartitionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.msg.DropPartitionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropPartitionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.partition_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DropPartitionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropPartitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.msg.DropPartitionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.partition_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.partitionid_) -
      reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.partitionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropPartitionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.DropPartitionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.DropPartitionRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.DropPartitionRequest.partition_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropPartitionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.msg.DropPartitionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.DropPartitionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.DropPartitionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.DropPartitionRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  // int64 dbID = 5;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_dbid(), target);
  }

  // int64 collectionID = 6;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 7;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_partitionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.msg.DropPartitionRequest)
  return target;
}

size_t DropPartitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.msg.DropPartitionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 dbID = 5;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 6;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 partitionID = 7;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropPartitionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropPartitionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropPartitionRequest::GetClassData() const { return &_class_data_; }


void DropPartitionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropPartitionRequest*>(&to_msg);
  auto& from = static_cast<const DropPartitionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.msg.DropPartitionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_partition_name().empty()) {
    _this->_internal_set_partition_name(from._internal_partition_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropPartitionRequest::CopyFrom(const DropPartitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.msg.DropPartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropPartitionRequest::IsInitialized() const {
  return true;
}

void DropPartitionRequest::InternalSwap(DropPartitionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_name_, lhs_arena,
      &other->_impl_.partition_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropPartitionRequest, _impl_.partitionid_)
      + sizeof(DropPartitionRequest::_impl_.partitionid_)
      - PROTOBUF_FIELD_OFFSET(DropPartitionRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropPartitionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[6]);
}

// ===================================================================

class TimeTickMsg::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const TimeTickMsg* msg);
};

const ::milvus::proto::common::MsgBase&
TimeTickMsg::_Internal::base(const TimeTickMsg* msg) {
  return *msg->_impl_.base_;
}
void TimeTickMsg::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
TimeTickMsg::TimeTickMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.msg.TimeTickMsg)
}
TimeTickMsg::TimeTickMsg(const TimeTickMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeTickMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.msg.TimeTickMsg)
}

inline void TimeTickMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimeTickMsg::~TimeTickMsg() {
  // @@protoc_insertion_point(destructor:milvus.proto.msg.TimeTickMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeTickMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void TimeTickMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeTickMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.msg.TimeTickMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeTickMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeTickMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.msg.TimeTickMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.msg.TimeTickMsg)
  return target;
}

size_t TimeTickMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.msg.TimeTickMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeTickMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeTickMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeTickMsg::GetClassData() const { return &_class_data_; }


void TimeTickMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeTickMsg*>(&to_msg);
  auto& from = static_cast<const TimeTickMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.msg.TimeTickMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeTickMsg::CopyFrom(const TimeTickMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.msg.TimeTickMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeTickMsg::IsInitialized() const {
  return true;
}

void TimeTickMsg::InternalSwap(TimeTickMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeTickMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[7]);
}

// ===================================================================

class DataNodeTtMsg::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DataNodeTtMsg* msg);
};

const ::milvus::proto::common::MsgBase&
DataNodeTtMsg::_Internal::base(const DataNodeTtMsg* msg) {
  return *msg->_impl_.base_;
}
void DataNodeTtMsg::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void DataNodeTtMsg::clear_segments_stats() {
  _impl_.segments_stats_.Clear();
}
DataNodeTtMsg::DataNodeTtMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.msg.DataNodeTtMsg)
}
DataNodeTtMsg::DataNodeTtMsg(const DataNodeTtMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataNodeTtMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_stats_){from._impl_.segments_stats_}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_name().empty()) {
    _this->_impl_.channel_name_.Set(from._internal_channel_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.msg.DataNodeTtMsg)
}

inline void DataNodeTtMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_stats_){arena}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataNodeTtMsg::~DataNodeTtMsg() {
  // @@protoc_insertion_point(destructor:milvus.proto.msg.DataNodeTtMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataNodeTtMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segments_stats_.~RepeatedPtrField();
  _impl_.channel_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DataNodeTtMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataNodeTtMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.msg.DataNodeTtMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segments_stats_.Clear();
  _impl_.channel_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataNodeTtMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string channel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.msg.DataNodeTtMsg.channel_name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.SegmentStats segments_stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataNodeTtMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.msg.DataNodeTtMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string channel_name = 2;
  if (!this->_internal_channel_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.msg.DataNodeTtMsg.channel_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel_name(), target);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // repeated .milvus.proto.common.SegmentStats segments_stats = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segments_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_segments_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.msg.DataNodeTtMsg)
  return target;
}

size_t DataNodeTtMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.msg.DataNodeTtMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.SegmentStats segments_stats = 4;
  total_size += 1UL * this->_internal_segments_stats_size();
  for (const auto& msg : this->_impl_.segments_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string channel_name = 2;
  if (!this->_internal_channel_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataNodeTtMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataNodeTtMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataNodeTtMsg::GetClassData() const { return &_class_data_; }


void DataNodeTtMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataNodeTtMsg*>(&to_msg);
  auto& from = static_cast<const DataNodeTtMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.msg.DataNodeTtMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segments_stats_.MergeFrom(from._impl_.segments_stats_);
  if (!from._internal_channel_name().empty()) {
    _this->_internal_set_channel_name(from._internal_channel_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataNodeTtMsg::CopyFrom(const DataNodeTtMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.msg.DataNodeTtMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataNodeTtMsg::IsInitialized() const {
  return true;
}

void DataNodeTtMsg::InternalSwap(DataNodeTtMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segments_stats_.InternalSwap(&other->_impl_.segments_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataNodeTtMsg, _impl_.timestamp_)
      + sizeof(DataNodeTtMsg::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(DataNodeTtMsg, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataNodeTtMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::milvus::proto::msg::InsertRequest*
Arena::CreateMaybeMessage< ::milvus::proto::msg::InsertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::msg::InsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::msg::DeleteRequest*
Arena::CreateMaybeMessage< ::milvus::proto::msg::DeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::msg::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::msg::MsgPosition*
Arena::CreateMaybeMessage< ::milvus::proto::msg::MsgPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::msg::MsgPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::msg::CreateCollectionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::msg::CreateCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::msg::CreateCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::msg::DropCollectionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::msg::DropCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::msg::DropCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::msg::CreatePartitionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::msg::CreatePartitionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::msg::CreatePartitionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::msg::DropPartitionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::msg::DropPartitionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::msg::DropPartitionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::msg::TimeTickMsg*
Arena::CreateMaybeMessage< ::milvus::proto::msg::TimeTickMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::msg::TimeTickMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::msg::DataNodeTtMsg*
Arena::CreateMaybeMessage< ::milvus::proto::msg::DataNodeTtMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::msg::DataNodeTtMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
