// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feder.proto

#include "feder.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace milvus {
namespace proto {
namespace feder {
PROTOBUF_CONSTEXPR SegmentIndexData::SegmentIndexData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentIndexDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentIndexDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentIndexDataDefaultTypeInternal() {}
  union {
    SegmentIndexData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentIndexDataDefaultTypeInternal _SegmentIndexData_default_instance_;
PROTOBUF_CONSTEXPR FederSegmentSearchResult::FederSegmentSearchResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.visit_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FederSegmentSearchResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FederSegmentSearchResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FederSegmentSearchResultDefaultTypeInternal() {}
  union {
    FederSegmentSearchResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FederSegmentSearchResultDefaultTypeInternal _FederSegmentSearchResult_default_instance_;
PROTOBUF_CONSTEXPR ListIndexedSegmentRequest::ListIndexedSegmentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListIndexedSegmentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListIndexedSegmentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListIndexedSegmentRequestDefaultTypeInternal() {}
  union {
    ListIndexedSegmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListIndexedSegmentRequestDefaultTypeInternal _ListIndexedSegmentRequest_default_instance_;
PROTOBUF_CONSTEXPR ListIndexedSegmentResponse::ListIndexedSegmentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentids_)*/{}
  , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListIndexedSegmentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListIndexedSegmentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListIndexedSegmentResponseDefaultTypeInternal() {}
  union {
    ListIndexedSegmentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListIndexedSegmentResponseDefaultTypeInternal _ListIndexedSegmentResponse_default_instance_;
PROTOBUF_CONSTEXPR DescribeSegmentIndexDataRequest::DescribeSegmentIndexDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentsids_)*/{}
  , /*decltype(_impl_._segmentsids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeSegmentIndexDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeSegmentIndexDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeSegmentIndexDataRequestDefaultTypeInternal() {}
  union {
    DescribeSegmentIndexDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeSegmentIndexDataRequestDefaultTypeInternal _DescribeSegmentIndexDataRequest_default_instance_;
PROTOBUF_CONSTEXPR DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUseDefaultTypeInternal _DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DescribeSegmentIndexDataResponse::DescribeSegmentIndexDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_data_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.index_params_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeSegmentIndexDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeSegmentIndexDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeSegmentIndexDataResponseDefaultTypeInternal() {}
  union {
    DescribeSegmentIndexDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeSegmentIndexDataResponseDefaultTypeInternal _DescribeSegmentIndexDataResponse_default_instance_;
}  // namespace feder
}  // namespace proto
}  // namespace milvus
static ::_pb::Metadata file_level_metadata_feder_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_feder_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_feder_2eproto = nullptr;

const uint32_t TableStruct_feder_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::SegmentIndexData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::SegmentIndexData, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::SegmentIndexData, _impl_.index_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::FederSegmentSearchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::FederSegmentSearchResult, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::FederSegmentSearchResult, _impl_.visit_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::ListIndexedSegmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::ListIndexedSegmentRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::ListIndexedSegmentRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::ListIndexedSegmentRequest, _impl_.index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::ListIndexedSegmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::ListIndexedSegmentResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::ListIndexedSegmentResponse, _impl_.segmentids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataRequest, _impl_.index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataRequest, _impl_.segmentsids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse, _impl_.index_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse, _impl_.index_params_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::milvus::proto::feder::SegmentIndexData)},
  { 8, -1, -1, sizeof(::milvus::proto::feder::FederSegmentSearchResult)},
  { 16, -1, -1, sizeof(::milvus::proto::feder::ListIndexedSegmentRequest)},
  { 25, -1, -1, sizeof(::milvus::proto::feder::ListIndexedSegmentResponse)},
  { 33, -1, -1, sizeof(::milvus::proto::feder::DescribeSegmentIndexDataRequest)},
  { 43, 51, -1, sizeof(::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse)},
  { 53, -1, -1, sizeof(::milvus::proto::feder::DescribeSegmentIndexDataResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::milvus::proto::feder::_SegmentIndexData_default_instance_._instance,
  &::milvus::proto::feder::_FederSegmentSearchResult_default_instance_._instance,
  &::milvus::proto::feder::_ListIndexedSegmentRequest_default_instance_._instance,
  &::milvus::proto::feder::_ListIndexedSegmentResponse_default_instance_._instance,
  &::milvus::proto::feder::_DescribeSegmentIndexDataRequest_default_instance_._instance,
  &::milvus::proto::feder::_DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse_default_instance_._instance,
  &::milvus::proto::feder::_DescribeSegmentIndexDataResponse_default_instance_._instance,
};

const char descriptor_table_protodef_feder_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013feder.proto\022\022milvus.proto.feder\032\014commo"
  "n.proto\"9\n\020SegmentIndexData\022\021\n\tsegmentID"
  "\030\001 \001(\003\022\022\n\nindex_data\030\002 \001(\t\"A\n\030FederSegme"
  "ntSearchResult\022\021\n\tsegmentID\030\001 \001(\003\022\022\n\nvis"
  "it_info\030\002 \001(\t\"t\n\031ListIndexedSegmentReque"
  "st\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.M"
  "sgBase\022\027\n\017collection_name\030\002 \001(\t\022\022\n\nindex"
  "_name\030\003 \001(\t\"]\n\032ListIndexedSegmentRespons"
  "e\022+\n\006status\030\001 \001(\0132\033.milvus.proto.common."
  "Status\022\022\n\nsegmentIDs\030\002 \003(\003\"\217\001\n\037DescribeS"
  "egmentIndexDataRequest\022*\n\004base\030\001 \001(\0132\034.m"
  "ilvus.proto.common.MsgBase\022\027\n\017collection"
  "_name\030\002 \001(\t\022\022\n\nindex_name\030\003 \001(\t\022\023\n\013segme"
  "ntsIDs\030\004 \003(\003\"\271\002\n DescribeSegmentIndexDat"
  "aResponse\022+\n\006status\030\001 \001(\0132\033.milvus.proto"
  ".common.Status\022W\n\nindex_data\030\002 \003(\0132C.mil"
  "vus.proto.feder.DescribeSegmentIndexData"
  "Response.IndexDataEntry\0227\n\014index_params\030"
  "\003 \003(\0132!.milvus.proto.common.KeyValuePair"
  "\032V\n\016IndexDataEntry\022\013\n\003key\030\001 \001(\003\0223\n\005value"
  "\030\002 \001(\0132$.milvus.proto.feder.SegmentIndex"
  "Data:\0028\001B5Z3github.com/milvus-io/milvus-"
  "proto/go-api/v2/federpbb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_feder_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_feder_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_feder_2eproto = {
    false, false, 911, descriptor_table_protodef_feder_2eproto,
    "feder.proto",
    &descriptor_table_feder_2eproto_once, descriptor_table_feder_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_feder_2eproto::offsets,
    file_level_metadata_feder_2eproto, file_level_enum_descriptors_feder_2eproto,
    file_level_service_descriptors_feder_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_feder_2eproto_getter() {
  return &descriptor_table_feder_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_feder_2eproto(&descriptor_table_feder_2eproto);
namespace milvus {
namespace proto {
namespace feder {

// ===================================================================

class SegmentIndexData::_Internal {
 public:
};

SegmentIndexData::SegmentIndexData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.feder.SegmentIndexData)
}
SegmentIndexData::SegmentIndexData(const SegmentIndexData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentIndexData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_data_){}
    , decltype(_impl_.segmentid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_data().empty()) {
    _this->_impl_.index_data_.Set(from._internal_index_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.segmentid_ = from._impl_.segmentid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.feder.SegmentIndexData)
}

inline void SegmentIndexData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_data_){}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SegmentIndexData::~SegmentIndexData() {
  // @@protoc_insertion_point(destructor:milvus.proto.feder.SegmentIndexData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentIndexData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_data_.Destroy();
}

void SegmentIndexData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentIndexData::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.feder.SegmentIndexData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_data_.ClearToEmpty();
  _impl_.segmentid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentIndexData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string index_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.feder.SegmentIndexData.index_data"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentIndexData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.feder.SegmentIndexData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // string index_data = 2;
  if (!this->_internal_index_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_data().data(), static_cast<int>(this->_internal_index_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.feder.SegmentIndexData.index_data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.feder.SegmentIndexData)
  return target;
}

size_t SegmentIndexData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.feder.SegmentIndexData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index_data = 2;
  if (!this->_internal_index_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_data());
  }

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentIndexData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentIndexData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentIndexData::GetClassData() const { return &_class_data_; }


void SegmentIndexData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentIndexData*>(&to_msg);
  auto& from = static_cast<const SegmentIndexData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.feder.SegmentIndexData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_index_data().empty()) {
    _this->_internal_set_index_data(from._internal_index_data());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentIndexData::CopyFrom(const SegmentIndexData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.feder.SegmentIndexData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentIndexData::IsInitialized() const {
  return true;
}

void SegmentIndexData::InternalSwap(SegmentIndexData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_data_, lhs_arena,
      &other->_impl_.index_data_, rhs_arena
  );
  swap(_impl_.segmentid_, other->_impl_.segmentid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentIndexData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feder_2eproto_getter, &descriptor_table_feder_2eproto_once,
      file_level_metadata_feder_2eproto[0]);
}

// ===================================================================

class FederSegmentSearchResult::_Internal {
 public:
};

FederSegmentSearchResult::FederSegmentSearchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.feder.FederSegmentSearchResult)
}
FederSegmentSearchResult::FederSegmentSearchResult(const FederSegmentSearchResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FederSegmentSearchResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.visit_info_){}
    , decltype(_impl_.segmentid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.visit_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.visit_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_visit_info().empty()) {
    _this->_impl_.visit_info_.Set(from._internal_visit_info(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.segmentid_ = from._impl_.segmentid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.feder.FederSegmentSearchResult)
}

inline void FederSegmentSearchResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.visit_info_){}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.visit_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.visit_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FederSegmentSearchResult::~FederSegmentSearchResult() {
  // @@protoc_insertion_point(destructor:milvus.proto.feder.FederSegmentSearchResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FederSegmentSearchResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.visit_info_.Destroy();
}

void FederSegmentSearchResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FederSegmentSearchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.feder.FederSegmentSearchResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.visit_info_.ClearToEmpty();
  _impl_.segmentid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FederSegmentSearchResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string visit_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_visit_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.feder.FederSegmentSearchResult.visit_info"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FederSegmentSearchResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.feder.FederSegmentSearchResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // string visit_info = 2;
  if (!this->_internal_visit_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_visit_info().data(), static_cast<int>(this->_internal_visit_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.feder.FederSegmentSearchResult.visit_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_visit_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.feder.FederSegmentSearchResult)
  return target;
}

size_t FederSegmentSearchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.feder.FederSegmentSearchResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string visit_info = 2;
  if (!this->_internal_visit_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visit_info());
  }

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FederSegmentSearchResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FederSegmentSearchResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FederSegmentSearchResult::GetClassData() const { return &_class_data_; }


void FederSegmentSearchResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FederSegmentSearchResult*>(&to_msg);
  auto& from = static_cast<const FederSegmentSearchResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.feder.FederSegmentSearchResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_visit_info().empty()) {
    _this->_internal_set_visit_info(from._internal_visit_info());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FederSegmentSearchResult::CopyFrom(const FederSegmentSearchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.feder.FederSegmentSearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FederSegmentSearchResult::IsInitialized() const {
  return true;
}

void FederSegmentSearchResult::InternalSwap(FederSegmentSearchResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.visit_info_, lhs_arena,
      &other->_impl_.visit_info_, rhs_arena
  );
  swap(_impl_.segmentid_, other->_impl_.segmentid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FederSegmentSearchResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feder_2eproto_getter, &descriptor_table_feder_2eproto_once,
      file_level_metadata_feder_2eproto[1]);
}

// ===================================================================

class ListIndexedSegmentRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ListIndexedSegmentRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ListIndexedSegmentRequest::_Internal::base(const ListIndexedSegmentRequest* msg) {
  return *msg->_impl_.base_;
}
void ListIndexedSegmentRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ListIndexedSegmentRequest::ListIndexedSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.feder.ListIndexedSegmentRequest)
}
ListIndexedSegmentRequest::ListIndexedSegmentRequest(const ListIndexedSegmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListIndexedSegmentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.feder.ListIndexedSegmentRequest)
}

inline void ListIndexedSegmentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListIndexedSegmentRequest::~ListIndexedSegmentRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.feder.ListIndexedSegmentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListIndexedSegmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collection_name_.Destroy();
  _impl_.index_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ListIndexedSegmentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListIndexedSegmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.feder.ListIndexedSegmentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collection_name_.ClearToEmpty();
  _impl_.index_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListIndexedSegmentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.feder.ListIndexedSegmentRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string index_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.feder.ListIndexedSegmentRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListIndexedSegmentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.feder.ListIndexedSegmentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string collection_name = 2;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.feder.ListIndexedSegmentRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collection_name(), target);
  }

  // string index_name = 3;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.feder.ListIndexedSegmentRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.feder.ListIndexedSegmentRequest)
  return target;
}

size_t ListIndexedSegmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.feder.ListIndexedSegmentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection_name = 2;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string index_name = 3;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListIndexedSegmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListIndexedSegmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListIndexedSegmentRequest::GetClassData() const { return &_class_data_; }


void ListIndexedSegmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListIndexedSegmentRequest*>(&to_msg);
  auto& from = static_cast<const ListIndexedSegmentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.feder.ListIndexedSegmentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListIndexedSegmentRequest::CopyFrom(const ListIndexedSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.feder.ListIndexedSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListIndexedSegmentRequest::IsInitialized() const {
  return true;
}

void ListIndexedSegmentRequest::InternalSwap(ListIndexedSegmentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListIndexedSegmentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feder_2eproto_getter, &descriptor_table_feder_2eproto_once,
      file_level_metadata_feder_2eproto[2]);
}

// ===================================================================

class ListIndexedSegmentResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ListIndexedSegmentResponse* msg);
};

const ::milvus::proto::common::Status&
ListIndexedSegmentResponse::_Internal::status(const ListIndexedSegmentResponse* msg) {
  return *msg->_impl_.status_;
}
void ListIndexedSegmentResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ListIndexedSegmentResponse::ListIndexedSegmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.feder.ListIndexedSegmentResponse)
}
ListIndexedSegmentResponse::ListIndexedSegmentResponse(const ListIndexedSegmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListIndexedSegmentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){from._impl_.segmentids_}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.feder.ListIndexedSegmentResponse)
}

inline void ListIndexedSegmentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){arena}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListIndexedSegmentResponse::~ListIndexedSegmentResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.feder.ListIndexedSegmentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListIndexedSegmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ListIndexedSegmentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListIndexedSegmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.feder.ListIndexedSegmentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segmentids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListIndexedSegmentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segmentIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListIndexedSegmentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.feder.ListIndexedSegmentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated int64 segmentIDs = 2;
  {
    int byte_size = _impl_._segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_segmentids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.feder.ListIndexedSegmentResponse)
  return target;
}

size_t ListIndexedSegmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.feder.ListIndexedSegmentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListIndexedSegmentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListIndexedSegmentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListIndexedSegmentResponse::GetClassData() const { return &_class_data_; }


void ListIndexedSegmentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListIndexedSegmentResponse*>(&to_msg);
  auto& from = static_cast<const ListIndexedSegmentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.feder.ListIndexedSegmentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segmentids_.MergeFrom(from._impl_.segmentids_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListIndexedSegmentResponse::CopyFrom(const ListIndexedSegmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.feder.ListIndexedSegmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListIndexedSegmentResponse::IsInitialized() const {
  return true;
}

void ListIndexedSegmentResponse::InternalSwap(ListIndexedSegmentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentids_.InternalSwap(&other->_impl_.segmentids_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListIndexedSegmentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feder_2eproto_getter, &descriptor_table_feder_2eproto_once,
      file_level_metadata_feder_2eproto[3]);
}

// ===================================================================

class DescribeSegmentIndexDataRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeSegmentIndexDataRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeSegmentIndexDataRequest::_Internal::base(const DescribeSegmentIndexDataRequest* msg) {
  return *msg->_impl_.base_;
}
void DescribeSegmentIndexDataRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DescribeSegmentIndexDataRequest::DescribeSegmentIndexDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.feder.DescribeSegmentIndexDataRequest)
}
DescribeSegmentIndexDataRequest::DescribeSegmentIndexDataRequest(const DescribeSegmentIndexDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeSegmentIndexDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentsids_){from._impl_.segmentsids_}
    , /*decltype(_impl_._segmentsids_cached_byte_size_)*/{0}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.feder.DescribeSegmentIndexDataRequest)
}

inline void DescribeSegmentIndexDataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentsids_){arena}
    , /*decltype(_impl_._segmentsids_cached_byte_size_)*/{0}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DescribeSegmentIndexDataRequest::~DescribeSegmentIndexDataRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeSegmentIndexDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentsids_.~RepeatedField();
  _impl_.collection_name_.Destroy();
  _impl_.index_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DescribeSegmentIndexDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeSegmentIndexDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segmentsids_.Clear();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.index_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeSegmentIndexDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.feder.DescribeSegmentIndexDataRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string index_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.feder.DescribeSegmentIndexDataRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segmentsIDs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentsids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_segmentsids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DescribeSegmentIndexDataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string collection_name = 2;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.feder.DescribeSegmentIndexDataRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collection_name(), target);
  }

  // string index_name = 3;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.feder.DescribeSegmentIndexDataRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_index_name(), target);
  }

  // repeated int64 segmentsIDs = 4;
  {
    int byte_size = _impl_._segmentsids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_segmentsids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  return target;
}

size_t DescribeSegmentIndexDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentsIDs = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segmentsids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segmentsids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string collection_name = 2;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string index_name = 3;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeSegmentIndexDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeSegmentIndexDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeSegmentIndexDataRequest::GetClassData() const { return &_class_data_; }


void DescribeSegmentIndexDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeSegmentIndexDataRequest*>(&to_msg);
  auto& from = static_cast<const DescribeSegmentIndexDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segmentsids_.MergeFrom(from._impl_.segmentsids_);
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeSegmentIndexDataRequest::CopyFrom(const DescribeSegmentIndexDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeSegmentIndexDataRequest::IsInitialized() const {
  return true;
}

void DescribeSegmentIndexDataRequest::InternalSwap(DescribeSegmentIndexDataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentsids_.InternalSwap(&other->_impl_.segmentsids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeSegmentIndexDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feder_2eproto_getter, &descriptor_table_feder_2eproto_once,
      file_level_metadata_feder_2eproto[4]);
}

// ===================================================================

DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse() {}
DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::MergeFrom(const DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feder_2eproto_getter, &descriptor_table_feder_2eproto_once,
      file_level_metadata_feder_2eproto[5]);
}

// ===================================================================

class DescribeSegmentIndexDataResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeSegmentIndexDataResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeSegmentIndexDataResponse::_Internal::status(const DescribeSegmentIndexDataResponse* msg) {
  return *msg->_impl_.status_;
}
void DescribeSegmentIndexDataResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void DescribeSegmentIndexDataResponse::clear_index_params() {
  _impl_.index_params_.Clear();
}
DescribeSegmentIndexDataResponse::DescribeSegmentIndexDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DescribeSegmentIndexDataResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:milvus.proto.feder.DescribeSegmentIndexDataResponse)
}
DescribeSegmentIndexDataResponse::DescribeSegmentIndexDataResponse(const DescribeSegmentIndexDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeSegmentIndexDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.index_data_)*/{}
    , decltype(_impl_.index_params_){from._impl_.index_params_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_data_.MergeFrom(from._impl_.index_data_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.feder.DescribeSegmentIndexDataResponse)
}

inline void DescribeSegmentIndexDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.index_data_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.index_params_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DescribeSegmentIndexDataResponse::~DescribeSegmentIndexDataResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DescribeSegmentIndexDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_data_.Destruct();
  _impl_.index_data_.~MapField();
  _impl_.index_params_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DescribeSegmentIndexDataResponse::ArenaDtor(void* object) {
  DescribeSegmentIndexDataResponse* _this = reinterpret_cast< DescribeSegmentIndexDataResponse* >(object);
  _this->_impl_.index_data_.Destruct();
}
void DescribeSegmentIndexDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeSegmentIndexDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_data_.Clear();
  _impl_.index_params_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeSegmentIndexDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int64, .milvus.proto.feder.SegmentIndexData> index_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.index_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair index_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DescribeSegmentIndexDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // map<int64, .milvus.proto.feder.SegmentIndexData> index_data = 2;
  if (!this->_internal_index_data().empty()) {
    using MapType = ::_pb::Map<int64_t, ::milvus::proto::feder::SegmentIndexData>;
    using WireHelper = DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_index_data();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  return target;
}

size_t DescribeSegmentIndexDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .milvus.proto.feder.SegmentIndexData> index_data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_index_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::milvus::proto::feder::SegmentIndexData >::const_iterator
      it = this->_internal_index_data().begin();
      it != this->_internal_index_data().end(); ++it) {
    total_size += DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 3;
  total_size += 1UL * this->_internal_index_params_size();
  for (const auto& msg : this->_impl_.index_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeSegmentIndexDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeSegmentIndexDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeSegmentIndexDataResponse::GetClassData() const { return &_class_data_; }


void DescribeSegmentIndexDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeSegmentIndexDataResponse*>(&to_msg);
  auto& from = static_cast<const DescribeSegmentIndexDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_data_.MergeFrom(from._impl_.index_data_);
  _this->_impl_.index_params_.MergeFrom(from._impl_.index_params_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeSegmentIndexDataResponse::CopyFrom(const DescribeSegmentIndexDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeSegmentIndexDataResponse::IsInitialized() const {
  return true;
}

void DescribeSegmentIndexDataResponse::InternalSwap(DescribeSegmentIndexDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_data_.InternalSwap(&other->_impl_.index_data_);
  _impl_.index_params_.InternalSwap(&other->_impl_.index_params_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeSegmentIndexDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feder_2eproto_getter, &descriptor_table_feder_2eproto_once,
      file_level_metadata_feder_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace feder
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::milvus::proto::feder::SegmentIndexData*
Arena::CreateMaybeMessage< ::milvus::proto::feder::SegmentIndexData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::feder::SegmentIndexData >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::feder::FederSegmentSearchResult*
Arena::CreateMaybeMessage< ::milvus::proto::feder::FederSegmentSearchResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::feder::FederSegmentSearchResult >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::feder::ListIndexedSegmentRequest*
Arena::CreateMaybeMessage< ::milvus::proto::feder::ListIndexedSegmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::feder::ListIndexedSegmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::feder::ListIndexedSegmentResponse*
Arena::CreateMaybeMessage< ::milvus::proto::feder::ListIndexedSegmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::feder::ListIndexedSegmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::feder::DescribeSegmentIndexDataRequest*
Arena::CreateMaybeMessage< ::milvus::proto::feder::DescribeSegmentIndexDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::feder::DescribeSegmentIndexDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::feder::DescribeSegmentIndexDataResponse*
Arena::CreateMaybeMessage< ::milvus::proto::feder::DescribeSegmentIndexDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::feder::DescribeSegmentIndexDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
