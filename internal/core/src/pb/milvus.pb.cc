// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: milvus.proto

#include "milvus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace milvus {
namespace proto {
namespace milvus {
PROTOBUF_CONSTEXPR CreateAliasRequest::CreateAliasRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateAliasRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateAliasRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateAliasRequestDefaultTypeInternal() {}
  union {
    CreateAliasRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateAliasRequestDefaultTypeInternal _CreateAliasRequest_default_instance_;
PROTOBUF_CONSTEXPR DropAliasRequest::DropAliasRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropAliasRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropAliasRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropAliasRequestDefaultTypeInternal() {}
  union {
    DropAliasRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropAliasRequestDefaultTypeInternal _DropAliasRequest_default_instance_;
PROTOBUF_CONSTEXPR AlterAliasRequest::AlterAliasRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlterAliasRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlterAliasRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlterAliasRequestDefaultTypeInternal() {}
  union {
    AlterAliasRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlterAliasRequestDefaultTypeInternal _AlterAliasRequest_default_instance_;
PROTOBUF_CONSTEXPR DescribeAliasRequest::DescribeAliasRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeAliasRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeAliasRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeAliasRequestDefaultTypeInternal() {}
  union {
    DescribeAliasRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeAliasRequestDefaultTypeInternal _DescribeAliasRequest_default_instance_;
PROTOBUF_CONSTEXPR DescribeAliasResponse::DescribeAliasResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeAliasResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeAliasResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeAliasResponseDefaultTypeInternal() {}
  union {
    DescribeAliasResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeAliasResponseDefaultTypeInternal _DescribeAliasResponse_default_instance_;
PROTOBUF_CONSTEXPR ListAliasesRequest::ListAliasesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListAliasesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListAliasesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListAliasesRequestDefaultTypeInternal() {}
  union {
    ListAliasesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListAliasesRequestDefaultTypeInternal _ListAliasesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListAliasesResponse::ListAliasesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aliases_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListAliasesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListAliasesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListAliasesResponseDefaultTypeInternal() {}
  union {
    ListAliasesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListAliasesResponseDefaultTypeInternal _ListAliasesResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateCollectionRequest::CreateCollectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.properties_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.shards_num_)*/0
  , /*decltype(_impl_.consistency_level_)*/0
  , /*decltype(_impl_.num_partitions_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateCollectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateCollectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateCollectionRequestDefaultTypeInternal() {}
  union {
    CreateCollectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateCollectionRequestDefaultTypeInternal _CreateCollectionRequest_default_instance_;
PROTOBUF_CONSTEXPR DropCollectionRequest::DropCollectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropCollectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropCollectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropCollectionRequestDefaultTypeInternal() {}
  union {
    DropCollectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropCollectionRequestDefaultTypeInternal _DropCollectionRequest_default_instance_;
PROTOBUF_CONSTEXPR AlterCollectionRequest::AlterCollectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.properties_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlterCollectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlterCollectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlterCollectionRequestDefaultTypeInternal() {}
  union {
    AlterCollectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlterCollectionRequestDefaultTypeInternal _AlterCollectionRequest_default_instance_;
PROTOBUF_CONSTEXPR HasCollectionRequest::HasCollectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.time_stamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HasCollectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HasCollectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HasCollectionRequestDefaultTypeInternal() {}
  union {
    HasCollectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HasCollectionRequestDefaultTypeInternal _HasCollectionRequest_default_instance_;
PROTOBUF_CONSTEXPR BoolResponse::BoolResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoolResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoolResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoolResponseDefaultTypeInternal() {}
  union {
    BoolResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoolResponseDefaultTypeInternal _BoolResponse_default_instance_;
PROTOBUF_CONSTEXPR StringResponse::StringResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringResponseDefaultTypeInternal() {}
  union {
    StringResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringResponseDefaultTypeInternal _StringResponse_default_instance_;
PROTOBUF_CONSTEXPR DescribeCollectionRequest::DescribeCollectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.time_stamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeCollectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeCollectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeCollectionRequestDefaultTypeInternal() {}
  union {
    DescribeCollectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeCollectionRequestDefaultTypeInternal _DescribeCollectionRequest_default_instance_;
PROTOBUF_CONSTEXPR DescribeCollectionResponse::DescribeCollectionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.virtual_channel_names_)*/{}
  , /*decltype(_impl_.physical_channel_names_)*/{}
  , /*decltype(_impl_.aliases_)*/{}
  , /*decltype(_impl_.start_positions_)*/{}
  , /*decltype(_impl_.properties_)*/{}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.schema_)*/nullptr
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.created_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.created_utc_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.shards_num_)*/0
  , /*decltype(_impl_.consistency_level_)*/0
  , /*decltype(_impl_.num_partitions_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeCollectionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeCollectionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeCollectionResponseDefaultTypeInternal() {}
  union {
    DescribeCollectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeCollectionResponseDefaultTypeInternal _DescribeCollectionResponse_default_instance_;
PROTOBUF_CONSTEXPR LoadCollectionRequest::LoadCollectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_groups_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.replica_number_)*/0
  , /*decltype(_impl_.refresh_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadCollectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadCollectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadCollectionRequestDefaultTypeInternal() {}
  union {
    LoadCollectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadCollectionRequestDefaultTypeInternal _LoadCollectionRequest_default_instance_;
PROTOBUF_CONSTEXPR ReleaseCollectionRequest::ReleaseCollectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReleaseCollectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReleaseCollectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReleaseCollectionRequestDefaultTypeInternal() {}
  union {
    ReleaseCollectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReleaseCollectionRequestDefaultTypeInternal _ReleaseCollectionRequest_default_instance_;
PROTOBUF_CONSTEXPR GetStatisticsRequest::GetStatisticsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_names_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.guarantee_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStatisticsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStatisticsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStatisticsRequestDefaultTypeInternal() {}
  union {
    GetStatisticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStatisticsRequestDefaultTypeInternal _GetStatisticsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetStatisticsResponse::GetStatisticsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStatisticsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStatisticsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStatisticsResponseDefaultTypeInternal() {}
  union {
    GetStatisticsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStatisticsResponseDefaultTypeInternal _GetStatisticsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetCollectionStatisticsRequest::GetCollectionStatisticsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCollectionStatisticsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCollectionStatisticsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCollectionStatisticsRequestDefaultTypeInternal() {}
  union {
    GetCollectionStatisticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCollectionStatisticsRequestDefaultTypeInternal _GetCollectionStatisticsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetCollectionStatisticsResponse::GetCollectionStatisticsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCollectionStatisticsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCollectionStatisticsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCollectionStatisticsResponseDefaultTypeInternal() {}
  union {
    GetCollectionStatisticsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCollectionStatisticsResponseDefaultTypeInternal _GetCollectionStatisticsResponse_default_instance_;
PROTOBUF_CONSTEXPR ShowCollectionsRequest::ShowCollectionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collection_names_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.time_stamp_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShowCollectionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowCollectionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowCollectionsRequestDefaultTypeInternal() {}
  union {
    ShowCollectionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowCollectionsRequestDefaultTypeInternal _ShowCollectionsRequest_default_instance_;
PROTOBUF_CONSTEXPR ShowCollectionsResponse::ShowCollectionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collection_names_)*/{}
  , /*decltype(_impl_.collection_ids_)*/{}
  , /*decltype(_impl_._collection_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.created_timestamps_)*/{}
  , /*decltype(_impl_._created_timestamps_cached_byte_size_)*/{0}
  , /*decltype(_impl_.created_utc_timestamps_)*/{}
  , /*decltype(_impl_._created_utc_timestamps_cached_byte_size_)*/{0}
  , /*decltype(_impl_.inmemory_percentages_)*/{}
  , /*decltype(_impl_._inmemory_percentages_cached_byte_size_)*/{0}
  , /*decltype(_impl_.query_service_available_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShowCollectionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowCollectionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowCollectionsResponseDefaultTypeInternal() {}
  union {
    ShowCollectionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowCollectionsResponseDefaultTypeInternal _ShowCollectionsResponse_default_instance_;
PROTOBUF_CONSTEXPR CreatePartitionRequest::CreatePartitionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreatePartitionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreatePartitionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreatePartitionRequestDefaultTypeInternal() {}
  union {
    CreatePartitionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreatePartitionRequestDefaultTypeInternal _CreatePartitionRequest_default_instance_;
PROTOBUF_CONSTEXPR DropPartitionRequest::DropPartitionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropPartitionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropPartitionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropPartitionRequestDefaultTypeInternal() {}
  union {
    DropPartitionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropPartitionRequestDefaultTypeInternal _DropPartitionRequest_default_instance_;
PROTOBUF_CONSTEXPR HasPartitionRequest::HasPartitionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HasPartitionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HasPartitionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HasPartitionRequestDefaultTypeInternal() {}
  union {
    HasPartitionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HasPartitionRequestDefaultTypeInternal _HasPartitionRequest_default_instance_;
PROTOBUF_CONSTEXPR LoadPartitionsRequest::LoadPartitionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_names_)*/{}
  , /*decltype(_impl_.resource_groups_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.replica_number_)*/0
  , /*decltype(_impl_.refresh_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadPartitionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadPartitionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadPartitionsRequestDefaultTypeInternal() {}
  union {
    LoadPartitionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadPartitionsRequestDefaultTypeInternal _LoadPartitionsRequest_default_instance_;
PROTOBUF_CONSTEXPR ReleasePartitionsRequest::ReleasePartitionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_names_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReleasePartitionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReleasePartitionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReleasePartitionsRequestDefaultTypeInternal() {}
  union {
    ReleasePartitionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReleasePartitionsRequestDefaultTypeInternal _ReleasePartitionsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPartitionStatisticsRequest::GetPartitionStatisticsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPartitionStatisticsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPartitionStatisticsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPartitionStatisticsRequestDefaultTypeInternal() {}
  union {
    GetPartitionStatisticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPartitionStatisticsRequestDefaultTypeInternal _GetPartitionStatisticsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPartitionStatisticsResponse::GetPartitionStatisticsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPartitionStatisticsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPartitionStatisticsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPartitionStatisticsResponseDefaultTypeInternal() {}
  union {
    GetPartitionStatisticsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPartitionStatisticsResponseDefaultTypeInternal _GetPartitionStatisticsResponse_default_instance_;
PROTOBUF_CONSTEXPR ShowPartitionsRequest::ShowPartitionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_names_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShowPartitionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowPartitionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowPartitionsRequestDefaultTypeInternal() {}
  union {
    ShowPartitionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowPartitionsRequestDefaultTypeInternal _ShowPartitionsRequest_default_instance_;
PROTOBUF_CONSTEXPR ShowPartitionsResponse::ShowPartitionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_names_)*/{}
  , /*decltype(_impl_.partitionids_)*/{}
  , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.created_timestamps_)*/{}
  , /*decltype(_impl_._created_timestamps_cached_byte_size_)*/{0}
  , /*decltype(_impl_.created_utc_timestamps_)*/{}
  , /*decltype(_impl_._created_utc_timestamps_cached_byte_size_)*/{0}
  , /*decltype(_impl_.inmemory_percentages_)*/{}
  , /*decltype(_impl_._inmemory_percentages_cached_byte_size_)*/{0}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShowPartitionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowPartitionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowPartitionsResponseDefaultTypeInternal() {}
  union {
    ShowPartitionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowPartitionsResponseDefaultTypeInternal _ShowPartitionsResponse_default_instance_;
PROTOBUF_CONSTEXPR DescribeSegmentRequest::DescribeSegmentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeSegmentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeSegmentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeSegmentRequestDefaultTypeInternal() {}
  union {
    DescribeSegmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeSegmentRequestDefaultTypeInternal _DescribeSegmentRequest_default_instance_;
PROTOBUF_CONSTEXPR DescribeSegmentResponse::DescribeSegmentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.indexid_)*/int64_t{0}
  , /*decltype(_impl_.buildid_)*/int64_t{0}
  , /*decltype(_impl_.fieldid_)*/int64_t{0}
  , /*decltype(_impl_.enable_index_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeSegmentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeSegmentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeSegmentResponseDefaultTypeInternal() {}
  union {
    DescribeSegmentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeSegmentResponseDefaultTypeInternal _DescribeSegmentResponse_default_instance_;
PROTOBUF_CONSTEXPR ShowSegmentsRequest::ShowSegmentsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShowSegmentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowSegmentsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowSegmentsRequestDefaultTypeInternal() {}
  union {
    ShowSegmentsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowSegmentsRequestDefaultTypeInternal _ShowSegmentsRequest_default_instance_;
PROTOBUF_CONSTEXPR ShowSegmentsResponse::ShowSegmentsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentids_)*/{}
  , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShowSegmentsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowSegmentsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowSegmentsResponseDefaultTypeInternal() {}
  union {
    ShowSegmentsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowSegmentsResponseDefaultTypeInternal _ShowSegmentsResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateIndexRequest::CreateIndexRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_params_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.field_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateIndexRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateIndexRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateIndexRequestDefaultTypeInternal() {}
  union {
    CreateIndexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateIndexRequestDefaultTypeInternal _CreateIndexRequest_default_instance_;
PROTOBUF_CONSTEXPR DescribeIndexRequest::DescribeIndexRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.field_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeIndexRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeIndexRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeIndexRequestDefaultTypeInternal() {}
  union {
    DescribeIndexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeIndexRequestDefaultTypeInternal _DescribeIndexRequest_default_instance_;
PROTOBUF_CONSTEXPR IndexDescription::IndexDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.field_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_state_fail_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.indexid_)*/int64_t{0}
  , /*decltype(_impl_.indexed_rows_)*/int64_t{0}
  , /*decltype(_impl_.total_rows_)*/int64_t{0}
  , /*decltype(_impl_.pending_index_rows_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexDescriptionDefaultTypeInternal() {}
  union {
    IndexDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexDescriptionDefaultTypeInternal _IndexDescription_default_instance_;
PROTOBUF_CONSTEXPR DescribeIndexResponse::DescribeIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_descriptions_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeIndexResponseDefaultTypeInternal() {}
  union {
    DescribeIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeIndexResponseDefaultTypeInternal _DescribeIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR GetIndexBuildProgressRequest::GetIndexBuildProgressRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.field_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIndexBuildProgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexBuildProgressRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexBuildProgressRequestDefaultTypeInternal() {}
  union {
    GetIndexBuildProgressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexBuildProgressRequestDefaultTypeInternal _GetIndexBuildProgressRequest_default_instance_;
PROTOBUF_CONSTEXPR GetIndexBuildProgressResponse::GetIndexBuildProgressResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.indexed_rows_)*/int64_t{0}
  , /*decltype(_impl_.total_rows_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIndexBuildProgressResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexBuildProgressResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexBuildProgressResponseDefaultTypeInternal() {}
  union {
    GetIndexBuildProgressResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexBuildProgressResponseDefaultTypeInternal _GetIndexBuildProgressResponse_default_instance_;
PROTOBUF_CONSTEXPR GetIndexStateRequest::GetIndexStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.field_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIndexStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexStateRequestDefaultTypeInternal() {}
  union {
    GetIndexStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexStateRequestDefaultTypeInternal _GetIndexStateRequest_default_instance_;
PROTOBUF_CONSTEXPR GetIndexStateResponse::GetIndexStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fail_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIndexStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexStateResponseDefaultTypeInternal() {}
  union {
    GetIndexStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexStateResponseDefaultTypeInternal _GetIndexStateResponse_default_instance_;
PROTOBUF_CONSTEXPR DropIndexRequest::DropIndexRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.field_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropIndexRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropIndexRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropIndexRequestDefaultTypeInternal() {}
  union {
    DropIndexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropIndexRequestDefaultTypeInternal _DropIndexRequest_default_instance_;
PROTOBUF_CONSTEXPR InsertRequest::InsertRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_data_)*/{}
  , /*decltype(_impl_.hash_keys_)*/{}
  , /*decltype(_impl_._hash_keys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.num_rows_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertRequestDefaultTypeInternal() {}
  union {
    InsertRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertRequestDefaultTypeInternal _InsertRequest_default_instance_;
PROTOBUF_CONSTEXPR UpsertRequest::UpsertRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_data_)*/{}
  , /*decltype(_impl_.hash_keys_)*/{}
  , /*decltype(_impl_._hash_keys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.num_rows_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpsertRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpsertRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpsertRequestDefaultTypeInternal() {}
  union {
    UpsertRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpsertRequestDefaultTypeInternal _UpsertRequest_default_instance_;
PROTOBUF_CONSTEXPR MutationResult::MutationResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.succ_index_)*/{}
  , /*decltype(_impl_._succ_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.err_index_)*/{}
  , /*decltype(_impl_._err_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.ids_)*/nullptr
  , /*decltype(_impl_.insert_cnt_)*/int64_t{0}
  , /*decltype(_impl_.delete_cnt_)*/int64_t{0}
  , /*decltype(_impl_.upsert_cnt_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.acknowledged_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MutationResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MutationResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MutationResultDefaultTypeInternal() {}
  union {
    MutationResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MutationResultDefaultTypeInternal _MutationResult_default_instance_;
PROTOBUF_CONSTEXPR DeleteRequest::DeleteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_keys_)*/{}
  , /*decltype(_impl_._hash_keys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteRequestDefaultTypeInternal() {}
  union {
    DeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
PROTOBUF_CONSTEXPR SearchRequest::SearchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_names_)*/{}
  , /*decltype(_impl_.output_fields_)*/{}
  , /*decltype(_impl_.search_params_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dsl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.placeholder_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.travel_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.dsl_type_)*/0
  , /*decltype(_impl_.consistency_level_)*/0
  , /*decltype(_impl_.guarantee_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.nq_)*/int64_t{0}
  , /*decltype(_impl_.not_return_all_meta_)*/false
  , /*decltype(_impl_.use_default_consistency_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchRequestDefaultTypeInternal() {}
  union {
    SearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
PROTOBUF_CONSTEXPR Hits::Hits(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.row_data_)*/{}
  , /*decltype(_impl_.scores_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HitsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HitsDefaultTypeInternal() {}
  union {
    Hits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HitsDefaultTypeInternal _Hits_default_instance_;
PROTOBUF_CONSTEXPR SearchResults::SearchResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.results_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchResultsDefaultTypeInternal() {}
  union {
    SearchResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchResultsDefaultTypeInternal _SearchResults_default_instance_;
PROTOBUF_CONSTEXPR FlushRequest::FlushRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collection_names_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlushRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushRequestDefaultTypeInternal() {}
  union {
    FlushRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushRequestDefaultTypeInternal _FlushRequest_default_instance_;
PROTOBUF_CONSTEXPR FlushResponse_CollSegIDsEntry_DoNotUse::FlushResponse_CollSegIDsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FlushResponse_CollSegIDsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushResponse_CollSegIDsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushResponse_CollSegIDsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FlushResponse_CollSegIDsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushResponse_CollSegIDsEntry_DoNotUseDefaultTypeInternal _FlushResponse_CollSegIDsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FlushResponse_FlushCollSegIDsEntry_DoNotUse::FlushResponse_FlushCollSegIDsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FlushResponse_FlushCollSegIDsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushResponse_FlushCollSegIDsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushResponse_FlushCollSegIDsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FlushResponse_FlushCollSegIDsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushResponse_FlushCollSegIDsEntry_DoNotUseDefaultTypeInternal _FlushResponse_FlushCollSegIDsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FlushResponse_CollSealTimesEntry_DoNotUse::FlushResponse_CollSealTimesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FlushResponse_CollSealTimesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushResponse_CollSealTimesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushResponse_CollSealTimesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FlushResponse_CollSealTimesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushResponse_CollSealTimesEntry_DoNotUseDefaultTypeInternal _FlushResponse_CollSealTimesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FlushResponse::FlushResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.coll_segids_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.flush_coll_segids_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.coll_seal_times_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlushResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushResponseDefaultTypeInternal() {}
  union {
    FlushResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushResponseDefaultTypeInternal _FlushResponse_default_instance_;
PROTOBUF_CONSTEXPR QueryRequest::QueryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.output_fields_)*/{}
  , /*decltype(_impl_.partition_names_)*/{}
  , /*decltype(_impl_.query_params_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.travel_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.guarantee_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.consistency_level_)*/0
  , /*decltype(_impl_.not_return_all_meta_)*/false
  , /*decltype(_impl_.use_default_consistency_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryRequestDefaultTypeInternal() {}
  union {
    QueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
PROTOBUF_CONSTEXPR QueryResults::QueryResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_data_)*/{}
  , /*decltype(_impl_.output_fields_)*/{}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryResultsDefaultTypeInternal() {}
  union {
    QueryResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryResultsDefaultTypeInternal _QueryResults_default_instance_;
PROTOBUF_CONSTEXPR VectorIDs::VectorIDs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_names_)*/{}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.field_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_array_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorIDsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorIDsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorIDsDefaultTypeInternal() {}
  union {
    VectorIDs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorIDsDefaultTypeInternal _VectorIDs_default_instance_;
PROTOBUF_CONSTEXPR VectorsArray::VectorsArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.array_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct VectorsArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorsArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorsArrayDefaultTypeInternal() {}
  union {
    VectorsArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorsArrayDefaultTypeInternal _VectorsArray_default_instance_;
PROTOBUF_CONSTEXPR CalcDistanceRequest::CalcDistanceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.op_left_)*/nullptr
  , /*decltype(_impl_.op_right_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CalcDistanceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalcDistanceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalcDistanceRequestDefaultTypeInternal() {}
  union {
    CalcDistanceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalcDistanceRequestDefaultTypeInternal _CalcDistanceRequest_default_instance_;
PROTOBUF_CONSTEXPR CalcDistanceResults::CalcDistanceResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.array_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CalcDistanceResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalcDistanceResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalcDistanceResultsDefaultTypeInternal() {}
  union {
    CalcDistanceResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalcDistanceResultsDefaultTypeInternal _CalcDistanceResults_default_instance_;
PROTOBUF_CONSTEXPR FlushAllRequest::FlushAllRequest(
    ::_pbi::ConstantInitialized) {}
struct FlushAllRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushAllRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushAllRequestDefaultTypeInternal() {}
  union {
    FlushAllRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushAllRequestDefaultTypeInternal _FlushAllRequest_default_instance_;
PROTOBUF_CONSTEXPR FlushAllResponse::FlushAllResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.flush_all_ts_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlushAllResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushAllResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushAllResponseDefaultTypeInternal() {}
  union {
    FlushAllResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushAllResponseDefaultTypeInternal _FlushAllResponse_default_instance_;
PROTOBUF_CONSTEXPR PersistentSegmentInfo::PersistentSegmentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_.num_rows_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PersistentSegmentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PersistentSegmentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PersistentSegmentInfoDefaultTypeInternal() {}
  union {
    PersistentSegmentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PersistentSegmentInfoDefaultTypeInternal _PersistentSegmentInfo_default_instance_;
PROTOBUF_CONSTEXPR GetPersistentSegmentInfoRequest::GetPersistentSegmentInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dbname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPersistentSegmentInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPersistentSegmentInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPersistentSegmentInfoRequestDefaultTypeInternal() {}
  union {
    GetPersistentSegmentInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPersistentSegmentInfoRequestDefaultTypeInternal _GetPersistentSegmentInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPersistentSegmentInfoResponse::GetPersistentSegmentInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPersistentSegmentInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPersistentSegmentInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPersistentSegmentInfoResponseDefaultTypeInternal() {}
  union {
    GetPersistentSegmentInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPersistentSegmentInfoResponseDefaultTypeInternal _GetPersistentSegmentInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR QuerySegmentInfo::QuerySegmentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodeids_)*/{}
  , /*decltype(_impl_._nodeids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_.mem_size_)*/int64_t{0}
  , /*decltype(_impl_.num_rows_)*/int64_t{0}
  , /*decltype(_impl_.indexid_)*/int64_t{0}
  , /*decltype(_impl_.nodeid_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySegmentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySegmentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySegmentInfoDefaultTypeInternal() {}
  union {
    QuerySegmentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySegmentInfoDefaultTypeInternal _QuerySegmentInfo_default_instance_;
PROTOBUF_CONSTEXPR GetQuerySegmentInfoRequest::GetQuerySegmentInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dbname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetQuerySegmentInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetQuerySegmentInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetQuerySegmentInfoRequestDefaultTypeInternal() {}
  union {
    GetQuerySegmentInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetQuerySegmentInfoRequestDefaultTypeInternal _GetQuerySegmentInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR GetQuerySegmentInfoResponse::GetQuerySegmentInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetQuerySegmentInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetQuerySegmentInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetQuerySegmentInfoResponseDefaultTypeInternal() {}
  union {
    GetQuerySegmentInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetQuerySegmentInfoResponseDefaultTypeInternal _GetQuerySegmentInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR DummyRequest::DummyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DummyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DummyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DummyRequestDefaultTypeInternal() {}
  union {
    DummyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DummyRequestDefaultTypeInternal _DummyRequest_default_instance_;
PROTOBUF_CONSTEXPR DummyResponse::DummyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DummyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DummyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DummyResponseDefaultTypeInternal() {}
  union {
    DummyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DummyResponseDefaultTypeInternal _DummyResponse_default_instance_;
PROTOBUF_CONSTEXPR RegisterLinkRequest::RegisterLinkRequest(
    ::_pbi::ConstantInitialized) {}
struct RegisterLinkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterLinkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterLinkRequestDefaultTypeInternal() {}
  union {
    RegisterLinkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterLinkRequestDefaultTypeInternal _RegisterLinkRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterLinkResponse::RegisterLinkResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterLinkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterLinkResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterLinkResponseDefaultTypeInternal() {}
  union {
    RegisterLinkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterLinkResponseDefaultTypeInternal _RegisterLinkResponse_default_instance_;
PROTOBUF_CONSTEXPR GetMetricsRequest::GetMetricsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMetricsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMetricsRequestDefaultTypeInternal() {}
  union {
    GetMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMetricsRequestDefaultTypeInternal _GetMetricsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetMetricsResponse::GetMetricsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMetricsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMetricsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMetricsResponseDefaultTypeInternal() {}
  union {
    GetMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMetricsResponseDefaultTypeInternal _GetMetricsResponse_default_instance_;
PROTOBUF_CONSTEXPR ComponentInfo::ComponentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_info_)*/{}
  , /*decltype(_impl_.role_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nodeid_)*/int64_t{0}
  , /*decltype(_impl_.state_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComponentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentInfoDefaultTypeInternal() {}
  union {
    ComponentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentInfoDefaultTypeInternal _ComponentInfo_default_instance_;
PROTOBUF_CONSTEXPR ComponentStates::ComponentStates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subcomponent_states_)*/{}
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComponentStatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentStatesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentStatesDefaultTypeInternal() {}
  union {
    ComponentStates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentStatesDefaultTypeInternal _ComponentStates_default_instance_;
PROTOBUF_CONSTEXPR GetComponentStatesRequest::GetComponentStatesRequest(
    ::_pbi::ConstantInitialized) {}
struct GetComponentStatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetComponentStatesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetComponentStatesRequestDefaultTypeInternal() {}
  union {
    GetComponentStatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetComponentStatesRequestDefaultTypeInternal _GetComponentStatesRequest_default_instance_;
PROTOBUF_CONSTEXPR LoadBalanceRequest::LoadBalanceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dst_nodeids_)*/{}
  , /*decltype(_impl_._dst_nodeids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sealed_segmentids_)*/{}
  , /*decltype(_impl_._sealed_segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.collectionname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.src_nodeid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadBalanceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadBalanceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadBalanceRequestDefaultTypeInternal() {}
  union {
    LoadBalanceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadBalanceRequestDefaultTypeInternal _LoadBalanceRequest_default_instance_;
PROTOBUF_CONSTEXPR ManualCompactionRequest::ManualCompactionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.timetravel_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ManualCompactionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ManualCompactionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ManualCompactionRequestDefaultTypeInternal() {}
  union {
    ManualCompactionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ManualCompactionRequestDefaultTypeInternal _ManualCompactionRequest_default_instance_;
PROTOBUF_CONSTEXPR ManualCompactionResponse::ManualCompactionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.compactionid_)*/int64_t{0}
  , /*decltype(_impl_.compactionplancount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ManualCompactionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ManualCompactionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ManualCompactionResponseDefaultTypeInternal() {}
  union {
    ManualCompactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ManualCompactionResponseDefaultTypeInternal _ManualCompactionResponse_default_instance_;
PROTOBUF_CONSTEXPR GetCompactionStateRequest::GetCompactionStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.compactionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCompactionStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCompactionStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCompactionStateRequestDefaultTypeInternal() {}
  union {
    GetCompactionStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCompactionStateRequestDefaultTypeInternal _GetCompactionStateRequest_default_instance_;
PROTOBUF_CONSTEXPR GetCompactionStateResponse::GetCompactionStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.executingplanno_)*/int64_t{0}
  , /*decltype(_impl_.timeoutplanno_)*/int64_t{0}
  , /*decltype(_impl_.completedplanno_)*/int64_t{0}
  , /*decltype(_impl_.failedplanno_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCompactionStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCompactionStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCompactionStateResponseDefaultTypeInternal() {}
  union {
    GetCompactionStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCompactionStateResponseDefaultTypeInternal _GetCompactionStateResponse_default_instance_;
PROTOBUF_CONSTEXPR GetCompactionPlansRequest::GetCompactionPlansRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.compactionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCompactionPlansRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCompactionPlansRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCompactionPlansRequestDefaultTypeInternal() {}
  union {
    GetCompactionPlansRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCompactionPlansRequestDefaultTypeInternal _GetCompactionPlansRequest_default_instance_;
PROTOBUF_CONSTEXPR GetCompactionPlansResponse::GetCompactionPlansResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mergeinfos_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCompactionPlansResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCompactionPlansResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCompactionPlansResponseDefaultTypeInternal() {}
  union {
    GetCompactionPlansResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCompactionPlansResponseDefaultTypeInternal _GetCompactionPlansResponse_default_instance_;
PROTOBUF_CONSTEXPR CompactionMergeInfo::CompactionMergeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sources_)*/{}
  , /*decltype(_impl_._sources_cached_byte_size_)*/{0}
  , /*decltype(_impl_.target_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompactionMergeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompactionMergeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompactionMergeInfoDefaultTypeInternal() {}
  union {
    CompactionMergeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompactionMergeInfoDefaultTypeInternal _CompactionMergeInfo_default_instance_;
PROTOBUF_CONSTEXPR GetFlushStateRequest::GetFlushStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentids_)*/{}
  , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFlushStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFlushStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFlushStateRequestDefaultTypeInternal() {}
  union {
    GetFlushStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFlushStateRequestDefaultTypeInternal _GetFlushStateRequest_default_instance_;
PROTOBUF_CONSTEXPR GetFlushStateResponse::GetFlushStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.flushed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFlushStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFlushStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFlushStateResponseDefaultTypeInternal() {}
  union {
    GetFlushStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFlushStateResponseDefaultTypeInternal _GetFlushStateResponse_default_instance_;
PROTOBUF_CONSTEXPR GetFlushAllStateRequest::GetFlushAllStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.flush_all_ts_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFlushAllStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFlushAllStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFlushAllStateRequestDefaultTypeInternal() {}
  union {
    GetFlushAllStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFlushAllStateRequestDefaultTypeInternal _GetFlushAllStateRequest_default_instance_;
PROTOBUF_CONSTEXPR GetFlushAllStateResponse::GetFlushAllStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.flushed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFlushAllStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFlushAllStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFlushAllStateResponseDefaultTypeInternal() {}
  union {
    GetFlushAllStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFlushAllStateResponseDefaultTypeInternal _GetFlushAllStateResponse_default_instance_;
PROTOBUF_CONSTEXPR ImportRequest::ImportRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_names_)*/{}
  , /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.row_based_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportRequestDefaultTypeInternal() {}
  union {
    ImportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportRequestDefaultTypeInternal _ImportRequest_default_instance_;
PROTOBUF_CONSTEXPR ImportResponse::ImportResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_._tasks_cached_byte_size_)*/{0}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportResponseDefaultTypeInternal() {}
  union {
    ImportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportResponseDefaultTypeInternal _ImportResponse_default_instance_;
PROTOBUF_CONSTEXPR GetImportStateRequest::GetImportStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetImportStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetImportStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetImportStateRequestDefaultTypeInternal() {}
  union {
    GetImportStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetImportStateRequestDefaultTypeInternal _GetImportStateRequest_default_instance_;
PROTOBUF_CONSTEXPR GetImportStateResponse::GetImportStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_list_)*/{}
  , /*decltype(_impl_._id_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_.segment_ids_)*/{}
  , /*decltype(_impl_._segment_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.row_count_)*/int64_t{0}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.collection_id_)*/int64_t{0}
  , /*decltype(_impl_.create_ts_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetImportStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetImportStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetImportStateResponseDefaultTypeInternal() {}
  union {
    GetImportStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetImportStateResponseDefaultTypeInternal _GetImportStateResponse_default_instance_;
PROTOBUF_CONSTEXPR ListImportTasksRequest::ListImportTasksRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limit_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListImportTasksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListImportTasksRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListImportTasksRequestDefaultTypeInternal() {}
  union {
    ListImportTasksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListImportTasksRequestDefaultTypeInternal _ListImportTasksRequest_default_instance_;
PROTOBUF_CONSTEXPR ListImportTasksResponse::ListImportTasksResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListImportTasksResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListImportTasksResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListImportTasksResponseDefaultTypeInternal() {}
  union {
    ListImportTasksResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListImportTasksResponseDefaultTypeInternal _ListImportTasksResponse_default_instance_;
PROTOBUF_CONSTEXPR GetReplicasRequest::GetReplicasRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.with_shard_nodes_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetReplicasRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetReplicasRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetReplicasRequestDefaultTypeInternal() {}
  union {
    GetReplicasRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetReplicasRequestDefaultTypeInternal _GetReplicasRequest_default_instance_;
PROTOBUF_CONSTEXPR GetReplicasResponse::GetReplicasResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replicas_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetReplicasResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetReplicasResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetReplicasResponseDefaultTypeInternal() {}
  union {
    GetReplicasResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetReplicasResponseDefaultTypeInternal _GetReplicasResponse_default_instance_;
PROTOBUF_CONSTEXPR ReplicaInfo_NumOutboundNodeEntry_DoNotUse::ReplicaInfo_NumOutboundNodeEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ReplicaInfo_NumOutboundNodeEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplicaInfo_NumOutboundNodeEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplicaInfo_NumOutboundNodeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ReplicaInfo_NumOutboundNodeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplicaInfo_NumOutboundNodeEntry_DoNotUseDefaultTypeInternal _ReplicaInfo_NumOutboundNodeEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ReplicaInfo::ReplicaInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_ids_)*/{}
  , /*decltype(_impl_._partition_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.shard_replicas_)*/{}
  , /*decltype(_impl_.node_ids_)*/{}
  , /*decltype(_impl_._node_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.num_outbound_node_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.resource_group_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.replicaid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReplicaInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplicaInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplicaInfoDefaultTypeInternal() {}
  union {
    ReplicaInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplicaInfoDefaultTypeInternal _ReplicaInfo_default_instance_;
PROTOBUF_CONSTEXPR ShardReplica::ShardReplica(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_ids_)*/{}
  , /*decltype(_impl_._node_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.leader_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dm_channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.leaderid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardReplicaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardReplicaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardReplicaDefaultTypeInternal() {}
  union {
    ShardReplica _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardReplicaDefaultTypeInternal _ShardReplica_default_instance_;
PROTOBUF_CONSTEXPR CreateCredentialRequest::CreateCredentialRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.created_utc_timestamps_)*/uint64_t{0u}
  , /*decltype(_impl_.modified_utc_timestamps_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateCredentialRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateCredentialRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateCredentialRequestDefaultTypeInternal() {}
  union {
    CreateCredentialRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateCredentialRequestDefaultTypeInternal _CreateCredentialRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateCredentialRequest::UpdateCredentialRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.oldpassword_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newpassword_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.created_utc_timestamps_)*/uint64_t{0u}
  , /*decltype(_impl_.modified_utc_timestamps_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateCredentialRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateCredentialRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateCredentialRequestDefaultTypeInternal() {}
  union {
    UpdateCredentialRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateCredentialRequestDefaultTypeInternal _UpdateCredentialRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteCredentialRequest::DeleteCredentialRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteCredentialRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteCredentialRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteCredentialRequestDefaultTypeInternal() {}
  union {
    DeleteCredentialRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteCredentialRequestDefaultTypeInternal _DeleteCredentialRequest_default_instance_;
PROTOBUF_CONSTEXPR ListCredUsersResponse::ListCredUsersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.usernames_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListCredUsersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListCredUsersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListCredUsersResponseDefaultTypeInternal() {}
  union {
    ListCredUsersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListCredUsersResponseDefaultTypeInternal _ListCredUsersResponse_default_instance_;
PROTOBUF_CONSTEXPR ListCredUsersRequest::ListCredUsersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListCredUsersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListCredUsersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListCredUsersRequestDefaultTypeInternal() {}
  union {
    ListCredUsersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListCredUsersRequestDefaultTypeInternal _ListCredUsersRequest_default_instance_;
PROTOBUF_CONSTEXPR RoleEntity::RoleEntity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleEntityDefaultTypeInternal() {}
  union {
    RoleEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleEntityDefaultTypeInternal _RoleEntity_default_instance_;
PROTOBUF_CONSTEXPR UserEntity::UserEntity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserEntityDefaultTypeInternal() {}
  union {
    UserEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserEntityDefaultTypeInternal _UserEntity_default_instance_;
PROTOBUF_CONSTEXPR CreateRoleRequest::CreateRoleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.entity_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRoleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRoleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRoleRequestDefaultTypeInternal() {}
  union {
    CreateRoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRoleRequestDefaultTypeInternal _CreateRoleRequest_default_instance_;
PROTOBUF_CONSTEXPR DropRoleRequest::DropRoleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropRoleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropRoleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropRoleRequestDefaultTypeInternal() {}
  union {
    DropRoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropRoleRequestDefaultTypeInternal _DropRoleRequest_default_instance_;
PROTOBUF_CONSTEXPR OperateUserRoleRequest::OperateUserRoleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperateUserRoleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperateUserRoleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperateUserRoleRequestDefaultTypeInternal() {}
  union {
    OperateUserRoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperateUserRoleRequestDefaultTypeInternal _OperateUserRoleRequest_default_instance_;
PROTOBUF_CONSTEXPR SelectRoleRequest::SelectRoleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.role_)*/nullptr
  , /*decltype(_impl_.include_user_info_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectRoleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectRoleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectRoleRequestDefaultTypeInternal() {}
  union {
    SelectRoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectRoleRequestDefaultTypeInternal _SelectRoleRequest_default_instance_;
PROTOBUF_CONSTEXPR RoleResult::RoleResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.users_)*/{}
  , /*decltype(_impl_.role_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleResultDefaultTypeInternal() {}
  union {
    RoleResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleResultDefaultTypeInternal _RoleResult_default_instance_;
PROTOBUF_CONSTEXPR SelectRoleResponse::SelectRoleResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectRoleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectRoleResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectRoleResponseDefaultTypeInternal() {}
  union {
    SelectRoleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectRoleResponseDefaultTypeInternal _SelectRoleResponse_default_instance_;
PROTOBUF_CONSTEXPR SelectUserRequest::SelectUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.include_role_info_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectUserRequestDefaultTypeInternal() {}
  union {
    SelectUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectUserRequestDefaultTypeInternal _SelectUserRequest_default_instance_;
PROTOBUF_CONSTEXPR UserResult::UserResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roles_)*/{}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserResultDefaultTypeInternal() {}
  union {
    UserResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserResultDefaultTypeInternal _UserResult_default_instance_;
PROTOBUF_CONSTEXPR SelectUserResponse::SelectUserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectUserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectUserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectUserResponseDefaultTypeInternal() {}
  union {
    SelectUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectUserResponseDefaultTypeInternal _SelectUserResponse_default_instance_;
PROTOBUF_CONSTEXPR ObjectEntity::ObjectEntity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectEntityDefaultTypeInternal() {}
  union {
    ObjectEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectEntityDefaultTypeInternal _ObjectEntity_default_instance_;
PROTOBUF_CONSTEXPR PrivilegeEntity::PrivilegeEntity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrivilegeEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivilegeEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivilegeEntityDefaultTypeInternal() {}
  union {
    PrivilegeEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivilegeEntityDefaultTypeInternal _PrivilegeEntity_default_instance_;
PROTOBUF_CONSTEXPR GrantorEntity::GrantorEntity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.privilege_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrantorEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrantorEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrantorEntityDefaultTypeInternal() {}
  union {
    GrantorEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrantorEntityDefaultTypeInternal _GrantorEntity_default_instance_;
PROTOBUF_CONSTEXPR GrantPrivilegeEntity::GrantPrivilegeEntity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entities_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrantPrivilegeEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrantPrivilegeEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrantPrivilegeEntityDefaultTypeInternal() {}
  union {
    GrantPrivilegeEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrantPrivilegeEntityDefaultTypeInternal _GrantPrivilegeEntity_default_instance_;
PROTOBUF_CONSTEXPR GrantEntity::GrantEntity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_)*/nullptr
  , /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_.grantor_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrantEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrantEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrantEntityDefaultTypeInternal() {}
  union {
    GrantEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrantEntityDefaultTypeInternal _GrantEntity_default_instance_;
PROTOBUF_CONSTEXPR SelectGrantRequest::SelectGrantRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.entity_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectGrantRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectGrantRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectGrantRequestDefaultTypeInternal() {}
  union {
    SelectGrantRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectGrantRequestDefaultTypeInternal _SelectGrantRequest_default_instance_;
PROTOBUF_CONSTEXPR SelectGrantResponse::SelectGrantResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entities_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectGrantResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectGrantResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectGrantResponseDefaultTypeInternal() {}
  union {
    SelectGrantResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectGrantResponseDefaultTypeInternal _SelectGrantResponse_default_instance_;
PROTOBUF_CONSTEXPR OperatePrivilegeRequest::OperatePrivilegeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.entity_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperatePrivilegeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperatePrivilegeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperatePrivilegeRequestDefaultTypeInternal() {}
  union {
    OperatePrivilegeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperatePrivilegeRequestDefaultTypeInternal _OperatePrivilegeRequest_default_instance_;
PROTOBUF_CONSTEXPR GetLoadingProgressRequest::GetLoadingProgressRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_names_)*/{}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLoadingProgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLoadingProgressRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLoadingProgressRequestDefaultTypeInternal() {}
  union {
    GetLoadingProgressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLoadingProgressRequestDefaultTypeInternal _GetLoadingProgressRequest_default_instance_;
PROTOBUF_CONSTEXPR GetLoadingProgressResponse::GetLoadingProgressResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.progress_)*/int64_t{0}
  , /*decltype(_impl_.refresh_progress_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLoadingProgressResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLoadingProgressResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLoadingProgressResponseDefaultTypeInternal() {}
  union {
    GetLoadingProgressResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLoadingProgressResponseDefaultTypeInternal _GetLoadingProgressResponse_default_instance_;
PROTOBUF_CONSTEXPR GetLoadStateRequest::GetLoadStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_names_)*/{}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLoadStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLoadStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLoadStateRequestDefaultTypeInternal() {}
  union {
    GetLoadStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLoadStateRequestDefaultTypeInternal _GetLoadStateRequest_default_instance_;
PROTOBUF_CONSTEXPR GetLoadStateResponse::GetLoadStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLoadStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLoadStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLoadStateResponseDefaultTypeInternal() {}
  union {
    GetLoadStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLoadStateResponseDefaultTypeInternal _GetLoadStateResponse_default_instance_;
PROTOBUF_CONSTEXPR MilvusExt::MilvusExt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MilvusExtDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MilvusExtDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MilvusExtDefaultTypeInternal() {}
  union {
    MilvusExt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MilvusExtDefaultTypeInternal _MilvusExt_default_instance_;
PROTOBUF_CONSTEXPR GetVersionRequest::GetVersionRequest(
    ::_pbi::ConstantInitialized) {}
struct GetVersionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetVersionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetVersionRequestDefaultTypeInternal() {}
  union {
    GetVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetVersionRequestDefaultTypeInternal _GetVersionRequest_default_instance_;
PROTOBUF_CONSTEXPR GetVersionResponse::GetVersionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetVersionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetVersionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetVersionResponseDefaultTypeInternal() {}
  union {
    GetVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetVersionResponseDefaultTypeInternal _GetVersionResponse_default_instance_;
PROTOBUF_CONSTEXPR CheckHealthRequest::CheckHealthRequest(
    ::_pbi::ConstantInitialized) {}
struct CheckHealthRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckHealthRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckHealthRequestDefaultTypeInternal() {}
  union {
    CheckHealthRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckHealthRequestDefaultTypeInternal _CheckHealthRequest_default_instance_;
PROTOBUF_CONSTEXPR CheckHealthResponse::CheckHealthResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reasons_)*/{}
  , /*decltype(_impl_.quota_states_)*/{}
  , /*decltype(_impl_._quota_states_cached_byte_size_)*/{0}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.ishealthy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckHealthResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckHealthResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckHealthResponseDefaultTypeInternal() {}
  union {
    CheckHealthResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckHealthResponseDefaultTypeInternal _CheckHealthResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateResourceGroupRequest::CreateResourceGroupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateResourceGroupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateResourceGroupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateResourceGroupRequestDefaultTypeInternal() {}
  union {
    CreateResourceGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateResourceGroupRequestDefaultTypeInternal _CreateResourceGroupRequest_default_instance_;
PROTOBUF_CONSTEXPR DropResourceGroupRequest::DropResourceGroupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropResourceGroupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropResourceGroupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropResourceGroupRequestDefaultTypeInternal() {}
  union {
    DropResourceGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropResourceGroupRequestDefaultTypeInternal _DropResourceGroupRequest_default_instance_;
PROTOBUF_CONSTEXPR TransferNodeRequest::TransferNodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_resource_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_resource_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.num_node_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransferNodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferNodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferNodeRequestDefaultTypeInternal() {}
  union {
    TransferNodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferNodeRequestDefaultTypeInternal _TransferNodeRequest_default_instance_;
PROTOBUF_CONSTEXPR TransferReplicaRequest::TransferReplicaRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_resource_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_resource_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.num_replica_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransferReplicaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferReplicaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferReplicaRequestDefaultTypeInternal() {}
  union {
    TransferReplicaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferReplicaRequestDefaultTypeInternal _TransferReplicaRequest_default_instance_;
PROTOBUF_CONSTEXPR ListResourceGroupsRequest::ListResourceGroupsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListResourceGroupsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListResourceGroupsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListResourceGroupsRequestDefaultTypeInternal() {}
  union {
    ListResourceGroupsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListResourceGroupsRequestDefaultTypeInternal _ListResourceGroupsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListResourceGroupsResponse::ListResourceGroupsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_groups_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListResourceGroupsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListResourceGroupsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListResourceGroupsResponseDefaultTypeInternal() {}
  union {
    ListResourceGroupsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListResourceGroupsResponseDefaultTypeInternal _ListResourceGroupsResponse_default_instance_;
PROTOBUF_CONSTEXPR DescribeResourceGroupRequest::DescribeResourceGroupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeResourceGroupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeResourceGroupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeResourceGroupRequestDefaultTypeInternal() {}
  union {
    DescribeResourceGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeResourceGroupRequestDefaultTypeInternal _DescribeResourceGroupRequest_default_instance_;
PROTOBUF_CONSTEXPR DescribeResourceGroupResponse::DescribeResourceGroupResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.resource_group_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeResourceGroupResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeResourceGroupResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeResourceGroupResponseDefaultTypeInternal() {}
  union {
    DescribeResourceGroupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeResourceGroupResponseDefaultTypeInternal _DescribeResourceGroupResponse_default_instance_;
PROTOBUF_CONSTEXPR ResourceGroup_NumLoadedReplicaEntry_DoNotUse::ResourceGroup_NumLoadedReplicaEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ResourceGroup_NumLoadedReplicaEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceGroup_NumLoadedReplicaEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceGroup_NumLoadedReplicaEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResourceGroup_NumLoadedReplicaEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceGroup_NumLoadedReplicaEntry_DoNotUseDefaultTypeInternal _ResourceGroup_NumLoadedReplicaEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ResourceGroup_NumOutgoingNodeEntry_DoNotUse::ResourceGroup_NumOutgoingNodeEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ResourceGroup_NumOutgoingNodeEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceGroup_NumOutgoingNodeEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceGroup_NumOutgoingNodeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResourceGroup_NumOutgoingNodeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceGroup_NumOutgoingNodeEntry_DoNotUseDefaultTypeInternal _ResourceGroup_NumOutgoingNodeEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ResourceGroup_NumIncomingNodeEntry_DoNotUse::ResourceGroup_NumIncomingNodeEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ResourceGroup_NumIncomingNodeEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceGroup_NumIncomingNodeEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceGroup_NumIncomingNodeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResourceGroup_NumIncomingNodeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceGroup_NumIncomingNodeEntry_DoNotUseDefaultTypeInternal _ResourceGroup_NumIncomingNodeEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ResourceGroup::ResourceGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_loaded_replica_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.num_outgoing_node_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.num_incoming_node_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.capacity_)*/0
  , /*decltype(_impl_.num_available_node_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceGroupDefaultTypeInternal() {}
  union {
    ResourceGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceGroupDefaultTypeInternal _ResourceGroup_default_instance_;
PROTOBUF_CONSTEXPR RenameCollectionRequest::RenameCollectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.oldname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenameCollectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenameCollectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenameCollectionRequestDefaultTypeInternal() {}
  union {
    RenameCollectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenameCollectionRequestDefaultTypeInternal _RenameCollectionRequest_default_instance_;
PROTOBUF_CONSTEXPR GetIndexStatisticsRequest::GetIndexStatisticsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIndexStatisticsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexStatisticsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexStatisticsRequestDefaultTypeInternal() {}
  union {
    GetIndexStatisticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexStatisticsRequestDefaultTypeInternal _GetIndexStatisticsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetIndexStatisticsResponse::GetIndexStatisticsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_descriptions_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIndexStatisticsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexStatisticsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexStatisticsResponseDefaultTypeInternal() {}
  union {
    GetIndexStatisticsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexStatisticsResponseDefaultTypeInternal _GetIndexStatisticsResponse_default_instance_;
PROTOBUF_CONSTEXPR ConnectRequest::ConnectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.client_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectRequestDefaultTypeInternal() {}
  union {
    ConnectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
PROTOBUF_CONSTEXPR ConnectResponse::ConnectResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.server_info_)*/nullptr
  , /*decltype(_impl_.identifier_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectResponseDefaultTypeInternal() {}
  union {
    ConnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectResponseDefaultTypeInternal _ConnectResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateDatabaseRequest::CreateDatabaseRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateDatabaseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateDatabaseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateDatabaseRequestDefaultTypeInternal() {}
  union {
    CreateDatabaseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateDatabaseRequestDefaultTypeInternal _CreateDatabaseRequest_default_instance_;
PROTOBUF_CONSTEXPR DropDatabaseRequest::DropDatabaseRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropDatabaseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropDatabaseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropDatabaseRequestDefaultTypeInternal() {}
  union {
    DropDatabaseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropDatabaseRequestDefaultTypeInternal _DropDatabaseRequest_default_instance_;
PROTOBUF_CONSTEXPR ListDatabasesRequest::ListDatabasesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDatabasesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDatabasesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDatabasesRequestDefaultTypeInternal() {}
  union {
    ListDatabasesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDatabasesRequestDefaultTypeInternal _ListDatabasesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListDatabasesResponse::ListDatabasesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_names_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDatabasesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDatabasesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDatabasesResponseDefaultTypeInternal() {}
  union {
    ListDatabasesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDatabasesResponseDefaultTypeInternal _ListDatabasesResponse_default_instance_;
}  // namespace milvus
}  // namespace proto
}  // namespace milvus
static ::_pb::Metadata file_level_metadata_milvus_2eproto[157];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_milvus_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_milvus_2eproto = nullptr;

const uint32_t TableStruct_milvus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateAliasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateAliasRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateAliasRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateAliasRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateAliasRequest, _impl_.alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropAliasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropAliasRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropAliasRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropAliasRequest, _impl_.alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterAliasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterAliasRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterAliasRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterAliasRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterAliasRequest, _impl_.alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasRequest, _impl_.alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasResponse, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasResponse, _impl_.alias_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasResponse, _impl_.collection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesRequest, _impl_.collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesResponse, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesResponse, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesResponse, _impl_.aliases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, _impl_.schema_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, _impl_.shards_num_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, _impl_.consistency_level_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, _impl_.num_partitions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropCollectionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropCollectionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropCollectionRequest, _impl_.collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterCollectionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterCollectionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterCollectionRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterCollectionRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterCollectionRequest, _impl_.properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasCollectionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasCollectionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasCollectionRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasCollectionRequest, _impl_.time_stamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::BoolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::BoolResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::BoolResponse, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::StringResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::StringResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::StringResponse, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, _impl_.time_stamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.schema_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.virtual_channel_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.physical_channel_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.created_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.created_utc_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.shards_num_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.aliases_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.start_positions_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.consistency_level_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _impl_.num_partitions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, _impl_.replica_number_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, _impl_.resource_groups_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, _impl_.refresh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleaseCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleaseCollectionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleaseCollectionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleaseCollectionRequest, _impl_.collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsRequest, _impl_.partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsRequest, _impl_.guarantee_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsResponse, _impl_.stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsRequest, _impl_.collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsResponse, _impl_.stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, _impl_.time_stamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, _impl_.collection_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, _impl_.collection_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, _impl_.collection_ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, _impl_.created_timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, _impl_.created_utc_timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, _impl_.inmemory_percentages_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, _impl_.query_service_available_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, _impl_.partition_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, _impl_.partition_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, _impl_.partition_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, _impl_.partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, _impl_.replica_number_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, _impl_.resource_groups_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, _impl_.refresh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, _impl_.partition_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, _impl_.partition_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsResponse, _impl_.stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, _impl_.partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, _impl_.partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, _impl_.partitionids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, _impl_.created_timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, _impl_.created_utc_timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, _impl_.inmemory_percentages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentRequest, _impl_.segmentid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, _impl_.indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, _impl_.buildid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, _impl_.enable_index_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, _impl_.fieldid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsRequest, _impl_.partitionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsResponse, _impl_.segmentids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, _impl_.field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, _impl_.extra_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, _impl_.index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, _impl_.field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, _impl_.index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, _impl_.index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, _impl_.indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, _impl_.field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, _impl_.indexed_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, _impl_.total_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, _impl_.index_state_fail_reason_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, _impl_.pending_index_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexResponse, _impl_.index_descriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressRequest, _impl_.field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressRequest, _impl_.index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressResponse, _impl_.indexed_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressResponse, _impl_.total_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, _impl_.field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, _impl_.index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateResponse, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateResponse, _impl_.fail_reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, _impl_.field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, _impl_.index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, _impl_.partition_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, _impl_.fields_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, _impl_.hash_keys_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, _impl_.num_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, _impl_.partition_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, _impl_.fields_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, _impl_.hash_keys_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, _impl_.num_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, _impl_.succ_index_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, _impl_.err_index_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, _impl_.acknowledged_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, _impl_.insert_cnt_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, _impl_.delete_cnt_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, _impl_.upsert_cnt_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, _impl_.partition_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, _impl_.expr_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, _impl_.hash_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.dsl_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.placeholder_group_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.dsl_type_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.output_fields_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.search_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.travel_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.guarantee_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.nq_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.not_return_all_meta_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.consistency_level_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _impl_.use_default_consistency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::Hits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::Hits, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::Hits, _impl_.row_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::Hits, _impl_.scores_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchResults, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchResults, _impl_.results_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchResults, _impl_.collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushRequest, _impl_.collection_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse, _impl_.coll_segids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse, _impl_.flush_coll_segids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse, _impl_.coll_seal_times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, _impl_.expr_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, _impl_.output_fields_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, _impl_.partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, _impl_.travel_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, _impl_.guarantee_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, _impl_.query_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, _impl_.not_return_all_meta_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, _impl_.consistency_level_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, _impl_.use_default_consistency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryResults, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryResults, _impl_.fields_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryResults, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryResults, _impl_.output_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorIDs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorIDs, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorIDs, _impl_.field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorIDs, _impl_.id_array_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorIDs, _impl_.partition_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorsArray, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorsArray, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorsArray, _impl_.array_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceRequest, _impl_.op_left_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceRequest, _impl_.op_right_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceRequest, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceResults, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceResults, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceResults, _impl_.status_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceResults, _impl_.array_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushAllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushAllResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushAllResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushAllResponse, _impl_.flush_all_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, _impl_.partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, _impl_.num_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoRequest, _impl_.dbname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoRequest, _impl_.collectionname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoResponse, _impl_.infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, _impl_.partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, _impl_.mem_size_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, _impl_.num_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, _impl_.index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, _impl_.indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, _impl_.nodeid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, _impl_.nodeids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoRequest, _impl_.dbname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoRequest, _impl_.collectionname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoResponse, _impl_.infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DummyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DummyRequest, _impl_.request_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DummyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DummyResponse, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RegisterLinkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RegisterLinkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RegisterLinkResponse, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RegisterLinkResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetMetricsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetMetricsRequest, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetMetricsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetMetricsResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetMetricsResponse, _impl_.component_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentInfo, _impl_.nodeid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentInfo, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentInfo, _impl_.state_code_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentInfo, _impl_.extra_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentStates, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentStates, _impl_.subcomponent_states_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentStates, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetComponentStatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadBalanceRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadBalanceRequest, _impl_.src_nodeid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadBalanceRequest, _impl_.dst_nodeids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadBalanceRequest, _impl_.sealed_segmentids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadBalanceRequest, _impl_.collectionname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadBalanceRequest, _impl_.db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ManualCompactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ManualCompactionRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ManualCompactionRequest, _impl_.timetravel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ManualCompactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ManualCompactionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ManualCompactionResponse, _impl_.compactionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ManualCompactionResponse, _impl_.compactionplancount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateRequest, _impl_.compactionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateResponse, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateResponse, _impl_.executingplanno_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateResponse, _impl_.timeoutplanno_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateResponse, _impl_.completedplanno_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateResponse, _impl_.failedplanno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionPlansRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionPlansRequest, _impl_.compactionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionPlansResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionPlansResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionPlansResponse, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionPlansResponse, _impl_.mergeinfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CompactionMergeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CompactionMergeInfo, _impl_.sources_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CompactionMergeInfo, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushStateRequest, _impl_.segmentids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushStateResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushStateResponse, _impl_.flushed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushAllStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushAllStateRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushAllStateRequest, _impl_.flush_all_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushAllStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushAllStateResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushAllStateResponse, _impl_.flushed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, _impl_.partition_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, _impl_.channel_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, _impl_.row_based_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, _impl_.files_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, _impl_.db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportResponse, _impl_.tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateRequest, _impl_.task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, _impl_.row_count_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, _impl_.id_list_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, _impl_.infos_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, _impl_.collection_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, _impl_.segment_ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, _impl_.create_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListImportTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListImportTasksRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListImportTasksRequest, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListImportTasksRequest, _impl_.db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListImportTasksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListImportTasksResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListImportTasksResponse, _impl_.tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasRequest, _impl_.with_shard_nodes_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasRequest, _impl_.db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasResponse, _impl_.replicas_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, _impl_.replicaid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, _impl_.partition_ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, _impl_.shard_replicas_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, _impl_.node_ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, _impl_.resource_group_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, _impl_.num_outbound_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShardReplica, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShardReplica, _impl_.leaderid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShardReplica, _impl_.leader_addr_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShardReplica, _impl_.dm_channel_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShardReplica, _impl_.node_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCredentialRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCredentialRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCredentialRequest, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCredentialRequest, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCredentialRequest, _impl_.created_utc_timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCredentialRequest, _impl_.modified_utc_timestamps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpdateCredentialRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpdateCredentialRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpdateCredentialRequest, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpdateCredentialRequest, _impl_.oldpassword_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpdateCredentialRequest, _impl_.newpassword_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpdateCredentialRequest, _impl_.created_utc_timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpdateCredentialRequest, _impl_.modified_utc_timestamps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteCredentialRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteCredentialRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteCredentialRequest, _impl_.username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListCredUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListCredUsersResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListCredUsersResponse, _impl_.usernames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListCredUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListCredUsersRequest, _impl_.base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RoleEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RoleEntity, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UserEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UserEntity, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateRoleRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateRoleRequest, _impl_.entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropRoleRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropRoleRequest, _impl_.role_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperateUserRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperateUserRoleRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperateUserRoleRequest, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperateUserRoleRequest, _impl_.role_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperateUserRoleRequest, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectRoleRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectRoleRequest, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectRoleRequest, _impl_.include_user_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RoleResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RoleResult, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RoleResult, _impl_.users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectRoleResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectRoleResponse, _impl_.results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectUserRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectUserRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectUserRequest, _impl_.include_role_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UserResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UserResult, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UserResult, _impl_.roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectUserResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectUserResponse, _impl_.results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ObjectEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ObjectEntity, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PrivilegeEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PrivilegeEntity, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantorEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantorEntity, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantorEntity, _impl_.privilege_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantPrivilegeEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantPrivilegeEntity, _impl_.entities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantEntity, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantEntity, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantEntity, _impl_.object_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantEntity, _impl_.grantor_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantEntity, _impl_.db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectGrantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectGrantRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectGrantRequest, _impl_.entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectGrantResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectGrantResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectGrantResponse, _impl_.entities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperatePrivilegeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperatePrivilegeRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperatePrivilegeRequest, _impl_.entity_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperatePrivilegeRequest, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressRequest, _impl_.partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressRequest, _impl_.db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressResponse, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressResponse, _impl_.refresh_progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateRequest, _impl_.partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateRequest, _impl_.db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateResponse, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MilvusExt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MilvusExt, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetVersionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetVersionResponse, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CheckHealthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CheckHealthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CheckHealthResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CheckHealthResponse, _impl_.ishealthy_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CheckHealthResponse, _impl_.reasons_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CheckHealthResponse, _impl_.quota_states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateResourceGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateResourceGroupRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateResourceGroupRequest, _impl_.resource_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropResourceGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropResourceGroupRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropResourceGroupRequest, _impl_.resource_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferNodeRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferNodeRequest, _impl_.source_resource_group_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferNodeRequest, _impl_.target_resource_group_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferNodeRequest, _impl_.num_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferReplicaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferReplicaRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferReplicaRequest, _impl_.source_resource_group_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferReplicaRequest, _impl_.target_resource_group_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferReplicaRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferReplicaRequest, _impl_.num_replica_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferReplicaRequest, _impl_.db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListResourceGroupsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListResourceGroupsRequest, _impl_.base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListResourceGroupsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListResourceGroupsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListResourceGroupsResponse, _impl_.resource_groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeResourceGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeResourceGroupRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeResourceGroupRequest, _impl_.resource_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeResourceGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeResourceGroupResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeResourceGroupResponse, _impl_.resource_group_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup, _impl_.capacity_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup, _impl_.num_available_node_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup, _impl_.num_loaded_replica_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup, _impl_.num_outgoing_node_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup, _impl_.num_incoming_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RenameCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RenameCollectionRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RenameCollectionRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RenameCollectionRequest, _impl_.oldname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RenameCollectionRequest, _impl_.newname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsRequest, _impl_.index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsResponse, _impl_.index_descriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ConnectRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ConnectRequest, _impl_.client_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ConnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ConnectResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ConnectResponse, _impl_.server_info_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ConnectResponse, _impl_.identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateDatabaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateDatabaseRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateDatabaseRequest, _impl_.db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropDatabaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropDatabaseRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropDatabaseRequest, _impl_.db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListDatabasesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListDatabasesRequest, _impl_.base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListDatabasesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListDatabasesResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListDatabasesResponse, _impl_.db_names_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::milvus::proto::milvus::CreateAliasRequest)},
  { 10, -1, -1, sizeof(::milvus::proto::milvus::DropAliasRequest)},
  { 19, -1, -1, sizeof(::milvus::proto::milvus::AlterAliasRequest)},
  { 29, -1, -1, sizeof(::milvus::proto::milvus::DescribeAliasRequest)},
  { 38, -1, -1, sizeof(::milvus::proto::milvus::DescribeAliasResponse)},
  { 48, -1, -1, sizeof(::milvus::proto::milvus::ListAliasesRequest)},
  { 57, -1, -1, sizeof(::milvus::proto::milvus::ListAliasesResponse)},
  { 67, -1, -1, sizeof(::milvus::proto::milvus::CreateCollectionRequest)},
  { 81, -1, -1, sizeof(::milvus::proto::milvus::DropCollectionRequest)},
  { 90, -1, -1, sizeof(::milvus::proto::milvus::AlterCollectionRequest)},
  { 101, -1, -1, sizeof(::milvus::proto::milvus::HasCollectionRequest)},
  { 111, -1, -1, sizeof(::milvus::proto::milvus::BoolResponse)},
  { 119, -1, -1, sizeof(::milvus::proto::milvus::StringResponse)},
  { 127, -1, -1, sizeof(::milvus::proto::milvus::DescribeCollectionRequest)},
  { 138, -1, -1, sizeof(::milvus::proto::milvus::DescribeCollectionResponse)},
  { 159, -1, -1, sizeof(::milvus::proto::milvus::LoadCollectionRequest)},
  { 171, -1, -1, sizeof(::milvus::proto::milvus::ReleaseCollectionRequest)},
  { 180, -1, -1, sizeof(::milvus::proto::milvus::GetStatisticsRequest)},
  { 191, -1, -1, sizeof(::milvus::proto::milvus::GetStatisticsResponse)},
  { 199, -1, -1, sizeof(::milvus::proto::milvus::GetCollectionStatisticsRequest)},
  { 208, -1, -1, sizeof(::milvus::proto::milvus::GetCollectionStatisticsResponse)},
  { 216, -1, -1, sizeof(::milvus::proto::milvus::ShowCollectionsRequest)},
  { 227, -1, -1, sizeof(::milvus::proto::milvus::ShowCollectionsResponse)},
  { 240, -1, -1, sizeof(::milvus::proto::milvus::CreatePartitionRequest)},
  { 250, -1, -1, sizeof(::milvus::proto::milvus::DropPartitionRequest)},
  { 260, -1, -1, sizeof(::milvus::proto::milvus::HasPartitionRequest)},
  { 270, -1, -1, sizeof(::milvus::proto::milvus::LoadPartitionsRequest)},
  { 283, -1, -1, sizeof(::milvus::proto::milvus::ReleasePartitionsRequest)},
  { 293, -1, -1, sizeof(::milvus::proto::milvus::GetPartitionStatisticsRequest)},
  { 303, -1, -1, sizeof(::milvus::proto::milvus::GetPartitionStatisticsResponse)},
  { 311, -1, -1, sizeof(::milvus::proto::milvus::ShowPartitionsRequest)},
  { 323, -1, -1, sizeof(::milvus::proto::milvus::ShowPartitionsResponse)},
  { 335, -1, -1, sizeof(::milvus::proto::milvus::DescribeSegmentRequest)},
  { 344, -1, -1, sizeof(::milvus::proto::milvus::DescribeSegmentResponse)},
  { 355, -1, -1, sizeof(::milvus::proto::milvus::ShowSegmentsRequest)},
  { 364, -1, -1, sizeof(::milvus::proto::milvus::ShowSegmentsResponse)},
  { 372, -1, -1, sizeof(::milvus::proto::milvus::CreateIndexRequest)},
  { 384, -1, -1, sizeof(::milvus::proto::milvus::DescribeIndexRequest)},
  { 395, -1, -1, sizeof(::milvus::proto::milvus::IndexDescription)},
  { 410, -1, -1, sizeof(::milvus::proto::milvus::DescribeIndexResponse)},
  { 418, -1, -1, sizeof(::milvus::proto::milvus::GetIndexBuildProgressRequest)},
  { 429, -1, -1, sizeof(::milvus::proto::milvus::GetIndexBuildProgressResponse)},
  { 438, -1, -1, sizeof(::milvus::proto::milvus::GetIndexStateRequest)},
  { 449, -1, -1, sizeof(::milvus::proto::milvus::GetIndexStateResponse)},
  { 458, -1, -1, sizeof(::milvus::proto::milvus::DropIndexRequest)},
  { 469, -1, -1, sizeof(::milvus::proto::milvus::InsertRequest)},
  { 482, -1, -1, sizeof(::milvus::proto::milvus::UpsertRequest)},
  { 495, -1, -1, sizeof(::milvus::proto::milvus::MutationResult)},
  { 510, -1, -1, sizeof(::milvus::proto::milvus::DeleteRequest)},
  { 522, -1, -1, sizeof(::milvus::proto::milvus::SearchRequest)},
  { 543, -1, -1, sizeof(::milvus::proto::milvus::Hits)},
  { 552, -1, -1, sizeof(::milvus::proto::milvus::SearchResults)},
  { 561, -1, -1, sizeof(::milvus::proto::milvus::FlushRequest)},
  { 570, 578, -1, sizeof(::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse)},
  { 580, 588, -1, sizeof(::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse)},
  { 590, 598, -1, sizeof(::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse)},
  { 600, -1, -1, sizeof(::milvus::proto::milvus::FlushResponse)},
  { 611, -1, -1, sizeof(::milvus::proto::milvus::QueryRequest)},
  { 629, -1, -1, sizeof(::milvus::proto::milvus::QueryResults)},
  { 639, -1, -1, sizeof(::milvus::proto::milvus::VectorIDs)},
  { 649, -1, -1, sizeof(::milvus::proto::milvus::VectorsArray)},
  { 658, -1, -1, sizeof(::milvus::proto::milvus::CalcDistanceRequest)},
  { 668, -1, -1, sizeof(::milvus::proto::milvus::CalcDistanceResults)},
  { 678, -1, -1, sizeof(::milvus::proto::milvus::FlushAllRequest)},
  { 684, -1, -1, sizeof(::milvus::proto::milvus::FlushAllResponse)},
  { 692, -1, -1, sizeof(::milvus::proto::milvus::PersistentSegmentInfo)},
  { 703, -1, -1, sizeof(::milvus::proto::milvus::GetPersistentSegmentInfoRequest)},
  { 712, -1, -1, sizeof(::milvus::proto::milvus::GetPersistentSegmentInfoResponse)},
  { 720, -1, -1, sizeof(::milvus::proto::milvus::QuerySegmentInfo)},
  { 736, -1, -1, sizeof(::milvus::proto::milvus::GetQuerySegmentInfoRequest)},
  { 745, -1, -1, sizeof(::milvus::proto::milvus::GetQuerySegmentInfoResponse)},
  { 753, -1, -1, sizeof(::milvus::proto::milvus::DummyRequest)},
  { 760, -1, -1, sizeof(::milvus::proto::milvus::DummyResponse)},
  { 767, -1, -1, sizeof(::milvus::proto::milvus::RegisterLinkRequest)},
  { 773, -1, -1, sizeof(::milvus::proto::milvus::RegisterLinkResponse)},
  { 781, -1, -1, sizeof(::milvus::proto::milvus::GetMetricsRequest)},
  { 789, -1, -1, sizeof(::milvus::proto::milvus::GetMetricsResponse)},
  { 798, -1, -1, sizeof(::milvus::proto::milvus::ComponentInfo)},
  { 808, -1, -1, sizeof(::milvus::proto::milvus::ComponentStates)},
  { 817, -1, -1, sizeof(::milvus::proto::milvus::GetComponentStatesRequest)},
  { 823, -1, -1, sizeof(::milvus::proto::milvus::LoadBalanceRequest)},
  { 835, -1, -1, sizeof(::milvus::proto::milvus::ManualCompactionRequest)},
  { 843, -1, -1, sizeof(::milvus::proto::milvus::ManualCompactionResponse)},
  { 852, -1, -1, sizeof(::milvus::proto::milvus::GetCompactionStateRequest)},
  { 859, -1, -1, sizeof(::milvus::proto::milvus::GetCompactionStateResponse)},
  { 871, -1, -1, sizeof(::milvus::proto::milvus::GetCompactionPlansRequest)},
  { 878, -1, -1, sizeof(::milvus::proto::milvus::GetCompactionPlansResponse)},
  { 887, -1, -1, sizeof(::milvus::proto::milvus::CompactionMergeInfo)},
  { 895, -1, -1, sizeof(::milvus::proto::milvus::GetFlushStateRequest)},
  { 902, -1, -1, sizeof(::milvus::proto::milvus::GetFlushStateResponse)},
  { 910, -1, -1, sizeof(::milvus::proto::milvus::GetFlushAllStateRequest)},
  { 918, -1, -1, sizeof(::milvus::proto::milvus::GetFlushAllStateResponse)},
  { 926, -1, -1, sizeof(::milvus::proto::milvus::ImportRequest)},
  { 939, -1, -1, sizeof(::milvus::proto::milvus::ImportResponse)},
  { 947, -1, -1, sizeof(::milvus::proto::milvus::GetImportStateRequest)},
  { 954, -1, -1, sizeof(::milvus::proto::milvus::GetImportStateResponse)},
  { 969, -1, -1, sizeof(::milvus::proto::milvus::ListImportTasksRequest)},
  { 978, -1, -1, sizeof(::milvus::proto::milvus::ListImportTasksResponse)},
  { 986, -1, -1, sizeof(::milvus::proto::milvus::GetReplicasRequest)},
  { 997, -1, -1, sizeof(::milvus::proto::milvus::GetReplicasResponse)},
  { 1005, 1013, -1, sizeof(::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse)},
  { 1015, -1, -1, sizeof(::milvus::proto::milvus::ReplicaInfo)},
  { 1028, -1, -1, sizeof(::milvus::proto::milvus::ShardReplica)},
  { 1038, -1, -1, sizeof(::milvus::proto::milvus::CreateCredentialRequest)},
  { 1049, -1, -1, sizeof(::milvus::proto::milvus::UpdateCredentialRequest)},
  { 1061, -1, -1, sizeof(::milvus::proto::milvus::DeleteCredentialRequest)},
  { 1069, -1, -1, sizeof(::milvus::proto::milvus::ListCredUsersResponse)},
  { 1077, -1, -1, sizeof(::milvus::proto::milvus::ListCredUsersRequest)},
  { 1084, -1, -1, sizeof(::milvus::proto::milvus::RoleEntity)},
  { 1091, -1, -1, sizeof(::milvus::proto::milvus::UserEntity)},
  { 1098, -1, -1, sizeof(::milvus::proto::milvus::CreateRoleRequest)},
  { 1106, -1, -1, sizeof(::milvus::proto::milvus::DropRoleRequest)},
  { 1114, -1, -1, sizeof(::milvus::proto::milvus::OperateUserRoleRequest)},
  { 1124, -1, -1, sizeof(::milvus::proto::milvus::SelectRoleRequest)},
  { 1133, -1, -1, sizeof(::milvus::proto::milvus::RoleResult)},
  { 1141, -1, -1, sizeof(::milvus::proto::milvus::SelectRoleResponse)},
  { 1149, -1, -1, sizeof(::milvus::proto::milvus::SelectUserRequest)},
  { 1158, -1, -1, sizeof(::milvus::proto::milvus::UserResult)},
  { 1166, -1, -1, sizeof(::milvus::proto::milvus::SelectUserResponse)},
  { 1174, -1, -1, sizeof(::milvus::proto::milvus::ObjectEntity)},
  { 1181, -1, -1, sizeof(::milvus::proto::milvus::PrivilegeEntity)},
  { 1188, -1, -1, sizeof(::milvus::proto::milvus::GrantorEntity)},
  { 1196, -1, -1, sizeof(::milvus::proto::milvus::GrantPrivilegeEntity)},
  { 1203, -1, -1, sizeof(::milvus::proto::milvus::GrantEntity)},
  { 1214, -1, -1, sizeof(::milvus::proto::milvus::SelectGrantRequest)},
  { 1222, -1, -1, sizeof(::milvus::proto::milvus::SelectGrantResponse)},
  { 1230, -1, -1, sizeof(::milvus::proto::milvus::OperatePrivilegeRequest)},
  { 1239, -1, -1, sizeof(::milvus::proto::milvus::GetLoadingProgressRequest)},
  { 1249, -1, -1, sizeof(::milvus::proto::milvus::GetLoadingProgressResponse)},
  { 1258, -1, -1, sizeof(::milvus::proto::milvus::GetLoadStateRequest)},
  { 1268, -1, -1, sizeof(::milvus::proto::milvus::GetLoadStateResponse)},
  { 1276, -1, -1, sizeof(::milvus::proto::milvus::MilvusExt)},
  { 1283, -1, -1, sizeof(::milvus::proto::milvus::GetVersionRequest)},
  { 1289, -1, -1, sizeof(::milvus::proto::milvus::GetVersionResponse)},
  { 1297, -1, -1, sizeof(::milvus::proto::milvus::CheckHealthRequest)},
  { 1303, -1, -1, sizeof(::milvus::proto::milvus::CheckHealthResponse)},
  { 1313, -1, -1, sizeof(::milvus::proto::milvus::CreateResourceGroupRequest)},
  { 1321, -1, -1, sizeof(::milvus::proto::milvus::DropResourceGroupRequest)},
  { 1329, -1, -1, sizeof(::milvus::proto::milvus::TransferNodeRequest)},
  { 1339, -1, -1, sizeof(::milvus::proto::milvus::TransferReplicaRequest)},
  { 1351, -1, -1, sizeof(::milvus::proto::milvus::ListResourceGroupsRequest)},
  { 1358, -1, -1, sizeof(::milvus::proto::milvus::ListResourceGroupsResponse)},
  { 1366, -1, -1, sizeof(::milvus::proto::milvus::DescribeResourceGroupRequest)},
  { 1374, -1, -1, sizeof(::milvus::proto::milvus::DescribeResourceGroupResponse)},
  { 1382, 1390, -1, sizeof(::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse)},
  { 1392, 1400, -1, sizeof(::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse)},
  { 1402, 1410, -1, sizeof(::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse)},
  { 1412, -1, -1, sizeof(::milvus::proto::milvus::ResourceGroup)},
  { 1424, -1, -1, sizeof(::milvus::proto::milvus::RenameCollectionRequest)},
  { 1434, -1, -1, sizeof(::milvus::proto::milvus::GetIndexStatisticsRequest)},
  { 1444, -1, -1, sizeof(::milvus::proto::milvus::GetIndexStatisticsResponse)},
  { 1452, -1, -1, sizeof(::milvus::proto::milvus::ConnectRequest)},
  { 1460, -1, -1, sizeof(::milvus::proto::milvus::ConnectResponse)},
  { 1469, -1, -1, sizeof(::milvus::proto::milvus::CreateDatabaseRequest)},
  { 1477, -1, -1, sizeof(::milvus::proto::milvus::DropDatabaseRequest)},
  { 1485, -1, -1, sizeof(::milvus::proto::milvus::ListDatabasesRequest)},
  { 1492, -1, -1, sizeof(::milvus::proto::milvus::ListDatabasesResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::milvus::proto::milvus::_CreateAliasRequest_default_instance_._instance,
  &::milvus::proto::milvus::_DropAliasRequest_default_instance_._instance,
  &::milvus::proto::milvus::_AlterAliasRequest_default_instance_._instance,
  &::milvus::proto::milvus::_DescribeAliasRequest_default_instance_._instance,
  &::milvus::proto::milvus::_DescribeAliasResponse_default_instance_._instance,
  &::milvus::proto::milvus::_ListAliasesRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ListAliasesResponse_default_instance_._instance,
  &::milvus::proto::milvus::_CreateCollectionRequest_default_instance_._instance,
  &::milvus::proto::milvus::_DropCollectionRequest_default_instance_._instance,
  &::milvus::proto::milvus::_AlterCollectionRequest_default_instance_._instance,
  &::milvus::proto::milvus::_HasCollectionRequest_default_instance_._instance,
  &::milvus::proto::milvus::_BoolResponse_default_instance_._instance,
  &::milvus::proto::milvus::_StringResponse_default_instance_._instance,
  &::milvus::proto::milvus::_DescribeCollectionRequest_default_instance_._instance,
  &::milvus::proto::milvus::_DescribeCollectionResponse_default_instance_._instance,
  &::milvus::proto::milvus::_LoadCollectionRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ReleaseCollectionRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetStatisticsRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetStatisticsResponse_default_instance_._instance,
  &::milvus::proto::milvus::_GetCollectionStatisticsRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetCollectionStatisticsResponse_default_instance_._instance,
  &::milvus::proto::milvus::_ShowCollectionsRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ShowCollectionsResponse_default_instance_._instance,
  &::milvus::proto::milvus::_CreatePartitionRequest_default_instance_._instance,
  &::milvus::proto::milvus::_DropPartitionRequest_default_instance_._instance,
  &::milvus::proto::milvus::_HasPartitionRequest_default_instance_._instance,
  &::milvus::proto::milvus::_LoadPartitionsRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ReleasePartitionsRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetPartitionStatisticsRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetPartitionStatisticsResponse_default_instance_._instance,
  &::milvus::proto::milvus::_ShowPartitionsRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ShowPartitionsResponse_default_instance_._instance,
  &::milvus::proto::milvus::_DescribeSegmentRequest_default_instance_._instance,
  &::milvus::proto::milvus::_DescribeSegmentResponse_default_instance_._instance,
  &::milvus::proto::milvus::_ShowSegmentsRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ShowSegmentsResponse_default_instance_._instance,
  &::milvus::proto::milvus::_CreateIndexRequest_default_instance_._instance,
  &::milvus::proto::milvus::_DescribeIndexRequest_default_instance_._instance,
  &::milvus::proto::milvus::_IndexDescription_default_instance_._instance,
  &::milvus::proto::milvus::_DescribeIndexResponse_default_instance_._instance,
  &::milvus::proto::milvus::_GetIndexBuildProgressRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetIndexBuildProgressResponse_default_instance_._instance,
  &::milvus::proto::milvus::_GetIndexStateRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetIndexStateResponse_default_instance_._instance,
  &::milvus::proto::milvus::_DropIndexRequest_default_instance_._instance,
  &::milvus::proto::milvus::_InsertRequest_default_instance_._instance,
  &::milvus::proto::milvus::_UpsertRequest_default_instance_._instance,
  &::milvus::proto::milvus::_MutationResult_default_instance_._instance,
  &::milvus::proto::milvus::_DeleteRequest_default_instance_._instance,
  &::milvus::proto::milvus::_SearchRequest_default_instance_._instance,
  &::milvus::proto::milvus::_Hits_default_instance_._instance,
  &::milvus::proto::milvus::_SearchResults_default_instance_._instance,
  &::milvus::proto::milvus::_FlushRequest_default_instance_._instance,
  &::milvus::proto::milvus::_FlushResponse_CollSegIDsEntry_DoNotUse_default_instance_._instance,
  &::milvus::proto::milvus::_FlushResponse_FlushCollSegIDsEntry_DoNotUse_default_instance_._instance,
  &::milvus::proto::milvus::_FlushResponse_CollSealTimesEntry_DoNotUse_default_instance_._instance,
  &::milvus::proto::milvus::_FlushResponse_default_instance_._instance,
  &::milvus::proto::milvus::_QueryRequest_default_instance_._instance,
  &::milvus::proto::milvus::_QueryResults_default_instance_._instance,
  &::milvus::proto::milvus::_VectorIDs_default_instance_._instance,
  &::milvus::proto::milvus::_VectorsArray_default_instance_._instance,
  &::milvus::proto::milvus::_CalcDistanceRequest_default_instance_._instance,
  &::milvus::proto::milvus::_CalcDistanceResults_default_instance_._instance,
  &::milvus::proto::milvus::_FlushAllRequest_default_instance_._instance,
  &::milvus::proto::milvus::_FlushAllResponse_default_instance_._instance,
  &::milvus::proto::milvus::_PersistentSegmentInfo_default_instance_._instance,
  &::milvus::proto::milvus::_GetPersistentSegmentInfoRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetPersistentSegmentInfoResponse_default_instance_._instance,
  &::milvus::proto::milvus::_QuerySegmentInfo_default_instance_._instance,
  &::milvus::proto::milvus::_GetQuerySegmentInfoRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetQuerySegmentInfoResponse_default_instance_._instance,
  &::milvus::proto::milvus::_DummyRequest_default_instance_._instance,
  &::milvus::proto::milvus::_DummyResponse_default_instance_._instance,
  &::milvus::proto::milvus::_RegisterLinkRequest_default_instance_._instance,
  &::milvus::proto::milvus::_RegisterLinkResponse_default_instance_._instance,
  &::milvus::proto::milvus::_GetMetricsRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetMetricsResponse_default_instance_._instance,
  &::milvus::proto::milvus::_ComponentInfo_default_instance_._instance,
  &::milvus::proto::milvus::_ComponentStates_default_instance_._instance,
  &::milvus::proto::milvus::_GetComponentStatesRequest_default_instance_._instance,
  &::milvus::proto::milvus::_LoadBalanceRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ManualCompactionRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ManualCompactionResponse_default_instance_._instance,
  &::milvus::proto::milvus::_GetCompactionStateRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetCompactionStateResponse_default_instance_._instance,
  &::milvus::proto::milvus::_GetCompactionPlansRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetCompactionPlansResponse_default_instance_._instance,
  &::milvus::proto::milvus::_CompactionMergeInfo_default_instance_._instance,
  &::milvus::proto::milvus::_GetFlushStateRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetFlushStateResponse_default_instance_._instance,
  &::milvus::proto::milvus::_GetFlushAllStateRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetFlushAllStateResponse_default_instance_._instance,
  &::milvus::proto::milvus::_ImportRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ImportResponse_default_instance_._instance,
  &::milvus::proto::milvus::_GetImportStateRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetImportStateResponse_default_instance_._instance,
  &::milvus::proto::milvus::_ListImportTasksRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ListImportTasksResponse_default_instance_._instance,
  &::milvus::proto::milvus::_GetReplicasRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetReplicasResponse_default_instance_._instance,
  &::milvus::proto::milvus::_ReplicaInfo_NumOutboundNodeEntry_DoNotUse_default_instance_._instance,
  &::milvus::proto::milvus::_ReplicaInfo_default_instance_._instance,
  &::milvus::proto::milvus::_ShardReplica_default_instance_._instance,
  &::milvus::proto::milvus::_CreateCredentialRequest_default_instance_._instance,
  &::milvus::proto::milvus::_UpdateCredentialRequest_default_instance_._instance,
  &::milvus::proto::milvus::_DeleteCredentialRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ListCredUsersResponse_default_instance_._instance,
  &::milvus::proto::milvus::_ListCredUsersRequest_default_instance_._instance,
  &::milvus::proto::milvus::_RoleEntity_default_instance_._instance,
  &::milvus::proto::milvus::_UserEntity_default_instance_._instance,
  &::milvus::proto::milvus::_CreateRoleRequest_default_instance_._instance,
  &::milvus::proto::milvus::_DropRoleRequest_default_instance_._instance,
  &::milvus::proto::milvus::_OperateUserRoleRequest_default_instance_._instance,
  &::milvus::proto::milvus::_SelectRoleRequest_default_instance_._instance,
  &::milvus::proto::milvus::_RoleResult_default_instance_._instance,
  &::milvus::proto::milvus::_SelectRoleResponse_default_instance_._instance,
  &::milvus::proto::milvus::_SelectUserRequest_default_instance_._instance,
  &::milvus::proto::milvus::_UserResult_default_instance_._instance,
  &::milvus::proto::milvus::_SelectUserResponse_default_instance_._instance,
  &::milvus::proto::milvus::_ObjectEntity_default_instance_._instance,
  &::milvus::proto::milvus::_PrivilegeEntity_default_instance_._instance,
  &::milvus::proto::milvus::_GrantorEntity_default_instance_._instance,
  &::milvus::proto::milvus::_GrantPrivilegeEntity_default_instance_._instance,
  &::milvus::proto::milvus::_GrantEntity_default_instance_._instance,
  &::milvus::proto::milvus::_SelectGrantRequest_default_instance_._instance,
  &::milvus::proto::milvus::_SelectGrantResponse_default_instance_._instance,
  &::milvus::proto::milvus::_OperatePrivilegeRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetLoadingProgressRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetLoadingProgressResponse_default_instance_._instance,
  &::milvus::proto::milvus::_GetLoadStateRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetLoadStateResponse_default_instance_._instance,
  &::milvus::proto::milvus::_MilvusExt_default_instance_._instance,
  &::milvus::proto::milvus::_GetVersionRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetVersionResponse_default_instance_._instance,
  &::milvus::proto::milvus::_CheckHealthRequest_default_instance_._instance,
  &::milvus::proto::milvus::_CheckHealthResponse_default_instance_._instance,
  &::milvus::proto::milvus::_CreateResourceGroupRequest_default_instance_._instance,
  &::milvus::proto::milvus::_DropResourceGroupRequest_default_instance_._instance,
  &::milvus::proto::milvus::_TransferNodeRequest_default_instance_._instance,
  &::milvus::proto::milvus::_TransferReplicaRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ListResourceGroupsRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ListResourceGroupsResponse_default_instance_._instance,
  &::milvus::proto::milvus::_DescribeResourceGroupRequest_default_instance_._instance,
  &::milvus::proto::milvus::_DescribeResourceGroupResponse_default_instance_._instance,
  &::milvus::proto::milvus::_ResourceGroup_NumLoadedReplicaEntry_DoNotUse_default_instance_._instance,
  &::milvus::proto::milvus::_ResourceGroup_NumOutgoingNodeEntry_DoNotUse_default_instance_._instance,
  &::milvus::proto::milvus::_ResourceGroup_NumIncomingNodeEntry_DoNotUse_default_instance_._instance,
  &::milvus::proto::milvus::_ResourceGroup_default_instance_._instance,
  &::milvus::proto::milvus::_RenameCollectionRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetIndexStatisticsRequest_default_instance_._instance,
  &::milvus::proto::milvus::_GetIndexStatisticsResponse_default_instance_._instance,
  &::milvus::proto::milvus::_ConnectRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ConnectResponse_default_instance_._instance,
  &::milvus::proto::milvus::_CreateDatabaseRequest_default_instance_._instance,
  &::milvus::proto::milvus::_DropDatabaseRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ListDatabasesRequest_default_instance_._instance,
  &::milvus::proto::milvus::_ListDatabasesResponse_default_instance_._instance,
};

const char descriptor_table_protodef_milvus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014milvus.proto\022\023milvus.proto.milvus\032\014com"
  "mon.proto\032\014schema.proto\032\013feder.proto\032 go"
  "ogle/protobuf/descriptor.proto\"y\n\022Create"
  "AliasRequest\022*\n\004base\030\001 \001(\0132\034.milvus.prot"
  "o.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017col"
  "lection_name\030\003 \001(\t\022\r\n\005alias\030\004 \001(\t\"^\n\020Dro"
  "pAliasRequest\022*\n\004base\030\001 \001(\0132\034.milvus.pro"
  "to.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\r\n\005al"
  "ias\030\003 \001(\t\"x\n\021AlterAliasRequest\022*\n\004base\030\001"
  " \001(\0132\034.milvus.proto.common.MsgBase\022\017\n\007db"
  "_name\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\r\n\005"
  "alias\030\004 \001(\t\"b\n\024DescribeAliasRequest\022*\n\004b"
  "ase\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022"
  "\017\n\007db_name\030\002 \001(\t\022\r\n\005alias\030\003 \001(\t\"x\n\025Descr"
  "ibeAliasResponse\022+\n\006status\030\001 \001(\0132\033.milvu"
  "s.proto.common.Status\022\017\n\007db_name\030\002 \001(\t\022\r"
  "\n\005alias\030\003 \001(\t\022\022\n\ncollection\030\004 \001(\t\"j\n\022Lis"
  "tAliasesRequest\022*\n\004base\030\001 \001(\0132\034.milvus.p"
  "roto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017"
  "collection_name\030\003 \001(\t\"}\n\023ListAliasesResp"
  "onse\022+\n\006status\030\001 \001(\0132\033.milvus.proto.comm"
  "on.Status\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection"
  "_name\030\003 \001(\t\022\017\n\007aliases\030\004 \003(\t\"\270\002\n\027CreateC"
  "ollectionRequest\022*\n\004base\030\001 \001(\0132\034.milvus."
  "proto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n"
  "\017collection_name\030\003 \001(\t\022\016\n\006schema\030\004 \001(\014\022\022"
  "\n\nshards_num\030\005 \001(\005\022@\n\021consistency_level\030"
  "\006 \001(\0162%.milvus.proto.common.ConsistencyL"
  "evel\0225\n\nproperties\030\007 \003(\0132!.milvus.proto."
  "common.KeyValuePair\022\026\n\016num_partitions\030\010 "
  "\001(\003:\022\312>\017\010\001\020\001\030\377\377\377\377\377\377\377\377\377\001\"\201\001\n\025DropCollecti"
  "onRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.c"
  "ommon.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collec"
  "tion_name\030\003 \001(\t:\022\312>\017\010\001\020\002\030\377\377\377\377\377\377\377\377\377\001\"\317\001\n\026"
  "AlterCollectionRequest\022*\n\004base\030\001 \001(\0132\034.m"
  "ilvus.proto.common.MsgBase\022\017\n\007db_name\030\002 "
  "\001(\t\022\027\n\017collection_name\030\003 \001(\t\022\024\n\014collecti"
  "onID\030\004 \001(\003\0225\n\nproperties\030\005 \003(\0132!.milvus."
  "proto.common.KeyValuePair:\022\312>\017\010\001\020\001\030\377\377\377\377\377"
  "\377\377\377\377\001\"\200\001\n\024HasCollectionRequest\022*\n\004base\030\001"
  " \001(\0132\034.milvus.proto.common.MsgBase\022\017\n\007db"
  "_name\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\022\n\n"
  "time_stamp\030\004 \001(\004\"J\n\014BoolResponse\022+\n\006stat"
  "us\030\001 \001(\0132\033.milvus.proto.common.Status\022\r\n"
  "\005value\030\002 \001(\010\"L\n\016StringResponse\022+\n\006status"
  "\030\001 \001(\0132\033.milvus.proto.common.Status\022\r\n\005v"
  "alue\030\002 \001(\t\"\257\001\n\031DescribeCollectionRequest"
  "\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.Msg"
  "Base\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_name"
  "\030\003 \001(\t\022\024\n\014collectionID\030\004 \001(\003\022\022\n\ntime_sta"
  "mp\030\005 \001(\004:\022\312>\017\010\001\020\003\030\377\377\377\377\377\377\377\377\377\001\"\252\004\n\032Describ"
  "eCollectionResponse\022+\n\006status\030\001 \001(\0132\033.mi"
  "lvus.proto.common.Status\0225\n\006schema\030\002 \001(\013"
  "2%.milvus.proto.schema.CollectionSchema\022"
  "\024\n\014collectionID\030\003 \001(\003\022\035\n\025virtual_channel"
  "_names\030\004 \003(\t\022\036\n\026physical_channel_names\030\005"
  " \003(\t\022\031\n\021created_timestamp\030\006 \001(\004\022\035\n\025creat"
  "ed_utc_timestamp\030\007 \001(\004\022\022\n\nshards_num\030\010 \001"
  "(\005\022\017\n\007aliases\030\t \003(\t\0229\n\017start_positions\030\n"
  " \003(\0132 .milvus.proto.common.KeyDataPair\022@"
  "\n\021consistency_level\030\013 \001(\0162%.milvus.proto"
  ".common.ConsistencyLevel\022\027\n\017collection_n"
  "ame\030\014 \001(\t\0225\n\nproperties\030\r \003(\0132!.milvus.p"
  "roto.common.KeyValuePair\022\017\n\007db_name\030\016 \001("
  "\t\022\026\n\016num_partitions\030\017 \001(\003\"\270\001\n\025LoadCollec"
  "tionRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto"
  ".common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017coll"
  "ection_name\030\003 \001(\t\022\026\n\016replica_number\030\004 \001("
  "\005\022\027\n\017resource_groups\030\005 \003(\t\022\017\n\007refresh\030\006 "
  "\001(\010:\007\312>\004\020\005\030\003\"y\n\030ReleaseCollectionRequest"
  "\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.Msg"
  "Base\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_name"
  "\030\003 \001(\t:\007\312>\004\020\006\030\003\"\253\001\n\024GetStatisticsRequest"
  "\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.Msg"
  "Base\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_name"
  "\030\003 \001(\t\022\027\n\017partition_names\030\004 \003(\t\022\033\n\023guara"
  "ntee_timestamp\030\005 \001(\004:\007\312>\004\020\n\030\003\"v\n\025GetStat"
  "isticsResponse\022+\n\006status\030\001 \001(\0132\033.milvus."
  "proto.common.Status\0220\n\005stats\030\002 \003(\0132!.mil"
  "vus.proto.common.KeyValuePair\"\177\n\036GetColl"
  "ectionStatisticsRequest\022*\n\004base\030\001 \001(\0132\034."
  "milvus.proto.common.MsgBase\022\017\n\007db_name\030\002"
  " \001(\t\022\027\n\017collection_name\030\003 \001(\t:\007\312>\004\020\n\030\003\"\200"
  "\001\n\037GetCollectionStatisticsResponse\022+\n\006st"
  "atus\030\001 \001(\0132\033.milvus.proto.common.Status\022"
  "0\n\005stats\030\002 \003(\0132!.milvus.proto.common.Key"
  "ValuePair\"\304\001\n\026ShowCollectionsRequest\022*\n\004"
  "base\030\001 \001(\0132\034.milvus.proto.common.MsgBase"
  "\022\017\n\007db_name\030\002 \001(\t\022\022\n\ntime_stamp\030\003 \001(\004\022+\n"
  "\004type\030\004 \001(\0162\035.milvus.proto.milvus.ShowTy"
  "pe\022\030\n\020collection_names\030\005 \003(\t:\022\312>\017\010\001\020\004\030\377\377"
  "\377\377\377\377\377\377\377\001\"\363\001\n\027ShowCollectionsResponse\022+\n\006"
  "status\030\001 \001(\0132\033.milvus.proto.common.Statu"
  "s\022\030\n\020collection_names\030\002 \003(\t\022\026\n\016collectio"
  "n_ids\030\003 \003(\003\022\032\n\022created_timestamps\030\004 \003(\004\022"
  "\036\n\026created_utc_timestamps\030\005 \003(\004\022\034\n\024inMem"
  "ory_percentages\030\006 \003(\003\022\037\n\027query_service_a"
  "vailable\030\007 \003(\010\"\206\001\n\026CreatePartitionReques"
  "t\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.Ms"
  "gBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_nam"
  "e\030\003 \001(\t\022\026\n\016partition_name\030\004 \001(\t\"\204\001\n\024Drop"
  "PartitionRequest\022*\n\004base\030\001 \001(\0132\034.milvus."
  "proto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n"
  "\017collection_name\030\003 \001(\t\022\026\n\016partition_name"
  "\030\004 \001(\t\"\203\001\n\023HasPartitionRequest\022*\n\004base\030\001"
  " \001(\0132\034.milvus.proto.common.MsgBase\022\017\n\007db"
  "_name\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\026\n\016"
  "partition_name\030\004 \001(\t\"\310\001\n\025LoadPartitionsR"
  "equest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.comm"
  "on.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collectio"
  "n_name\030\003 \001(\t\022\027\n\017partition_names\030\004 \003(\t\022\026\n"
  "\016replica_number\030\005 \001(\005\022\027\n\017resource_groups"
  "\030\006 \003(\t\022\017\n\007refresh\030\007 \001(\010\"\211\001\n\030ReleaseParti"
  "tionsRequest\022*\n\004base\030\001 \001(\0132\034.milvus.prot"
  "o.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017col"
  "lection_name\030\003 \001(\t\022\027\n\017partition_names\030\004 "
  "\003(\t\"\215\001\n\035GetPartitionStatisticsRequest\022*\n"
  "\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBas"
  "e\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_name\030\003 "
  "\001(\t\022\026\n\016partition_name\030\004 \001(\t\"\177\n\036GetPartit"
  "ionStatisticsResponse\022+\n\006status\030\001 \001(\0132\033."
  "milvus.proto.common.Status\0220\n\005stats\030\002 \003("
  "\0132!.milvus.proto.common.KeyValuePair\"\311\001\n"
  "\025ShowPartitionsRequest\022*\n\004base\030\001 \001(\0132\034.m"
  "ilvus.proto.common.MsgBase\022\017\n\007db_name\030\002 "
  "\001(\t\022\027\n\017collection_name\030\003 \001(\t\022\024\n\014collecti"
  "onID\030\004 \001(\003\022\027\n\017partition_names\030\005 \003(\t\022+\n\004t"
  "ype\030\006 \001(\0162\035.milvus.proto.milvus.ShowType"
  "\"\316\001\n\026ShowPartitionsResponse\022+\n\006status\030\001 "
  "\001(\0132\033.milvus.proto.common.Status\022\027\n\017part"
  "ition_names\030\002 \003(\t\022\024\n\014partitionIDs\030\003 \003(\003\022"
  "\032\n\022created_timestamps\030\004 \003(\004\022\036\n\026created_u"
  "tc_timestamps\030\005 \003(\004\022\034\n\024inMemory_percenta"
  "ges\030\006 \003(\003\"m\n\026DescribeSegmentRequest\022*\n\004b"
  "ase\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022"
  "\024\n\014collectionID\030\002 \001(\003\022\021\n\tsegmentID\030\003 \001(\003"
  "\"\217\001\n\027DescribeSegmentResponse\022+\n\006status\030\001"
  " \001(\0132\033.milvus.proto.common.Status\022\017\n\007ind"
  "exID\030\002 \001(\003\022\017\n\007buildID\030\003 \001(\003\022\024\n\014enable_in"
  "dex\030\004 \001(\010\022\017\n\007fieldID\030\005 \001(\003\"l\n\023ShowSegmen"
  "tsRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.c"
  "ommon.MsgBase\022\024\n\014collectionID\030\002 \001(\003\022\023\n\013p"
  "artitionID\030\003 \001(\003\"W\n\024ShowSegmentsResponse"
  "\022+\n\006status\030\001 \001(\0132\033.milvus.proto.common.S"
  "tatus\022\022\n\nsegmentIDs\030\002 \003(\003\"\324\001\n\022CreateInde"
  "xRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.co"
  "mmon.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collect"
  "ion_name\030\003 \001(\t\022\022\n\nfield_name\030\004 \001(\t\0227\n\014ex"
  "tra_params\030\005 \003(\0132!.milvus.proto.common.K"
  "eyValuePair\022\022\n\nindex_name\030\006 \001(\t:\007\312>\004\020\013\030\003"
  "\"\235\001\n\024DescribeIndexRequest\022*\n\004base\030\001 \001(\0132"
  "\034.milvus.proto.common.MsgBase\022\017\n\007db_name"
  "\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\022\n\nfield"
  "_name\030\004 \001(\t\022\022\n\nindex_name\030\005 \001(\t:\007\312>\004\020\014\030\003"
  "\"\225\002\n\020IndexDescription\022\022\n\nindex_name\030\001 \001("
  "\t\022\017\n\007indexID\030\002 \001(\003\0221\n\006params\030\003 \003(\0132!.mil"
  "vus.proto.common.KeyValuePair\022\022\n\nfield_n"
  "ame\030\004 \001(\t\022\024\n\014indexed_rows\030\005 \001(\003\022\022\n\ntotal"
  "_rows\030\006 \001(\003\022.\n\005state\030\007 \001(\0162\037.milvus.prot"
  "o.common.IndexState\022\037\n\027index_state_fail_"
  "reason\030\010 \001(\t\022\032\n\022pending_index_rows\030\t \001(\003"
  "\"\207\001\n\025DescribeIndexResponse\022+\n\006status\030\001 \001"
  "(\0132\033.milvus.proto.common.Status\022A\n\022index"
  "_descriptions\030\002 \003(\0132%.milvus.proto.milvu"
  "s.IndexDescription\"\245\001\n\034GetIndexBuildProg"
  "ressRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto"
  ".common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017coll"
  "ection_name\030\003 \001(\t\022\022\n\nfield_name\030\004 \001(\t\022\022\n"
  "\nindex_name\030\005 \001(\t:\007\312>\004\020\014\030\003\"v\n\035GetIndexBu"
  "ildProgressResponse\022+\n\006status\030\001 \001(\0132\033.mi"
  "lvus.proto.common.Status\022\024\n\014indexed_rows"
  "\030\002 \001(\003\022\022\n\ntotal_rows\030\003 \001(\003\"\235\001\n\024GetIndexS"
  "tateRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto"
  ".common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017coll"
  "ection_name\030\003 \001(\t\022\022\n\nfield_name\030\004 \001(\t\022\022\n"
  "\nindex_name\030\005 \001(\t:\007\312>\004\020\014\030\003\"\211\001\n\025GetIndexS"
  "tateResponse\022+\n\006status\030\001 \001(\0132\033.milvus.pr"
  "oto.common.Status\022.\n\005state\030\002 \001(\0162\037.milvu"
  "s.proto.common.IndexState\022\023\n\013fail_reason"
  "\030\003 \001(\t\"\231\001\n\020DropIndexRequest\022*\n\004base\030\001 \001("
  "\0132\034.milvus.proto.common.MsgBase\022\017\n\007db_na"
  "me\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\022\n\nfie"
  "ld_name\030\004 \001(\t\022\022\n\nindex_name\030\005 \001(\t:\007\312>\004\020\r"
  "\030\003\"\340\001\n\rInsertRequest\022*\n\004base\030\001 \001(\0132\034.mil"
  "vus.proto.common.MsgBase\022\017\n\007db_name\030\002 \001("
  "\t\022\027\n\017collection_name\030\003 \001(\t\022\026\n\016partition_"
  "name\030\004 \001(\t\0223\n\013fields_data\030\005 \003(\0132\036.milvus"
  ".proto.schema.FieldData\022\021\n\thash_keys\030\006 \003"
  "(\r\022\020\n\010num_rows\030\007 \001(\r:\007\312>\004\020\010\030\003\"\340\001\n\rUpsert"
  "Request\022*\n\004base\030\001 \001(\0132\034.milvus.proto.com"
  "mon.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collecti"
  "on_name\030\003 \001(\t\022\026\n\016partition_name\030\004 \001(\t\0223\n"
  "\013fields_data\030\005 \003(\0132\036.milvus.proto.schema"
  ".FieldData\022\021\n\thash_keys\030\006 \003(\r\022\020\n\010num_row"
  "s\030\007 \001(\r:\007\312>\004\020\031\030\003\"\360\001\n\016MutationResult\022+\n\006s"
  "tatus\030\001 \001(\0132\033.milvus.proto.common.Status"
  "\022%\n\003IDs\030\002 \001(\0132\030.milvus.proto.schema.IDs\022"
  "\022\n\nsucc_index\030\003 \003(\r\022\021\n\terr_index\030\004 \003(\r\022\024"
  "\n\014acknowledged\030\005 \001(\010\022\022\n\ninsert_cnt\030\006 \001(\003"
  "\022\022\n\ndelete_cnt\030\007 \001(\003\022\022\n\nupsert_cnt\030\010 \001(\003"
  "\022\021\n\ttimestamp\030\t \001(\004\"\247\001\n\rDeleteRequest\022*\n"
  "\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBas"
  "e\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_name\030\003 "
  "\001(\t\022\026\n\016partition_name\030\004 \001(\t\022\014\n\004expr\030\005 \001("
  "\t\022\021\n\thash_keys\030\006 \003(\r:\007\312>\004\020\t\030\003\"\363\003\n\rSearch"
  "Request\022*\n\004base\030\001 \001(\0132\034.milvus.proto.com"
  "mon.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collecti"
  "on_name\030\003 \001(\t\022\027\n\017partition_names\030\004 \003(\t\022\013"
  "\n\003dsl\030\005 \001(\t\022\031\n\021placeholder_group\030\006 \001(\014\022."
  "\n\010dsl_type\030\007 \001(\0162\034.milvus.proto.common.D"
  "slType\022\025\n\routput_fields\030\010 \003(\t\0228\n\rsearch_"
  "params\030\t \003(\0132!.milvus.proto.common.KeyVa"
  "luePair\022\030\n\020travel_timestamp\030\n \001(\004\022\033\n\023gua"
  "rantee_timestamp\030\013 \001(\004\022\n\n\002nq\030\014 \001(\003\022\033\n\023no"
  "t_return_all_meta\030\r \001(\010\022@\n\021consistency_l"
  "evel\030\016 \001(\0162%.milvus.proto.common.Consist"
  "encyLevel\022\037\n\027use_default_consistency\030\017 \001"
  "(\010:\007\312>\004\020\016\030\003\"5\n\004Hits\022\013\n\003IDs\030\001 \003(\003\022\020\n\010row_"
  "data\030\002 \003(\014\022\016\n\006scores\030\003 \003(\002\"\215\001\n\rSearchRes"
  "ults\022+\n\006status\030\001 \001(\0132\033.milvus.proto.comm"
  "on.Status\0226\n\007results\030\002 \001(\0132%.milvus.prot"
  "o.schema.SearchResultData\022\027\n\017collection_"
  "name\030\003 \001(\t\"n\n\014FlushRequest\022*\n\004base\030\001 \001(\013"
  "2\034.milvus.proto.common.MsgBase\022\017\n\007db_nam"
  "e\030\002 \001(\t\022\030\n\020collection_names\030\003 \003(\t:\007\312>\004\020\017"
  " \003\"\233\004\n\rFlushResponse\022+\n\006status\030\001 \001(\0132\033.m"
  "ilvus.proto.common.Status\022\017\n\007db_name\030\002 \001"
  "(\t\022G\n\013coll_segIDs\030\003 \003(\01322.milvus.proto.m"
  "ilvus.FlushResponse.CollSegIDsEntry\022R\n\021f"
  "lush_coll_segIDs\030\004 \003(\01327.milvus.proto.mi"
  "lvus.FlushResponse.FlushCollSegIDsEntry\022"
  "N\n\017coll_seal_times\030\005 \003(\01325.milvus.proto."
  "milvus.FlushResponse.CollSealTimesEntry\032"
  "Q\n\017CollSegIDsEntry\022\013\n\003key\030\001 \001(\t\022-\n\005value"
  "\030\002 \001(\0132\036.milvus.proto.schema.LongArray:\002"
  "8\001\032V\n\024FlushCollSegIDsEntry\022\013\n\003key\030\001 \001(\t\022"
  "-\n\005value\030\002 \001(\0132\036.milvus.proto.schema.Lon"
  "gArray:\0028\001\0324\n\022CollSealTimesEntry\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\"\233\003\n\014QueryReques"
  "t\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.Ms"
  "gBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_nam"
  "e\030\003 \001(\t\022\014\n\004expr\030\004 \001(\t\022\025\n\routput_fields\030\005"
  " \003(\t\022\027\n\017partition_names\030\006 \003(\t\022\030\n\020travel_"
  "timestamp\030\007 \001(\004\022\033\n\023guarantee_timestamp\030\010"
  " \001(\004\0227\n\014query_params\030\t \003(\0132!.milvus.prot"
  "o.common.KeyValuePair\022\033\n\023not_return_all_"
  "meta\030\n \001(\010\022@\n\021consistency_level\030\013 \001(\0162%."
  "milvus.proto.common.ConsistencyLevel\022\037\n\027"
  "use_default_consistency\030\014 \001(\010:\007\312>\004\020\020\030\003\"\240"
  "\001\n\014QueryResults\022+\n\006status\030\001 \001(\0132\033.milvus"
  ".proto.common.Status\0223\n\013fields_data\030\002 \003("
  "\0132\036.milvus.proto.schema.FieldData\022\027\n\017col"
  "lection_name\030\003 \001(\t\022\025\n\routput_fields\030\004 \003("
  "\t\"}\n\tVectorIDs\022\027\n\017collection_name\030\001 \001(\t\022"
  "\022\n\nfield_name\030\002 \001(\t\022*\n\010id_array\030\003 \001(\0132\030."
  "milvus.proto.schema.IDs\022\027\n\017partition_nam"
  "es\030\004 \003(\t\"\203\001\n\014VectorsArray\0222\n\010id_array\030\001 "
  "\001(\0132\036.milvus.proto.milvus.VectorIDsH\000\0226\n"
  "\ndata_array\030\002 \001(\0132 .milvus.proto.schema."
  "VectorFieldH\000B\007\n\005array\"\335\001\n\023CalcDistanceR"
  "equest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.comm"
  "on.MsgBase\0222\n\007op_left\030\002 \001(\0132!.milvus.pro"
  "to.milvus.VectorsArray\0223\n\010op_right\030\003 \001(\013"
  "2!.milvus.proto.milvus.VectorsArray\0221\n\006p"
  "arams\030\004 \003(\0132!.milvus.proto.common.KeyVal"
  "uePair\"\265\001\n\023CalcDistanceResults\022+\n\006status"
  "\030\001 \001(\0132\033.milvus.proto.common.Status\0221\n\010i"
  "nt_dist\030\002 \001(\0132\035.milvus.proto.schema.IntA"
  "rrayH\000\0225\n\nfloat_dist\030\003 \001(\0132\037.milvus.prot"
  "o.schema.FloatArrayH\000B\007\n\005array\"%\n\017FlushA"
  "llRequest:\022\312>\017\010\001\020&\030\377\377\377\377\377\377\377\377\377\001\"U\n\020FlushAl"
  "lResponse\022+\n\006status\030\001 \001(\0132\033.milvus.proto"
  ".common.Status\022\024\n\014flush_all_ts\030\002 \001(\004\"\231\001\n"
  "\025PersistentSegmentInfo\022\021\n\tsegmentID\030\001 \001("
  "\003\022\024\n\014collectionID\030\002 \001(\003\022\023\n\013partitionID\030\003"
  " \001(\003\022\020\n\010num_rows\030\004 \001(\003\0220\n\005state\030\005 \001(\0162!."
  "milvus.proto.common.SegmentState\"u\n\037GetP"
  "ersistentSegmentInfoRequest\022*\n\004base\030\001 \001("
  "\0132\034.milvus.proto.common.MsgBase\022\016\n\006dbNam"
  "e\030\002 \001(\t\022\026\n\016collectionName\030\003 \001(\t\"\212\001\n GetP"
  "ersistentSegmentInfoResponse\022+\n\006status\030\001"
  " \001(\0132\033.milvus.proto.common.Status\0229\n\005inf"
  "os\030\002 \003(\0132*.milvus.proto.milvus.Persisten"
  "tSegmentInfo\"\354\001\n\020QuerySegmentInfo\022\021\n\tseg"
  "mentID\030\001 \001(\003\022\024\n\014collectionID\030\002 \001(\003\022\023\n\013pa"
  "rtitionID\030\003 \001(\003\022\020\n\010mem_size\030\004 \001(\003\022\020\n\010num"
  "_rows\030\005 \001(\003\022\022\n\nindex_name\030\006 \001(\t\022\017\n\007index"
  "ID\030\007 \001(\003\022\016\n\006nodeID\030\010 \001(\003\0220\n\005state\030\t \001(\0162"
  "!.milvus.proto.common.SegmentState\022\017\n\007no"
  "deIds\030\n \003(\003\"p\n\032GetQuerySegmentInfoReques"
  "t\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.Ms"
  "gBase\022\016\n\006dbName\030\002 \001(\t\022\026\n\016collectionName\030"
  "\003 \001(\t\"\200\001\n\033GetQuerySegmentInfoResponse\022+\n"
  "\006status\030\001 \001(\0132\033.milvus.proto.common.Stat"
  "us\0224\n\005infos\030\002 \003(\0132%.milvus.proto.milvus."
  "QuerySegmentInfo\"$\n\014DummyRequest\022\024\n\014requ"
  "est_type\030\001 \001(\t\"!\n\rDummyResponse\022\020\n\010respo"
  "nse\030\001 \001(\t\"\025\n\023RegisterLinkRequest\"r\n\024Regi"
  "sterLinkResponse\022-\n\007address\030\001 \001(\0132\034.milv"
  "us.proto.common.Address\022+\n\006status\030\002 \001(\0132"
  "\033.milvus.proto.common.Status\"P\n\021GetMetri"
  "csRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.c"
  "ommon.MsgBase\022\017\n\007request\030\002 \001(\t\"k\n\022GetMet"
  "ricsResponse\022+\n\006status\030\001 \001(\0132\033.milvus.pr"
  "oto.common.Status\022\020\n\010response\030\002 \001(\t\022\026\n\016c"
  "omponent_name\030\003 \001(\t\"\230\001\n\rComponentInfo\022\016\n"
  "\006nodeID\030\001 \001(\003\022\014\n\004role\030\002 \001(\t\0222\n\nstate_cod"
  "e\030\003 \001(\0162\036.milvus.proto.common.StateCode\022"
  "5\n\nextra_info\030\004 \003(\0132!.milvus.proto.commo"
  "n.KeyValuePair\"\262\001\n\017ComponentStates\0221\n\005st"
  "ate\030\001 \001(\0132\".milvus.proto.milvus.Componen"
  "tInfo\022\?\n\023subcomponent_states\030\002 \003(\0132\".mil"
  "vus.proto.milvus.ComponentInfo\022+\n\006status"
  "\030\003 \001(\0132\033.milvus.proto.common.Status\"\033\n\031G"
  "etComponentStatesRequest\"\266\001\n\022LoadBalance"
  "Request\022*\n\004base\030\001 \001(\0132\034.milvus.proto.com"
  "mon.MsgBase\022\022\n\nsrc_nodeID\030\002 \001(\003\022\023\n\013dst_n"
  "odeIDs\030\003 \003(\003\022\031\n\021sealed_segmentIDs\030\004 \003(\003\022"
  "\026\n\016collectionName\030\005 \001(\t\022\017\n\007db_name\030\006 \001(\t"
  ":\007\312>\004\020\021\030\005\"L\n\027ManualCompactionRequest\022\024\n\014"
  "collectionID\030\001 \001(\003\022\022\n\ntimetravel\030\002 \001(\004:\007"
  "\312>\004\020\007\030\001\"z\n\030ManualCompactionResponse\022+\n\006s"
  "tatus\030\001 \001(\0132\033.milvus.proto.common.Status"
  "\022\024\n\014compactionID\030\002 \001(\003\022\033\n\023compactionPlan"
  "Count\030\003 \001(\005\"1\n\031GetCompactionStateRequest"
  "\022\024\n\014compactionID\030\001 \001(\003\"\335\001\n\032GetCompaction"
  "StateResponse\022+\n\006status\030\001 \001(\0132\033.milvus.p"
  "roto.common.Status\0223\n\005state\030\002 \001(\0162$.milv"
  "us.proto.common.CompactionState\022\027\n\017execu"
  "tingPlanNo\030\003 \001(\003\022\025\n\rtimeoutPlanNo\030\004 \001(\003\022"
  "\027\n\017completedPlanNo\030\005 \001(\003\022\024\n\014failedPlanNo"
  "\030\006 \001(\003\"1\n\031GetCompactionPlansRequest\022\024\n\014c"
  "ompactionID\030\001 \001(\003\"\274\001\n\032GetCompactionPlans"
  "Response\022+\n\006status\030\001 \001(\0132\033.milvus.proto."
  "common.Status\0223\n\005state\030\002 \001(\0162$.milvus.pr"
  "oto.common.CompactionState\022<\n\nmergeInfos"
  "\030\003 \003(\0132(.milvus.proto.milvus.CompactionM"
  "ergeInfo\"6\n\023CompactionMergeInfo\022\017\n\007sourc"
  "es\030\001 \003(\003\022\016\n\006target\030\002 \001(\003\"*\n\024GetFlushStat"
  "eRequest\022\022\n\nsegmentIDs\030\001 \003(\003\"U\n\025GetFlush"
  "StateResponse\022+\n\006status\030\001 \001(\0132\033.milvus.p"
  "roto.common.Status\022\017\n\007flushed\030\002 \001(\010\"[\n\027G"
  "etFlushAllStateRequest\022*\n\004base\030\001 \001(\0132\034.m"
  "ilvus.proto.common.MsgBase\022\024\n\014flush_all_"
  "ts\030\002 \001(\004\"X\n\030GetFlushAllStateResponse\022+\n\006"
  "status\030\001 \001(\0132\033.milvus.proto.common.Statu"
  "s\022\017\n\007flushed\030\002 \001(\010\"\307\001\n\rImportRequest\022\027\n\017"
  "collection_name\030\001 \001(\t\022\026\n\016partition_name\030"
  "\002 \001(\t\022\025\n\rchannel_names\030\003 \003(\t\022\021\n\trow_base"
  "d\030\004 \001(\010\022\r\n\005files\030\005 \003(\t\0222\n\007options\030\006 \003(\0132"
  "!.milvus.proto.common.KeyValuePair\022\017\n\007db"
  "_name\030\007 \001(\t:\007\312>\004\020\022\030\001\"L\n\016ImportResponse\022+"
  "\n\006status\030\001 \001(\0132\033.milvus.proto.common.Sta"
  "tus\022\r\n\005tasks\030\002 \003(\003\"%\n\025GetImportStateRequ"
  "est\022\014\n\004task\030\001 \001(\003\"\227\002\n\026GetImportStateResp"
  "onse\022+\n\006status\030\001 \001(\0132\033.milvus.proto.comm"
  "on.Status\022/\n\005state\030\002 \001(\0162 .milvus.proto."
  "common.ImportState\022\021\n\trow_count\030\003 \001(\003\022\017\n"
  "\007id_list\030\004 \003(\003\0220\n\005infos\030\005 \003(\0132!.milvus.p"
  "roto.common.KeyValuePair\022\n\n\002id\030\006 \001(\003\022\025\n\r"
  "collection_id\030\007 \001(\003\022\023\n\013segment_ids\030\010 \003(\003"
  "\022\021\n\tcreate_ts\030\t \001(\003\"Q\n\026ListImportTasksRe"
  "quest\022\027\n\017collection_name\030\001 \001(\t\022\r\n\005limit\030"
  "\002 \001(\003\022\017\n\007db_name\030\003 \001(\t\"\202\001\n\027ListImportTas"
  "ksResponse\022+\n\006status\030\001 \001(\0132\033.milvus.prot"
  "o.common.Status\022:\n\005tasks\030\002 \003(\0132+.milvus."
  "proto.milvus.GetImportStateResponse\"\232\001\n\022"
  "GetReplicasRequest\022*\n\004base\030\001 \001(\0132\034.milvu"
  "s.proto.common.MsgBase\022\024\n\014collectionID\030\002"
  " \001(\003\022\030\n\020with_shard_nodes\030\003 \001(\010\022\027\n\017collec"
  "tion_name\030\004 \001(\t\022\017\n\007db_name\030\005 \001(\t\"v\n\023GetR"
  "eplicasResponse\022+\n\006status\030\001 \001(\0132\033.milvus"
  ".proto.common.Status\0222\n\010replicas\030\002 \003(\0132 "
  ".milvus.proto.milvus.ReplicaInfo\"\301\002\n\013Rep"
  "licaInfo\022\021\n\treplicaID\030\001 \001(\003\022\024\n\014collectio"
  "nID\030\002 \001(\003\022\025\n\rpartition_ids\030\003 \003(\003\0229\n\016shar"
  "d_replicas\030\004 \003(\0132!.milvus.proto.milvus.S"
  "hardReplica\022\020\n\010node_ids\030\005 \003(\003\022\033\n\023resourc"
  "e_group_name\030\006 \001(\t\022P\n\021num_outbound_node\030"
  "\007 \003(\01325.milvus.proto.milvus.ReplicaInfo."
  "NumOutboundNodeEntry\0326\n\024NumOutboundNodeE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"`\n\014"
  "ShardReplica\022\020\n\010leaderID\030\001 \001(\003\022\023\n\013leader"
  "_addr\030\002 \001(\t\022\027\n\017dm_channel_name\030\003 \001(\t\022\020\n\010"
  "node_ids\030\004 \003(\003\"\276\001\n\027CreateCredentialReque"
  "st\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.M"
  "sgBase\022\020\n\010username\030\002 \001(\t\022\020\n\010password\030\003 \001"
  "(\t\022\036\n\026created_utc_timestamps\030\004 \001(\004\022\037\n\027mo"
  "dified_utc_timestamps\030\005 \001(\004:\022\312>\017\010\001\020\023\030\377\377\377"
  "\377\377\377\377\377\377\001\"\315\001\n\027UpdateCredentialRequest\022*\n\004b"
  "ase\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022"
  "\020\n\010username\030\002 \001(\t\022\023\n\013oldPassword\030\003 \001(\t\022\023"
  "\n\013newPassword\030\004 \001(\t\022\036\n\026created_utc_times"
  "tamps\030\005 \001(\004\022\037\n\027modified_utc_timestamps\030\006"
  " \001(\004:\t\312>\006\010\002\020\024\030\002\"k\n\027DeleteCredentialReque"
  "st\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.M"
  "sgBase\022\020\n\010username\030\002 \001(\t:\022\312>\017\010\001\020\025\030\377\377\377\377\377\377"
  "\377\377\377\001\"W\n\025ListCredUsersResponse\022+\n\006status\030"
  "\001 \001(\0132\033.milvus.proto.common.Status\022\021\n\tus"
  "ernames\030\002 \003(\t\"V\n\024ListCredUsersRequest\022*\n"
  "\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBas"
  "e:\022\312>\017\010\001\020\026\030\377\377\377\377\377\377\377\377\377\001\"\032\n\nRoleEntity\022\014\n\004n"
  "ame\030\001 \001(\t\"\032\n\nUserEntity\022\014\n\004name\030\001 \001(\t\"\204\001"
  "\n\021CreateRoleRequest\022*\n\004base\030\001 \001(\0132\034.milv"
  "us.proto.common.MsgBase\022/\n\006entity\030\002 \001(\0132"
  "\037.milvus.proto.milvus.RoleEntity:\022\312>\017\010\001\020"
  "\023\030\377\377\377\377\377\377\377\377\377\001\"d\n\017DropRoleRequest\022*\n\004base\030"
  "\001 \001(\0132\034.milvus.proto.common.MsgBase\022\021\n\tr"
  "ole_name\030\002 \001(\t:\022\312>\017\010\001\020\025\030\377\377\377\377\377\377\377\377\377\001\"\265\001\n\026O"
  "perateUserRoleRequest\022*\n\004base\030\001 \001(\0132\034.mi"
  "lvus.proto.common.MsgBase\022\020\n\010username\030\002 "
  "\001(\t\022\021\n\trole_name\030\003 \001(\t\0226\n\004type\030\004 \001(\0162(.m"
  "ilvus.proto.milvus.OperateUserRoleType:\022"
  "\312>\017\010\001\020\027\030\377\377\377\377\377\377\377\377\377\001\"\235\001\n\021SelectRoleRequest"
  "\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.Msg"
  "Base\022-\n\004role\030\002 \001(\0132\037.milvus.proto.milvus"
  ".RoleEntity\022\031\n\021include_user_info\030\003 \001(\010:\022"
  "\312>\017\010\001\020\026\030\377\377\377\377\377\377\377\377\377\001\"k\n\nRoleResult\022-\n\004role"
  "\030\001 \001(\0132\037.milvus.proto.milvus.RoleEntity\022"
  ".\n\005users\030\002 \003(\0132\037.milvus.proto.milvus.Use"
  "rEntity\"s\n\022SelectRoleResponse\022+\n\006status\030"
  "\001 \001(\0132\033.milvus.proto.common.Status\0220\n\007re"
  "sults\030\002 \003(\0132\037.milvus.proto.milvus.RoleRe"
  "sult\"\224\001\n\021SelectUserRequest\022*\n\004base\030\001 \001(\013"
  "2\034.milvus.proto.common.MsgBase\022-\n\004user\030\002"
  " \001(\0132\037.milvus.proto.milvus.UserEntity\022\031\n"
  "\021include_role_info\030\003 \001(\010:\t\312>\006\010\002\020\030\030\002\"k\n\nU"
  "serResult\022-\n\004user\030\001 \001(\0132\037.milvus.proto.m"
  "ilvus.UserEntity\022.\n\005roles\030\002 \003(\0132\037.milvus"
  ".proto.milvus.RoleEntity\"s\n\022SelectUserRe"
  "sponse\022+\n\006status\030\001 \001(\0132\033.milvus.proto.co"
  "mmon.Status\0220\n\007results\030\002 \003(\0132\037.milvus.pr"
  "oto.milvus.UserResult\"\034\n\014ObjectEntity\022\014\n"
  "\004name\030\001 \001(\t\"\037\n\017PrivilegeEntity\022\014\n\004name\030\001"
  " \001(\t\"w\n\rGrantorEntity\022-\n\004user\030\001 \001(\0132\037.mi"
  "lvus.proto.milvus.UserEntity\0227\n\tprivileg"
  "e\030\002 \001(\0132$.milvus.proto.milvus.PrivilegeE"
  "ntity\"L\n\024GrantPrivilegeEntity\0224\n\010entitie"
  "s\030\001 \003(\0132\".milvus.proto.milvus.GrantorEnt"
  "ity\"\312\001\n\013GrantEntity\022-\n\004role\030\001 \001(\0132\037.milv"
  "us.proto.milvus.RoleEntity\0221\n\006object\030\002 \001"
  "(\0132!.milvus.proto.milvus.ObjectEntity\022\023\n"
  "\013object_name\030\003 \001(\t\0223\n\007grantor\030\004 \001(\0132\".mi"
  "lvus.proto.milvus.GrantorEntity\022\017\n\007db_na"
  "me\030\005 \001(\t\"\206\001\n\022SelectGrantRequest\022*\n\004base\030"
  "\001 \001(\0132\034.milvus.proto.common.MsgBase\0220\n\006e"
  "ntity\030\002 \001(\0132 .milvus.proto.milvus.GrantE"
  "ntity:\022\312>\017\010\001\020\026\030\377\377\377\377\377\377\377\377\377\001\"v\n\023SelectGrant"
  "Response\022+\n\006status\030\001 \001(\0132\033.milvus.proto."
  "common.Status\0222\n\010entities\030\002 \003(\0132 .milvus"
  ".proto.milvus.GrantEntity\"\304\001\n\027OperatePri"
  "vilegeRequest\022*\n\004base\030\001 \001(\0132\034.milvus.pro"
  "to.common.MsgBase\0220\n\006entity\030\002 \001(\0132 .milv"
  "us.proto.milvus.GrantEntity\0227\n\004type\030\003 \001("
  "\0162).milvus.proto.milvus.OperatePrivilege"
  "Type:\022\312>\017\010\001\020\027\030\377\377\377\377\377\377\377\377\377\001\"\223\001\n\031GetLoadingP"
  "rogressRequest\022*\n\004base\030\001 \001(\0132\034.milvus.pr"
  "oto.common.MsgBase\022\027\n\017collection_name\030\002 "
  "\001(\t\022\027\n\017partition_names\030\003 \003(\t\022\017\n\007db_name\030"
  "\004 \001(\t:\007\312>\004\020 \030\002\"u\n\032GetLoadingProgressResp"
  "onse\022+\n\006status\030\001 \001(\0132\033.milvus.proto.comm"
  "on.Status\022\020\n\010progress\030\002 \001(\003\022\030\n\020refresh_p"
  "rogress\030\003 \001(\003\"\215\001\n\023GetLoadStateRequest\022*\n"
  "\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBas"
  "e\022\027\n\017collection_name\030\002 \001(\t\022\027\n\017partition_"
  "names\030\003 \003(\t\022\017\n\007db_name\030\004 \001(\t:\007\312>\004\020!\030\002\"r\n"
  "\024GetLoadStateResponse\022+\n\006status\030\001 \001(\0132\033."
  "milvus.proto.common.Status\022-\n\005state\030\002 \001("
  "\0162\036.milvus.proto.common.LoadState\"\034\n\tMil"
  "vusExt\022\017\n\007version\030\001 \001(\t\"\023\n\021GetVersionReq"
  "uest\"R\n\022GetVersionResponse\022+\n\006status\030\001 \001"
  "(\0132\033.milvus.proto.common.Status\022\017\n\007versi"
  "on\030\002 \001(\t\"\024\n\022CheckHealthRequest\"\235\001\n\023Check"
  "HealthResponse\022+\n\006status\030\001 \001(\0132\033.milvus."
  "proto.common.Status\022\021\n\tisHealthy\030\002 \001(\010\022\017"
  "\n\007reasons\030\003 \003(\t\0225\n\014quota_states\030\004 \003(\0162\037."
  "milvus.proto.milvus.QuotaState\"t\n\032Create"
  "ResourceGroupRequest\022*\n\004base\030\001 \001(\0132\034.mil"
  "vus.proto.common.MsgBase\022\026\n\016resource_gro"
  "up\030\002 \001(\t:\022\312>\017\010\001\020\032\030\377\377\377\377\377\377\377\377\377\001\"r\n\030DropReso"
  "urceGroupRequest\022*\n\004base\030\001 \001(\0132\034.milvus."
  "proto.common.MsgBase\022\026\n\016resource_group\030\002"
  " \001(\t:\022\312>\017\010\001\020\033\030\377\377\377\377\377\377\377\377\377\001\"\245\001\n\023TransferNod"
  "eRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.co"
  "mmon.MsgBase\022\035\n\025source_resource_group\030\002 "
  "\001(\t\022\035\n\025target_resource_group\030\003 \001(\t\022\020\n\010nu"
  "m_node\030\004 \001(\005:\022\312>\017\010\001\020\036\030\377\377\377\377\377\377\377\377\377\001\"\325\001\n\026Tra"
  "nsferReplicaRequest\022*\n\004base\030\001 \001(\0132\034.milv"
  "us.proto.common.MsgBase\022\035\n\025source_resour"
  "ce_group\030\002 \001(\t\022\035\n\025target_resource_group\030"
  "\003 \001(\t\022\027\n\017collection_name\030\004 \001(\t\022\023\n\013num_re"
  "plica\030\005 \001(\003\022\017\n\007db_name\030\006 \001(\t:\022\312>\017\010\001\020\037\030\377\377"
  "\377\377\377\377\377\377\377\001\"[\n\031ListResourceGroupsRequest\022*\n"
  "\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBas"
  "e:\022\312>\017\010\001\020\035\030\377\377\377\377\377\377\377\377\377\001\"b\n\032ListResourceGro"
  "upsResponse\022+\n\006status\030\001 \001(\0132\033.milvus.pro"
  "to.common.Status\022\027\n\017resource_groups\030\002 \003("
  "\t\"v\n\034DescribeResourceGroupRequest\022*\n\004bas"
  "e\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022\026\n"
  "\016resource_group\030\002 \001(\t:\022\312>\017\010\001\020\034\030\377\377\377\377\377\377\377\377\377"
  "\001\"\210\001\n\035DescribeResourceGroupResponse\022+\n\006s"
  "tatus\030\001 \001(\0132\033.milvus.proto.common.Status"
  "\022:\n\016resource_group\030\002 \001(\0132\".milvus.proto."
  "milvus.ResourceGroup\"\362\003\n\rResourceGroup\022\014"
  "\n\004name\030\001 \001(\t\022\020\n\010capacity\030\002 \001(\005\022\032\n\022num_av"
  "ailable_node\030\003 \001(\005\022T\n\022num_loaded_replica"
  "\030\004 \003(\01328.milvus.proto.milvus.ResourceGro"
  "up.NumLoadedReplicaEntry\022R\n\021num_outgoing"
  "_node\030\005 \003(\01327.milvus.proto.milvus.Resour"
  "ceGroup.NumOutgoingNodeEntry\022R\n\021num_inco"
  "ming_node\030\006 \003(\01327.milvus.proto.milvus.Re"
  "sourceGroup.NumIncomingNodeEntry\0327\n\025NumL"
  "oadedReplicaEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\005:\0028\001\0326\n\024NumOutgoingNodeEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\0326\n\024NumIncoming"
  "NodeEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028"
  "\001\"\214\001\n\027RenameCollectionRequest\022*\n\004base\030\001 "
  "\001(\0132\034.milvus.proto.common.MsgBase\022\017\n\007db_"
  "name\030\002 \001(\t\022\017\n\007oldName\030\003 \001(\t\022\017\n\007newName\030\004"
  " \001(\t:\022\312>\017\010\001\020\"\030\377\377\377\377\377\377\377\377\377\001\"\216\001\n\031GetIndexSta"
  "tisticsRequest\022*\n\004base\030\001 \001(\0132\034.milvus.pr"
  "oto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017c"
  "ollection_name\030\003 \001(\t\022\022\n\nindex_name\030\004 \001(\t"
  ":\007\312>\004\020\014\030\003\"\214\001\n\032GetIndexStatisticsResponse"
  "\022+\n\006status\030\001 \001(\0132\033.milvus.proto.common.S"
  "tatus\022A\n\022index_descriptions\030\002 \003(\0132%.milv"
  "us.proto.milvus.IndexDescription\"r\n\016Conn"
  "ectRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto."
  "common.MsgBase\0224\n\013client_info\030\002 \001(\0132\037.mi"
  "lvus.proto.common.ClientInfo\"\210\001\n\017Connect"
  "Response\022+\n\006status\030\001 \001(\0132\033.milvus.proto."
  "common.Status\0224\n\013server_info\030\002 \001(\0132\037.mil"
  "vus.proto.common.ServerInfo\022\022\n\nidentifie"
  "r\030\003 \001(\003\"h\n\025CreateDatabaseRequest\022*\n\004base"
  "\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022\017\n\007"
  "db_name\030\002 \001(\t:\022\312>\017\010\001\020#\030\377\377\377\377\377\377\377\377\377\001\"f\n\023Dro"
  "pDatabaseRequest\022*\n\004base\030\001 \001(\0132\034.milvus."
  "proto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t:\022\312"
  ">\017\010\001\020$\030\377\377\377\377\377\377\377\377\377\001\"V\n\024ListDatabasesReques"
  "t\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.Ms"
  "gBase:\022\312>\017\010\001\020%\030\377\377\377\377\377\377\377\377\377\001\"j\n\025ListDatabas"
  "esResponse\022+\n\006status\030\001 \001(\0132\033.milvus.prot"
  "o.common.Status\022\020\n\010db_names\030\002 \003(\t:\022\312>\017\010\001"
  "\020\004\030\377\377\377\377\377\377\377\377\377\001*!\n\010ShowType\022\007\n\003All\020\000\022\014\n\010In"
  "Memory\020\001*@\n\023OperateUserRoleType\022\021\n\rAddUs"
  "erToRole\020\000\022\026\n\022RemoveUserFromRole\020\001*-\n\024Op"
  "eratePrivilegeType\022\t\n\005Grant\020\000\022\n\n\006Revoke\020"
  "\001*]\n\nQuotaState\022\013\n\007Unknown\020\000\022\017\n\013ReadLimi"
  "ted\020\002\022\020\n\014WriteLimited\020\003\022\016\n\nDenyToRead\020\004\022"
  "\017\n\013DenyToWrite\020\0052\350>\n\rMilvusService\022_\n\020Cr"
  "eateCollection\022,.milvus.proto.milvus.Cre"
  "ateCollectionRequest\032\033.milvus.proto.comm"
  "on.Status\"\000\022[\n\016DropCollection\022*.milvus.p"
  "roto.milvus.DropCollectionRequest\032\033.milv"
  "us.proto.common.Status\"\000\022_\n\rHasCollectio"
  "n\022).milvus.proto.milvus.HasCollectionReq"
  "uest\032!.milvus.proto.milvus.BoolResponse\""
  "\000\022[\n\016LoadCollection\022*.milvus.proto.milvu"
  "s.LoadCollectionRequest\032\033.milvus.proto.c"
  "ommon.Status\"\000\022a\n\021ReleaseCollection\022-.mi"
  "lvus.proto.milvus.ReleaseCollectionReque"
  "st\032\033.milvus.proto.common.Status\"\000\022w\n\022Des"
  "cribeCollection\022..milvus.proto.milvus.De"
  "scribeCollectionRequest\032/.milvus.proto.m"
  "ilvus.DescribeCollectionResponse\"\000\022\206\001\n\027G"
  "etCollectionStatistics\0223.milvus.proto.mi"
  "lvus.GetCollectionStatisticsRequest\0324.mi"
  "lvus.proto.milvus.GetCollectionStatistic"
  "sResponse\"\000\022n\n\017ShowCollections\022+.milvus."
  "proto.milvus.ShowCollectionsRequest\032,.mi"
  "lvus.proto.milvus.ShowCollectionsRespons"
  "e\"\000\022]\n\017AlterCollection\022+.milvus.proto.mi"
  "lvus.AlterCollectionRequest\032\033.milvus.pro"
  "to.common.Status\"\000\022]\n\017CreatePartition\022+."
  "milvus.proto.milvus.CreatePartitionReque"
  "st\032\033.milvus.proto.common.Status\"\000\022Y\n\rDro"
  "pPartition\022).milvus.proto.milvus.DropPar"
  "titionRequest\032\033.milvus.proto.common.Stat"
  "us\"\000\022]\n\014HasPartition\022(.milvus.proto.milv"
  "us.HasPartitionRequest\032!.milvus.proto.mi"
  "lvus.BoolResponse\"\000\022[\n\016LoadPartitions\022*."
  "milvus.proto.milvus.LoadPartitionsReques"
  "t\032\033.milvus.proto.common.Status\"\000\022a\n\021Rele"
  "asePartitions\022-.milvus.proto.milvus.Rele"
  "asePartitionsRequest\032\033.milvus.proto.comm"
  "on.Status\"\000\022\203\001\n\026GetPartitionStatistics\0222"
  ".milvus.proto.milvus.GetPartitionStatist"
  "icsRequest\0323.milvus.proto.milvus.GetPart"
  "itionStatisticsResponse\"\000\022k\n\016ShowPartiti"
  "ons\022*.milvus.proto.milvus.ShowPartitions"
  "Request\032+.milvus.proto.milvus.ShowPartit"
  "ionsResponse\"\000\022w\n\022GetLoadingProgress\022..m"
  "ilvus.proto.milvus.GetLoadingProgressReq"
  "uest\032/.milvus.proto.milvus.GetLoadingPro"
  "gressResponse\"\000\022e\n\014GetLoadState\022(.milvus"
  ".proto.milvus.GetLoadStateRequest\032).milv"
  "us.proto.milvus.GetLoadStateResponse\"\000\022U"
  "\n\013CreateAlias\022\'.milvus.proto.milvus.Crea"
  "teAliasRequest\032\033.milvus.proto.common.Sta"
  "tus\"\000\022Q\n\tDropAlias\022%.milvus.proto.milvus"
  ".DropAliasRequest\032\033.milvus.proto.common."
  "Status\"\000\022S\n\nAlterAlias\022&.milvus.proto.mi"
  "lvus.AlterAliasRequest\032\033.milvus.proto.co"
  "mmon.Status\"\000\022h\n\rDescribeAlias\022).milvus."
  "proto.milvus.DescribeAliasRequest\032*.milv"
  "us.proto.milvus.DescribeAliasResponse\"\000\022"
  "b\n\013ListAliases\022\'.milvus.proto.milvus.Lis"
  "tAliasesRequest\032(.milvus.proto.milvus.Li"
  "stAliasesResponse\"\000\022U\n\013CreateIndex\022\'.mil"
  "vus.proto.milvus.CreateIndexRequest\032\033.mi"
  "lvus.proto.common.Status\"\000\022h\n\rDescribeIn"
  "dex\022).milvus.proto.milvus.DescribeIndexR"
  "equest\032*.milvus.proto.milvus.DescribeInd"
  "exResponse\"\000\022w\n\022GetIndexStatistics\022..mil"
  "vus.proto.milvus.GetIndexStatisticsReque"
  "st\032/.milvus.proto.milvus.GetIndexStatist"
  "icsResponse\"\000\022h\n\rGetIndexState\022).milvus."
  "proto.milvus.GetIndexStateRequest\032*.milv"
  "us.proto.milvus.GetIndexStateResponse\"\000\022"
  "\200\001\n\025GetIndexBuildProgress\0221.milvus.proto"
  ".milvus.GetIndexBuildProgressRequest\0322.m"
  "ilvus.proto.milvus.GetIndexBuildProgress"
  "Response\"\000\022Q\n\tDropIndex\022%.milvus.proto.m"
  "ilvus.DropIndexRequest\032\033.milvus.proto.co"
  "mmon.Status\"\000\022S\n\006Insert\022\".milvus.proto.m"
  "ilvus.InsertRequest\032#.milvus.proto.milvu"
  "s.MutationResult\"\000\022S\n\006Delete\022\".milvus.pr"
  "oto.milvus.DeleteRequest\032#.milvus.proto."
  "milvus.MutationResult\"\000\022S\n\006Upsert\022\".milv"
  "us.proto.milvus.UpsertRequest\032#.milvus.p"
  "roto.milvus.MutationResult\"\000\022R\n\006Search\022\""
  ".milvus.proto.milvus.SearchRequest\032\".mil"
  "vus.proto.milvus.SearchResults\"\000\022P\n\005Flus"
  "h\022!.milvus.proto.milvus.FlushRequest\032\".m"
  "ilvus.proto.milvus.FlushResponse\"\000\022O\n\005Qu"
  "ery\022!.milvus.proto.milvus.QueryRequest\032!"
  ".milvus.proto.milvus.QueryResults\"\000\022d\n\014C"
  "alcDistance\022(.milvus.proto.milvus.CalcDi"
  "stanceRequest\032(.milvus.proto.milvus.Calc"
  "DistanceResults\"\000\022Y\n\010FlushAll\022$.milvus.p"
  "roto.milvus.FlushAllRequest\032%.milvus.pro"
  "to.milvus.FlushAllResponse\"\000\022h\n\rGetFlush"
  "State\022).milvus.proto.milvus.GetFlushStat"
  "eRequest\032*.milvus.proto.milvus.GetFlushS"
  "tateResponse\"\000\022q\n\020GetFlushAllState\022,.mil"
  "vus.proto.milvus.GetFlushAllStateRequest"
  "\032-.milvus.proto.milvus.GetFlushAllStateR"
  "esponse\"\000\022\211\001\n\030GetPersistentSegmentInfo\0224"
  ".milvus.proto.milvus.GetPersistentSegmen"
  "tInfoRequest\0325.milvus.proto.milvus.GetPe"
  "rsistentSegmentInfoResponse\"\000\022z\n\023GetQuer"
  "ySegmentInfo\022/.milvus.proto.milvus.GetQu"
  "erySegmentInfoRequest\0320.milvus.proto.mil"
  "vus.GetQuerySegmentInfoResponse\"\000\022b\n\013Get"
  "Replicas\022\'.milvus.proto.milvus.GetReplic"
  "asRequest\032(.milvus.proto.milvus.GetRepli"
  "casResponse\"\000\022P\n\005Dummy\022!.milvus.proto.mi"
  "lvus.DummyRequest\032\".milvus.proto.milvus."
  "DummyResponse\"\000\022e\n\014RegisterLink\022(.milvus"
  ".proto.milvus.RegisterLinkRequest\032).milv"
  "us.proto.milvus.RegisterLinkResponse\"\000\022_"
  "\n\nGetMetrics\022&.milvus.proto.milvus.GetMe"
  "tricsRequest\032\'.milvus.proto.milvus.GetMe"
  "tricsResponse\"\000\022l\n\022GetComponentStates\022.."
  "milvus.proto.milvus.GetComponentStatesRe"
  "quest\032$.milvus.proto.milvus.ComponentSta"
  "tes\"\000\022U\n\013LoadBalance\022\'.milvus.proto.milv"
  "us.LoadBalanceRequest\032\033.milvus.proto.com"
  "mon.Status\"\000\022w\n\022GetCompactionState\022..mil"
  "vus.proto.milvus.GetCompactionStateReque"
  "st\032/.milvus.proto.milvus.GetCompactionSt"
  "ateResponse\"\000\022q\n\020ManualCompaction\022,.milv"
  "us.proto.milvus.ManualCompactionRequest\032"
  "-.milvus.proto.milvus.ManualCompactionRe"
  "sponse\"\000\022\200\001\n\033GetCompactionStateWithPlans"
  "\022..milvus.proto.milvus.GetCompactionPlan"
  "sRequest\032/.milvus.proto.milvus.GetCompac"
  "tionPlansResponse\"\000\022S\n\006Import\022\".milvus.p"
  "roto.milvus.ImportRequest\032#.milvus.proto"
  ".milvus.ImportResponse\"\000\022k\n\016GetImportSta"
  "te\022*.milvus.proto.milvus.GetImportStateR"
  "equest\032+.milvus.proto.milvus.GetImportSt"
  "ateResponse\"\000\022n\n\017ListImportTasks\022+.milvu"
  "s.proto.milvus.ListImportTasksRequest\032,."
  "milvus.proto.milvus.ListImportTasksRespo"
  "nse\"\000\022_\n\020CreateCredential\022,.milvus.proto"
  ".milvus.CreateCredentialRequest\032\033.milvus"
  ".proto.common.Status\"\000\022_\n\020UpdateCredenti"
  "al\022,.milvus.proto.milvus.UpdateCredentia"
  "lRequest\032\033.milvus.proto.common.Status\"\000\022"
  "_\n\020DeleteCredential\022,.milvus.proto.milvu"
  "s.DeleteCredentialRequest\032\033.milvus.proto"
  ".common.Status\"\000\022h\n\rListCredUsers\022).milv"
  "us.proto.milvus.ListCredUsersRequest\032*.m"
  "ilvus.proto.milvus.ListCredUsersResponse"
  "\"\000\022S\n\nCreateRole\022&.milvus.proto.milvus.C"
  "reateRoleRequest\032\033.milvus.proto.common.S"
  "tatus\"\000\022O\n\010DropRole\022$.milvus.proto.milvu"
  "s.DropRoleRequest\032\033.milvus.proto.common."
  "Status\"\000\022]\n\017OperateUserRole\022+.milvus.pro"
  "to.milvus.OperateUserRoleRequest\032\033.milvu"
  "s.proto.common.Status\"\000\022_\n\nSelectRole\022&."
  "milvus.proto.milvus.SelectRoleRequest\032\'."
  "milvus.proto.milvus.SelectRoleResponse\"\000"
  "\022_\n\nSelectUser\022&.milvus.proto.milvus.Sel"
  "ectUserRequest\032\'.milvus.proto.milvus.Sel"
  "ectUserResponse\"\000\022_\n\020OperatePrivilege\022,."
  "milvus.proto.milvus.OperatePrivilegeRequ"
  "est\032\033.milvus.proto.common.Status\"\000\022b\n\013Se"
  "lectGrant\022\'.milvus.proto.milvus.SelectGr"
  "antRequest\032(.milvus.proto.milvus.SelectG"
  "rantResponse\"\000\022_\n\nGetVersion\022&.milvus.pr"
  "oto.milvus.GetVersionRequest\032\'.milvus.pr"
  "oto.milvus.GetVersionResponse\"\000\022b\n\013Check"
  "Health\022\'.milvus.proto.milvus.CheckHealth"
  "Request\032(.milvus.proto.milvus.CheckHealt"
  "hResponse\"\000\022e\n\023CreateResourceGroup\022/.mil"
  "vus.proto.milvus.CreateResourceGroupRequ"
  "est\032\033.milvus.proto.common.Status\"\000\022a\n\021Dr"
  "opResourceGroup\022-.milvus.proto.milvus.Dr"
  "opResourceGroupRequest\032\033.milvus.proto.co"
  "mmon.Status\"\000\022W\n\014TransferNode\022(.milvus.p"
  "roto.milvus.TransferNodeRequest\032\033.milvus"
  ".proto.common.Status\"\000\022]\n\017TransferReplic"
  "a\022+.milvus.proto.milvus.TransferReplicaR"
  "equest\032\033.milvus.proto.common.Status\"\000\022w\n"
  "\022ListResourceGroups\022..milvus.proto.milvu"
  "s.ListResourceGroupsRequest\032/.milvus.pro"
  "to.milvus.ListResourceGroupsResponse\"\000\022\200"
  "\001\n\025DescribeResourceGroup\0221.milvus.proto."
  "milvus.DescribeResourceGroupRequest\0322.mi"
  "lvus.proto.milvus.DescribeResourceGroupR"
  "esponse\"\000\022_\n\020RenameCollection\022,.milvus.p"
  "roto.milvus.RenameCollectionRequest\032\033.mi"
  "lvus.proto.common.Status\"\000\022u\n\022ListIndexe"
  "dSegment\022-.milvus.proto.feder.ListIndexe"
  "dSegmentRequest\032..milvus.proto.feder.Lis"
  "tIndexedSegmentResponse\"\000\022\207\001\n\030DescribeSe"
  "gmentIndexData\0223.milvus.proto.feder.Desc"
  "ribeSegmentIndexDataRequest\0324.milvus.pro"
  "to.feder.DescribeSegmentIndexDataRespons"
  "e\"\000\022V\n\007Connect\022#.milvus.proto.milvus.Con"
  "nectRequest\032$.milvus.proto.milvus.Connec"
  "tResponse\"\000\022[\n\016CreateDatabase\022*.milvus.p"
  "roto.milvus.CreateDatabaseRequest\032\033.milv"
  "us.proto.common.Status\"\000\022W\n\014DropDatabase"
  "\022(.milvus.proto.milvus.DropDatabaseReque"
  "st\032\033.milvus.proto.common.Status\"\000\022h\n\rLis"
  "tDatabases\022).milvus.proto.milvus.ListDat"
  "abasesRequest\032*.milvus.proto.milvus.List"
  "DatabasesResponse\"\0002u\n\014ProxyService\022e\n\014R"
  "egisterLink\022(.milvus.proto.milvus.Regist"
  "erLinkRequest\032).milvus.proto.milvus.Regi"
  "sterLinkResponse\"\000:U\n\016milvus_ext_obj\022\034.g"
  "oogle.protobuf.FileOptions\030\351\007 \001(\0132\036.milv"
  "us.proto.milvus.MilvusExtBi\n\016io.milvus.g"
  "rpcB\013MilvusProtoP\001Z4github.com/milvus-io"
  "/milvus-proto/go-api/v2/milvuspb\240\001\001\252\002\016IO"
  ".Milvus.Grpcb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_milvus_2eproto_deps[4] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_feder_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_schema_2eproto,
};
static ::_pbi::once_flag descriptor_table_milvus_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_milvus_2eproto = {
    false, false, 30340, descriptor_table_protodef_milvus_2eproto,
    "milvus.proto",
    &descriptor_table_milvus_2eproto_once, descriptor_table_milvus_2eproto_deps, 4, 157,
    schemas, file_default_instances, TableStruct_milvus_2eproto::offsets,
    file_level_metadata_milvus_2eproto, file_level_enum_descriptors_milvus_2eproto,
    file_level_service_descriptors_milvus_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_milvus_2eproto_getter() {
  return &descriptor_table_milvus_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_milvus_2eproto(&descriptor_table_milvus_2eproto);
namespace milvus {
namespace proto {
namespace milvus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_milvus_2eproto);
  return file_level_enum_descriptors_milvus_2eproto[0];
}
bool ShowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperateUserRoleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_milvus_2eproto);
  return file_level_enum_descriptors_milvus_2eproto[1];
}
bool OperateUserRoleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperatePrivilegeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_milvus_2eproto);
  return file_level_enum_descriptors_milvus_2eproto[2];
}
bool OperatePrivilegeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuotaState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_milvus_2eproto);
  return file_level_enum_descriptors_milvus_2eproto[3];
}
bool QuotaState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CreateAliasRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateAliasRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateAliasRequest::_Internal::base(const CreateAliasRequest* msg) {
  return *msg->_impl_.base_;
}
void CreateAliasRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
CreateAliasRequest::CreateAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreateAliasRequest)
}
CreateAliasRequest::CreateAliasRequest(const CreateAliasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateAliasRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alias().empty()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateAliasRequest)
}

inline void CreateAliasRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateAliasRequest::~CreateAliasRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateAliasRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateAliasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.alias_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void CreateAliasRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateAliasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateAliasRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAliasRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreateAliasRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreateAliasRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string alias = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreateAliasRequest.alias"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateAliasRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateAliasRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateAliasRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateAliasRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string alias = 4;
  if (!this->_internal_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateAliasRequest.alias");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateAliasRequest)
  return target;
}

size_t CreateAliasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateAliasRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string alias = 4;
  if (!this->_internal_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAliasRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateAliasRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAliasRequest::GetClassData() const { return &_class_data_; }


void CreateAliasRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateAliasRequest*>(&to_msg);
  auto& from = static_cast<const CreateAliasRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateAliasRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAliasRequest::CopyFrom(const CreateAliasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAliasRequest::IsInitialized() const {
  return true;
}

void CreateAliasRequest::InternalSwap(CreateAliasRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alias_, lhs_arena,
      &other->_impl_.alias_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAliasRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[0]);
}

// ===================================================================

class DropAliasRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropAliasRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropAliasRequest::_Internal::base(const DropAliasRequest* msg) {
  return *msg->_impl_.base_;
}
void DropAliasRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DropAliasRequest::DropAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DropAliasRequest)
}
DropAliasRequest::DropAliasRequest(const DropAliasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropAliasRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alias().empty()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropAliasRequest)
}

inline void DropAliasRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DropAliasRequest::~DropAliasRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropAliasRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropAliasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.alias_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DropAliasRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropAliasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropAliasRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropAliasRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DropAliasRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string alias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DropAliasRequest.alias"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropAliasRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropAliasRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropAliasRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string alias = 3;
  if (!this->_internal_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropAliasRequest.alias");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropAliasRequest)
  return target;
}

size_t DropAliasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropAliasRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string alias = 3;
  if (!this->_internal_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropAliasRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropAliasRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropAliasRequest::GetClassData() const { return &_class_data_; }


void DropAliasRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropAliasRequest*>(&to_msg);
  auto& from = static_cast<const DropAliasRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropAliasRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropAliasRequest::CopyFrom(const DropAliasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropAliasRequest::IsInitialized() const {
  return true;
}

void DropAliasRequest::InternalSwap(DropAliasRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alias_, lhs_arena,
      &other->_impl_.alias_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropAliasRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[1]);
}

// ===================================================================

class AlterAliasRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const AlterAliasRequest* msg);
};

const ::milvus::proto::common::MsgBase&
AlterAliasRequest::_Internal::base(const AlterAliasRequest* msg) {
  return *msg->_impl_.base_;
}
void AlterAliasRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
AlterAliasRequest::AlterAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.AlterAliasRequest)
}
AlterAliasRequest::AlterAliasRequest(const AlterAliasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlterAliasRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alias().empty()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.AlterAliasRequest)
}

inline void AlterAliasRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AlterAliasRequest::~AlterAliasRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.AlterAliasRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlterAliasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.alias_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void AlterAliasRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlterAliasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.AlterAliasRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlterAliasRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.AlterAliasRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.AlterAliasRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string alias = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.AlterAliasRequest.alias"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlterAliasRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.AlterAliasRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.AlterAliasRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.AlterAliasRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string alias = 4;
  if (!this->_internal_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.AlterAliasRequest.alias");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.AlterAliasRequest)
  return target;
}

size_t AlterAliasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.AlterAliasRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string alias = 4;
  if (!this->_internal_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlterAliasRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlterAliasRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlterAliasRequest::GetClassData() const { return &_class_data_; }


void AlterAliasRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlterAliasRequest*>(&to_msg);
  auto& from = static_cast<const AlterAliasRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.AlterAliasRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlterAliasRequest::CopyFrom(const AlterAliasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.AlterAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterAliasRequest::IsInitialized() const {
  return true;
}

void AlterAliasRequest::InternalSwap(AlterAliasRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alias_, lhs_arena,
      &other->_impl_.alias_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlterAliasRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[2]);
}

// ===================================================================

class DescribeAliasRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeAliasRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeAliasRequest::_Internal::base(const DescribeAliasRequest* msg) {
  return *msg->_impl_.base_;
}
void DescribeAliasRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DescribeAliasRequest::DescribeAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeAliasRequest)
}
DescribeAliasRequest::DescribeAliasRequest(const DescribeAliasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeAliasRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alias().empty()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeAliasRequest)
}

inline void DescribeAliasRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DescribeAliasRequest::~DescribeAliasRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeAliasRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeAliasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.alias_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DescribeAliasRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeAliasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeAliasRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeAliasRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeAliasRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string alias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeAliasRequest.alias"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DescribeAliasRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeAliasRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeAliasRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string alias = 3;
  if (!this->_internal_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeAliasRequest.alias");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeAliasRequest)
  return target;
}

size_t DescribeAliasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeAliasRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string alias = 3;
  if (!this->_internal_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeAliasRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeAliasRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeAliasRequest::GetClassData() const { return &_class_data_; }


void DescribeAliasRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeAliasRequest*>(&to_msg);
  auto& from = static_cast<const DescribeAliasRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeAliasRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeAliasRequest::CopyFrom(const DescribeAliasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeAliasRequest::IsInitialized() const {
  return true;
}

void DescribeAliasRequest::InternalSwap(DescribeAliasRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alias_, lhs_arena,
      &other->_impl_.alias_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeAliasRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[3]);
}

// ===================================================================

class DescribeAliasResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeAliasResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeAliasResponse::_Internal::status(const DescribeAliasResponse* msg) {
  return *msg->_impl_.status_;
}
void DescribeAliasResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
DescribeAliasResponse::DescribeAliasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeAliasResponse)
}
DescribeAliasResponse::DescribeAliasResponse(const DescribeAliasResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeAliasResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.collection_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alias().empty()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection().empty()) {
    _this->_impl_.collection_.Set(from._internal_collection(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeAliasResponse)
}

inline void DescribeAliasResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.collection_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DescribeAliasResponse::~DescribeAliasResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeAliasResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeAliasResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.alias_.Destroy();
  _impl_.collection_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DescribeAliasResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeAliasResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeAliasResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  _impl_.collection_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeAliasResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeAliasResponse.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string alias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeAliasResponse.alias"));
        } else
          goto handle_unusual;
        continue;
      // string collection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_collection();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeAliasResponse.collection"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DescribeAliasResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeAliasResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeAliasResponse.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string alias = 3;
  if (!this->_internal_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeAliasResponse.alias");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alias(), target);
  }

  // string collection = 4;
  if (!this->_internal_collection().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeAliasResponse.collection");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_collection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeAliasResponse)
  return target;
}

size_t DescribeAliasResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeAliasResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string alias = 3;
  if (!this->_internal_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // string collection = 4;
  if (!this->_internal_collection().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeAliasResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeAliasResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeAliasResponse::GetClassData() const { return &_class_data_; }


void DescribeAliasResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeAliasResponse*>(&to_msg);
  auto& from = static_cast<const DescribeAliasResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeAliasResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (!from._internal_collection().empty()) {
    _this->_internal_set_collection(from._internal_collection());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeAliasResponse::CopyFrom(const DescribeAliasResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeAliasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeAliasResponse::IsInitialized() const {
  return true;
}

void DescribeAliasResponse::InternalSwap(DescribeAliasResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alias_, lhs_arena,
      &other->_impl_.alias_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_, lhs_arena,
      &other->_impl_.collection_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeAliasResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[4]);
}

// ===================================================================

class ListAliasesRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ListAliasesRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ListAliasesRequest::_Internal::base(const ListAliasesRequest* msg) {
  return *msg->_impl_.base_;
}
void ListAliasesRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ListAliasesRequest::ListAliasesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListAliasesRequest)
}
ListAliasesRequest::ListAliasesRequest(const ListAliasesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListAliasesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListAliasesRequest)
}

inline void ListAliasesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListAliasesRequest::~ListAliasesRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListAliasesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListAliasesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ListAliasesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListAliasesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListAliasesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAliasesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ListAliasesRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ListAliasesRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAliasesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListAliasesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListAliasesRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListAliasesRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListAliasesRequest)
  return target;
}

size_t ListAliasesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListAliasesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAliasesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListAliasesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAliasesRequest::GetClassData() const { return &_class_data_; }


void ListAliasesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListAliasesRequest*>(&to_msg);
  auto& from = static_cast<const ListAliasesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListAliasesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAliasesRequest::CopyFrom(const ListAliasesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListAliasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAliasesRequest::IsInitialized() const {
  return true;
}

void ListAliasesRequest::InternalSwap(ListAliasesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAliasesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[5]);
}

// ===================================================================

class ListAliasesResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ListAliasesResponse* msg);
};

const ::milvus::proto::common::Status&
ListAliasesResponse::_Internal::status(const ListAliasesResponse* msg) {
  return *msg->_impl_.status_;
}
void ListAliasesResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ListAliasesResponse::ListAliasesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListAliasesResponse)
}
ListAliasesResponse::ListAliasesResponse(const ListAliasesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListAliasesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aliases_){from._impl_.aliases_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListAliasesResponse)
}

inline void ListAliasesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aliases_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListAliasesResponse::~ListAliasesResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListAliasesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListAliasesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.aliases_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ListAliasesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListAliasesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListAliasesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aliases_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAliasesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ListAliasesResponse.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ListAliasesResponse.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string aliases = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aliases();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ListAliasesResponse.aliases"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAliasesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListAliasesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListAliasesResponse.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListAliasesResponse.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // repeated string aliases = 4;
  for (int i = 0, n = this->_internal_aliases_size(); i < n; i++) {
    const auto& s = this->_internal_aliases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListAliasesResponse.aliases");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListAliasesResponse)
  return target;
}

size_t ListAliasesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListAliasesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aliases = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.aliases_.size());
  for (int i = 0, n = _impl_.aliases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.aliases_.Get(i));
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAliasesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListAliasesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAliasesResponse::GetClassData() const { return &_class_data_; }


void ListAliasesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListAliasesResponse*>(&to_msg);
  auto& from = static_cast<const ListAliasesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListAliasesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.aliases_.MergeFrom(from._impl_.aliases_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAliasesResponse::CopyFrom(const ListAliasesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListAliasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAliasesResponse::IsInitialized() const {
  return true;
}

void ListAliasesResponse::InternalSwap(ListAliasesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.aliases_.InternalSwap(&other->_impl_.aliases_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAliasesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[6]);
}

// ===================================================================

class CreateCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateCollectionRequest::_Internal::base(const CreateCollectionRequest* msg) {
  return *msg->_impl_.base_;
}
void CreateCollectionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void CreateCollectionRequest::clear_properties() {
  _impl_.properties_.Clear();
}
CreateCollectionRequest::CreateCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreateCollectionRequest)
}
CreateCollectionRequest::CreateCollectionRequest(const CreateCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateCollectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.properties_){from._impl_.properties_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.schema_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.shards_num_){}
    , decltype(_impl_.consistency_level_){}
    , decltype(_impl_.num_partitions_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema().empty()) {
    _this->_impl_.schema_.Set(from._internal_schema(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.shards_num_, &from._impl_.shards_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_partitions_) -
    reinterpret_cast<char*>(&_impl_.shards_num_)) + sizeof(_impl_.num_partitions_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateCollectionRequest)
}

inline void CreateCollectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.properties_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.schema_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.shards_num_){0}
    , decltype(_impl_.consistency_level_){0}
    , decltype(_impl_.num_partitions_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateCollectionRequest::~CreateCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateCollectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.schema_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void CreateCollectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateCollectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.schema_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.shards_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_partitions_) -
      reinterpret_cast<char*>(&_impl_.shards_num_)) + sizeof(_impl_.num_partitions_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCollectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreateCollectionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreateCollectionRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // bytes schema = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_schema();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 shards_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.shards_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.ConsistencyLevel consistency_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_consistency_level(static_cast<::milvus::proto::common::ConsistencyLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair properties = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 num_partitions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.num_partitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateCollectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateCollectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateCollectionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // bytes schema = 4;
  if (!this->_internal_schema().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_schema(), target);
  }

  // int32 shards_num = 5;
  if (this->_internal_shards_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_shards_num(), target);
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 6;
  if (this->_internal_consistency_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_consistency_level(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair properties = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_properties_size()); i < n; i++) {
    const auto& repfield = this->_internal_properties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 num_partitions = 8;
  if (this->_internal_num_partitions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_num_partitions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateCollectionRequest)
  return target;
}

size_t CreateCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateCollectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair properties = 7;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->_impl_.properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // bytes schema = 4;
  if (!this->_internal_schema().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_schema());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int32 shards_num = 5;
  if (this->_internal_shards_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shards_num());
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 6;
  if (this->_internal_consistency_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_consistency_level());
  }

  // int64 num_partitions = 8;
  if (this->_internal_num_partitions() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_partitions());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateCollectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateCollectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateCollectionRequest::GetClassData() const { return &_class_data_; }


void CreateCollectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateCollectionRequest*>(&to_msg);
  auto& from = static_cast<const CreateCollectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateCollectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_schema().empty()) {
    _this->_internal_set_schema(from._internal_schema());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_shards_num() != 0) {
    _this->_internal_set_shards_num(from._internal_shards_num());
  }
  if (from._internal_consistency_level() != 0) {
    _this->_internal_set_consistency_level(from._internal_consistency_level());
  }
  if (from._internal_num_partitions() != 0) {
    _this->_internal_set_num_partitions(from._internal_num_partitions());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateCollectionRequest::CopyFrom(const CreateCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCollectionRequest::IsInitialized() const {
  return true;
}

void CreateCollectionRequest::InternalSwap(CreateCollectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_, lhs_arena,
      &other->_impl_.schema_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateCollectionRequest, _impl_.num_partitions_)
      + sizeof(CreateCollectionRequest::_impl_.num_partitions_)
      - PROTOBUF_FIELD_OFFSET(CreateCollectionRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCollectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[7]);
}

// ===================================================================

class DropCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropCollectionRequest::_Internal::base(const DropCollectionRequest* msg) {
  return *msg->_impl_.base_;
}
void DropCollectionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DropCollectionRequest::DropCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DropCollectionRequest)
}
DropCollectionRequest::DropCollectionRequest(const DropCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropCollectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropCollectionRequest)
}

inline void DropCollectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DropCollectionRequest::~DropCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropCollectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DropCollectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropCollectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropCollectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DropCollectionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DropCollectionRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropCollectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropCollectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropCollectionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropCollectionRequest)
  return target;
}

size_t DropCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropCollectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropCollectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropCollectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropCollectionRequest::GetClassData() const { return &_class_data_; }


void DropCollectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropCollectionRequest*>(&to_msg);
  auto& from = static_cast<const DropCollectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropCollectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropCollectionRequest::CopyFrom(const DropCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropCollectionRequest::IsInitialized() const {
  return true;
}

void DropCollectionRequest::InternalSwap(DropCollectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropCollectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[8]);
}

// ===================================================================

class AlterCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const AlterCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
AlterCollectionRequest::_Internal::base(const AlterCollectionRequest* msg) {
  return *msg->_impl_.base_;
}
void AlterCollectionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void AlterCollectionRequest::clear_properties() {
  _impl_.properties_.Clear();
}
AlterCollectionRequest::AlterCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.AlterCollectionRequest)
}
AlterCollectionRequest::AlterCollectionRequest(const AlterCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlterCollectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.properties_){from._impl_.properties_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.collectionid_ = from._impl_.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.AlterCollectionRequest)
}

inline void AlterCollectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.properties_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AlterCollectionRequest::~AlterCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.AlterCollectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlterCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void AlterCollectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlterCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.AlterCollectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.collectionid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlterCollectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.AlterCollectionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.AlterCollectionRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlterCollectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.AlterCollectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.AlterCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.AlterCollectionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // int64 collectionID = 4;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_collectionid(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair properties = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_properties_size()); i < n; i++) {
    const auto& repfield = this->_internal_properties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.AlterCollectionRequest)
  return target;
}

size_t AlterCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.AlterCollectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair properties = 5;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->_impl_.properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 collectionID = 4;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlterCollectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlterCollectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlterCollectionRequest::GetClassData() const { return &_class_data_; }


void AlterCollectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlterCollectionRequest*>(&to_msg);
  auto& from = static_cast<const AlterCollectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.AlterCollectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlterCollectionRequest::CopyFrom(const AlterCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.AlterCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterCollectionRequest::IsInitialized() const {
  return true;
}

void AlterCollectionRequest::InternalSwap(AlterCollectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlterCollectionRequest, _impl_.collectionid_)
      + sizeof(AlterCollectionRequest::_impl_.collectionid_)
      - PROTOBUF_FIELD_OFFSET(AlterCollectionRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlterCollectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[9]);
}

// ===================================================================

class HasCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const HasCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
HasCollectionRequest::_Internal::base(const HasCollectionRequest* msg) {
  return *msg->_impl_.base_;
}
void HasCollectionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
HasCollectionRequest::HasCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.HasCollectionRequest)
}
HasCollectionRequest::HasCollectionRequest(const HasCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HasCollectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.time_stamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.time_stamp_ = from._impl_.time_stamp_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.HasCollectionRequest)
}

inline void HasCollectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.time_stamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HasCollectionRequest::~HasCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.HasCollectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HasCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void HasCollectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HasCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.HasCollectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.time_stamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HasCollectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.HasCollectionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.HasCollectionRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 time_stamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HasCollectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.HasCollectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasCollectionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // uint64 time_stamp = 4;
  if (this->_internal_time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_time_stamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.HasCollectionRequest)
  return target;
}

size_t HasCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.HasCollectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // uint64 time_stamp = 4;
  if (this->_internal_time_stamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time_stamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HasCollectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HasCollectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HasCollectionRequest::GetClassData() const { return &_class_data_; }


void HasCollectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HasCollectionRequest*>(&to_msg);
  auto& from = static_cast<const HasCollectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.HasCollectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_time_stamp() != 0) {
    _this->_internal_set_time_stamp(from._internal_time_stamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HasCollectionRequest::CopyFrom(const HasCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.HasCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasCollectionRequest::IsInitialized() const {
  return true;
}

void HasCollectionRequest::InternalSwap(HasCollectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HasCollectionRequest, _impl_.time_stamp_)
      + sizeof(HasCollectionRequest::_impl_.time_stamp_)
      - PROTOBUF_FIELD_OFFSET(HasCollectionRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HasCollectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[10]);
}

// ===================================================================

class BoolResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const BoolResponse* msg);
};

const ::milvus::proto::common::Status&
BoolResponse::_Internal::status(const BoolResponse* msg) {
  return *msg->_impl_.status_;
}
void BoolResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
BoolResponse::BoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.BoolResponse)
}
BoolResponse::BoolResponse(const BoolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoolResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.BoolResponse)
}

inline void BoolResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoolResponse::~BoolResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.BoolResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoolResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void BoolResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.BoolResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoolResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoolResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.BoolResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // bool value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.BoolResponse)
  return target;
}

size_t BoolResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.BoolResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // bool value = 2;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoolResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoolResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoolResponse::GetClassData() const { return &_class_data_; }


void BoolResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoolResponse*>(&to_msg);
  auto& from = static_cast<const BoolResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.BoolResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoolResponse::CopyFrom(const BoolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.BoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolResponse::IsInitialized() const {
  return true;
}

void BoolResponse::InternalSwap(BoolResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoolResponse, _impl_.value_)
      + sizeof(BoolResponse::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(BoolResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[11]);
}

// ===================================================================

class StringResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const StringResponse* msg);
};

const ::milvus::proto::common::Status&
StringResponse::_Internal::status(const StringResponse* msg) {
  return *msg->_impl_.status_;
}
void StringResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
StringResponse::StringResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.StringResponse)
}
StringResponse::StringResponse(const StringResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.StringResponse)
}

inline void StringResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringResponse::~StringResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.StringResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void StringResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.StringResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.StringResponse.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.StringResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.StringResponse.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.StringResponse)
  return target;
}

size_t StringResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.StringResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringResponse::GetClassData() const { return &_class_data_; }


void StringResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringResponse*>(&to_msg);
  auto& from = static_cast<const StringResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.StringResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringResponse::CopyFrom(const StringResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.StringResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringResponse::IsInitialized() const {
  return true;
}

void StringResponse::InternalSwap(StringResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[12]);
}

// ===================================================================

class DescribeCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeCollectionRequest::_Internal::base(const DescribeCollectionRequest* msg) {
  return *msg->_impl_.base_;
}
void DescribeCollectionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DescribeCollectionRequest::DescribeCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeCollectionRequest)
}
DescribeCollectionRequest::DescribeCollectionRequest(const DescribeCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeCollectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.time_stamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_stamp_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.time_stamp_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeCollectionRequest)
}

inline void DescribeCollectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.time_stamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DescribeCollectionRequest::~DescribeCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeCollectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DescribeCollectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeCollectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_stamp_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.time_stamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeCollectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeCollectionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeCollectionRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 time_stamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DescribeCollectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeCollectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // int64 collectionID = 4;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_collectionid(), target);
  }

  // uint64 time_stamp = 5;
  if (this->_internal_time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_time_stamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeCollectionRequest)
  return target;
}

size_t DescribeCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeCollectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 collectionID = 4;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // uint64 time_stamp = 5;
  if (this->_internal_time_stamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time_stamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeCollectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeCollectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeCollectionRequest::GetClassData() const { return &_class_data_; }


void DescribeCollectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeCollectionRequest*>(&to_msg);
  auto& from = static_cast<const DescribeCollectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeCollectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_time_stamp() != 0) {
    _this->_internal_set_time_stamp(from._internal_time_stamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeCollectionRequest::CopyFrom(const DescribeCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeCollectionRequest::IsInitialized() const {
  return true;
}

void DescribeCollectionRequest::InternalSwap(DescribeCollectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DescribeCollectionRequest, _impl_.time_stamp_)
      + sizeof(DescribeCollectionRequest::_impl_.time_stamp_)
      - PROTOBUF_FIELD_OFFSET(DescribeCollectionRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeCollectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[13]);
}

// ===================================================================

class DescribeCollectionResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeCollectionResponse* msg);
  static const ::milvus::proto::schema::CollectionSchema& schema(const DescribeCollectionResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeCollectionResponse::_Internal::status(const DescribeCollectionResponse* msg) {
  return *msg->_impl_.status_;
}
const ::milvus::proto::schema::CollectionSchema&
DescribeCollectionResponse::_Internal::schema(const DescribeCollectionResponse* msg) {
  return *msg->_impl_.schema_;
}
void DescribeCollectionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void DescribeCollectionResponse::clear_schema() {
  if (GetArenaForAllocation() == nullptr && _impl_.schema_ != nullptr) {
    delete _impl_.schema_;
  }
  _impl_.schema_ = nullptr;
}
void DescribeCollectionResponse::clear_start_positions() {
  _impl_.start_positions_.Clear();
}
void DescribeCollectionResponse::clear_properties() {
  _impl_.properties_.Clear();
}
DescribeCollectionResponse::DescribeCollectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeCollectionResponse)
}
DescribeCollectionResponse::DescribeCollectionResponse(const DescribeCollectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeCollectionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.virtual_channel_names_){from._impl_.virtual_channel_names_}
    , decltype(_impl_.physical_channel_names_){from._impl_.physical_channel_names_}
    , decltype(_impl_.aliases_){from._impl_.aliases_}
    , decltype(_impl_.start_positions_){from._impl_.start_positions_}
    , decltype(_impl_.properties_){from._impl_.properties_}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.schema_){nullptr}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.created_timestamp_){}
    , decltype(_impl_.created_utc_timestamp_){}
    , decltype(_impl_.shards_num_){}
    , decltype(_impl_.consistency_level_){}
    , decltype(_impl_.num_partitions_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_schema()) {
    _this->_impl_.schema_ = new ::milvus::proto::schema::CollectionSchema(*from._impl_.schema_);
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_partitions_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.num_partitions_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeCollectionResponse)
}

inline void DescribeCollectionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.virtual_channel_names_){arena}
    , decltype(_impl_.physical_channel_names_){arena}
    , decltype(_impl_.aliases_){arena}
    , decltype(_impl_.start_positions_){arena}
    , decltype(_impl_.properties_){arena}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.schema_){nullptr}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.created_timestamp_){uint64_t{0u}}
    , decltype(_impl_.created_utc_timestamp_){uint64_t{0u}}
    , decltype(_impl_.shards_num_){0}
    , decltype(_impl_.consistency_level_){0}
    , decltype(_impl_.num_partitions_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DescribeCollectionResponse::~DescribeCollectionResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeCollectionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeCollectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.virtual_channel_names_.~RepeatedPtrField();
  _impl_.physical_channel_names_.~RepeatedPtrField();
  _impl_.aliases_.~RepeatedPtrField();
  _impl_.start_positions_.~RepeatedPtrField();
  _impl_.properties_.~RepeatedPtrField();
  _impl_.collection_name_.Destroy();
  _impl_.db_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.schema_;
}

void DescribeCollectionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeCollectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeCollectionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.virtual_channel_names_.Clear();
  _impl_.physical_channel_names_.Clear();
  _impl_.aliases_.Clear();
  _impl_.start_positions_.Clear();
  _impl_.properties_.Clear();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.db_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.schema_ != nullptr) {
    delete _impl_.schema_;
  }
  _impl_.schema_ = nullptr;
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_partitions_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.num_partitions_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeCollectionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.schema.CollectionSchema schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string virtual_channel_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_virtual_channel_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string physical_channel_names = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_physical_channel_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 created_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.created_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 created_utc_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.created_utc_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 shards_num = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.shards_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string aliases = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aliases();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeCollectionResponse.aliases"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyDataPair start_positions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_start_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_consistency_level(static_cast<::milvus::proto::common::ConsistencyLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeCollectionResponse.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair properties = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string db_name = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeCollectionResponse.db_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 num_partitions = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.num_partitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DescribeCollectionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeCollectionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.schema.CollectionSchema schema = 2;
  if (this->_internal_has_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::schema(this),
        _Internal::schema(this).GetCachedSize(), target, stream);
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_collectionid(), target);
  }

  // repeated string virtual_channel_names = 4;
  for (int i = 0, n = this->_internal_virtual_channel_names_size(); i < n; i++) {
    const auto& s = this->_internal_virtual_channel_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names");
    target = stream->WriteString(4, s, target);
  }

  // repeated string physical_channel_names = 5;
  for (int i = 0, n = this->_internal_physical_channel_names_size(); i < n; i++) {
    const auto& s = this->_internal_physical_channel_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names");
    target = stream->WriteString(5, s, target);
  }

  // uint64 created_timestamp = 6;
  if (this->_internal_created_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_created_timestamp(), target);
  }

  // uint64 created_utc_timestamp = 7;
  if (this->_internal_created_utc_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_created_utc_timestamp(), target);
  }

  // int32 shards_num = 8;
  if (this->_internal_shards_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_shards_num(), target);
  }

  // repeated string aliases = 9;
  for (int i = 0, n = this->_internal_aliases_size(); i < n; i++) {
    const auto& s = this->_internal_aliases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionResponse.aliases");
    target = stream->WriteString(9, s, target);
  }

  // repeated .milvus.proto.common.KeyDataPair start_positions = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_start_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_start_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
  if (this->_internal_consistency_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_consistency_level(), target);
  }

  // string collection_name = 12;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionResponse.collection_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_collection_name(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair properties = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_properties_size()); i < n; i++) {
    const auto& repfield = this->_internal_properties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string db_name = 14;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionResponse.db_name");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_db_name(), target);
  }

  // int64 num_partitions = 15;
  if (this->_internal_num_partitions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_num_partitions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeCollectionResponse)
  return target;
}

size_t DescribeCollectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeCollectionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string virtual_channel_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.virtual_channel_names_.size());
  for (int i = 0, n = _impl_.virtual_channel_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.virtual_channel_names_.Get(i));
  }

  // repeated string physical_channel_names = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.physical_channel_names_.size());
  for (int i = 0, n = _impl_.physical_channel_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.physical_channel_names_.Get(i));
  }

  // repeated string aliases = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.aliases_.size());
  for (int i = 0, n = _impl_.aliases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.aliases_.Get(i));
  }

  // repeated .milvus.proto.common.KeyDataPair start_positions = 10;
  total_size += 1UL * this->_internal_start_positions_size();
  for (const auto& msg : this->_impl_.start_positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.common.KeyValuePair properties = 13;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->_impl_.properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string collection_name = 12;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string db_name = 14;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .milvus.proto.schema.CollectionSchema schema = 2;
  if (this->_internal_has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schema_);
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // uint64 created_timestamp = 6;
  if (this->_internal_created_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_created_timestamp());
  }

  // uint64 created_utc_timestamp = 7;
  if (this->_internal_created_utc_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_created_utc_timestamp());
  }

  // int32 shards_num = 8;
  if (this->_internal_shards_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shards_num());
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
  if (this->_internal_consistency_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_consistency_level());
  }

  // int64 num_partitions = 15;
  if (this->_internal_num_partitions() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_partitions());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeCollectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeCollectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeCollectionResponse::GetClassData() const { return &_class_data_; }


void DescribeCollectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeCollectionResponse*>(&to_msg);
  auto& from = static_cast<const DescribeCollectionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeCollectionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.virtual_channel_names_.MergeFrom(from._impl_.virtual_channel_names_);
  _this->_impl_.physical_channel_names_.MergeFrom(from._impl_.physical_channel_names_);
  _this->_impl_.aliases_.MergeFrom(from._impl_.aliases_);
  _this->_impl_.start_positions_.MergeFrom(from._impl_.start_positions_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_schema()) {
    _this->_internal_mutable_schema()->::milvus::proto::schema::CollectionSchema::MergeFrom(
        from._internal_schema());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_created_timestamp() != 0) {
    _this->_internal_set_created_timestamp(from._internal_created_timestamp());
  }
  if (from._internal_created_utc_timestamp() != 0) {
    _this->_internal_set_created_utc_timestamp(from._internal_created_utc_timestamp());
  }
  if (from._internal_shards_num() != 0) {
    _this->_internal_set_shards_num(from._internal_shards_num());
  }
  if (from._internal_consistency_level() != 0) {
    _this->_internal_set_consistency_level(from._internal_consistency_level());
  }
  if (from._internal_num_partitions() != 0) {
    _this->_internal_set_num_partitions(from._internal_num_partitions());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeCollectionResponse::CopyFrom(const DescribeCollectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeCollectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeCollectionResponse::IsInitialized() const {
  return true;
}

void DescribeCollectionResponse::InternalSwap(DescribeCollectionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.virtual_channel_names_.InternalSwap(&other->_impl_.virtual_channel_names_);
  _impl_.physical_channel_names_.InternalSwap(&other->_impl_.physical_channel_names_);
  _impl_.aliases_.InternalSwap(&other->_impl_.aliases_);
  _impl_.start_positions_.InternalSwap(&other->_impl_.start_positions_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DescribeCollectionResponse, _impl_.num_partitions_)
      + sizeof(DescribeCollectionResponse::_impl_.num_partitions_)
      - PROTOBUF_FIELD_OFFSET(DescribeCollectionResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeCollectionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[14]);
}

// ===================================================================

class LoadCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const LoadCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
LoadCollectionRequest::_Internal::base(const LoadCollectionRequest* msg) {
  return *msg->_impl_.base_;
}
void LoadCollectionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
LoadCollectionRequest::LoadCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.LoadCollectionRequest)
}
LoadCollectionRequest::LoadCollectionRequest(const LoadCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoadCollectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_groups_){from._impl_.resource_groups_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.replica_number_){}
    , decltype(_impl_.refresh_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.replica_number_, &from._impl_.replica_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.refresh_) -
    reinterpret_cast<char*>(&_impl_.replica_number_)) + sizeof(_impl_.refresh_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.LoadCollectionRequest)
}

inline void LoadCollectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_groups_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.replica_number_){0}
    , decltype(_impl_.refresh_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoadCollectionRequest::~LoadCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.LoadCollectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_groups_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void LoadCollectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoadCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.LoadCollectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_groups_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.replica_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.refresh_) -
      reinterpret_cast<char*>(&_impl_.replica_number_)) + sizeof(_impl_.refresh_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadCollectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.LoadCollectionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.LoadCollectionRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 replica_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.replica_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string resource_groups = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_resource_groups();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.LoadCollectionRequest.resource_groups"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool refresh = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadCollectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.LoadCollectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadCollectionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // int32 replica_number = 4;
  if (this->_internal_replica_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_replica_number(), target);
  }

  // repeated string resource_groups = 5;
  for (int i = 0, n = this->_internal_resource_groups_size(); i < n; i++) {
    const auto& s = this->_internal_resource_groups(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadCollectionRequest.resource_groups");
    target = stream->WriteString(5, s, target);
  }

  // bool refresh = 6;
  if (this->_internal_refresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_refresh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.LoadCollectionRequest)
  return target;
}

size_t LoadCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.LoadCollectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string resource_groups = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.resource_groups_.size());
  for (int i = 0, n = _impl_.resource_groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.resource_groups_.Get(i));
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int32 replica_number = 4;
  if (this->_internal_replica_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_replica_number());
  }

  // bool refresh = 6;
  if (this->_internal_refresh() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadCollectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoadCollectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadCollectionRequest::GetClassData() const { return &_class_data_; }


void LoadCollectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoadCollectionRequest*>(&to_msg);
  auto& from = static_cast<const LoadCollectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.LoadCollectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.resource_groups_.MergeFrom(from._impl_.resource_groups_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_replica_number() != 0) {
    _this->_internal_set_replica_number(from._internal_replica_number());
  }
  if (from._internal_refresh() != 0) {
    _this->_internal_set_refresh(from._internal_refresh());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadCollectionRequest::CopyFrom(const LoadCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.LoadCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadCollectionRequest::IsInitialized() const {
  return true;
}

void LoadCollectionRequest::InternalSwap(LoadCollectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.resource_groups_.InternalSwap(&other->_impl_.resource_groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadCollectionRequest, _impl_.refresh_)
      + sizeof(LoadCollectionRequest::_impl_.refresh_)
      - PROTOBUF_FIELD_OFFSET(LoadCollectionRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadCollectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[15]);
}

// ===================================================================

class ReleaseCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ReleaseCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ReleaseCollectionRequest::_Internal::base(const ReleaseCollectionRequest* msg) {
  return *msg->_impl_.base_;
}
void ReleaseCollectionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ReleaseCollectionRequest::ReleaseCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ReleaseCollectionRequest)
}
ReleaseCollectionRequest::ReleaseCollectionRequest(const ReleaseCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReleaseCollectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ReleaseCollectionRequest)
}

inline void ReleaseCollectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReleaseCollectionRequest::~ReleaseCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ReleaseCollectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReleaseCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ReleaseCollectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReleaseCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ReleaseCollectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseCollectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ReleaseCollectionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ReleaseCollectionRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReleaseCollectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ReleaseCollectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleaseCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleaseCollectionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ReleaseCollectionRequest)
  return target;
}

size_t ReleaseCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ReleaseCollectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReleaseCollectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReleaseCollectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReleaseCollectionRequest::GetClassData() const { return &_class_data_; }


void ReleaseCollectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReleaseCollectionRequest*>(&to_msg);
  auto& from = static_cast<const ReleaseCollectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ReleaseCollectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReleaseCollectionRequest::CopyFrom(const ReleaseCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ReleaseCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseCollectionRequest::IsInitialized() const {
  return true;
}

void ReleaseCollectionRequest::InternalSwap(ReleaseCollectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseCollectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[16]);
}

// ===================================================================

class GetStatisticsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetStatisticsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetStatisticsRequest::_Internal::base(const GetStatisticsRequest* msg) {
  return *msg->_impl_.base_;
}
void GetStatisticsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetStatisticsRequest::GetStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetStatisticsRequest)
}
GetStatisticsRequest::GetStatisticsRequest(const GetStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStatisticsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){from._impl_.partition_names_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.guarantee_timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.guarantee_timestamp_ = from._impl_.guarantee_timestamp_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetStatisticsRequest)
}

inline void GetStatisticsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.guarantee_timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetStatisticsRequest::~GetStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetStatisticsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_names_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetStatisticsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetStatisticsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partition_names_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.guarantee_timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatisticsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetStatisticsRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetStatisticsRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string partition_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetStatisticsRequest.partition_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 guarantee_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.guarantee_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStatisticsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetStatisticsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetStatisticsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetStatisticsRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetStatisticsRequest.partition_names");
    target = stream->WriteString(4, s, target);
  }

  // uint64 guarantee_timestamp = 5;
  if (this->_internal_guarantee_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_guarantee_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetStatisticsRequest)
  return target;
}

size_t GetStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetStatisticsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.partition_names_.size());
  for (int i = 0, n = _impl_.partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.partition_names_.Get(i));
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // uint64 guarantee_timestamp = 5;
  if (this->_internal_guarantee_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guarantee_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStatisticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatisticsRequest::GetClassData() const { return &_class_data_; }


void GetStatisticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStatisticsRequest*>(&to_msg);
  auto& from = static_cast<const GetStatisticsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partition_names_.MergeFrom(from._impl_.partition_names_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_guarantee_timestamp() != 0) {
    _this->_internal_set_guarantee_timestamp(from._internal_guarantee_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatisticsRequest::CopyFrom(const GetStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatisticsRequest::IsInitialized() const {
  return true;
}

void GetStatisticsRequest::InternalSwap(GetStatisticsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partition_names_.InternalSwap(&other->_impl_.partition_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStatisticsRequest, _impl_.guarantee_timestamp_)
      + sizeof(GetStatisticsRequest::_impl_.guarantee_timestamp_)
      - PROTOBUF_FIELD_OFFSET(GetStatisticsRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatisticsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[17]);
}

// ===================================================================

class GetStatisticsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetStatisticsResponse* msg);
};

const ::milvus::proto::common::Status&
GetStatisticsResponse::_Internal::status(const GetStatisticsResponse* msg) {
  return *msg->_impl_.status_;
}
void GetStatisticsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void GetStatisticsResponse::clear_stats() {
  _impl_.stats_.Clear();
}
GetStatisticsResponse::GetStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetStatisticsResponse)
}
GetStatisticsResponse::GetStatisticsResponse(const GetStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStatisticsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetStatisticsResponse)
}

inline void GetStatisticsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetStatisticsResponse::~GetStatisticsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetStatisticsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetStatisticsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetStatisticsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatisticsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStatisticsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetStatisticsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetStatisticsResponse)
  return target;
}

size_t GetStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetStatisticsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatisticsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStatisticsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatisticsResponse::GetClassData() const { return &_class_data_; }


void GetStatisticsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStatisticsResponse*>(&to_msg);
  auto& from = static_cast<const GetStatisticsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatisticsResponse::CopyFrom(const GetStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatisticsResponse::IsInitialized() const {
  return true;
}

void GetStatisticsResponse::InternalSwap(GetStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatisticsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[18]);
}

// ===================================================================

class GetCollectionStatisticsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetCollectionStatisticsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetCollectionStatisticsRequest::_Internal::base(const GetCollectionStatisticsRequest* msg) {
  return *msg->_impl_.base_;
}
void GetCollectionStatisticsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetCollectionStatisticsRequest::GetCollectionStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetCollectionStatisticsRequest)
}
GetCollectionStatisticsRequest::GetCollectionStatisticsRequest(const GetCollectionStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCollectionStatisticsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetCollectionStatisticsRequest)
}

inline void GetCollectionStatisticsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetCollectionStatisticsRequest::~GetCollectionStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetCollectionStatisticsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCollectionStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetCollectionStatisticsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCollectionStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCollectionStatisticsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetCollectionStatisticsRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCollectionStatisticsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetCollectionStatisticsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetCollectionStatisticsRequest)
  return target;
}

size_t GetCollectionStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCollectionStatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCollectionStatisticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCollectionStatisticsRequest::GetClassData() const { return &_class_data_; }


void GetCollectionStatisticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCollectionStatisticsRequest*>(&to_msg);
  auto& from = static_cast<const GetCollectionStatisticsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCollectionStatisticsRequest::CopyFrom(const GetCollectionStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectionStatisticsRequest::IsInitialized() const {
  return true;
}

void GetCollectionStatisticsRequest::InternalSwap(GetCollectionStatisticsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollectionStatisticsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[19]);
}

// ===================================================================

class GetCollectionStatisticsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetCollectionStatisticsResponse* msg);
};

const ::milvus::proto::common::Status&
GetCollectionStatisticsResponse::_Internal::status(const GetCollectionStatisticsResponse* msg) {
  return *msg->_impl_.status_;
}
void GetCollectionStatisticsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void GetCollectionStatisticsResponse::clear_stats() {
  _impl_.stats_.Clear();
}
GetCollectionStatisticsResponse::GetCollectionStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetCollectionStatisticsResponse)
}
GetCollectionStatisticsResponse::GetCollectionStatisticsResponse(const GetCollectionStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCollectionStatisticsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetCollectionStatisticsResponse)
}

inline void GetCollectionStatisticsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetCollectionStatisticsResponse::~GetCollectionStatisticsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetCollectionStatisticsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCollectionStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetCollectionStatisticsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCollectionStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCollectionStatisticsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCollectionStatisticsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetCollectionStatisticsResponse)
  return target;
}

size_t GetCollectionStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCollectionStatisticsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCollectionStatisticsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCollectionStatisticsResponse::GetClassData() const { return &_class_data_; }


void GetCollectionStatisticsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCollectionStatisticsResponse*>(&to_msg);
  auto& from = static_cast<const GetCollectionStatisticsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCollectionStatisticsResponse::CopyFrom(const GetCollectionStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectionStatisticsResponse::IsInitialized() const {
  return true;
}

void GetCollectionStatisticsResponse::InternalSwap(GetCollectionStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollectionStatisticsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[20]);
}

// ===================================================================

class ShowCollectionsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ShowCollectionsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ShowCollectionsRequest::_Internal::base(const ShowCollectionsRequest* msg) {
  return *msg->_impl_.base_;
}
void ShowCollectionsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ShowCollectionsRequest::ShowCollectionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ShowCollectionsRequest)
}
ShowCollectionsRequest::ShowCollectionsRequest(const ShowCollectionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShowCollectionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_names_){from._impl_.collection_names_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.time_stamp_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.time_stamp_, &from._impl_.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.time_stamp_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowCollectionsRequest)
}

inline void ShowCollectionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_names_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.time_stamp_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShowCollectionsRequest::~ShowCollectionsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowCollectionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowCollectionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collection_names_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ShowCollectionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowCollectionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowCollectionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collection_names_.Clear();
  _impl_.db_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.time_stamp_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowCollectionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ShowCollectionsRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 time_stamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.ShowType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::milvus::proto::milvus::ShowType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string collection_names = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collection_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ShowCollectionsRequest.collection_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShowCollectionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowCollectionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowCollectionsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // uint64 time_stamp = 3;
  if (this->_internal_time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_time_stamp(), target);
  }

  // .milvus.proto.milvus.ShowType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // repeated string collection_names = 5;
  for (int i = 0, n = this->_internal_collection_names_size(); i < n; i++) {
    const auto& s = this->_internal_collection_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowCollectionsRequest.collection_names");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowCollectionsRequest)
  return target;
}

size_t ShowCollectionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowCollectionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collection_names = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.collection_names_.size());
  for (int i = 0, n = _impl_.collection_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.collection_names_.Get(i));
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // uint64 time_stamp = 3;
  if (this->_internal_time_stamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time_stamp());
  }

  // .milvus.proto.milvus.ShowType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowCollectionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShowCollectionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowCollectionsRequest::GetClassData() const { return &_class_data_; }


void ShowCollectionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShowCollectionsRequest*>(&to_msg);
  auto& from = static_cast<const ShowCollectionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowCollectionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collection_names_.MergeFrom(from._impl_.collection_names_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_time_stamp() != 0) {
    _this->_internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShowCollectionsRequest::CopyFrom(const ShowCollectionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowCollectionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowCollectionsRequest::IsInitialized() const {
  return true;
}

void ShowCollectionsRequest::InternalSwap(ShowCollectionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.collection_names_.InternalSwap(&other->_impl_.collection_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShowCollectionsRequest, _impl_.type_)
      + sizeof(ShowCollectionsRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ShowCollectionsRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowCollectionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[21]);
}

// ===================================================================

class ShowCollectionsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ShowCollectionsResponse* msg);
};

const ::milvus::proto::common::Status&
ShowCollectionsResponse::_Internal::status(const ShowCollectionsResponse* msg) {
  return *msg->_impl_.status_;
}
void ShowCollectionsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ShowCollectionsResponse::ShowCollectionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ShowCollectionsResponse)
}
ShowCollectionsResponse::ShowCollectionsResponse(const ShowCollectionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShowCollectionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_names_){from._impl_.collection_names_}
    , decltype(_impl_.collection_ids_){from._impl_.collection_ids_}
    , /*decltype(_impl_._collection_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.created_timestamps_){from._impl_.created_timestamps_}
    , /*decltype(_impl_._created_timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.created_utc_timestamps_){from._impl_.created_utc_timestamps_}
    , /*decltype(_impl_._created_utc_timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.inmemory_percentages_){from._impl_.inmemory_percentages_}
    , /*decltype(_impl_._inmemory_percentages_cached_byte_size_)*/{0}
    , decltype(_impl_.query_service_available_){from._impl_.query_service_available_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowCollectionsResponse)
}

inline void ShowCollectionsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_names_){arena}
    , decltype(_impl_.collection_ids_){arena}
    , /*decltype(_impl_._collection_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.created_timestamps_){arena}
    , /*decltype(_impl_._created_timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.created_utc_timestamps_){arena}
    , /*decltype(_impl_._created_utc_timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.inmemory_percentages_){arena}
    , /*decltype(_impl_._inmemory_percentages_cached_byte_size_)*/{0}
    , decltype(_impl_.query_service_available_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShowCollectionsResponse::~ShowCollectionsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowCollectionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowCollectionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collection_names_.~RepeatedPtrField();
  _impl_.collection_ids_.~RepeatedField();
  _impl_.created_timestamps_.~RepeatedField();
  _impl_.created_utc_timestamps_.~RepeatedField();
  _impl_.inmemory_percentages_.~RepeatedField();
  _impl_.query_service_available_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ShowCollectionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowCollectionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowCollectionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collection_names_.Clear();
  _impl_.collection_ids_.Clear();
  _impl_.created_timestamps_.Clear();
  _impl_.created_utc_timestamps_.Clear();
  _impl_.inmemory_percentages_.Clear();
  _impl_.query_service_available_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowCollectionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string collection_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collection_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ShowCollectionsResponse.collection_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 collection_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_collection_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_collection_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 created_timestamps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_created_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_created_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 created_utc_timestamps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_created_utc_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_created_utc_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 inMemory_percentages = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_inmemory_percentages(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_inmemory_percentages(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool query_service_available = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_query_service_available(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_query_service_available(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShowCollectionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowCollectionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string collection_names = 2;
  for (int i = 0, n = this->_internal_collection_names_size(); i < n; i++) {
    const auto& s = this->_internal_collection_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowCollectionsResponse.collection_names");
    target = stream->WriteString(2, s, target);
  }

  // repeated int64 collection_ids = 3;
  {
    int byte_size = _impl_._collection_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_collection_ids(), byte_size, target);
    }
  }

  // repeated uint64 created_timestamps = 4;
  {
    int byte_size = _impl_._created_timestamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_created_timestamps(), byte_size, target);
    }
  }

  // repeated uint64 created_utc_timestamps = 5;
  {
    int byte_size = _impl_._created_utc_timestamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_created_utc_timestamps(), byte_size, target);
    }
  }

  // repeated int64 inMemory_percentages = 6;
  {
    int byte_size = _impl_._inmemory_percentages_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_inmemory_percentages(), byte_size, target);
    }
  }

  // repeated bool query_service_available = 7;
  if (this->_internal_query_service_available_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_query_service_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowCollectionsResponse)
  return target;
}

size_t ShowCollectionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowCollectionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collection_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.collection_names_.size());
  for (int i = 0, n = _impl_.collection_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.collection_names_.Get(i));
  }

  // repeated int64 collection_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.collection_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._collection_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 created_timestamps = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.created_timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._created_timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 created_utc_timestamps = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.created_utc_timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._created_utc_timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 inMemory_percentages = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.inmemory_percentages_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._inmemory_percentages_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool query_service_available = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_query_service_available_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowCollectionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShowCollectionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowCollectionsResponse::GetClassData() const { return &_class_data_; }


void ShowCollectionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShowCollectionsResponse*>(&to_msg);
  auto& from = static_cast<const ShowCollectionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowCollectionsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collection_names_.MergeFrom(from._impl_.collection_names_);
  _this->_impl_.collection_ids_.MergeFrom(from._impl_.collection_ids_);
  _this->_impl_.created_timestamps_.MergeFrom(from._impl_.created_timestamps_);
  _this->_impl_.created_utc_timestamps_.MergeFrom(from._impl_.created_utc_timestamps_);
  _this->_impl_.inmemory_percentages_.MergeFrom(from._impl_.inmemory_percentages_);
  _this->_impl_.query_service_available_.MergeFrom(from._impl_.query_service_available_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShowCollectionsResponse::CopyFrom(const ShowCollectionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowCollectionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowCollectionsResponse::IsInitialized() const {
  return true;
}

void ShowCollectionsResponse::InternalSwap(ShowCollectionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.collection_names_.InternalSwap(&other->_impl_.collection_names_);
  _impl_.collection_ids_.InternalSwap(&other->_impl_.collection_ids_);
  _impl_.created_timestamps_.InternalSwap(&other->_impl_.created_timestamps_);
  _impl_.created_utc_timestamps_.InternalSwap(&other->_impl_.created_utc_timestamps_);
  _impl_.inmemory_percentages_.InternalSwap(&other->_impl_.inmemory_percentages_);
  _impl_.query_service_available_.InternalSwap(&other->_impl_.query_service_available_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowCollectionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[22]);
}

// ===================================================================

class CreatePartitionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreatePartitionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreatePartitionRequest::_Internal::base(const CreatePartitionRequest* msg) {
  return *msg->_impl_.base_;
}
void CreatePartitionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
CreatePartitionRequest::CreatePartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreatePartitionRequest)
}
CreatePartitionRequest::CreatePartitionRequest(const CreatePartitionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreatePartitionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_name().empty()) {
    _this->_impl_.partition_name_.Set(from._internal_partition_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreatePartitionRequest)
}

inline void CreatePartitionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreatePartitionRequest::~CreatePartitionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreatePartitionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreatePartitionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.partition_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void CreatePartitionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreatePartitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreatePartitionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.partition_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatePartitionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreatePartitionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreatePartitionRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreatePartitionRequest.partition_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreatePartitionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreatePartitionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreatePartitionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreatePartitionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreatePartitionRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreatePartitionRequest)
  return target;
}

size_t CreatePartitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreatePartitionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreatePartitionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreatePartitionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreatePartitionRequest::GetClassData() const { return &_class_data_; }


void CreatePartitionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreatePartitionRequest*>(&to_msg);
  auto& from = static_cast<const CreatePartitionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreatePartitionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_partition_name().empty()) {
    _this->_internal_set_partition_name(from._internal_partition_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreatePartitionRequest::CopyFrom(const CreatePartitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreatePartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePartitionRequest::IsInitialized() const {
  return true;
}

void CreatePartitionRequest::InternalSwap(CreatePartitionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_name_, lhs_arena,
      &other->_impl_.partition_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePartitionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[23]);
}

// ===================================================================

class DropPartitionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropPartitionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropPartitionRequest::_Internal::base(const DropPartitionRequest* msg) {
  return *msg->_impl_.base_;
}
void DropPartitionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DropPartitionRequest::DropPartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DropPartitionRequest)
}
DropPartitionRequest::DropPartitionRequest(const DropPartitionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropPartitionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_name().empty()) {
    _this->_impl_.partition_name_.Set(from._internal_partition_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropPartitionRequest)
}

inline void DropPartitionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DropPartitionRequest::~DropPartitionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropPartitionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropPartitionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.partition_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DropPartitionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropPartitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropPartitionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.partition_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropPartitionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DropPartitionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DropPartitionRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DropPartitionRequest.partition_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropPartitionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropPartitionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropPartitionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropPartitionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropPartitionRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropPartitionRequest)
  return target;
}

size_t DropPartitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropPartitionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropPartitionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropPartitionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropPartitionRequest::GetClassData() const { return &_class_data_; }


void DropPartitionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropPartitionRequest*>(&to_msg);
  auto& from = static_cast<const DropPartitionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropPartitionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_partition_name().empty()) {
    _this->_internal_set_partition_name(from._internal_partition_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropPartitionRequest::CopyFrom(const DropPartitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropPartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropPartitionRequest::IsInitialized() const {
  return true;
}

void DropPartitionRequest::InternalSwap(DropPartitionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_name_, lhs_arena,
      &other->_impl_.partition_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropPartitionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[24]);
}

// ===================================================================

class HasPartitionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const HasPartitionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
HasPartitionRequest::_Internal::base(const HasPartitionRequest* msg) {
  return *msg->_impl_.base_;
}
void HasPartitionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
HasPartitionRequest::HasPartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.HasPartitionRequest)
}
HasPartitionRequest::HasPartitionRequest(const HasPartitionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HasPartitionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_name().empty()) {
    _this->_impl_.partition_name_.Set(from._internal_partition_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.HasPartitionRequest)
}

inline void HasPartitionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HasPartitionRequest::~HasPartitionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.HasPartitionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HasPartitionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.partition_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void HasPartitionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HasPartitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.HasPartitionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.partition_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HasPartitionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.HasPartitionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.HasPartitionRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.HasPartitionRequest.partition_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HasPartitionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.HasPartitionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasPartitionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasPartitionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasPartitionRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.HasPartitionRequest)
  return target;
}

size_t HasPartitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.HasPartitionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HasPartitionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HasPartitionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HasPartitionRequest::GetClassData() const { return &_class_data_; }


void HasPartitionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HasPartitionRequest*>(&to_msg);
  auto& from = static_cast<const HasPartitionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.HasPartitionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_partition_name().empty()) {
    _this->_internal_set_partition_name(from._internal_partition_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HasPartitionRequest::CopyFrom(const HasPartitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.HasPartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasPartitionRequest::IsInitialized() const {
  return true;
}

void HasPartitionRequest::InternalSwap(HasPartitionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_name_, lhs_arena,
      &other->_impl_.partition_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HasPartitionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[25]);
}

// ===================================================================

class LoadPartitionsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const LoadPartitionsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
LoadPartitionsRequest::_Internal::base(const LoadPartitionsRequest* msg) {
  return *msg->_impl_.base_;
}
void LoadPartitionsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
LoadPartitionsRequest::LoadPartitionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.LoadPartitionsRequest)
}
LoadPartitionsRequest::LoadPartitionsRequest(const LoadPartitionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoadPartitionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){from._impl_.partition_names_}
    , decltype(_impl_.resource_groups_){from._impl_.resource_groups_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.replica_number_){}
    , decltype(_impl_.refresh_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.replica_number_, &from._impl_.replica_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.refresh_) -
    reinterpret_cast<char*>(&_impl_.replica_number_)) + sizeof(_impl_.refresh_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.LoadPartitionsRequest)
}

inline void LoadPartitionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){arena}
    , decltype(_impl_.resource_groups_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.replica_number_){0}
    , decltype(_impl_.refresh_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoadPartitionsRequest::~LoadPartitionsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.LoadPartitionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadPartitionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_names_.~RepeatedPtrField();
  _impl_.resource_groups_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void LoadPartitionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoadPartitionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.LoadPartitionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partition_names_.Clear();
  _impl_.resource_groups_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.replica_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.refresh_) -
      reinterpret_cast<char*>(&_impl_.replica_number_)) + sizeof(_impl_.refresh_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadPartitionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.LoadPartitionsRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.LoadPartitionsRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string partition_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.LoadPartitionsRequest.partition_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 replica_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.replica_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string resource_groups = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_resource_groups();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.LoadPartitionsRequest.resource_groups"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool refresh = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadPartitionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.LoadPartitionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadPartitionsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadPartitionsRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadPartitionsRequest.partition_names");
    target = stream->WriteString(4, s, target);
  }

  // int32 replica_number = 5;
  if (this->_internal_replica_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_replica_number(), target);
  }

  // repeated string resource_groups = 6;
  for (int i = 0, n = this->_internal_resource_groups_size(); i < n; i++) {
    const auto& s = this->_internal_resource_groups(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadPartitionsRequest.resource_groups");
    target = stream->WriteString(6, s, target);
  }

  // bool refresh = 7;
  if (this->_internal_refresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_refresh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.LoadPartitionsRequest)
  return target;
}

size_t LoadPartitionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.LoadPartitionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.partition_names_.size());
  for (int i = 0, n = _impl_.partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.partition_names_.Get(i));
  }

  // repeated string resource_groups = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.resource_groups_.size());
  for (int i = 0, n = _impl_.resource_groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.resource_groups_.Get(i));
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int32 replica_number = 5;
  if (this->_internal_replica_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_replica_number());
  }

  // bool refresh = 7;
  if (this->_internal_refresh() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadPartitionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoadPartitionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadPartitionsRequest::GetClassData() const { return &_class_data_; }


void LoadPartitionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoadPartitionsRequest*>(&to_msg);
  auto& from = static_cast<const LoadPartitionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.LoadPartitionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partition_names_.MergeFrom(from._impl_.partition_names_);
  _this->_impl_.resource_groups_.MergeFrom(from._impl_.resource_groups_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_replica_number() != 0) {
    _this->_internal_set_replica_number(from._internal_replica_number());
  }
  if (from._internal_refresh() != 0) {
    _this->_internal_set_refresh(from._internal_refresh());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadPartitionsRequest::CopyFrom(const LoadPartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.LoadPartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPartitionsRequest::IsInitialized() const {
  return true;
}

void LoadPartitionsRequest::InternalSwap(LoadPartitionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partition_names_.InternalSwap(&other->_impl_.partition_names_);
  _impl_.resource_groups_.InternalSwap(&other->_impl_.resource_groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadPartitionsRequest, _impl_.refresh_)
      + sizeof(LoadPartitionsRequest::_impl_.refresh_)
      - PROTOBUF_FIELD_OFFSET(LoadPartitionsRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadPartitionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[26]);
}

// ===================================================================

class ReleasePartitionsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ReleasePartitionsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ReleasePartitionsRequest::_Internal::base(const ReleasePartitionsRequest* msg) {
  return *msg->_impl_.base_;
}
void ReleasePartitionsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ReleasePartitionsRequest::ReleasePartitionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ReleasePartitionsRequest)
}
ReleasePartitionsRequest::ReleasePartitionsRequest(const ReleasePartitionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReleasePartitionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){from._impl_.partition_names_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ReleasePartitionsRequest)
}

inline void ReleasePartitionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReleasePartitionsRequest::~ReleasePartitionsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ReleasePartitionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReleasePartitionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_names_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ReleasePartitionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReleasePartitionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ReleasePartitionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partition_names_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleasePartitionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ReleasePartitionsRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ReleasePartitionsRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string partition_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ReleasePartitionsRequest.partition_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReleasePartitionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ReleasePartitionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleasePartitionsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleasePartitionsRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleasePartitionsRequest.partition_names");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ReleasePartitionsRequest)
  return target;
}

size_t ReleasePartitionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ReleasePartitionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.partition_names_.size());
  for (int i = 0, n = _impl_.partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.partition_names_.Get(i));
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReleasePartitionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReleasePartitionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReleasePartitionsRequest::GetClassData() const { return &_class_data_; }


void ReleasePartitionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReleasePartitionsRequest*>(&to_msg);
  auto& from = static_cast<const ReleasePartitionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ReleasePartitionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partition_names_.MergeFrom(from._impl_.partition_names_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReleasePartitionsRequest::CopyFrom(const ReleasePartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ReleasePartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleasePartitionsRequest::IsInitialized() const {
  return true;
}

void ReleasePartitionsRequest::InternalSwap(ReleasePartitionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partition_names_.InternalSwap(&other->_impl_.partition_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleasePartitionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[27]);
}

// ===================================================================

class GetPartitionStatisticsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetPartitionStatisticsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetPartitionStatisticsRequest::_Internal::base(const GetPartitionStatisticsRequest* msg) {
  return *msg->_impl_.base_;
}
void GetPartitionStatisticsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetPartitionStatisticsRequest::GetPartitionStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetPartitionStatisticsRequest)
}
GetPartitionStatisticsRequest::GetPartitionStatisticsRequest(const GetPartitionStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPartitionStatisticsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_name().empty()) {
    _this->_impl_.partition_name_.Set(from._internal_partition_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetPartitionStatisticsRequest)
}

inline void GetPartitionStatisticsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPartitionStatisticsRequest::~GetPartitionStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetPartitionStatisticsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPartitionStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.partition_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetPartitionStatisticsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPartitionStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.partition_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPartitionStatisticsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetPartitionStatisticsRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPartitionStatisticsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPartitionStatisticsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetPartitionStatisticsRequest)
  return target;
}

size_t GetPartitionStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPartitionStatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPartitionStatisticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPartitionStatisticsRequest::GetClassData() const { return &_class_data_; }


void GetPartitionStatisticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPartitionStatisticsRequest*>(&to_msg);
  auto& from = static_cast<const GetPartitionStatisticsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_partition_name().empty()) {
    _this->_internal_set_partition_name(from._internal_partition_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPartitionStatisticsRequest::CopyFrom(const GetPartitionStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPartitionStatisticsRequest::IsInitialized() const {
  return true;
}

void GetPartitionStatisticsRequest::InternalSwap(GetPartitionStatisticsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_name_, lhs_arena,
      &other->_impl_.partition_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPartitionStatisticsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[28]);
}

// ===================================================================

class GetPartitionStatisticsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetPartitionStatisticsResponse* msg);
};

const ::milvus::proto::common::Status&
GetPartitionStatisticsResponse::_Internal::status(const GetPartitionStatisticsResponse* msg) {
  return *msg->_impl_.status_;
}
void GetPartitionStatisticsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void GetPartitionStatisticsResponse::clear_stats() {
  _impl_.stats_.Clear();
}
GetPartitionStatisticsResponse::GetPartitionStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetPartitionStatisticsResponse)
}
GetPartitionStatisticsResponse::GetPartitionStatisticsResponse(const GetPartitionStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPartitionStatisticsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetPartitionStatisticsResponse)
}

inline void GetPartitionStatisticsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetPartitionStatisticsResponse::~GetPartitionStatisticsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetPartitionStatisticsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPartitionStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetPartitionStatisticsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPartitionStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPartitionStatisticsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPartitionStatisticsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetPartitionStatisticsResponse)
  return target;
}

size_t GetPartitionStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPartitionStatisticsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPartitionStatisticsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPartitionStatisticsResponse::GetClassData() const { return &_class_data_; }


void GetPartitionStatisticsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPartitionStatisticsResponse*>(&to_msg);
  auto& from = static_cast<const GetPartitionStatisticsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPartitionStatisticsResponse::CopyFrom(const GetPartitionStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPartitionStatisticsResponse::IsInitialized() const {
  return true;
}

void GetPartitionStatisticsResponse::InternalSwap(GetPartitionStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPartitionStatisticsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[29]);
}

// ===================================================================

class ShowPartitionsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ShowPartitionsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ShowPartitionsRequest::_Internal::base(const ShowPartitionsRequest* msg) {
  return *msg->_impl_.base_;
}
void ShowPartitionsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ShowPartitionsRequest::ShowPartitionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ShowPartitionsRequest)
}
ShowPartitionsRequest::ShowPartitionsRequest(const ShowPartitionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShowPartitionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){from._impl_.partition_names_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowPartitionsRequest)
}

inline void ShowPartitionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShowPartitionsRequest::~ShowPartitionsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowPartitionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowPartitionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_names_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ShowPartitionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowPartitionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowPartitionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partition_names_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowPartitionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ShowPartitionsRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ShowPartitionsRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string partition_names = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ShowPartitionsRequest.partition_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.ShowType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::milvus::proto::milvus::ShowType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShowPartitionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowPartitionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowPartitionsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowPartitionsRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // int64 collectionID = 4;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_collectionid(), target);
  }

  // repeated string partition_names = 5;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowPartitionsRequest.partition_names");
    target = stream->WriteString(5, s, target);
  }

  // .milvus.proto.milvus.ShowType type = 6;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowPartitionsRequest)
  return target;
}

size_t ShowPartitionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowPartitionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.partition_names_.size());
  for (int i = 0, n = _impl_.partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.partition_names_.Get(i));
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 collectionID = 4;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // .milvus.proto.milvus.ShowType type = 6;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowPartitionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShowPartitionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowPartitionsRequest::GetClassData() const { return &_class_data_; }


void ShowPartitionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShowPartitionsRequest*>(&to_msg);
  auto& from = static_cast<const ShowPartitionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowPartitionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partition_names_.MergeFrom(from._impl_.partition_names_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShowPartitionsRequest::CopyFrom(const ShowPartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowPartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowPartitionsRequest::IsInitialized() const {
  return true;
}

void ShowPartitionsRequest::InternalSwap(ShowPartitionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partition_names_.InternalSwap(&other->_impl_.partition_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShowPartitionsRequest, _impl_.type_)
      + sizeof(ShowPartitionsRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ShowPartitionsRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowPartitionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[30]);
}

// ===================================================================

class ShowPartitionsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ShowPartitionsResponse* msg);
};

const ::milvus::proto::common::Status&
ShowPartitionsResponse::_Internal::status(const ShowPartitionsResponse* msg) {
  return *msg->_impl_.status_;
}
void ShowPartitionsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ShowPartitionsResponse::ShowPartitionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ShowPartitionsResponse)
}
ShowPartitionsResponse::ShowPartitionsResponse(const ShowPartitionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShowPartitionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){from._impl_.partition_names_}
    , decltype(_impl_.partitionids_){from._impl_.partitionids_}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.created_timestamps_){from._impl_.created_timestamps_}
    , /*decltype(_impl_._created_timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.created_utc_timestamps_){from._impl_.created_utc_timestamps_}
    , /*decltype(_impl_._created_utc_timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.inmemory_percentages_){from._impl_.inmemory_percentages_}
    , /*decltype(_impl_._inmemory_percentages_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowPartitionsResponse)
}

inline void ShowPartitionsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){arena}
    , decltype(_impl_.partitionids_){arena}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.created_timestamps_){arena}
    , /*decltype(_impl_._created_timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.created_utc_timestamps_){arena}
    , /*decltype(_impl_._created_utc_timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.inmemory_percentages_){arena}
    , /*decltype(_impl_._inmemory_percentages_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShowPartitionsResponse::~ShowPartitionsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowPartitionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowPartitionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_names_.~RepeatedPtrField();
  _impl_.partitionids_.~RepeatedField();
  _impl_.created_timestamps_.~RepeatedField();
  _impl_.created_utc_timestamps_.~RepeatedField();
  _impl_.inmemory_percentages_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ShowPartitionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowPartitionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowPartitionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partition_names_.Clear();
  _impl_.partitionids_.Clear();
  _impl_.created_timestamps_.Clear();
  _impl_.created_utc_timestamps_.Clear();
  _impl_.inmemory_percentages_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowPartitionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string partition_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ShowPartitionsResponse.partition_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 partitionIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_partitionids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_partitionids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 created_timestamps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_created_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_created_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 created_utc_timestamps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_created_utc_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_created_utc_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 inMemory_percentages = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_inmemory_percentages(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_inmemory_percentages(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShowPartitionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowPartitionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string partition_names = 2;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowPartitionsResponse.partition_names");
    target = stream->WriteString(2, s, target);
  }

  // repeated int64 partitionIDs = 3;
  {
    int byte_size = _impl_._partitionids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_partitionids(), byte_size, target);
    }
  }

  // repeated uint64 created_timestamps = 4;
  {
    int byte_size = _impl_._created_timestamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_created_timestamps(), byte_size, target);
    }
  }

  // repeated uint64 created_utc_timestamps = 5;
  {
    int byte_size = _impl_._created_utc_timestamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_created_utc_timestamps(), byte_size, target);
    }
  }

  // repeated int64 inMemory_percentages = 6;
  {
    int byte_size = _impl_._inmemory_percentages_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_inmemory_percentages(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowPartitionsResponse)
  return target;
}

size_t ShowPartitionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowPartitionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.partition_names_.size());
  for (int i = 0, n = _impl_.partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.partition_names_.Get(i));
  }

  // repeated int64 partitionIDs = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.partitionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._partitionids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 created_timestamps = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.created_timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._created_timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 created_utc_timestamps = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.created_utc_timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._created_utc_timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 inMemory_percentages = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.inmemory_percentages_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._inmemory_percentages_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowPartitionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShowPartitionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowPartitionsResponse::GetClassData() const { return &_class_data_; }


void ShowPartitionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShowPartitionsResponse*>(&to_msg);
  auto& from = static_cast<const ShowPartitionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowPartitionsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partition_names_.MergeFrom(from._impl_.partition_names_);
  _this->_impl_.partitionids_.MergeFrom(from._impl_.partitionids_);
  _this->_impl_.created_timestamps_.MergeFrom(from._impl_.created_timestamps_);
  _this->_impl_.created_utc_timestamps_.MergeFrom(from._impl_.created_utc_timestamps_);
  _this->_impl_.inmemory_percentages_.MergeFrom(from._impl_.inmemory_percentages_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShowPartitionsResponse::CopyFrom(const ShowPartitionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowPartitionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowPartitionsResponse::IsInitialized() const {
  return true;
}

void ShowPartitionsResponse::InternalSwap(ShowPartitionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partition_names_.InternalSwap(&other->_impl_.partition_names_);
  _impl_.partitionids_.InternalSwap(&other->_impl_.partitionids_);
  _impl_.created_timestamps_.InternalSwap(&other->_impl_.created_timestamps_);
  _impl_.created_utc_timestamps_.InternalSwap(&other->_impl_.created_utc_timestamps_);
  _impl_.inmemory_percentages_.InternalSwap(&other->_impl_.inmemory_percentages_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowPartitionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[31]);
}

// ===================================================================

class DescribeSegmentRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeSegmentRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeSegmentRequest::_Internal::base(const DescribeSegmentRequest* msg) {
  return *msg->_impl_.base_;
}
void DescribeSegmentRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DescribeSegmentRequest::DescribeSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeSegmentRequest)
}
DescribeSegmentRequest::DescribeSegmentRequest(const DescribeSegmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeSegmentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.segmentid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.segmentid_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.segmentid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeSegmentRequest)
}

inline void DescribeSegmentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DescribeSegmentRequest::~DescribeSegmentRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeSegmentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeSegmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DescribeSegmentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeSegmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeSegmentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.segmentid_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.segmentid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeSegmentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segmentID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DescribeSegmentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeSegmentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // int64 segmentID = 3;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_segmentid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeSegmentRequest)
  return target;
}

size_t DescribeSegmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeSegmentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 segmentID = 3;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeSegmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeSegmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeSegmentRequest::GetClassData() const { return &_class_data_; }


void DescribeSegmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeSegmentRequest*>(&to_msg);
  auto& from = static_cast<const DescribeSegmentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeSegmentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeSegmentRequest::CopyFrom(const DescribeSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeSegmentRequest::IsInitialized() const {
  return true;
}

void DescribeSegmentRequest::InternalSwap(DescribeSegmentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DescribeSegmentRequest, _impl_.segmentid_)
      + sizeof(DescribeSegmentRequest::_impl_.segmentid_)
      - PROTOBUF_FIELD_OFFSET(DescribeSegmentRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeSegmentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[32]);
}

// ===================================================================

class DescribeSegmentResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeSegmentResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeSegmentResponse::_Internal::status(const DescribeSegmentResponse* msg) {
  return *msg->_impl_.status_;
}
void DescribeSegmentResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
DescribeSegmentResponse::DescribeSegmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeSegmentResponse)
}
DescribeSegmentResponse::DescribeSegmentResponse(const DescribeSegmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeSegmentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.indexid_){}
    , decltype(_impl_.buildid_){}
    , decltype(_impl_.fieldid_){}
    , decltype(_impl_.enable_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.indexid_, &from._impl_.indexid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_index_) -
    reinterpret_cast<char*>(&_impl_.indexid_)) + sizeof(_impl_.enable_index_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeSegmentResponse)
}

inline void DescribeSegmentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.indexid_){int64_t{0}}
    , decltype(_impl_.buildid_){int64_t{0}}
    , decltype(_impl_.fieldid_){int64_t{0}}
    , decltype(_impl_.enable_index_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DescribeSegmentResponse::~DescribeSegmentResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeSegmentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeSegmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DescribeSegmentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeSegmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeSegmentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.indexid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enable_index_) -
      reinterpret_cast<char*>(&_impl_.indexid_)) + sizeof(_impl_.enable_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeSegmentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 indexID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 buildID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.buildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.enable_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fieldID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.fieldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DescribeSegmentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeSegmentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int64 indexID = 2;
  if (this->_internal_indexid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_indexid(), target);
  }

  // int64 buildID = 3;
  if (this->_internal_buildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_buildid(), target);
  }

  // bool enable_index = 4;
  if (this->_internal_enable_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_index(), target);
  }

  // int64 fieldID = 5;
  if (this->_internal_fieldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_fieldid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeSegmentResponse)
  return target;
}

size_t DescribeSegmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeSegmentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 indexID = 2;
  if (this->_internal_indexid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_indexid());
  }

  // int64 buildID = 3;
  if (this->_internal_buildid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_buildid());
  }

  // int64 fieldID = 5;
  if (this->_internal_fieldid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fieldid());
  }

  // bool enable_index = 4;
  if (this->_internal_enable_index() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeSegmentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeSegmentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeSegmentResponse::GetClassData() const { return &_class_data_; }


void DescribeSegmentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeSegmentResponse*>(&to_msg);
  auto& from = static_cast<const DescribeSegmentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeSegmentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_indexid() != 0) {
    _this->_internal_set_indexid(from._internal_indexid());
  }
  if (from._internal_buildid() != 0) {
    _this->_internal_set_buildid(from._internal_buildid());
  }
  if (from._internal_fieldid() != 0) {
    _this->_internal_set_fieldid(from._internal_fieldid());
  }
  if (from._internal_enable_index() != 0) {
    _this->_internal_set_enable_index(from._internal_enable_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeSegmentResponse::CopyFrom(const DescribeSegmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeSegmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeSegmentResponse::IsInitialized() const {
  return true;
}

void DescribeSegmentResponse::InternalSwap(DescribeSegmentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DescribeSegmentResponse, _impl_.enable_index_)
      + sizeof(DescribeSegmentResponse::_impl_.enable_index_)
      - PROTOBUF_FIELD_OFFSET(DescribeSegmentResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeSegmentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[33]);
}

// ===================================================================

class ShowSegmentsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ShowSegmentsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ShowSegmentsRequest::_Internal::base(const ShowSegmentsRequest* msg) {
  return *msg->_impl_.base_;
}
void ShowSegmentsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ShowSegmentsRequest::ShowSegmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ShowSegmentsRequest)
}
ShowSegmentsRequest::ShowSegmentsRequest(const ShowSegmentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShowSegmentsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.partitionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.partitionid_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.partitionid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowSegmentsRequest)
}

inline void ShowSegmentsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShowSegmentsRequest::~ShowSegmentsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowSegmentsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowSegmentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ShowSegmentsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowSegmentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowSegmentsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.partitionid_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.partitionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowSegmentsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShowSegmentsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowSegmentsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 3;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_partitionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowSegmentsRequest)
  return target;
}

size_t ShowSegmentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowSegmentsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 partitionID = 3;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowSegmentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShowSegmentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowSegmentsRequest::GetClassData() const { return &_class_data_; }


void ShowSegmentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShowSegmentsRequest*>(&to_msg);
  auto& from = static_cast<const ShowSegmentsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowSegmentsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShowSegmentsRequest::CopyFrom(const ShowSegmentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowSegmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSegmentsRequest::IsInitialized() const {
  return true;
}

void ShowSegmentsRequest::InternalSwap(ShowSegmentsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShowSegmentsRequest, _impl_.partitionid_)
      + sizeof(ShowSegmentsRequest::_impl_.partitionid_)
      - PROTOBUF_FIELD_OFFSET(ShowSegmentsRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowSegmentsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[34]);
}

// ===================================================================

class ShowSegmentsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ShowSegmentsResponse* msg);
};

const ::milvus::proto::common::Status&
ShowSegmentsResponse::_Internal::status(const ShowSegmentsResponse* msg) {
  return *msg->_impl_.status_;
}
void ShowSegmentsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ShowSegmentsResponse::ShowSegmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ShowSegmentsResponse)
}
ShowSegmentsResponse::ShowSegmentsResponse(const ShowSegmentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShowSegmentsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){from._impl_.segmentids_}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowSegmentsResponse)
}

inline void ShowSegmentsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){arena}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShowSegmentsResponse::~ShowSegmentsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowSegmentsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowSegmentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ShowSegmentsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowSegmentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowSegmentsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segmentids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowSegmentsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segmentIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShowSegmentsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowSegmentsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated int64 segmentIDs = 2;
  {
    int byte_size = _impl_._segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_segmentids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowSegmentsResponse)
  return target;
}

size_t ShowSegmentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowSegmentsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowSegmentsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShowSegmentsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowSegmentsResponse::GetClassData() const { return &_class_data_; }


void ShowSegmentsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShowSegmentsResponse*>(&to_msg);
  auto& from = static_cast<const ShowSegmentsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowSegmentsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segmentids_.MergeFrom(from._impl_.segmentids_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShowSegmentsResponse::CopyFrom(const ShowSegmentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowSegmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSegmentsResponse::IsInitialized() const {
  return true;
}

void ShowSegmentsResponse::InternalSwap(ShowSegmentsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentids_.InternalSwap(&other->_impl_.segmentids_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowSegmentsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[35]);
}

// ===================================================================

class CreateIndexRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateIndexRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateIndexRequest::_Internal::base(const CreateIndexRequest* msg) {
  return *msg->_impl_.base_;
}
void CreateIndexRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void CreateIndexRequest::clear_extra_params() {
  _impl_.extra_params_.Clear();
}
CreateIndexRequest::CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreateIndexRequest)
}
CreateIndexRequest::CreateIndexRequest(const CreateIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateIndexRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_params_){from._impl_.extra_params_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_name().empty()) {
    _this->_impl_.field_name_.Set(from._internal_field_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateIndexRequest)
}

inline void CreateIndexRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_params_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateIndexRequest::~CreateIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateIndexRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extra_params_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.field_name_.Destroy();
  _impl_.index_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void CreateIndexRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateIndexRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extra_params_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.field_name_.ClearToEmpty();
  _impl_.index_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateIndexRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreateIndexRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreateIndexRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_field_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreateIndexRequest.field_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string index_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreateIndexRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateIndexRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateIndexRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateIndexRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateIndexRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string field_name = 4;
  if (!this->_internal_field_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateIndexRequest.field_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_field_name(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extra_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_extra_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string index_name = 6;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateIndexRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateIndexRequest)
  return target;
}

size_t CreateIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateIndexRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
  total_size += 1UL * this->_internal_extra_params_size();
  for (const auto& msg : this->_impl_.extra_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string field_name = 4;
  if (!this->_internal_field_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // string index_name = 6;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateIndexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateIndexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateIndexRequest::GetClassData() const { return &_class_data_; }


void CreateIndexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateIndexRequest*>(&to_msg);
  auto& from = static_cast<const CreateIndexRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateIndexRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extra_params_.MergeFrom(from._impl_.extra_params_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_field_name().empty()) {
    _this->_internal_set_field_name(from._internal_field_name());
  }
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateIndexRequest::CopyFrom(const CreateIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIndexRequest::IsInitialized() const {
  return true;
}

void CreateIndexRequest::InternalSwap(CreateIndexRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.extra_params_.InternalSwap(&other->_impl_.extra_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_name_, lhs_arena,
      &other->_impl_.field_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateIndexRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[36]);
}

// ===================================================================

class DescribeIndexRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeIndexRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeIndexRequest::_Internal::base(const DescribeIndexRequest* msg) {
  return *msg->_impl_.base_;
}
void DescribeIndexRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DescribeIndexRequest::DescribeIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeIndexRequest)
}
DescribeIndexRequest::DescribeIndexRequest(const DescribeIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeIndexRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_name().empty()) {
    _this->_impl_.field_name_.Set(from._internal_field_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeIndexRequest)
}

inline void DescribeIndexRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DescribeIndexRequest::~DescribeIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeIndexRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.field_name_.Destroy();
  _impl_.index_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DescribeIndexRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeIndexRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.field_name_.ClearToEmpty();
  _impl_.index_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeIndexRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeIndexRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeIndexRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_field_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeIndexRequest.field_name"));
        } else
          goto handle_unusual;
        continue;
      // string index_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeIndexRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DescribeIndexRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeIndexRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string field_name = 4;
  if (!this->_internal_field_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.field_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_field_name(), target);
  }

  // string index_name = 5;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeIndexRequest)
  return target;
}

size_t DescribeIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeIndexRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string field_name = 4;
  if (!this->_internal_field_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // string index_name = 5;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeIndexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeIndexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeIndexRequest::GetClassData() const { return &_class_data_; }


void DescribeIndexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeIndexRequest*>(&to_msg);
  auto& from = static_cast<const DescribeIndexRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeIndexRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_field_name().empty()) {
    _this->_internal_set_field_name(from._internal_field_name());
  }
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeIndexRequest::CopyFrom(const DescribeIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeIndexRequest::IsInitialized() const {
  return true;
}

void DescribeIndexRequest::InternalSwap(DescribeIndexRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_name_, lhs_arena,
      &other->_impl_.field_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeIndexRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[37]);
}

// ===================================================================

class IndexDescription::_Internal {
 public:
};

void IndexDescription::clear_params() {
  _impl_.params_.Clear();
}
IndexDescription::IndexDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.IndexDescription)
}
IndexDescription::IndexDescription(const IndexDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.index_state_fail_reason_){}
    , decltype(_impl_.indexid_){}
    , decltype(_impl_.indexed_rows_){}
    , decltype(_impl_.total_rows_){}
    , decltype(_impl_.pending_index_rows_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_name().empty()) {
    _this->_impl_.field_name_.Set(from._internal_field_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.index_state_fail_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_state_fail_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_state_fail_reason().empty()) {
    _this->_impl_.index_state_fail_reason_.Set(from._internal_index_state_fail_reason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.indexid_, &from._impl_.indexid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.indexid_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.IndexDescription)
}

inline void IndexDescription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){arena}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.index_state_fail_reason_){}
    , decltype(_impl_.indexid_){int64_t{0}}
    , decltype(_impl_.indexed_rows_){int64_t{0}}
    , decltype(_impl_.total_rows_){int64_t{0}}
    , decltype(_impl_.pending_index_rows_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_state_fail_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_state_fail_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexDescription::~IndexDescription() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.IndexDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
  _impl_.index_name_.Destroy();
  _impl_.field_name_.Destroy();
  _impl_.index_state_fail_reason_.Destroy();
}

void IndexDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.IndexDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.index_name_.ClearToEmpty();
  _impl_.field_name_.ClearToEmpty();
  _impl_.index_state_fail_reason_.ClearToEmpty();
  ::memset(&_impl_.indexid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.indexid_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string index_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.IndexDescription.index_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 indexID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_field_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.IndexDescription.field_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 indexed_rows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.indexed_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_rows = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.total_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.IndexState state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::IndexState>(val));
        } else
          goto handle_unusual;
        continue;
      // string index_state_fail_reason = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_index_state_fail_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.IndexDescription.index_state_fail_reason"));
        } else
          goto handle_unusual;
        continue;
      // int64 pending_index_rows = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.pending_index_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.IndexDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_name = 1;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.IndexDescription.index_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index_name(), target);
  }

  // int64 indexID = 2;
  if (this->_internal_indexid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_indexid(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair params = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string field_name = 4;
  if (!this->_internal_field_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.IndexDescription.field_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_field_name(), target);
  }

  // int64 indexed_rows = 5;
  if (this->_internal_indexed_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_indexed_rows(), target);
  }

  // int64 total_rows = 6;
  if (this->_internal_total_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_total_rows(), target);
  }

  // .milvus.proto.common.IndexState state = 7;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_state(), target);
  }

  // string index_state_fail_reason = 8;
  if (!this->_internal_index_state_fail_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_state_fail_reason().data(), static_cast<int>(this->_internal_index_state_fail_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.IndexDescription.index_state_fail_reason");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_index_state_fail_reason(), target);
  }

  // int64 pending_index_rows = 9;
  if (this->_internal_pending_index_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_pending_index_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.IndexDescription)
  return target;
}

size_t IndexDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.IndexDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair params = 3;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->_impl_.params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string index_name = 1;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // string field_name = 4;
  if (!this->_internal_field_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // string index_state_fail_reason = 8;
  if (!this->_internal_index_state_fail_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_state_fail_reason());
  }

  // int64 indexID = 2;
  if (this->_internal_indexid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_indexid());
  }

  // int64 indexed_rows = 5;
  if (this->_internal_indexed_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_indexed_rows());
  }

  // int64 total_rows = 6;
  if (this->_internal_total_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_rows());
  }

  // int64 pending_index_rows = 9;
  if (this->_internal_pending_index_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pending_index_rows());
  }

  // .milvus.proto.common.IndexState state = 7;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexDescription::GetClassData() const { return &_class_data_; }


void IndexDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexDescription*>(&to_msg);
  auto& from = static_cast<const IndexDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.IndexDescription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (!from._internal_field_name().empty()) {
    _this->_internal_set_field_name(from._internal_field_name());
  }
  if (!from._internal_index_state_fail_reason().empty()) {
    _this->_internal_set_index_state_fail_reason(from._internal_index_state_fail_reason());
  }
  if (from._internal_indexid() != 0) {
    _this->_internal_set_indexid(from._internal_indexid());
  }
  if (from._internal_indexed_rows() != 0) {
    _this->_internal_set_indexed_rows(from._internal_indexed_rows());
  }
  if (from._internal_total_rows() != 0) {
    _this->_internal_set_total_rows(from._internal_total_rows());
  }
  if (from._internal_pending_index_rows() != 0) {
    _this->_internal_set_pending_index_rows(from._internal_pending_index_rows());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexDescription::CopyFrom(const IndexDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.IndexDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexDescription::IsInitialized() const {
  return true;
}

void IndexDescription::InternalSwap(IndexDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_name_, lhs_arena,
      &other->_impl_.field_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_state_fail_reason_, lhs_arena,
      &other->_impl_.index_state_fail_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexDescription, _impl_.state_)
      + sizeof(IndexDescription::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(IndexDescription, _impl_.indexid_)>(
          reinterpret_cast<char*>(&_impl_.indexid_),
          reinterpret_cast<char*>(&other->_impl_.indexid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[38]);
}

// ===================================================================

class DescribeIndexResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeIndexResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeIndexResponse::_Internal::status(const DescribeIndexResponse* msg) {
  return *msg->_impl_.status_;
}
void DescribeIndexResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
DescribeIndexResponse::DescribeIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeIndexResponse)
}
DescribeIndexResponse::DescribeIndexResponse(const DescribeIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_descriptions_){from._impl_.index_descriptions_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeIndexResponse)
}

inline void DescribeIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_descriptions_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DescribeIndexResponse::~DescribeIndexResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_descriptions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DescribeIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_descriptions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DescribeIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_descriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_descriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeIndexResponse)
  return target;
}

size_t DescribeIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
  total_size += 1UL * this->_internal_index_descriptions_size();
  for (const auto& msg : this->_impl_.index_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeIndexResponse::GetClassData() const { return &_class_data_; }


void DescribeIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeIndexResponse*>(&to_msg);
  auto& from = static_cast<const DescribeIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_descriptions_.MergeFrom(from._impl_.index_descriptions_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeIndexResponse::CopyFrom(const DescribeIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeIndexResponse::IsInitialized() const {
  return true;
}

void DescribeIndexResponse::InternalSwap(DescribeIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_descriptions_.InternalSwap(&other->_impl_.index_descriptions_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[39]);
}

// ===================================================================

class GetIndexBuildProgressRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetIndexBuildProgressRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetIndexBuildProgressRequest::_Internal::base(const GetIndexBuildProgressRequest* msg) {
  return *msg->_impl_.base_;
}
void GetIndexBuildProgressRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetIndexBuildProgressRequest::GetIndexBuildProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetIndexBuildProgressRequest)
}
GetIndexBuildProgressRequest::GetIndexBuildProgressRequest(const GetIndexBuildProgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIndexBuildProgressRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_name().empty()) {
    _this->_impl_.field_name_.Set(from._internal_field_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetIndexBuildProgressRequest)
}

inline void GetIndexBuildProgressRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetIndexBuildProgressRequest::~GetIndexBuildProgressRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetIndexBuildProgressRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIndexBuildProgressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.field_name_.Destroy();
  _impl_.index_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetIndexBuildProgressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIndexBuildProgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetIndexBuildProgressRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.field_name_.ClearToEmpty();
  _impl_.index_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexBuildProgressRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetIndexBuildProgressRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_field_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetIndexBuildProgressRequest.field_name"));
        } else
          goto handle_unusual;
        continue;
      // string index_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetIndexBuildProgressRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetIndexBuildProgressRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetIndexBuildProgressRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexBuildProgressRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string field_name = 4;
  if (!this->_internal_field_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexBuildProgressRequest.field_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_field_name(), target);
  }

  // string index_name = 5;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexBuildProgressRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetIndexBuildProgressRequest)
  return target;
}

size_t GetIndexBuildProgressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetIndexBuildProgressRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string field_name = 4;
  if (!this->_internal_field_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // string index_name = 5;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIndexBuildProgressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIndexBuildProgressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIndexBuildProgressRequest::GetClassData() const { return &_class_data_; }


void GetIndexBuildProgressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIndexBuildProgressRequest*>(&to_msg);
  auto& from = static_cast<const GetIndexBuildProgressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetIndexBuildProgressRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_field_name().empty()) {
    _this->_internal_set_field_name(from._internal_field_name());
  }
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIndexBuildProgressRequest::CopyFrom(const GetIndexBuildProgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetIndexBuildProgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexBuildProgressRequest::IsInitialized() const {
  return true;
}

void GetIndexBuildProgressRequest::InternalSwap(GetIndexBuildProgressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_name_, lhs_arena,
      &other->_impl_.field_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexBuildProgressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[40]);
}

// ===================================================================

class GetIndexBuildProgressResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetIndexBuildProgressResponse* msg);
};

const ::milvus::proto::common::Status&
GetIndexBuildProgressResponse::_Internal::status(const GetIndexBuildProgressResponse* msg) {
  return *msg->_impl_.status_;
}
void GetIndexBuildProgressResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetIndexBuildProgressResponse::GetIndexBuildProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetIndexBuildProgressResponse)
}
GetIndexBuildProgressResponse::GetIndexBuildProgressResponse(const GetIndexBuildProgressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIndexBuildProgressResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.indexed_rows_){}
    , decltype(_impl_.total_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.indexed_rows_, &from._impl_.indexed_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_rows_) -
    reinterpret_cast<char*>(&_impl_.indexed_rows_)) + sizeof(_impl_.total_rows_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetIndexBuildProgressResponse)
}

inline void GetIndexBuildProgressResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.indexed_rows_){int64_t{0}}
    , decltype(_impl_.total_rows_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetIndexBuildProgressResponse::~GetIndexBuildProgressResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetIndexBuildProgressResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIndexBuildProgressResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetIndexBuildProgressResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIndexBuildProgressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetIndexBuildProgressResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.indexed_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_rows_) -
      reinterpret_cast<char*>(&_impl_.indexed_rows_)) + sizeof(_impl_.total_rows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexBuildProgressResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 indexed_rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.indexed_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetIndexBuildProgressResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetIndexBuildProgressResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int64 indexed_rows = 2;
  if (this->_internal_indexed_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_indexed_rows(), target);
  }

  // int64 total_rows = 3;
  if (this->_internal_total_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetIndexBuildProgressResponse)
  return target;
}

size_t GetIndexBuildProgressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetIndexBuildProgressResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 indexed_rows = 2;
  if (this->_internal_indexed_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_indexed_rows());
  }

  // int64 total_rows = 3;
  if (this->_internal_total_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIndexBuildProgressResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIndexBuildProgressResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIndexBuildProgressResponse::GetClassData() const { return &_class_data_; }


void GetIndexBuildProgressResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIndexBuildProgressResponse*>(&to_msg);
  auto& from = static_cast<const GetIndexBuildProgressResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetIndexBuildProgressResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_indexed_rows() != 0) {
    _this->_internal_set_indexed_rows(from._internal_indexed_rows());
  }
  if (from._internal_total_rows() != 0) {
    _this->_internal_set_total_rows(from._internal_total_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIndexBuildProgressResponse::CopyFrom(const GetIndexBuildProgressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetIndexBuildProgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexBuildProgressResponse::IsInitialized() const {
  return true;
}

void GetIndexBuildProgressResponse::InternalSwap(GetIndexBuildProgressResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetIndexBuildProgressResponse, _impl_.total_rows_)
      + sizeof(GetIndexBuildProgressResponse::_impl_.total_rows_)
      - PROTOBUF_FIELD_OFFSET(GetIndexBuildProgressResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexBuildProgressResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[41]);
}

// ===================================================================

class GetIndexStateRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetIndexStateRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetIndexStateRequest::_Internal::base(const GetIndexStateRequest* msg) {
  return *msg->_impl_.base_;
}
void GetIndexStateRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetIndexStateRequest::GetIndexStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetIndexStateRequest)
}
GetIndexStateRequest::GetIndexStateRequest(const GetIndexStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIndexStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_name().empty()) {
    _this->_impl_.field_name_.Set(from._internal_field_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetIndexStateRequest)
}

inline void GetIndexStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetIndexStateRequest::~GetIndexStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetIndexStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIndexStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.field_name_.Destroy();
  _impl_.index_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetIndexStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIndexStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetIndexStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.field_name_.ClearToEmpty();
  _impl_.index_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStateRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStateRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_field_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStateRequest.field_name"));
        } else
          goto handle_unusual;
        continue;
      // string index_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStateRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetIndexStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetIndexStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string field_name = 4;
  if (!this->_internal_field_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.field_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_field_name(), target);
  }

  // string index_name = 5;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetIndexStateRequest)
  return target;
}

size_t GetIndexStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetIndexStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string field_name = 4;
  if (!this->_internal_field_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // string index_name = 5;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIndexStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIndexStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIndexStateRequest::GetClassData() const { return &_class_data_; }


void GetIndexStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIndexStateRequest*>(&to_msg);
  auto& from = static_cast<const GetIndexStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetIndexStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_field_name().empty()) {
    _this->_internal_set_field_name(from._internal_field_name());
  }
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIndexStateRequest::CopyFrom(const GetIndexStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetIndexStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexStateRequest::IsInitialized() const {
  return true;
}

void GetIndexStateRequest::InternalSwap(GetIndexStateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_name_, lhs_arena,
      &other->_impl_.field_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[42]);
}

// ===================================================================

class GetIndexStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetIndexStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetIndexStateResponse::_Internal::status(const GetIndexStateResponse* msg) {
  return *msg->_impl_.status_;
}
void GetIndexStateResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetIndexStateResponse::GetIndexStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetIndexStateResponse)
}
GetIndexStateResponse::GetIndexStateResponse(const GetIndexStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIndexStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fail_reason_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fail_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fail_reason().empty()) {
    _this->_impl_.fail_reason_.Set(from._internal_fail_reason(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetIndexStateResponse)
}

inline void GetIndexStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fail_reason_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fail_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetIndexStateResponse::~GetIndexStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetIndexStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIndexStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fail_reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetIndexStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIndexStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetIndexStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fail_reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.IndexState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::IndexState>(val));
        } else
          goto handle_unusual;
        continue;
      // string fail_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fail_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStateResponse.fail_reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetIndexStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetIndexStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.IndexState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // string fail_reason = 3;
  if (!this->_internal_fail_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fail_reason().data(), static_cast<int>(this->_internal_fail_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateResponse.fail_reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fail_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetIndexStateResponse)
  return target;
}

size_t GetIndexStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetIndexStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fail_reason = 3;
  if (!this->_internal_fail_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fail_reason());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .milvus.proto.common.IndexState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIndexStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIndexStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIndexStateResponse::GetClassData() const { return &_class_data_; }


void GetIndexStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIndexStateResponse*>(&to_msg);
  auto& from = static_cast<const GetIndexStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetIndexStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fail_reason().empty()) {
    _this->_internal_set_fail_reason(from._internal_fail_reason());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIndexStateResponse::CopyFrom(const GetIndexStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetIndexStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexStateResponse::IsInitialized() const {
  return true;
}

void GetIndexStateResponse::InternalSwap(GetIndexStateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fail_reason_, lhs_arena,
      &other->_impl_.fail_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetIndexStateResponse, _impl_.state_)
      + sizeof(GetIndexStateResponse::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(GetIndexStateResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[43]);
}

// ===================================================================

class DropIndexRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropIndexRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropIndexRequest::_Internal::base(const DropIndexRequest* msg) {
  return *msg->_impl_.base_;
}
void DropIndexRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DropIndexRequest::DropIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DropIndexRequest)
}
DropIndexRequest::DropIndexRequest(const DropIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropIndexRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_name().empty()) {
    _this->_impl_.field_name_.Set(from._internal_field_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropIndexRequest)
}

inline void DropIndexRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DropIndexRequest::~DropIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropIndexRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.field_name_.Destroy();
  _impl_.index_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DropIndexRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropIndexRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.field_name_.ClearToEmpty();
  _impl_.index_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropIndexRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DropIndexRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DropIndexRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_field_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DropIndexRequest.field_name"));
        } else
          goto handle_unusual;
        continue;
      // string index_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DropIndexRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropIndexRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropIndexRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string field_name = 4;
  if (!this->_internal_field_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.field_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_field_name(), target);
  }

  // string index_name = 5;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropIndexRequest)
  return target;
}

size_t DropIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropIndexRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string field_name = 4;
  if (!this->_internal_field_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // string index_name = 5;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropIndexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropIndexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropIndexRequest::GetClassData() const { return &_class_data_; }


void DropIndexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropIndexRequest*>(&to_msg);
  auto& from = static_cast<const DropIndexRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropIndexRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_field_name().empty()) {
    _this->_internal_set_field_name(from._internal_field_name());
  }
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropIndexRequest::CopyFrom(const DropIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropIndexRequest::IsInitialized() const {
  return true;
}

void DropIndexRequest::InternalSwap(DropIndexRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_name_, lhs_arena,
      &other->_impl_.field_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropIndexRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[44]);
}

// ===================================================================

class InsertRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const InsertRequest* msg);
};

const ::milvus::proto::common::MsgBase&
InsertRequest::_Internal::base(const InsertRequest* msg) {
  return *msg->_impl_.base_;
}
void InsertRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void InsertRequest::clear_fields_data() {
  _impl_.fields_data_.Clear();
}
InsertRequest::InsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.InsertRequest)
}
InsertRequest::InsertRequest(const InsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_data_){from._impl_.fields_data_}
    , decltype(_impl_.hash_keys_){from._impl_.hash_keys_}
    , /*decltype(_impl_._hash_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.num_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_name().empty()) {
    _this->_impl_.partition_name_.Set(from._internal_partition_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.num_rows_ = from._impl_.num_rows_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.InsertRequest)
}

inline void InsertRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_data_){arena}
    , decltype(_impl_.hash_keys_){arena}
    , /*decltype(_impl_._hash_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.num_rows_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertRequest::~InsertRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.InsertRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_data_.~RepeatedPtrField();
  _impl_.hash_keys_.~RepeatedField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.partition_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void InsertRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.InsertRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_data_.Clear();
  _impl_.hash_keys_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.partition_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.num_rows_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.InsertRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.InsertRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.InsertRequest.partition_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.schema.FieldData fields_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 hash_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hash_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_hash_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_rows = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.InsertRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.InsertRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.InsertRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.InsertRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  // repeated .milvus.proto.schema.FieldData fields_data = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 hash_keys = 6;
  {
    int byte_size = _impl_._hash_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_hash_keys(), byte_size, target);
    }
  }

  // uint32 num_rows = 7;
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.InsertRequest)
  return target;
}

size_t InsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.InsertRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.schema.FieldData fields_data = 5;
  total_size += 1UL * this->_internal_fields_data_size();
  for (const auto& msg : this->_impl_.fields_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 hash_keys = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.hash_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._hash_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // uint32 num_rows = 7;
  if (this->_internal_num_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertRequest::GetClassData() const { return &_class_data_; }


void InsertRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertRequest*>(&to_msg);
  auto& from = static_cast<const InsertRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.InsertRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_data_.MergeFrom(from._impl_.fields_data_);
  _this->_impl_.hash_keys_.MergeFrom(from._impl_.hash_keys_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_partition_name().empty()) {
    _this->_internal_set_partition_name(from._internal_partition_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_num_rows() != 0) {
    _this->_internal_set_num_rows(from._internal_num_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertRequest::CopyFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.InsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRequest::IsInitialized() const {
  return true;
}

void InsertRequest::InternalSwap(InsertRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_data_.InternalSwap(&other->_impl_.fields_data_);
  _impl_.hash_keys_.InternalSwap(&other->_impl_.hash_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_name_, lhs_arena,
      &other->_impl_.partition_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertRequest, _impl_.num_rows_)
      + sizeof(InsertRequest::_impl_.num_rows_)
      - PROTOBUF_FIELD_OFFSET(InsertRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[45]);
}

// ===================================================================

class UpsertRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const UpsertRequest* msg);
};

const ::milvus::proto::common::MsgBase&
UpsertRequest::_Internal::base(const UpsertRequest* msg) {
  return *msg->_impl_.base_;
}
void UpsertRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void UpsertRequest::clear_fields_data() {
  _impl_.fields_data_.Clear();
}
UpsertRequest::UpsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.UpsertRequest)
}
UpsertRequest::UpsertRequest(const UpsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpsertRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_data_){from._impl_.fields_data_}
    , decltype(_impl_.hash_keys_){from._impl_.hash_keys_}
    , /*decltype(_impl_._hash_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.num_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_name().empty()) {
    _this->_impl_.partition_name_.Set(from._internal_partition_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.num_rows_ = from._impl_.num_rows_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.UpsertRequest)
}

inline void UpsertRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_data_){arena}
    , decltype(_impl_.hash_keys_){arena}
    , /*decltype(_impl_._hash_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.num_rows_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpsertRequest::~UpsertRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.UpsertRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpsertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_data_.~RepeatedPtrField();
  _impl_.hash_keys_.~RepeatedField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.partition_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void UpsertRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.UpsertRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_data_.Clear();
  _impl_.hash_keys_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.partition_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.num_rows_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpsertRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.UpsertRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.UpsertRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.UpsertRequest.partition_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.schema.FieldData fields_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 hash_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hash_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_hash_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_rows = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpsertRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.UpsertRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.UpsertRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.UpsertRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.UpsertRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  // repeated .milvus.proto.schema.FieldData fields_data = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 hash_keys = 6;
  {
    int byte_size = _impl_._hash_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_hash_keys(), byte_size, target);
    }
  }

  // uint32 num_rows = 7;
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.UpsertRequest)
  return target;
}

size_t UpsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.UpsertRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.schema.FieldData fields_data = 5;
  total_size += 1UL * this->_internal_fields_data_size();
  for (const auto& msg : this->_impl_.fields_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 hash_keys = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.hash_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._hash_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // uint32 num_rows = 7;
  if (this->_internal_num_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpsertRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpsertRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpsertRequest::GetClassData() const { return &_class_data_; }


void UpsertRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpsertRequest*>(&to_msg);
  auto& from = static_cast<const UpsertRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.UpsertRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_data_.MergeFrom(from._impl_.fields_data_);
  _this->_impl_.hash_keys_.MergeFrom(from._impl_.hash_keys_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_partition_name().empty()) {
    _this->_internal_set_partition_name(from._internal_partition_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_num_rows() != 0) {
    _this->_internal_set_num_rows(from._internal_num_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpsertRequest::CopyFrom(const UpsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.UpsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpsertRequest::IsInitialized() const {
  return true;
}

void UpsertRequest::InternalSwap(UpsertRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_data_.InternalSwap(&other->_impl_.fields_data_);
  _impl_.hash_keys_.InternalSwap(&other->_impl_.hash_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_name_, lhs_arena,
      &other->_impl_.partition_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpsertRequest, _impl_.num_rows_)
      + sizeof(UpsertRequest::_impl_.num_rows_)
      - PROTOBUF_FIELD_OFFSET(UpsertRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpsertRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[46]);
}

// ===================================================================

class MutationResult::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const MutationResult* msg);
  static const ::milvus::proto::schema::IDs& ids(const MutationResult* msg);
};

const ::milvus::proto::common::Status&
MutationResult::_Internal::status(const MutationResult* msg) {
  return *msg->_impl_.status_;
}
const ::milvus::proto::schema::IDs&
MutationResult::_Internal::ids(const MutationResult* msg) {
  return *msg->_impl_.ids_;
}
void MutationResult::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MutationResult::clear_ids() {
  if (GetArenaForAllocation() == nullptr && _impl_.ids_ != nullptr) {
    delete _impl_.ids_;
  }
  _impl_.ids_ = nullptr;
}
MutationResult::MutationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.MutationResult)
}
MutationResult::MutationResult(const MutationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MutationResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.succ_index_){from._impl_.succ_index_}
    , /*decltype(_impl_._succ_index_cached_byte_size_)*/{0}
    , decltype(_impl_.err_index_){from._impl_.err_index_}
    , /*decltype(_impl_._err_index_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.ids_){nullptr}
    , decltype(_impl_.insert_cnt_){}
    , decltype(_impl_.delete_cnt_){}
    , decltype(_impl_.upsert_cnt_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.acknowledged_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_ids()) {
    _this->_impl_.ids_ = new ::milvus::proto::schema::IDs(*from._impl_.ids_);
  }
  ::memcpy(&_impl_.insert_cnt_, &from._impl_.insert_cnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.acknowledged_) -
    reinterpret_cast<char*>(&_impl_.insert_cnt_)) + sizeof(_impl_.acknowledged_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.MutationResult)
}

inline void MutationResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.succ_index_){arena}
    , /*decltype(_impl_._succ_index_cached_byte_size_)*/{0}
    , decltype(_impl_.err_index_){arena}
    , /*decltype(_impl_._err_index_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.ids_){nullptr}
    , decltype(_impl_.insert_cnt_){int64_t{0}}
    , decltype(_impl_.delete_cnt_){int64_t{0}}
    , decltype(_impl_.upsert_cnt_){int64_t{0}}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.acknowledged_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MutationResult::~MutationResult() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.MutationResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MutationResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.succ_index_.~RepeatedField();
  _impl_.err_index_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.ids_;
}

void MutationResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MutationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.MutationResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.succ_index_.Clear();
  _impl_.err_index_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ids_ != nullptr) {
    delete _impl_.ids_;
  }
  _impl_.ids_ = nullptr;
  ::memset(&_impl_.insert_cnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.acknowledged_) -
      reinterpret_cast<char*>(&_impl_.insert_cnt_)) + sizeof(_impl_.acknowledged_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MutationResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.schema.IDs IDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 succ_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_succ_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_succ_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 err_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_err_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_err_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool acknowledged = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.acknowledged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 insert_cnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.insert_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 delete_cnt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.delete_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 upsert_cnt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.upsert_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MutationResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.MutationResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.schema.IDs IDs = 2;
  if (this->_internal_has_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ids(this),
        _Internal::ids(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 succ_index = 3;
  {
    int byte_size = _impl_._succ_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_succ_index(), byte_size, target);
    }
  }

  // repeated uint32 err_index = 4;
  {
    int byte_size = _impl_._err_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_err_index(), byte_size, target);
    }
  }

  // bool acknowledged = 5;
  if (this->_internal_acknowledged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_acknowledged(), target);
  }

  // int64 insert_cnt = 6;
  if (this->_internal_insert_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_insert_cnt(), target);
  }

  // int64 delete_cnt = 7;
  if (this->_internal_delete_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_delete_cnt(), target);
  }

  // int64 upsert_cnt = 8;
  if (this->_internal_upsert_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_upsert_cnt(), target);
  }

  // uint64 timestamp = 9;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.MutationResult)
  return target;
}

size_t MutationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.MutationResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 succ_index = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.succ_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._succ_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 err_index = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.err_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._err_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .milvus.proto.schema.IDs IDs = 2;
  if (this->_internal_has_ids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ids_);
  }

  // int64 insert_cnt = 6;
  if (this->_internal_insert_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_insert_cnt());
  }

  // int64 delete_cnt = 7;
  if (this->_internal_delete_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_delete_cnt());
  }

  // int64 upsert_cnt = 8;
  if (this->_internal_upsert_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_upsert_cnt());
  }

  // uint64 timestamp = 9;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // bool acknowledged = 5;
  if (this->_internal_acknowledged() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MutationResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MutationResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MutationResult::GetClassData() const { return &_class_data_; }


void MutationResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MutationResult*>(&to_msg);
  auto& from = static_cast<const MutationResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.MutationResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.succ_index_.MergeFrom(from._impl_.succ_index_);
  _this->_impl_.err_index_.MergeFrom(from._impl_.err_index_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_ids()) {
    _this->_internal_mutable_ids()->::milvus::proto::schema::IDs::MergeFrom(
        from._internal_ids());
  }
  if (from._internal_insert_cnt() != 0) {
    _this->_internal_set_insert_cnt(from._internal_insert_cnt());
  }
  if (from._internal_delete_cnt() != 0) {
    _this->_internal_set_delete_cnt(from._internal_delete_cnt());
  }
  if (from._internal_upsert_cnt() != 0) {
    _this->_internal_set_upsert_cnt(from._internal_upsert_cnt());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_acknowledged() != 0) {
    _this->_internal_set_acknowledged(from._internal_acknowledged());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MutationResult::CopyFrom(const MutationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.MutationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationResult::IsInitialized() const {
  return true;
}

void MutationResult::InternalSwap(MutationResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.succ_index_.InternalSwap(&other->_impl_.succ_index_);
  _impl_.err_index_.InternalSwap(&other->_impl_.err_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MutationResult, _impl_.acknowledged_)
      + sizeof(MutationResult::_impl_.acknowledged_)
      - PROTOBUF_FIELD_OFFSET(MutationResult, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MutationResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[47]);
}

// ===================================================================

class DeleteRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DeleteRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DeleteRequest::_Internal::base(const DeleteRequest* msg) {
  return *msg->_impl_.base_;
}
void DeleteRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DeleteRequest::DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_keys_){from._impl_.hash_keys_}
    , /*decltype(_impl_._hash_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.expr_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_name().empty()) {
    _this->_impl_.partition_name_.Set(from._internal_partition_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.expr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_expr().empty()) {
    _this->_impl_.expr_.Set(from._internal_expr(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DeleteRequest)
}

inline void DeleteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_keys_){arena}
    , /*decltype(_impl_._hash_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.expr_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.expr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DeleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_keys_.~RepeatedField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.partition_name_.Destroy();
  _impl_.expr_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DeleteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_keys_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.partition_name_.ClearToEmpty();
  _impl_.expr_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DeleteRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DeleteRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DeleteRequest.partition_name"));
        } else
          goto handle_unusual;
        continue;
      // string expr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_expr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DeleteRequest.expr"));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 hash_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hash_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_hash_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DeleteRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DeleteRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DeleteRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  // string expr = 5;
  if (!this->_internal_expr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expr().data(), static_cast<int>(this->_internal_expr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DeleteRequest.expr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_expr(), target);
  }

  // repeated uint32 hash_keys = 6;
  {
    int byte_size = _impl_._hash_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_hash_keys(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 hash_keys = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.hash_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._hash_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (!this->_internal_partition_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // string expr = 5;
  if (!this->_internal_expr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expr());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRequest::GetClassData() const { return &_class_data_; }


void DeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteRequest*>(&to_msg);
  auto& from = static_cast<const DeleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hash_keys_.MergeFrom(from._impl_.hash_keys_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_partition_name().empty()) {
    _this->_internal_set_partition_name(from._internal_partition_name());
  }
  if (!from._internal_expr().empty()) {
    _this->_internal_set_expr(from._internal_expr());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hash_keys_.InternalSwap(&other->_impl_.hash_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_name_, lhs_arena,
      &other->_impl_.partition_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.expr_, lhs_arena,
      &other->_impl_.expr_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[48]);
}

// ===================================================================

class SearchRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SearchRequest* msg);
};

const ::milvus::proto::common::MsgBase&
SearchRequest::_Internal::base(const SearchRequest* msg) {
  return *msg->_impl_.base_;
}
void SearchRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void SearchRequest::clear_search_params() {
  _impl_.search_params_.Clear();
}
SearchRequest::SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){from._impl_.partition_names_}
    , decltype(_impl_.output_fields_){from._impl_.output_fields_}
    , decltype(_impl_.search_params_){from._impl_.search_params_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.dsl_){}
    , decltype(_impl_.placeholder_group_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.travel_timestamp_){}
    , decltype(_impl_.dsl_type_){}
    , decltype(_impl_.consistency_level_){}
    , decltype(_impl_.guarantee_timestamp_){}
    , decltype(_impl_.nq_){}
    , decltype(_impl_.not_return_all_meta_){}
    , decltype(_impl_.use_default_consistency_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dsl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dsl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dsl().empty()) {
    _this->_impl_.dsl_.Set(from._internal_dsl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.placeholder_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.placeholder_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_placeholder_group().empty()) {
    _this->_impl_.placeholder_group_.Set(from._internal_placeholder_group(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.travel_timestamp_, &from._impl_.travel_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_default_consistency_) -
    reinterpret_cast<char*>(&_impl_.travel_timestamp_)) + sizeof(_impl_.use_default_consistency_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SearchRequest)
}

inline void SearchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){arena}
    , decltype(_impl_.output_fields_){arena}
    , decltype(_impl_.search_params_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.dsl_){}
    , decltype(_impl_.placeholder_group_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.travel_timestamp_){uint64_t{0u}}
    , decltype(_impl_.dsl_type_){0}
    , decltype(_impl_.consistency_level_){0}
    , decltype(_impl_.guarantee_timestamp_){uint64_t{0u}}
    , decltype(_impl_.nq_){int64_t{0}}
    , decltype(_impl_.not_return_all_meta_){false}
    , decltype(_impl_.use_default_consistency_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dsl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dsl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.placeholder_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.placeholder_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SearchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_names_.~RepeatedPtrField();
  _impl_.output_fields_.~RepeatedPtrField();
  _impl_.search_params_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.dsl_.Destroy();
  _impl_.placeholder_group_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void SearchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SearchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partition_names_.Clear();
  _impl_.output_fields_.Clear();
  _impl_.search_params_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.dsl_.ClearToEmpty();
  _impl_.placeholder_group_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.travel_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.use_default_consistency_) -
      reinterpret_cast<char*>(&_impl_.travel_timestamp_)) + sizeof(_impl_.use_default_consistency_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.SearchRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.SearchRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string partition_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.SearchRequest.partition_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string dsl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_dsl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.SearchRequest.dsl"));
        } else
          goto handle_unusual;
        continue;
      // bytes placeholder_group = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_placeholder_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.DslType dsl_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dsl_type(static_cast<::milvus::proto::common::DslType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string output_fields = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.SearchRequest.output_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair search_params = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_search_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 travel_timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.travel_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 guarantee_timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.guarantee_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 nq = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.nq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool not_return_all_meta = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.not_return_all_meta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.ConsistencyLevel consistency_level = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_consistency_level(static_cast<::milvus::proto::common::ConsistencyLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // bool use_default_consistency = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.use_default_consistency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SearchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.partition_names");
    target = stream->WriteString(4, s, target);
  }

  // string dsl = 5;
  if (!this->_internal_dsl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dsl().data(), static_cast<int>(this->_internal_dsl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.dsl");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dsl(), target);
  }

  // bytes placeholder_group = 6;
  if (!this->_internal_placeholder_group().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_placeholder_group(), target);
  }

  // .milvus.proto.common.DslType dsl_type = 7;
  if (this->_internal_dsl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_dsl_type(), target);
  }

  // repeated string output_fields = 8;
  for (int i = 0, n = this->_internal_output_fields_size(); i < n; i++) {
    const auto& s = this->_internal_output_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.output_fields");
    target = stream->WriteString(8, s, target);
  }

  // repeated .milvus.proto.common.KeyValuePair search_params = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_search_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_search_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 travel_timestamp = 10;
  if (this->_internal_travel_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_travel_timestamp(), target);
  }

  // uint64 guarantee_timestamp = 11;
  if (this->_internal_guarantee_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_guarantee_timestamp(), target);
  }

  // int64 nq = 12;
  if (this->_internal_nq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_nq(), target);
  }

  // bool not_return_all_meta = 13;
  if (this->_internal_not_return_all_meta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_not_return_all_meta(), target);
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 14;
  if (this->_internal_consistency_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_consistency_level(), target);
  }

  // bool use_default_consistency = 15;
  if (this->_internal_use_default_consistency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_use_default_consistency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SearchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.partition_names_.size());
  for (int i = 0, n = _impl_.partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.partition_names_.Get(i));
  }

  // repeated string output_fields = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.output_fields_.size());
  for (int i = 0, n = _impl_.output_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.output_fields_.Get(i));
  }

  // repeated .milvus.proto.common.KeyValuePair search_params = 9;
  total_size += 1UL * this->_internal_search_params_size();
  for (const auto& msg : this->_impl_.search_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string dsl = 5;
  if (!this->_internal_dsl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dsl());
  }

  // bytes placeholder_group = 6;
  if (!this->_internal_placeholder_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_placeholder_group());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // uint64 travel_timestamp = 10;
  if (this->_internal_travel_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_travel_timestamp());
  }

  // .milvus.proto.common.DslType dsl_type = 7;
  if (this->_internal_dsl_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dsl_type());
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 14;
  if (this->_internal_consistency_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_consistency_level());
  }

  // uint64 guarantee_timestamp = 11;
  if (this->_internal_guarantee_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guarantee_timestamp());
  }

  // int64 nq = 12;
  if (this->_internal_nq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nq());
  }

  // bool not_return_all_meta = 13;
  if (this->_internal_not_return_all_meta() != 0) {
    total_size += 1 + 1;
  }

  // bool use_default_consistency = 15;
  if (this->_internal_use_default_consistency() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchRequest::GetClassData() const { return &_class_data_; }


void SearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchRequest*>(&to_msg);
  auto& from = static_cast<const SearchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SearchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partition_names_.MergeFrom(from._impl_.partition_names_);
  _this->_impl_.output_fields_.MergeFrom(from._impl_.output_fields_);
  _this->_impl_.search_params_.MergeFrom(from._impl_.search_params_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_dsl().empty()) {
    _this->_internal_set_dsl(from._internal_dsl());
  }
  if (!from._internal_placeholder_group().empty()) {
    _this->_internal_set_placeholder_group(from._internal_placeholder_group());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_travel_timestamp() != 0) {
    _this->_internal_set_travel_timestamp(from._internal_travel_timestamp());
  }
  if (from._internal_dsl_type() != 0) {
    _this->_internal_set_dsl_type(from._internal_dsl_type());
  }
  if (from._internal_consistency_level() != 0) {
    _this->_internal_set_consistency_level(from._internal_consistency_level());
  }
  if (from._internal_guarantee_timestamp() != 0) {
    _this->_internal_set_guarantee_timestamp(from._internal_guarantee_timestamp());
  }
  if (from._internal_nq() != 0) {
    _this->_internal_set_nq(from._internal_nq());
  }
  if (from._internal_not_return_all_meta() != 0) {
    _this->_internal_set_not_return_all_meta(from._internal_not_return_all_meta());
  }
  if (from._internal_use_default_consistency() != 0) {
    _this->_internal_set_use_default_consistency(from._internal_use_default_consistency());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::InternalSwap(SearchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partition_names_.InternalSwap(&other->_impl_.partition_names_);
  _impl_.output_fields_.InternalSwap(&other->_impl_.output_fields_);
  _impl_.search_params_.InternalSwap(&other->_impl_.search_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dsl_, lhs_arena,
      &other->_impl_.dsl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.placeholder_group_, lhs_arena,
      &other->_impl_.placeholder_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchRequest, _impl_.use_default_consistency_)
      + sizeof(SearchRequest::_impl_.use_default_consistency_)
      - PROTOBUF_FIELD_OFFSET(SearchRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[49]);
}

// ===================================================================

class Hits::_Internal {
 public:
};

Hits::Hits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.Hits)
}
Hits::Hits(const Hits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Hits* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , decltype(_impl_.row_data_){from._impl_.row_data_}
    , decltype(_impl_.scores_){from._impl_.scores_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.Hits)
}

inline void Hits::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , decltype(_impl_.row_data_){arena}
    , decltype(_impl_.scores_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Hits::~Hits() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.Hits)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Hits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedField();
  _impl_.row_data_.~RepeatedPtrField();
  _impl_.scores_.~RepeatedField();
}

void Hits::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Hits::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.Hits)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.row_data_.Clear();
  _impl_.scores_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hits::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 IDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes row_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_row_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float scores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_scores(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_scores(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Hits::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.Hits)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 IDs = 1;
  {
    int byte_size = _impl_._ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  // repeated bytes row_data = 2;
  for (int i = 0, n = this->_internal_row_data_size(); i < n; i++) {
    const auto& s = this->_internal_row_data(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated float scores = 3;
  if (this->_internal_scores_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_scores(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.Hits)
  return target;
}

size_t Hits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.Hits)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 IDs = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes row_data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.row_data_.size());
  for (int i = 0, n = _impl_.row_data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.row_data_.Get(i));
  }

  // repeated float scores = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_scores_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Hits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Hits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Hits::GetClassData() const { return &_class_data_; }


void Hits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Hits*>(&to_msg);
  auto& from = static_cast<const Hits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.Hits)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_impl_.row_data_.MergeFrom(from._impl_.row_data_);
  _this->_impl_.scores_.MergeFrom(from._impl_.scores_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Hits::CopyFrom(const Hits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.Hits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hits::IsInitialized() const {
  return true;
}

void Hits::InternalSwap(Hits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  _impl_.row_data_.InternalSwap(&other->_impl_.row_data_);
  _impl_.scores_.InternalSwap(&other->_impl_.scores_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[50]);
}

// ===================================================================

class SearchResults::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const SearchResults* msg);
  static const ::milvus::proto::schema::SearchResultData& results(const SearchResults* msg);
};

const ::milvus::proto::common::Status&
SearchResults::_Internal::status(const SearchResults* msg) {
  return *msg->_impl_.status_;
}
const ::milvus::proto::schema::SearchResultData&
SearchResults::_Internal::results(const SearchResults* msg) {
  return *msg->_impl_.results_;
}
void SearchResults::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SearchResults::clear_results() {
  if (GetArenaForAllocation() == nullptr && _impl_.results_ != nullptr) {
    delete _impl_.results_;
  }
  _impl_.results_ = nullptr;
}
SearchResults::SearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SearchResults)
}
SearchResults::SearchResults(const SearchResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_name_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.results_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_results()) {
    _this->_impl_.results_ = new ::milvus::proto::schema::SearchResultData(*from._impl_.results_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SearchResults)
}

inline void SearchResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_name_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.results_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchResults::~SearchResults() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SearchResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.results_;
}

void SearchResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SearchResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.results_ != nullptr) {
    delete _impl_.results_;
  }
  _impl_.results_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.schema.SearchResultData results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.SearchResults.collection_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SearchResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.schema.SearchResultData results = 2;
  if (this->_internal_has_results()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::results(this),
        _Internal::results(this).GetCachedSize(), target, stream);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchResults.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SearchResults)
  return target;
}

size_t SearchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SearchResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .milvus.proto.schema.SearchResultData results = 2;
  if (this->_internal_has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.results_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchResults::GetClassData() const { return &_class_data_; }


void SearchResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchResults*>(&to_msg);
  auto& from = static_cast<const SearchResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SearchResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_results()) {
    _this->_internal_mutable_results()->::milvus::proto::schema::SearchResultData::MergeFrom(
        from._internal_results());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchResults::CopyFrom(const SearchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResults::IsInitialized() const {
  return true;
}

void SearchResults::InternalSwap(SearchResults* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchResults, _impl_.results_)
      + sizeof(SearchResults::_impl_.results_)
      - PROTOBUF_FIELD_OFFSET(SearchResults, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[51]);
}

// ===================================================================

class FlushRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const FlushRequest* msg);
};

const ::milvus::proto::common::MsgBase&
FlushRequest::_Internal::base(const FlushRequest* msg) {
  return *msg->_impl_.base_;
}
void FlushRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
FlushRequest::FlushRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.FlushRequest)
}
FlushRequest::FlushRequest(const FlushRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlushRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_names_){from._impl_.collection_names_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.FlushRequest)
}

inline void FlushRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_names_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FlushRequest::~FlushRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.FlushRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlushRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collection_names_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void FlushRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlushRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.FlushRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collection_names_.Clear();
  _impl_.db_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.FlushRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string collection_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collection_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.FlushRequest.collection_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlushRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.FlushRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.FlushRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // repeated string collection_names = 3;
  for (int i = 0, n = this->_internal_collection_names_size(); i < n; i++) {
    const auto& s = this->_internal_collection_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.FlushRequest.collection_names");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.FlushRequest)
  return target;
}

size_t FlushRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.FlushRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collection_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.collection_names_.size());
  for (int i = 0, n = _impl_.collection_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.collection_names_.Get(i));
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlushRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushRequest::GetClassData() const { return &_class_data_; }


void FlushRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlushRequest*>(&to_msg);
  auto& from = static_cast<const FlushRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.FlushRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collection_names_.MergeFrom(from._impl_.collection_names_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlushRequest::CopyFrom(const FlushRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.FlushRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushRequest::IsInitialized() const {
  return true;
}

void FlushRequest::InternalSwap(FlushRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.collection_names_.InternalSwap(&other->_impl_.collection_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[52]);
}

// ===================================================================

FlushResponse_CollSegIDsEntry_DoNotUse::FlushResponse_CollSegIDsEntry_DoNotUse() {}
FlushResponse_CollSegIDsEntry_DoNotUse::FlushResponse_CollSegIDsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlushResponse_CollSegIDsEntry_DoNotUse::MergeFrom(const FlushResponse_CollSegIDsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlushResponse_CollSegIDsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[53]);
}

// ===================================================================

FlushResponse_FlushCollSegIDsEntry_DoNotUse::FlushResponse_FlushCollSegIDsEntry_DoNotUse() {}
FlushResponse_FlushCollSegIDsEntry_DoNotUse::FlushResponse_FlushCollSegIDsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlushResponse_FlushCollSegIDsEntry_DoNotUse::MergeFrom(const FlushResponse_FlushCollSegIDsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlushResponse_FlushCollSegIDsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[54]);
}

// ===================================================================

FlushResponse_CollSealTimesEntry_DoNotUse::FlushResponse_CollSealTimesEntry_DoNotUse() {}
FlushResponse_CollSealTimesEntry_DoNotUse::FlushResponse_CollSealTimesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlushResponse_CollSealTimesEntry_DoNotUse::MergeFrom(const FlushResponse_CollSealTimesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlushResponse_CollSealTimesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[55]);
}

// ===================================================================

class FlushResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const FlushResponse* msg);
};

const ::milvus::proto::common::Status&
FlushResponse::_Internal::status(const FlushResponse* msg) {
  return *msg->_impl_.status_;
}
void FlushResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void FlushResponse::clear_coll_segids() {
  _impl_.coll_segids_.Clear();
}
void FlushResponse::clear_flush_coll_segids() {
  _impl_.flush_coll_segids_.Clear();
}
FlushResponse::FlushResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &FlushResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.FlushResponse)
}
FlushResponse::FlushResponse(const FlushResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlushResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.coll_segids_)*/{}
    , /*decltype(_impl_.flush_coll_segids_)*/{}
    , /*decltype(_impl_.coll_seal_times_)*/{}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.coll_segids_.MergeFrom(from._impl_.coll_segids_);
  _this->_impl_.flush_coll_segids_.MergeFrom(from._impl_.flush_coll_segids_);
  _this->_impl_.coll_seal_times_.MergeFrom(from._impl_.coll_seal_times_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.FlushResponse)
}

inline void FlushResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.coll_segids_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.flush_coll_segids_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.coll_seal_times_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FlushResponse::~FlushResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.FlushResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void FlushResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.coll_segids_.Destruct();
  _impl_.coll_segids_.~MapField();
  _impl_.flush_coll_segids_.Destruct();
  _impl_.flush_coll_segids_.~MapField();
  _impl_.coll_seal_times_.Destruct();
  _impl_.coll_seal_times_.~MapField();
  _impl_.db_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void FlushResponse::ArenaDtor(void* object) {
  FlushResponse* _this = reinterpret_cast< FlushResponse* >(object);
  _this->_impl_.coll_segids_.Destruct();
  _this->_impl_.flush_coll_segids_.Destruct();
  _this->_impl_.coll_seal_times_.Destruct();
}
void FlushResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlushResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.FlushResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coll_segids_.Clear();
  _impl_.flush_coll_segids_.Clear();
  _impl_.coll_seal_times_.Clear();
  _impl_.db_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.FlushResponse.db_name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .milvus.proto.schema.LongArray> coll_segIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.coll_segids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .milvus.proto.schema.LongArray> flush_coll_segIDs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.flush_coll_segids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, int64> coll_seal_times = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.coll_seal_times_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlushResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.FlushResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.FlushResponse.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // map<string, .milvus.proto.schema.LongArray> coll_segIDs = 3;
  if (!this->_internal_coll_segids().empty()) {
    using MapType = ::_pb::Map<std::string, ::milvus::proto::schema::LongArray>;
    using WireHelper = FlushResponse_CollSegIDsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_coll_segids();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "milvus.proto.milvus.FlushResponse.CollSegIDsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .milvus.proto.schema.LongArray> flush_coll_segIDs = 4;
  if (!this->_internal_flush_coll_segids().empty()) {
    using MapType = ::_pb::Map<std::string, ::milvus::proto::schema::LongArray>;
    using WireHelper = FlushResponse_FlushCollSegIDsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_flush_coll_segids();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "milvus.proto.milvus.FlushResponse.FlushCollSegIDsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, int64> coll_seal_times = 5;
  if (!this->_internal_coll_seal_times().empty()) {
    using MapType = ::_pb::Map<std::string, int64_t>;
    using WireHelper = FlushResponse_CollSealTimesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_coll_seal_times();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "milvus.proto.milvus.FlushResponse.CollSealTimesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.FlushResponse)
  return target;
}

size_t FlushResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.FlushResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .milvus.proto.schema.LongArray> coll_segIDs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_coll_segids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >::const_iterator
      it = this->_internal_coll_segids().begin();
      it != this->_internal_coll_segids().end(); ++it) {
    total_size += FlushResponse_CollSegIDsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .milvus.proto.schema.LongArray> flush_coll_segIDs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_flush_coll_segids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >::const_iterator
      it = this->_internal_flush_coll_segids().begin();
      it != this->_internal_flush_coll_segids().end(); ++it) {
    total_size += FlushResponse_FlushCollSegIDsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> coll_seal_times = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_coll_seal_times_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
      it = this->_internal_coll_seal_times().begin();
      it != this->_internal_coll_seal_times().end(); ++it) {
    total_size += FlushResponse_CollSealTimesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlushResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushResponse::GetClassData() const { return &_class_data_; }


void FlushResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlushResponse*>(&to_msg);
  auto& from = static_cast<const FlushResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.FlushResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.coll_segids_.MergeFrom(from._impl_.coll_segids_);
  _this->_impl_.flush_coll_segids_.MergeFrom(from._impl_.flush_coll_segids_);
  _this->_impl_.coll_seal_times_.MergeFrom(from._impl_.coll_seal_times_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlushResponse::CopyFrom(const FlushResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.FlushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushResponse::IsInitialized() const {
  return true;
}

void FlushResponse::InternalSwap(FlushResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.coll_segids_.InternalSwap(&other->_impl_.coll_segids_);
  _impl_.flush_coll_segids_.InternalSwap(&other->_impl_.flush_coll_segids_);
  _impl_.coll_seal_times_.InternalSwap(&other->_impl_.coll_seal_times_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[56]);
}

// ===================================================================

class QueryRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const QueryRequest* msg);
};

const ::milvus::proto::common::MsgBase&
QueryRequest::_Internal::base(const QueryRequest* msg) {
  return *msg->_impl_.base_;
}
void QueryRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void QueryRequest::clear_query_params() {
  _impl_.query_params_.Clear();
}
QueryRequest::QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.QueryRequest)
}
QueryRequest::QueryRequest(const QueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.output_fields_){from._impl_.output_fields_}
    , decltype(_impl_.partition_names_){from._impl_.partition_names_}
    , decltype(_impl_.query_params_){from._impl_.query_params_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.expr_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.travel_timestamp_){}
    , decltype(_impl_.guarantee_timestamp_){}
    , decltype(_impl_.consistency_level_){}
    , decltype(_impl_.not_return_all_meta_){}
    , decltype(_impl_.use_default_consistency_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.expr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_expr().empty()) {
    _this->_impl_.expr_.Set(from._internal_expr(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.travel_timestamp_, &from._impl_.travel_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_default_consistency_) -
    reinterpret_cast<char*>(&_impl_.travel_timestamp_)) + sizeof(_impl_.use_default_consistency_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.QueryRequest)
}

inline void QueryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.output_fields_){arena}
    , decltype(_impl_.partition_names_){arena}
    , decltype(_impl_.query_params_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.expr_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.travel_timestamp_){uint64_t{0u}}
    , decltype(_impl_.guarantee_timestamp_){uint64_t{0u}}
    , decltype(_impl_.consistency_level_){0}
    , decltype(_impl_.not_return_all_meta_){false}
    , decltype(_impl_.use_default_consistency_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.expr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryRequest::~QueryRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.QueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_fields_.~RepeatedPtrField();
  _impl_.partition_names_.~RepeatedPtrField();
  _impl_.query_params_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.expr_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void QueryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.QueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_fields_.Clear();
  _impl_.partition_names_.Clear();
  _impl_.query_params_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.expr_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.travel_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.use_default_consistency_) -
      reinterpret_cast<char*>(&_impl_.travel_timestamp_)) + sizeof(_impl_.use_default_consistency_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.QueryRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.QueryRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string expr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_expr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.QueryRequest.expr"));
        } else
          goto handle_unusual;
        continue;
      // repeated string output_fields = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.QueryRequest.output_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string partition_names = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.QueryRequest.partition_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 travel_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.travel_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 guarantee_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.guarantee_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair query_params = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_query_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool not_return_all_meta = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.not_return_all_meta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_consistency_level(static_cast<::milvus::proto::common::ConsistencyLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // bool use_default_consistency = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.use_default_consistency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.QueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QueryRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QueryRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string expr = 4;
  if (!this->_internal_expr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expr().data(), static_cast<int>(this->_internal_expr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QueryRequest.expr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_expr(), target);
  }

  // repeated string output_fields = 5;
  for (int i = 0, n = this->_internal_output_fields_size(); i < n; i++) {
    const auto& s = this->_internal_output_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QueryRequest.output_fields");
    target = stream->WriteString(5, s, target);
  }

  // repeated string partition_names = 6;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QueryRequest.partition_names");
    target = stream->WriteString(6, s, target);
  }

  // uint64 travel_timestamp = 7;
  if (this->_internal_travel_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_travel_timestamp(), target);
  }

  // uint64 guarantee_timestamp = 8;
  if (this->_internal_guarantee_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_guarantee_timestamp(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair query_params = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_query_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_query_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool not_return_all_meta = 10;
  if (this->_internal_not_return_all_meta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_not_return_all_meta(), target);
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
  if (this->_internal_consistency_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_consistency_level(), target);
  }

  // bool use_default_consistency = 12;
  if (this->_internal_use_default_consistency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_use_default_consistency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.QueryRequest)
  return target;
}

size_t QueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.QueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string output_fields = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.output_fields_.size());
  for (int i = 0, n = _impl_.output_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.output_fields_.Get(i));
  }

  // repeated string partition_names = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.partition_names_.size());
  for (int i = 0, n = _impl_.partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.partition_names_.Get(i));
  }

  // repeated .milvus.proto.common.KeyValuePair query_params = 9;
  total_size += 1UL * this->_internal_query_params_size();
  for (const auto& msg : this->_impl_.query_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string expr = 4;
  if (!this->_internal_expr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expr());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // uint64 travel_timestamp = 7;
  if (this->_internal_travel_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_travel_timestamp());
  }

  // uint64 guarantee_timestamp = 8;
  if (this->_internal_guarantee_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guarantee_timestamp());
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
  if (this->_internal_consistency_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_consistency_level());
  }

  // bool not_return_all_meta = 10;
  if (this->_internal_not_return_all_meta() != 0) {
    total_size += 1 + 1;
  }

  // bool use_default_consistency = 12;
  if (this->_internal_use_default_consistency() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryRequest::GetClassData() const { return &_class_data_; }


void QueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryRequest*>(&to_msg);
  auto& from = static_cast<const QueryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.QueryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.output_fields_.MergeFrom(from._impl_.output_fields_);
  _this->_impl_.partition_names_.MergeFrom(from._impl_.partition_names_);
  _this->_impl_.query_params_.MergeFrom(from._impl_.query_params_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_expr().empty()) {
    _this->_internal_set_expr(from._internal_expr());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_travel_timestamp() != 0) {
    _this->_internal_set_travel_timestamp(from._internal_travel_timestamp());
  }
  if (from._internal_guarantee_timestamp() != 0) {
    _this->_internal_set_guarantee_timestamp(from._internal_guarantee_timestamp());
  }
  if (from._internal_consistency_level() != 0) {
    _this->_internal_set_consistency_level(from._internal_consistency_level());
  }
  if (from._internal_not_return_all_meta() != 0) {
    _this->_internal_set_not_return_all_meta(from._internal_not_return_all_meta());
  }
  if (from._internal_use_default_consistency() != 0) {
    _this->_internal_set_use_default_consistency(from._internal_use_default_consistency());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const {
  return true;
}

void QueryRequest::InternalSwap(QueryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.output_fields_.InternalSwap(&other->_impl_.output_fields_);
  _impl_.partition_names_.InternalSwap(&other->_impl_.partition_names_);
  _impl_.query_params_.InternalSwap(&other->_impl_.query_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.expr_, lhs_arena,
      &other->_impl_.expr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryRequest, _impl_.use_default_consistency_)
      + sizeof(QueryRequest::_impl_.use_default_consistency_)
      - PROTOBUF_FIELD_OFFSET(QueryRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[57]);
}

// ===================================================================

class QueryResults::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const QueryResults* msg);
};

const ::milvus::proto::common::Status&
QueryResults::_Internal::status(const QueryResults* msg) {
  return *msg->_impl_.status_;
}
void QueryResults::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void QueryResults::clear_fields_data() {
  _impl_.fields_data_.Clear();
}
QueryResults::QueryResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.QueryResults)
}
QueryResults::QueryResults(const QueryResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_data_){from._impl_.fields_data_}
    , decltype(_impl_.output_fields_){from._impl_.output_fields_}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.QueryResults)
}

inline void QueryResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_data_){arena}
    , decltype(_impl_.output_fields_){arena}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryResults::~QueryResults() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.QueryResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_data_.~RepeatedPtrField();
  _impl_.output_fields_.~RepeatedPtrField();
  _impl_.collection_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void QueryResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryResults::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.QueryResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_data_.Clear();
  _impl_.output_fields_.Clear();
  _impl_.collection_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.schema.FieldData fields_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.QueryResults.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string output_fields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.QueryResults.output_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.QueryResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.schema.FieldData fields_data = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QueryResults.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // repeated string output_fields = 4;
  for (int i = 0, n = this->_internal_output_fields_size(); i < n; i++) {
    const auto& s = this->_internal_output_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QueryResults.output_fields");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.QueryResults)
  return target;
}

size_t QueryResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.QueryResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.schema.FieldData fields_data = 2;
  total_size += 1UL * this->_internal_fields_data_size();
  for (const auto& msg : this->_impl_.fields_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string output_fields = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.output_fields_.size());
  for (int i = 0, n = _impl_.output_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.output_fields_.Get(i));
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryResults::GetClassData() const { return &_class_data_; }


void QueryResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryResults*>(&to_msg);
  auto& from = static_cast<const QueryResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.QueryResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_data_.MergeFrom(from._impl_.fields_data_);
  _this->_impl_.output_fields_.MergeFrom(from._impl_.output_fields_);
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryResults::CopyFrom(const QueryResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.QueryResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResults::IsInitialized() const {
  return true;
}

void QueryResults::InternalSwap(QueryResults* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_data_.InternalSwap(&other->_impl_.fields_data_);
  _impl_.output_fields_.InternalSwap(&other->_impl_.output_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[58]);
}

// ===================================================================

class VectorIDs::_Internal {
 public:
  static const ::milvus::proto::schema::IDs& id_array(const VectorIDs* msg);
};

const ::milvus::proto::schema::IDs&
VectorIDs::_Internal::id_array(const VectorIDs* msg) {
  return *msg->_impl_.id_array_;
}
void VectorIDs::clear_id_array() {
  if (GetArenaForAllocation() == nullptr && _impl_.id_array_ != nullptr) {
    delete _impl_.id_array_;
  }
  _impl_.id_array_ = nullptr;
}
VectorIDs::VectorIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.VectorIDs)
}
VectorIDs::VectorIDs(const VectorIDs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorIDs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){from._impl_.partition_names_}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.id_array_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_name().empty()) {
    _this->_impl_.field_name_.Set(from._internal_field_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_id_array()) {
    _this->_impl_.id_array_ = new ::milvus::proto::schema::IDs(*from._impl_.id_array_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.VectorIDs)
}

inline void VectorIDs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){arena}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.id_array_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VectorIDs::~VectorIDs() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.VectorIDs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorIDs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_names_.~RepeatedPtrField();
  _impl_.collection_name_.Destroy();
  _impl_.field_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.id_array_;
}

void VectorIDs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorIDs::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.VectorIDs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partition_names_.Clear();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.field_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.id_array_ != nullptr) {
    delete _impl_.id_array_;
  }
  _impl_.id_array_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorIDs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string collection_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.VectorIDs.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string field_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_field_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.VectorIDs.field_name"));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.schema.IDs id_array = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string partition_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.VectorIDs.partition_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorIDs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.VectorIDs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection_name = 1;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.VectorIDs.collection_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collection_name(), target);
  }

  // string field_name = 2;
  if (!this->_internal_field_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.VectorIDs.field_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_field_name(), target);
  }

  // .milvus.proto.schema.IDs id_array = 3;
  if (this->_internal_has_id_array()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::id_array(this),
        _Internal::id_array(this).GetCachedSize(), target, stream);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.VectorIDs.partition_names");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.VectorIDs)
  return target;
}

size_t VectorIDs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.VectorIDs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.partition_names_.size());
  for (int i = 0, n = _impl_.partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.partition_names_.Get(i));
  }

  // string collection_name = 1;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string field_name = 2;
  if (!this->_internal_field_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // .milvus.proto.schema.IDs id_array = 3;
  if (this->_internal_has_id_array()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_array_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorIDs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorIDs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorIDs::GetClassData() const { return &_class_data_; }


void VectorIDs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorIDs*>(&to_msg);
  auto& from = static_cast<const VectorIDs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.VectorIDs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partition_names_.MergeFrom(from._impl_.partition_names_);
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_field_name().empty()) {
    _this->_internal_set_field_name(from._internal_field_name());
  }
  if (from._internal_has_id_array()) {
    _this->_internal_mutable_id_array()->::milvus::proto::schema::IDs::MergeFrom(
        from._internal_id_array());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorIDs::CopyFrom(const VectorIDs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.VectorIDs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorIDs::IsInitialized() const {
  return true;
}

void VectorIDs::InternalSwap(VectorIDs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partition_names_.InternalSwap(&other->_impl_.partition_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_name_, lhs_arena,
      &other->_impl_.field_name_, rhs_arena
  );
  swap(_impl_.id_array_, other->_impl_.id_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorIDs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[59]);
}

// ===================================================================

class VectorsArray::_Internal {
 public:
  static const ::milvus::proto::milvus::VectorIDs& id_array(const VectorsArray* msg);
  static const ::milvus::proto::schema::VectorField& data_array(const VectorsArray* msg);
};

const ::milvus::proto::milvus::VectorIDs&
VectorsArray::_Internal::id_array(const VectorsArray* msg) {
  return *msg->_impl_.array_.id_array_;
}
const ::milvus::proto::schema::VectorField&
VectorsArray::_Internal::data_array(const VectorsArray* msg) {
  return *msg->_impl_.array_.data_array_;
}
void VectorsArray::set_allocated_id_array(::milvus::proto::milvus::VectorIDs* id_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_array();
  if (id_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(id_array);
    if (message_arena != submessage_arena) {
      id_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_array, submessage_arena);
    }
    set_has_id_array();
    _impl_.array_.id_array_ = id_array;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.VectorsArray.id_array)
}
void VectorsArray::set_allocated_data_array(::milvus::proto::schema::VectorField* data_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_array();
  if (data_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_array));
    if (message_arena != submessage_arena) {
      data_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_array, submessage_arena);
    }
    set_has_data_array();
    _impl_.array_.data_array_ = data_array;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.VectorsArray.data_array)
}
void VectorsArray::clear_data_array() {
  if (_internal_has_data_array()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.array_.data_array_;
    }
    clear_has_array();
  }
}
VectorsArray::VectorsArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.VectorsArray)
}
VectorsArray::VectorsArray(const VectorsArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorsArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.array_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_array();
  switch (from.array_case()) {
    case kIdArray: {
      _this->_internal_mutable_id_array()->::milvus::proto::milvus::VectorIDs::MergeFrom(
          from._internal_id_array());
      break;
    }
    case kDataArray: {
      _this->_internal_mutable_data_array()->::milvus::proto::schema::VectorField::MergeFrom(
          from._internal_data_array());
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.VectorsArray)
}

inline void VectorsArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.array_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_array();
}

VectorsArray::~VectorsArray() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.VectorsArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorsArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_array()) {
    clear_array();
  }
}

void VectorsArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorsArray::clear_array() {
// @@protoc_insertion_point(one_of_clear_start:milvus.proto.milvus.VectorsArray)
  switch (array_case()) {
    case kIdArray: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.array_.id_array_;
      }
      break;
    }
    case kDataArray: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.array_.data_array_;
      }
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ARRAY_NOT_SET;
}


void VectorsArray::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.VectorsArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_array();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorsArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.milvus.VectorIDs id_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.schema.VectorField data_array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorsArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.VectorsArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.milvus.VectorIDs id_array = 1;
  if (_internal_has_id_array()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id_array(this),
        _Internal::id_array(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.schema.VectorField data_array = 2;
  if (_internal_has_data_array()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data_array(this),
        _Internal::data_array(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.VectorsArray)
  return target;
}

size_t VectorsArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.VectorsArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (array_case()) {
    // .milvus.proto.milvus.VectorIDs id_array = 1;
    case kIdArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.array_.id_array_);
      break;
    }
    // .milvus.proto.schema.VectorField data_array = 2;
    case kDataArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.array_.data_array_);
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorsArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorsArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorsArray::GetClassData() const { return &_class_data_; }


void VectorsArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorsArray*>(&to_msg);
  auto& from = static_cast<const VectorsArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.VectorsArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.array_case()) {
    case kIdArray: {
      _this->_internal_mutable_id_array()->::milvus::proto::milvus::VectorIDs::MergeFrom(
          from._internal_id_array());
      break;
    }
    case kDataArray: {
      _this->_internal_mutable_data_array()->::milvus::proto::schema::VectorField::MergeFrom(
          from._internal_data_array());
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorsArray::CopyFrom(const VectorsArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.VectorsArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorsArray::IsInitialized() const {
  return true;
}

void VectorsArray::InternalSwap(VectorsArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.array_, other->_impl_.array_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorsArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[60]);
}

// ===================================================================

class CalcDistanceRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CalcDistanceRequest* msg);
  static const ::milvus::proto::milvus::VectorsArray& op_left(const CalcDistanceRequest* msg);
  static const ::milvus::proto::milvus::VectorsArray& op_right(const CalcDistanceRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CalcDistanceRequest::_Internal::base(const CalcDistanceRequest* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::milvus::VectorsArray&
CalcDistanceRequest::_Internal::op_left(const CalcDistanceRequest* msg) {
  return *msg->_impl_.op_left_;
}
const ::milvus::proto::milvus::VectorsArray&
CalcDistanceRequest::_Internal::op_right(const CalcDistanceRequest* msg) {
  return *msg->_impl_.op_right_;
}
void CalcDistanceRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void CalcDistanceRequest::clear_params() {
  _impl_.params_.Clear();
}
CalcDistanceRequest::CalcDistanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CalcDistanceRequest)
}
CalcDistanceRequest::CalcDistanceRequest(const CalcDistanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CalcDistanceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.op_left_){nullptr}
    , decltype(_impl_.op_right_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_op_left()) {
    _this->_impl_.op_left_ = new ::milvus::proto::milvus::VectorsArray(*from._impl_.op_left_);
  }
  if (from._internal_has_op_right()) {
    _this->_impl_.op_right_ = new ::milvus::proto::milvus::VectorsArray(*from._impl_.op_right_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CalcDistanceRequest)
}

inline void CalcDistanceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){arena}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.op_left_){nullptr}
    , decltype(_impl_.op_right_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CalcDistanceRequest::~CalcDistanceRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CalcDistanceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CalcDistanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.op_left_;
  if (this != internal_default_instance()) delete _impl_.op_right_;
}

void CalcDistanceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CalcDistanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CalcDistanceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.op_left_ != nullptr) {
    delete _impl_.op_left_;
  }
  _impl_.op_left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.op_right_ != nullptr) {
    delete _impl_.op_right_;
  }
  _impl_.op_right_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalcDistanceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.VectorsArray op_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.VectorsArray op_right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CalcDistanceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CalcDistanceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.milvus.VectorsArray op_left = 2;
  if (this->_internal_has_op_left()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::op_left(this),
        _Internal::op_left(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.milvus.VectorsArray op_right = 3;
  if (this->_internal_has_op_right()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::op_right(this),
        _Internal::op_right(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair params = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CalcDistanceRequest)
  return target;
}

size_t CalcDistanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CalcDistanceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair params = 4;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->_impl_.params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.milvus.VectorsArray op_left = 2;
  if (this->_internal_has_op_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.op_left_);
  }

  // .milvus.proto.milvus.VectorsArray op_right = 3;
  if (this->_internal_has_op_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.op_right_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CalcDistanceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CalcDistanceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CalcDistanceRequest::GetClassData() const { return &_class_data_; }


void CalcDistanceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CalcDistanceRequest*>(&to_msg);
  auto& from = static_cast<const CalcDistanceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CalcDistanceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_op_left()) {
    _this->_internal_mutable_op_left()->::milvus::proto::milvus::VectorsArray::MergeFrom(
        from._internal_op_left());
  }
  if (from._internal_has_op_right()) {
    _this->_internal_mutable_op_right()->::milvus::proto::milvus::VectorsArray::MergeFrom(
        from._internal_op_right());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CalcDistanceRequest::CopyFrom(const CalcDistanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CalcDistanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalcDistanceRequest::IsInitialized() const {
  return true;
}

void CalcDistanceRequest::InternalSwap(CalcDistanceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalcDistanceRequest, _impl_.op_right_)
      + sizeof(CalcDistanceRequest::_impl_.op_right_)
      - PROTOBUF_FIELD_OFFSET(CalcDistanceRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CalcDistanceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[61]);
}

// ===================================================================

class CalcDistanceResults::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const CalcDistanceResults* msg);
  static const ::milvus::proto::schema::IntArray& int_dist(const CalcDistanceResults* msg);
  static const ::milvus::proto::schema::FloatArray& float_dist(const CalcDistanceResults* msg);
};

const ::milvus::proto::common::Status&
CalcDistanceResults::_Internal::status(const CalcDistanceResults* msg) {
  return *msg->_impl_.status_;
}
const ::milvus::proto::schema::IntArray&
CalcDistanceResults::_Internal::int_dist(const CalcDistanceResults* msg) {
  return *msg->_impl_.array_.int_dist_;
}
const ::milvus::proto::schema::FloatArray&
CalcDistanceResults::_Internal::float_dist(const CalcDistanceResults* msg) {
  return *msg->_impl_.array_.float_dist_;
}
void CalcDistanceResults::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void CalcDistanceResults::set_allocated_int_dist(::milvus::proto::schema::IntArray* int_dist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_array();
  if (int_dist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(int_dist));
    if (message_arena != submessage_arena) {
      int_dist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_dist, submessage_arena);
    }
    set_has_int_dist();
    _impl_.array_.int_dist_ = int_dist;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CalcDistanceResults.int_dist)
}
void CalcDistanceResults::clear_int_dist() {
  if (_internal_has_int_dist()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.array_.int_dist_;
    }
    clear_has_array();
  }
}
void CalcDistanceResults::set_allocated_float_dist(::milvus::proto::schema::FloatArray* float_dist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_array();
  if (float_dist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(float_dist));
    if (message_arena != submessage_arena) {
      float_dist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_dist, submessage_arena);
    }
    set_has_float_dist();
    _impl_.array_.float_dist_ = float_dist;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CalcDistanceResults.float_dist)
}
void CalcDistanceResults::clear_float_dist() {
  if (_internal_has_float_dist()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.array_.float_dist_;
    }
    clear_has_array();
  }
}
CalcDistanceResults::CalcDistanceResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CalcDistanceResults)
}
CalcDistanceResults::CalcDistanceResults(const CalcDistanceResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CalcDistanceResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.array_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  clear_has_array();
  switch (from.array_case()) {
    case kIntDist: {
      _this->_internal_mutable_int_dist()->::milvus::proto::schema::IntArray::MergeFrom(
          from._internal_int_dist());
      break;
    }
    case kFloatDist: {
      _this->_internal_mutable_float_dist()->::milvus::proto::schema::FloatArray::MergeFrom(
          from._internal_float_dist());
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CalcDistanceResults)
}

inline void CalcDistanceResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.array_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_array();
}

CalcDistanceResults::~CalcDistanceResults() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CalcDistanceResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CalcDistanceResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (has_array()) {
    clear_array();
  }
}

void CalcDistanceResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CalcDistanceResults::clear_array() {
// @@protoc_insertion_point(one_of_clear_start:milvus.proto.milvus.CalcDistanceResults)
  switch (array_case()) {
    case kIntDist: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.array_.int_dist_;
      }
      break;
    }
    case kFloatDist: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.array_.float_dist_;
      }
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ARRAY_NOT_SET;
}


void CalcDistanceResults::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CalcDistanceResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  clear_array();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalcDistanceResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.schema.IntArray int_dist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_dist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.schema.FloatArray float_dist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_dist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CalcDistanceResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CalcDistanceResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.schema.IntArray int_dist = 2;
  if (_internal_has_int_dist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::int_dist(this),
        _Internal::int_dist(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.schema.FloatArray float_dist = 3;
  if (_internal_has_float_dist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::float_dist(this),
        _Internal::float_dist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CalcDistanceResults)
  return target;
}

size_t CalcDistanceResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CalcDistanceResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  switch (array_case()) {
    // .milvus.proto.schema.IntArray int_dist = 2;
    case kIntDist: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.array_.int_dist_);
      break;
    }
    // .milvus.proto.schema.FloatArray float_dist = 3;
    case kFloatDist: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.array_.float_dist_);
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CalcDistanceResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CalcDistanceResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CalcDistanceResults::GetClassData() const { return &_class_data_; }


void CalcDistanceResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CalcDistanceResults*>(&to_msg);
  auto& from = static_cast<const CalcDistanceResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CalcDistanceResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  switch (from.array_case()) {
    case kIntDist: {
      _this->_internal_mutable_int_dist()->::milvus::proto::schema::IntArray::MergeFrom(
          from._internal_int_dist());
      break;
    }
    case kFloatDist: {
      _this->_internal_mutable_float_dist()->::milvus::proto::schema::FloatArray::MergeFrom(
          from._internal_float_dist());
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CalcDistanceResults::CopyFrom(const CalcDistanceResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CalcDistanceResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalcDistanceResults::IsInitialized() const {
  return true;
}

void CalcDistanceResults::InternalSwap(CalcDistanceResults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
  swap(_impl_.array_, other->_impl_.array_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalcDistanceResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[62]);
}

// ===================================================================

class FlushAllRequest::_Internal {
 public:
};

FlushAllRequest::FlushAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.FlushAllRequest)
}
FlushAllRequest::FlushAllRequest(const FlushAllRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  FlushAllRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.FlushAllRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushAllRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushAllRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FlushAllRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[63]);
}

// ===================================================================

class FlushAllResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const FlushAllResponse* msg);
};

const ::milvus::proto::common::Status&
FlushAllResponse::_Internal::status(const FlushAllResponse* msg) {
  return *msg->_impl_.status_;
}
void FlushAllResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
FlushAllResponse::FlushAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.FlushAllResponse)
}
FlushAllResponse::FlushAllResponse(const FlushAllResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlushAllResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.flush_all_ts_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  _this->_impl_.flush_all_ts_ = from._impl_.flush_all_ts_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.FlushAllResponse)
}

inline void FlushAllResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.flush_all_ts_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlushAllResponse::~FlushAllResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.FlushAllResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlushAllResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void FlushAllResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlushAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.FlushAllResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.flush_all_ts_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushAllResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 flush_all_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.flush_all_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlushAllResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.FlushAllResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // uint64 flush_all_ts = 2;
  if (this->_internal_flush_all_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_flush_all_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.FlushAllResponse)
  return target;
}

size_t FlushAllResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.FlushAllResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // uint64 flush_all_ts = 2;
  if (this->_internal_flush_all_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_flush_all_ts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushAllResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlushAllResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushAllResponse::GetClassData() const { return &_class_data_; }


void FlushAllResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlushAllResponse*>(&to_msg);
  auto& from = static_cast<const FlushAllResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.FlushAllResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_flush_all_ts() != 0) {
    _this->_internal_set_flush_all_ts(from._internal_flush_all_ts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlushAllResponse::CopyFrom(const FlushAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.FlushAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushAllResponse::IsInitialized() const {
  return true;
}

void FlushAllResponse::InternalSwap(FlushAllResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlushAllResponse, _impl_.flush_all_ts_)
      + sizeof(FlushAllResponse::_impl_.flush_all_ts_)
      - PROTOBUF_FIELD_OFFSET(FlushAllResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushAllResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[64]);
}

// ===================================================================

class PersistentSegmentInfo::_Internal {
 public:
};

PersistentSegmentInfo::PersistentSegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.PersistentSegmentInfo)
}
PersistentSegmentInfo::PersistentSegmentInfo(const PersistentSegmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PersistentSegmentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.partitionid_){}
    , decltype(_impl_.num_rows_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.segmentid_, &from._impl_.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.PersistentSegmentInfo)
}

inline void PersistentSegmentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , decltype(_impl_.num_rows_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PersistentSegmentInfo::~PersistentSegmentInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.PersistentSegmentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PersistentSegmentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PersistentSegmentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PersistentSegmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.PersistentSegmentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersistentSegmentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_rows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.SegmentState state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::SegmentState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PersistentSegmentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.PersistentSegmentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 3;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_partitionid(), target);
  }

  // int64 num_rows = 4;
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_num_rows(), target);
  }

  // .milvus.proto.common.SegmentState state = 5;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.PersistentSegmentInfo)
  return target;
}

size_t PersistentSegmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.PersistentSegmentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 partitionID = 3;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  // int64 num_rows = 4;
  if (this->_internal_num_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_rows());
  }

  // .milvus.proto.common.SegmentState state = 5;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PersistentSegmentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PersistentSegmentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PersistentSegmentInfo::GetClassData() const { return &_class_data_; }


void PersistentSegmentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PersistentSegmentInfo*>(&to_msg);
  auto& from = static_cast<const PersistentSegmentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.PersistentSegmentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  if (from._internal_num_rows() != 0) {
    _this->_internal_set_num_rows(from._internal_num_rows());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PersistentSegmentInfo::CopyFrom(const PersistentSegmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.PersistentSegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistentSegmentInfo::IsInitialized() const {
  return true;
}

void PersistentSegmentInfo::InternalSwap(PersistentSegmentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersistentSegmentInfo, _impl_.state_)
      + sizeof(PersistentSegmentInfo::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(PersistentSegmentInfo, _impl_.segmentid_)>(
          reinterpret_cast<char*>(&_impl_.segmentid_),
          reinterpret_cast<char*>(&other->_impl_.segmentid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistentSegmentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[65]);
}

// ===================================================================

class GetPersistentSegmentInfoRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetPersistentSegmentInfoRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetPersistentSegmentInfoRequest::_Internal::base(const GetPersistentSegmentInfoRequest* msg) {
  return *msg->_impl_.base_;
}
void GetPersistentSegmentInfoRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetPersistentSegmentInfoRequest::GetPersistentSegmentInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
}
GetPersistentSegmentInfoRequest::GetPersistentSegmentInfoRequest(const GetPersistentSegmentInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPersistentSegmentInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dbname_){}
    , decltype(_impl_.collectionname_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dbname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dbname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dbname().empty()) {
    _this->_impl_.dbname_.Set(from._internal_dbname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collectionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collectionname().empty()) {
    _this->_impl_.collectionname_.Set(from._internal_collectionname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
}

inline void GetPersistentSegmentInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dbname_){}
    , decltype(_impl_.collectionname_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dbname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dbname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collectionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPersistentSegmentInfoRequest::~GetPersistentSegmentInfoRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPersistentSegmentInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dbname_.Destroy();
  _impl_.collectionname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetPersistentSegmentInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPersistentSegmentInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dbname_.ClearToEmpty();
  _impl_.collectionname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPersistentSegmentInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dbName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dbname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName"));
        } else
          goto handle_unusual;
        continue;
      // string collectionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collectionname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPersistentSegmentInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string dbName = 2;
  if (!this->_internal_dbname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dbname().data(), static_cast<int>(this->_internal_dbname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dbname(), target);
  }

  // string collectionName = 3;
  if (!this->_internal_collectionname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collectionname().data(), static_cast<int>(this->_internal_collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collectionname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  return target;
}

size_t GetPersistentSegmentInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dbName = 2;
  if (!this->_internal_dbname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dbname());
  }

  // string collectionName = 3;
  if (!this->_internal_collectionname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionname());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPersistentSegmentInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPersistentSegmentInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPersistentSegmentInfoRequest::GetClassData() const { return &_class_data_; }


void GetPersistentSegmentInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPersistentSegmentInfoRequest*>(&to_msg);
  auto& from = static_cast<const GetPersistentSegmentInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dbname().empty()) {
    _this->_internal_set_dbname(from._internal_dbname());
  }
  if (!from._internal_collectionname().empty()) {
    _this->_internal_set_collectionname(from._internal_collectionname());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPersistentSegmentInfoRequest::CopyFrom(const GetPersistentSegmentInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersistentSegmentInfoRequest::IsInitialized() const {
  return true;
}

void GetPersistentSegmentInfoRequest::InternalSwap(GetPersistentSegmentInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dbname_, lhs_arena,
      &other->_impl_.dbname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collectionname_, lhs_arena,
      &other->_impl_.collectionname_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPersistentSegmentInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[66]);
}

// ===================================================================

class GetPersistentSegmentInfoResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetPersistentSegmentInfoResponse* msg);
};

const ::milvus::proto::common::Status&
GetPersistentSegmentInfoResponse::_Internal::status(const GetPersistentSegmentInfoResponse* msg) {
  return *msg->_impl_.status_;
}
void GetPersistentSegmentInfoResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetPersistentSegmentInfoResponse::GetPersistentSegmentInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
}
GetPersistentSegmentInfoResponse::GetPersistentSegmentInfoResponse(const GetPersistentSegmentInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPersistentSegmentInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){from._impl_.infos_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
}

inline void GetPersistentSegmentInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetPersistentSegmentInfoResponse::~GetPersistentSegmentInfoResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPersistentSegmentInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.infos_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetPersistentSegmentInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPersistentSegmentInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.infos_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPersistentSegmentInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPersistentSegmentInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  return target;
}

size_t GetPersistentSegmentInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_impl_.infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPersistentSegmentInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPersistentSegmentInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPersistentSegmentInfoResponse::GetClassData() const { return &_class_data_; }


void GetPersistentSegmentInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPersistentSegmentInfoResponse*>(&to_msg);
  auto& from = static_cast<const GetPersistentSegmentInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.infos_.MergeFrom(from._impl_.infos_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPersistentSegmentInfoResponse::CopyFrom(const GetPersistentSegmentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersistentSegmentInfoResponse::IsInitialized() const {
  return true;
}

void GetPersistentSegmentInfoResponse::InternalSwap(GetPersistentSegmentInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPersistentSegmentInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[67]);
}

// ===================================================================

class QuerySegmentInfo::_Internal {
 public:
};

QuerySegmentInfo::QuerySegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.QuerySegmentInfo)
}
QuerySegmentInfo::QuerySegmentInfo(const QuerySegmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySegmentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodeids_){from._impl_.nodeids_}
    , /*decltype(_impl_._nodeids_cached_byte_size_)*/{0}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.segmentid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.partitionid_){}
    , decltype(_impl_.mem_size_){}
    , decltype(_impl_.num_rows_){}
    , decltype(_impl_.indexid_){}
    , decltype(_impl_.nodeid_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.segmentid_, &from._impl_.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.QuerySegmentInfo)
}

inline void QuerySegmentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodeids_){arena}
    , /*decltype(_impl_._nodeids_cached_byte_size_)*/{0}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , decltype(_impl_.mem_size_){int64_t{0}}
    , decltype(_impl_.num_rows_){int64_t{0}}
    , decltype(_impl_.indexid_){int64_t{0}}
    , decltype(_impl_.nodeid_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySegmentInfo::~QuerySegmentInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.QuerySegmentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySegmentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodeids_.~RepeatedField();
  _impl_.index_name_.Destroy();
}

void QuerySegmentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySegmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.QuerySegmentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodeids_.Clear();
  _impl_.index_name_.ClearToEmpty();
  ::memset(&_impl_.segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySegmentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 mem_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mem_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_rows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string index_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.QuerySegmentInfo.index_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 indexID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 nodeID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.SegmentState state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::SegmentState>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 nodeIds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_nodeids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_nodeids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuerySegmentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.QuerySegmentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 3;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_partitionid(), target);
  }

  // int64 mem_size = 4;
  if (this->_internal_mem_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_mem_size(), target);
  }

  // int64 num_rows = 5;
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_rows(), target);
  }

  // string index_name = 6;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QuerySegmentInfo.index_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_index_name(), target);
  }

  // int64 indexID = 7;
  if (this->_internal_indexid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_indexid(), target);
  }

  // int64 nodeID = 8;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_nodeid(), target);
  }

  // .milvus.proto.common.SegmentState state = 9;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_state(), target);
  }

  // repeated int64 nodeIds = 10;
  {
    int byte_size = _impl_._nodeids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          10, _internal_nodeids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.QuerySegmentInfo)
  return target;
}

size_t QuerySegmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.QuerySegmentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 nodeIds = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.nodeids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._nodeids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string index_name = 6;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 partitionID = 3;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  // int64 mem_size = 4;
  if (this->_internal_mem_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mem_size());
  }

  // int64 num_rows = 5;
  if (this->_internal_num_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_rows());
  }

  // int64 indexID = 7;
  if (this->_internal_indexid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_indexid());
  }

  // int64 nodeID = 8;
  if (this->_internal_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nodeid());
  }

  // .milvus.proto.common.SegmentState state = 9;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySegmentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySegmentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySegmentInfo::GetClassData() const { return &_class_data_; }


void QuerySegmentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySegmentInfo*>(&to_msg);
  auto& from = static_cast<const QuerySegmentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.QuerySegmentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodeids_.MergeFrom(from._impl_.nodeids_);
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  if (from._internal_mem_size() != 0) {
    _this->_internal_set_mem_size(from._internal_mem_size());
  }
  if (from._internal_num_rows() != 0) {
    _this->_internal_set_num_rows(from._internal_num_rows());
  }
  if (from._internal_indexid() != 0) {
    _this->_internal_set_indexid(from._internal_indexid());
  }
  if (from._internal_nodeid() != 0) {
    _this->_internal_set_nodeid(from._internal_nodeid());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySegmentInfo::CopyFrom(const QuerySegmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.QuerySegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySegmentInfo::IsInitialized() const {
  return true;
}

void QuerySegmentInfo::InternalSwap(QuerySegmentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodeids_.InternalSwap(&other->_impl_.nodeids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuerySegmentInfo, _impl_.state_)
      + sizeof(QuerySegmentInfo::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(QuerySegmentInfo, _impl_.segmentid_)>(
          reinterpret_cast<char*>(&_impl_.segmentid_),
          reinterpret_cast<char*>(&other->_impl_.segmentid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySegmentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[68]);
}

// ===================================================================

class GetQuerySegmentInfoRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetQuerySegmentInfoRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetQuerySegmentInfoRequest::_Internal::base(const GetQuerySegmentInfoRequest* msg) {
  return *msg->_impl_.base_;
}
void GetQuerySegmentInfoRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetQuerySegmentInfoRequest::GetQuerySegmentInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetQuerySegmentInfoRequest)
}
GetQuerySegmentInfoRequest::GetQuerySegmentInfoRequest(const GetQuerySegmentInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetQuerySegmentInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dbname_){}
    , decltype(_impl_.collectionname_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dbname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dbname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dbname().empty()) {
    _this->_impl_.dbname_.Set(from._internal_dbname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collectionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collectionname().empty()) {
    _this->_impl_.collectionname_.Set(from._internal_collectionname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetQuerySegmentInfoRequest)
}

inline void GetQuerySegmentInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dbname_){}
    , decltype(_impl_.collectionname_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dbname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dbname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collectionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetQuerySegmentInfoRequest::~GetQuerySegmentInfoRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetQuerySegmentInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dbname_.Destroy();
  _impl_.collectionname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetQuerySegmentInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetQuerySegmentInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dbname_.ClearToEmpty();
  _impl_.collectionname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetQuerySegmentInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dbName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dbname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName"));
        } else
          goto handle_unusual;
        continue;
      // string collectionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collectionname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetQuerySegmentInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string dbName = 2;
  if (!this->_internal_dbname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dbname().data(), static_cast<int>(this->_internal_dbname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dbname(), target);
  }

  // string collectionName = 3;
  if (!this->_internal_collectionname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collectionname().data(), static_cast<int>(this->_internal_collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collectionname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  return target;
}

size_t GetQuerySegmentInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dbName = 2;
  if (!this->_internal_dbname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dbname());
  }

  // string collectionName = 3;
  if (!this->_internal_collectionname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionname());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetQuerySegmentInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetQuerySegmentInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetQuerySegmentInfoRequest::GetClassData() const { return &_class_data_; }


void GetQuerySegmentInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetQuerySegmentInfoRequest*>(&to_msg);
  auto& from = static_cast<const GetQuerySegmentInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dbname().empty()) {
    _this->_internal_set_dbname(from._internal_dbname());
  }
  if (!from._internal_collectionname().empty()) {
    _this->_internal_set_collectionname(from._internal_collectionname());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetQuerySegmentInfoRequest::CopyFrom(const GetQuerySegmentInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQuerySegmentInfoRequest::IsInitialized() const {
  return true;
}

void GetQuerySegmentInfoRequest::InternalSwap(GetQuerySegmentInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dbname_, lhs_arena,
      &other->_impl_.dbname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collectionname_, lhs_arena,
      &other->_impl_.collectionname_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetQuerySegmentInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[69]);
}

// ===================================================================

class GetQuerySegmentInfoResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetQuerySegmentInfoResponse* msg);
};

const ::milvus::proto::common::Status&
GetQuerySegmentInfoResponse::_Internal::status(const GetQuerySegmentInfoResponse* msg) {
  return *msg->_impl_.status_;
}
void GetQuerySegmentInfoResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetQuerySegmentInfoResponse::GetQuerySegmentInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetQuerySegmentInfoResponse)
}
GetQuerySegmentInfoResponse::GetQuerySegmentInfoResponse(const GetQuerySegmentInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetQuerySegmentInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){from._impl_.infos_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetQuerySegmentInfoResponse)
}

inline void GetQuerySegmentInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetQuerySegmentInfoResponse::~GetQuerySegmentInfoResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetQuerySegmentInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.infos_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetQuerySegmentInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetQuerySegmentInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.infos_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetQuerySegmentInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetQuerySegmentInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  return target;
}

size_t GetQuerySegmentInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_impl_.infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetQuerySegmentInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetQuerySegmentInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetQuerySegmentInfoResponse::GetClassData() const { return &_class_data_; }


void GetQuerySegmentInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetQuerySegmentInfoResponse*>(&to_msg);
  auto& from = static_cast<const GetQuerySegmentInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.infos_.MergeFrom(from._impl_.infos_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetQuerySegmentInfoResponse::CopyFrom(const GetQuerySegmentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQuerySegmentInfoResponse::IsInitialized() const {
  return true;
}

void GetQuerySegmentInfoResponse::InternalSwap(GetQuerySegmentInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetQuerySegmentInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[70]);
}

// ===================================================================

class DummyRequest::_Internal {
 public:
};

DummyRequest::DummyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DummyRequest)
}
DummyRequest::DummyRequest(const DummyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DummyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_type().empty()) {
    _this->_impl_.request_type_.Set(from._internal_request_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DummyRequest)
}

inline void DummyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DummyRequest::~DummyRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DummyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DummyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_type_.Destroy();
}

void DummyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DummyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DummyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DummyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DummyRequest.request_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DummyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DummyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_type = 1;
  if (!this->_internal_request_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_type().data(), static_cast<int>(this->_internal_request_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DummyRequest.request_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DummyRequest)
  return target;
}

size_t DummyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DummyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_type = 1;
  if (!this->_internal_request_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DummyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DummyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DummyRequest::GetClassData() const { return &_class_data_; }


void DummyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DummyRequest*>(&to_msg);
  auto& from = static_cast<const DummyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DummyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_type().empty()) {
    _this->_internal_set_request_type(from._internal_request_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DummyRequest::CopyFrom(const DummyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DummyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyRequest::IsInitialized() const {
  return true;
}

void DummyRequest::InternalSwap(DummyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_type_, lhs_arena,
      &other->_impl_.request_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DummyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[71]);
}

// ===================================================================

class DummyResponse::_Internal {
 public:
};

DummyResponse::DummyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DummyResponse)
}
DummyResponse::DummyResponse(const DummyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DummyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_response().empty()) {
    _this->_impl_.response_.Set(from._internal_response(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DummyResponse)
}

inline void DummyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DummyResponse::~DummyResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DummyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DummyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.response_.Destroy();
}

void DummyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DummyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DummyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DummyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_response();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DummyResponse.response"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DummyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DummyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (!this->_internal_response().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DummyResponse.response");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DummyResponse)
  return target;
}

size_t DummyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DummyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 1;
  if (!this->_internal_response().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DummyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DummyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DummyResponse::GetClassData() const { return &_class_data_; }


void DummyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DummyResponse*>(&to_msg);
  auto& from = static_cast<const DummyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DummyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_response().empty()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DummyResponse::CopyFrom(const DummyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DummyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyResponse::IsInitialized() const {
  return true;
}

void DummyResponse::InternalSwap(DummyResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_, lhs_arena,
      &other->_impl_.response_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DummyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[72]);
}

// ===================================================================

class RegisterLinkRequest::_Internal {
 public:
};

RegisterLinkRequest::RegisterLinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.RegisterLinkRequest)
}
RegisterLinkRequest::RegisterLinkRequest(const RegisterLinkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RegisterLinkRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.RegisterLinkRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterLinkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterLinkRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RegisterLinkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[73]);
}

// ===================================================================

class RegisterLinkResponse::_Internal {
 public:
  static const ::milvus::proto::common::Address& address(const RegisterLinkResponse* msg);
  static const ::milvus::proto::common::Status& status(const RegisterLinkResponse* msg);
};

const ::milvus::proto::common::Address&
RegisterLinkResponse::_Internal::address(const RegisterLinkResponse* msg) {
  return *msg->_impl_.address_;
}
const ::milvus::proto::common::Status&
RegisterLinkResponse::_Internal::status(const RegisterLinkResponse* msg) {
  return *msg->_impl_.status_;
}
void RegisterLinkResponse::clear_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
}
void RegisterLinkResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
RegisterLinkResponse::RegisterLinkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.RegisterLinkResponse)
}
RegisterLinkResponse::RegisterLinkResponse(const RegisterLinkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterLinkResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_address()) {
    _this->_impl_.address_ = new ::milvus::proto::common::Address(*from._impl_.address_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.RegisterLinkResponse)
}

inline void RegisterLinkResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterLinkResponse::~RegisterLinkResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.RegisterLinkResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterLinkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.address_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void RegisterLinkResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterLinkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.RegisterLinkResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterLinkResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Address address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterLinkResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.RegisterLinkResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Address address = 1;
  if (this->_internal_has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.RegisterLinkResponse)
  return target;
}

size_t RegisterLinkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.RegisterLinkResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Address address = 1;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.address_);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterLinkResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterLinkResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterLinkResponse::GetClassData() const { return &_class_data_; }


void RegisterLinkResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterLinkResponse*>(&to_msg);
  auto& from = static_cast<const RegisterLinkResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.RegisterLinkResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_address()) {
    _this->_internal_mutable_address()->::milvus::proto::common::Address::MergeFrom(
        from._internal_address());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterLinkResponse::CopyFrom(const RegisterLinkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.RegisterLinkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterLinkResponse::IsInitialized() const {
  return true;
}

void RegisterLinkResponse::InternalSwap(RegisterLinkResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterLinkResponse, _impl_.status_)
      + sizeof(RegisterLinkResponse::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(RegisterLinkResponse, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterLinkResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[74]);
}

// ===================================================================

class GetMetricsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetMetricsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetMetricsRequest::_Internal::base(const GetMetricsRequest* msg) {
  return *msg->_impl_.base_;
}
void GetMetricsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetMetricsRequest::GetMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetMetricsRequest)
}
GetMetricsRequest::GetMetricsRequest(const GetMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMetricsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request().empty()) {
    _this->_impl_.request_.Set(from._internal_request(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetMetricsRequest)
}

inline void GetMetricsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMetricsRequest::~GetMetricsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetMetricsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetMetricsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMetricsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetMetricsRequest.request"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string request = 2;
  if (!this->_internal_request().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request().data(), static_cast<int>(this->_internal_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetMetricsRequest.request");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetMetricsRequest)
  return target;
}

size_t GetMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request = 2;
  if (!this->_internal_request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMetricsRequest::GetClassData() const { return &_class_data_; }


void GetMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMetricsRequest*>(&to_msg);
  auto& from = static_cast<const GetMetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetMetricsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request().empty()) {
    _this->_internal_set_request(from._internal_request());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMetricsRequest::CopyFrom(const GetMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetricsRequest::IsInitialized() const {
  return true;
}

void GetMetricsRequest::InternalSwap(GetMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_, lhs_arena,
      &other->_impl_.request_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[75]);
}

// ===================================================================

class GetMetricsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetMetricsResponse* msg);
};

const ::milvus::proto::common::Status&
GetMetricsResponse::_Internal::status(const GetMetricsResponse* msg) {
  return *msg->_impl_.status_;
}
void GetMetricsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetMetricsResponse::GetMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetMetricsResponse)
}
GetMetricsResponse::GetMetricsResponse(const GetMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMetricsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , decltype(_impl_.component_name_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_response().empty()) {
    _this->_impl_.response_.Set(from._internal_response(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_name().empty()) {
    _this->_impl_.component_name_.Set(from._internal_component_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetMetricsResponse)
}

inline void GetMetricsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , decltype(_impl_.component_name_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMetricsResponse::~GetMetricsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetMetricsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.response_.Destroy();
  _impl_.component_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetMetricsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetMetricsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_.ClearToEmpty();
  _impl_.component_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMetricsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_response();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetMetricsResponse.response"));
        } else
          goto handle_unusual;
        continue;
      // string component_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_component_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetMetricsResponse.component_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMetricsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetMetricsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string response = 2;
  if (!this->_internal_response().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetMetricsResponse.response");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_response(), target);
  }

  // string component_name = 3;
  if (!this->_internal_component_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetMetricsResponse.component_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_component_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetMetricsResponse)
  return target;
}

size_t GetMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetMetricsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 2;
  if (!this->_internal_response().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  // string component_name = 3;
  if (!this->_internal_component_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_name());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMetricsResponse::GetClassData() const { return &_class_data_; }


void GetMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMetricsResponse*>(&to_msg);
  auto& from = static_cast<const GetMetricsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetMetricsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_response().empty()) {
    _this->_internal_set_response(from._internal_response());
  }
  if (!from._internal_component_name().empty()) {
    _this->_internal_set_component_name(from._internal_component_name());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMetricsResponse::CopyFrom(const GetMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetricsResponse::IsInitialized() const {
  return true;
}

void GetMetricsResponse::InternalSwap(GetMetricsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_, lhs_arena,
      &other->_impl_.response_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_name_, lhs_arena,
      &other->_impl_.component_name_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMetricsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[76]);
}

// ===================================================================

class ComponentInfo::_Internal {
 public:
};

void ComponentInfo::clear_extra_info() {
  _impl_.extra_info_.Clear();
}
ComponentInfo::ComponentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ComponentInfo)
}
ComponentInfo::ComponentInfo(const ComponentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComponentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_info_){from._impl_.extra_info_}
    , decltype(_impl_.role_){}
    , decltype(_impl_.nodeid_){}
    , decltype(_impl_.state_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    _this->_impl_.role_.Set(from._internal_role(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.nodeid_, &from._impl_.nodeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_code_) -
    reinterpret_cast<char*>(&_impl_.nodeid_)) + sizeof(_impl_.state_code_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ComponentInfo)
}

inline void ComponentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_info_){arena}
    , decltype(_impl_.role_){}
    , decltype(_impl_.nodeid_){int64_t{0}}
    , decltype(_impl_.state_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComponentInfo::~ComponentInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ComponentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extra_info_.~RepeatedPtrField();
  _impl_.role_.Destroy();
}

void ComponentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ComponentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extra_info_.Clear();
  _impl_.role_.ClearToEmpty();
  ::memset(&_impl_.nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_code_) -
      reinterpret_cast<char*>(&_impl_.nodeid_)) + sizeof(_impl_.state_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 nodeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ComponentInfo.role"));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.StateCode state_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state_code(static_cast<::milvus::proto::common::StateCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair extra_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ComponentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 nodeID = 1;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_nodeid(), target);
  }

  // string role = 2;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ComponentInfo.role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role(), target);
  }

  // .milvus.proto.common.StateCode state_code = 3;
  if (this->_internal_state_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state_code(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair extra_info = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extra_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_extra_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ComponentInfo)
  return target;
}

size_t ComponentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ComponentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair extra_info = 4;
  total_size += 1UL * this->_internal_extra_info_size();
  for (const auto& msg : this->_impl_.extra_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string role = 2;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  // int64 nodeID = 1;
  if (this->_internal_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nodeid());
  }

  // .milvus.proto.common.StateCode state_code = 3;
  if (this->_internal_state_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComponentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentInfo::GetClassData() const { return &_class_data_; }


void ComponentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComponentInfo*>(&to_msg);
  auto& from = static_cast<const ComponentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ComponentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extra_info_.MergeFrom(from._impl_.extra_info_);
  if (!from._internal_role().empty()) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_nodeid() != 0) {
    _this->_internal_set_nodeid(from._internal_nodeid());
  }
  if (from._internal_state_code() != 0) {
    _this->_internal_set_state_code(from._internal_state_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentInfo::CopyFrom(const ComponentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ComponentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentInfo::IsInitialized() const {
  return true;
}

void ComponentInfo::InternalSwap(ComponentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.extra_info_.InternalSwap(&other->_impl_.extra_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_, lhs_arena,
      &other->_impl_.role_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentInfo, _impl_.state_code_)
      + sizeof(ComponentInfo::_impl_.state_code_)
      - PROTOBUF_FIELD_OFFSET(ComponentInfo, _impl_.nodeid_)>(
          reinterpret_cast<char*>(&_impl_.nodeid_),
          reinterpret_cast<char*>(&other->_impl_.nodeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[77]);
}

// ===================================================================

class ComponentStates::_Internal {
 public:
  static const ::milvus::proto::milvus::ComponentInfo& state(const ComponentStates* msg);
  static const ::milvus::proto::common::Status& status(const ComponentStates* msg);
};

const ::milvus::proto::milvus::ComponentInfo&
ComponentStates::_Internal::state(const ComponentStates* msg) {
  return *msg->_impl_.state_;
}
const ::milvus::proto::common::Status&
ComponentStates::_Internal::status(const ComponentStates* msg) {
  return *msg->_impl_.status_;
}
void ComponentStates::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ComponentStates::ComponentStates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ComponentStates)
}
ComponentStates::ComponentStates(const ComponentStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComponentStates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subcomponent_states_){from._impl_.subcomponent_states_}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::milvus::proto::milvus::ComponentInfo(*from._impl_.state_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ComponentStates)
}

inline void ComponentStates::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subcomponent_states_){arena}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ComponentStates::~ComponentStates() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ComponentStates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentStates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subcomponent_states_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.state_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ComponentStates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentStates::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ComponentStates)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subcomponent_states_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentStates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.milvus.ComponentInfo state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.ComponentInfo subcomponent_states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subcomponent_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentStates::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ComponentStates)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.milvus.ComponentInfo state = 1;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.milvus.ComponentInfo subcomponent_states = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subcomponent_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_subcomponent_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.Status status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ComponentStates)
  return target;
}

size_t ComponentStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ComponentStates)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.ComponentInfo subcomponent_states = 2;
  total_size += 1UL * this->_internal_subcomponent_states_size();
  for (const auto& msg : this->_impl_.subcomponent_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.milvus.ComponentInfo state = 1;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  // .milvus.proto.common.Status status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentStates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComponentStates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentStates::GetClassData() const { return &_class_data_; }


void ComponentStates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComponentStates*>(&to_msg);
  auto& from = static_cast<const ComponentStates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ComponentStates)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.subcomponent_states_.MergeFrom(from._impl_.subcomponent_states_);
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::milvus::proto::milvus::ComponentInfo::MergeFrom(
        from._internal_state());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentStates::CopyFrom(const ComponentStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ComponentStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentStates::IsInitialized() const {
  return true;
}

void ComponentStates::InternalSwap(ComponentStates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.subcomponent_states_.InternalSwap(&other->_impl_.subcomponent_states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentStates, _impl_.status_)
      + sizeof(ComponentStates::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ComponentStates, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentStates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[78]);
}

// ===================================================================

class GetComponentStatesRequest::_Internal {
 public:
};

GetComponentStatesRequest::GetComponentStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetComponentStatesRequest)
}
GetComponentStatesRequest::GetComponentStatesRequest(const GetComponentStatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetComponentStatesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetComponentStatesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetComponentStatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetComponentStatesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetComponentStatesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[79]);
}

// ===================================================================

class LoadBalanceRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const LoadBalanceRequest* msg);
};

const ::milvus::proto::common::MsgBase&
LoadBalanceRequest::_Internal::base(const LoadBalanceRequest* msg) {
  return *msg->_impl_.base_;
}
void LoadBalanceRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
LoadBalanceRequest::LoadBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.LoadBalanceRequest)
}
LoadBalanceRequest::LoadBalanceRequest(const LoadBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoadBalanceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dst_nodeids_){from._impl_.dst_nodeids_}
    , /*decltype(_impl_._dst_nodeids_cached_byte_size_)*/{0}
    , decltype(_impl_.sealed_segmentids_){from._impl_.sealed_segmentids_}
    , /*decltype(_impl_._sealed_segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.collectionname_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.src_nodeid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collectionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collectionname().empty()) {
    _this->_impl_.collectionname_.Set(from._internal_collectionname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.src_nodeid_ = from._impl_.src_nodeid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.LoadBalanceRequest)
}

inline void LoadBalanceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dst_nodeids_){arena}
    , /*decltype(_impl_._dst_nodeids_cached_byte_size_)*/{0}
    , decltype(_impl_.sealed_segmentids_){arena}
    , /*decltype(_impl_._sealed_segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.collectionname_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.src_nodeid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.collectionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoadBalanceRequest::~LoadBalanceRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.LoadBalanceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadBalanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dst_nodeids_.~RepeatedField();
  _impl_.sealed_segmentids_.~RepeatedField();
  _impl_.collectionname_.Destroy();
  _impl_.db_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void LoadBalanceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoadBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.LoadBalanceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dst_nodeids_.Clear();
  _impl_.sealed_segmentids_.Clear();
  _impl_.collectionname_.ClearToEmpty();
  _impl_.db_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.src_nodeid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadBalanceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 src_nodeID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.src_nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 dst_nodeIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dst_nodeids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_dst_nodeids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 sealed_segmentIDs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sealed_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_sealed_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collectionName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_collectionname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.LoadBalanceRequest.collectionName"));
        } else
          goto handle_unusual;
        continue;
      // string db_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.LoadBalanceRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadBalanceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.LoadBalanceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 src_nodeID = 2;
  if (this->_internal_src_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_src_nodeid(), target);
  }

  // repeated int64 dst_nodeIDs = 3;
  {
    int byte_size = _impl_._dst_nodeids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_dst_nodeids(), byte_size, target);
    }
  }

  // repeated int64 sealed_segmentIDs = 4;
  {
    int byte_size = _impl_._sealed_segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_sealed_segmentids(), byte_size, target);
    }
  }

  // string collectionName = 5;
  if (!this->_internal_collectionname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collectionname().data(), static_cast<int>(this->_internal_collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadBalanceRequest.collectionName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_collectionname(), target);
  }

  // string db_name = 6;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadBalanceRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.LoadBalanceRequest)
  return target;
}

size_t LoadBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.LoadBalanceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dst_nodeIDs = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.dst_nodeids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dst_nodeids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 sealed_segmentIDs = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.sealed_segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sealed_segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string collectionName = 5;
  if (!this->_internal_collectionname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionname());
  }

  // string db_name = 6;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 src_nodeID = 2;
  if (this->_internal_src_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_src_nodeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadBalanceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoadBalanceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadBalanceRequest::GetClassData() const { return &_class_data_; }


void LoadBalanceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoadBalanceRequest*>(&to_msg);
  auto& from = static_cast<const LoadBalanceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.LoadBalanceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dst_nodeids_.MergeFrom(from._impl_.dst_nodeids_);
  _this->_impl_.sealed_segmentids_.MergeFrom(from._impl_.sealed_segmentids_);
  if (!from._internal_collectionname().empty()) {
    _this->_internal_set_collectionname(from._internal_collectionname());
  }
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_src_nodeid() != 0) {
    _this->_internal_set_src_nodeid(from._internal_src_nodeid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadBalanceRequest::CopyFrom(const LoadBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.LoadBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadBalanceRequest::IsInitialized() const {
  return true;
}

void LoadBalanceRequest::InternalSwap(LoadBalanceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dst_nodeids_.InternalSwap(&other->_impl_.dst_nodeids_);
  _impl_.sealed_segmentids_.InternalSwap(&other->_impl_.sealed_segmentids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collectionname_, lhs_arena,
      &other->_impl_.collectionname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadBalanceRequest, _impl_.src_nodeid_)
      + sizeof(LoadBalanceRequest::_impl_.src_nodeid_)
      - PROTOBUF_FIELD_OFFSET(LoadBalanceRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadBalanceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[80]);
}

// ===================================================================

class ManualCompactionRequest::_Internal {
 public:
};

ManualCompactionRequest::ManualCompactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ManualCompactionRequest)
}
ManualCompactionRequest::ManualCompactionRequest(const ManualCompactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ManualCompactionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collectionid_){}
    , decltype(_impl_.timetravel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timetravel_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.timetravel_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ManualCompactionRequest)
}

inline void ManualCompactionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.timetravel_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ManualCompactionRequest::~ManualCompactionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ManualCompactionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ManualCompactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ManualCompactionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ManualCompactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ManualCompactionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timetravel_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.timetravel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManualCompactionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timetravel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timetravel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ManualCompactionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ManualCompactionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // uint64 timetravel = 2;
  if (this->_internal_timetravel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timetravel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ManualCompactionRequest)
  return target;
}

size_t ManualCompactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ManualCompactionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // uint64 timetravel = 2;
  if (this->_internal_timetravel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timetravel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ManualCompactionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ManualCompactionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ManualCompactionRequest::GetClassData() const { return &_class_data_; }


void ManualCompactionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ManualCompactionRequest*>(&to_msg);
  auto& from = static_cast<const ManualCompactionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ManualCompactionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_timetravel() != 0) {
    _this->_internal_set_timetravel(from._internal_timetravel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ManualCompactionRequest::CopyFrom(const ManualCompactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ManualCompactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualCompactionRequest::IsInitialized() const {
  return true;
}

void ManualCompactionRequest::InternalSwap(ManualCompactionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ManualCompactionRequest, _impl_.timetravel_)
      + sizeof(ManualCompactionRequest::_impl_.timetravel_)
      - PROTOBUF_FIELD_OFFSET(ManualCompactionRequest, _impl_.collectionid_)>(
          reinterpret_cast<char*>(&_impl_.collectionid_),
          reinterpret_cast<char*>(&other->_impl_.collectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualCompactionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[81]);
}

// ===================================================================

class ManualCompactionResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ManualCompactionResponse* msg);
};

const ::milvus::proto::common::Status&
ManualCompactionResponse::_Internal::status(const ManualCompactionResponse* msg) {
  return *msg->_impl_.status_;
}
void ManualCompactionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ManualCompactionResponse::ManualCompactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ManualCompactionResponse)
}
ManualCompactionResponse::ManualCompactionResponse(const ManualCompactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ManualCompactionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.compactionid_){}
    , decltype(_impl_.compactionplancount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.compactionid_, &from._impl_.compactionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compactionplancount_) -
    reinterpret_cast<char*>(&_impl_.compactionid_)) + sizeof(_impl_.compactionplancount_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ManualCompactionResponse)
}

inline void ManualCompactionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.compactionid_){int64_t{0}}
    , decltype(_impl_.compactionplancount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ManualCompactionResponse::~ManualCompactionResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ManualCompactionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ManualCompactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ManualCompactionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ManualCompactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ManualCompactionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.compactionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.compactionplancount_) -
      reinterpret_cast<char*>(&_impl_.compactionid_)) + sizeof(_impl_.compactionplancount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManualCompactionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 compactionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.compactionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 compactionPlanCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.compactionplancount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ManualCompactionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ManualCompactionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int64 compactionID = 2;
  if (this->_internal_compactionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_compactionid(), target);
  }

  // int32 compactionPlanCount = 3;
  if (this->_internal_compactionplancount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_compactionplancount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ManualCompactionResponse)
  return target;
}

size_t ManualCompactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ManualCompactionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 compactionID = 2;
  if (this->_internal_compactionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_compactionid());
  }

  // int32 compactionPlanCount = 3;
  if (this->_internal_compactionplancount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_compactionplancount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ManualCompactionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ManualCompactionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ManualCompactionResponse::GetClassData() const { return &_class_data_; }


void ManualCompactionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ManualCompactionResponse*>(&to_msg);
  auto& from = static_cast<const ManualCompactionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ManualCompactionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_compactionid() != 0) {
    _this->_internal_set_compactionid(from._internal_compactionid());
  }
  if (from._internal_compactionplancount() != 0) {
    _this->_internal_set_compactionplancount(from._internal_compactionplancount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ManualCompactionResponse::CopyFrom(const ManualCompactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ManualCompactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualCompactionResponse::IsInitialized() const {
  return true;
}

void ManualCompactionResponse::InternalSwap(ManualCompactionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ManualCompactionResponse, _impl_.compactionplancount_)
      + sizeof(ManualCompactionResponse::_impl_.compactionplancount_)
      - PROTOBUF_FIELD_OFFSET(ManualCompactionResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualCompactionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[82]);
}

// ===================================================================

class GetCompactionStateRequest::_Internal {
 public:
};

GetCompactionStateRequest::GetCompactionStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetCompactionStateRequest)
}
GetCompactionStateRequest::GetCompactionStateRequest(const GetCompactionStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCompactionStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.compactionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.compactionid_ = from._impl_.compactionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetCompactionStateRequest)
}

inline void GetCompactionStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.compactionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetCompactionStateRequest::~GetCompactionStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetCompactionStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCompactionStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetCompactionStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCompactionStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetCompactionStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compactionid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCompactionStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 compactionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.compactionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCompactionStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetCompactionStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 compactionID = 1;
  if (this->_internal_compactionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_compactionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetCompactionStateRequest)
  return target;
}

size_t GetCompactionStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetCompactionStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 compactionID = 1;
  if (this->_internal_compactionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_compactionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCompactionStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCompactionStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCompactionStateRequest::GetClassData() const { return &_class_data_; }


void GetCompactionStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCompactionStateRequest*>(&to_msg);
  auto& from = static_cast<const GetCompactionStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetCompactionStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_compactionid() != 0) {
    _this->_internal_set_compactionid(from._internal_compactionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCompactionStateRequest::CopyFrom(const GetCompactionStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetCompactionStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompactionStateRequest::IsInitialized() const {
  return true;
}

void GetCompactionStateRequest::InternalSwap(GetCompactionStateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.compactionid_, other->_impl_.compactionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCompactionStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[83]);
}

// ===================================================================

class GetCompactionStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetCompactionStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetCompactionStateResponse::_Internal::status(const GetCompactionStateResponse* msg) {
  return *msg->_impl_.status_;
}
void GetCompactionStateResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetCompactionStateResponse::GetCompactionStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetCompactionStateResponse)
}
GetCompactionStateResponse::GetCompactionStateResponse(const GetCompactionStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCompactionStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.executingplanno_){}
    , decltype(_impl_.timeoutplanno_){}
    , decltype(_impl_.completedplanno_){}
    , decltype(_impl_.failedplanno_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.executingplanno_, &from._impl_.executingplanno_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.executingplanno_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetCompactionStateResponse)
}

inline void GetCompactionStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.executingplanno_){int64_t{0}}
    , decltype(_impl_.timeoutplanno_){int64_t{0}}
    , decltype(_impl_.completedplanno_){int64_t{0}}
    , decltype(_impl_.failedplanno_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetCompactionStateResponse::~GetCompactionStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetCompactionStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCompactionStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetCompactionStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCompactionStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetCompactionStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.executingplanno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.executingplanno_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCompactionStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.CompactionState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::CompactionState>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 executingPlanNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.executingplanno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timeoutPlanNo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timeoutplanno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 completedPlanNo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.completedplanno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 failedPlanNo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.failedplanno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCompactionStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetCompactionStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.CompactionState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // int64 executingPlanNo = 3;
  if (this->_internal_executingplanno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_executingplanno(), target);
  }

  // int64 timeoutPlanNo = 4;
  if (this->_internal_timeoutplanno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_timeoutplanno(), target);
  }

  // int64 completedPlanNo = 5;
  if (this->_internal_completedplanno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_completedplanno(), target);
  }

  // int64 failedPlanNo = 6;
  if (this->_internal_failedplanno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_failedplanno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetCompactionStateResponse)
  return target;
}

size_t GetCompactionStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetCompactionStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 executingPlanNo = 3;
  if (this->_internal_executingplanno() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_executingplanno());
  }

  // int64 timeoutPlanNo = 4;
  if (this->_internal_timeoutplanno() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timeoutplanno());
  }

  // int64 completedPlanNo = 5;
  if (this->_internal_completedplanno() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_completedplanno());
  }

  // int64 failedPlanNo = 6;
  if (this->_internal_failedplanno() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_failedplanno());
  }

  // .milvus.proto.common.CompactionState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCompactionStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCompactionStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCompactionStateResponse::GetClassData() const { return &_class_data_; }


void GetCompactionStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCompactionStateResponse*>(&to_msg);
  auto& from = static_cast<const GetCompactionStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetCompactionStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_executingplanno() != 0) {
    _this->_internal_set_executingplanno(from._internal_executingplanno());
  }
  if (from._internal_timeoutplanno() != 0) {
    _this->_internal_set_timeoutplanno(from._internal_timeoutplanno());
  }
  if (from._internal_completedplanno() != 0) {
    _this->_internal_set_completedplanno(from._internal_completedplanno());
  }
  if (from._internal_failedplanno() != 0) {
    _this->_internal_set_failedplanno(from._internal_failedplanno());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCompactionStateResponse::CopyFrom(const GetCompactionStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetCompactionStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompactionStateResponse::IsInitialized() const {
  return true;
}

void GetCompactionStateResponse::InternalSwap(GetCompactionStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCompactionStateResponse, _impl_.state_)
      + sizeof(GetCompactionStateResponse::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(GetCompactionStateResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCompactionStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[84]);
}

// ===================================================================

class GetCompactionPlansRequest::_Internal {
 public:
};

GetCompactionPlansRequest::GetCompactionPlansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetCompactionPlansRequest)
}
GetCompactionPlansRequest::GetCompactionPlansRequest(const GetCompactionPlansRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCompactionPlansRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.compactionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.compactionid_ = from._impl_.compactionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetCompactionPlansRequest)
}

inline void GetCompactionPlansRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.compactionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetCompactionPlansRequest::~GetCompactionPlansRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetCompactionPlansRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCompactionPlansRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetCompactionPlansRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCompactionPlansRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetCompactionPlansRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compactionid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCompactionPlansRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 compactionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.compactionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCompactionPlansRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetCompactionPlansRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 compactionID = 1;
  if (this->_internal_compactionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_compactionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetCompactionPlansRequest)
  return target;
}

size_t GetCompactionPlansRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetCompactionPlansRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 compactionID = 1;
  if (this->_internal_compactionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_compactionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCompactionPlansRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCompactionPlansRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCompactionPlansRequest::GetClassData() const { return &_class_data_; }


void GetCompactionPlansRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCompactionPlansRequest*>(&to_msg);
  auto& from = static_cast<const GetCompactionPlansRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetCompactionPlansRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_compactionid() != 0) {
    _this->_internal_set_compactionid(from._internal_compactionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCompactionPlansRequest::CopyFrom(const GetCompactionPlansRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetCompactionPlansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompactionPlansRequest::IsInitialized() const {
  return true;
}

void GetCompactionPlansRequest::InternalSwap(GetCompactionPlansRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.compactionid_, other->_impl_.compactionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCompactionPlansRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[85]);
}

// ===================================================================

class GetCompactionPlansResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetCompactionPlansResponse* msg);
};

const ::milvus::proto::common::Status&
GetCompactionPlansResponse::_Internal::status(const GetCompactionPlansResponse* msg) {
  return *msg->_impl_.status_;
}
void GetCompactionPlansResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetCompactionPlansResponse::GetCompactionPlansResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetCompactionPlansResponse)
}
GetCompactionPlansResponse::GetCompactionPlansResponse(const GetCompactionPlansResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCompactionPlansResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mergeinfos_){from._impl_.mergeinfos_}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetCompactionPlansResponse)
}

inline void GetCompactionPlansResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mergeinfos_){arena}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetCompactionPlansResponse::~GetCompactionPlansResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetCompactionPlansResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCompactionPlansResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mergeinfos_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetCompactionPlansResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCompactionPlansResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetCompactionPlansResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mergeinfos_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCompactionPlansResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.CompactionState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::CompactionState>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.CompactionMergeInfo mergeInfos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mergeinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCompactionPlansResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetCompactionPlansResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.CompactionState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // repeated .milvus.proto.milvus.CompactionMergeInfo mergeInfos = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mergeinfos_size()); i < n; i++) {
    const auto& repfield = this->_internal_mergeinfos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetCompactionPlansResponse)
  return target;
}

size_t GetCompactionPlansResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetCompactionPlansResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.CompactionMergeInfo mergeInfos = 3;
  total_size += 1UL * this->_internal_mergeinfos_size();
  for (const auto& msg : this->_impl_.mergeinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .milvus.proto.common.CompactionState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCompactionPlansResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCompactionPlansResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCompactionPlansResponse::GetClassData() const { return &_class_data_; }


void GetCompactionPlansResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCompactionPlansResponse*>(&to_msg);
  auto& from = static_cast<const GetCompactionPlansResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetCompactionPlansResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mergeinfos_.MergeFrom(from._impl_.mergeinfos_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCompactionPlansResponse::CopyFrom(const GetCompactionPlansResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetCompactionPlansResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompactionPlansResponse::IsInitialized() const {
  return true;
}

void GetCompactionPlansResponse::InternalSwap(GetCompactionPlansResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mergeinfos_.InternalSwap(&other->_impl_.mergeinfos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCompactionPlansResponse, _impl_.state_)
      + sizeof(GetCompactionPlansResponse::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(GetCompactionPlansResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCompactionPlansResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[86]);
}

// ===================================================================

class CompactionMergeInfo::_Internal {
 public:
};

CompactionMergeInfo::CompactionMergeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CompactionMergeInfo)
}
CompactionMergeInfo::CompactionMergeInfo(const CompactionMergeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompactionMergeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sources_){from._impl_.sources_}
    , /*decltype(_impl_._sources_cached_byte_size_)*/{0}
    , decltype(_impl_.target_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.target_ = from._impl_.target_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CompactionMergeInfo)
}

inline void CompactionMergeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sources_){arena}
    , /*decltype(_impl_._sources_cached_byte_size_)*/{0}
    , decltype(_impl_.target_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CompactionMergeInfo::~CompactionMergeInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CompactionMergeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompactionMergeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sources_.~RepeatedField();
}

void CompactionMergeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompactionMergeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CompactionMergeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sources_.Clear();
  _impl_.target_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompactionMergeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 sources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sources(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_sources(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompactionMergeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CompactionMergeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 sources = 1;
  {
    int byte_size = _impl_._sources_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_sources(), byte_size, target);
    }
  }

  // int64 target = 2;
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CompactionMergeInfo)
  return target;
}

size_t CompactionMergeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CompactionMergeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 sources = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.sources_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sources_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 target = 2;
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompactionMergeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompactionMergeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompactionMergeInfo::GetClassData() const { return &_class_data_; }


void CompactionMergeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompactionMergeInfo*>(&to_msg);
  auto& from = static_cast<const CompactionMergeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CompactionMergeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sources_.MergeFrom(from._impl_.sources_);
  if (from._internal_target() != 0) {
    _this->_internal_set_target(from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompactionMergeInfo::CopyFrom(const CompactionMergeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CompactionMergeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionMergeInfo::IsInitialized() const {
  return true;
}

void CompactionMergeInfo::InternalSwap(CompactionMergeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sources_.InternalSwap(&other->_impl_.sources_);
  swap(_impl_.target_, other->_impl_.target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactionMergeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[87]);
}

// ===================================================================

class GetFlushStateRequest::_Internal {
 public:
};

GetFlushStateRequest::GetFlushStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetFlushStateRequest)
}
GetFlushStateRequest::GetFlushStateRequest(const GetFlushStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFlushStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){from._impl_.segmentids_}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetFlushStateRequest)
}

inline void GetFlushStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){arena}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFlushStateRequest::~GetFlushStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetFlushStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFlushStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentids_.~RepeatedField();
}

void GetFlushStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFlushStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetFlushStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segmentids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 segmentIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFlushStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetFlushStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 1;
  {
    int byte_size = _impl_._segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_segmentids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetFlushStateRequest)
  return target;
}

size_t GetFlushStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetFlushStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlushStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFlushStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlushStateRequest::GetClassData() const { return &_class_data_; }


void GetFlushStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFlushStateRequest*>(&to_msg);
  auto& from = static_cast<const GetFlushStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetFlushStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segmentids_.MergeFrom(from._impl_.segmentids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlushStateRequest::CopyFrom(const GetFlushStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetFlushStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushStateRequest::IsInitialized() const {
  return true;
}

void GetFlushStateRequest::InternalSwap(GetFlushStateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentids_.InternalSwap(&other->_impl_.segmentids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[88]);
}

// ===================================================================

class GetFlushStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetFlushStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetFlushStateResponse::_Internal::status(const GetFlushStateResponse* msg) {
  return *msg->_impl_.status_;
}
void GetFlushStateResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetFlushStateResponse::GetFlushStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetFlushStateResponse)
}
GetFlushStateResponse::GetFlushStateResponse(const GetFlushStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFlushStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.flushed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  _this->_impl_.flushed_ = from._impl_.flushed_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetFlushStateResponse)
}

inline void GetFlushStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.flushed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFlushStateResponse::~GetFlushStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetFlushStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFlushStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetFlushStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFlushStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetFlushStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.flushed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flushed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.flushed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFlushStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetFlushStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // bool flushed = 2;
  if (this->_internal_flushed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_flushed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetFlushStateResponse)
  return target;
}

size_t GetFlushStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetFlushStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // bool flushed = 2;
  if (this->_internal_flushed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlushStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFlushStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlushStateResponse::GetClassData() const { return &_class_data_; }


void GetFlushStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFlushStateResponse*>(&to_msg);
  auto& from = static_cast<const GetFlushStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetFlushStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_flushed() != 0) {
    _this->_internal_set_flushed(from._internal_flushed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlushStateResponse::CopyFrom(const GetFlushStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetFlushStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushStateResponse::IsInitialized() const {
  return true;
}

void GetFlushStateResponse::InternalSwap(GetFlushStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlushStateResponse, _impl_.flushed_)
      + sizeof(GetFlushStateResponse::_impl_.flushed_)
      - PROTOBUF_FIELD_OFFSET(GetFlushStateResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[89]);
}

// ===================================================================

class GetFlushAllStateRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetFlushAllStateRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetFlushAllStateRequest::_Internal::base(const GetFlushAllStateRequest* msg) {
  return *msg->_impl_.base_;
}
void GetFlushAllStateRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetFlushAllStateRequest::GetFlushAllStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetFlushAllStateRequest)
}
GetFlushAllStateRequest::GetFlushAllStateRequest(const GetFlushAllStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFlushAllStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.flush_all_ts_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.flush_all_ts_ = from._impl_.flush_all_ts_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetFlushAllStateRequest)
}

inline void GetFlushAllStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.flush_all_ts_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFlushAllStateRequest::~GetFlushAllStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetFlushAllStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFlushAllStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetFlushAllStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFlushAllStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetFlushAllStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.flush_all_ts_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushAllStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 flush_all_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.flush_all_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFlushAllStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetFlushAllStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // uint64 flush_all_ts = 2;
  if (this->_internal_flush_all_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_flush_all_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetFlushAllStateRequest)
  return target;
}

size_t GetFlushAllStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetFlushAllStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // uint64 flush_all_ts = 2;
  if (this->_internal_flush_all_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_flush_all_ts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlushAllStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFlushAllStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlushAllStateRequest::GetClassData() const { return &_class_data_; }


void GetFlushAllStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFlushAllStateRequest*>(&to_msg);
  auto& from = static_cast<const GetFlushAllStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetFlushAllStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_flush_all_ts() != 0) {
    _this->_internal_set_flush_all_ts(from._internal_flush_all_ts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlushAllStateRequest::CopyFrom(const GetFlushAllStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetFlushAllStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushAllStateRequest::IsInitialized() const {
  return true;
}

void GetFlushAllStateRequest::InternalSwap(GetFlushAllStateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlushAllStateRequest, _impl_.flush_all_ts_)
      + sizeof(GetFlushAllStateRequest::_impl_.flush_all_ts_)
      - PROTOBUF_FIELD_OFFSET(GetFlushAllStateRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushAllStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[90]);
}

// ===================================================================

class GetFlushAllStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetFlushAllStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetFlushAllStateResponse::_Internal::status(const GetFlushAllStateResponse* msg) {
  return *msg->_impl_.status_;
}
void GetFlushAllStateResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetFlushAllStateResponse::GetFlushAllStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetFlushAllStateResponse)
}
GetFlushAllStateResponse::GetFlushAllStateResponse(const GetFlushAllStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFlushAllStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.flushed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  _this->_impl_.flushed_ = from._impl_.flushed_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetFlushAllStateResponse)
}

inline void GetFlushAllStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.flushed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFlushAllStateResponse::~GetFlushAllStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetFlushAllStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFlushAllStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetFlushAllStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFlushAllStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetFlushAllStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.flushed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushAllStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flushed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.flushed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFlushAllStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetFlushAllStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // bool flushed = 2;
  if (this->_internal_flushed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_flushed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetFlushAllStateResponse)
  return target;
}

size_t GetFlushAllStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetFlushAllStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // bool flushed = 2;
  if (this->_internal_flushed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlushAllStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFlushAllStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlushAllStateResponse::GetClassData() const { return &_class_data_; }


void GetFlushAllStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFlushAllStateResponse*>(&to_msg);
  auto& from = static_cast<const GetFlushAllStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetFlushAllStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_flushed() != 0) {
    _this->_internal_set_flushed(from._internal_flushed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlushAllStateResponse::CopyFrom(const GetFlushAllStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetFlushAllStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushAllStateResponse::IsInitialized() const {
  return true;
}

void GetFlushAllStateResponse::InternalSwap(GetFlushAllStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlushAllStateResponse, _impl_.flushed_)
      + sizeof(GetFlushAllStateResponse::_impl_.flushed_)
      - PROTOBUF_FIELD_OFFSET(GetFlushAllStateResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushAllStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[91]);
}

// ===================================================================

class ImportRequest::_Internal {
 public:
};

void ImportRequest::clear_options() {
  _impl_.options_.Clear();
}
ImportRequest::ImportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ImportRequest)
}
ImportRequest::ImportRequest(const ImportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_names_){from._impl_.channel_names_}
    , decltype(_impl_.files_){from._impl_.files_}
    , decltype(_impl_.options_){from._impl_.options_}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.row_based_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_name().empty()) {
    _this->_impl_.partition_name_.Set(from._internal_partition_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.row_based_ = from._impl_.row_based_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ImportRequest)
}

inline void ImportRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_names_){arena}
    , decltype(_impl_.files_){arena}
    , decltype(_impl_.options_){arena}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.row_based_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImportRequest::~ImportRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ImportRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_names_.~RepeatedPtrField();
  _impl_.files_.~RepeatedPtrField();
  _impl_.options_.~RepeatedPtrField();
  _impl_.collection_name_.Destroy();
  _impl_.partition_name_.Destroy();
  _impl_.db_name_.Destroy();
}

void ImportRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ImportRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_names_.Clear();
  _impl_.files_.Clear();
  _impl_.options_.Clear();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.partition_name_.ClearToEmpty();
  _impl_.db_name_.ClearToEmpty();
  _impl_.row_based_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string collection_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ImportRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ImportRequest.partition_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string channel_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_channel_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ImportRequest.channel_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool row_based = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.row_based_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string files = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_files();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ImportRequest.files"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string db_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ImportRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ImportRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection_name = 1;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ImportRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collection_name(), target);
  }

  // string partition_name = 2;
  if (!this->_internal_partition_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ImportRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partition_name(), target);
  }

  // repeated string channel_names = 3;
  for (int i = 0, n = this->_internal_channel_names_size(); i < n; i++) {
    const auto& s = this->_internal_channel_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ImportRequest.channel_names");
    target = stream->WriteString(3, s, target);
  }

  // bool row_based = 4;
  if (this->_internal_row_based() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_row_based(), target);
  }

  // repeated string files = 5;
  for (int i = 0, n = this->_internal_files_size(); i < n; i++) {
    const auto& s = this->_internal_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ImportRequest.files");
    target = stream->WriteString(5, s, target);
  }

  // repeated .milvus.proto.common.KeyValuePair options = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_options_size()); i < n; i++) {
    const auto& repfield = this->_internal_options(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string db_name = 7;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ImportRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ImportRequest)
  return target;
}

size_t ImportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ImportRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string channel_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.channel_names_.size());
  for (int i = 0, n = _impl_.channel_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.channel_names_.Get(i));
  }

  // repeated string files = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.files_.size());
  for (int i = 0, n = _impl_.files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.files_.Get(i));
  }

  // repeated .milvus.proto.common.KeyValuePair options = 6;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->_impl_.options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string collection_name = 1;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 2;
  if (!this->_internal_partition_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // string db_name = 7;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // bool row_based = 4;
  if (this->_internal_row_based() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportRequest::GetClassData() const { return &_class_data_; }


void ImportRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportRequest*>(&to_msg);
  auto& from = static_cast<const ImportRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ImportRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channel_names_.MergeFrom(from._impl_.channel_names_);
  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  _this->_impl_.options_.MergeFrom(from._impl_.options_);
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_partition_name().empty()) {
    _this->_internal_set_partition_name(from._internal_partition_name());
  }
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (from._internal_row_based() != 0) {
    _this->_internal_set_row_based(from._internal_row_based());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportRequest::CopyFrom(const ImportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ImportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportRequest::IsInitialized() const {
  return true;
}

void ImportRequest::InternalSwap(ImportRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channel_names_.InternalSwap(&other->_impl_.channel_names_);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  _impl_.options_.InternalSwap(&other->_impl_.options_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_name_, lhs_arena,
      &other->_impl_.partition_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  swap(_impl_.row_based_, other->_impl_.row_based_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[92]);
}

// ===================================================================

class ImportResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ImportResponse* msg);
};

const ::milvus::proto::common::Status&
ImportResponse::_Internal::status(const ImportResponse* msg) {
  return *msg->_impl_.status_;
}
void ImportResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ImportResponse::ImportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ImportResponse)
}
ImportResponse::ImportResponse(const ImportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){from._impl_.tasks_}
    , /*decltype(_impl_._tasks_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ImportResponse)
}

inline void ImportResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){arena}
    , /*decltype(_impl_._tasks_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImportResponse::~ImportResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ImportResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ImportResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ImportResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_tasks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_tasks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ImportResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated int64 tasks = 2;
  {
    int byte_size = _impl_._tasks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_tasks(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ImportResponse)
  return target;
}

size_t ImportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ImportResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 tasks = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.tasks_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tasks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportResponse::GetClassData() const { return &_class_data_; }


void ImportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportResponse*>(&to_msg);
  auto& from = static_cast<const ImportResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ImportResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportResponse::CopyFrom(const ImportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ImportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportResponse::IsInitialized() const {
  return true;
}

void ImportResponse::InternalSwap(ImportResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[93]);
}

// ===================================================================

class GetImportStateRequest::_Internal {
 public:
};

GetImportStateRequest::GetImportStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetImportStateRequest)
}
GetImportStateRequest::GetImportStateRequest(const GetImportStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetImportStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.task_ = from._impl_.task_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetImportStateRequest)
}

inline void GetImportStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetImportStateRequest::~GetImportStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetImportStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetImportStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetImportStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetImportStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetImportStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetImportStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.task_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetImportStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetImportStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 task = 1;
  if (this->_internal_task() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_task(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetImportStateRequest)
  return target;
}

size_t GetImportStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetImportStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 task = 1;
  if (this->_internal_task() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_task());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetImportStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetImportStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetImportStateRequest::GetClassData() const { return &_class_data_; }


void GetImportStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetImportStateRequest*>(&to_msg);
  auto& from = static_cast<const GetImportStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetImportStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_task() != 0) {
    _this->_internal_set_task(from._internal_task());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetImportStateRequest::CopyFrom(const GetImportStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetImportStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImportStateRequest::IsInitialized() const {
  return true;
}

void GetImportStateRequest::InternalSwap(GetImportStateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.task_, other->_impl_.task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetImportStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[94]);
}

// ===================================================================

class GetImportStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetImportStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetImportStateResponse::_Internal::status(const GetImportStateResponse* msg) {
  return *msg->_impl_.status_;
}
void GetImportStateResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void GetImportStateResponse::clear_infos() {
  _impl_.infos_.Clear();
}
GetImportStateResponse::GetImportStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetImportStateResponse)
}
GetImportStateResponse::GetImportStateResponse(const GetImportStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetImportStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_list_){from._impl_.id_list_}
    , /*decltype(_impl_._id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.infos_){from._impl_.infos_}
    , decltype(_impl_.segment_ids_){from._impl_.segment_ids_}
    , /*decltype(_impl_._segment_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.row_count_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.collection_id_){}
    , decltype(_impl_.create_ts_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.row_count_, &from._impl_.row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.row_count_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetImportStateResponse)
}

inline void GetImportStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_list_){arena}
    , /*decltype(_impl_._id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.infos_){arena}
    , decltype(_impl_.segment_ids_){arena}
    , /*decltype(_impl_._segment_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.row_count_){int64_t{0}}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.collection_id_){int64_t{0}}
    , decltype(_impl_.create_ts_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetImportStateResponse::~GetImportStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetImportStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetImportStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_list_.~RepeatedField();
  _impl_.infos_.~RepeatedPtrField();
  _impl_.segment_ids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetImportStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetImportStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetImportStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_list_.Clear();
  _impl_.infos_.Clear();
  _impl_.segment_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.row_count_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetImportStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.ImportState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::ImportState>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 row_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 id_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair infos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collection_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.collection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segment_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segment_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_segment_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 create_ts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.create_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetImportStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetImportStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.ImportState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // int64 row_count = 3;
  if (this->_internal_row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_row_count(), target);
  }

  // repeated int64 id_list = 4;
  {
    int byte_size = _impl_._id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_id_list(), byte_size, target);
    }
  }

  // repeated .milvus.proto.common.KeyValuePair infos = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 id = 6;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_id(), target);
  }

  // int64 collection_id = 7;
  if (this->_internal_collection_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_collection_id(), target);
  }

  // repeated int64 segment_ids = 8;
  {
    int byte_size = _impl_._segment_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_segment_ids(), byte_size, target);
    }
  }

  // int64 create_ts = 9;
  if (this->_internal_create_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_create_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetImportStateResponse)
  return target;
}

size_t GetImportStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetImportStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 id_list = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .milvus.proto.common.KeyValuePair infos = 5;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_impl_.infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 segment_ids = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segment_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segment_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 row_count = 3;
  if (this->_internal_row_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_row_count());
  }

  // int64 id = 6;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 collection_id = 7;
  if (this->_internal_collection_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collection_id());
  }

  // int64 create_ts = 9;
  if (this->_internal_create_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_ts());
  }

  // .milvus.proto.common.ImportState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetImportStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetImportStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetImportStateResponse::GetClassData() const { return &_class_data_; }


void GetImportStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetImportStateResponse*>(&to_msg);
  auto& from = static_cast<const GetImportStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetImportStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.id_list_.MergeFrom(from._impl_.id_list_);
  _this->_impl_.infos_.MergeFrom(from._impl_.infos_);
  _this->_impl_.segment_ids_.MergeFrom(from._impl_.segment_ids_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_row_count() != 0) {
    _this->_internal_set_row_count(from._internal_row_count());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_collection_id() != 0) {
    _this->_internal_set_collection_id(from._internal_collection_id());
  }
  if (from._internal_create_ts() != 0) {
    _this->_internal_set_create_ts(from._internal_create_ts());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetImportStateResponse::CopyFrom(const GetImportStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetImportStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImportStateResponse::IsInitialized() const {
  return true;
}

void GetImportStateResponse::InternalSwap(GetImportStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.id_list_.InternalSwap(&other->_impl_.id_list_);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
  _impl_.segment_ids_.InternalSwap(&other->_impl_.segment_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetImportStateResponse, _impl_.state_)
      + sizeof(GetImportStateResponse::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(GetImportStateResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetImportStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[95]);
}

// ===================================================================

class ListImportTasksRequest::_Internal {
 public:
};

ListImportTasksRequest::ListImportTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListImportTasksRequest)
}
ListImportTasksRequest::ListImportTasksRequest(const ListImportTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListImportTasksRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListImportTasksRequest)
}

inline void ListImportTasksRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.limit_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListImportTasksRequest::~ListImportTasksRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListImportTasksRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListImportTasksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collection_name_.Destroy();
  _impl_.db_name_.Destroy();
}

void ListImportTasksRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListImportTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListImportTasksRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collection_name_.ClearToEmpty();
  _impl_.db_name_.ClearToEmpty();
  _impl_.limit_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListImportTasksRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string collection_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ListImportTasksRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ListImportTasksRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListImportTasksRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListImportTasksRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection_name = 1;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListImportTasksRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collection_name(), target);
  }

  // int64 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_limit(), target);
  }

  // string db_name = 3;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListImportTasksRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListImportTasksRequest)
  return target;
}

size_t ListImportTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListImportTasksRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection_name = 1;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string db_name = 3;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // int64 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListImportTasksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListImportTasksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListImportTasksRequest::GetClassData() const { return &_class_data_; }


void ListImportTasksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListImportTasksRequest*>(&to_msg);
  auto& from = static_cast<const ListImportTasksRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListImportTasksRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListImportTasksRequest::CopyFrom(const ListImportTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListImportTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListImportTasksRequest::IsInitialized() const {
  return true;
}

void ListImportTasksRequest::InternalSwap(ListImportTasksRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  swap(_impl_.limit_, other->_impl_.limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListImportTasksRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[96]);
}

// ===================================================================

class ListImportTasksResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ListImportTasksResponse* msg);
};

const ::milvus::proto::common::Status&
ListImportTasksResponse::_Internal::status(const ListImportTasksResponse* msg) {
  return *msg->_impl_.status_;
}
void ListImportTasksResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ListImportTasksResponse::ListImportTasksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListImportTasksResponse)
}
ListImportTasksResponse::ListImportTasksResponse(const ListImportTasksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListImportTasksResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){from._impl_.tasks_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListImportTasksResponse)
}

inline void ListImportTasksResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListImportTasksResponse::~ListImportTasksResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListImportTasksResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListImportTasksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ListImportTasksResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListImportTasksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListImportTasksResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListImportTasksResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.GetImportStateResponse tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListImportTasksResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListImportTasksResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.milvus.GetImportStateResponse tasks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListImportTasksResponse)
  return target;
}

size_t ListImportTasksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListImportTasksResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.GetImportStateResponse tasks = 2;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->_impl_.tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListImportTasksResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListImportTasksResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListImportTasksResponse::GetClassData() const { return &_class_data_; }


void ListImportTasksResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListImportTasksResponse*>(&to_msg);
  auto& from = static_cast<const ListImportTasksResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListImportTasksResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListImportTasksResponse::CopyFrom(const ListImportTasksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListImportTasksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListImportTasksResponse::IsInitialized() const {
  return true;
}

void ListImportTasksResponse::InternalSwap(ListImportTasksResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListImportTasksResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[97]);
}

// ===================================================================

class GetReplicasRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetReplicasRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetReplicasRequest::_Internal::base(const GetReplicasRequest* msg) {
  return *msg->_impl_.base_;
}
void GetReplicasRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetReplicasRequest::GetReplicasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetReplicasRequest)
}
GetReplicasRequest::GetReplicasRequest(const GetReplicasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetReplicasRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.with_shard_nodes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.with_shard_nodes_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.with_shard_nodes_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetReplicasRequest)
}

inline void GetReplicasRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.with_shard_nodes_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetReplicasRequest::~GetReplicasRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetReplicasRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetReplicasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collection_name_.Destroy();
  _impl_.db_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetReplicasRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetReplicasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetReplicasRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collection_name_.ClearToEmpty();
  _impl_.db_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.with_shard_nodes_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.with_shard_nodes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReplicasRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool with_shard_nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.with_shard_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetReplicasRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string db_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetReplicasRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetReplicasRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetReplicasRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // bool with_shard_nodes = 3;
  if (this->_internal_with_shard_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_with_shard_nodes(), target);
  }

  // string collection_name = 4;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetReplicasRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_collection_name(), target);
  }

  // string db_name = 5;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetReplicasRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetReplicasRequest)
  return target;
}

size_t GetReplicasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetReplicasRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection_name = 4;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string db_name = 5;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // bool with_shard_nodes = 3;
  if (this->_internal_with_shard_nodes() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReplicasRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetReplicasRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReplicasRequest::GetClassData() const { return &_class_data_; }


void GetReplicasRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetReplicasRequest*>(&to_msg);
  auto& from = static_cast<const GetReplicasRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetReplicasRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_with_shard_nodes() != 0) {
    _this->_internal_set_with_shard_nodes(from._internal_with_shard_nodes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReplicasRequest::CopyFrom(const GetReplicasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetReplicasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReplicasRequest::IsInitialized() const {
  return true;
}

void GetReplicasRequest::InternalSwap(GetReplicasRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetReplicasRequest, _impl_.with_shard_nodes_)
      + sizeof(GetReplicasRequest::_impl_.with_shard_nodes_)
      - PROTOBUF_FIELD_OFFSET(GetReplicasRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReplicasRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[98]);
}

// ===================================================================

class GetReplicasResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetReplicasResponse* msg);
};

const ::milvus::proto::common::Status&
GetReplicasResponse::_Internal::status(const GetReplicasResponse* msg) {
  return *msg->_impl_.status_;
}
void GetReplicasResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetReplicasResponse::GetReplicasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetReplicasResponse)
}
GetReplicasResponse::GetReplicasResponse(const GetReplicasResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetReplicasResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replicas_){from._impl_.replicas_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetReplicasResponse)
}

inline void GetReplicasResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.replicas_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetReplicasResponse::~GetReplicasResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetReplicasResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetReplicasResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replicas_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetReplicasResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetReplicasResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetReplicasResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replicas_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReplicasResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.ReplicaInfo replicas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replicas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetReplicasResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetReplicasResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.milvus.ReplicaInfo replicas = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_replicas_size()); i < n; i++) {
    const auto& repfield = this->_internal_replicas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetReplicasResponse)
  return target;
}

size_t GetReplicasResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetReplicasResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.ReplicaInfo replicas = 2;
  total_size += 1UL * this->_internal_replicas_size();
  for (const auto& msg : this->_impl_.replicas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReplicasResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetReplicasResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReplicasResponse::GetClassData() const { return &_class_data_; }


void GetReplicasResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetReplicasResponse*>(&to_msg);
  auto& from = static_cast<const GetReplicasResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetReplicasResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.replicas_.MergeFrom(from._impl_.replicas_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReplicasResponse::CopyFrom(const GetReplicasResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetReplicasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReplicasResponse::IsInitialized() const {
  return true;
}

void GetReplicasResponse::InternalSwap(GetReplicasResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.replicas_.InternalSwap(&other->_impl_.replicas_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReplicasResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[99]);
}

// ===================================================================

ReplicaInfo_NumOutboundNodeEntry_DoNotUse::ReplicaInfo_NumOutboundNodeEntry_DoNotUse() {}
ReplicaInfo_NumOutboundNodeEntry_DoNotUse::ReplicaInfo_NumOutboundNodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ReplicaInfo_NumOutboundNodeEntry_DoNotUse::MergeFrom(const ReplicaInfo_NumOutboundNodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ReplicaInfo_NumOutboundNodeEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[100]);
}

// ===================================================================

class ReplicaInfo::_Internal {
 public:
};

ReplicaInfo::ReplicaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ReplicaInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ReplicaInfo)
}
ReplicaInfo::ReplicaInfo(const ReplicaInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplicaInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_ids_){from._impl_.partition_ids_}
    , /*decltype(_impl_._partition_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.shard_replicas_){from._impl_.shard_replicas_}
    , decltype(_impl_.node_ids_){from._impl_.node_ids_}
    , /*decltype(_impl_._node_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_.num_outbound_node_)*/{}
    , decltype(_impl_.resource_group_name_){}
    , decltype(_impl_.replicaid_){}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_outbound_node_.MergeFrom(from._impl_.num_outbound_node_);
  _impl_.resource_group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_group_name().empty()) {
    _this->_impl_.resource_group_name_.Set(from._internal_resource_group_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.replicaid_, &from._impl_.replicaid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.collectionid_) -
    reinterpret_cast<char*>(&_impl_.replicaid_)) + sizeof(_impl_.collectionid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ReplicaInfo)
}

inline void ReplicaInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_ids_){arena}
    , /*decltype(_impl_._partition_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.shard_replicas_){arena}
    , decltype(_impl_.node_ids_){arena}
    , /*decltype(_impl_._node_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_.num_outbound_node_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.resource_group_name_){}
    , decltype(_impl_.replicaid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReplicaInfo::~ReplicaInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ReplicaInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ReplicaInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_ids_.~RepeatedField();
  _impl_.shard_replicas_.~RepeatedPtrField();
  _impl_.node_ids_.~RepeatedField();
  _impl_.num_outbound_node_.Destruct();
  _impl_.num_outbound_node_.~MapField();
  _impl_.resource_group_name_.Destroy();
}

void ReplicaInfo::ArenaDtor(void* object) {
  ReplicaInfo* _this = reinterpret_cast< ReplicaInfo* >(object);
  _this->_impl_.num_outbound_node_.Destruct();
}
void ReplicaInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplicaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ReplicaInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partition_ids_.Clear();
  _impl_.shard_replicas_.Clear();
  _impl_.node_ids_.Clear();
  _impl_.num_outbound_node_.Clear();
  _impl_.resource_group_name_.ClearToEmpty();
  ::memset(&_impl_.replicaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.collectionid_) -
      reinterpret_cast<char*>(&_impl_.replicaid_)) + sizeof(_impl_.collectionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicaInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 replicaID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.replicaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 partition_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_partition_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_partition_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.ShardReplica shard_replicas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shard_replicas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 node_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_node_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_node_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string resource_group_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_resource_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ReplicaInfo.resource_group_name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> num_outbound_node = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.num_outbound_node_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplicaInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ReplicaInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 replicaID = 1;
  if (this->_internal_replicaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_replicaid(), target);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // repeated int64 partition_ids = 3;
  {
    int byte_size = _impl_._partition_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_partition_ids(), byte_size, target);
    }
  }

  // repeated .milvus.proto.milvus.ShardReplica shard_replicas = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shard_replicas_size()); i < n; i++) {
    const auto& repfield = this->_internal_shard_replicas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 node_ids = 5;
  {
    int byte_size = _impl_._node_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_node_ids(), byte_size, target);
    }
  }

  // string resource_group_name = 6;
  if (!this->_internal_resource_group_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_group_name().data(), static_cast<int>(this->_internal_resource_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReplicaInfo.resource_group_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_resource_group_name(), target);
  }

  // map<string, int32> num_outbound_node = 7;
  if (!this->_internal_num_outbound_node().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = ReplicaInfo_NumOutboundNodeEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_num_outbound_node();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "milvus.proto.milvus.ReplicaInfo.NumOutboundNodeEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ReplicaInfo)
  return target;
}

size_t ReplicaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ReplicaInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 partition_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.partition_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._partition_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .milvus.proto.milvus.ShardReplica shard_replicas = 4;
  total_size += 1UL * this->_internal_shard_replicas_size();
  for (const auto& msg : this->_impl_.shard_replicas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 node_ids = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.node_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._node_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, int32> num_outbound_node = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_num_outbound_node_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_num_outbound_node().begin();
      it != this->_internal_num_outbound_node().end(); ++it) {
    total_size += ReplicaInfo_NumOutboundNodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string resource_group_name = 6;
  if (!this->_internal_resource_group_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_group_name());
  }

  // int64 replicaID = 1;
  if (this->_internal_replicaid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_replicaid());
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplicaInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplicaInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplicaInfo::GetClassData() const { return &_class_data_; }


void ReplicaInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplicaInfo*>(&to_msg);
  auto& from = static_cast<const ReplicaInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ReplicaInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partition_ids_.MergeFrom(from._impl_.partition_ids_);
  _this->_impl_.shard_replicas_.MergeFrom(from._impl_.shard_replicas_);
  _this->_impl_.node_ids_.MergeFrom(from._impl_.node_ids_);
  _this->_impl_.num_outbound_node_.MergeFrom(from._impl_.num_outbound_node_);
  if (!from._internal_resource_group_name().empty()) {
    _this->_internal_set_resource_group_name(from._internal_resource_group_name());
  }
  if (from._internal_replicaid() != 0) {
    _this->_internal_set_replicaid(from._internal_replicaid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplicaInfo::CopyFrom(const ReplicaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ReplicaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaInfo::IsInitialized() const {
  return true;
}

void ReplicaInfo::InternalSwap(ReplicaInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partition_ids_.InternalSwap(&other->_impl_.partition_ids_);
  _impl_.shard_replicas_.InternalSwap(&other->_impl_.shard_replicas_);
  _impl_.node_ids_.InternalSwap(&other->_impl_.node_ids_);
  _impl_.num_outbound_node_.InternalSwap(&other->_impl_.num_outbound_node_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_group_name_, lhs_arena,
      &other->_impl_.resource_group_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplicaInfo, _impl_.collectionid_)
      + sizeof(ReplicaInfo::_impl_.collectionid_)
      - PROTOBUF_FIELD_OFFSET(ReplicaInfo, _impl_.replicaid_)>(
          reinterpret_cast<char*>(&_impl_.replicaid_),
          reinterpret_cast<char*>(&other->_impl_.replicaid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicaInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[101]);
}

// ===================================================================

class ShardReplica::_Internal {
 public:
};

ShardReplica::ShardReplica(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ShardReplica)
}
ShardReplica::ShardReplica(const ShardReplica& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardReplica* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_ids_){from._impl_.node_ids_}
    , /*decltype(_impl_._node_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.leader_addr_){}
    , decltype(_impl_.dm_channel_name_){}
    , decltype(_impl_.leaderid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.leader_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leader_addr().empty()) {
    _this->_impl_.leader_addr_.Set(from._internal_leader_addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dm_channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dm_channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dm_channel_name().empty()) {
    _this->_impl_.dm_channel_name_.Set(from._internal_dm_channel_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.leaderid_ = from._impl_.leaderid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShardReplica)
}

inline void ShardReplica::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_ids_){arena}
    , /*decltype(_impl_._node_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.leader_addr_){}
    , decltype(_impl_.dm_channel_name_){}
    , decltype(_impl_.leaderid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.leader_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dm_channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dm_channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShardReplica::~ShardReplica() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShardReplica)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardReplica::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_ids_.~RepeatedField();
  _impl_.leader_addr_.Destroy();
  _impl_.dm_channel_name_.Destroy();
}

void ShardReplica::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardReplica::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShardReplica)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_ids_.Clear();
  _impl_.leader_addr_.ClearToEmpty();
  _impl_.dm_channel_name_.ClearToEmpty();
  _impl_.leaderid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardReplica::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 leaderID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string leader_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_leader_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ShardReplica.leader_addr"));
        } else
          goto handle_unusual;
        continue;
      // string dm_channel_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dm_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ShardReplica.dm_channel_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 node_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_node_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_node_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardReplica::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShardReplica)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 leaderID = 1;
  if (this->_internal_leaderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_leaderid(), target);
  }

  // string leader_addr = 2;
  if (!this->_internal_leader_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader_addr().data(), static_cast<int>(this->_internal_leader_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShardReplica.leader_addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_leader_addr(), target);
  }

  // string dm_channel_name = 3;
  if (!this->_internal_dm_channel_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dm_channel_name().data(), static_cast<int>(this->_internal_dm_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShardReplica.dm_channel_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dm_channel_name(), target);
  }

  // repeated int64 node_ids = 4;
  {
    int byte_size = _impl_._node_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_node_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShardReplica)
  return target;
}

size_t ShardReplica::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShardReplica)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 node_ids = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.node_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._node_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string leader_addr = 2;
  if (!this->_internal_leader_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader_addr());
  }

  // string dm_channel_name = 3;
  if (!this->_internal_dm_channel_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dm_channel_name());
  }

  // int64 leaderID = 1;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_leaderid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardReplica::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardReplica::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardReplica::GetClassData() const { return &_class_data_; }


void ShardReplica::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardReplica*>(&to_msg);
  auto& from = static_cast<const ShardReplica&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShardReplica)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_ids_.MergeFrom(from._impl_.node_ids_);
  if (!from._internal_leader_addr().empty()) {
    _this->_internal_set_leader_addr(from._internal_leader_addr());
  }
  if (!from._internal_dm_channel_name().empty()) {
    _this->_internal_set_dm_channel_name(from._internal_dm_channel_name());
  }
  if (from._internal_leaderid() != 0) {
    _this->_internal_set_leaderid(from._internal_leaderid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardReplica::CopyFrom(const ShardReplica& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShardReplica)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardReplica::IsInitialized() const {
  return true;
}

void ShardReplica::InternalSwap(ShardReplica* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.node_ids_.InternalSwap(&other->_impl_.node_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leader_addr_, lhs_arena,
      &other->_impl_.leader_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dm_channel_name_, lhs_arena,
      &other->_impl_.dm_channel_name_, rhs_arena
  );
  swap(_impl_.leaderid_, other->_impl_.leaderid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardReplica::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[102]);
}

// ===================================================================

class CreateCredentialRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateCredentialRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateCredentialRequest::_Internal::base(const CreateCredentialRequest* msg) {
  return *msg->_impl_.base_;
}
void CreateCredentialRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
CreateCredentialRequest::CreateCredentialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreateCredentialRequest)
}
CreateCredentialRequest::CreateCredentialRequest(const CreateCredentialRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateCredentialRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.created_utc_timestamps_){}
    , decltype(_impl_.modified_utc_timestamps_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.created_utc_timestamps_, &from._impl_.created_utc_timestamps_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.modified_utc_timestamps_) -
    reinterpret_cast<char*>(&_impl_.created_utc_timestamps_)) + sizeof(_impl_.modified_utc_timestamps_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateCredentialRequest)
}

inline void CreateCredentialRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.created_utc_timestamps_){uint64_t{0u}}
    , decltype(_impl_.modified_utc_timestamps_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateCredentialRequest::~CreateCredentialRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateCredentialRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateCredentialRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void CreateCredentialRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateCredentialRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateCredentialRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.created_utc_timestamps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.modified_utc_timestamps_) -
      reinterpret_cast<char*>(&_impl_.created_utc_timestamps_)) + sizeof(_impl_.modified_utc_timestamps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCredentialRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreateCredentialRequest.username"));
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreateCredentialRequest.password"));
        } else
          goto handle_unusual;
        continue;
      // uint64 created_utc_timestamps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.created_utc_timestamps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 modified_utc_timestamps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.modified_utc_timestamps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateCredentialRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateCredentialRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateCredentialRequest.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateCredentialRequest.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // uint64 created_utc_timestamps = 4;
  if (this->_internal_created_utc_timestamps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_created_utc_timestamps(), target);
  }

  // uint64 modified_utc_timestamps = 5;
  if (this->_internal_modified_utc_timestamps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_modified_utc_timestamps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateCredentialRequest)
  return target;
}

size_t CreateCredentialRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateCredentialRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // uint64 created_utc_timestamps = 4;
  if (this->_internal_created_utc_timestamps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_created_utc_timestamps());
  }

  // uint64 modified_utc_timestamps = 5;
  if (this->_internal_modified_utc_timestamps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_modified_utc_timestamps());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateCredentialRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateCredentialRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateCredentialRequest::GetClassData() const { return &_class_data_; }


void CreateCredentialRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateCredentialRequest*>(&to_msg);
  auto& from = static_cast<const CreateCredentialRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateCredentialRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_created_utc_timestamps() != 0) {
    _this->_internal_set_created_utc_timestamps(from._internal_created_utc_timestamps());
  }
  if (from._internal_modified_utc_timestamps() != 0) {
    _this->_internal_set_modified_utc_timestamps(from._internal_modified_utc_timestamps());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateCredentialRequest::CopyFrom(const CreateCredentialRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateCredentialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCredentialRequest::IsInitialized() const {
  return true;
}

void CreateCredentialRequest::InternalSwap(CreateCredentialRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateCredentialRequest, _impl_.modified_utc_timestamps_)
      + sizeof(CreateCredentialRequest::_impl_.modified_utc_timestamps_)
      - PROTOBUF_FIELD_OFFSET(CreateCredentialRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCredentialRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[103]);
}

// ===================================================================

class UpdateCredentialRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const UpdateCredentialRequest* msg);
};

const ::milvus::proto::common::MsgBase&
UpdateCredentialRequest::_Internal::base(const UpdateCredentialRequest* msg) {
  return *msg->_impl_.base_;
}
void UpdateCredentialRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
UpdateCredentialRequest::UpdateCredentialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.UpdateCredentialRequest)
}
UpdateCredentialRequest::UpdateCredentialRequest(const UpdateCredentialRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateCredentialRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.oldpassword_){}
    , decltype(_impl_.newpassword_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.created_utc_timestamps_){}
    , decltype(_impl_.modified_utc_timestamps_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.oldpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldpassword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oldpassword().empty()) {
    _this->_impl_.oldpassword_.Set(from._internal_oldpassword(), 
      _this->GetArenaForAllocation());
  }
  _impl_.newpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newpassword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newpassword().empty()) {
    _this->_impl_.newpassword_.Set(from._internal_newpassword(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.created_utc_timestamps_, &from._impl_.created_utc_timestamps_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.modified_utc_timestamps_) -
    reinterpret_cast<char*>(&_impl_.created_utc_timestamps_)) + sizeof(_impl_.modified_utc_timestamps_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.UpdateCredentialRequest)
}

inline void UpdateCredentialRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.oldpassword_){}
    , decltype(_impl_.newpassword_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.created_utc_timestamps_){uint64_t{0u}}
    , decltype(_impl_.modified_utc_timestamps_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oldpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldpassword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newpassword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateCredentialRequest::~UpdateCredentialRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.UpdateCredentialRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateCredentialRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.oldpassword_.Destroy();
  _impl_.newpassword_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void UpdateCredentialRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateCredentialRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.UpdateCredentialRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.oldpassword_.ClearToEmpty();
  _impl_.newpassword_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.created_utc_timestamps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.modified_utc_timestamps_) -
      reinterpret_cast<char*>(&_impl_.created_utc_timestamps_)) + sizeof(_impl_.modified_utc_timestamps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCredentialRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.UpdateCredentialRequest.username"));
        } else
          goto handle_unusual;
        continue;
      // string oldPassword = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_oldpassword();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.UpdateCredentialRequest.oldPassword"));
        } else
          goto handle_unusual;
        continue;
      // string newPassword = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_newpassword();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.UpdateCredentialRequest.newPassword"));
        } else
          goto handle_unusual;
        continue;
      // uint64 created_utc_timestamps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.created_utc_timestamps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 modified_utc_timestamps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.modified_utc_timestamps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateCredentialRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.UpdateCredentialRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.UpdateCredentialRequest.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string oldPassword = 3;
  if (!this->_internal_oldpassword().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oldpassword().data(), static_cast<int>(this->_internal_oldpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.UpdateCredentialRequest.oldPassword");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_oldpassword(), target);
  }

  // string newPassword = 4;
  if (!this->_internal_newpassword().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newpassword().data(), static_cast<int>(this->_internal_newpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.UpdateCredentialRequest.newPassword");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_newpassword(), target);
  }

  // uint64 created_utc_timestamps = 5;
  if (this->_internal_created_utc_timestamps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_created_utc_timestamps(), target);
  }

  // uint64 modified_utc_timestamps = 6;
  if (this->_internal_modified_utc_timestamps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_modified_utc_timestamps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.UpdateCredentialRequest)
  return target;
}

size_t UpdateCredentialRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.UpdateCredentialRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string oldPassword = 3;
  if (!this->_internal_oldpassword().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldpassword());
  }

  // string newPassword = 4;
  if (!this->_internal_newpassword().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newpassword());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // uint64 created_utc_timestamps = 5;
  if (this->_internal_created_utc_timestamps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_created_utc_timestamps());
  }

  // uint64 modified_utc_timestamps = 6;
  if (this->_internal_modified_utc_timestamps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_modified_utc_timestamps());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateCredentialRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateCredentialRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateCredentialRequest::GetClassData() const { return &_class_data_; }


void UpdateCredentialRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateCredentialRequest*>(&to_msg);
  auto& from = static_cast<const UpdateCredentialRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.UpdateCredentialRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_oldpassword().empty()) {
    _this->_internal_set_oldpassword(from._internal_oldpassword());
  }
  if (!from._internal_newpassword().empty()) {
    _this->_internal_set_newpassword(from._internal_newpassword());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_created_utc_timestamps() != 0) {
    _this->_internal_set_created_utc_timestamps(from._internal_created_utc_timestamps());
  }
  if (from._internal_modified_utc_timestamps() != 0) {
    _this->_internal_set_modified_utc_timestamps(from._internal_modified_utc_timestamps());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateCredentialRequest::CopyFrom(const UpdateCredentialRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.UpdateCredentialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCredentialRequest::IsInitialized() const {
  return true;
}

void UpdateCredentialRequest::InternalSwap(UpdateCredentialRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oldpassword_, lhs_arena,
      &other->_impl_.oldpassword_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newpassword_, lhs_arena,
      &other->_impl_.newpassword_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateCredentialRequest, _impl_.modified_utc_timestamps_)
      + sizeof(UpdateCredentialRequest::_impl_.modified_utc_timestamps_)
      - PROTOBUF_FIELD_OFFSET(UpdateCredentialRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCredentialRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[104]);
}

// ===================================================================

class DeleteCredentialRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DeleteCredentialRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DeleteCredentialRequest::_Internal::base(const DeleteCredentialRequest* msg) {
  return *msg->_impl_.base_;
}
void DeleteCredentialRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DeleteCredentialRequest::DeleteCredentialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DeleteCredentialRequest)
}
DeleteCredentialRequest::DeleteCredentialRequest(const DeleteCredentialRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteCredentialRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DeleteCredentialRequest)
}

inline void DeleteCredentialRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteCredentialRequest::~DeleteCredentialRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DeleteCredentialRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteCredentialRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DeleteCredentialRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteCredentialRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DeleteCredentialRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCredentialRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DeleteCredentialRequest.username"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteCredentialRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DeleteCredentialRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DeleteCredentialRequest.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DeleteCredentialRequest)
  return target;
}

size_t DeleteCredentialRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DeleteCredentialRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteCredentialRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteCredentialRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteCredentialRequest::GetClassData() const { return &_class_data_; }


void DeleteCredentialRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteCredentialRequest*>(&to_msg);
  auto& from = static_cast<const DeleteCredentialRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DeleteCredentialRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteCredentialRequest::CopyFrom(const DeleteCredentialRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DeleteCredentialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCredentialRequest::IsInitialized() const {
  return true;
}

void DeleteCredentialRequest::InternalSwap(DeleteCredentialRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCredentialRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[105]);
}

// ===================================================================

class ListCredUsersResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ListCredUsersResponse* msg);
};

const ::milvus::proto::common::Status&
ListCredUsersResponse::_Internal::status(const ListCredUsersResponse* msg) {
  return *msg->_impl_.status_;
}
void ListCredUsersResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ListCredUsersResponse::ListCredUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListCredUsersResponse)
}
ListCredUsersResponse::ListCredUsersResponse(const ListCredUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListCredUsersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.usernames_){from._impl_.usernames_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListCredUsersResponse)
}

inline void ListCredUsersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.usernames_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListCredUsersResponse::~ListCredUsersResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListCredUsersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListCredUsersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.usernames_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ListCredUsersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListCredUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListCredUsersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.usernames_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCredUsersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string usernames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_usernames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ListCredUsersResponse.usernames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCredUsersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListCredUsersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->_internal_usernames_size(); i < n; i++) {
    const auto& s = this->_internal_usernames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListCredUsersResponse.usernames");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListCredUsersResponse)
  return target;
}

size_t ListCredUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListCredUsersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string usernames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.usernames_.size());
  for (int i = 0, n = _impl_.usernames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.usernames_.Get(i));
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCredUsersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListCredUsersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCredUsersResponse::GetClassData() const { return &_class_data_; }


void ListCredUsersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListCredUsersResponse*>(&to_msg);
  auto& from = static_cast<const ListCredUsersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListCredUsersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.usernames_.MergeFrom(from._impl_.usernames_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCredUsersResponse::CopyFrom(const ListCredUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListCredUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCredUsersResponse::IsInitialized() const {
  return true;
}

void ListCredUsersResponse::InternalSwap(ListCredUsersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.usernames_.InternalSwap(&other->_impl_.usernames_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCredUsersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[106]);
}

// ===================================================================

class ListCredUsersRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ListCredUsersRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ListCredUsersRequest::_Internal::base(const ListCredUsersRequest* msg) {
  return *msg->_impl_.base_;
}
void ListCredUsersRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ListCredUsersRequest::ListCredUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListCredUsersRequest)
}
ListCredUsersRequest::ListCredUsersRequest(const ListCredUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListCredUsersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListCredUsersRequest)
}

inline void ListCredUsersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListCredUsersRequest::~ListCredUsersRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListCredUsersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListCredUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ListCredUsersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListCredUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListCredUsersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCredUsersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCredUsersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListCredUsersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListCredUsersRequest)
  return target;
}

size_t ListCredUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListCredUsersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCredUsersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListCredUsersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCredUsersRequest::GetClassData() const { return &_class_data_; }


void ListCredUsersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListCredUsersRequest*>(&to_msg);
  auto& from = static_cast<const ListCredUsersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListCredUsersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCredUsersRequest::CopyFrom(const ListCredUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListCredUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCredUsersRequest::IsInitialized() const {
  return true;
}

void ListCredUsersRequest::InternalSwap(ListCredUsersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCredUsersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[107]);
}

// ===================================================================

class RoleEntity::_Internal {
 public:
};

RoleEntity::RoleEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.RoleEntity)
}
RoleEntity::RoleEntity(const RoleEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleEntity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.RoleEntity)
}

inline void RoleEntity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleEntity::~RoleEntity() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.RoleEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void RoleEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.RoleEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.RoleEntity.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.RoleEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.RoleEntity.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.RoleEntity)
  return target;
}

size_t RoleEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.RoleEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleEntity::GetClassData() const { return &_class_data_; }


void RoleEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleEntity*>(&to_msg);
  auto& from = static_cast<const RoleEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.RoleEntity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleEntity::CopyFrom(const RoleEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.RoleEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleEntity::IsInitialized() const {
  return true;
}

void RoleEntity::InternalSwap(RoleEntity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[108]);
}

// ===================================================================

class UserEntity::_Internal {
 public:
};

UserEntity::UserEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.UserEntity)
}
UserEntity::UserEntity(const UserEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserEntity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.UserEntity)
}

inline void UserEntity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserEntity::~UserEntity() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.UserEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void UserEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.UserEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.UserEntity.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.UserEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.UserEntity.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.UserEntity)
  return target;
}

size_t UserEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.UserEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserEntity::GetClassData() const { return &_class_data_; }


void UserEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserEntity*>(&to_msg);
  auto& from = static_cast<const UserEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.UserEntity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserEntity::CopyFrom(const UserEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.UserEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEntity::IsInitialized() const {
  return true;
}

void UserEntity::InternalSwap(UserEntity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[109]);
}

// ===================================================================

class CreateRoleRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateRoleRequest* msg);
  static const ::milvus::proto::milvus::RoleEntity& entity(const CreateRoleRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateRoleRequest::_Internal::base(const CreateRoleRequest* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::milvus::RoleEntity&
CreateRoleRequest::_Internal::entity(const CreateRoleRequest* msg) {
  return *msg->_impl_.entity_;
}
void CreateRoleRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
CreateRoleRequest::CreateRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreateRoleRequest)
}
CreateRoleRequest::CreateRoleRequest(const CreateRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRoleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.entity_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_entity()) {
    _this->_impl_.entity_ = new ::milvus::proto::milvus::RoleEntity(*from._impl_.entity_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateRoleRequest)
}

inline void CreateRoleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.entity_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateRoleRequest::~CreateRoleRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateRoleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.entity_;
}

void CreateRoleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateRoleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.entity_ != nullptr) {
    delete _impl_.entity_;
  }
  _impl_.entity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.RoleEntity entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRoleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateRoleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.milvus.RoleEntity entity = 2;
  if (this->_internal_has_entity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::entity(this),
        _Internal::entity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateRoleRequest)
  return target;
}

size_t CreateRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateRoleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.milvus.RoleEntity entity = 2;
  if (this->_internal_has_entity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entity_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoleRequest::GetClassData() const { return &_class_data_; }


void CreateRoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRoleRequest*>(&to_msg);
  auto& from = static_cast<const CreateRoleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateRoleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_entity()) {
    _this->_internal_mutable_entity()->::milvus::proto::milvus::RoleEntity::MergeFrom(
        from._internal_entity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoleRequest::CopyFrom(const CreateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleRequest::IsInitialized() const {
  return true;
}

void CreateRoleRequest::InternalSwap(CreateRoleRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRoleRequest, _impl_.entity_)
      + sizeof(CreateRoleRequest::_impl_.entity_)
      - PROTOBUF_FIELD_OFFSET(CreateRoleRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[110]);
}

// ===================================================================

class DropRoleRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropRoleRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropRoleRequest::_Internal::base(const DropRoleRequest* msg) {
  return *msg->_impl_.base_;
}
void DropRoleRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DropRoleRequest::DropRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DropRoleRequest)
}
DropRoleRequest::DropRoleRequest(const DropRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropRoleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_name().empty()) {
    _this->_impl_.role_name_.Set(from._internal_role_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropRoleRequest)
}

inline void DropRoleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.role_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DropRoleRequest::~DropRoleRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropRoleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.role_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DropRoleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropRoleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.role_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropRoleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DropRoleRequest.role_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropRoleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropRoleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string role_name = 2;
  if (!this->_internal_role_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropRoleRequest.role_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropRoleRequest)
  return target;
}

size_t DropRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropRoleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role_name = 2;
  if (!this->_internal_role_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropRoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropRoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropRoleRequest::GetClassData() const { return &_class_data_; }


void DropRoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropRoleRequest*>(&to_msg);
  auto& from = static_cast<const DropRoleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropRoleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role_name().empty()) {
    _this->_internal_set_role_name(from._internal_role_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropRoleRequest::CopyFrom(const DropRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropRoleRequest::IsInitialized() const {
  return true;
}

void DropRoleRequest::InternalSwap(DropRoleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_name_, lhs_arena,
      &other->_impl_.role_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropRoleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[111]);
}

// ===================================================================

class OperateUserRoleRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const OperateUserRoleRequest* msg);
};

const ::milvus::proto::common::MsgBase&
OperateUserRoleRequest::_Internal::base(const OperateUserRoleRequest* msg) {
  return *msg->_impl_.base_;
}
void OperateUserRoleRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
OperateUserRoleRequest::OperateUserRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.OperateUserRoleRequest)
}
OperateUserRoleRequest::OperateUserRoleRequest(const OperateUserRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperateUserRoleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.role_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_name().empty()) {
    _this->_impl_.role_name_.Set(from._internal_role_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.OperateUserRoleRequest)
}

inline void OperateUserRoleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.role_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperateUserRoleRequest::~OperateUserRoleRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.OperateUserRoleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperateUserRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.role_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void OperateUserRoleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperateUserRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.OperateUserRoleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.role_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperateUserRoleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.OperateUserRoleRequest.username"));
        } else
          goto handle_unusual;
        continue;
      // string role_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_role_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.OperateUserRoleRequest.role_name"));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.OperateUserRoleType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::milvus::proto::milvus::OperateUserRoleType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperateUserRoleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.OperateUserRoleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.OperateUserRoleRequest.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string role_name = 3;
  if (!this->_internal_role_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.OperateUserRoleRequest.role_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_role_name(), target);
  }

  // .milvus.proto.milvus.OperateUserRoleType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.OperateUserRoleRequest)
  return target;
}

size_t OperateUserRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.OperateUserRoleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string role_name = 3;
  if (!this->_internal_role_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.milvus.OperateUserRoleType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperateUserRoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperateUserRoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperateUserRoleRequest::GetClassData() const { return &_class_data_; }


void OperateUserRoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperateUserRoleRequest*>(&to_msg);
  auto& from = static_cast<const OperateUserRoleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.OperateUserRoleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_role_name().empty()) {
    _this->_internal_set_role_name(from._internal_role_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperateUserRoleRequest::CopyFrom(const OperateUserRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.OperateUserRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateUserRoleRequest::IsInitialized() const {
  return true;
}

void OperateUserRoleRequest::InternalSwap(OperateUserRoleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_name_, lhs_arena,
      &other->_impl_.role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperateUserRoleRequest, _impl_.type_)
      + sizeof(OperateUserRoleRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(OperateUserRoleRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperateUserRoleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[112]);
}

// ===================================================================

class SelectRoleRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SelectRoleRequest* msg);
  static const ::milvus::proto::milvus::RoleEntity& role(const SelectRoleRequest* msg);
};

const ::milvus::proto::common::MsgBase&
SelectRoleRequest::_Internal::base(const SelectRoleRequest* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::milvus::RoleEntity&
SelectRoleRequest::_Internal::role(const SelectRoleRequest* msg) {
  return *msg->_impl_.role_;
}
void SelectRoleRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
SelectRoleRequest::SelectRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SelectRoleRequest)
}
SelectRoleRequest::SelectRoleRequest(const SelectRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectRoleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.role_){nullptr}
    , decltype(_impl_.include_user_info_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_role()) {
    _this->_impl_.role_ = new ::milvus::proto::milvus::RoleEntity(*from._impl_.role_);
  }
  _this->_impl_.include_user_info_ = from._impl_.include_user_info_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SelectRoleRequest)
}

inline void SelectRoleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.role_){nullptr}
    , decltype(_impl_.include_user_info_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectRoleRequest::~SelectRoleRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SelectRoleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.role_;
}

void SelectRoleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SelectRoleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.role_ != nullptr) {
    delete _impl_.role_;
  }
  _impl_.role_ = nullptr;
  _impl_.include_user_info_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectRoleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.RoleEntity role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_user_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.include_user_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectRoleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SelectRoleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.milvus.RoleEntity role = 2;
  if (this->_internal_has_role()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::role(this),
        _Internal::role(this).GetCachedSize(), target, stream);
  }

  // bool include_user_info = 3;
  if (this->_internal_include_user_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_include_user_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SelectRoleRequest)
  return target;
}

size_t SelectRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SelectRoleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.milvus.RoleEntity role = 2;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.role_);
  }

  // bool include_user_info = 3;
  if (this->_internal_include_user_info() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectRoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectRoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectRoleRequest::GetClassData() const { return &_class_data_; }


void SelectRoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectRoleRequest*>(&to_msg);
  auto& from = static_cast<const SelectRoleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SelectRoleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_role()) {
    _this->_internal_mutable_role()->::milvus::proto::milvus::RoleEntity::MergeFrom(
        from._internal_role());
  }
  if (from._internal_include_user_info() != 0) {
    _this->_internal_set_include_user_info(from._internal_include_user_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectRoleRequest::CopyFrom(const SelectRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SelectRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectRoleRequest::IsInitialized() const {
  return true;
}

void SelectRoleRequest::InternalSwap(SelectRoleRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectRoleRequest, _impl_.include_user_info_)
      + sizeof(SelectRoleRequest::_impl_.include_user_info_)
      - PROTOBUF_FIELD_OFFSET(SelectRoleRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectRoleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[113]);
}

// ===================================================================

class RoleResult::_Internal {
 public:
  static const ::milvus::proto::milvus::RoleEntity& role(const RoleResult* msg);
};

const ::milvus::proto::milvus::RoleEntity&
RoleResult::_Internal::role(const RoleResult* msg) {
  return *msg->_impl_.role_;
}
RoleResult::RoleResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.RoleResult)
}
RoleResult::RoleResult(const RoleResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.users_){from._impl_.users_}
    , decltype(_impl_.role_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    _this->_impl_.role_ = new ::milvus::proto::milvus::RoleEntity(*from._impl_.role_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.RoleResult)
}

inline void RoleResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.users_){arena}
    , decltype(_impl_.role_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleResult::~RoleResult() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.RoleResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.users_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.role_;
}

void RoleResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleResult::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.RoleResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.users_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.role_ != nullptr) {
    delete _impl_.role_;
  }
  _impl_.role_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.milvus.RoleEntity role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.UserEntity users = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.RoleResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.milvus.RoleEntity role = 1;
  if (this->_internal_has_role()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::role(this),
        _Internal::role(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.milvus.UserEntity users = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_users_size()); i < n; i++) {
    const auto& repfield = this->_internal_users(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.RoleResult)
  return target;
}

size_t RoleResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.RoleResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.UserEntity users = 2;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->_impl_.users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.milvus.RoleEntity role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.role_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleResult::GetClassData() const { return &_class_data_; }


void RoleResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleResult*>(&to_msg);
  auto& from = static_cast<const RoleResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.RoleResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.users_.MergeFrom(from._impl_.users_);
  if (from._internal_has_role()) {
    _this->_internal_mutable_role()->::milvus::proto::milvus::RoleEntity::MergeFrom(
        from._internal_role());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleResult::CopyFrom(const RoleResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.RoleResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleResult::IsInitialized() const {
  return true;
}

void RoleResult::InternalSwap(RoleResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.users_.InternalSwap(&other->_impl_.users_);
  swap(_impl_.role_, other->_impl_.role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[114]);
}

// ===================================================================

class SelectRoleResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const SelectRoleResponse* msg);
};

const ::milvus::proto::common::Status&
SelectRoleResponse::_Internal::status(const SelectRoleResponse* msg) {
  return *msg->_impl_.status_;
}
void SelectRoleResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
SelectRoleResponse::SelectRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SelectRoleResponse)
}
SelectRoleResponse::SelectRoleResponse(const SelectRoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectRoleResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SelectRoleResponse)
}

inline void SelectRoleResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectRoleResponse::~SelectRoleResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SelectRoleResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectRoleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SelectRoleResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SelectRoleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectRoleResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.RoleResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectRoleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SelectRoleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.milvus.RoleResult results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SelectRoleResponse)
  return target;
}

size_t SelectRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SelectRoleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.RoleResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectRoleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectRoleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectRoleResponse::GetClassData() const { return &_class_data_; }


void SelectRoleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectRoleResponse*>(&to_msg);
  auto& from = static_cast<const SelectRoleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SelectRoleResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectRoleResponse::CopyFrom(const SelectRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SelectRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectRoleResponse::IsInitialized() const {
  return true;
}

void SelectRoleResponse::InternalSwap(SelectRoleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectRoleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[115]);
}

// ===================================================================

class SelectUserRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SelectUserRequest* msg);
  static const ::milvus::proto::milvus::UserEntity& user(const SelectUserRequest* msg);
};

const ::milvus::proto::common::MsgBase&
SelectUserRequest::_Internal::base(const SelectUserRequest* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::milvus::UserEntity&
SelectUserRequest::_Internal::user(const SelectUserRequest* msg) {
  return *msg->_impl_.user_;
}
void SelectUserRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
SelectUserRequest::SelectUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SelectUserRequest)
}
SelectUserRequest::SelectUserRequest(const SelectUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.include_role_info_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::milvus::proto::milvus::UserEntity(*from._impl_.user_);
  }
  _this->_impl_.include_role_info_ = from._impl_.include_role_info_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SelectUserRequest)
}

inline void SelectUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.include_role_info_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectUserRequest::~SelectUserRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SelectUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.user_;
}

void SelectUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SelectUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  _impl_.include_role_info_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.UserEntity user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_role_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.include_role_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SelectUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.milvus.UserEntity user = 2;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // bool include_role_info = 3;
  if (this->_internal_include_role_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_include_role_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SelectUserRequest)
  return target;
}

size_t SelectUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SelectUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.milvus.UserEntity user = 2;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  // bool include_role_info = 3;
  if (this->_internal_include_role_info() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectUserRequest::GetClassData() const { return &_class_data_; }


void SelectUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectUserRequest*>(&to_msg);
  auto& from = static_cast<const SelectUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SelectUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::milvus::proto::milvus::UserEntity::MergeFrom(
        from._internal_user());
  }
  if (from._internal_include_role_info() != 0) {
    _this->_internal_set_include_role_info(from._internal_include_role_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectUserRequest::CopyFrom(const SelectUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SelectUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectUserRequest::IsInitialized() const {
  return true;
}

void SelectUserRequest::InternalSwap(SelectUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectUserRequest, _impl_.include_role_info_)
      + sizeof(SelectUserRequest::_impl_.include_role_info_)
      - PROTOBUF_FIELD_OFFSET(SelectUserRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[116]);
}

// ===================================================================

class UserResult::_Internal {
 public:
  static const ::milvus::proto::milvus::UserEntity& user(const UserResult* msg);
};

const ::milvus::proto::milvus::UserEntity&
UserResult::_Internal::user(const UserResult* msg) {
  return *msg->_impl_.user_;
}
UserResult::UserResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.UserResult)
}
UserResult::UserResult(const UserResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){from._impl_.roles_}
    , decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::milvus::proto::milvus::UserEntity(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.UserResult)
}

inline void UserResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){arena}
    , decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserResult::~UserResult() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.UserResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roles_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_;
}

void UserResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserResult::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.UserResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roles_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.milvus.UserEntity user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.RoleEntity roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.UserResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.milvus.UserEntity user = 1;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.milvus.RoleEntity roles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roles_size()); i < n; i++) {
    const auto& repfield = this->_internal_roles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.UserResult)
  return target;
}

size_t UserResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.UserResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.RoleEntity roles = 2;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->_impl_.roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.milvus.UserEntity user = 1;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserResult::GetClassData() const { return &_class_data_; }


void UserResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserResult*>(&to_msg);
  auto& from = static_cast<const UserResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.UserResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.roles_.MergeFrom(from._impl_.roles_);
  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::milvus::proto::milvus::UserEntity::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserResult::CopyFrom(const UserResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.UserResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserResult::IsInitialized() const {
  return true;
}

void UserResult::InternalSwap(UserResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.roles_.InternalSwap(&other->_impl_.roles_);
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[117]);
}

// ===================================================================

class SelectUserResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const SelectUserResponse* msg);
};

const ::milvus::proto::common::Status&
SelectUserResponse::_Internal::status(const SelectUserResponse* msg) {
  return *msg->_impl_.status_;
}
void SelectUserResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
SelectUserResponse::SelectUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SelectUserResponse)
}
SelectUserResponse::SelectUserResponse(const SelectUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectUserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SelectUserResponse)
}

inline void SelectUserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectUserResponse::~SelectUserResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SelectUserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SelectUserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SelectUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectUserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.UserResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SelectUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.milvus.UserResult results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SelectUserResponse)
  return target;
}

size_t SelectUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SelectUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.UserResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectUserResponse::GetClassData() const { return &_class_data_; }


void SelectUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectUserResponse*>(&to_msg);
  auto& from = static_cast<const SelectUserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SelectUserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectUserResponse::CopyFrom(const SelectUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SelectUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectUserResponse::IsInitialized() const {
  return true;
}

void SelectUserResponse::InternalSwap(SelectUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectUserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[118]);
}

// ===================================================================

class ObjectEntity::_Internal {
 public:
};

ObjectEntity::ObjectEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ObjectEntity)
}
ObjectEntity::ObjectEntity(const ObjectEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectEntity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ObjectEntity)
}

inline void ObjectEntity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectEntity::~ObjectEntity() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ObjectEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ObjectEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ObjectEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ObjectEntity.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ObjectEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ObjectEntity.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ObjectEntity)
  return target;
}

size_t ObjectEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ObjectEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectEntity::GetClassData() const { return &_class_data_; }


void ObjectEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectEntity*>(&to_msg);
  auto& from = static_cast<const ObjectEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ObjectEntity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectEntity::CopyFrom(const ObjectEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ObjectEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectEntity::IsInitialized() const {
  return true;
}

void ObjectEntity::InternalSwap(ObjectEntity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[119]);
}

// ===================================================================

class PrivilegeEntity::_Internal {
 public:
};

PrivilegeEntity::PrivilegeEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.PrivilegeEntity)
}
PrivilegeEntity::PrivilegeEntity(const PrivilegeEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrivilegeEntity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.PrivilegeEntity)
}

inline void PrivilegeEntity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrivilegeEntity::~PrivilegeEntity() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.PrivilegeEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivilegeEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void PrivilegeEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrivilegeEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.PrivilegeEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivilegeEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.PrivilegeEntity.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivilegeEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.PrivilegeEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.PrivilegeEntity.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.PrivilegeEntity)
  return target;
}

size_t PrivilegeEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.PrivilegeEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrivilegeEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrivilegeEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrivilegeEntity::GetClassData() const { return &_class_data_; }


void PrivilegeEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrivilegeEntity*>(&to_msg);
  auto& from = static_cast<const PrivilegeEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.PrivilegeEntity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrivilegeEntity::CopyFrom(const PrivilegeEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.PrivilegeEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivilegeEntity::IsInitialized() const {
  return true;
}

void PrivilegeEntity::InternalSwap(PrivilegeEntity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivilegeEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[120]);
}

// ===================================================================

class GrantorEntity::_Internal {
 public:
  static const ::milvus::proto::milvus::UserEntity& user(const GrantorEntity* msg);
  static const ::milvus::proto::milvus::PrivilegeEntity& privilege(const GrantorEntity* msg);
};

const ::milvus::proto::milvus::UserEntity&
GrantorEntity::_Internal::user(const GrantorEntity* msg) {
  return *msg->_impl_.user_;
}
const ::milvus::proto::milvus::PrivilegeEntity&
GrantorEntity::_Internal::privilege(const GrantorEntity* msg) {
  return *msg->_impl_.privilege_;
}
GrantorEntity::GrantorEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GrantorEntity)
}
GrantorEntity::GrantorEntity(const GrantorEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrantorEntity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , decltype(_impl_.privilege_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::milvus::proto::milvus::UserEntity(*from._impl_.user_);
  }
  if (from._internal_has_privilege()) {
    _this->_impl_.privilege_ = new ::milvus::proto::milvus::PrivilegeEntity(*from._impl_.privilege_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GrantorEntity)
}

inline void GrantorEntity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , decltype(_impl_.privilege_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GrantorEntity::~GrantorEntity() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GrantorEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrantorEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
  if (this != internal_default_instance()) delete _impl_.privilege_;
}

void GrantorEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrantorEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GrantorEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.privilege_ != nullptr) {
    delete _impl_.privilege_;
  }
  _impl_.privilege_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantorEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.milvus.UserEntity user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.PrivilegeEntity privilege = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_privilege(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GrantorEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GrantorEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.milvus.UserEntity user = 1;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.milvus.PrivilegeEntity privilege = 2;
  if (this->_internal_has_privilege()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::privilege(this),
        _Internal::privilege(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GrantorEntity)
  return target;
}

size_t GrantorEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GrantorEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.milvus.UserEntity user = 1;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  // .milvus.proto.milvus.PrivilegeEntity privilege = 2;
  if (this->_internal_has_privilege()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.privilege_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrantorEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrantorEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrantorEntity::GetClassData() const { return &_class_data_; }


void GrantorEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrantorEntity*>(&to_msg);
  auto& from = static_cast<const GrantorEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GrantorEntity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::milvus::proto::milvus::UserEntity::MergeFrom(
        from._internal_user());
  }
  if (from._internal_has_privilege()) {
    _this->_internal_mutable_privilege()->::milvus::proto::milvus::PrivilegeEntity::MergeFrom(
        from._internal_privilege());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrantorEntity::CopyFrom(const GrantorEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GrantorEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantorEntity::IsInitialized() const {
  return true;
}

void GrantorEntity::InternalSwap(GrantorEntity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrantorEntity, _impl_.privilege_)
      + sizeof(GrantorEntity::_impl_.privilege_)
      - PROTOBUF_FIELD_OFFSET(GrantorEntity, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantorEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[121]);
}

// ===================================================================

class GrantPrivilegeEntity::_Internal {
 public:
};

GrantPrivilegeEntity::GrantPrivilegeEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GrantPrivilegeEntity)
}
GrantPrivilegeEntity::GrantPrivilegeEntity(const GrantPrivilegeEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrantPrivilegeEntity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entities_){from._impl_.entities_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GrantPrivilegeEntity)
}

inline void GrantPrivilegeEntity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entities_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GrantPrivilegeEntity::~GrantPrivilegeEntity() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GrantPrivilegeEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrantPrivilegeEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entities_.~RepeatedPtrField();
}

void GrantPrivilegeEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrantPrivilegeEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GrantPrivilegeEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantPrivilegeEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .milvus.proto.milvus.GrantorEntity entities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GrantPrivilegeEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GrantPrivilegeEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.GrantorEntity entities = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entities_size()); i < n; i++) {
    const auto& repfield = this->_internal_entities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GrantPrivilegeEntity)
  return target;
}

size_t GrantPrivilegeEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GrantPrivilegeEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.GrantorEntity entities = 1;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->_impl_.entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrantPrivilegeEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrantPrivilegeEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrantPrivilegeEntity::GetClassData() const { return &_class_data_; }


void GrantPrivilegeEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrantPrivilegeEntity*>(&to_msg);
  auto& from = static_cast<const GrantPrivilegeEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GrantPrivilegeEntity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entities_.MergeFrom(from._impl_.entities_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrantPrivilegeEntity::CopyFrom(const GrantPrivilegeEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GrantPrivilegeEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantPrivilegeEntity::IsInitialized() const {
  return true;
}

void GrantPrivilegeEntity::InternalSwap(GrantPrivilegeEntity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entities_.InternalSwap(&other->_impl_.entities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantPrivilegeEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[122]);
}

// ===================================================================

class GrantEntity::_Internal {
 public:
  static const ::milvus::proto::milvus::RoleEntity& role(const GrantEntity* msg);
  static const ::milvus::proto::milvus::ObjectEntity& object(const GrantEntity* msg);
  static const ::milvus::proto::milvus::GrantorEntity& grantor(const GrantEntity* msg);
};

const ::milvus::proto::milvus::RoleEntity&
GrantEntity::_Internal::role(const GrantEntity* msg) {
  return *msg->_impl_.role_;
}
const ::milvus::proto::milvus::ObjectEntity&
GrantEntity::_Internal::object(const GrantEntity* msg) {
  return *msg->_impl_.object_;
}
const ::milvus::proto::milvus::GrantorEntity&
GrantEntity::_Internal::grantor(const GrantEntity* msg) {
  return *msg->_impl_.grantor_;
}
GrantEntity::GrantEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GrantEntity)
}
GrantEntity::GrantEntity(const GrantEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrantEntity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.role_){nullptr}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.grantor_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_name().empty()) {
    _this->_impl_.object_name_.Set(from._internal_object_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_role()) {
    _this->_impl_.role_ = new ::milvus::proto::milvus::RoleEntity(*from._impl_.role_);
  }
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::milvus::proto::milvus::ObjectEntity(*from._impl_.object_);
  }
  if (from._internal_has_grantor()) {
    _this->_impl_.grantor_ = new ::milvus::proto::milvus::GrantorEntity(*from._impl_.grantor_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GrantEntity)
}

inline void GrantEntity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.role_){nullptr}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.grantor_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GrantEntity::~GrantEntity() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GrantEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrantEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_name_.Destroy();
  _impl_.db_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.role_;
  if (this != internal_default_instance()) delete _impl_.object_;
  if (this != internal_default_instance()) delete _impl_.grantor_;
}

void GrantEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrantEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GrantEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_name_.ClearToEmpty();
  _impl_.db_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.role_ != nullptr) {
    delete _impl_.role_;
  }
  _impl_.role_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.grantor_ != nullptr) {
    delete _impl_.grantor_;
  }
  _impl_.grantor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.milvus.RoleEntity role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.ObjectEntity object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string object_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_object_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GrantEntity.object_name"));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.GrantorEntity grantor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_grantor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GrantEntity.db_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GrantEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GrantEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.milvus.RoleEntity role = 1;
  if (this->_internal_has_role()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::role(this),
        _Internal::role(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.milvus.ObjectEntity object = 2;
  if (this->_internal_has_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  // string object_name = 3;
  if (!this->_internal_object_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_name().data(), static_cast<int>(this->_internal_object_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GrantEntity.object_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_object_name(), target);
  }

  // .milvus.proto.milvus.GrantorEntity grantor = 4;
  if (this->_internal_has_grantor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::grantor(this),
        _Internal::grantor(this).GetCachedSize(), target, stream);
  }

  // string db_name = 5;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GrantEntity.db_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GrantEntity)
  return target;
}

size_t GrantEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GrantEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_name = 3;
  if (!this->_internal_object_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object_name());
  }

  // string db_name = 5;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.milvus.RoleEntity role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.role_);
  }

  // .milvus.proto.milvus.ObjectEntity object = 2;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  // .milvus.proto.milvus.GrantorEntity grantor = 4;
  if (this->_internal_has_grantor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.grantor_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrantEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrantEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrantEntity::GetClassData() const { return &_class_data_; }


void GrantEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrantEntity*>(&to_msg);
  auto& from = static_cast<const GrantEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GrantEntity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_object_name().empty()) {
    _this->_internal_set_object_name(from._internal_object_name());
  }
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (from._internal_has_role()) {
    _this->_internal_mutable_role()->::milvus::proto::milvus::RoleEntity::MergeFrom(
        from._internal_role());
  }
  if (from._internal_has_object()) {
    _this->_internal_mutable_object()->::milvus::proto::milvus::ObjectEntity::MergeFrom(
        from._internal_object());
  }
  if (from._internal_has_grantor()) {
    _this->_internal_mutable_grantor()->::milvus::proto::milvus::GrantorEntity::MergeFrom(
        from._internal_grantor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrantEntity::CopyFrom(const GrantEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GrantEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantEntity::IsInitialized() const {
  return true;
}

void GrantEntity::InternalSwap(GrantEntity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.object_name_, lhs_arena,
      &other->_impl_.object_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrantEntity, _impl_.grantor_)
      + sizeof(GrantEntity::_impl_.grantor_)
      - PROTOBUF_FIELD_OFFSET(GrantEntity, _impl_.role_)>(
          reinterpret_cast<char*>(&_impl_.role_),
          reinterpret_cast<char*>(&other->_impl_.role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[123]);
}

// ===================================================================

class SelectGrantRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SelectGrantRequest* msg);
  static const ::milvus::proto::milvus::GrantEntity& entity(const SelectGrantRequest* msg);
};

const ::milvus::proto::common::MsgBase&
SelectGrantRequest::_Internal::base(const SelectGrantRequest* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::milvus::GrantEntity&
SelectGrantRequest::_Internal::entity(const SelectGrantRequest* msg) {
  return *msg->_impl_.entity_;
}
void SelectGrantRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
SelectGrantRequest::SelectGrantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SelectGrantRequest)
}
SelectGrantRequest::SelectGrantRequest(const SelectGrantRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectGrantRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.entity_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_entity()) {
    _this->_impl_.entity_ = new ::milvus::proto::milvus::GrantEntity(*from._impl_.entity_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SelectGrantRequest)
}

inline void SelectGrantRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.entity_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectGrantRequest::~SelectGrantRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SelectGrantRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectGrantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.entity_;
}

void SelectGrantRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectGrantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SelectGrantRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.entity_ != nullptr) {
    delete _impl_.entity_;
  }
  _impl_.entity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectGrantRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.GrantEntity entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectGrantRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SelectGrantRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.milvus.GrantEntity entity = 2;
  if (this->_internal_has_entity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::entity(this),
        _Internal::entity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SelectGrantRequest)
  return target;
}

size_t SelectGrantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SelectGrantRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.milvus.GrantEntity entity = 2;
  if (this->_internal_has_entity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entity_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectGrantRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectGrantRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectGrantRequest::GetClassData() const { return &_class_data_; }


void SelectGrantRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectGrantRequest*>(&to_msg);
  auto& from = static_cast<const SelectGrantRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SelectGrantRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_entity()) {
    _this->_internal_mutable_entity()->::milvus::proto::milvus::GrantEntity::MergeFrom(
        from._internal_entity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectGrantRequest::CopyFrom(const SelectGrantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SelectGrantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectGrantRequest::IsInitialized() const {
  return true;
}

void SelectGrantRequest::InternalSwap(SelectGrantRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectGrantRequest, _impl_.entity_)
      + sizeof(SelectGrantRequest::_impl_.entity_)
      - PROTOBUF_FIELD_OFFSET(SelectGrantRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectGrantRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[124]);
}

// ===================================================================

class SelectGrantResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const SelectGrantResponse* msg);
};

const ::milvus::proto::common::Status&
SelectGrantResponse::_Internal::status(const SelectGrantResponse* msg) {
  return *msg->_impl_.status_;
}
void SelectGrantResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
SelectGrantResponse::SelectGrantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SelectGrantResponse)
}
SelectGrantResponse::SelectGrantResponse(const SelectGrantResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectGrantResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entities_){from._impl_.entities_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SelectGrantResponse)
}

inline void SelectGrantResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entities_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectGrantResponse::~SelectGrantResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SelectGrantResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectGrantResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entities_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SelectGrantResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectGrantResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SelectGrantResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entities_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectGrantResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.GrantEntity entities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectGrantResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SelectGrantResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.milvus.GrantEntity entities = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entities_size()); i < n; i++) {
    const auto& repfield = this->_internal_entities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SelectGrantResponse)
  return target;
}

size_t SelectGrantResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SelectGrantResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.GrantEntity entities = 2;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->_impl_.entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectGrantResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectGrantResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectGrantResponse::GetClassData() const { return &_class_data_; }


void SelectGrantResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectGrantResponse*>(&to_msg);
  auto& from = static_cast<const SelectGrantResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SelectGrantResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entities_.MergeFrom(from._impl_.entities_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectGrantResponse::CopyFrom(const SelectGrantResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SelectGrantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectGrantResponse::IsInitialized() const {
  return true;
}

void SelectGrantResponse::InternalSwap(SelectGrantResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entities_.InternalSwap(&other->_impl_.entities_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectGrantResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[125]);
}

// ===================================================================

class OperatePrivilegeRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const OperatePrivilegeRequest* msg);
  static const ::milvus::proto::milvus::GrantEntity& entity(const OperatePrivilegeRequest* msg);
};

const ::milvus::proto::common::MsgBase&
OperatePrivilegeRequest::_Internal::base(const OperatePrivilegeRequest* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::milvus::GrantEntity&
OperatePrivilegeRequest::_Internal::entity(const OperatePrivilegeRequest* msg) {
  return *msg->_impl_.entity_;
}
void OperatePrivilegeRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
OperatePrivilegeRequest::OperatePrivilegeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.OperatePrivilegeRequest)
}
OperatePrivilegeRequest::OperatePrivilegeRequest(const OperatePrivilegeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperatePrivilegeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.entity_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_entity()) {
    _this->_impl_.entity_ = new ::milvus::proto::milvus::GrantEntity(*from._impl_.entity_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.OperatePrivilegeRequest)
}

inline void OperatePrivilegeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.entity_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OperatePrivilegeRequest::~OperatePrivilegeRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.OperatePrivilegeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperatePrivilegeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.entity_;
}

void OperatePrivilegeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperatePrivilegeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.OperatePrivilegeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.entity_ != nullptr) {
    delete _impl_.entity_;
  }
  _impl_.entity_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperatePrivilegeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.GrantEntity entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.OperatePrivilegeType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::milvus::proto::milvus::OperatePrivilegeType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperatePrivilegeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.OperatePrivilegeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.milvus.GrantEntity entity = 2;
  if (this->_internal_has_entity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::entity(this),
        _Internal::entity(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.milvus.OperatePrivilegeType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.OperatePrivilegeRequest)
  return target;
}

size_t OperatePrivilegeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.OperatePrivilegeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.milvus.GrantEntity entity = 2;
  if (this->_internal_has_entity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entity_);
  }

  // .milvus.proto.milvus.OperatePrivilegeType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperatePrivilegeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperatePrivilegeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperatePrivilegeRequest::GetClassData() const { return &_class_data_; }


void OperatePrivilegeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperatePrivilegeRequest*>(&to_msg);
  auto& from = static_cast<const OperatePrivilegeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.OperatePrivilegeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_entity()) {
    _this->_internal_mutable_entity()->::milvus::proto::milvus::GrantEntity::MergeFrom(
        from._internal_entity());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperatePrivilegeRequest::CopyFrom(const OperatePrivilegeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.OperatePrivilegeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatePrivilegeRequest::IsInitialized() const {
  return true;
}

void OperatePrivilegeRequest::InternalSwap(OperatePrivilegeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperatePrivilegeRequest, _impl_.type_)
      + sizeof(OperatePrivilegeRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(OperatePrivilegeRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperatePrivilegeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[126]);
}

// ===================================================================

class GetLoadingProgressRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetLoadingProgressRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetLoadingProgressRequest::_Internal::base(const GetLoadingProgressRequest* msg) {
  return *msg->_impl_.base_;
}
void GetLoadingProgressRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetLoadingProgressRequest::GetLoadingProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetLoadingProgressRequest)
}
GetLoadingProgressRequest::GetLoadingProgressRequest(const GetLoadingProgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLoadingProgressRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){from._impl_.partition_names_}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetLoadingProgressRequest)
}

inline void GetLoadingProgressRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){arena}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetLoadingProgressRequest::~GetLoadingProgressRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetLoadingProgressRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLoadingProgressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_names_.~RepeatedPtrField();
  _impl_.collection_name_.Destroy();
  _impl_.db_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetLoadingProgressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLoadingProgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetLoadingProgressRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partition_names_.Clear();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.db_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLoadingProgressRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetLoadingProgressRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string partition_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetLoadingProgressRequest.partition_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string db_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetLoadingProgressRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLoadingProgressRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetLoadingProgressRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string collection_name = 2;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetLoadingProgressRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collection_name(), target);
  }

  // repeated string partition_names = 3;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetLoadingProgressRequest.partition_names");
    target = stream->WriteString(3, s, target);
  }

  // string db_name = 4;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetLoadingProgressRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetLoadingProgressRequest)
  return target;
}

size_t GetLoadingProgressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetLoadingProgressRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.partition_names_.size());
  for (int i = 0, n = _impl_.partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.partition_names_.Get(i));
  }

  // string collection_name = 2;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string db_name = 4;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLoadingProgressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLoadingProgressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLoadingProgressRequest::GetClassData() const { return &_class_data_; }


void GetLoadingProgressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLoadingProgressRequest*>(&to_msg);
  auto& from = static_cast<const GetLoadingProgressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetLoadingProgressRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partition_names_.MergeFrom(from._impl_.partition_names_);
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLoadingProgressRequest::CopyFrom(const GetLoadingProgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetLoadingProgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoadingProgressRequest::IsInitialized() const {
  return true;
}

void GetLoadingProgressRequest::InternalSwap(GetLoadingProgressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partition_names_.InternalSwap(&other->_impl_.partition_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLoadingProgressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[127]);
}

// ===================================================================

class GetLoadingProgressResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetLoadingProgressResponse* msg);
};

const ::milvus::proto::common::Status&
GetLoadingProgressResponse::_Internal::status(const GetLoadingProgressResponse* msg) {
  return *msg->_impl_.status_;
}
void GetLoadingProgressResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetLoadingProgressResponse::GetLoadingProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetLoadingProgressResponse)
}
GetLoadingProgressResponse::GetLoadingProgressResponse(const GetLoadingProgressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLoadingProgressResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.refresh_progress_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.progress_, &from._impl_.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.refresh_progress_) -
    reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.refresh_progress_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetLoadingProgressResponse)
}

inline void GetLoadingProgressResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.progress_){int64_t{0}}
    , decltype(_impl_.refresh_progress_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetLoadingProgressResponse::~GetLoadingProgressResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetLoadingProgressResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLoadingProgressResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetLoadingProgressResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLoadingProgressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetLoadingProgressResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.refresh_progress_) -
      reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.refresh_progress_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLoadingProgressResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 refresh_progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.refresh_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLoadingProgressResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetLoadingProgressResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int64 progress = 2;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_progress(), target);
  }

  // int64 refresh_progress = 3;
  if (this->_internal_refresh_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_refresh_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetLoadingProgressResponse)
  return target;
}

size_t GetLoadingProgressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetLoadingProgressResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 progress = 2;
  if (this->_internal_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_progress());
  }

  // int64 refresh_progress = 3;
  if (this->_internal_refresh_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_refresh_progress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLoadingProgressResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLoadingProgressResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLoadingProgressResponse::GetClassData() const { return &_class_data_; }


void GetLoadingProgressResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLoadingProgressResponse*>(&to_msg);
  auto& from = static_cast<const GetLoadingProgressResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetLoadingProgressResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_progress() != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  if (from._internal_refresh_progress() != 0) {
    _this->_internal_set_refresh_progress(from._internal_refresh_progress());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLoadingProgressResponse::CopyFrom(const GetLoadingProgressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetLoadingProgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoadingProgressResponse::IsInitialized() const {
  return true;
}

void GetLoadingProgressResponse::InternalSwap(GetLoadingProgressResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLoadingProgressResponse, _impl_.refresh_progress_)
      + sizeof(GetLoadingProgressResponse::_impl_.refresh_progress_)
      - PROTOBUF_FIELD_OFFSET(GetLoadingProgressResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLoadingProgressResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[128]);
}

// ===================================================================

class GetLoadStateRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetLoadStateRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetLoadStateRequest::_Internal::base(const GetLoadStateRequest* msg) {
  return *msg->_impl_.base_;
}
void GetLoadStateRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetLoadStateRequest::GetLoadStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetLoadStateRequest)
}
GetLoadStateRequest::GetLoadStateRequest(const GetLoadStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLoadStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){from._impl_.partition_names_}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetLoadStateRequest)
}

inline void GetLoadStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_names_){arena}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetLoadStateRequest::~GetLoadStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetLoadStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLoadStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_names_.~RepeatedPtrField();
  _impl_.collection_name_.Destroy();
  _impl_.db_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetLoadStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLoadStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetLoadStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partition_names_.Clear();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.db_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLoadStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetLoadStateRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string partition_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetLoadStateRequest.partition_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string db_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetLoadStateRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLoadStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetLoadStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string collection_name = 2;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetLoadStateRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collection_name(), target);
  }

  // repeated string partition_names = 3;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetLoadStateRequest.partition_names");
    target = stream->WriteString(3, s, target);
  }

  // string db_name = 4;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetLoadStateRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetLoadStateRequest)
  return target;
}

size_t GetLoadStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetLoadStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.partition_names_.size());
  for (int i = 0, n = _impl_.partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.partition_names_.Get(i));
  }

  // string collection_name = 2;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string db_name = 4;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLoadStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLoadStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLoadStateRequest::GetClassData() const { return &_class_data_; }


void GetLoadStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLoadStateRequest*>(&to_msg);
  auto& from = static_cast<const GetLoadStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetLoadStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partition_names_.MergeFrom(from._impl_.partition_names_);
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLoadStateRequest::CopyFrom(const GetLoadStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetLoadStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoadStateRequest::IsInitialized() const {
  return true;
}

void GetLoadStateRequest::InternalSwap(GetLoadStateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partition_names_.InternalSwap(&other->_impl_.partition_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLoadStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[129]);
}

// ===================================================================

class GetLoadStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetLoadStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetLoadStateResponse::_Internal::status(const GetLoadStateResponse* msg) {
  return *msg->_impl_.status_;
}
void GetLoadStateResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetLoadStateResponse::GetLoadStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetLoadStateResponse)
}
GetLoadStateResponse::GetLoadStateResponse(const GetLoadStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLoadStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetLoadStateResponse)
}

inline void GetLoadStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetLoadStateResponse::~GetLoadStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetLoadStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLoadStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetLoadStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLoadStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetLoadStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLoadStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.LoadState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::LoadState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLoadStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetLoadStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.LoadState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetLoadStateResponse)
  return target;
}

size_t GetLoadStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetLoadStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .milvus.proto.common.LoadState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLoadStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLoadStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLoadStateResponse::GetClassData() const { return &_class_data_; }


void GetLoadStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLoadStateResponse*>(&to_msg);
  auto& from = static_cast<const GetLoadStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetLoadStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLoadStateResponse::CopyFrom(const GetLoadStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetLoadStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoadStateResponse::IsInitialized() const {
  return true;
}

void GetLoadStateResponse::InternalSwap(GetLoadStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLoadStateResponse, _impl_.state_)
      + sizeof(GetLoadStateResponse::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(GetLoadStateResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLoadStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[130]);
}

// ===================================================================

class MilvusExt::_Internal {
 public:
};

MilvusExt::MilvusExt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.MilvusExt)
}
MilvusExt::MilvusExt(const MilvusExt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MilvusExt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.MilvusExt)
}

inline void MilvusExt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MilvusExt::~MilvusExt() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.MilvusExt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MilvusExt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
}

void MilvusExt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MilvusExt::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.MilvusExt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MilvusExt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.MilvusExt.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MilvusExt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.MilvusExt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.MilvusExt.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.MilvusExt)
  return target;
}

size_t MilvusExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.MilvusExt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MilvusExt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MilvusExt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MilvusExt::GetClassData() const { return &_class_data_; }


void MilvusExt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MilvusExt*>(&to_msg);
  auto& from = static_cast<const MilvusExt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.MilvusExt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MilvusExt::CopyFrom(const MilvusExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.MilvusExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MilvusExt::IsInitialized() const {
  return true;
}

void MilvusExt::InternalSwap(MilvusExt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MilvusExt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[131]);
}

// ===================================================================

class GetVersionRequest::_Internal {
 public:
};

GetVersionRequest::GetVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetVersionRequest)
}
GetVersionRequest::GetVersionRequest(const GetVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetVersionRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetVersionRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVersionRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetVersionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[132]);
}

// ===================================================================

class GetVersionResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetVersionResponse* msg);
};

const ::milvus::proto::common::Status&
GetVersionResponse::_Internal::status(const GetVersionResponse* msg) {
  return *msg->_impl_.status_;
}
void GetVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetVersionResponse::GetVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetVersionResponse)
}
GetVersionResponse::GetVersionResponse(const GetVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetVersionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetVersionResponse)
}

inline void GetVersionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetVersionResponse::~GetVersionResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetVersionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetVersionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVersionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetVersionResponse.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetVersionResponse.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetVersionResponse)
  return target;
}

size_t GetVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVersionResponse::GetClassData() const { return &_class_data_; }


void GetVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetVersionResponse*>(&to_msg);
  auto& from = static_cast<const GetVersionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetVersionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetVersionResponse::CopyFrom(const GetVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVersionResponse::IsInitialized() const {
  return true;
}

void GetVersionResponse::InternalSwap(GetVersionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVersionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[133]);
}

// ===================================================================

class CheckHealthRequest::_Internal {
 public:
};

CheckHealthRequest::CheckHealthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CheckHealthRequest)
}
CheckHealthRequest::CheckHealthRequest(const CheckHealthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CheckHealthRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CheckHealthRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckHealthRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckHealthRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CheckHealthRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[134]);
}

// ===================================================================

class CheckHealthResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const CheckHealthResponse* msg);
};

const ::milvus::proto::common::Status&
CheckHealthResponse::_Internal::status(const CheckHealthResponse* msg) {
  return *msg->_impl_.status_;
}
void CheckHealthResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
CheckHealthResponse::CheckHealthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CheckHealthResponse)
}
CheckHealthResponse::CheckHealthResponse(const CheckHealthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckHealthResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reasons_){from._impl_.reasons_}
    , decltype(_impl_.quota_states_){from._impl_.quota_states_}
    , /*decltype(_impl_._quota_states_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.ishealthy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  _this->_impl_.ishealthy_ = from._impl_.ishealthy_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CheckHealthResponse)
}

inline void CheckHealthResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reasons_){arena}
    , decltype(_impl_.quota_states_){arena}
    , /*decltype(_impl_._quota_states_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.ishealthy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CheckHealthResponse::~CheckHealthResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CheckHealthResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckHealthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reasons_.~RepeatedPtrField();
  _impl_.quota_states_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void CheckHealthResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckHealthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CheckHealthResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reasons_.Clear();
  _impl_.quota_states_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.ishealthy_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckHealthResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isHealthy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ishealthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string reasons = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reasons();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CheckHealthResponse.reasons"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.QuotaState quota_states = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_quota_states(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_quota_states(static_cast<::milvus::proto::milvus::QuotaState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckHealthResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CheckHealthResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // bool isHealthy = 2;
  if (this->_internal_ishealthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ishealthy(), target);
  }

  // repeated string reasons = 3;
  for (int i = 0, n = this->_internal_reasons_size(); i < n; i++) {
    const auto& s = this->_internal_reasons(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CheckHealthResponse.reasons");
    target = stream->WriteString(3, s, target);
  }

  // repeated .milvus.proto.milvus.QuotaState quota_states = 4;
  {
    int byte_size = _impl_._quota_states_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, _impl_.quota_states_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CheckHealthResponse)
  return target;
}

size_t CheckHealthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CheckHealthResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string reasons = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.reasons_.size());
  for (int i = 0, n = _impl_.reasons_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.reasons_.Get(i));
  }

  // repeated .milvus.proto.milvus.QuotaState quota_states = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_quota_states_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_quota_states(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._quota_states_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // bool isHealthy = 2;
  if (this->_internal_ishealthy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckHealthResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckHealthResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckHealthResponse::GetClassData() const { return &_class_data_; }


void CheckHealthResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckHealthResponse*>(&to_msg);
  auto& from = static_cast<const CheckHealthResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CheckHealthResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reasons_.MergeFrom(from._impl_.reasons_);
  _this->_impl_.quota_states_.MergeFrom(from._impl_.quota_states_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_ishealthy() != 0) {
    _this->_internal_set_ishealthy(from._internal_ishealthy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckHealthResponse::CopyFrom(const CheckHealthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CheckHealthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckHealthResponse::IsInitialized() const {
  return true;
}

void CheckHealthResponse::InternalSwap(CheckHealthResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.reasons_.InternalSwap(&other->_impl_.reasons_);
  _impl_.quota_states_.InternalSwap(&other->_impl_.quota_states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckHealthResponse, _impl_.ishealthy_)
      + sizeof(CheckHealthResponse::_impl_.ishealthy_)
      - PROTOBUF_FIELD_OFFSET(CheckHealthResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckHealthResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[135]);
}

// ===================================================================

class CreateResourceGroupRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateResourceGroupRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateResourceGroupRequest::_Internal::base(const CreateResourceGroupRequest* msg) {
  return *msg->_impl_.base_;
}
void CreateResourceGroupRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
CreateResourceGroupRequest::CreateResourceGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreateResourceGroupRequest)
}
CreateResourceGroupRequest::CreateResourceGroupRequest(const CreateResourceGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateResourceGroupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_group_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resource_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_group().empty()) {
    _this->_impl_.resource_group_.Set(from._internal_resource_group(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateResourceGroupRequest)
}

inline void CreateResourceGroupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_group_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateResourceGroupRequest::~CreateResourceGroupRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateResourceGroupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateResourceGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_group_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void CreateResourceGroupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateResourceGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateResourceGroupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_group_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateResourceGroupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string resource_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_resource_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreateResourceGroupRequest.resource_group"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateResourceGroupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateResourceGroupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string resource_group = 2;
  if (!this->_internal_resource_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_group().data(), static_cast<int>(this->_internal_resource_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateResourceGroupRequest.resource_group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateResourceGroupRequest)
  return target;
}

size_t CreateResourceGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateResourceGroupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_group = 2;
  if (!this->_internal_resource_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_group());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateResourceGroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateResourceGroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateResourceGroupRequest::GetClassData() const { return &_class_data_; }


void CreateResourceGroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateResourceGroupRequest*>(&to_msg);
  auto& from = static_cast<const CreateResourceGroupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateResourceGroupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resource_group().empty()) {
    _this->_internal_set_resource_group(from._internal_resource_group());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateResourceGroupRequest::CopyFrom(const CreateResourceGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateResourceGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResourceGroupRequest::IsInitialized() const {
  return true;
}

void CreateResourceGroupRequest::InternalSwap(CreateResourceGroupRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_group_, lhs_arena,
      &other->_impl_.resource_group_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateResourceGroupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[136]);
}

// ===================================================================

class DropResourceGroupRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropResourceGroupRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropResourceGroupRequest::_Internal::base(const DropResourceGroupRequest* msg) {
  return *msg->_impl_.base_;
}
void DropResourceGroupRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DropResourceGroupRequest::DropResourceGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DropResourceGroupRequest)
}
DropResourceGroupRequest::DropResourceGroupRequest(const DropResourceGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropResourceGroupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_group_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resource_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_group().empty()) {
    _this->_impl_.resource_group_.Set(from._internal_resource_group(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropResourceGroupRequest)
}

inline void DropResourceGroupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_group_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DropResourceGroupRequest::~DropResourceGroupRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropResourceGroupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropResourceGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_group_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DropResourceGroupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropResourceGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropResourceGroupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_group_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropResourceGroupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string resource_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_resource_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DropResourceGroupRequest.resource_group"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropResourceGroupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropResourceGroupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string resource_group = 2;
  if (!this->_internal_resource_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_group().data(), static_cast<int>(this->_internal_resource_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropResourceGroupRequest.resource_group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropResourceGroupRequest)
  return target;
}

size_t DropResourceGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropResourceGroupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_group = 2;
  if (!this->_internal_resource_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_group());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropResourceGroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropResourceGroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropResourceGroupRequest::GetClassData() const { return &_class_data_; }


void DropResourceGroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropResourceGroupRequest*>(&to_msg);
  auto& from = static_cast<const DropResourceGroupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropResourceGroupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resource_group().empty()) {
    _this->_internal_set_resource_group(from._internal_resource_group());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropResourceGroupRequest::CopyFrom(const DropResourceGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropResourceGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropResourceGroupRequest::IsInitialized() const {
  return true;
}

void DropResourceGroupRequest::InternalSwap(DropResourceGroupRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_group_, lhs_arena,
      &other->_impl_.resource_group_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropResourceGroupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[137]);
}

// ===================================================================

class TransferNodeRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const TransferNodeRequest* msg);
};

const ::milvus::proto::common::MsgBase&
TransferNodeRequest::_Internal::base(const TransferNodeRequest* msg) {
  return *msg->_impl_.base_;
}
void TransferNodeRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
TransferNodeRequest::TransferNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.TransferNodeRequest)
}
TransferNodeRequest::TransferNodeRequest(const TransferNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransferNodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_resource_group_){}
    , decltype(_impl_.target_resource_group_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.num_node_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_resource_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_resource_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_resource_group().empty()) {
    _this->_impl_.source_resource_group_.Set(from._internal_source_resource_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_resource_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_resource_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_resource_group().empty()) {
    _this->_impl_.target_resource_group_.Set(from._internal_target_resource_group(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.num_node_ = from._impl_.num_node_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.TransferNodeRequest)
}

inline void TransferNodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_resource_group_){}
    , decltype(_impl_.target_resource_group_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.num_node_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.source_resource_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_resource_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_resource_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_resource_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransferNodeRequest::~TransferNodeRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.TransferNodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferNodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_resource_group_.Destroy();
  _impl_.target_resource_group_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void TransferNodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransferNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.TransferNodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_resource_group_.ClearToEmpty();
  _impl_.target_resource_group_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.num_node_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferNodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string source_resource_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_resource_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.TransferNodeRequest.source_resource_group"));
        } else
          goto handle_unusual;
        continue;
      // string target_resource_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_target_resource_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.TransferNodeRequest.target_resource_group"));
        } else
          goto handle_unusual;
        continue;
      // int32 num_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.num_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferNodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.TransferNodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string source_resource_group = 2;
  if (!this->_internal_source_resource_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_resource_group().data(), static_cast<int>(this->_internal_source_resource_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.TransferNodeRequest.source_resource_group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_resource_group(), target);
  }

  // string target_resource_group = 3;
  if (!this->_internal_target_resource_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_resource_group().data(), static_cast<int>(this->_internal_target_resource_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.TransferNodeRequest.target_resource_group");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_resource_group(), target);
  }

  // int32 num_node = 4;
  if (this->_internal_num_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_node(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.TransferNodeRequest)
  return target;
}

size_t TransferNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.TransferNodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_resource_group = 2;
  if (!this->_internal_source_resource_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_resource_group());
  }

  // string target_resource_group = 3;
  if (!this->_internal_target_resource_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_resource_group());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int32 num_node = 4;
  if (this->_internal_num_node() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_node());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferNodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransferNodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferNodeRequest::GetClassData() const { return &_class_data_; }


void TransferNodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransferNodeRequest*>(&to_msg);
  auto& from = static_cast<const TransferNodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.TransferNodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source_resource_group().empty()) {
    _this->_internal_set_source_resource_group(from._internal_source_resource_group());
  }
  if (!from._internal_target_resource_group().empty()) {
    _this->_internal_set_target_resource_group(from._internal_target_resource_group());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_num_node() != 0) {
    _this->_internal_set_num_node(from._internal_num_node());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferNodeRequest::CopyFrom(const TransferNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.TransferNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferNodeRequest::IsInitialized() const {
  return true;
}

void TransferNodeRequest::InternalSwap(TransferNodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_resource_group_, lhs_arena,
      &other->_impl_.source_resource_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_resource_group_, lhs_arena,
      &other->_impl_.target_resource_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferNodeRequest, _impl_.num_node_)
      + sizeof(TransferNodeRequest::_impl_.num_node_)
      - PROTOBUF_FIELD_OFFSET(TransferNodeRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferNodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[138]);
}

// ===================================================================

class TransferReplicaRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const TransferReplicaRequest* msg);
};

const ::milvus::proto::common::MsgBase&
TransferReplicaRequest::_Internal::base(const TransferReplicaRequest* msg) {
  return *msg->_impl_.base_;
}
void TransferReplicaRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
TransferReplicaRequest::TransferReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.TransferReplicaRequest)
}
TransferReplicaRequest::TransferReplicaRequest(const TransferReplicaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransferReplicaRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_resource_group_){}
    , decltype(_impl_.target_resource_group_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.num_replica_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_resource_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_resource_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_resource_group().empty()) {
    _this->_impl_.source_resource_group_.Set(from._internal_source_resource_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_resource_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_resource_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_resource_group().empty()) {
    _this->_impl_.target_resource_group_.Set(from._internal_target_resource_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.num_replica_ = from._impl_.num_replica_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.TransferReplicaRequest)
}

inline void TransferReplicaRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_resource_group_){}
    , decltype(_impl_.target_resource_group_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.num_replica_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.source_resource_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_resource_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_resource_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_resource_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransferReplicaRequest::~TransferReplicaRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.TransferReplicaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferReplicaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_resource_group_.Destroy();
  _impl_.target_resource_group_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.db_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void TransferReplicaRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransferReplicaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.TransferReplicaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_resource_group_.ClearToEmpty();
  _impl_.target_resource_group_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.db_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.num_replica_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferReplicaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string source_resource_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_resource_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.TransferReplicaRequest.source_resource_group"));
        } else
          goto handle_unusual;
        continue;
      // string target_resource_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_target_resource_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.TransferReplicaRequest.target_resource_group"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.TransferReplicaRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 num_replica = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.num_replica_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.TransferReplicaRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferReplicaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.TransferReplicaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string source_resource_group = 2;
  if (!this->_internal_source_resource_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_resource_group().data(), static_cast<int>(this->_internal_source_resource_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.TransferReplicaRequest.source_resource_group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_resource_group(), target);
  }

  // string target_resource_group = 3;
  if (!this->_internal_target_resource_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_resource_group().data(), static_cast<int>(this->_internal_target_resource_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.TransferReplicaRequest.target_resource_group");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_resource_group(), target);
  }

  // string collection_name = 4;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.TransferReplicaRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_collection_name(), target);
  }

  // int64 num_replica = 5;
  if (this->_internal_num_replica() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_replica(), target);
  }

  // string db_name = 6;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.TransferReplicaRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.TransferReplicaRequest)
  return target;
}

size_t TransferReplicaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.TransferReplicaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_resource_group = 2;
  if (!this->_internal_source_resource_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_resource_group());
  }

  // string target_resource_group = 3;
  if (!this->_internal_target_resource_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_resource_group());
  }

  // string collection_name = 4;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string db_name = 6;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 num_replica = 5;
  if (this->_internal_num_replica() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_replica());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferReplicaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransferReplicaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferReplicaRequest::GetClassData() const { return &_class_data_; }


void TransferReplicaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransferReplicaRequest*>(&to_msg);
  auto& from = static_cast<const TransferReplicaRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.TransferReplicaRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source_resource_group().empty()) {
    _this->_internal_set_source_resource_group(from._internal_source_resource_group());
  }
  if (!from._internal_target_resource_group().empty()) {
    _this->_internal_set_target_resource_group(from._internal_target_resource_group());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_num_replica() != 0) {
    _this->_internal_set_num_replica(from._internal_num_replica());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferReplicaRequest::CopyFrom(const TransferReplicaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.TransferReplicaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferReplicaRequest::IsInitialized() const {
  return true;
}

void TransferReplicaRequest::InternalSwap(TransferReplicaRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_resource_group_, lhs_arena,
      &other->_impl_.source_resource_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_resource_group_, lhs_arena,
      &other->_impl_.target_resource_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferReplicaRequest, _impl_.num_replica_)
      + sizeof(TransferReplicaRequest::_impl_.num_replica_)
      - PROTOBUF_FIELD_OFFSET(TransferReplicaRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferReplicaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[139]);
}

// ===================================================================

class ListResourceGroupsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ListResourceGroupsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ListResourceGroupsRequest::_Internal::base(const ListResourceGroupsRequest* msg) {
  return *msg->_impl_.base_;
}
void ListResourceGroupsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ListResourceGroupsRequest::ListResourceGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListResourceGroupsRequest)
}
ListResourceGroupsRequest::ListResourceGroupsRequest(const ListResourceGroupsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListResourceGroupsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListResourceGroupsRequest)
}

inline void ListResourceGroupsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListResourceGroupsRequest::~ListResourceGroupsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListResourceGroupsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListResourceGroupsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ListResourceGroupsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListResourceGroupsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListResourceGroupsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListResourceGroupsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListResourceGroupsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListResourceGroupsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListResourceGroupsRequest)
  return target;
}

size_t ListResourceGroupsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListResourceGroupsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListResourceGroupsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListResourceGroupsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListResourceGroupsRequest::GetClassData() const { return &_class_data_; }


void ListResourceGroupsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListResourceGroupsRequest*>(&to_msg);
  auto& from = static_cast<const ListResourceGroupsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListResourceGroupsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListResourceGroupsRequest::CopyFrom(const ListResourceGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListResourceGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResourceGroupsRequest::IsInitialized() const {
  return true;
}

void ListResourceGroupsRequest::InternalSwap(ListResourceGroupsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListResourceGroupsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[140]);
}

// ===================================================================

class ListResourceGroupsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ListResourceGroupsResponse* msg);
};

const ::milvus::proto::common::Status&
ListResourceGroupsResponse::_Internal::status(const ListResourceGroupsResponse* msg) {
  return *msg->_impl_.status_;
}
void ListResourceGroupsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ListResourceGroupsResponse::ListResourceGroupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListResourceGroupsResponse)
}
ListResourceGroupsResponse::ListResourceGroupsResponse(const ListResourceGroupsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListResourceGroupsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_groups_){from._impl_.resource_groups_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListResourceGroupsResponse)
}

inline void ListResourceGroupsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_groups_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListResourceGroupsResponse::~ListResourceGroupsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListResourceGroupsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListResourceGroupsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_groups_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ListResourceGroupsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListResourceGroupsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListResourceGroupsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_groups_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListResourceGroupsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string resource_groups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_resource_groups();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ListResourceGroupsResponse.resource_groups"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListResourceGroupsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListResourceGroupsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string resource_groups = 2;
  for (int i = 0, n = this->_internal_resource_groups_size(); i < n; i++) {
    const auto& s = this->_internal_resource_groups(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListResourceGroupsResponse.resource_groups");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListResourceGroupsResponse)
  return target;
}

size_t ListResourceGroupsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListResourceGroupsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string resource_groups = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.resource_groups_.size());
  for (int i = 0, n = _impl_.resource_groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.resource_groups_.Get(i));
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListResourceGroupsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListResourceGroupsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListResourceGroupsResponse::GetClassData() const { return &_class_data_; }


void ListResourceGroupsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListResourceGroupsResponse*>(&to_msg);
  auto& from = static_cast<const ListResourceGroupsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListResourceGroupsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.resource_groups_.MergeFrom(from._impl_.resource_groups_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListResourceGroupsResponse::CopyFrom(const ListResourceGroupsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListResourceGroupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResourceGroupsResponse::IsInitialized() const {
  return true;
}

void ListResourceGroupsResponse::InternalSwap(ListResourceGroupsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.resource_groups_.InternalSwap(&other->_impl_.resource_groups_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListResourceGroupsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[141]);
}

// ===================================================================

class DescribeResourceGroupRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeResourceGroupRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeResourceGroupRequest::_Internal::base(const DescribeResourceGroupRequest* msg) {
  return *msg->_impl_.base_;
}
void DescribeResourceGroupRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DescribeResourceGroupRequest::DescribeResourceGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeResourceGroupRequest)
}
DescribeResourceGroupRequest::DescribeResourceGroupRequest(const DescribeResourceGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeResourceGroupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_group_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resource_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_group().empty()) {
    _this->_impl_.resource_group_.Set(from._internal_resource_group(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeResourceGroupRequest)
}

inline void DescribeResourceGroupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_group_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DescribeResourceGroupRequest::~DescribeResourceGroupRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeResourceGroupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeResourceGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_group_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DescribeResourceGroupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeResourceGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeResourceGroupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_group_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeResourceGroupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string resource_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_resource_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DescribeResourceGroupRequest.resource_group"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DescribeResourceGroupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeResourceGroupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string resource_group = 2;
  if (!this->_internal_resource_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_group().data(), static_cast<int>(this->_internal_resource_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeResourceGroupRequest.resource_group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeResourceGroupRequest)
  return target;
}

size_t DescribeResourceGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeResourceGroupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_group = 2;
  if (!this->_internal_resource_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_group());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeResourceGroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeResourceGroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeResourceGroupRequest::GetClassData() const { return &_class_data_; }


void DescribeResourceGroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeResourceGroupRequest*>(&to_msg);
  auto& from = static_cast<const DescribeResourceGroupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeResourceGroupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resource_group().empty()) {
    _this->_internal_set_resource_group(from._internal_resource_group());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeResourceGroupRequest::CopyFrom(const DescribeResourceGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeResourceGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeResourceGroupRequest::IsInitialized() const {
  return true;
}

void DescribeResourceGroupRequest::InternalSwap(DescribeResourceGroupRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_group_, lhs_arena,
      &other->_impl_.resource_group_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeResourceGroupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[142]);
}

// ===================================================================

class DescribeResourceGroupResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeResourceGroupResponse* msg);
  static const ::milvus::proto::milvus::ResourceGroup& resource_group(const DescribeResourceGroupResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeResourceGroupResponse::_Internal::status(const DescribeResourceGroupResponse* msg) {
  return *msg->_impl_.status_;
}
const ::milvus::proto::milvus::ResourceGroup&
DescribeResourceGroupResponse::_Internal::resource_group(const DescribeResourceGroupResponse* msg) {
  return *msg->_impl_.resource_group_;
}
void DescribeResourceGroupResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
DescribeResourceGroupResponse::DescribeResourceGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeResourceGroupResponse)
}
DescribeResourceGroupResponse::DescribeResourceGroupResponse(const DescribeResourceGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeResourceGroupResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.resource_group_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_resource_group()) {
    _this->_impl_.resource_group_ = new ::milvus::proto::milvus::ResourceGroup(*from._impl_.resource_group_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeResourceGroupResponse)
}

inline void DescribeResourceGroupResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.resource_group_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DescribeResourceGroupResponse::~DescribeResourceGroupResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeResourceGroupResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeResourceGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.resource_group_;
}

void DescribeResourceGroupResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeResourceGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeResourceGroupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resource_group_ != nullptr) {
    delete _impl_.resource_group_;
  }
  _impl_.resource_group_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeResourceGroupResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.milvus.ResourceGroup resource_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DescribeResourceGroupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeResourceGroupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.milvus.ResourceGroup resource_group = 2;
  if (this->_internal_has_resource_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::resource_group(this),
        _Internal::resource_group(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeResourceGroupResponse)
  return target;
}

size_t DescribeResourceGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeResourceGroupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .milvus.proto.milvus.ResourceGroup resource_group = 2;
  if (this->_internal_has_resource_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_group_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeResourceGroupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeResourceGroupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeResourceGroupResponse::GetClassData() const { return &_class_data_; }


void DescribeResourceGroupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeResourceGroupResponse*>(&to_msg);
  auto& from = static_cast<const DescribeResourceGroupResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeResourceGroupResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_resource_group()) {
    _this->_internal_mutable_resource_group()->::milvus::proto::milvus::ResourceGroup::MergeFrom(
        from._internal_resource_group());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeResourceGroupResponse::CopyFrom(const DescribeResourceGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeResourceGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeResourceGroupResponse::IsInitialized() const {
  return true;
}

void DescribeResourceGroupResponse::InternalSwap(DescribeResourceGroupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DescribeResourceGroupResponse, _impl_.resource_group_)
      + sizeof(DescribeResourceGroupResponse::_impl_.resource_group_)
      - PROTOBUF_FIELD_OFFSET(DescribeResourceGroupResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeResourceGroupResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[143]);
}

// ===================================================================

ResourceGroup_NumLoadedReplicaEntry_DoNotUse::ResourceGroup_NumLoadedReplicaEntry_DoNotUse() {}
ResourceGroup_NumLoadedReplicaEntry_DoNotUse::ResourceGroup_NumLoadedReplicaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResourceGroup_NumLoadedReplicaEntry_DoNotUse::MergeFrom(const ResourceGroup_NumLoadedReplicaEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResourceGroup_NumLoadedReplicaEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[144]);
}

// ===================================================================

ResourceGroup_NumOutgoingNodeEntry_DoNotUse::ResourceGroup_NumOutgoingNodeEntry_DoNotUse() {}
ResourceGroup_NumOutgoingNodeEntry_DoNotUse::ResourceGroup_NumOutgoingNodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResourceGroup_NumOutgoingNodeEntry_DoNotUse::MergeFrom(const ResourceGroup_NumOutgoingNodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResourceGroup_NumOutgoingNodeEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[145]);
}

// ===================================================================

ResourceGroup_NumIncomingNodeEntry_DoNotUse::ResourceGroup_NumIncomingNodeEntry_DoNotUse() {}
ResourceGroup_NumIncomingNodeEntry_DoNotUse::ResourceGroup_NumIncomingNodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResourceGroup_NumIncomingNodeEntry_DoNotUse::MergeFrom(const ResourceGroup_NumIncomingNodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResourceGroup_NumIncomingNodeEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[146]);
}

// ===================================================================

class ResourceGroup::_Internal {
 public:
};

ResourceGroup::ResourceGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ResourceGroup::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ResourceGroup)
}
ResourceGroup::ResourceGroup(const ResourceGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.num_loaded_replica_)*/{}
    , /*decltype(_impl_.num_outgoing_node_)*/{}
    , /*decltype(_impl_.num_incoming_node_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.capacity_){}
    , decltype(_impl_.num_available_node_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_loaded_replica_.MergeFrom(from._impl_.num_loaded_replica_);
  _this->_impl_.num_outgoing_node_.MergeFrom(from._impl_.num_outgoing_node_);
  _this->_impl_.num_incoming_node_.MergeFrom(from._impl_.num_incoming_node_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.capacity_, &from._impl_.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_available_node_) -
    reinterpret_cast<char*>(&_impl_.capacity_)) + sizeof(_impl_.num_available_node_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ResourceGroup)
}

inline void ResourceGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.num_loaded_replica_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.num_outgoing_node_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.num_incoming_node_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.capacity_){0}
    , decltype(_impl_.num_available_node_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResourceGroup::~ResourceGroup() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ResourceGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ResourceGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.num_loaded_replica_.Destruct();
  _impl_.num_loaded_replica_.~MapField();
  _impl_.num_outgoing_node_.Destruct();
  _impl_.num_outgoing_node_.~MapField();
  _impl_.num_incoming_node_.Destruct();
  _impl_.num_incoming_node_.~MapField();
  _impl_.name_.Destroy();
}

void ResourceGroup::ArenaDtor(void* object) {
  ResourceGroup* _this = reinterpret_cast< ResourceGroup* >(object);
  _this->_impl_.num_loaded_replica_.Destruct();
  _this->_impl_.num_outgoing_node_.Destruct();
  _this->_impl_.num_incoming_node_.Destruct();
}
void ResourceGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ResourceGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.num_loaded_replica_.Clear();
  _impl_.num_outgoing_node_.Clear();
  _impl_.num_incoming_node_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_available_node_) -
      reinterpret_cast<char*>(&_impl_.capacity_)) + sizeof(_impl_.num_available_node_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ResourceGroup.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_available_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_available_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> num_loaded_replica = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.num_loaded_replica_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> num_outgoing_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.num_outgoing_node_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> num_incoming_node = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.num_incoming_node_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ResourceGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ResourceGroup.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 capacity = 2;
  if (this->_internal_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_capacity(), target);
  }

  // int32 num_available_node = 3;
  if (this->_internal_num_available_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_available_node(), target);
  }

  // map<string, int32> num_loaded_replica = 4;
  if (!this->_internal_num_loaded_replica().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = ResourceGroup_NumLoadedReplicaEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_num_loaded_replica();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "milvus.proto.milvus.ResourceGroup.NumLoadedReplicaEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, int32> num_outgoing_node = 5;
  if (!this->_internal_num_outgoing_node().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = ResourceGroup_NumOutgoingNodeEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_num_outgoing_node();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "milvus.proto.milvus.ResourceGroup.NumOutgoingNodeEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, int32> num_incoming_node = 6;
  if (!this->_internal_num_incoming_node().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = ResourceGroup_NumIncomingNodeEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_num_incoming_node();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "milvus.proto.milvus.ResourceGroup.NumIncomingNodeEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ResourceGroup)
  return target;
}

size_t ResourceGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ResourceGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> num_loaded_replica = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_num_loaded_replica_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_num_loaded_replica().begin();
      it != this->_internal_num_loaded_replica().end(); ++it) {
    total_size += ResourceGroup_NumLoadedReplicaEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> num_outgoing_node = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_num_outgoing_node_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_num_outgoing_node().begin();
      it != this->_internal_num_outgoing_node().end(); ++it) {
    total_size += ResourceGroup_NumOutgoingNodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> num_incoming_node = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_num_incoming_node_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_num_incoming_node().begin();
      it != this->_internal_num_incoming_node().end(); ++it) {
    total_size += ResourceGroup_NumIncomingNodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 capacity = 2;
  if (this->_internal_capacity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_capacity());
  }

  // int32 num_available_node = 3;
  if (this->_internal_num_available_node() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_available_node());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceGroup::GetClassData() const { return &_class_data_; }


void ResourceGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceGroup*>(&to_msg);
  auto& from = static_cast<const ResourceGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ResourceGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.num_loaded_replica_.MergeFrom(from._impl_.num_loaded_replica_);
  _this->_impl_.num_outgoing_node_.MergeFrom(from._impl_.num_outgoing_node_);
  _this->_impl_.num_incoming_node_.MergeFrom(from._impl_.num_incoming_node_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_capacity() != 0) {
    _this->_internal_set_capacity(from._internal_capacity());
  }
  if (from._internal_num_available_node() != 0) {
    _this->_internal_set_num_available_node(from._internal_num_available_node());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceGroup::CopyFrom(const ResourceGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ResourceGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceGroup::IsInitialized() const {
  return true;
}

void ResourceGroup::InternalSwap(ResourceGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.num_loaded_replica_.InternalSwap(&other->_impl_.num_loaded_replica_);
  _impl_.num_outgoing_node_.InternalSwap(&other->_impl_.num_outgoing_node_);
  _impl_.num_incoming_node_.InternalSwap(&other->_impl_.num_incoming_node_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceGroup, _impl_.num_available_node_)
      + sizeof(ResourceGroup::_impl_.num_available_node_)
      - PROTOBUF_FIELD_OFFSET(ResourceGroup, _impl_.capacity_)>(
          reinterpret_cast<char*>(&_impl_.capacity_),
          reinterpret_cast<char*>(&other->_impl_.capacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[147]);
}

// ===================================================================

class RenameCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const RenameCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
RenameCollectionRequest::_Internal::base(const RenameCollectionRequest* msg) {
  return *msg->_impl_.base_;
}
void RenameCollectionRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
RenameCollectionRequest::RenameCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.RenameCollectionRequest)
}
RenameCollectionRequest::RenameCollectionRequest(const RenameCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenameCollectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.oldname_){}
    , decltype(_impl_.newname_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.oldname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oldname().empty()) {
    _this->_impl_.oldname_.Set(from._internal_oldname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.newname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newname().empty()) {
    _this->_impl_.newname_.Set(from._internal_newname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.RenameCollectionRequest)
}

inline void RenameCollectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.oldname_){}
    , decltype(_impl_.newname_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oldname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenameCollectionRequest::~RenameCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.RenameCollectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenameCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.oldname_.Destroy();
  _impl_.newname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void RenameCollectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenameCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.RenameCollectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.oldname_.ClearToEmpty();
  _impl_.newname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameCollectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.RenameCollectionRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string oldName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_oldname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.RenameCollectionRequest.oldName"));
        } else
          goto handle_unusual;
        continue;
      // string newName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_newname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.RenameCollectionRequest.newName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenameCollectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.RenameCollectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.RenameCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string oldName = 3;
  if (!this->_internal_oldname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oldname().data(), static_cast<int>(this->_internal_oldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.RenameCollectionRequest.oldName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_oldname(), target);
  }

  // string newName = 4;
  if (!this->_internal_newname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newname().data(), static_cast<int>(this->_internal_newname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.RenameCollectionRequest.newName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_newname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.RenameCollectionRequest)
  return target;
}

size_t RenameCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.RenameCollectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string oldName = 3;
  if (!this->_internal_oldname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldname());
  }

  // string newName = 4;
  if (!this->_internal_newname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenameCollectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenameCollectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenameCollectionRequest::GetClassData() const { return &_class_data_; }


void RenameCollectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenameCollectionRequest*>(&to_msg);
  auto& from = static_cast<const RenameCollectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.RenameCollectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_oldname().empty()) {
    _this->_internal_set_oldname(from._internal_oldname());
  }
  if (!from._internal_newname().empty()) {
    _this->_internal_set_newname(from._internal_newname());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenameCollectionRequest::CopyFrom(const RenameCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.RenameCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameCollectionRequest::IsInitialized() const {
  return true;
}

void RenameCollectionRequest::InternalSwap(RenameCollectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oldname_, lhs_arena,
      &other->_impl_.oldname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newname_, lhs_arena,
      &other->_impl_.newname_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameCollectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[148]);
}

// ===================================================================

class GetIndexStatisticsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetIndexStatisticsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetIndexStatisticsRequest::_Internal::base(const GetIndexStatisticsRequest* msg) {
  return *msg->_impl_.base_;
}
void GetIndexStatisticsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetIndexStatisticsRequest::GetIndexStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetIndexStatisticsRequest)
}
GetIndexStatisticsRequest::GetIndexStatisticsRequest(const GetIndexStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIndexStatisticsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetIndexStatisticsRequest)
}

inline void GetIndexStatisticsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetIndexStatisticsRequest::~GetIndexStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetIndexStatisticsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIndexStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.index_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetIndexStatisticsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIndexStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetIndexStatisticsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.index_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexStatisticsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStatisticsRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStatisticsRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string index_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStatisticsRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetIndexStatisticsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetIndexStatisticsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStatisticsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStatisticsRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string index_name = 4;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStatisticsRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetIndexStatisticsRequest)
  return target;
}

size_t GetIndexStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetIndexStatisticsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string index_name = 4;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIndexStatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIndexStatisticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIndexStatisticsRequest::GetClassData() const { return &_class_data_; }


void GetIndexStatisticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIndexStatisticsRequest*>(&to_msg);
  auto& from = static_cast<const GetIndexStatisticsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetIndexStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIndexStatisticsRequest::CopyFrom(const GetIndexStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetIndexStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexStatisticsRequest::IsInitialized() const {
  return true;
}

void GetIndexStatisticsRequest::InternalSwap(GetIndexStatisticsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexStatisticsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[149]);
}

// ===================================================================

class GetIndexStatisticsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetIndexStatisticsResponse* msg);
};

const ::milvus::proto::common::Status&
GetIndexStatisticsResponse::_Internal::status(const GetIndexStatisticsResponse* msg) {
  return *msg->_impl_.status_;
}
void GetIndexStatisticsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetIndexStatisticsResponse::GetIndexStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetIndexStatisticsResponse)
}
GetIndexStatisticsResponse::GetIndexStatisticsResponse(const GetIndexStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIndexStatisticsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_descriptions_){from._impl_.index_descriptions_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetIndexStatisticsResponse)
}

inline void GetIndexStatisticsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_descriptions_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetIndexStatisticsResponse::~GetIndexStatisticsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetIndexStatisticsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIndexStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_descriptions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetIndexStatisticsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIndexStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetIndexStatisticsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_descriptions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexStatisticsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetIndexStatisticsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetIndexStatisticsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_descriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_descriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetIndexStatisticsResponse)
  return target;
}

size_t GetIndexStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetIndexStatisticsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
  total_size += 1UL * this->_internal_index_descriptions_size();
  for (const auto& msg : this->_impl_.index_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIndexStatisticsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIndexStatisticsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIndexStatisticsResponse::GetClassData() const { return &_class_data_; }


void GetIndexStatisticsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIndexStatisticsResponse*>(&to_msg);
  auto& from = static_cast<const GetIndexStatisticsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetIndexStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_descriptions_.MergeFrom(from._impl_.index_descriptions_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIndexStatisticsResponse::CopyFrom(const GetIndexStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetIndexStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexStatisticsResponse::IsInitialized() const {
  return true;
}

void GetIndexStatisticsResponse::InternalSwap(GetIndexStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_descriptions_.InternalSwap(&other->_impl_.index_descriptions_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexStatisticsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[150]);
}

// ===================================================================

class ConnectRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ConnectRequest* msg);
  static const ::milvus::proto::common::ClientInfo& client_info(const ConnectRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ConnectRequest::_Internal::base(const ConnectRequest* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::common::ClientInfo&
ConnectRequest::_Internal::client_info(const ConnectRequest* msg) {
  return *msg->_impl_.client_info_;
}
void ConnectRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void ConnectRequest::clear_client_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_info_ != nullptr) {
    delete _impl_.client_info_;
  }
  _impl_.client_info_ = nullptr;
}
ConnectRequest::ConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ConnectRequest)
}
ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.client_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_client_info()) {
    _this->_impl_.client_info_ = new ::milvus::proto::common::ClientInfo(*from._impl_.client_info_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ConnectRequest)
}

inline void ConnectRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.client_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ConnectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.client_info_;
}

void ConnectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ConnectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.client_info_ != nullptr) {
    delete _impl_.client_info_;
  }
  _impl_.client_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.ClientInfo client_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ConnectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.ClientInfo client_info = 2;
  if (this->_internal_has_client_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::client_info(this),
        _Internal::client_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ConnectRequest)
  return target;
}

size_t ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ConnectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.common.ClientInfo client_info = 2;
  if (this->_internal_has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectRequest::GetClassData() const { return &_class_data_; }


void ConnectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectRequest*>(&to_msg);
  auto& from = static_cast<const ConnectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_client_info()) {
    _this->_internal_mutable_client_info()->::milvus::proto::common::ClientInfo::MergeFrom(
        from._internal_client_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  return true;
}

void ConnectRequest::InternalSwap(ConnectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectRequest, _impl_.client_info_)
      + sizeof(ConnectRequest::_impl_.client_info_)
      - PROTOBUF_FIELD_OFFSET(ConnectRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[151]);
}

// ===================================================================

class ConnectResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ConnectResponse* msg);
  static const ::milvus::proto::common::ServerInfo& server_info(const ConnectResponse* msg);
};

const ::milvus::proto::common::Status&
ConnectResponse::_Internal::status(const ConnectResponse* msg) {
  return *msg->_impl_.status_;
}
const ::milvus::proto::common::ServerInfo&
ConnectResponse::_Internal::server_info(const ConnectResponse* msg) {
  return *msg->_impl_.server_info_;
}
void ConnectResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void ConnectResponse::clear_server_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.server_info_ != nullptr) {
    delete _impl_.server_info_;
  }
  _impl_.server_info_ = nullptr;
}
ConnectResponse::ConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ConnectResponse)
}
ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.server_info_){nullptr}
    , decltype(_impl_.identifier_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_server_info()) {
    _this->_impl_.server_info_ = new ::milvus::proto::common::ServerInfo(*from._impl_.server_info_);
  }
  _this->_impl_.identifier_ = from._impl_.identifier_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ConnectResponse)
}

inline void ConnectResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.server_info_){nullptr}
    , decltype(_impl_.identifier_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConnectResponse::~ConnectResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ConnectResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.server_info_;
}

void ConnectResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ConnectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.server_info_ != nullptr) {
    delete _impl_.server_info_;
  }
  _impl_.server_info_ = nullptr;
  _impl_.identifier_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.ServerInfo server_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ConnectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.ServerInfo server_info = 2;
  if (this->_internal_has_server_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::server_info(this),
        _Internal::server_info(this).GetCachedSize(), target, stream);
  }

  // int64 identifier = 3;
  if (this->_internal_identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ConnectResponse)
  return target;
}

size_t ConnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ConnectResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .milvus.proto.common.ServerInfo server_info = 2;
  if (this->_internal_has_server_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_info_);
  }

  // int64 identifier = 3;
  if (this->_internal_identifier() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_identifier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectResponse::GetClassData() const { return &_class_data_; }


void ConnectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectResponse*>(&to_msg);
  auto& from = static_cast<const ConnectResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ConnectResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_server_info()) {
    _this->_internal_mutable_server_info()->::milvus::proto::common::ServerInfo::MergeFrom(
        from._internal_server_info());
  }
  if (from._internal_identifier() != 0) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectResponse::CopyFrom(const ConnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponse::IsInitialized() const {
  return true;
}

void ConnectResponse::InternalSwap(ConnectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectResponse, _impl_.identifier_)
      + sizeof(ConnectResponse::_impl_.identifier_)
      - PROTOBUF_FIELD_OFFSET(ConnectResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[152]);
}

// ===================================================================

class CreateDatabaseRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateDatabaseRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateDatabaseRequest::_Internal::base(const CreateDatabaseRequest* msg) {
  return *msg->_impl_.base_;
}
void CreateDatabaseRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
CreateDatabaseRequest::CreateDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreateDatabaseRequest)
}
CreateDatabaseRequest::CreateDatabaseRequest(const CreateDatabaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateDatabaseRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateDatabaseRequest)
}

inline void CreateDatabaseRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateDatabaseRequest::~CreateDatabaseRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateDatabaseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateDatabaseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void CreateDatabaseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateDatabaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateDatabaseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDatabaseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.CreateDatabaseRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateDatabaseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateDatabaseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateDatabaseRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateDatabaseRequest)
  return target;
}

size_t CreateDatabaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateDatabaseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDatabaseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateDatabaseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDatabaseRequest::GetClassData() const { return &_class_data_; }


void CreateDatabaseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateDatabaseRequest*>(&to_msg);
  auto& from = static_cast<const CreateDatabaseRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDatabaseRequest::CopyFrom(const CreateDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDatabaseRequest::IsInitialized() const {
  return true;
}

void CreateDatabaseRequest::InternalSwap(CreateDatabaseRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDatabaseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[153]);
}

// ===================================================================

class DropDatabaseRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropDatabaseRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropDatabaseRequest::_Internal::base(const DropDatabaseRequest* msg) {
  return *msg->_impl_.base_;
}
void DropDatabaseRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DropDatabaseRequest::DropDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DropDatabaseRequest)
}
DropDatabaseRequest::DropDatabaseRequest(const DropDatabaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropDatabaseRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropDatabaseRequest)
}

inline void DropDatabaseRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DropDatabaseRequest::~DropDatabaseRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropDatabaseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropDatabaseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DropDatabaseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropDatabaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropDatabaseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropDatabaseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.DropDatabaseRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropDatabaseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropDatabaseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropDatabaseRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropDatabaseRequest)
  return target;
}

size_t DropDatabaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropDatabaseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropDatabaseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropDatabaseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropDatabaseRequest::GetClassData() const { return &_class_data_; }


void DropDatabaseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropDatabaseRequest*>(&to_msg);
  auto& from = static_cast<const DropDatabaseRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropDatabaseRequest::CopyFrom(const DropDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropDatabaseRequest::IsInitialized() const {
  return true;
}

void DropDatabaseRequest::InternalSwap(DropDatabaseRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropDatabaseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[154]);
}

// ===================================================================

class ListDatabasesRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ListDatabasesRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ListDatabasesRequest::_Internal::base(const ListDatabasesRequest* msg) {
  return *msg->_impl_.base_;
}
void ListDatabasesRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ListDatabasesRequest::ListDatabasesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListDatabasesRequest)
}
ListDatabasesRequest::ListDatabasesRequest(const ListDatabasesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDatabasesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListDatabasesRequest)
}

inline void ListDatabasesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListDatabasesRequest::~ListDatabasesRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListDatabasesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDatabasesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ListDatabasesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDatabasesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListDatabasesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDatabasesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDatabasesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListDatabasesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListDatabasesRequest)
  return target;
}

size_t ListDatabasesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListDatabasesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDatabasesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDatabasesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDatabasesRequest::GetClassData() const { return &_class_data_; }


void ListDatabasesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDatabasesRequest*>(&to_msg);
  auto& from = static_cast<const ListDatabasesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListDatabasesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDatabasesRequest::CopyFrom(const ListDatabasesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListDatabasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatabasesRequest::IsInitialized() const {
  return true;
}

void ListDatabasesRequest::InternalSwap(ListDatabasesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatabasesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[155]);
}

// ===================================================================

class ListDatabasesResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ListDatabasesResponse* msg);
};

const ::milvus::proto::common::Status&
ListDatabasesResponse::_Internal::status(const ListDatabasesResponse* msg) {
  return *msg->_impl_.status_;
}
void ListDatabasesResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ListDatabasesResponse::ListDatabasesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListDatabasesResponse)
}
ListDatabasesResponse::ListDatabasesResponse(const ListDatabasesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDatabasesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_names_){from._impl_.db_names_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListDatabasesResponse)
}

inline void ListDatabasesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_names_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListDatabasesResponse::~ListDatabasesResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListDatabasesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDatabasesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_names_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ListDatabasesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDatabasesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListDatabasesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_names_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDatabasesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string db_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_db_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.milvus.ListDatabasesResponse.db_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDatabasesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListDatabasesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string db_names = 2;
  for (int i = 0, n = this->_internal_db_names_size(); i < n; i++) {
    const auto& s = this->_internal_db_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListDatabasesResponse.db_names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListDatabasesResponse)
  return target;
}

size_t ListDatabasesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListDatabasesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string db_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.db_names_.size());
  for (int i = 0, n = _impl_.db_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.db_names_.Get(i));
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDatabasesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDatabasesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDatabasesResponse::GetClassData() const { return &_class_data_; }


void ListDatabasesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDatabasesResponse*>(&to_msg);
  auto& from = static_cast<const ListDatabasesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListDatabasesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.db_names_.MergeFrom(from._impl_.db_names_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDatabasesResponse::CopyFrom(const ListDatabasesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListDatabasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatabasesResponse::IsInitialized() const {
  return true;
}

void ListDatabasesResponse::InternalSwap(ListDatabasesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.db_names_.InternalSwap(&other->_impl_.db_names_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatabasesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_milvus_2eproto_getter, &descriptor_table_milvus_2eproto_once,
      file_level_metadata_milvus_2eproto[156]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::milvus::proto::milvus::MilvusExt >, 11, false>
  milvus_ext_obj(kMilvusExtObjFieldNumber, ::milvus::proto::milvus::MilvusExt::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace milvus
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateAliasRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateAliasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreateAliasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropAliasRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropAliasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DropAliasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::AlterAliasRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::AlterAliasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::AlterAliasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeAliasRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeAliasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeAliasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeAliasResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeAliasResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeAliasResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListAliasesRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListAliasesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListAliasesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListAliasesResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListAliasesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListAliasesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateCollectionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreateCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropCollectionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DropCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::AlterCollectionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::AlterCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::AlterCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::HasCollectionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::HasCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::HasCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::BoolResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::BoolResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::BoolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::StringResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::StringResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::StringResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeCollectionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeCollectionResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeCollectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeCollectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::LoadCollectionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::LoadCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::LoadCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ReleaseCollectionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ReleaseCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ReleaseCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetStatisticsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetStatisticsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetCollectionStatisticsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetCollectionStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetCollectionStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetCollectionStatisticsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetCollectionStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetCollectionStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowCollectionsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowCollectionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ShowCollectionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowCollectionsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowCollectionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ShowCollectionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreatePartitionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreatePartitionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreatePartitionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropPartitionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropPartitionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DropPartitionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::HasPartitionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::HasPartitionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::HasPartitionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::LoadPartitionsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::LoadPartitionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::LoadPartitionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ReleasePartitionsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ReleasePartitionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ReleasePartitionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetPartitionStatisticsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetPartitionStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetPartitionStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetPartitionStatisticsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetPartitionStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetPartitionStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowPartitionsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowPartitionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ShowPartitionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowPartitionsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowPartitionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ShowPartitionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeSegmentRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeSegmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeSegmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeSegmentResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeSegmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeSegmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowSegmentsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowSegmentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ShowSegmentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowSegmentsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowSegmentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ShowSegmentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateIndexRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreateIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeIndexRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::IndexDescription*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::IndexDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::IndexDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeIndexResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetIndexBuildProgressRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetIndexBuildProgressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetIndexBuildProgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetIndexBuildProgressResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetIndexBuildProgressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetIndexBuildProgressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetIndexStateRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetIndexStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetIndexStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetIndexStateResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetIndexStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetIndexStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropIndexRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DropIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::InsertRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::InsertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::InsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::UpsertRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::UpsertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::UpsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::MutationResult*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::MutationResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::MutationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DeleteRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SearchRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::SearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::Hits*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::Hits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::Hits >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SearchResults*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::SearchResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SearchResults >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::QueryRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::QueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::QueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::QueryResults*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::QueryResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::QueryResults >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::VectorIDs*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::VectorIDs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::VectorIDs >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::VectorsArray*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::VectorsArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::VectorsArray >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CalcDistanceRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::CalcDistanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CalcDistanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CalcDistanceResults*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::CalcDistanceResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CalcDistanceResults >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushAllRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushAllRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushAllRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushAllResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushAllResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushAllResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::PersistentSegmentInfo*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::PersistentSegmentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::PersistentSegmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetPersistentSegmentInfoRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetPersistentSegmentInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetPersistentSegmentInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetPersistentSegmentInfoResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::QuerySegmentInfo*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::QuerySegmentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::QuerySegmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetQuerySegmentInfoRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetQuerySegmentInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetQuerySegmentInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetQuerySegmentInfoResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetQuerySegmentInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetQuerySegmentInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DummyRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DummyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DummyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DummyResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DummyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DummyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::RegisterLinkRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::RegisterLinkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::RegisterLinkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::RegisterLinkResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::RegisterLinkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::RegisterLinkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetMetricsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetMetricsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ComponentInfo*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ComponentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ComponentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ComponentStates*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ComponentStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ComponentStates >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetComponentStatesRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetComponentStatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetComponentStatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::LoadBalanceRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::LoadBalanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::LoadBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ManualCompactionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ManualCompactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ManualCompactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ManualCompactionResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ManualCompactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ManualCompactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetCompactionStateRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetCompactionStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetCompactionStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetCompactionStateResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetCompactionStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetCompactionStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetCompactionPlansRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetCompactionPlansRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetCompactionPlansRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetCompactionPlansResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetCompactionPlansResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetCompactionPlansResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CompactionMergeInfo*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::CompactionMergeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CompactionMergeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetFlushStateRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetFlushStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetFlushStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetFlushStateResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetFlushStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetFlushStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetFlushAllStateRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetFlushAllStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetFlushAllStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetFlushAllStateResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetFlushAllStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetFlushAllStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ImportRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ImportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ImportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ImportResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ImportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ImportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetImportStateRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetImportStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetImportStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetImportStateResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetImportStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetImportStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListImportTasksRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListImportTasksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListImportTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListImportTasksResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListImportTasksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListImportTasksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetReplicasRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetReplicasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetReplicasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetReplicasResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetReplicasResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetReplicasResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ReplicaInfo*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ReplicaInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ReplicaInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShardReplica*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShardReplica >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ShardReplica >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateCredentialRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateCredentialRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreateCredentialRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::UpdateCredentialRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::UpdateCredentialRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::UpdateCredentialRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DeleteCredentialRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DeleteCredentialRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DeleteCredentialRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListCredUsersResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListCredUsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListCredUsersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListCredUsersRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListCredUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListCredUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::RoleEntity*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::RoleEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::RoleEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::UserEntity*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::UserEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::UserEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateRoleRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreateRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropRoleRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DropRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::OperateUserRoleRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::OperateUserRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::OperateUserRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SelectRoleRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::SelectRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SelectRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::RoleResult*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::RoleResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::RoleResult >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SelectRoleResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::SelectRoleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SelectRoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SelectUserRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::SelectUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SelectUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::UserResult*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::UserResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::UserResult >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SelectUserResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::SelectUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SelectUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ObjectEntity*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ObjectEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ObjectEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::PrivilegeEntity*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::PrivilegeEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::PrivilegeEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GrantorEntity*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GrantorEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GrantorEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GrantPrivilegeEntity*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GrantPrivilegeEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GrantPrivilegeEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GrantEntity*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GrantEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GrantEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SelectGrantRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::SelectGrantRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SelectGrantRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SelectGrantResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::SelectGrantResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SelectGrantResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::OperatePrivilegeRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::OperatePrivilegeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::OperatePrivilegeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetLoadingProgressRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetLoadingProgressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetLoadingProgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetLoadingProgressResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetLoadingProgressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetLoadingProgressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetLoadStateRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetLoadStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetLoadStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetLoadStateResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetLoadStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetLoadStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::MilvusExt*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::MilvusExt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::MilvusExt >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetVersionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetVersionResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CheckHealthRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::CheckHealthRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CheckHealthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CheckHealthResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::CheckHealthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CheckHealthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateResourceGroupRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateResourceGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreateResourceGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropResourceGroupRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropResourceGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DropResourceGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::TransferNodeRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::TransferNodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::TransferNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::TransferReplicaRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::TransferReplicaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::TransferReplicaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListResourceGroupsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListResourceGroupsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListResourceGroupsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListResourceGroupsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListResourceGroupsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListResourceGroupsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeResourceGroupRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeResourceGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeResourceGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeResourceGroupResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeResourceGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeResourceGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ResourceGroup*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ResourceGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ResourceGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::RenameCollectionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::RenameCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::RenameCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetIndexStatisticsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetIndexStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetIndexStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetIndexStatisticsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetIndexStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetIndexStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ConnectRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ConnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ConnectResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ConnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ConnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateDatabaseRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateDatabaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreateDatabaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropDatabaseRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropDatabaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DropDatabaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListDatabasesRequest*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListDatabasesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListDatabasesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListDatabasesResponse*
Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListDatabasesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListDatabasesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
