// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal.proto

#include "internal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace milvus {
namespace proto {
namespace internal {
PROTOBUF_CONSTEXPR GetTimeTickChannelRequest::GetTimeTickChannelRequest(
    ::_pbi::ConstantInitialized) {}
struct GetTimeTickChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTimeTickChannelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTimeTickChannelRequestDefaultTypeInternal() {}
  union {
    GetTimeTickChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTimeTickChannelRequestDefaultTypeInternal _GetTimeTickChannelRequest_default_instance_;
PROTOBUF_CONSTEXPR GetStatisticsChannelRequest::GetStatisticsChannelRequest(
    ::_pbi::ConstantInitialized) {}
struct GetStatisticsChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStatisticsChannelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStatisticsChannelRequestDefaultTypeInternal() {}
  union {
    GetStatisticsChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStatisticsChannelRequestDefaultTypeInternal _GetStatisticsChannelRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDdChannelRequest::GetDdChannelRequest(
    ::_pbi::ConstantInitialized) {}
struct GetDdChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDdChannelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDdChannelRequestDefaultTypeInternal() {}
  union {
    GetDdChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDdChannelRequestDefaultTypeInternal _GetDdChannelRequest_default_instance_;
PROTOBUF_CONSTEXPR NodeInfo::NodeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeInfoDefaultTypeInternal() {}
  union {
    NodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
PROTOBUF_CONSTEXPR InitParams::InitParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_params_)*/{}
  , /*decltype(_impl_.nodeid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InitParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitParamsDefaultTypeInternal() {}
  union {
    InitParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitParamsDefaultTypeInternal _InitParams_default_instance_;
PROTOBUF_CONSTEXPR StringList::StringList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringListDefaultTypeInternal() {}
  union {
    StringList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringListDefaultTypeInternal _StringList_default_instance_;
PROTOBUF_CONSTEXPR GetStatisticsRequest::GetStatisticsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partitionids_)*/{}
  , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.travel_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.guarantee_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.timeout_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStatisticsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStatisticsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStatisticsRequestDefaultTypeInternal() {}
  union {
    GetStatisticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStatisticsRequestDefaultTypeInternal _GetStatisticsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetStatisticsResponse::GetStatisticsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStatisticsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStatisticsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStatisticsResponseDefaultTypeInternal() {}
  union {
    GetStatisticsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStatisticsResponseDefaultTypeInternal _GetStatisticsResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateAliasRequest::CreateAliasRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateAliasRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateAliasRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateAliasRequestDefaultTypeInternal() {}
  union {
    CreateAliasRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateAliasRequestDefaultTypeInternal _CreateAliasRequest_default_instance_;
PROTOBUF_CONSTEXPR DropAliasRequest::DropAliasRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropAliasRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropAliasRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropAliasRequestDefaultTypeInternal() {}
  union {
    DropAliasRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropAliasRequestDefaultTypeInternal _DropAliasRequest_default_instance_;
PROTOBUF_CONSTEXPR AlterAliasRequest::AlterAliasRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlterAliasRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlterAliasRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlterAliasRequestDefaultTypeInternal() {}
  union {
    AlterAliasRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlterAliasRequestDefaultTypeInternal _AlterAliasRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateIndexRequest::CreateIndexRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_params_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.field_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.fieldid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateIndexRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateIndexRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateIndexRequestDefaultTypeInternal() {}
  union {
    CreateIndexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateIndexRequestDefaultTypeInternal _CreateIndexRequest_default_instance_;
PROTOBUF_CONSTEXPR SearchRequest::SearchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partitionids_)*/{}
  , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.output_fields_id_)*/{}
  , /*decltype(_impl_._output_fields_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.dsl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.placeholder_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serialized_expr_plan_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metrictype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.reqid_)*/int64_t{0}
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.travel_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.guarantee_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.dsl_type_)*/0
  , /*decltype(_impl_.ignoregrowing_)*/false
  , /*decltype(_impl_.timeout_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.nq_)*/int64_t{0}
  , /*decltype(_impl_.topk_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchRequestDefaultTypeInternal() {}
  union {
    SearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
PROTOBUF_CONSTEXPR SearchResults::SearchResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sealed_segmentids_searched_)*/{}
  , /*decltype(_impl_._sealed_segmentids_searched_cached_byte_size_)*/{0}
  , /*decltype(_impl_.channelids_searched_)*/{}
  , /*decltype(_impl_.global_sealed_segmentids_)*/{}
  , /*decltype(_impl_._global_sealed_segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.metric_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sliced_blob_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.costaggregation_)*/nullptr
  , /*decltype(_impl_.reqid_)*/int64_t{0}
  , /*decltype(_impl_.num_queries_)*/int64_t{0}
  , /*decltype(_impl_.top_k_)*/int64_t{0}
  , /*decltype(_impl_.sliced_num_count_)*/int64_t{0}
  , /*decltype(_impl_.sliced_offset_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchResultsDefaultTypeInternal() {}
  union {
    SearchResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchResultsDefaultTypeInternal _SearchResults_default_instance_;
PROTOBUF_CONSTEXPR CostAggregation::CostAggregation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responsetime_)*/int64_t{0}
  , /*decltype(_impl_.servicetime_)*/int64_t{0}
  , /*decltype(_impl_.totalnq_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CostAggregationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CostAggregationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CostAggregationDefaultTypeInternal() {}
  union {
    CostAggregation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CostAggregationDefaultTypeInternal _CostAggregation_default_instance_;
PROTOBUF_CONSTEXPR RetrieveRequest::RetrieveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partitionids_)*/{}
  , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.output_fields_id_)*/{}
  , /*decltype(_impl_._output_fields_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.serialized_expr_plan_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.reqid_)*/int64_t{0}
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.travel_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.guarantee_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.timeout_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.limit_)*/int64_t{0}
  , /*decltype(_impl_.iteration_extension_reduce_rate_)*/int64_t{0}
  , /*decltype(_impl_.ignoregrowing_)*/false
  , /*decltype(_impl_.is_count_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RetrieveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RetrieveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RetrieveRequestDefaultTypeInternal() {}
  union {
    RetrieveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RetrieveRequestDefaultTypeInternal _RetrieveRequest_default_instance_;
PROTOBUF_CONSTEXPR RetrieveResults::RetrieveResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_data_)*/{}
  , /*decltype(_impl_.sealed_segmentids_retrieved_)*/{}
  , /*decltype(_impl_._sealed_segmentids_retrieved_cached_byte_size_)*/{0}
  , /*decltype(_impl_.channelids_retrieved_)*/{}
  , /*decltype(_impl_.global_sealed_segmentids_)*/{}
  , /*decltype(_impl_._global_sealed_segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.ids_)*/nullptr
  , /*decltype(_impl_.costaggregation_)*/nullptr
  , /*decltype(_impl_.reqid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RetrieveResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RetrieveResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RetrieveResultsDefaultTypeInternal() {}
  union {
    RetrieveResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RetrieveResultsDefaultTypeInternal _RetrieveResults_default_instance_;
PROTOBUF_CONSTEXPR LoadIndex::LoadIndex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_paths_)*/{}
  , /*decltype(_impl_.index_params_)*/{}
  , /*decltype(_impl_.fieldname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.fieldid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadIndexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadIndexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadIndexDefaultTypeInternal() {}
  union {
    LoadIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadIndexDefaultTypeInternal _LoadIndex_default_instance_;
PROTOBUF_CONSTEXPR IndexStats::IndexStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_params_)*/{}
  , /*decltype(_impl_.num_related_segments_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexStatsDefaultTypeInternal() {}
  union {
    IndexStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexStatsDefaultTypeInternal _IndexStats_default_instance_;
PROTOBUF_CONSTEXPR FieldStats::FieldStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_stats_)*/{}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.fieldid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FieldStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldStatsDefaultTypeInternal() {}
  union {
    FieldStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldStatsDefaultTypeInternal _FieldStats_default_instance_;
PROTOBUF_CONSTEXPR SegmentStats::SegmentStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.memory_size_)*/int64_t{0}
  , /*decltype(_impl_.num_rows_)*/int64_t{0}
  , /*decltype(_impl_.recently_modified_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentStatsDefaultTypeInternal() {}
  union {
    SegmentStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentStatsDefaultTypeInternal _SegmentStats_default_instance_;
PROTOBUF_CONSTEXPR ChannelTimeTickMsg::ChannelTimeTickMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channelnames_)*/{}
  , /*decltype(_impl_.timestamps_)*/{}
  , /*decltype(_impl_._timestamps_cached_byte_size_)*/{0}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.default_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelTimeTickMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelTimeTickMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelTimeTickMsgDefaultTypeInternal() {}
  union {
    ChannelTimeTickMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelTimeTickMsgDefaultTypeInternal _ChannelTimeTickMsg_default_instance_;
PROTOBUF_CONSTEXPR CredentialInfo::CredentialInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encrypted_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tenant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sha256_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_super_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CredentialInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CredentialInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CredentialInfoDefaultTypeInternal() {}
  union {
    CredentialInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CredentialInfoDefaultTypeInternal _CredentialInfo_default_instance_;
PROTOBUF_CONSTEXPR ListPolicyRequest::ListPolicyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListPolicyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListPolicyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListPolicyRequestDefaultTypeInternal() {}
  union {
    ListPolicyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListPolicyRequestDefaultTypeInternal _ListPolicyRequest_default_instance_;
PROTOBUF_CONSTEXPR ListPolicyResponse::ListPolicyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.policy_infos_)*/{}
  , /*decltype(_impl_.user_roles_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListPolicyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListPolicyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListPolicyResponseDefaultTypeInternal() {}
  union {
    ListPolicyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListPolicyResponseDefaultTypeInternal _ListPolicyResponse_default_instance_;
PROTOBUF_CONSTEXPR ShowConfigurationsRequest::ShowConfigurationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShowConfigurationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowConfigurationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowConfigurationsRequestDefaultTypeInternal() {}
  union {
    ShowConfigurationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowConfigurationsRequestDefaultTypeInternal _ShowConfigurationsRequest_default_instance_;
PROTOBUF_CONSTEXPR ShowConfigurationsResponse::ShowConfigurationsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.configuations_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShowConfigurationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowConfigurationsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowConfigurationsResponseDefaultTypeInternal() {}
  union {
    ShowConfigurationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowConfigurationsResponseDefaultTypeInternal _ShowConfigurationsResponse_default_instance_;
PROTOBUF_CONSTEXPR Rate::Rate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.r_)*/0
  , /*decltype(_impl_.rt_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RateDefaultTypeInternal() {}
  union {
    Rate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RateDefaultTypeInternal _Rate_default_instance_;
}  // namespace internal
}  // namespace proto
}  // namespace milvus
static ::_pb::Metadata file_level_metadata_internal_2eproto[28];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_internal_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_internal_2eproto = nullptr;

const uint32_t TableStruct_internal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetTimeTickChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetStatisticsChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetDdChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::NodeInfo, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::NodeInfo, _impl_.role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::InitParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::InitParams, _impl_.nodeid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::InitParams, _impl_.start_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::StringList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::StringList, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::StringList, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetStatisticsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetStatisticsRequest, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetStatisticsRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetStatisticsRequest, _impl_.partitionids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetStatisticsRequest, _impl_.travel_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetStatisticsRequest, _impl_.guarantee_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetStatisticsRequest, _impl_.timeout_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetStatisticsResponse, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetStatisticsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::GetStatisticsResponse, _impl_.stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CreateAliasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CreateAliasRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CreateAliasRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CreateAliasRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CreateAliasRequest, _impl_.alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::DropAliasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::DropAliasRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::DropAliasRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::DropAliasRequest, _impl_.alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::AlterAliasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::AlterAliasRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::AlterAliasRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::AlterAliasRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::AlterAliasRequest, _impl_.alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CreateIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CreateIndexRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CreateIndexRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CreateIndexRequest, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CreateIndexRequest, _impl_.field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CreateIndexRequest, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CreateIndexRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CreateIndexRequest, _impl_.fieldid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CreateIndexRequest, _impl_.extra_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.reqid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.partitionids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.dsl_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.placeholder_group_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.dsl_type_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.serialized_expr_plan_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.output_fields_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.travel_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.guarantee_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.timeout_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.nq_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.topk_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.metrictype_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.ignoregrowing_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchRequest, _impl_.username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchResults, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchResults, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchResults, _impl_.reqid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchResults, _impl_.metric_type_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchResults, _impl_.num_queries_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchResults, _impl_.top_k_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchResults, _impl_.sealed_segmentids_searched_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchResults, _impl_.channelids_searched_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchResults, _impl_.global_sealed_segmentids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchResults, _impl_.sliced_blob_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchResults, _impl_.sliced_num_count_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchResults, _impl_.sliced_offset_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SearchResults, _impl_.costaggregation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CostAggregation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CostAggregation, _impl_.responsetime_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CostAggregation, _impl_.servicetime_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CostAggregation, _impl_.totalnq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.reqid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.partitionids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.serialized_expr_plan_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.output_fields_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.travel_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.guarantee_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.timeout_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.ignoregrowing_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.is_count_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.iteration_extension_reduce_rate_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveRequest, _impl_.username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveResults, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveResults, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveResults, _impl_.reqid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveResults, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveResults, _impl_.fields_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveResults, _impl_.sealed_segmentids_retrieved_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveResults, _impl_.channelids_retrieved_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveResults, _impl_.global_sealed_segmentids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::RetrieveResults, _impl_.costaggregation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::LoadIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::LoadIndex, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::LoadIndex, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::LoadIndex, _impl_.fieldname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::LoadIndex, _impl_.fieldid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::LoadIndex, _impl_.index_paths_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::LoadIndex, _impl_.index_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::IndexStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::IndexStats, _impl_.index_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::IndexStats, _impl_.num_related_segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::FieldStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::FieldStats, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::FieldStats, _impl_.fieldid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::FieldStats, _impl_.index_stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SegmentStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SegmentStats, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SegmentStats, _impl_.memory_size_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SegmentStats, _impl_.num_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::SegmentStats, _impl_.recently_modified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ChannelTimeTickMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ChannelTimeTickMsg, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ChannelTimeTickMsg, _impl_.channelnames_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ChannelTimeTickMsg, _impl_.timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ChannelTimeTickMsg, _impl_.default_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CredentialInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CredentialInfo, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CredentialInfo, _impl_.encrypted_password_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CredentialInfo, _impl_.tenant_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CredentialInfo, _impl_.is_super_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::CredentialInfo, _impl_.sha256_password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ListPolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ListPolicyRequest, _impl_.base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ListPolicyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ListPolicyResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ListPolicyResponse, _impl_.policy_infos_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ListPolicyResponse, _impl_.user_roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ShowConfigurationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ShowConfigurationsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ShowConfigurationsRequest, _impl_.pattern_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ShowConfigurationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ShowConfigurationsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::ShowConfigurationsResponse, _impl_.configuations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::Rate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::Rate, _impl_.rt_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::internal::Rate, _impl_.r_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::milvus::proto::internal::GetTimeTickChannelRequest)},
  { 6, -1, -1, sizeof(::milvus::proto::internal::GetStatisticsChannelRequest)},
  { 12, -1, -1, sizeof(::milvus::proto::internal::GetDdChannelRequest)},
  { 18, -1, -1, sizeof(::milvus::proto::internal::NodeInfo)},
  { 26, -1, -1, sizeof(::milvus::proto::internal::InitParams)},
  { 34, -1, -1, sizeof(::milvus::proto::internal::StringList)},
  { 42, -1, -1, sizeof(::milvus::proto::internal::GetStatisticsRequest)},
  { 55, -1, -1, sizeof(::milvus::proto::internal::GetStatisticsResponse)},
  { 64, -1, -1, sizeof(::milvus::proto::internal::CreateAliasRequest)},
  { 74, -1, -1, sizeof(::milvus::proto::internal::DropAliasRequest)},
  { 83, -1, -1, sizeof(::milvus::proto::internal::AlterAliasRequest)},
  { 93, -1, -1, sizeof(::milvus::proto::internal::CreateIndexRequest)},
  { 107, -1, -1, sizeof(::milvus::proto::internal::SearchRequest)},
  { 131, -1, -1, sizeof(::milvus::proto::internal::SearchResults)},
  { 150, -1, -1, sizeof(::milvus::proto::internal::CostAggregation)},
  { 159, -1, -1, sizeof(::milvus::proto::internal::RetrieveRequest)},
  { 180, -1, -1, sizeof(::milvus::proto::internal::RetrieveResults)},
  { 195, -1, -1, sizeof(::milvus::proto::internal::LoadIndex)},
  { 207, -1, -1, sizeof(::milvus::proto::internal::IndexStats)},
  { 215, -1, -1, sizeof(::milvus::proto::internal::FieldStats)},
  { 224, -1, -1, sizeof(::milvus::proto::internal::SegmentStats)},
  { 234, -1, -1, sizeof(::milvus::proto::internal::ChannelTimeTickMsg)},
  { 244, -1, -1, sizeof(::milvus::proto::internal::CredentialInfo)},
  { 255, -1, -1, sizeof(::milvus::proto::internal::ListPolicyRequest)},
  { 262, -1, -1, sizeof(::milvus::proto::internal::ListPolicyResponse)},
  { 271, -1, -1, sizeof(::milvus::proto::internal::ShowConfigurationsRequest)},
  { 279, -1, -1, sizeof(::milvus::proto::internal::ShowConfigurationsResponse)},
  { 287, -1, -1, sizeof(::milvus::proto::internal::Rate)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::milvus::proto::internal::_GetTimeTickChannelRequest_default_instance_._instance,
  &::milvus::proto::internal::_GetStatisticsChannelRequest_default_instance_._instance,
  &::milvus::proto::internal::_GetDdChannelRequest_default_instance_._instance,
  &::milvus::proto::internal::_NodeInfo_default_instance_._instance,
  &::milvus::proto::internal::_InitParams_default_instance_._instance,
  &::milvus::proto::internal::_StringList_default_instance_._instance,
  &::milvus::proto::internal::_GetStatisticsRequest_default_instance_._instance,
  &::milvus::proto::internal::_GetStatisticsResponse_default_instance_._instance,
  &::milvus::proto::internal::_CreateAliasRequest_default_instance_._instance,
  &::milvus::proto::internal::_DropAliasRequest_default_instance_._instance,
  &::milvus::proto::internal::_AlterAliasRequest_default_instance_._instance,
  &::milvus::proto::internal::_CreateIndexRequest_default_instance_._instance,
  &::milvus::proto::internal::_SearchRequest_default_instance_._instance,
  &::milvus::proto::internal::_SearchResults_default_instance_._instance,
  &::milvus::proto::internal::_CostAggregation_default_instance_._instance,
  &::milvus::proto::internal::_RetrieveRequest_default_instance_._instance,
  &::milvus::proto::internal::_RetrieveResults_default_instance_._instance,
  &::milvus::proto::internal::_LoadIndex_default_instance_._instance,
  &::milvus::proto::internal::_IndexStats_default_instance_._instance,
  &::milvus::proto::internal::_FieldStats_default_instance_._instance,
  &::milvus::proto::internal::_SegmentStats_default_instance_._instance,
  &::milvus::proto::internal::_ChannelTimeTickMsg_default_instance_._instance,
  &::milvus::proto::internal::_CredentialInfo_default_instance_._instance,
  &::milvus::proto::internal::_ListPolicyRequest_default_instance_._instance,
  &::milvus::proto::internal::_ListPolicyResponse_default_instance_._instance,
  &::milvus::proto::internal::_ShowConfigurationsRequest_default_instance_._instance,
  &::milvus::proto::internal::_ShowConfigurationsResponse_default_instance_._instance,
  &::milvus::proto::internal::_Rate_default_instance_._instance,
};

const char descriptor_table_protodef_internal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016internal.proto\022\025milvus.proto.internal\032"
  "\014common.proto\032\014schema.proto\"\033\n\031GetTimeTi"
  "ckChannelRequest\"\035\n\033GetStatisticsChannel"
  "Request\"\025\n\023GetDdChannelRequest\"G\n\010NodeIn"
  "fo\022-\n\007address\030\001 \001(\0132\034.milvus.proto.commo"
  "n.Address\022\014\n\004role\030\002 \001(\t\"U\n\nInitParams\022\016\n"
  "\006nodeID\030\001 \001(\003\0227\n\014start_params\030\002 \003(\0132!.mi"
  "lvus.proto.common.KeyValuePair\"I\n\nString"
  "List\022\016\n\006values\030\001 \003(\t\022+\n\006status\030\002 \001(\0132\033.m"
  "ilvus.proto.common.Status\"\316\001\n\024GetStatist"
  "icsRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto."
  "common.MsgBase\022\014\n\004dbID\030\002 \001(\003\022\024\n\014collecti"
  "onID\030\003 \001(\003\022\024\n\014partitionIDs\030\004 \003(\003\022\030\n\020trav"
  "el_timestamp\030\005 \001(\004\022\033\n\023guarantee_timestam"
  "p\030\006 \001(\004\022\031\n\021timeout_timestamp\030\007 \001(\004\"\242\001\n\025G"
  "etStatisticsResponse\022*\n\004base\030\001 \001(\0132\034.mil"
  "vus.proto.common.MsgBase\022+\n\006status\030\002 \001(\013"
  "2\033.milvus.proto.common.Status\0220\n\005stats\030\003"
  " \003(\0132!.milvus.proto.common.KeyValuePair\""
  "y\n\022CreateAliasRequest\022*\n\004base\030\001 \001(\0132\034.mi"
  "lvus.proto.common.MsgBase\022\017\n\007db_name\030\002 \001"
  "(\t\022\027\n\017collection_name\030\003 \001(\t\022\r\n\005alias\030\004 \001"
  "(\t\"^\n\020DropAliasRequest\022*\n\004base\030\001 \001(\0132\034.m"
  "ilvus.proto.common.MsgBase\022\017\n\007db_name\030\002 "
  "\001(\t\022\r\n\005alias\030\003 \001(\t\"x\n\021AlterAliasRequest\022"
  "*\n\004base\030\001 \001(\0132\034.milvus.proto.common.MsgB"
  "ase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_name\030"
  "\003 \001(\t\022\r\n\005alias\030\004 \001(\t\"\354\001\n\022CreateIndexRequ"
  "est\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common."
  "MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_n"
  "ame\030\003 \001(\t\022\022\n\nfield_name\030\004 \001(\t\022\014\n\004dbID\030\005 "
  "\001(\003\022\024\n\014collectionID\030\006 \001(\003\022\017\n\007fieldID\030\007 \001"
  "(\003\0227\n\014extra_params\030\010 \003(\0132!.milvus.proto."
  "common.KeyValuePair\"\275\003\n\rSearchRequest\022*\n"
  "\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBas"
  "e\022\r\n\005reqID\030\002 \001(\003\022\014\n\004dbID\030\003 \001(\003\022\024\n\014collec"
  "tionID\030\004 \001(\003\022\024\n\014partitionIDs\030\005 \003(\003\022\013\n\003ds"
  "l\030\006 \001(\t\022\031\n\021placeholder_group\030\007 \001(\014\022.\n\010ds"
  "l_type\030\010 \001(\0162\034.milvus.proto.common.DslTy"
  "pe\022\034\n\024serialized_expr_plan\030\t \001(\014\022\030\n\020outp"
  "ut_fields_id\030\n \003(\003\022\030\n\020travel_timestamp\030\013"
  " \001(\004\022\033\n\023guarantee_timestamp\030\014 \001(\004\022\031\n\021tim"
  "eout_timestamp\030\r \001(\004\022\n\n\002nq\030\016 \001(\003\022\014\n\004topk"
  "\030\017 \001(\003\022\022\n\nmetricType\030\020 \001(\t\022\025\n\rignoreGrow"
  "ing\030\021 \001(\010\022\020\n\010username\030\022 \001(\t\"\232\003\n\rSearchRe"
  "sults\022*\n\004base\030\001 \001(\0132\034.milvus.proto.commo"
  "n.MsgBase\022+\n\006status\030\002 \001(\0132\033.milvus.proto"
  ".common.Status\022\r\n\005reqID\030\003 \001(\003\022\023\n\013metric_"
  "type\030\004 \001(\t\022\023\n\013num_queries\030\005 \001(\003\022\r\n\005top_k"
  "\030\006 \001(\003\022\"\n\032sealed_segmentIDs_searched\030\007 \003"
  "(\003\022\033\n\023channelIDs_searched\030\010 \003(\t\022 \n\030globa"
  "l_sealed_segmentIDs\030\t \003(\003\022\023\n\013sliced_blob"
  "\030\n \001(\014\022\030\n\020sliced_num_count\030\013 \001(\003\022\025\n\rslic"
  "ed_offset\030\014 \001(\003\022\?\n\017costAggregation\030\r \001(\013"
  "2&.milvus.proto.internal.CostAggregation"
  "\"M\n\017CostAggregation\022\024\n\014responseTime\030\001 \001("
  "\003\022\023\n\013serviceTime\030\002 \001(\003\022\017\n\007totalNQ\030\003 \001(\003\""
  "\203\003\n\017RetrieveRequest\022*\n\004base\030\001 \001(\0132\034.milv"
  "us.proto.common.MsgBase\022\r\n\005reqID\030\002 \001(\003\022\014"
  "\n\004dbID\030\003 \001(\003\022\024\n\014collectionID\030\004 \001(\003\022\024\n\014pa"
  "rtitionIDs\030\005 \003(\003\022\034\n\024serialized_expr_plan"
  "\030\006 \001(\014\022\030\n\020output_fields_id\030\007 \003(\003\022\030\n\020trav"
  "el_timestamp\030\010 \001(\004\022\033\n\023guarantee_timestam"
  "p\030\t \001(\004\022\031\n\021timeout_timestamp\030\n \001(\004\022\r\n\005li"
  "mit\030\013 \001(\003\022\025\n\rignoreGrowing\030\014 \001(\010\022\020\n\010is_c"
  "ount\030\r \001(\010\022\'\n\037iteration_extension_reduce"
  "_rate\030\016 \001(\003\022\020\n\010username\030\017 \001(\t\"\373\002\n\017Retrie"
  "veResults\022*\n\004base\030\001 \001(\0132\034.milvus.proto.c"
  "ommon.MsgBase\022+\n\006status\030\002 \001(\0132\033.milvus.p"
  "roto.common.Status\022\r\n\005reqID\030\003 \001(\003\022%\n\003ids"
  "\030\004 \001(\0132\030.milvus.proto.schema.IDs\0223\n\013fiel"
  "ds_data\030\005 \003(\0132\036.milvus.proto.schema.Fiel"
  "dData\022#\n\033sealed_segmentIDs_retrieved\030\006 \003"
  "(\003\022\034\n\024channelIDs_retrieved\030\007 \003(\t\022 \n\030glob"
  "al_sealed_segmentIDs\030\010 \003(\003\022\?\n\017costAggreg"
  "ation\030\r \001(\0132&.milvus.proto.internal.Cost"
  "Aggregation\"\274\001\n\tLoadIndex\022*\n\004base\030\001 \001(\0132"
  "\034.milvus.proto.common.MsgBase\022\021\n\tsegment"
  "ID\030\002 \001(\003\022\021\n\tfieldName\030\003 \001(\t\022\017\n\007fieldID\030\004"
  " \001(\003\022\023\n\013index_paths\030\005 \003(\t\0227\n\014index_param"
  "s\030\006 \003(\0132!.milvus.proto.common.KeyValuePa"
  "ir\"c\n\nIndexStats\0227\n\014index_params\030\001 \003(\0132!"
  ".milvus.proto.common.KeyValuePair\022\034\n\024num"
  "_related_segments\030\002 \001(\003\"k\n\nFieldStats\022\024\n"
  "\014collectionID\030\001 \001(\003\022\017\n\007fieldID\030\002 \001(\003\0226\n\013"
  "index_stats\030\003 \003(\0132!.milvus.proto.interna"
  "l.IndexStats\"c\n\014SegmentStats\022\021\n\tsegmentI"
  "D\030\001 \001(\003\022\023\n\013memory_size\030\002 \001(\003\022\020\n\010num_rows"
  "\030\003 \001(\003\022\031\n\021recently_modified\030\004 \001(\010\"\205\001\n\022Ch"
  "annelTimeTickMsg\022*\n\004base\030\001 \001(\0132\034.milvus."
  "proto.common.MsgBase\022\024\n\014channelNames\030\002 \003"
  "(\t\022\022\n\ntimestamps\030\003 \003(\004\022\031\n\021default_timest"
  "amp\030\004 \001(\004\"y\n\016CredentialInfo\022\020\n\010username\030"
  "\001 \001(\t\022\032\n\022encrypted_password\030\002 \001(\t\022\016\n\006ten"
  "ant\030\003 \001(\t\022\020\n\010is_super\030\004 \001(\010\022\027\n\017sha256_pa"
  "ssword\030\005 \001(\t\"\?\n\021ListPolicyRequest\022*\n\004bas"
  "e\030\001 \001(\0132\034.milvus.proto.common.MsgBase\"k\n"
  "\022ListPolicyResponse\022+\n\006status\030\001 \001(\0132\033.mi"
  "lvus.proto.common.Status\022\024\n\014policy_infos"
  "\030\002 \003(\t\022\022\n\nuser_roles\030\003 \003(\t\"X\n\031ShowConfig"
  "urationsRequest\022*\n\004base\030\001 \001(\0132\034.milvus.p"
  "roto.common.MsgBase\022\017\n\007pattern\030\002 \001(\t\"\203\001\n"
  "\032ShowConfigurationsResponse\022+\n\006status\030\001 "
  "\001(\0132\033.milvus.proto.common.Status\0228\n\rconf"
  "iguations\030\002 \003(\0132!.milvus.proto.common.Ke"
  "yValuePair\">\n\004Rate\022+\n\002rt\030\001 \001(\0162\037.milvus."
  "proto.internal.RateType\022\t\n\001r\030\002 \001(\001*\271\001\n\010R"
  "ateType\022\021\n\rDDLCollection\020\000\022\020\n\014DDLPartiti"
  "on\020\001\022\014\n\010DDLIndex\020\002\022\014\n\010DDLFlush\020\003\022\021\n\rDDLC"
  "ompaction\020\004\022\r\n\tDMLInsert\020\005\022\r\n\tDMLDelete\020"
  "\006\022\017\n\013DMLBulkLoad\020\007\022\r\n\tDQLSearch\020\010\022\014\n\010DQL"
  "Query\020\t\022\r\n\tDMLUpsert\020\nB7Z5github.com/mil"
  "vus-io/milvus/internal/proto/internalpbb"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_internal_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_schema_2eproto,
};
static ::_pbi::once_flag descriptor_table_internal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_internal_2eproto = {
    false, false, 4527, descriptor_table_protodef_internal_2eproto,
    "internal.proto",
    &descriptor_table_internal_2eproto_once, descriptor_table_internal_2eproto_deps, 2, 28,
    schemas, file_default_instances, TableStruct_internal_2eproto::offsets,
    file_level_metadata_internal_2eproto, file_level_enum_descriptors_internal_2eproto,
    file_level_service_descriptors_internal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_internal_2eproto_getter() {
  return &descriptor_table_internal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_internal_2eproto(&descriptor_table_internal_2eproto);
namespace milvus {
namespace proto {
namespace internal {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_internal_2eproto);
  return file_level_enum_descriptors_internal_2eproto[0];
}
bool RateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GetTimeTickChannelRequest::_Internal {
 public:
};

GetTimeTickChannelRequest::GetTimeTickChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.GetTimeTickChannelRequest)
}
GetTimeTickChannelRequest::GetTimeTickChannelRequest(const GetTimeTickChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetTimeTickChannelRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.GetTimeTickChannelRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTimeTickChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTimeTickChannelRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetTimeTickChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[0]);
}

// ===================================================================

class GetStatisticsChannelRequest::_Internal {
 public:
};

GetStatisticsChannelRequest::GetStatisticsChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.GetStatisticsChannelRequest)
}
GetStatisticsChannelRequest::GetStatisticsChannelRequest(const GetStatisticsChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetStatisticsChannelRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.GetStatisticsChannelRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatisticsChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatisticsChannelRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetStatisticsChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[1]);
}

// ===================================================================

class GetDdChannelRequest::_Internal {
 public:
};

GetDdChannelRequest::GetDdChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.GetDdChannelRequest)
}
GetDdChannelRequest::GetDdChannelRequest(const GetDdChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetDdChannelRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.GetDdChannelRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDdChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDdChannelRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetDdChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[2]);
}

// ===================================================================

class NodeInfo::_Internal {
 public:
  static const ::milvus::proto::common::Address& address(const NodeInfo* msg);
};

const ::milvus::proto::common::Address&
NodeInfo::_Internal::address(const NodeInfo* msg) {
  return *msg->_impl_.address_;
}
void NodeInfo::clear_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
}
NodeInfo::NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_){}
    , decltype(_impl_.address_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    _this->_impl_.role_.Set(from._internal_role(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_address()) {
    _this->_impl_.address_ = new ::milvus::proto::common::Address(*from._impl_.address_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.NodeInfo)
}

inline void NodeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.role_){}
    , decltype(_impl_.address_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.NodeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.role_.Destroy();
  if (this != internal_default_instance()) delete _impl_.address_;
}

void NodeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.NodeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.role_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Address address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.NodeInfo.role"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.NodeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Address address = 1;
  if (this->_internal_has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  // string role = 2;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.NodeInfo.role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.NodeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role = 2;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  // .milvus.proto.common.Address address = 1;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.address_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfo::GetClassData() const { return &_class_data_; }


void NodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeInfo*>(&to_msg);
  auto& from = static_cast<const NodeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.NodeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role().empty()) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_has_address()) {
    _this->_internal_mutable_address()->::milvus::proto::common::Address::MergeFrom(
        from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_, lhs_arena,
      &other->_impl_.role_, rhs_arena
  );
  swap(_impl_.address_, other->_impl_.address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[3]);
}

// ===================================================================

class InitParams::_Internal {
 public:
};

void InitParams::clear_start_params() {
  _impl_.start_params_.Clear();
}
InitParams::InitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.InitParams)
}
InitParams::InitParams(const InitParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InitParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_params_){from._impl_.start_params_}
    , decltype(_impl_.nodeid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.nodeid_ = from._impl_.nodeid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.InitParams)
}

inline void InitParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_params_){arena}
    , decltype(_impl_.nodeid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InitParams::~InitParams() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.InitParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.start_params_.~RepeatedPtrField();
}

void InitParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitParams::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.InitParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.start_params_.Clear();
  _impl_.nodeid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 nodeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair start_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_start_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.InitParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 nodeID = 1;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_nodeid(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair start_params = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_start_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_start_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.InitParams)
  return target;
}

size_t InitParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.InitParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair start_params = 2;
  total_size += 1UL * this->_internal_start_params_size();
  for (const auto& msg : this->_impl_.start_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 nodeID = 1;
  if (this->_internal_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nodeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InitParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitParams::GetClassData() const { return &_class_data_; }


void InitParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InitParams*>(&to_msg);
  auto& from = static_cast<const InitParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.InitParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.start_params_.MergeFrom(from._impl_.start_params_);
  if (from._internal_nodeid() != 0) {
    _this->_internal_set_nodeid(from._internal_nodeid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitParams::CopyFrom(const InitParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.InitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitParams::IsInitialized() const {
  return true;
}

void InitParams::InternalSwap(InitParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.start_params_.InternalSwap(&other->_impl_.start_params_);
  swap(_impl_.nodeid_, other->_impl_.nodeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[4]);
}

// ===================================================================

class StringList::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const StringList* msg);
};

const ::milvus::proto::common::Status&
StringList::_Internal::status(const StringList* msg) {
  return *msg->_impl_.status_;
}
void StringList::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
StringList::StringList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.StringList)
}
StringList::StringList(const StringList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.StringList)
}

inline void StringList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StringList::~StringList() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.StringList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void StringList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringList::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.StringList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.StringList.values"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.StringList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.StringList.values");
    target = stream->WriteString(1, s, target);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.StringList)
  return target;
}

size_t StringList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.StringList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.values_.size());
  for (int i = 0, n = _impl_.values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.values_.Get(i));
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringList::GetClassData() const { return &_class_data_; }


void StringList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringList*>(&to_msg);
  auto& from = static_cast<const StringList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.StringList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringList::CopyFrom(const StringList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.StringList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringList::IsInitialized() const {
  return true;
}

void StringList::InternalSwap(StringList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[5]);
}

// ===================================================================

class GetStatisticsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetStatisticsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetStatisticsRequest::_Internal::base(const GetStatisticsRequest* msg) {
  return *msg->_impl_.base_;
}
void GetStatisticsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetStatisticsRequest::GetStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.GetStatisticsRequest)
}
GetStatisticsRequest::GetStatisticsRequest(const GetStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStatisticsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partitionids_){from._impl_.partitionids_}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.travel_timestamp_){}
    , decltype(_impl_.guarantee_timestamp_){}
    , decltype(_impl_.timeout_timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.dbid_, &from._impl_.dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeout_timestamp_) -
    reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.timeout_timestamp_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.GetStatisticsRequest)
}

inline void GetStatisticsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partitionids_){arena}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.travel_timestamp_){uint64_t{0u}}
    , decltype(_impl_.guarantee_timestamp_){uint64_t{0u}}
    , decltype(_impl_.timeout_timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetStatisticsRequest::~GetStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.GetStatisticsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partitionids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetStatisticsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.GetStatisticsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partitionids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_timestamp_) -
      reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.timeout_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatisticsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 partitionIDs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_partitionids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_partitionids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 travel_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.travel_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 guarantee_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.guarantee_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timeout_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.timeout_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStatisticsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.GetStatisticsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 dbID = 2;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_dbid(), target);
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_collectionid(), target);
  }

  // repeated int64 partitionIDs = 4;
  {
    int byte_size = _impl_._partitionids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_partitionids(), byte_size, target);
    }
  }

  // uint64 travel_timestamp = 5;
  if (this->_internal_travel_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_travel_timestamp(), target);
  }

  // uint64 guarantee_timestamp = 6;
  if (this->_internal_guarantee_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_guarantee_timestamp(), target);
  }

  // uint64 timeout_timestamp = 7;
  if (this->_internal_timeout_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_timeout_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.GetStatisticsRequest)
  return target;
}

size_t GetStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.GetStatisticsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 partitionIDs = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.partitionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._partitionids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 dbID = 2;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // uint64 travel_timestamp = 5;
  if (this->_internal_travel_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_travel_timestamp());
  }

  // uint64 guarantee_timestamp = 6;
  if (this->_internal_guarantee_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guarantee_timestamp());
  }

  // uint64 timeout_timestamp = 7;
  if (this->_internal_timeout_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timeout_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStatisticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatisticsRequest::GetClassData() const { return &_class_data_; }


void GetStatisticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStatisticsRequest*>(&to_msg);
  auto& from = static_cast<const GetStatisticsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.GetStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partitionids_.MergeFrom(from._impl_.partitionids_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_travel_timestamp() != 0) {
    _this->_internal_set_travel_timestamp(from._internal_travel_timestamp());
  }
  if (from._internal_guarantee_timestamp() != 0) {
    _this->_internal_set_guarantee_timestamp(from._internal_guarantee_timestamp());
  }
  if (from._internal_timeout_timestamp() != 0) {
    _this->_internal_set_timeout_timestamp(from._internal_timeout_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatisticsRequest::CopyFrom(const GetStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.GetStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatisticsRequest::IsInitialized() const {
  return true;
}

void GetStatisticsRequest::InternalSwap(GetStatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partitionids_.InternalSwap(&other->_impl_.partitionids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStatisticsRequest, _impl_.timeout_timestamp_)
      + sizeof(GetStatisticsRequest::_impl_.timeout_timestamp_)
      - PROTOBUF_FIELD_OFFSET(GetStatisticsRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatisticsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[6]);
}

// ===================================================================

class GetStatisticsResponse::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetStatisticsResponse* msg);
  static const ::milvus::proto::common::Status& status(const GetStatisticsResponse* msg);
};

const ::milvus::proto::common::MsgBase&
GetStatisticsResponse::_Internal::base(const GetStatisticsResponse* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::common::Status&
GetStatisticsResponse::_Internal::status(const GetStatisticsResponse* msg) {
  return *msg->_impl_.status_;
}
void GetStatisticsResponse::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void GetStatisticsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void GetStatisticsResponse::clear_stats() {
  _impl_.stats_.Clear();
}
GetStatisticsResponse::GetStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.GetStatisticsResponse)
}
GetStatisticsResponse::GetStatisticsResponse(const GetStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStatisticsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.GetStatisticsResponse)
}

inline void GetStatisticsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetStatisticsResponse::~GetStatisticsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.GetStatisticsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetStatisticsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.GetStatisticsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatisticsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStatisticsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.GetStatisticsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair stats = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.GetStatisticsResponse)
  return target;
}

size_t GetStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.GetStatisticsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair stats = 3;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatisticsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStatisticsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatisticsResponse::GetClassData() const { return &_class_data_; }


void GetStatisticsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStatisticsResponse*>(&to_msg);
  auto& from = static_cast<const GetStatisticsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.GetStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatisticsResponse::CopyFrom(const GetStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.GetStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatisticsResponse::IsInitialized() const {
  return true;
}

void GetStatisticsResponse::InternalSwap(GetStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStatisticsResponse, _impl_.status_)
      + sizeof(GetStatisticsResponse::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(GetStatisticsResponse, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatisticsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[7]);
}

// ===================================================================

class CreateAliasRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateAliasRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateAliasRequest::_Internal::base(const CreateAliasRequest* msg) {
  return *msg->_impl_.base_;
}
void CreateAliasRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
CreateAliasRequest::CreateAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.CreateAliasRequest)
}
CreateAliasRequest::CreateAliasRequest(const CreateAliasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateAliasRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alias().empty()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.CreateAliasRequest)
}

inline void CreateAliasRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateAliasRequest::~CreateAliasRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.CreateAliasRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateAliasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.alias_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void CreateAliasRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateAliasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.CreateAliasRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAliasRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.CreateAliasRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.CreateAliasRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string alias = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.CreateAliasRequest.alias"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateAliasRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.CreateAliasRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.CreateAliasRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.CreateAliasRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string alias = 4;
  if (!this->_internal_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.CreateAliasRequest.alias");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.CreateAliasRequest)
  return target;
}

size_t CreateAliasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.CreateAliasRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string alias = 4;
  if (!this->_internal_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAliasRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateAliasRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAliasRequest::GetClassData() const { return &_class_data_; }


void CreateAliasRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateAliasRequest*>(&to_msg);
  auto& from = static_cast<const CreateAliasRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.CreateAliasRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAliasRequest::CopyFrom(const CreateAliasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.CreateAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAliasRequest::IsInitialized() const {
  return true;
}

void CreateAliasRequest::InternalSwap(CreateAliasRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alias_, lhs_arena,
      &other->_impl_.alias_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAliasRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[8]);
}

// ===================================================================

class DropAliasRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropAliasRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropAliasRequest::_Internal::base(const DropAliasRequest* msg) {
  return *msg->_impl_.base_;
}
void DropAliasRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DropAliasRequest::DropAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.DropAliasRequest)
}
DropAliasRequest::DropAliasRequest(const DropAliasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropAliasRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alias().empty()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.DropAliasRequest)
}

inline void DropAliasRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DropAliasRequest::~DropAliasRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.DropAliasRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropAliasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.alias_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DropAliasRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropAliasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.DropAliasRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropAliasRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.DropAliasRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string alias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.DropAliasRequest.alias"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropAliasRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.DropAliasRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.DropAliasRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string alias = 3;
  if (!this->_internal_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.DropAliasRequest.alias");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.DropAliasRequest)
  return target;
}

size_t DropAliasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.DropAliasRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string alias = 3;
  if (!this->_internal_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropAliasRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropAliasRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropAliasRequest::GetClassData() const { return &_class_data_; }


void DropAliasRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropAliasRequest*>(&to_msg);
  auto& from = static_cast<const DropAliasRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.DropAliasRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropAliasRequest::CopyFrom(const DropAliasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.DropAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropAliasRequest::IsInitialized() const {
  return true;
}

void DropAliasRequest::InternalSwap(DropAliasRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alias_, lhs_arena,
      &other->_impl_.alias_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropAliasRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[9]);
}

// ===================================================================

class AlterAliasRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const AlterAliasRequest* msg);
};

const ::milvus::proto::common::MsgBase&
AlterAliasRequest::_Internal::base(const AlterAliasRequest* msg) {
  return *msg->_impl_.base_;
}
void AlterAliasRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
AlterAliasRequest::AlterAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.AlterAliasRequest)
}
AlterAliasRequest::AlterAliasRequest(const AlterAliasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlterAliasRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alias().empty()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.AlterAliasRequest)
}

inline void AlterAliasRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AlterAliasRequest::~AlterAliasRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.AlterAliasRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlterAliasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.alias_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void AlterAliasRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlterAliasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.AlterAliasRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlterAliasRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.AlterAliasRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.AlterAliasRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string alias = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.AlterAliasRequest.alias"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlterAliasRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.AlterAliasRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.AlterAliasRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.AlterAliasRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string alias = 4;
  if (!this->_internal_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.AlterAliasRequest.alias");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.AlterAliasRequest)
  return target;
}

size_t AlterAliasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.AlterAliasRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string alias = 4;
  if (!this->_internal_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlterAliasRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlterAliasRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlterAliasRequest::GetClassData() const { return &_class_data_; }


void AlterAliasRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlterAliasRequest*>(&to_msg);
  auto& from = static_cast<const AlterAliasRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.AlterAliasRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlterAliasRequest::CopyFrom(const AlterAliasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.AlterAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterAliasRequest::IsInitialized() const {
  return true;
}

void AlterAliasRequest::InternalSwap(AlterAliasRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alias_, lhs_arena,
      &other->_impl_.alias_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlterAliasRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[10]);
}

// ===================================================================

class CreateIndexRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateIndexRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateIndexRequest::_Internal::base(const CreateIndexRequest* msg) {
  return *msg->_impl_.base_;
}
void CreateIndexRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void CreateIndexRequest::clear_extra_params() {
  _impl_.extra_params_.Clear();
}
CreateIndexRequest::CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.CreateIndexRequest)
}
CreateIndexRequest::CreateIndexRequest(const CreateIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateIndexRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_params_){from._impl_.extra_params_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.fieldid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_name().empty()) {
    _this->_impl_.field_name_.Set(from._internal_field_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.dbid_, &from._impl_.dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fieldid_) -
    reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.fieldid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.CreateIndexRequest)
}

inline void CreateIndexRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_params_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.fieldid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateIndexRequest::~CreateIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.CreateIndexRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extra_params_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.field_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void CreateIndexRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.CreateIndexRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extra_params_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.field_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fieldid_) -
      reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.fieldid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateIndexRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.CreateIndexRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.CreateIndexRequest.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_field_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.CreateIndexRequest.field_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fieldID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.fieldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair extra_params = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateIndexRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.CreateIndexRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.CreateIndexRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.CreateIndexRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string field_name = 4;
  if (!this->_internal_field_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.CreateIndexRequest.field_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_field_name(), target);
  }

  // int64 dbID = 5;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_dbid(), target);
  }

  // int64 collectionID = 6;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_collectionid(), target);
  }

  // int64 fieldID = 7;
  if (this->_internal_fieldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_fieldid(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair extra_params = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extra_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_extra_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.CreateIndexRequest)
  return target;
}

size_t CreateIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.CreateIndexRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair extra_params = 8;
  total_size += 1UL * this->_internal_extra_params_size();
  for (const auto& msg : this->_impl_.extra_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 2;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string field_name = 4;
  if (!this->_internal_field_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 dbID = 5;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 6;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 fieldID = 7;
  if (this->_internal_fieldid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fieldid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateIndexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateIndexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateIndexRequest::GetClassData() const { return &_class_data_; }


void CreateIndexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateIndexRequest*>(&to_msg);
  auto& from = static_cast<const CreateIndexRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.CreateIndexRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extra_params_.MergeFrom(from._impl_.extra_params_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_field_name().empty()) {
    _this->_internal_set_field_name(from._internal_field_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_fieldid() != 0) {
    _this->_internal_set_fieldid(from._internal_fieldid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateIndexRequest::CopyFrom(const CreateIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.CreateIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIndexRequest::IsInitialized() const {
  return true;
}

void CreateIndexRequest::InternalSwap(CreateIndexRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.extra_params_.InternalSwap(&other->_impl_.extra_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_name_, lhs_arena,
      &other->_impl_.field_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateIndexRequest, _impl_.fieldid_)
      + sizeof(CreateIndexRequest::_impl_.fieldid_)
      - PROTOBUF_FIELD_OFFSET(CreateIndexRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateIndexRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[11]);
}

// ===================================================================

class SearchRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SearchRequest* msg);
};

const ::milvus::proto::common::MsgBase&
SearchRequest::_Internal::base(const SearchRequest* msg) {
  return *msg->_impl_.base_;
}
void SearchRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
SearchRequest::SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partitionids_){from._impl_.partitionids_}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.output_fields_id_){from._impl_.output_fields_id_}
    , /*decltype(_impl_._output_fields_id_cached_byte_size_)*/{0}
    , decltype(_impl_.dsl_){}
    , decltype(_impl_.placeholder_group_){}
    , decltype(_impl_.serialized_expr_plan_){}
    , decltype(_impl_.metrictype_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.reqid_){}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.travel_timestamp_){}
    , decltype(_impl_.guarantee_timestamp_){}
    , decltype(_impl_.dsl_type_){}
    , decltype(_impl_.ignoregrowing_){}
    , decltype(_impl_.timeout_timestamp_){}
    , decltype(_impl_.nq_){}
    , decltype(_impl_.topk_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dsl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dsl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dsl().empty()) {
    _this->_impl_.dsl_.Set(from._internal_dsl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.placeholder_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.placeholder_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_placeholder_group().empty()) {
    _this->_impl_.placeholder_group_.Set(from._internal_placeholder_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serialized_expr_plan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_expr_plan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serialized_expr_plan().empty()) {
    _this->_impl_.serialized_expr_plan_.Set(from._internal_serialized_expr_plan(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metrictype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metrictype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metrictype().empty()) {
    _this->_impl_.metrictype_.Set(from._internal_metrictype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.reqid_, &from._impl_.reqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.topk_) -
    reinterpret_cast<char*>(&_impl_.reqid_)) + sizeof(_impl_.topk_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.SearchRequest)
}

inline void SearchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partitionids_){arena}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.output_fields_id_){arena}
    , /*decltype(_impl_._output_fields_id_cached_byte_size_)*/{0}
    , decltype(_impl_.dsl_){}
    , decltype(_impl_.placeholder_group_){}
    , decltype(_impl_.serialized_expr_plan_){}
    , decltype(_impl_.metrictype_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.reqid_){int64_t{0}}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.travel_timestamp_){uint64_t{0u}}
    , decltype(_impl_.guarantee_timestamp_){uint64_t{0u}}
    , decltype(_impl_.dsl_type_){0}
    , decltype(_impl_.ignoregrowing_){false}
    , decltype(_impl_.timeout_timestamp_){uint64_t{0u}}
    , decltype(_impl_.nq_){int64_t{0}}
    , decltype(_impl_.topk_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dsl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dsl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.placeholder_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.placeholder_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serialized_expr_plan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_expr_plan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metrictype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metrictype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.SearchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partitionids_.~RepeatedField();
  _impl_.output_fields_id_.~RepeatedField();
  _impl_.dsl_.Destroy();
  _impl_.placeholder_group_.Destroy();
  _impl_.serialized_expr_plan_.Destroy();
  _impl_.metrictype_.Destroy();
  _impl_.username_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void SearchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.SearchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partitionids_.Clear();
  _impl_.output_fields_id_.Clear();
  _impl_.dsl_.ClearToEmpty();
  _impl_.placeholder_group_.ClearToEmpty();
  _impl_.serialized_expr_plan_.ClearToEmpty();
  _impl_.metrictype_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.topk_) -
      reinterpret_cast<char*>(&_impl_.reqid_)) + sizeof(_impl_.topk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 reqID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 partitionIDs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_partitionids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_partitionids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dsl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_dsl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.SearchRequest.dsl"));
        } else
          goto handle_unusual;
        continue;
      // bytes placeholder_group = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_placeholder_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.DslType dsl_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dsl_type(static_cast<::milvus::proto::common::DslType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes serialized_expr_plan = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_serialized_expr_plan();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 output_fields_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output_fields_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_output_fields_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 travel_timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.travel_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 guarantee_timestamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.guarantee_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timeout_timestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.timeout_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 nq = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.nq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 topk = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string metricType = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_metrictype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.SearchRequest.metricType"));
        } else
          goto handle_unusual;
        continue;
      // bool ignoreGrowing = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.ignoregrowing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.SearchRequest.username"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.SearchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 reqID = 2;
  if (this->_internal_reqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_reqid(), target);
  }

  // int64 dbID = 3;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_dbid(), target);
  }

  // int64 collectionID = 4;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_collectionid(), target);
  }

  // repeated int64 partitionIDs = 5;
  {
    int byte_size = _impl_._partitionids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_partitionids(), byte_size, target);
    }
  }

  // string dsl = 6;
  if (!this->_internal_dsl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dsl().data(), static_cast<int>(this->_internal_dsl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.SearchRequest.dsl");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dsl(), target);
  }

  // bytes placeholder_group = 7;
  if (!this->_internal_placeholder_group().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_placeholder_group(), target);
  }

  // .milvus.proto.common.DslType dsl_type = 8;
  if (this->_internal_dsl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_dsl_type(), target);
  }

  // bytes serialized_expr_plan = 9;
  if (!this->_internal_serialized_expr_plan().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_serialized_expr_plan(), target);
  }

  // repeated int64 output_fields_id = 10;
  {
    int byte_size = _impl_._output_fields_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          10, _internal_output_fields_id(), byte_size, target);
    }
  }

  // uint64 travel_timestamp = 11;
  if (this->_internal_travel_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_travel_timestamp(), target);
  }

  // uint64 guarantee_timestamp = 12;
  if (this->_internal_guarantee_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_guarantee_timestamp(), target);
  }

  // uint64 timeout_timestamp = 13;
  if (this->_internal_timeout_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_timeout_timestamp(), target);
  }

  // int64 nq = 14;
  if (this->_internal_nq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_nq(), target);
  }

  // int64 topk = 15;
  if (this->_internal_topk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_topk(), target);
  }

  // string metricType = 16;
  if (!this->_internal_metrictype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metrictype().data(), static_cast<int>(this->_internal_metrictype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.SearchRequest.metricType");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_metrictype(), target);
  }

  // bool ignoreGrowing = 17;
  if (this->_internal_ignoregrowing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_ignoregrowing(), target);
  }

  // string username = 18;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.SearchRequest.username");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.SearchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 partitionIDs = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.partitionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._partitionids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 output_fields_id = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.output_fields_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._output_fields_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string dsl = 6;
  if (!this->_internal_dsl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dsl());
  }

  // bytes placeholder_group = 7;
  if (!this->_internal_placeholder_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_placeholder_group());
  }

  // bytes serialized_expr_plan = 9;
  if (!this->_internal_serialized_expr_plan().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serialized_expr_plan());
  }

  // string metricType = 16;
  if (!this->_internal_metrictype().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metrictype());
  }

  // string username = 18;
  if (!this->_internal_username().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 reqID = 2;
  if (this->_internal_reqid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reqid());
  }

  // int64 dbID = 3;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 4;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // uint64 travel_timestamp = 11;
  if (this->_internal_travel_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_travel_timestamp());
  }

  // uint64 guarantee_timestamp = 12;
  if (this->_internal_guarantee_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guarantee_timestamp());
  }

  // .milvus.proto.common.DslType dsl_type = 8;
  if (this->_internal_dsl_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dsl_type());
  }

  // bool ignoreGrowing = 17;
  if (this->_internal_ignoregrowing() != 0) {
    total_size += 2 + 1;
  }

  // uint64 timeout_timestamp = 13;
  if (this->_internal_timeout_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timeout_timestamp());
  }

  // int64 nq = 14;
  if (this->_internal_nq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nq());
  }

  // int64 topk = 15;
  if (this->_internal_topk() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_topk());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchRequest::GetClassData() const { return &_class_data_; }


void SearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchRequest*>(&to_msg);
  auto& from = static_cast<const SearchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.SearchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partitionids_.MergeFrom(from._impl_.partitionids_);
  _this->_impl_.output_fields_id_.MergeFrom(from._impl_.output_fields_id_);
  if (!from._internal_dsl().empty()) {
    _this->_internal_set_dsl(from._internal_dsl());
  }
  if (!from._internal_placeholder_group().empty()) {
    _this->_internal_set_placeholder_group(from._internal_placeholder_group());
  }
  if (!from._internal_serialized_expr_plan().empty()) {
    _this->_internal_set_serialized_expr_plan(from._internal_serialized_expr_plan());
  }
  if (!from._internal_metrictype().empty()) {
    _this->_internal_set_metrictype(from._internal_metrictype());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_reqid() != 0) {
    _this->_internal_set_reqid(from._internal_reqid());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_travel_timestamp() != 0) {
    _this->_internal_set_travel_timestamp(from._internal_travel_timestamp());
  }
  if (from._internal_guarantee_timestamp() != 0) {
    _this->_internal_set_guarantee_timestamp(from._internal_guarantee_timestamp());
  }
  if (from._internal_dsl_type() != 0) {
    _this->_internal_set_dsl_type(from._internal_dsl_type());
  }
  if (from._internal_ignoregrowing() != 0) {
    _this->_internal_set_ignoregrowing(from._internal_ignoregrowing());
  }
  if (from._internal_timeout_timestamp() != 0) {
    _this->_internal_set_timeout_timestamp(from._internal_timeout_timestamp());
  }
  if (from._internal_nq() != 0) {
    _this->_internal_set_nq(from._internal_nq());
  }
  if (from._internal_topk() != 0) {
    _this->_internal_set_topk(from._internal_topk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::InternalSwap(SearchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partitionids_.InternalSwap(&other->_impl_.partitionids_);
  _impl_.output_fields_id_.InternalSwap(&other->_impl_.output_fields_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dsl_, lhs_arena,
      &other->_impl_.dsl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.placeholder_group_, lhs_arena,
      &other->_impl_.placeholder_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serialized_expr_plan_, lhs_arena,
      &other->_impl_.serialized_expr_plan_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metrictype_, lhs_arena,
      &other->_impl_.metrictype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchRequest, _impl_.topk_)
      + sizeof(SearchRequest::_impl_.topk_)
      - PROTOBUF_FIELD_OFFSET(SearchRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[12]);
}

// ===================================================================

class SearchResults::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SearchResults* msg);
  static const ::milvus::proto::common::Status& status(const SearchResults* msg);
  static const ::milvus::proto::internal::CostAggregation& costaggregation(const SearchResults* msg);
};

const ::milvus::proto::common::MsgBase&
SearchResults::_Internal::base(const SearchResults* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::common::Status&
SearchResults::_Internal::status(const SearchResults* msg) {
  return *msg->_impl_.status_;
}
const ::milvus::proto::internal::CostAggregation&
SearchResults::_Internal::costaggregation(const SearchResults* msg) {
  return *msg->_impl_.costaggregation_;
}
void SearchResults::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void SearchResults::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
SearchResults::SearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.SearchResults)
}
SearchResults::SearchResults(const SearchResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sealed_segmentids_searched_){from._impl_.sealed_segmentids_searched_}
    , /*decltype(_impl_._sealed_segmentids_searched_cached_byte_size_)*/{0}
    , decltype(_impl_.channelids_searched_){from._impl_.channelids_searched_}
    , decltype(_impl_.global_sealed_segmentids_){from._impl_.global_sealed_segmentids_}
    , /*decltype(_impl_._global_sealed_segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.metric_type_){}
    , decltype(_impl_.sliced_blob_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.costaggregation_){nullptr}
    , decltype(_impl_.reqid_){}
    , decltype(_impl_.num_queries_){}
    , decltype(_impl_.top_k_){}
    , decltype(_impl_.sliced_num_count_){}
    , decltype(_impl_.sliced_offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metric_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metric_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metric_type().empty()) {
    _this->_impl_.metric_type_.Set(from._internal_metric_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sliced_blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sliced_blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sliced_blob().empty()) {
    _this->_impl_.sliced_blob_.Set(from._internal_sliced_blob(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_costaggregation()) {
    _this->_impl_.costaggregation_ = new ::milvus::proto::internal::CostAggregation(*from._impl_.costaggregation_);
  }
  ::memcpy(&_impl_.reqid_, &from._impl_.reqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sliced_offset_) -
    reinterpret_cast<char*>(&_impl_.reqid_)) + sizeof(_impl_.sliced_offset_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.SearchResults)
}

inline void SearchResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sealed_segmentids_searched_){arena}
    , /*decltype(_impl_._sealed_segmentids_searched_cached_byte_size_)*/{0}
    , decltype(_impl_.channelids_searched_){arena}
    , decltype(_impl_.global_sealed_segmentids_){arena}
    , /*decltype(_impl_._global_sealed_segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.metric_type_){}
    , decltype(_impl_.sliced_blob_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.costaggregation_){nullptr}
    , decltype(_impl_.reqid_){int64_t{0}}
    , decltype(_impl_.num_queries_){int64_t{0}}
    , decltype(_impl_.top_k_){int64_t{0}}
    , decltype(_impl_.sliced_num_count_){int64_t{0}}
    , decltype(_impl_.sliced_offset_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.metric_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metric_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sliced_blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sliced_blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchResults::~SearchResults() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.SearchResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sealed_segmentids_searched_.~RepeatedField();
  _impl_.channelids_searched_.~RepeatedPtrField();
  _impl_.global_sealed_segmentids_.~RepeatedField();
  _impl_.metric_type_.Destroy();
  _impl_.sliced_blob_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.costaggregation_;
}

void SearchResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.SearchResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sealed_segmentids_searched_.Clear();
  _impl_.channelids_searched_.Clear();
  _impl_.global_sealed_segmentids_.Clear();
  _impl_.metric_type_.ClearToEmpty();
  _impl_.sliced_blob_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.costaggregation_ != nullptr) {
    delete _impl_.costaggregation_;
  }
  _impl_.costaggregation_ = nullptr;
  ::memset(&_impl_.reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sliced_offset_) -
      reinterpret_cast<char*>(&_impl_.reqid_)) + sizeof(_impl_.sliced_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 reqID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string metric_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_metric_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.SearchResults.metric_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 num_queries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.num_queries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 top_k = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 sealed_segmentIDs_searched = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sealed_segmentids_searched(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_sealed_segmentids_searched(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string channelIDs_searched = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_channelids_searched();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.SearchResults.channelIDs_searched"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 global_sealed_segmentIDs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_global_sealed_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_global_sealed_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sliced_blob = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_sliced_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sliced_num_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.sliced_num_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sliced_offset = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.sliced_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.internal.CostAggregation costAggregation = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_costaggregation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.SearchResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int64 reqID = 3;
  if (this->_internal_reqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_reqid(), target);
  }

  // string metric_type = 4;
  if (!this->_internal_metric_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metric_type().data(), static_cast<int>(this->_internal_metric_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.SearchResults.metric_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_metric_type(), target);
  }

  // int64 num_queries = 5;
  if (this->_internal_num_queries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_queries(), target);
  }

  // int64 top_k = 6;
  if (this->_internal_top_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_top_k(), target);
  }

  // repeated int64 sealed_segmentIDs_searched = 7;
  {
    int byte_size = _impl_._sealed_segmentids_searched_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_sealed_segmentids_searched(), byte_size, target);
    }
  }

  // repeated string channelIDs_searched = 8;
  for (int i = 0, n = this->_internal_channelids_searched_size(); i < n; i++) {
    const auto& s = this->_internal_channelids_searched(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.SearchResults.channelIDs_searched");
    target = stream->WriteString(8, s, target);
  }

  // repeated int64 global_sealed_segmentIDs = 9;
  {
    int byte_size = _impl_._global_sealed_segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          9, _internal_global_sealed_segmentids(), byte_size, target);
    }
  }

  // bytes sliced_blob = 10;
  if (!this->_internal_sliced_blob().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_sliced_blob(), target);
  }

  // int64 sliced_num_count = 11;
  if (this->_internal_sliced_num_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_sliced_num_count(), target);
  }

  // int64 sliced_offset = 12;
  if (this->_internal_sliced_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_sliced_offset(), target);
  }

  // .milvus.proto.internal.CostAggregation costAggregation = 13;
  if (this->_internal_has_costaggregation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::costaggregation(this),
        _Internal::costaggregation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.SearchResults)
  return target;
}

size_t SearchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.SearchResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 sealed_segmentIDs_searched = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.sealed_segmentids_searched_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sealed_segmentids_searched_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string channelIDs_searched = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.channelids_searched_.size());
  for (int i = 0, n = _impl_.channelids_searched_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.channelids_searched_.Get(i));
  }

  // repeated int64 global_sealed_segmentIDs = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.global_sealed_segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._global_sealed_segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string metric_type = 4;
  if (!this->_internal_metric_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metric_type());
  }

  // bytes sliced_blob = 10;
  if (!this->_internal_sliced_blob().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sliced_blob());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .milvus.proto.internal.CostAggregation costAggregation = 13;
  if (this->_internal_has_costaggregation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.costaggregation_);
  }

  // int64 reqID = 3;
  if (this->_internal_reqid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reqid());
  }

  // int64 num_queries = 5;
  if (this->_internal_num_queries() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_queries());
  }

  // int64 top_k = 6;
  if (this->_internal_top_k() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_top_k());
  }

  // int64 sliced_num_count = 11;
  if (this->_internal_sliced_num_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sliced_num_count());
  }

  // int64 sliced_offset = 12;
  if (this->_internal_sliced_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sliced_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchResults::GetClassData() const { return &_class_data_; }


void SearchResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchResults*>(&to_msg);
  auto& from = static_cast<const SearchResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.SearchResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sealed_segmentids_searched_.MergeFrom(from._impl_.sealed_segmentids_searched_);
  _this->_impl_.channelids_searched_.MergeFrom(from._impl_.channelids_searched_);
  _this->_impl_.global_sealed_segmentids_.MergeFrom(from._impl_.global_sealed_segmentids_);
  if (!from._internal_metric_type().empty()) {
    _this->_internal_set_metric_type(from._internal_metric_type());
  }
  if (!from._internal_sliced_blob().empty()) {
    _this->_internal_set_sliced_blob(from._internal_sliced_blob());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_costaggregation()) {
    _this->_internal_mutable_costaggregation()->::milvus::proto::internal::CostAggregation::MergeFrom(
        from._internal_costaggregation());
  }
  if (from._internal_reqid() != 0) {
    _this->_internal_set_reqid(from._internal_reqid());
  }
  if (from._internal_num_queries() != 0) {
    _this->_internal_set_num_queries(from._internal_num_queries());
  }
  if (from._internal_top_k() != 0) {
    _this->_internal_set_top_k(from._internal_top_k());
  }
  if (from._internal_sliced_num_count() != 0) {
    _this->_internal_set_sliced_num_count(from._internal_sliced_num_count());
  }
  if (from._internal_sliced_offset() != 0) {
    _this->_internal_set_sliced_offset(from._internal_sliced_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchResults::CopyFrom(const SearchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.SearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResults::IsInitialized() const {
  return true;
}

void SearchResults::InternalSwap(SearchResults* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sealed_segmentids_searched_.InternalSwap(&other->_impl_.sealed_segmentids_searched_);
  _impl_.channelids_searched_.InternalSwap(&other->_impl_.channelids_searched_);
  _impl_.global_sealed_segmentids_.InternalSwap(&other->_impl_.global_sealed_segmentids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metric_type_, lhs_arena,
      &other->_impl_.metric_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sliced_blob_, lhs_arena,
      &other->_impl_.sliced_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchResults, _impl_.sliced_offset_)
      + sizeof(SearchResults::_impl_.sliced_offset_)
      - PROTOBUF_FIELD_OFFSET(SearchResults, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[13]);
}

// ===================================================================

class CostAggregation::_Internal {
 public:
};

CostAggregation::CostAggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.CostAggregation)
}
CostAggregation::CostAggregation(const CostAggregation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CostAggregation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responsetime_){}
    , decltype(_impl_.servicetime_){}
    , decltype(_impl_.totalnq_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.responsetime_, &from._impl_.responsetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.totalnq_) -
    reinterpret_cast<char*>(&_impl_.responsetime_)) + sizeof(_impl_.totalnq_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.CostAggregation)
}

inline void CostAggregation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.responsetime_){int64_t{0}}
    , decltype(_impl_.servicetime_){int64_t{0}}
    , decltype(_impl_.totalnq_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CostAggregation::~CostAggregation() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.CostAggregation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CostAggregation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CostAggregation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CostAggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.CostAggregation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.responsetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.totalnq_) -
      reinterpret_cast<char*>(&_impl_.responsetime_)) + sizeof(_impl_.totalnq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostAggregation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 responseTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.responsetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 serviceTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.servicetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 totalNQ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.totalnq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CostAggregation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.CostAggregation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 responseTime = 1;
  if (this->_internal_responsetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_responsetime(), target);
  }

  // int64 serviceTime = 2;
  if (this->_internal_servicetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_servicetime(), target);
  }

  // int64 totalNQ = 3;
  if (this->_internal_totalnq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_totalnq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.CostAggregation)
  return target;
}

size_t CostAggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.CostAggregation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 responseTime = 1;
  if (this->_internal_responsetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_responsetime());
  }

  // int64 serviceTime = 2;
  if (this->_internal_servicetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_servicetime());
  }

  // int64 totalNQ = 3;
  if (this->_internal_totalnq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalnq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CostAggregation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CostAggregation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CostAggregation::GetClassData() const { return &_class_data_; }


void CostAggregation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CostAggregation*>(&to_msg);
  auto& from = static_cast<const CostAggregation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.CostAggregation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_responsetime() != 0) {
    _this->_internal_set_responsetime(from._internal_responsetime());
  }
  if (from._internal_servicetime() != 0) {
    _this->_internal_set_servicetime(from._internal_servicetime());
  }
  if (from._internal_totalnq() != 0) {
    _this->_internal_set_totalnq(from._internal_totalnq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CostAggregation::CopyFrom(const CostAggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.CostAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostAggregation::IsInitialized() const {
  return true;
}

void CostAggregation::InternalSwap(CostAggregation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CostAggregation, _impl_.totalnq_)
      + sizeof(CostAggregation::_impl_.totalnq_)
      - PROTOBUF_FIELD_OFFSET(CostAggregation, _impl_.responsetime_)>(
          reinterpret_cast<char*>(&_impl_.responsetime_),
          reinterpret_cast<char*>(&other->_impl_.responsetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CostAggregation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[14]);
}

// ===================================================================

class RetrieveRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const RetrieveRequest* msg);
};

const ::milvus::proto::common::MsgBase&
RetrieveRequest::_Internal::base(const RetrieveRequest* msg) {
  return *msg->_impl_.base_;
}
void RetrieveRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
RetrieveRequest::RetrieveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.RetrieveRequest)
}
RetrieveRequest::RetrieveRequest(const RetrieveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RetrieveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partitionids_){from._impl_.partitionids_}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.output_fields_id_){from._impl_.output_fields_id_}
    , /*decltype(_impl_._output_fields_id_cached_byte_size_)*/{0}
    , decltype(_impl_.serialized_expr_plan_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.reqid_){}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.travel_timestamp_){}
    , decltype(_impl_.guarantee_timestamp_){}
    , decltype(_impl_.timeout_timestamp_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.iteration_extension_reduce_rate_){}
    , decltype(_impl_.ignoregrowing_){}
    , decltype(_impl_.is_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serialized_expr_plan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_expr_plan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serialized_expr_plan().empty()) {
    _this->_impl_.serialized_expr_plan_.Set(from._internal_serialized_expr_plan(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.reqid_, &from._impl_.reqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_count_) -
    reinterpret_cast<char*>(&_impl_.reqid_)) + sizeof(_impl_.is_count_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.RetrieveRequest)
}

inline void RetrieveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partitionids_){arena}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.output_fields_id_){arena}
    , /*decltype(_impl_._output_fields_id_cached_byte_size_)*/{0}
    , decltype(_impl_.serialized_expr_plan_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.reqid_){int64_t{0}}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.travel_timestamp_){uint64_t{0u}}
    , decltype(_impl_.guarantee_timestamp_){uint64_t{0u}}
    , decltype(_impl_.timeout_timestamp_){uint64_t{0u}}
    , decltype(_impl_.limit_){int64_t{0}}
    , decltype(_impl_.iteration_extension_reduce_rate_){int64_t{0}}
    , decltype(_impl_.ignoregrowing_){false}
    , decltype(_impl_.is_count_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serialized_expr_plan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_expr_plan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RetrieveRequest::~RetrieveRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.RetrieveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RetrieveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partitionids_.~RepeatedField();
  _impl_.output_fields_id_.~RepeatedField();
  _impl_.serialized_expr_plan_.Destroy();
  _impl_.username_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void RetrieveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RetrieveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.RetrieveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partitionids_.Clear();
  _impl_.output_fields_id_.Clear();
  _impl_.serialized_expr_plan_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_count_) -
      reinterpret_cast<char*>(&_impl_.reqid_)) + sizeof(_impl_.is_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetrieveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 reqID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 partitionIDs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_partitionids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_partitionids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes serialized_expr_plan = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_serialized_expr_plan();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 output_fields_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output_fields_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_output_fields_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 travel_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.travel_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 guarantee_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.guarantee_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timeout_timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.timeout_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 limit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ignoreGrowing = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.ignoregrowing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.is_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 iteration_extension_reduce_rate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.iteration_extension_reduce_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.RetrieveRequest.username"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RetrieveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.RetrieveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 reqID = 2;
  if (this->_internal_reqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_reqid(), target);
  }

  // int64 dbID = 3;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_dbid(), target);
  }

  // int64 collectionID = 4;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_collectionid(), target);
  }

  // repeated int64 partitionIDs = 5;
  {
    int byte_size = _impl_._partitionids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_partitionids(), byte_size, target);
    }
  }

  // bytes serialized_expr_plan = 6;
  if (!this->_internal_serialized_expr_plan().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_serialized_expr_plan(), target);
  }

  // repeated int64 output_fields_id = 7;
  {
    int byte_size = _impl_._output_fields_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_output_fields_id(), byte_size, target);
    }
  }

  // uint64 travel_timestamp = 8;
  if (this->_internal_travel_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_travel_timestamp(), target);
  }

  // uint64 guarantee_timestamp = 9;
  if (this->_internal_guarantee_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_guarantee_timestamp(), target);
  }

  // uint64 timeout_timestamp = 10;
  if (this->_internal_timeout_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_timeout_timestamp(), target);
  }

  // int64 limit = 11;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_limit(), target);
  }

  // bool ignoreGrowing = 12;
  if (this->_internal_ignoregrowing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_ignoregrowing(), target);
  }

  // bool is_count = 13;
  if (this->_internal_is_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_count(), target);
  }

  // int64 iteration_extension_reduce_rate = 14;
  if (this->_internal_iteration_extension_reduce_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_iteration_extension_reduce_rate(), target);
  }

  // string username = 15;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.RetrieveRequest.username");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.RetrieveRequest)
  return target;
}

size_t RetrieveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.RetrieveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 partitionIDs = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.partitionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._partitionids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 output_fields_id = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.output_fields_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._output_fields_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes serialized_expr_plan = 6;
  if (!this->_internal_serialized_expr_plan().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serialized_expr_plan());
  }

  // string username = 15;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 reqID = 2;
  if (this->_internal_reqid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reqid());
  }

  // int64 dbID = 3;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 4;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // uint64 travel_timestamp = 8;
  if (this->_internal_travel_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_travel_timestamp());
  }

  // uint64 guarantee_timestamp = 9;
  if (this->_internal_guarantee_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guarantee_timestamp());
  }

  // uint64 timeout_timestamp = 10;
  if (this->_internal_timeout_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timeout_timestamp());
  }

  // int64 limit = 11;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_limit());
  }

  // int64 iteration_extension_reduce_rate = 14;
  if (this->_internal_iteration_extension_reduce_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_iteration_extension_reduce_rate());
  }

  // bool ignoreGrowing = 12;
  if (this->_internal_ignoregrowing() != 0) {
    total_size += 1 + 1;
  }

  // bool is_count = 13;
  if (this->_internal_is_count() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RetrieveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RetrieveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RetrieveRequest::GetClassData() const { return &_class_data_; }


void RetrieveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RetrieveRequest*>(&to_msg);
  auto& from = static_cast<const RetrieveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.RetrieveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partitionids_.MergeFrom(from._impl_.partitionids_);
  _this->_impl_.output_fields_id_.MergeFrom(from._impl_.output_fields_id_);
  if (!from._internal_serialized_expr_plan().empty()) {
    _this->_internal_set_serialized_expr_plan(from._internal_serialized_expr_plan());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_reqid() != 0) {
    _this->_internal_set_reqid(from._internal_reqid());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_travel_timestamp() != 0) {
    _this->_internal_set_travel_timestamp(from._internal_travel_timestamp());
  }
  if (from._internal_guarantee_timestamp() != 0) {
    _this->_internal_set_guarantee_timestamp(from._internal_guarantee_timestamp());
  }
  if (from._internal_timeout_timestamp() != 0) {
    _this->_internal_set_timeout_timestamp(from._internal_timeout_timestamp());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_iteration_extension_reduce_rate() != 0) {
    _this->_internal_set_iteration_extension_reduce_rate(from._internal_iteration_extension_reduce_rate());
  }
  if (from._internal_ignoregrowing() != 0) {
    _this->_internal_set_ignoregrowing(from._internal_ignoregrowing());
  }
  if (from._internal_is_count() != 0) {
    _this->_internal_set_is_count(from._internal_is_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RetrieveRequest::CopyFrom(const RetrieveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.RetrieveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieveRequest::IsInitialized() const {
  return true;
}

void RetrieveRequest::InternalSwap(RetrieveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partitionids_.InternalSwap(&other->_impl_.partitionids_);
  _impl_.output_fields_id_.InternalSwap(&other->_impl_.output_fields_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serialized_expr_plan_, lhs_arena,
      &other->_impl_.serialized_expr_plan_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RetrieveRequest, _impl_.is_count_)
      + sizeof(RetrieveRequest::_impl_.is_count_)
      - PROTOBUF_FIELD_OFFSET(RetrieveRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RetrieveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[15]);
}

// ===================================================================

class RetrieveResults::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const RetrieveResults* msg);
  static const ::milvus::proto::common::Status& status(const RetrieveResults* msg);
  static const ::milvus::proto::schema::IDs& ids(const RetrieveResults* msg);
  static const ::milvus::proto::internal::CostAggregation& costaggregation(const RetrieveResults* msg);
};

const ::milvus::proto::common::MsgBase&
RetrieveResults::_Internal::base(const RetrieveResults* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::common::Status&
RetrieveResults::_Internal::status(const RetrieveResults* msg) {
  return *msg->_impl_.status_;
}
const ::milvus::proto::schema::IDs&
RetrieveResults::_Internal::ids(const RetrieveResults* msg) {
  return *msg->_impl_.ids_;
}
const ::milvus::proto::internal::CostAggregation&
RetrieveResults::_Internal::costaggregation(const RetrieveResults* msg) {
  return *msg->_impl_.costaggregation_;
}
void RetrieveResults::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void RetrieveResults::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void RetrieveResults::clear_ids() {
  if (GetArenaForAllocation() == nullptr && _impl_.ids_ != nullptr) {
    delete _impl_.ids_;
  }
  _impl_.ids_ = nullptr;
}
void RetrieveResults::clear_fields_data() {
  _impl_.fields_data_.Clear();
}
RetrieveResults::RetrieveResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.RetrieveResults)
}
RetrieveResults::RetrieveResults(const RetrieveResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RetrieveResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_data_){from._impl_.fields_data_}
    , decltype(_impl_.sealed_segmentids_retrieved_){from._impl_.sealed_segmentids_retrieved_}
    , /*decltype(_impl_._sealed_segmentids_retrieved_cached_byte_size_)*/{0}
    , decltype(_impl_.channelids_retrieved_){from._impl_.channelids_retrieved_}
    , decltype(_impl_.global_sealed_segmentids_){from._impl_.global_sealed_segmentids_}
    , /*decltype(_impl_._global_sealed_segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.ids_){nullptr}
    , decltype(_impl_.costaggregation_){nullptr}
    , decltype(_impl_.reqid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_ids()) {
    _this->_impl_.ids_ = new ::milvus::proto::schema::IDs(*from._impl_.ids_);
  }
  if (from._internal_has_costaggregation()) {
    _this->_impl_.costaggregation_ = new ::milvus::proto::internal::CostAggregation(*from._impl_.costaggregation_);
  }
  _this->_impl_.reqid_ = from._impl_.reqid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.RetrieveResults)
}

inline void RetrieveResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_data_){arena}
    , decltype(_impl_.sealed_segmentids_retrieved_){arena}
    , /*decltype(_impl_._sealed_segmentids_retrieved_cached_byte_size_)*/{0}
    , decltype(_impl_.channelids_retrieved_){arena}
    , decltype(_impl_.global_sealed_segmentids_){arena}
    , /*decltype(_impl_._global_sealed_segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.ids_){nullptr}
    , decltype(_impl_.costaggregation_){nullptr}
    , decltype(_impl_.reqid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RetrieveResults::~RetrieveResults() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.RetrieveResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RetrieveResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_data_.~RepeatedPtrField();
  _impl_.sealed_segmentids_retrieved_.~RepeatedField();
  _impl_.channelids_retrieved_.~RepeatedPtrField();
  _impl_.global_sealed_segmentids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.ids_;
  if (this != internal_default_instance()) delete _impl_.costaggregation_;
}

void RetrieveResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RetrieveResults::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.RetrieveResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_data_.Clear();
  _impl_.sealed_segmentids_retrieved_.Clear();
  _impl_.channelids_retrieved_.Clear();
  _impl_.global_sealed_segmentids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ids_ != nullptr) {
    delete _impl_.ids_;
  }
  _impl_.ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.costaggregation_ != nullptr) {
    delete _impl_.costaggregation_;
  }
  _impl_.costaggregation_ = nullptr;
  _impl_.reqid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetrieveResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 reqID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.schema.IDs ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.schema.FieldData fields_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 sealed_segmentIDs_retrieved = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sealed_segmentids_retrieved(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_sealed_segmentids_retrieved(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string channelIDs_retrieved = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_channelids_retrieved();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.RetrieveResults.channelIDs_retrieved"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 global_sealed_segmentIDs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_global_sealed_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_global_sealed_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.internal.CostAggregation costAggregation = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_costaggregation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RetrieveResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.RetrieveResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int64 reqID = 3;
  if (this->_internal_reqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_reqid(), target);
  }

  // .milvus.proto.schema.IDs ids = 4;
  if (this->_internal_has_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ids(this),
        _Internal::ids(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.schema.FieldData fields_data = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 sealed_segmentIDs_retrieved = 6;
  {
    int byte_size = _impl_._sealed_segmentids_retrieved_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_sealed_segmentids_retrieved(), byte_size, target);
    }
  }

  // repeated string channelIDs_retrieved = 7;
  for (int i = 0, n = this->_internal_channelids_retrieved_size(); i < n; i++) {
    const auto& s = this->_internal_channelids_retrieved(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.RetrieveResults.channelIDs_retrieved");
    target = stream->WriteString(7, s, target);
  }

  // repeated int64 global_sealed_segmentIDs = 8;
  {
    int byte_size = _impl_._global_sealed_segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_global_sealed_segmentids(), byte_size, target);
    }
  }

  // .milvus.proto.internal.CostAggregation costAggregation = 13;
  if (this->_internal_has_costaggregation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::costaggregation(this),
        _Internal::costaggregation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.RetrieveResults)
  return target;
}

size_t RetrieveResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.RetrieveResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.schema.FieldData fields_data = 5;
  total_size += 1UL * this->_internal_fields_data_size();
  for (const auto& msg : this->_impl_.fields_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 sealed_segmentIDs_retrieved = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.sealed_segmentids_retrieved_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sealed_segmentids_retrieved_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string channelIDs_retrieved = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.channelids_retrieved_.size());
  for (int i = 0, n = _impl_.channelids_retrieved_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.channelids_retrieved_.Get(i));
  }

  // repeated int64 global_sealed_segmentIDs = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.global_sealed_segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._global_sealed_segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .milvus.proto.schema.IDs ids = 4;
  if (this->_internal_has_ids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ids_);
  }

  // .milvus.proto.internal.CostAggregation costAggregation = 13;
  if (this->_internal_has_costaggregation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.costaggregation_);
  }

  // int64 reqID = 3;
  if (this->_internal_reqid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reqid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RetrieveResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RetrieveResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RetrieveResults::GetClassData() const { return &_class_data_; }


void RetrieveResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RetrieveResults*>(&to_msg);
  auto& from = static_cast<const RetrieveResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.RetrieveResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_data_.MergeFrom(from._impl_.fields_data_);
  _this->_impl_.sealed_segmentids_retrieved_.MergeFrom(from._impl_.sealed_segmentids_retrieved_);
  _this->_impl_.channelids_retrieved_.MergeFrom(from._impl_.channelids_retrieved_);
  _this->_impl_.global_sealed_segmentids_.MergeFrom(from._impl_.global_sealed_segmentids_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_ids()) {
    _this->_internal_mutable_ids()->::milvus::proto::schema::IDs::MergeFrom(
        from._internal_ids());
  }
  if (from._internal_has_costaggregation()) {
    _this->_internal_mutable_costaggregation()->::milvus::proto::internal::CostAggregation::MergeFrom(
        from._internal_costaggregation());
  }
  if (from._internal_reqid() != 0) {
    _this->_internal_set_reqid(from._internal_reqid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RetrieveResults::CopyFrom(const RetrieveResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.RetrieveResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieveResults::IsInitialized() const {
  return true;
}

void RetrieveResults::InternalSwap(RetrieveResults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_data_.InternalSwap(&other->_impl_.fields_data_);
  _impl_.sealed_segmentids_retrieved_.InternalSwap(&other->_impl_.sealed_segmentids_retrieved_);
  _impl_.channelids_retrieved_.InternalSwap(&other->_impl_.channelids_retrieved_);
  _impl_.global_sealed_segmentids_.InternalSwap(&other->_impl_.global_sealed_segmentids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RetrieveResults, _impl_.reqid_)
      + sizeof(RetrieveResults::_impl_.reqid_)
      - PROTOBUF_FIELD_OFFSET(RetrieveResults, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RetrieveResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[16]);
}

// ===================================================================

class LoadIndex::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const LoadIndex* msg);
};

const ::milvus::proto::common::MsgBase&
LoadIndex::_Internal::base(const LoadIndex* msg) {
  return *msg->_impl_.base_;
}
void LoadIndex::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void LoadIndex::clear_index_params() {
  _impl_.index_params_.Clear();
}
LoadIndex::LoadIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.LoadIndex)
}
LoadIndex::LoadIndex(const LoadIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoadIndex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_paths_){from._impl_.index_paths_}
    , decltype(_impl_.index_params_){from._impl_.index_params_}
    , decltype(_impl_.fieldname_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.segmentid_){}
    , decltype(_impl_.fieldid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fieldname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fieldname().empty()) {
    _this->_impl_.fieldname_.Set(from._internal_fieldname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.segmentid_, &from._impl_.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fieldid_) -
    reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.fieldid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.LoadIndex)
}

inline void LoadIndex::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_paths_){arena}
    , decltype(_impl_.index_params_){arena}
    , decltype(_impl_.fieldname_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.fieldid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fieldname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fieldname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoadIndex::~LoadIndex() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.LoadIndex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_paths_.~RepeatedPtrField();
  _impl_.index_params_.~RepeatedPtrField();
  _impl_.fieldname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void LoadIndex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoadIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.LoadIndex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_paths_.Clear();
  _impl_.index_params_.Clear();
  _impl_.fieldname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fieldid_) -
      reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.fieldid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadIndex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segmentID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fieldName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fieldname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.LoadIndex.fieldName"));
        } else
          goto handle_unusual;
        continue;
      // int64 fieldID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.fieldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string index_paths = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_index_paths();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.LoadIndex.index_paths"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair index_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadIndex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.LoadIndex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 segmentID = 2;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_segmentid(), target);
  }

  // string fieldName = 3;
  if (!this->_internal_fieldname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fieldname().data(), static_cast<int>(this->_internal_fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.LoadIndex.fieldName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fieldname(), target);
  }

  // int64 fieldID = 4;
  if (this->_internal_fieldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_fieldid(), target);
  }

  // repeated string index_paths = 5;
  for (int i = 0, n = this->_internal_index_paths_size(); i < n; i++) {
    const auto& s = this->_internal_index_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.LoadIndex.index_paths");
    target = stream->WriteString(5, s, target);
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.LoadIndex)
  return target;
}

size_t LoadIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.LoadIndex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string index_paths = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.index_paths_.size());
  for (int i = 0, n = _impl_.index_paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.index_paths_.Get(i));
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 6;
  total_size += 1UL * this->_internal_index_params_size();
  for (const auto& msg : this->_impl_.index_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string fieldName = 3;
  if (!this->_internal_fieldname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fieldname());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 segmentID = 2;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // int64 fieldID = 4;
  if (this->_internal_fieldid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fieldid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadIndex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoadIndex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadIndex::GetClassData() const { return &_class_data_; }


void LoadIndex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoadIndex*>(&to_msg);
  auto& from = static_cast<const LoadIndex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.LoadIndex)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_paths_.MergeFrom(from._impl_.index_paths_);
  _this->_impl_.index_params_.MergeFrom(from._impl_.index_params_);
  if (!from._internal_fieldname().empty()) {
    _this->_internal_set_fieldname(from._internal_fieldname());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_fieldid() != 0) {
    _this->_internal_set_fieldid(from._internal_fieldid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadIndex::CopyFrom(const LoadIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.LoadIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadIndex::IsInitialized() const {
  return true;
}

void LoadIndex::InternalSwap(LoadIndex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_paths_.InternalSwap(&other->_impl_.index_paths_);
  _impl_.index_params_.InternalSwap(&other->_impl_.index_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fieldname_, lhs_arena,
      &other->_impl_.fieldname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadIndex, _impl_.fieldid_)
      + sizeof(LoadIndex::_impl_.fieldid_)
      - PROTOBUF_FIELD_OFFSET(LoadIndex, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadIndex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[17]);
}

// ===================================================================

class IndexStats::_Internal {
 public:
};

void IndexStats::clear_index_params() {
  _impl_.index_params_.Clear();
}
IndexStats::IndexStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.IndexStats)
}
IndexStats::IndexStats(const IndexStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_params_){from._impl_.index_params_}
    , decltype(_impl_.num_related_segments_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_related_segments_ = from._impl_.num_related_segments_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.IndexStats)
}

inline void IndexStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_params_){arena}
    , decltype(_impl_.num_related_segments_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IndexStats::~IndexStats() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.IndexStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_params_.~RepeatedPtrField();
}

void IndexStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexStats::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.IndexStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_params_.Clear();
  _impl_.num_related_segments_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .milvus.proto.common.KeyValuePair index_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 num_related_segments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_related_segments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.IndexStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair index_params = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 num_related_segments = 2;
  if (this->_internal_num_related_segments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_num_related_segments(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.IndexStats)
  return target;
}

size_t IndexStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.IndexStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair index_params = 1;
  total_size += 1UL * this->_internal_index_params_size();
  for (const auto& msg : this->_impl_.index_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 num_related_segments = 2;
  if (this->_internal_num_related_segments() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_related_segments());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexStats::GetClassData() const { return &_class_data_; }


void IndexStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexStats*>(&to_msg);
  auto& from = static_cast<const IndexStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.IndexStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_params_.MergeFrom(from._impl_.index_params_);
  if (from._internal_num_related_segments() != 0) {
    _this->_internal_set_num_related_segments(from._internal_num_related_segments());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexStats::CopyFrom(const IndexStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.IndexStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexStats::IsInitialized() const {
  return true;
}

void IndexStats::InternalSwap(IndexStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_params_.InternalSwap(&other->_impl_.index_params_);
  swap(_impl_.num_related_segments_, other->_impl_.num_related_segments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[18]);
}

// ===================================================================

class FieldStats::_Internal {
 public:
};

FieldStats::FieldStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.FieldStats)
}
FieldStats::FieldStats(const FieldStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FieldStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_stats_){from._impl_.index_stats_}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.fieldid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fieldid_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.fieldid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.FieldStats)
}

inline void FieldStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_stats_){arena}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.fieldid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FieldStats::~FieldStats() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.FieldStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_stats_.~RepeatedPtrField();
}

void FieldStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FieldStats::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.FieldStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_stats_.Clear();
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fieldid_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.fieldid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fieldID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.fieldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.internal.IndexStats index_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.FieldStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // int64 fieldID = 2;
  if (this->_internal_fieldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_fieldid(), target);
  }

  // repeated .milvus.proto.internal.IndexStats index_stats = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.FieldStats)
  return target;
}

size_t FieldStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.FieldStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.internal.IndexStats index_stats = 3;
  total_size += 1UL * this->_internal_index_stats_size();
  for (const auto& msg : this->_impl_.index_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 fieldID = 2;
  if (this->_internal_fieldid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fieldid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FieldStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldStats::GetClassData() const { return &_class_data_; }


void FieldStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FieldStats*>(&to_msg);
  auto& from = static_cast<const FieldStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.FieldStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_stats_.MergeFrom(from._impl_.index_stats_);
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_fieldid() != 0) {
    _this->_internal_set_fieldid(from._internal_fieldid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldStats::CopyFrom(const FieldStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.FieldStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldStats::IsInitialized() const {
  return true;
}

void FieldStats::InternalSwap(FieldStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_stats_.InternalSwap(&other->_impl_.index_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldStats, _impl_.fieldid_)
      + sizeof(FieldStats::_impl_.fieldid_)
      - PROTOBUF_FIELD_OFFSET(FieldStats, _impl_.collectionid_)>(
          reinterpret_cast<char*>(&_impl_.collectionid_),
          reinterpret_cast<char*>(&other->_impl_.collectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[19]);
}

// ===================================================================

class SegmentStats::_Internal {
 public:
};

SegmentStats::SegmentStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.SegmentStats)
}
SegmentStats::SegmentStats(const SegmentStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentid_){}
    , decltype(_impl_.memory_size_){}
    , decltype(_impl_.num_rows_){}
    , decltype(_impl_.recently_modified_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.segmentid_, &from._impl_.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.recently_modified_) -
    reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.recently_modified_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.SegmentStats)
}

inline void SegmentStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.memory_size_){int64_t{0}}
    , decltype(_impl_.num_rows_){int64_t{0}}
    , decltype(_impl_.recently_modified_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SegmentStats::~SegmentStats() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.SegmentStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SegmentStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentStats::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.SegmentStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.recently_modified_) -
      reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.recently_modified_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 memory_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool recently_modified = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.recently_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.SegmentStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // int64 memory_size = 2;
  if (this->_internal_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_memory_size(), target);
  }

  // int64 num_rows = 3;
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_num_rows(), target);
  }

  // bool recently_modified = 4;
  if (this->_internal_recently_modified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_recently_modified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.SegmentStats)
  return target;
}

size_t SegmentStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.SegmentStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // int64 memory_size = 2;
  if (this->_internal_memory_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_memory_size());
  }

  // int64 num_rows = 3;
  if (this->_internal_num_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_rows());
  }

  // bool recently_modified = 4;
  if (this->_internal_recently_modified() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentStats::GetClassData() const { return &_class_data_; }


void SegmentStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentStats*>(&to_msg);
  auto& from = static_cast<const SegmentStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.SegmentStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_memory_size() != 0) {
    _this->_internal_set_memory_size(from._internal_memory_size());
  }
  if (from._internal_num_rows() != 0) {
    _this->_internal_set_num_rows(from._internal_num_rows());
  }
  if (from._internal_recently_modified() != 0) {
    _this->_internal_set_recently_modified(from._internal_recently_modified());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentStats::CopyFrom(const SegmentStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.SegmentStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentStats::IsInitialized() const {
  return true;
}

void SegmentStats::InternalSwap(SegmentStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentStats, _impl_.recently_modified_)
      + sizeof(SegmentStats::_impl_.recently_modified_)
      - PROTOBUF_FIELD_OFFSET(SegmentStats, _impl_.segmentid_)>(
          reinterpret_cast<char*>(&_impl_.segmentid_),
          reinterpret_cast<char*>(&other->_impl_.segmentid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[20]);
}

// ===================================================================

class ChannelTimeTickMsg::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ChannelTimeTickMsg* msg);
};

const ::milvus::proto::common::MsgBase&
ChannelTimeTickMsg::_Internal::base(const ChannelTimeTickMsg* msg) {
  return *msg->_impl_.base_;
}
void ChannelTimeTickMsg::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ChannelTimeTickMsg::ChannelTimeTickMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.ChannelTimeTickMsg)
}
ChannelTimeTickMsg::ChannelTimeTickMsg(const ChannelTimeTickMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelTimeTickMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channelnames_){from._impl_.channelnames_}
    , decltype(_impl_.timestamps_){from._impl_.timestamps_}
    , /*decltype(_impl_._timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.default_timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.default_timestamp_ = from._impl_.default_timestamp_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.ChannelTimeTickMsg)
}

inline void ChannelTimeTickMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channelnames_){arena}
    , decltype(_impl_.timestamps_){arena}
    , /*decltype(_impl_._timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.default_timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChannelTimeTickMsg::~ChannelTimeTickMsg() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.ChannelTimeTickMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelTimeTickMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channelnames_.~RepeatedPtrField();
  _impl_.timestamps_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ChannelTimeTickMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelTimeTickMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.ChannelTimeTickMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channelnames_.Clear();
  _impl_.timestamps_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.default_timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelTimeTickMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string channelNames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_channelnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.ChannelTimeTickMsg.channelNames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 timestamps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 default_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.default_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelTimeTickMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.ChannelTimeTickMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // repeated string channelNames = 2;
  for (int i = 0, n = this->_internal_channelnames_size(); i < n; i++) {
    const auto& s = this->_internal_channelnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.ChannelTimeTickMsg.channelNames");
    target = stream->WriteString(2, s, target);
  }

  // repeated uint64 timestamps = 3;
  {
    int byte_size = _impl_._timestamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_timestamps(), byte_size, target);
    }
  }

  // uint64 default_timestamp = 4;
  if (this->_internal_default_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_default_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.ChannelTimeTickMsg)
  return target;
}

size_t ChannelTimeTickMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.ChannelTimeTickMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string channelNames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.channelnames_.size());
  for (int i = 0, n = _impl_.channelnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.channelnames_.Get(i));
  }

  // repeated uint64 timestamps = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // uint64 default_timestamp = 4;
  if (this->_internal_default_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_default_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelTimeTickMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelTimeTickMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelTimeTickMsg::GetClassData() const { return &_class_data_; }


void ChannelTimeTickMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelTimeTickMsg*>(&to_msg);
  auto& from = static_cast<const ChannelTimeTickMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.ChannelTimeTickMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channelnames_.MergeFrom(from._impl_.channelnames_);
  _this->_impl_.timestamps_.MergeFrom(from._impl_.timestamps_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_default_timestamp() != 0) {
    _this->_internal_set_default_timestamp(from._internal_default_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelTimeTickMsg::CopyFrom(const ChannelTimeTickMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.ChannelTimeTickMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelTimeTickMsg::IsInitialized() const {
  return true;
}

void ChannelTimeTickMsg::InternalSwap(ChannelTimeTickMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channelnames_.InternalSwap(&other->_impl_.channelnames_);
  _impl_.timestamps_.InternalSwap(&other->_impl_.timestamps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelTimeTickMsg, _impl_.default_timestamp_)
      + sizeof(ChannelTimeTickMsg::_impl_.default_timestamp_)
      - PROTOBUF_FIELD_OFFSET(ChannelTimeTickMsg, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelTimeTickMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[21]);
}

// ===================================================================

class CredentialInfo::_Internal {
 public:
};

CredentialInfo::CredentialInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.CredentialInfo)
}
CredentialInfo::CredentialInfo(const CredentialInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CredentialInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.encrypted_password_){}
    , decltype(_impl_.tenant_){}
    , decltype(_impl_.sha256_password_){}
    , decltype(_impl_.is_super_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encrypted_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encrypted_password().empty()) {
    _this->_impl_.encrypted_password_.Set(from._internal_encrypted_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tenant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tenant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tenant().empty()) {
    _this->_impl_.tenant_.Set(from._internal_tenant(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sha256_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha256_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sha256_password().empty()) {
    _this->_impl_.sha256_password_.Set(from._internal_sha256_password(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_super_ = from._impl_.is_super_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.CredentialInfo)
}

inline void CredentialInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.encrypted_password_){}
    , decltype(_impl_.tenant_){}
    , decltype(_impl_.sha256_password_){}
    , decltype(_impl_.is_super_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encrypted_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tenant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tenant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sha256_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha256_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CredentialInfo::~CredentialInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.CredentialInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CredentialInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.encrypted_password_.Destroy();
  _impl_.tenant_.Destroy();
  _impl_.sha256_password_.Destroy();
}

void CredentialInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CredentialInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.CredentialInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.encrypted_password_.ClearToEmpty();
  _impl_.tenant_.ClearToEmpty();
  _impl_.sha256_password_.ClearToEmpty();
  _impl_.is_super_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CredentialInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.CredentialInfo.username"));
        } else
          goto handle_unusual;
        continue;
      // string encrypted_password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_encrypted_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.CredentialInfo.encrypted_password"));
        } else
          goto handle_unusual;
        continue;
      // string tenant = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tenant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.CredentialInfo.tenant"));
        } else
          goto handle_unusual;
        continue;
      // bool is_super = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_super_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sha256_password = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sha256_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.CredentialInfo.sha256_password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CredentialInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.CredentialInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.CredentialInfo.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string encrypted_password = 2;
  if (!this->_internal_encrypted_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_password().data(), static_cast<int>(this->_internal_encrypted_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.CredentialInfo.encrypted_password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_encrypted_password(), target);
  }

  // string tenant = 3;
  if (!this->_internal_tenant().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tenant().data(), static_cast<int>(this->_internal_tenant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.CredentialInfo.tenant");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tenant(), target);
  }

  // bool is_super = 4;
  if (this->_internal_is_super() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_super(), target);
  }

  // string sha256_password = 5;
  if (!this->_internal_sha256_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sha256_password().data(), static_cast<int>(this->_internal_sha256_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.CredentialInfo.sha256_password");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sha256_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.CredentialInfo)
  return target;
}

size_t CredentialInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.CredentialInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string encrypted_password = 2;
  if (!this->_internal_encrypted_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_password());
  }

  // string tenant = 3;
  if (!this->_internal_tenant().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tenant());
  }

  // string sha256_password = 5;
  if (!this->_internal_sha256_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sha256_password());
  }

  // bool is_super = 4;
  if (this->_internal_is_super() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CredentialInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CredentialInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CredentialInfo::GetClassData() const { return &_class_data_; }


void CredentialInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CredentialInfo*>(&to_msg);
  auto& from = static_cast<const CredentialInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.CredentialInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_encrypted_password().empty()) {
    _this->_internal_set_encrypted_password(from._internal_encrypted_password());
  }
  if (!from._internal_tenant().empty()) {
    _this->_internal_set_tenant(from._internal_tenant());
  }
  if (!from._internal_sha256_password().empty()) {
    _this->_internal_set_sha256_password(from._internal_sha256_password());
  }
  if (from._internal_is_super() != 0) {
    _this->_internal_set_is_super(from._internal_is_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CredentialInfo::CopyFrom(const CredentialInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.CredentialInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CredentialInfo::IsInitialized() const {
  return true;
}

void CredentialInfo::InternalSwap(CredentialInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encrypted_password_, lhs_arena,
      &other->_impl_.encrypted_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tenant_, lhs_arena,
      &other->_impl_.tenant_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sha256_password_, lhs_arena,
      &other->_impl_.sha256_password_, rhs_arena
  );
  swap(_impl_.is_super_, other->_impl_.is_super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CredentialInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[22]);
}

// ===================================================================

class ListPolicyRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ListPolicyRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ListPolicyRequest::_Internal::base(const ListPolicyRequest* msg) {
  return *msg->_impl_.base_;
}
void ListPolicyRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ListPolicyRequest::ListPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.ListPolicyRequest)
}
ListPolicyRequest::ListPolicyRequest(const ListPolicyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListPolicyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.ListPolicyRequest)
}

inline void ListPolicyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListPolicyRequest::~ListPolicyRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.ListPolicyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListPolicyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ListPolicyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListPolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.ListPolicyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPolicyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListPolicyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.ListPolicyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.ListPolicyRequest)
  return target;
}

size_t ListPolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.ListPolicyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPolicyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListPolicyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPolicyRequest::GetClassData() const { return &_class_data_; }


void ListPolicyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListPolicyRequest*>(&to_msg);
  auto& from = static_cast<const ListPolicyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.ListPolicyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPolicyRequest::CopyFrom(const ListPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.ListPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPolicyRequest::IsInitialized() const {
  return true;
}

void ListPolicyRequest::InternalSwap(ListPolicyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPolicyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[23]);
}

// ===================================================================

class ListPolicyResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ListPolicyResponse* msg);
};

const ::milvus::proto::common::Status&
ListPolicyResponse::_Internal::status(const ListPolicyResponse* msg) {
  return *msg->_impl_.status_;
}
void ListPolicyResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ListPolicyResponse::ListPolicyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.ListPolicyResponse)
}
ListPolicyResponse::ListPolicyResponse(const ListPolicyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListPolicyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.policy_infos_){from._impl_.policy_infos_}
    , decltype(_impl_.user_roles_){from._impl_.user_roles_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.ListPolicyResponse)
}

inline void ListPolicyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.policy_infos_){arena}
    , decltype(_impl_.user_roles_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListPolicyResponse::~ListPolicyResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.ListPolicyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListPolicyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.policy_infos_.~RepeatedPtrField();
  _impl_.user_roles_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ListPolicyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListPolicyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.ListPolicyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.policy_infos_.Clear();
  _impl_.user_roles_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPolicyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string policy_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_policy_infos();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.ListPolicyResponse.policy_infos"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_roles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_roles();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.ListPolicyResponse.user_roles"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListPolicyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.ListPolicyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string policy_infos = 2;
  for (int i = 0, n = this->_internal_policy_infos_size(); i < n; i++) {
    const auto& s = this->_internal_policy_infos(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.ListPolicyResponse.policy_infos");
    target = stream->WriteString(2, s, target);
  }

  // repeated string user_roles = 3;
  for (int i = 0, n = this->_internal_user_roles_size(); i < n; i++) {
    const auto& s = this->_internal_user_roles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.ListPolicyResponse.user_roles");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.ListPolicyResponse)
  return target;
}

size_t ListPolicyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.ListPolicyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string policy_infos = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.policy_infos_.size());
  for (int i = 0, n = _impl_.policy_infos_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.policy_infos_.Get(i));
  }

  // repeated string user_roles = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.user_roles_.size());
  for (int i = 0, n = _impl_.user_roles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.user_roles_.Get(i));
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPolicyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListPolicyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPolicyResponse::GetClassData() const { return &_class_data_; }


void ListPolicyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListPolicyResponse*>(&to_msg);
  auto& from = static_cast<const ListPolicyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.ListPolicyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.policy_infos_.MergeFrom(from._impl_.policy_infos_);
  _this->_impl_.user_roles_.MergeFrom(from._impl_.user_roles_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPolicyResponse::CopyFrom(const ListPolicyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.ListPolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPolicyResponse::IsInitialized() const {
  return true;
}

void ListPolicyResponse::InternalSwap(ListPolicyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.policy_infos_.InternalSwap(&other->_impl_.policy_infos_);
  _impl_.user_roles_.InternalSwap(&other->_impl_.user_roles_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPolicyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[24]);
}

// ===================================================================

class ShowConfigurationsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ShowConfigurationsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ShowConfigurationsRequest::_Internal::base(const ShowConfigurationsRequest* msg) {
  return *msg->_impl_.base_;
}
void ShowConfigurationsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ShowConfigurationsRequest::ShowConfigurationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.ShowConfigurationsRequest)
}
ShowConfigurationsRequest::ShowConfigurationsRequest(const ShowConfigurationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShowConfigurationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pattern_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pattern().empty()) {
    _this->_impl_.pattern_.Set(from._internal_pattern(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.ShowConfigurationsRequest)
}

inline void ShowConfigurationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pattern_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShowConfigurationsRequest::~ShowConfigurationsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.ShowConfigurationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowConfigurationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pattern_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ShowConfigurationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowConfigurationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.ShowConfigurationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pattern_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowConfigurationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.internal.ShowConfigurationsRequest.pattern"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShowConfigurationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.ShowConfigurationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string pattern = 2;
  if (!this->_internal_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pattern().data(), static_cast<int>(this->_internal_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.internal.ShowConfigurationsRequest.pattern");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pattern(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.ShowConfigurationsRequest)
  return target;
}

size_t ShowConfigurationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.ShowConfigurationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pattern = 2;
  if (!this->_internal_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pattern());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowConfigurationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShowConfigurationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowConfigurationsRequest::GetClassData() const { return &_class_data_; }


void ShowConfigurationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShowConfigurationsRequest*>(&to_msg);
  auto& from = static_cast<const ShowConfigurationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.ShowConfigurationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pattern().empty()) {
    _this->_internal_set_pattern(from._internal_pattern());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShowConfigurationsRequest::CopyFrom(const ShowConfigurationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.ShowConfigurationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowConfigurationsRequest::IsInitialized() const {
  return true;
}

void ShowConfigurationsRequest::InternalSwap(ShowConfigurationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pattern_, lhs_arena,
      &other->_impl_.pattern_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowConfigurationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[25]);
}

// ===================================================================

class ShowConfigurationsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ShowConfigurationsResponse* msg);
};

const ::milvus::proto::common::Status&
ShowConfigurationsResponse::_Internal::status(const ShowConfigurationsResponse* msg) {
  return *msg->_impl_.status_;
}
void ShowConfigurationsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void ShowConfigurationsResponse::clear_configuations() {
  _impl_.configuations_.Clear();
}
ShowConfigurationsResponse::ShowConfigurationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.ShowConfigurationsResponse)
}
ShowConfigurationsResponse::ShowConfigurationsResponse(const ShowConfigurationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShowConfigurationsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.configuations_){from._impl_.configuations_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.ShowConfigurationsResponse)
}

inline void ShowConfigurationsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.configuations_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShowConfigurationsResponse::~ShowConfigurationsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.ShowConfigurationsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowConfigurationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.configuations_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ShowConfigurationsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowConfigurationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.ShowConfigurationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.configuations_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowConfigurationsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair configuations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configuations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShowConfigurationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.ShowConfigurationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair configuations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_configuations_size()); i < n; i++) {
    const auto& repfield = this->_internal_configuations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.ShowConfigurationsResponse)
  return target;
}

size_t ShowConfigurationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.ShowConfigurationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair configuations = 2;
  total_size += 1UL * this->_internal_configuations_size();
  for (const auto& msg : this->_impl_.configuations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowConfigurationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShowConfigurationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowConfigurationsResponse::GetClassData() const { return &_class_data_; }


void ShowConfigurationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShowConfigurationsResponse*>(&to_msg);
  auto& from = static_cast<const ShowConfigurationsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.ShowConfigurationsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.configuations_.MergeFrom(from._impl_.configuations_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShowConfigurationsResponse::CopyFrom(const ShowConfigurationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.ShowConfigurationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowConfigurationsResponse::IsInitialized() const {
  return true;
}

void ShowConfigurationsResponse::InternalSwap(ShowConfigurationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.configuations_.InternalSwap(&other->_impl_.configuations_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowConfigurationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[26]);
}

// ===================================================================

class Rate::_Internal {
 public:
};

Rate::Rate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.internal.Rate)
}
Rate::Rate(const Rate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){}
    , decltype(_impl_.rt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.r_, &from._impl_.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rt_) -
    reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.rt_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.internal.Rate)
}

inline void Rate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){0}
    , decltype(_impl_.rt_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rate::~Rate() {
  // @@protoc_insertion_point(destructor:milvus.proto.internal.Rate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rate::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.internal.Rate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rt_) -
      reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.rt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.internal.RateType rt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rt(static_cast<::milvus::proto::internal::RateType>(val));
        } else
          goto handle_unusual;
        continue;
      // double r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.internal.Rate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.internal.RateType rt = 1;
  if (this->_internal_rt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rt(), target);
  }

  // double r = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_r = this->_internal_r();
  uint64_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_r(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.internal.Rate)
  return target;
}

size_t Rate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.internal.Rate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double r = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_r = this->_internal_r();
  uint64_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    total_size += 1 + 8;
  }

  // .milvus.proto.internal.RateType rt = 1;
  if (this->_internal_rt() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rate::GetClassData() const { return &_class_data_; }


void Rate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rate*>(&to_msg);
  auto& from = static_cast<const Rate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.internal.Rate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_r = from._internal_r();
  uint64_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    _this->_internal_set_r(from._internal_r());
  }
  if (from._internal_rt() != 0) {
    _this->_internal_set_rt(from._internal_rt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rate::CopyFrom(const Rate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.internal.Rate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rate::IsInitialized() const {
  return true;
}

void Rate::InternalSwap(Rate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rate, _impl_.rt_)
      + sizeof(Rate::_impl_.rt_)
      - PROTOBUF_FIELD_OFFSET(Rate, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internal_2eproto_getter, &descriptor_table_internal_2eproto_once,
      file_level_metadata_internal_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::GetTimeTickChannelRequest*
Arena::CreateMaybeMessage< ::milvus::proto::internal::GetTimeTickChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::GetTimeTickChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::GetStatisticsChannelRequest*
Arena::CreateMaybeMessage< ::milvus::proto::internal::GetStatisticsChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::GetStatisticsChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::GetDdChannelRequest*
Arena::CreateMaybeMessage< ::milvus::proto::internal::GetDdChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::GetDdChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::NodeInfo*
Arena::CreateMaybeMessage< ::milvus::proto::internal::NodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::InitParams*
Arena::CreateMaybeMessage< ::milvus::proto::internal::InitParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::InitParams >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::StringList*
Arena::CreateMaybeMessage< ::milvus::proto::internal::StringList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::StringList >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::GetStatisticsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::internal::GetStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::GetStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::GetStatisticsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::internal::GetStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::GetStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::CreateAliasRequest*
Arena::CreateMaybeMessage< ::milvus::proto::internal::CreateAliasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::CreateAliasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::DropAliasRequest*
Arena::CreateMaybeMessage< ::milvus::proto::internal::DropAliasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::DropAliasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::AlterAliasRequest*
Arena::CreateMaybeMessage< ::milvus::proto::internal::AlterAliasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::AlterAliasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::CreateIndexRequest*
Arena::CreateMaybeMessage< ::milvus::proto::internal::CreateIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::CreateIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::SearchRequest*
Arena::CreateMaybeMessage< ::milvus::proto::internal::SearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::SearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::SearchResults*
Arena::CreateMaybeMessage< ::milvus::proto::internal::SearchResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::SearchResults >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::CostAggregation*
Arena::CreateMaybeMessage< ::milvus::proto::internal::CostAggregation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::CostAggregation >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::RetrieveRequest*
Arena::CreateMaybeMessage< ::milvus::proto::internal::RetrieveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::RetrieveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::RetrieveResults*
Arena::CreateMaybeMessage< ::milvus::proto::internal::RetrieveResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::RetrieveResults >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::LoadIndex*
Arena::CreateMaybeMessage< ::milvus::proto::internal::LoadIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::LoadIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::IndexStats*
Arena::CreateMaybeMessage< ::milvus::proto::internal::IndexStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::IndexStats >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::FieldStats*
Arena::CreateMaybeMessage< ::milvus::proto::internal::FieldStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::FieldStats >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::SegmentStats*
Arena::CreateMaybeMessage< ::milvus::proto::internal::SegmentStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::SegmentStats >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::ChannelTimeTickMsg*
Arena::CreateMaybeMessage< ::milvus::proto::internal::ChannelTimeTickMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::ChannelTimeTickMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::CredentialInfo*
Arena::CreateMaybeMessage< ::milvus::proto::internal::CredentialInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::CredentialInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::ListPolicyRequest*
Arena::CreateMaybeMessage< ::milvus::proto::internal::ListPolicyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::ListPolicyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::ListPolicyResponse*
Arena::CreateMaybeMessage< ::milvus::proto::internal::ListPolicyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::ListPolicyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::ShowConfigurationsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::internal::ShowConfigurationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::ShowConfigurationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::ShowConfigurationsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::internal::ShowConfigurationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::ShowConfigurationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::internal::Rate*
Arena::CreateMaybeMessage< ::milvus::proto::internal::Rate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::internal::Rate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
