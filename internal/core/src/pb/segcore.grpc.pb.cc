// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: segcore.proto

#include "segcore.pb.h"
#include "segcore.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace milvus {
namespace proto {
namespace segcore {

static const char* Segcore_method_names[] = {
  "/milvus.proto.segcore.Segcore/GetComponentStates",
  "/milvus.proto.segcore.Segcore/NewCollection",
  "/milvus.proto.segcore.Segcore/DeleteCollection",
  "/milvus.proto.segcore.Segcore/LoadSegments",
  "/milvus.proto.segcore.Segcore/ReleaseSegments",
  "/milvus.proto.segcore.Segcore/UpdateSegmentIndex",
  "/milvus.proto.segcore.Segcore/SearchSegments",
  "/milvus.proto.segcore.Segcore/QuerySegments",
  "/milvus.proto.segcore.Segcore/Delete",
  "/milvus.proto.segcore.Segcore/Insert",
};

std::unique_ptr< Segcore::Stub> Segcore::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Segcore::Stub> stub(new Segcore::Stub(channel, options));
  return stub;
}

Segcore::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetComponentStates_(Segcore_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewCollection_(Segcore_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCollection_(Segcore_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadSegments_(Segcore_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReleaseSegments_(Segcore_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSegmentIndex_(Segcore_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchSegments_(Segcore_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QuerySegments_(Segcore_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(Segcore_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Insert_(Segcore_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Segcore::Stub::GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::milvus::proto::milvus::ComponentStates* response) {
  return ::grpc::internal::BlockingUnaryCall< ::milvus::proto::milvus::GetComponentStatesRequest, ::milvus::proto::milvus::ComponentStates, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetComponentStates_, context, request, response);
}

void Segcore::Stub::async::GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::milvus::proto::milvus::GetComponentStatesRequest, ::milvus::proto::milvus::ComponentStates, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetComponentStates_, context, request, response, std::move(f));
}

void Segcore::Stub::async::GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetComponentStates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>* Segcore::Stub::PrepareAsyncGetComponentStatesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::milvus::proto::milvus::ComponentStates, ::milvus::proto::milvus::GetComponentStatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetComponentStates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>* Segcore::Stub::AsyncGetComponentStatesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetComponentStatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Segcore::Stub::NewCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::milvus::proto::segcore::NewCollectionRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewCollection_, context, request, response);
}

void Segcore::Stub::async::NewCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::milvus::proto::segcore::NewCollectionRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewCollection_, context, request, response, std::move(f));
}

void Segcore::Stub::async::NewCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* Segcore::Stub::PrepareAsyncNewCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::milvus::proto::common::Status, ::milvus::proto::segcore::NewCollectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewCollection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* Segcore::Stub::AsyncNewCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewCollectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Segcore::Stub::DeleteCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::milvus::proto::segcore::DeleteCollectionRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteCollection_, context, request, response);
}

void Segcore::Stub::async::DeleteCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::milvus::proto::segcore::DeleteCollectionRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCollection_, context, request, response, std::move(f));
}

void Segcore::Stub::async::DeleteCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* Segcore::Stub::PrepareAsyncDeleteCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::milvus::proto::common::Status, ::milvus::proto::segcore::DeleteCollectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteCollection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* Segcore::Stub::AsyncDeleteCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteCollectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Segcore::Stub::LoadSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::milvus::proto::segcore::LoadSegmentsRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoadSegments_, context, request, response);
}

void Segcore::Stub::async::LoadSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::milvus::proto::segcore::LoadSegmentsRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadSegments_, context, request, response, std::move(f));
}

void Segcore::Stub::async::LoadSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadSegments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* Segcore::Stub::PrepareAsyncLoadSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::milvus::proto::common::Status, ::milvus::proto::segcore::LoadSegmentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoadSegments_, context, request);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* Segcore::Stub::AsyncLoadSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoadSegmentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Segcore::Stub::ReleaseSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::milvus::proto::segcore::ReleaseSegmentsRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReleaseSegments_, context, request, response);
}

void Segcore::Stub::async::ReleaseSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::milvus::proto::segcore::ReleaseSegmentsRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReleaseSegments_, context, request, response, std::move(f));
}

void Segcore::Stub::async::ReleaseSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReleaseSegments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* Segcore::Stub::PrepareAsyncReleaseSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::milvus::proto::common::Status, ::milvus::proto::segcore::ReleaseSegmentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReleaseSegments_, context, request);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* Segcore::Stub::AsyncReleaseSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReleaseSegmentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Segcore::Stub::UpdateSegmentIndex(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::milvus::proto::segcore::UpdateIndexRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSegmentIndex_, context, request, response);
}

void Segcore::Stub::async::UpdateSegmentIndex(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::milvus::proto::segcore::UpdateIndexRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSegmentIndex_, context, request, response, std::move(f));
}

void Segcore::Stub::async::UpdateSegmentIndex(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSegmentIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* Segcore::Stub::PrepareAsyncUpdateSegmentIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::milvus::proto::common::Status, ::milvus::proto::segcore::UpdateIndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSegmentIndex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* Segcore::Stub::AsyncUpdateSegmentIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSegmentIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Segcore::Stub::SearchSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest& request, ::milvus::proto::internal::SearchResults* response) {
  return ::grpc::internal::BlockingUnaryCall< ::milvus::proto::segcore::SearchRequest, ::milvus::proto::internal::SearchResults, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchSegments_, context, request, response);
}

void Segcore::Stub::async::SearchSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest* request, ::milvus::proto::internal::SearchResults* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::milvus::proto::segcore::SearchRequest, ::milvus::proto::internal::SearchResults, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchSegments_, context, request, response, std::move(f));
}

void Segcore::Stub::async::SearchSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest* request, ::milvus::proto::internal::SearchResults* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchSegments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::SearchResults>* Segcore::Stub::PrepareAsyncSearchSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::milvus::proto::internal::SearchResults, ::milvus::proto::segcore::SearchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchSegments_, context, request);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::SearchResults>* Segcore::Stub::AsyncSearchSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchSegmentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Segcore::Stub::QuerySegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest& request, ::milvus::proto::internal::RetrieveResults* response) {
  return ::grpc::internal::BlockingUnaryCall< ::milvus::proto::segcore::QueryRequest, ::milvus::proto::internal::RetrieveResults, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QuerySegments_, context, request, response);
}

void Segcore::Stub::async::QuerySegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest* request, ::milvus::proto::internal::RetrieveResults* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::milvus::proto::segcore::QueryRequest, ::milvus::proto::internal::RetrieveResults, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QuerySegments_, context, request, response, std::move(f));
}

void Segcore::Stub::async::QuerySegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest* request, ::milvus::proto::internal::RetrieveResults* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QuerySegments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::RetrieveResults>* Segcore::Stub::PrepareAsyncQuerySegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::milvus::proto::internal::RetrieveResults, ::milvus::proto::segcore::QueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QuerySegments_, context, request);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::RetrieveResults>* Segcore::Stub::AsyncQuerySegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQuerySegmentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Segcore::Stub::Delete(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::milvus::proto::segcore::DeleteRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void Segcore::Stub::async::Delete(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::milvus::proto::segcore::DeleteRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void Segcore::Stub::async::Delete(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* Segcore::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::milvus::proto::common::Status, ::milvus::proto::segcore::DeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* Segcore::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Segcore::Stub::Insert(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::milvus::proto::segcore::InsertRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Insert_, context, request, response);
}

void Segcore::Stub::async::Insert(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::milvus::proto::segcore::InsertRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, std::move(f));
}

void Segcore::Stub::async::Insert(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* Segcore::Stub::PrepareAsyncInsertRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::milvus::proto::common::Status, ::milvus::proto::segcore::InsertRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Insert_, context, request);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* Segcore::Stub::AsyncInsertRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertRaw(context, request, cq);
  result->StartCall();
  return result;
}

Segcore::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Segcore_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Segcore::Service, ::milvus::proto::milvus::GetComponentStatesRequest, ::milvus::proto::milvus::ComponentStates, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Segcore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::milvus::proto::milvus::GetComponentStatesRequest* req,
             ::milvus::proto::milvus::ComponentStates* resp) {
               return service->GetComponentStates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Segcore_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Segcore::Service, ::milvus::proto::segcore::NewCollectionRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Segcore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::milvus::proto::segcore::NewCollectionRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->NewCollection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Segcore_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Segcore::Service, ::milvus::proto::segcore::DeleteCollectionRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Segcore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::milvus::proto::segcore::DeleteCollectionRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->DeleteCollection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Segcore_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Segcore::Service, ::milvus::proto::segcore::LoadSegmentsRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Segcore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::milvus::proto::segcore::LoadSegmentsRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->LoadSegments(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Segcore_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Segcore::Service, ::milvus::proto::segcore::ReleaseSegmentsRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Segcore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::milvus::proto::segcore::ReleaseSegmentsRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->ReleaseSegments(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Segcore_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Segcore::Service, ::milvus::proto::segcore::UpdateIndexRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Segcore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::milvus::proto::segcore::UpdateIndexRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->UpdateSegmentIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Segcore_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Segcore::Service, ::milvus::proto::segcore::SearchRequest, ::milvus::proto::internal::SearchResults, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Segcore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::milvus::proto::segcore::SearchRequest* req,
             ::milvus::proto::internal::SearchResults* resp) {
               return service->SearchSegments(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Segcore_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Segcore::Service, ::milvus::proto::segcore::QueryRequest, ::milvus::proto::internal::RetrieveResults, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Segcore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::milvus::proto::segcore::QueryRequest* req,
             ::milvus::proto::internal::RetrieveResults* resp) {
               return service->QuerySegments(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Segcore_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Segcore::Service, ::milvus::proto::segcore::DeleteRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Segcore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::milvus::proto::segcore::DeleteRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Segcore_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Segcore::Service, ::milvus::proto::segcore::InsertRequest, ::milvus::proto::common::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Segcore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::milvus::proto::segcore::InsertRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->Insert(ctx, req, resp);
             }, this)));
}

Segcore::Service::~Service() {
}

::grpc::Status Segcore::Service::GetComponentStates(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Segcore::Service::NewCollection(::grpc::ServerContext* context, const ::milvus::proto::segcore::NewCollectionRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Segcore::Service::DeleteCollection(::grpc::ServerContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Segcore::Service::LoadSegments(::grpc::ServerContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Segcore::Service::ReleaseSegments(::grpc::ServerContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Segcore::Service::UpdateSegmentIndex(::grpc::ServerContext* context, const ::milvus::proto::segcore::UpdateIndexRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Segcore::Service::SearchSegments(::grpc::ServerContext* context, const ::milvus::proto::segcore::SearchRequest* request, ::milvus::proto::internal::SearchResults* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Segcore::Service::QuerySegments(::grpc::ServerContext* context, const ::milvus::proto::segcore::QueryRequest* request, ::milvus::proto::internal::RetrieveResults* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Segcore::Service::Delete(::grpc::ServerContext* context, const ::milvus::proto::segcore::DeleteRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Segcore::Service::Insert(::grpc::ServerContext* context, const ::milvus::proto::segcore::InsertRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace milvus
}  // namespace proto
}  // namespace segcore

