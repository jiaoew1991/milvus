// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index_coord.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_index_5fcoord_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_index_5fcoord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "internal.pb.h"
#include "milvus.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_index_5fcoord_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_index_5fcoord_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_index_5fcoord_2eproto;
namespace milvus {
namespace proto {
namespace index {
class CreateIndexRequest;
struct CreateIndexRequestDefaultTypeInternal;
extern CreateIndexRequestDefaultTypeInternal _CreateIndexRequest_default_instance_;
class CreateJobRequest;
struct CreateJobRequestDefaultTypeInternal;
extern CreateJobRequestDefaultTypeInternal _CreateJobRequest_default_instance_;
class DescribeIndexRequest;
struct DescribeIndexRequestDefaultTypeInternal;
extern DescribeIndexRequestDefaultTypeInternal _DescribeIndexRequest_default_instance_;
class DescribeIndexResponse;
struct DescribeIndexResponseDefaultTypeInternal;
extern DescribeIndexResponseDefaultTypeInternal _DescribeIndexResponse_default_instance_;
class DropIndexRequest;
struct DropIndexRequestDefaultTypeInternal;
extern DropIndexRequestDefaultTypeInternal _DropIndexRequest_default_instance_;
class DropJobsRequest;
struct DropJobsRequestDefaultTypeInternal;
extern DropJobsRequestDefaultTypeInternal _DropJobsRequest_default_instance_;
class FieldIndex;
struct FieldIndexDefaultTypeInternal;
extern FieldIndexDefaultTypeInternal _FieldIndex_default_instance_;
class GetIndexBuildProgressRequest;
struct GetIndexBuildProgressRequestDefaultTypeInternal;
extern GetIndexBuildProgressRequestDefaultTypeInternal _GetIndexBuildProgressRequest_default_instance_;
class GetIndexBuildProgressResponse;
struct GetIndexBuildProgressResponseDefaultTypeInternal;
extern GetIndexBuildProgressResponseDefaultTypeInternal _GetIndexBuildProgressResponse_default_instance_;
class GetIndexInfoRequest;
struct GetIndexInfoRequestDefaultTypeInternal;
extern GetIndexInfoRequestDefaultTypeInternal _GetIndexInfoRequest_default_instance_;
class GetIndexInfoResponse;
struct GetIndexInfoResponseDefaultTypeInternal;
extern GetIndexInfoResponseDefaultTypeInternal _GetIndexInfoResponse_default_instance_;
class GetIndexInfoResponse_SegmentInfoEntry_DoNotUse;
struct GetIndexInfoResponse_SegmentInfoEntry_DoNotUseDefaultTypeInternal;
extern GetIndexInfoResponse_SegmentInfoEntry_DoNotUseDefaultTypeInternal _GetIndexInfoResponse_SegmentInfoEntry_DoNotUse_default_instance_;
class GetIndexStateRequest;
struct GetIndexStateRequestDefaultTypeInternal;
extern GetIndexStateRequestDefaultTypeInternal _GetIndexStateRequest_default_instance_;
class GetIndexStateResponse;
struct GetIndexStateResponseDefaultTypeInternal;
extern GetIndexStateResponseDefaultTypeInternal _GetIndexStateResponse_default_instance_;
class GetIndexStatisticsRequest;
struct GetIndexStatisticsRequestDefaultTypeInternal;
extern GetIndexStatisticsRequestDefaultTypeInternal _GetIndexStatisticsRequest_default_instance_;
class GetIndexStatisticsResponse;
struct GetIndexStatisticsResponseDefaultTypeInternal;
extern GetIndexStatisticsResponseDefaultTypeInternal _GetIndexStatisticsResponse_default_instance_;
class GetJobStatsRequest;
struct GetJobStatsRequestDefaultTypeInternal;
extern GetJobStatsRequestDefaultTypeInternal _GetJobStatsRequest_default_instance_;
class GetJobStatsResponse;
struct GetJobStatsResponseDefaultTypeInternal;
extern GetJobStatsResponseDefaultTypeInternal _GetJobStatsResponse_default_instance_;
class GetSegmentIndexStateRequest;
struct GetSegmentIndexStateRequestDefaultTypeInternal;
extern GetSegmentIndexStateRequestDefaultTypeInternal _GetSegmentIndexStateRequest_default_instance_;
class GetSegmentIndexStateResponse;
struct GetSegmentIndexStateResponseDefaultTypeInternal;
extern GetSegmentIndexStateResponseDefaultTypeInternal _GetSegmentIndexStateResponse_default_instance_;
class IndexFilePathInfo;
struct IndexFilePathInfoDefaultTypeInternal;
extern IndexFilePathInfoDefaultTypeInternal _IndexFilePathInfo_default_instance_;
class IndexInfo;
struct IndexInfoDefaultTypeInternal;
extern IndexInfoDefaultTypeInternal _IndexInfo_default_instance_;
class IndexTaskInfo;
struct IndexTaskInfoDefaultTypeInternal;
extern IndexTaskInfoDefaultTypeInternal _IndexTaskInfo_default_instance_;
class JobInfo;
struct JobInfoDefaultTypeInternal;
extern JobInfoDefaultTypeInternal _JobInfo_default_instance_;
class QueryJobsRequest;
struct QueryJobsRequestDefaultTypeInternal;
extern QueryJobsRequestDefaultTypeInternal _QueryJobsRequest_default_instance_;
class QueryJobsResponse;
struct QueryJobsResponseDefaultTypeInternal;
extern QueryJobsResponseDefaultTypeInternal _QueryJobsResponse_default_instance_;
class RegisterNodeRequest;
struct RegisterNodeRequestDefaultTypeInternal;
extern RegisterNodeRequestDefaultTypeInternal _RegisterNodeRequest_default_instance_;
class RegisterNodeResponse;
struct RegisterNodeResponseDefaultTypeInternal;
extern RegisterNodeResponseDefaultTypeInternal _RegisterNodeResponse_default_instance_;
class SegmentIndex;
struct SegmentIndexDefaultTypeInternal;
extern SegmentIndexDefaultTypeInternal _SegmentIndex_default_instance_;
class SegmentIndexState;
struct SegmentIndexStateDefaultTypeInternal;
extern SegmentIndexStateDefaultTypeInternal _SegmentIndexState_default_instance_;
class SegmentInfo;
struct SegmentInfoDefaultTypeInternal;
extern SegmentInfoDefaultTypeInternal _SegmentInfo_default_instance_;
class StorageConfig;
struct StorageConfigDefaultTypeInternal;
extern StorageConfigDefaultTypeInternal _StorageConfig_default_instance_;
}  // namespace index
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> ::milvus::proto::index::CreateIndexRequest* Arena::CreateMaybeMessage<::milvus::proto::index::CreateIndexRequest>(Arena*);
template<> ::milvus::proto::index::CreateJobRequest* Arena::CreateMaybeMessage<::milvus::proto::index::CreateJobRequest>(Arena*);
template<> ::milvus::proto::index::DescribeIndexRequest* Arena::CreateMaybeMessage<::milvus::proto::index::DescribeIndexRequest>(Arena*);
template<> ::milvus::proto::index::DescribeIndexResponse* Arena::CreateMaybeMessage<::milvus::proto::index::DescribeIndexResponse>(Arena*);
template<> ::milvus::proto::index::DropIndexRequest* Arena::CreateMaybeMessage<::milvus::proto::index::DropIndexRequest>(Arena*);
template<> ::milvus::proto::index::DropJobsRequest* Arena::CreateMaybeMessage<::milvus::proto::index::DropJobsRequest>(Arena*);
template<> ::milvus::proto::index::FieldIndex* Arena::CreateMaybeMessage<::milvus::proto::index::FieldIndex>(Arena*);
template<> ::milvus::proto::index::GetIndexBuildProgressRequest* Arena::CreateMaybeMessage<::milvus::proto::index::GetIndexBuildProgressRequest>(Arena*);
template<> ::milvus::proto::index::GetIndexBuildProgressResponse* Arena::CreateMaybeMessage<::milvus::proto::index::GetIndexBuildProgressResponse>(Arena*);
template<> ::milvus::proto::index::GetIndexInfoRequest* Arena::CreateMaybeMessage<::milvus::proto::index::GetIndexInfoRequest>(Arena*);
template<> ::milvus::proto::index::GetIndexInfoResponse* Arena::CreateMaybeMessage<::milvus::proto::index::GetIndexInfoResponse>(Arena*);
template<> ::milvus::proto::index::GetIndexInfoResponse_SegmentInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::milvus::proto::index::GetIndexInfoResponse_SegmentInfoEntry_DoNotUse>(Arena*);
template<> ::milvus::proto::index::GetIndexStateRequest* Arena::CreateMaybeMessage<::milvus::proto::index::GetIndexStateRequest>(Arena*);
template<> ::milvus::proto::index::GetIndexStateResponse* Arena::CreateMaybeMessage<::milvus::proto::index::GetIndexStateResponse>(Arena*);
template<> ::milvus::proto::index::GetIndexStatisticsRequest* Arena::CreateMaybeMessage<::milvus::proto::index::GetIndexStatisticsRequest>(Arena*);
template<> ::milvus::proto::index::GetIndexStatisticsResponse* Arena::CreateMaybeMessage<::milvus::proto::index::GetIndexStatisticsResponse>(Arena*);
template<> ::milvus::proto::index::GetJobStatsRequest* Arena::CreateMaybeMessage<::milvus::proto::index::GetJobStatsRequest>(Arena*);
template<> ::milvus::proto::index::GetJobStatsResponse* Arena::CreateMaybeMessage<::milvus::proto::index::GetJobStatsResponse>(Arena*);
template<> ::milvus::proto::index::GetSegmentIndexStateRequest* Arena::CreateMaybeMessage<::milvus::proto::index::GetSegmentIndexStateRequest>(Arena*);
template<> ::milvus::proto::index::GetSegmentIndexStateResponse* Arena::CreateMaybeMessage<::milvus::proto::index::GetSegmentIndexStateResponse>(Arena*);
template<> ::milvus::proto::index::IndexFilePathInfo* Arena::CreateMaybeMessage<::milvus::proto::index::IndexFilePathInfo>(Arena*);
template<> ::milvus::proto::index::IndexInfo* Arena::CreateMaybeMessage<::milvus::proto::index::IndexInfo>(Arena*);
template<> ::milvus::proto::index::IndexTaskInfo* Arena::CreateMaybeMessage<::milvus::proto::index::IndexTaskInfo>(Arena*);
template<> ::milvus::proto::index::JobInfo* Arena::CreateMaybeMessage<::milvus::proto::index::JobInfo>(Arena*);
template<> ::milvus::proto::index::QueryJobsRequest* Arena::CreateMaybeMessage<::milvus::proto::index::QueryJobsRequest>(Arena*);
template<> ::milvus::proto::index::QueryJobsResponse* Arena::CreateMaybeMessage<::milvus::proto::index::QueryJobsResponse>(Arena*);
template<> ::milvus::proto::index::RegisterNodeRequest* Arena::CreateMaybeMessage<::milvus::proto::index::RegisterNodeRequest>(Arena*);
template<> ::milvus::proto::index::RegisterNodeResponse* Arena::CreateMaybeMessage<::milvus::proto::index::RegisterNodeResponse>(Arena*);
template<> ::milvus::proto::index::SegmentIndex* Arena::CreateMaybeMessage<::milvus::proto::index::SegmentIndex>(Arena*);
template<> ::milvus::proto::index::SegmentIndexState* Arena::CreateMaybeMessage<::milvus::proto::index::SegmentIndexState>(Arena*);
template<> ::milvus::proto::index::SegmentInfo* Arena::CreateMaybeMessage<::milvus::proto::index::SegmentInfo>(Arena*);
template<> ::milvus::proto::index::StorageConfig* Arena::CreateMaybeMessage<::milvus::proto::index::StorageConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace milvus {
namespace proto {
namespace index {

// ===================================================================

class IndexInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.IndexInfo) */ {
 public:
  inline IndexInfo() : IndexInfo(nullptr) {}
  ~IndexInfo() override;
  explicit PROTOBUF_CONSTEXPR IndexInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexInfo(const IndexInfo& from);
  IndexInfo(IndexInfo&& from) noexcept
    : IndexInfo() {
    *this = ::std::move(from);
  }

  inline IndexInfo& operator=(const IndexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexInfo& operator=(IndexInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexInfo* internal_default_instance() {
    return reinterpret_cast<const IndexInfo*>(
               &_IndexInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IndexInfo& a, IndexInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexInfo& from) {
    IndexInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.IndexInfo";
  }
  protected:
  explicit IndexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeParamsFieldNumber = 5,
    kIndexParamsFieldNumber = 6,
    kUserIndexParamsFieldNumber = 12,
    kIndexNameFieldNumber = 3,
    kIndexStateFailReasonFieldNumber = 10,
    kCollectionIDFieldNumber = 1,
    kFieldIDFieldNumber = 2,
    kIndexIDFieldNumber = 4,
    kIndexedRowsFieldNumber = 7,
    kTotalRowsFieldNumber = 8,
    kStateFieldNumber = 9,
    kIsAutoIndexFieldNumber = 11,
    kPendingIndexRowsFieldNumber = 13,
  };
  // repeated .milvus.proto.common.KeyValuePair type_params = 5;
  int type_params_size() const;
  private:
  int _internal_type_params_size() const;
  public:
  void clear_type_params();
  ::milvus::proto::common::KeyValuePair* mutable_type_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_type_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_type_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_type_params();
  public:
  const ::milvus::proto::common::KeyValuePair& type_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_type_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      type_params() const;

  // repeated .milvus.proto.common.KeyValuePair index_params = 6;
  int index_params_size() const;
  private:
  int _internal_index_params_size() const;
  public:
  void clear_index_params();
  ::milvus::proto::common::KeyValuePair* mutable_index_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_index_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_index_params();
  public:
  const ::milvus::proto::common::KeyValuePair& index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_index_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      index_params() const;

  // repeated .milvus.proto.common.KeyValuePair user_index_params = 12;
  int user_index_params_size() const;
  private:
  int _internal_user_index_params_size() const;
  public:
  void clear_user_index_params();
  ::milvus::proto::common::KeyValuePair* mutable_user_index_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_user_index_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_user_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_user_index_params();
  public:
  const ::milvus::proto::common::KeyValuePair& user_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_user_index_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      user_index_params() const;

  // string index_name = 3;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // string index_state_fail_reason = 10;
  void clear_index_state_fail_reason();
  const std::string& index_state_fail_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_state_fail_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_state_fail_reason();
  PROTOBUF_NODISCARD std::string* release_index_state_fail_reason();
  void set_allocated_index_state_fail_reason(std::string* index_state_fail_reason);
  private:
  const std::string& _internal_index_state_fail_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_state_fail_reason(const std::string& value);
  std::string* _internal_mutable_index_state_fail_reason();
  public:

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 fieldID = 2;
  void clear_fieldid();
  int64_t fieldid() const;
  void set_fieldid(int64_t value);
  private:
  int64_t _internal_fieldid() const;
  void _internal_set_fieldid(int64_t value);
  public:

  // int64 indexID = 4;
  void clear_indexid();
  int64_t indexid() const;
  void set_indexid(int64_t value);
  private:
  int64_t _internal_indexid() const;
  void _internal_set_indexid(int64_t value);
  public:

  // int64 indexed_rows = 7;
  void clear_indexed_rows();
  int64_t indexed_rows() const;
  void set_indexed_rows(int64_t value);
  private:
  int64_t _internal_indexed_rows() const;
  void _internal_set_indexed_rows(int64_t value);
  public:

  // int64 total_rows = 8;
  void clear_total_rows();
  int64_t total_rows() const;
  void set_total_rows(int64_t value);
  private:
  int64_t _internal_total_rows() const;
  void _internal_set_total_rows(int64_t value);
  public:

  // .milvus.proto.common.IndexState state = 9;
  void clear_state();
  ::milvus::proto::common::IndexState state() const;
  void set_state(::milvus::proto::common::IndexState value);
  private:
  ::milvus::proto::common::IndexState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::IndexState value);
  public:

  // bool is_auto_index = 11;
  void clear_is_auto_index();
  bool is_auto_index() const;
  void set_is_auto_index(bool value);
  private:
  bool _internal_is_auto_index() const;
  void _internal_set_is_auto_index(bool value);
  public:

  // int64 pending_index_rows = 13;
  void clear_pending_index_rows();
  int64_t pending_index_rows() const;
  void set_pending_index_rows(int64_t value);
  private:
  int64_t _internal_pending_index_rows() const;
  void _internal_set_pending_index_rows(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.IndexInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > type_params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > index_params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > user_index_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_state_fail_reason_;
    int64_t collectionid_;
    int64_t fieldid_;
    int64_t indexid_;
    int64_t indexed_rows_;
    int64_t total_rows_;
    int state_;
    bool is_auto_index_;
    int64_t pending_index_rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class FieldIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.FieldIndex) */ {
 public:
  inline FieldIndex() : FieldIndex(nullptr) {}
  ~FieldIndex() override;
  explicit PROTOBUF_CONSTEXPR FieldIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldIndex(const FieldIndex& from);
  FieldIndex(FieldIndex&& from) noexcept
    : FieldIndex() {
    *this = ::std::move(from);
  }

  inline FieldIndex& operator=(const FieldIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldIndex& operator=(FieldIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldIndex* internal_default_instance() {
    return reinterpret_cast<const FieldIndex*>(
               &_FieldIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FieldIndex& a, FieldIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldIndex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldIndex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldIndex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldIndex& from) {
    FieldIndex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldIndex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.FieldIndex";
  }
  protected:
  explicit FieldIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexInfoFieldNumber = 1,
    kCreateTimeFieldNumber = 3,
    kDeletedFieldNumber = 2,
  };
  // .milvus.proto.index.IndexInfo index_info = 1;
  bool has_index_info() const;
  private:
  bool _internal_has_index_info() const;
  public:
  void clear_index_info();
  const ::milvus::proto::index::IndexInfo& index_info() const;
  PROTOBUF_NODISCARD ::milvus::proto::index::IndexInfo* release_index_info();
  ::milvus::proto::index::IndexInfo* mutable_index_info();
  void set_allocated_index_info(::milvus::proto::index::IndexInfo* index_info);
  private:
  const ::milvus::proto::index::IndexInfo& _internal_index_info() const;
  ::milvus::proto::index::IndexInfo* _internal_mutable_index_info();
  public:
  void unsafe_arena_set_allocated_index_info(
      ::milvus::proto::index::IndexInfo* index_info);
  ::milvus::proto::index::IndexInfo* unsafe_arena_release_index_info();

  // uint64 create_time = 3;
  void clear_create_time();
  uint64_t create_time() const;
  void set_create_time(uint64_t value);
  private:
  uint64_t _internal_create_time() const;
  void _internal_set_create_time(uint64_t value);
  public:

  // bool deleted = 2;
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.FieldIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::index::IndexInfo* index_info_;
    uint64_t create_time_;
    bool deleted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SegmentIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.SegmentIndex) */ {
 public:
  inline SegmentIndex() : SegmentIndex(nullptr) {}
  ~SegmentIndex() override;
  explicit PROTOBUF_CONSTEXPR SegmentIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentIndex(const SegmentIndex& from);
  SegmentIndex(SegmentIndex&& from) noexcept
    : SegmentIndex() {
    *this = ::std::move(from);
  }

  inline SegmentIndex& operator=(const SegmentIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentIndex& operator=(SegmentIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentIndex* internal_default_instance() {
    return reinterpret_cast<const SegmentIndex*>(
               &_SegmentIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SegmentIndex& a, SegmentIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentIndex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentIndex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentIndex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentIndex& from) {
    SegmentIndex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentIndex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.SegmentIndex";
  }
  protected:
  explicit SegmentIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFileKeysFieldNumber = 11,
    kFailReasonFieldNumber = 10,
    kCollectionIDFieldNumber = 1,
    kPartitionIDFieldNumber = 2,
    kSegmentIDFieldNumber = 3,
    kNumRowsFieldNumber = 4,
    kIndexIDFieldNumber = 5,
    kBuildIDFieldNumber = 6,
    kNodeIDFieldNumber = 7,
    kIndexVersionFieldNumber = 8,
    kStateFieldNumber = 9,
    kDeletedFieldNumber = 12,
    kWriteHandoffFieldNumber = 15,
    kCreateTimeFieldNumber = 13,
    kSerializeSizeFieldNumber = 14,
  };
  // repeated string index_file_keys = 11;
  int index_file_keys_size() const;
  private:
  int _internal_index_file_keys_size() const;
  public:
  void clear_index_file_keys();
  const std::string& index_file_keys(int index) const;
  std::string* mutable_index_file_keys(int index);
  void set_index_file_keys(int index, const std::string& value);
  void set_index_file_keys(int index, std::string&& value);
  void set_index_file_keys(int index, const char* value);
  void set_index_file_keys(int index, const char* value, size_t size);
  std::string* add_index_file_keys();
  void add_index_file_keys(const std::string& value);
  void add_index_file_keys(std::string&& value);
  void add_index_file_keys(const char* value);
  void add_index_file_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& index_file_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_index_file_keys();
  private:
  const std::string& _internal_index_file_keys(int index) const;
  std::string* _internal_add_index_file_keys();
  public:

  // string fail_reason = 10;
  void clear_fail_reason();
  const std::string& fail_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fail_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fail_reason();
  PROTOBUF_NODISCARD std::string* release_fail_reason();
  void set_allocated_fail_reason(std::string* fail_reason);
  private:
  const std::string& _internal_fail_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fail_reason(const std::string& value);
  std::string* _internal_mutable_fail_reason();
  public:

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 partitionID = 2;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // int64 segmentID = 3;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // int64 num_rows = 4;
  void clear_num_rows();
  int64_t num_rows() const;
  void set_num_rows(int64_t value);
  private:
  int64_t _internal_num_rows() const;
  void _internal_set_num_rows(int64_t value);
  public:

  // int64 indexID = 5;
  void clear_indexid();
  int64_t indexid() const;
  void set_indexid(int64_t value);
  private:
  int64_t _internal_indexid() const;
  void _internal_set_indexid(int64_t value);
  public:

  // int64 buildID = 6;
  void clear_buildid();
  int64_t buildid() const;
  void set_buildid(int64_t value);
  private:
  int64_t _internal_buildid() const;
  void _internal_set_buildid(int64_t value);
  public:

  // int64 nodeID = 7;
  void clear_nodeid();
  int64_t nodeid() const;
  void set_nodeid(int64_t value);
  private:
  int64_t _internal_nodeid() const;
  void _internal_set_nodeid(int64_t value);
  public:

  // int64 index_version = 8;
  void clear_index_version();
  int64_t index_version() const;
  void set_index_version(int64_t value);
  private:
  int64_t _internal_index_version() const;
  void _internal_set_index_version(int64_t value);
  public:

  // .milvus.proto.common.IndexState state = 9;
  void clear_state();
  ::milvus::proto::common::IndexState state() const;
  void set_state(::milvus::proto::common::IndexState value);
  private:
  ::milvus::proto::common::IndexState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::IndexState value);
  public:

  // bool deleted = 12;
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // bool write_handoff = 15;
  void clear_write_handoff();
  bool write_handoff() const;
  void set_write_handoff(bool value);
  private:
  bool _internal_write_handoff() const;
  void _internal_set_write_handoff(bool value);
  public:

  // uint64 create_time = 13;
  void clear_create_time();
  uint64_t create_time() const;
  void set_create_time(uint64_t value);
  private:
  uint64_t _internal_create_time() const;
  void _internal_set_create_time(uint64_t value);
  public:

  // uint64 serialize_size = 14;
  void clear_serialize_size();
  uint64_t serialize_size() const;
  void set_serialize_size(uint64_t value);
  private:
  uint64_t _internal_serialize_size() const;
  void _internal_set_serialize_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.SegmentIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> index_file_keys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fail_reason_;
    int64_t collectionid_;
    int64_t partitionid_;
    int64_t segmentid_;
    int64_t num_rows_;
    int64_t indexid_;
    int64_t buildid_;
    int64_t nodeid_;
    int64_t index_version_;
    int state_;
    bool deleted_;
    bool write_handoff_;
    uint64_t create_time_;
    uint64_t serialize_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class RegisterNodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.RegisterNodeRequest) */ {
 public:
  inline RegisterNodeRequest() : RegisterNodeRequest(nullptr) {}
  ~RegisterNodeRequest() override;
  explicit PROTOBUF_CONSTEXPR RegisterNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterNodeRequest(const RegisterNodeRequest& from);
  RegisterNodeRequest(RegisterNodeRequest&& from) noexcept
    : RegisterNodeRequest() {
    *this = ::std::move(from);
  }

  inline RegisterNodeRequest& operator=(const RegisterNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterNodeRequest& operator=(RegisterNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterNodeRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterNodeRequest*>(
               &_RegisterNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterNodeRequest& a, RegisterNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterNodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterNodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterNodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterNodeRequest& from) {
    RegisterNodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterNodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.RegisterNodeRequest";
  }
  protected:
  explicit RegisterNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kAddressFieldNumber = 2,
    kNodeIDFieldNumber = 3,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.common.Address address = 2;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::milvus::proto::common::Address& address() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Address* release_address();
  ::milvus::proto::common::Address* mutable_address();
  void set_allocated_address(::milvus::proto::common::Address* address);
  private:
  const ::milvus::proto::common::Address& _internal_address() const;
  ::milvus::proto::common::Address* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::milvus::proto::common::Address* address);
  ::milvus::proto::common::Address* unsafe_arena_release_address();

  // int64 nodeID = 3;
  void clear_nodeid();
  int64_t nodeid() const;
  void set_nodeid(int64_t value);
  private:
  int64_t _internal_nodeid() const;
  void _internal_set_nodeid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.RegisterNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::common::Address* address_;
    int64_t nodeid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class RegisterNodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.RegisterNodeResponse) */ {
 public:
  inline RegisterNodeResponse() : RegisterNodeResponse(nullptr) {}
  ~RegisterNodeResponse() override;
  explicit PROTOBUF_CONSTEXPR RegisterNodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterNodeResponse(const RegisterNodeResponse& from);
  RegisterNodeResponse(RegisterNodeResponse&& from) noexcept
    : RegisterNodeResponse() {
    *this = ::std::move(from);
  }

  inline RegisterNodeResponse& operator=(const RegisterNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterNodeResponse& operator=(RegisterNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterNodeResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterNodeResponse*>(
               &_RegisterNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterNodeResponse& a, RegisterNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterNodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterNodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterNodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterNodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterNodeResponse& from) {
    RegisterNodeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterNodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.RegisterNodeResponse";
  }
  protected:
  explicit RegisterNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kInitParamsFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // .milvus.proto.internal.InitParams init_params = 2;
  bool has_init_params() const;
  private:
  bool _internal_has_init_params() const;
  public:
  void clear_init_params();
  const ::milvus::proto::internal::InitParams& init_params() const;
  PROTOBUF_NODISCARD ::milvus::proto::internal::InitParams* release_init_params();
  ::milvus::proto::internal::InitParams* mutable_init_params();
  void set_allocated_init_params(::milvus::proto::internal::InitParams* init_params);
  private:
  const ::milvus::proto::internal::InitParams& _internal_init_params() const;
  ::milvus::proto::internal::InitParams* _internal_mutable_init_params();
  public:
  void unsafe_arena_set_allocated_init_params(
      ::milvus::proto::internal::InitParams* init_params);
  ::milvus::proto::internal::InitParams* unsafe_arena_release_init_params();

  // @@protoc_insertion_point(class_scope:milvus.proto.index.RegisterNodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    ::milvus::proto::internal::InitParams* init_params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetIndexStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.GetIndexStateRequest) */ {
 public:
  inline GetIndexStateRequest() : GetIndexStateRequest(nullptr) {}
  ~GetIndexStateRequest() override;
  explicit PROTOBUF_CONSTEXPR GetIndexStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIndexStateRequest(const GetIndexStateRequest& from);
  GetIndexStateRequest(GetIndexStateRequest&& from) noexcept
    : GetIndexStateRequest() {
    *this = ::std::move(from);
  }

  inline GetIndexStateRequest& operator=(const GetIndexStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexStateRequest& operator=(GetIndexStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIndexStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIndexStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetIndexStateRequest*>(
               &_GetIndexStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetIndexStateRequest& a, GetIndexStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIndexStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIndexStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIndexStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIndexStateRequest& from) {
    GetIndexStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.GetIndexStateRequest";
  }
  protected:
  explicit GetIndexStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexNameFieldNumber = 2,
    kCollectionIDFieldNumber = 1,
  };
  // string index_name = 2;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.GetIndexStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetIndexStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.GetIndexStateResponse) */ {
 public:
  inline GetIndexStateResponse() : GetIndexStateResponse(nullptr) {}
  ~GetIndexStateResponse() override;
  explicit PROTOBUF_CONSTEXPR GetIndexStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIndexStateResponse(const GetIndexStateResponse& from);
  GetIndexStateResponse(GetIndexStateResponse&& from) noexcept
    : GetIndexStateResponse() {
    *this = ::std::move(from);
  }

  inline GetIndexStateResponse& operator=(const GetIndexStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexStateResponse& operator=(GetIndexStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIndexStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIndexStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetIndexStateResponse*>(
               &_GetIndexStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetIndexStateResponse& a, GetIndexStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIndexStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIndexStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIndexStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIndexStateResponse& from) {
    GetIndexStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.GetIndexStateResponse";
  }
  protected:
  explicit GetIndexStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailReasonFieldNumber = 3,
    kStatusFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string fail_reason = 3;
  void clear_fail_reason();
  const std::string& fail_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fail_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fail_reason();
  PROTOBUF_NODISCARD std::string* release_fail_reason();
  void set_allocated_fail_reason(std::string* fail_reason);
  private:
  const std::string& _internal_fail_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fail_reason(const std::string& value);
  std::string* _internal_mutable_fail_reason();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // .milvus.proto.common.IndexState state = 2;
  void clear_state();
  ::milvus::proto::common::IndexState state() const;
  void set_state(::milvus::proto::common::IndexState value);
  private:
  ::milvus::proto::common::IndexState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::IndexState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.GetIndexStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fail_reason_;
    ::milvus::proto::common::Status* status_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetSegmentIndexStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.GetSegmentIndexStateRequest) */ {
 public:
  inline GetSegmentIndexStateRequest() : GetSegmentIndexStateRequest(nullptr) {}
  ~GetSegmentIndexStateRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSegmentIndexStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSegmentIndexStateRequest(const GetSegmentIndexStateRequest& from);
  GetSegmentIndexStateRequest(GetSegmentIndexStateRequest&& from) noexcept
    : GetSegmentIndexStateRequest() {
    *this = ::std::move(from);
  }

  inline GetSegmentIndexStateRequest& operator=(const GetSegmentIndexStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSegmentIndexStateRequest& operator=(GetSegmentIndexStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSegmentIndexStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSegmentIndexStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetSegmentIndexStateRequest*>(
               &_GetSegmentIndexStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetSegmentIndexStateRequest& a, GetSegmentIndexStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSegmentIndexStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSegmentIndexStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSegmentIndexStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSegmentIndexStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSegmentIndexStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSegmentIndexStateRequest& from) {
    GetSegmentIndexStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSegmentIndexStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.GetSegmentIndexStateRequest";
  }
  protected:
  explicit GetSegmentIndexStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDsFieldNumber = 3,
    kIndexNameFieldNumber = 2,
    kCollectionIDFieldNumber = 1,
  };
  // repeated int64 segmentIDs = 3;
  int segmentids_size() const;
  private:
  int _internal_segmentids_size() const;
  public:
  void clear_segmentids();
  private:
  int64_t _internal_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segmentids() const;
  void _internal_add_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segmentids();
  public:
  int64_t segmentids(int index) const;
  void set_segmentids(int index, int64_t value);
  void add_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segmentids();

  // string index_name = 2;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.GetSegmentIndexStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segmentids_;
    mutable std::atomic<int> _segmentids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SegmentIndexState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.SegmentIndexState) */ {
 public:
  inline SegmentIndexState() : SegmentIndexState(nullptr) {}
  ~SegmentIndexState() override;
  explicit PROTOBUF_CONSTEXPR SegmentIndexState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentIndexState(const SegmentIndexState& from);
  SegmentIndexState(SegmentIndexState&& from) noexcept
    : SegmentIndexState() {
    *this = ::std::move(from);
  }

  inline SegmentIndexState& operator=(const SegmentIndexState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentIndexState& operator=(SegmentIndexState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentIndexState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentIndexState* internal_default_instance() {
    return reinterpret_cast<const SegmentIndexState*>(
               &_SegmentIndexState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SegmentIndexState& a, SegmentIndexState& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentIndexState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentIndexState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentIndexState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentIndexState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentIndexState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentIndexState& from) {
    SegmentIndexState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentIndexState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.SegmentIndexState";
  }
  protected:
  explicit SegmentIndexState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailReasonFieldNumber = 3,
    kSegmentIDFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string fail_reason = 3;
  void clear_fail_reason();
  const std::string& fail_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fail_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fail_reason();
  PROTOBUF_NODISCARD std::string* release_fail_reason();
  void set_allocated_fail_reason(std::string* fail_reason);
  private:
  const std::string& _internal_fail_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fail_reason(const std::string& value);
  std::string* _internal_mutable_fail_reason();
  public:

  // int64 segmentID = 1;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // .milvus.proto.common.IndexState state = 2;
  void clear_state();
  ::milvus::proto::common::IndexState state() const;
  void set_state(::milvus::proto::common::IndexState value);
  private:
  ::milvus::proto::common::IndexState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::IndexState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.SegmentIndexState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fail_reason_;
    int64_t segmentid_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetSegmentIndexStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.GetSegmentIndexStateResponse) */ {
 public:
  inline GetSegmentIndexStateResponse() : GetSegmentIndexStateResponse(nullptr) {}
  ~GetSegmentIndexStateResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSegmentIndexStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSegmentIndexStateResponse(const GetSegmentIndexStateResponse& from);
  GetSegmentIndexStateResponse(GetSegmentIndexStateResponse&& from) noexcept
    : GetSegmentIndexStateResponse() {
    *this = ::std::move(from);
  }

  inline GetSegmentIndexStateResponse& operator=(const GetSegmentIndexStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSegmentIndexStateResponse& operator=(GetSegmentIndexStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSegmentIndexStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSegmentIndexStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetSegmentIndexStateResponse*>(
               &_GetSegmentIndexStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetSegmentIndexStateResponse& a, GetSegmentIndexStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSegmentIndexStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSegmentIndexStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSegmentIndexStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSegmentIndexStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSegmentIndexStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSegmentIndexStateResponse& from) {
    GetSegmentIndexStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSegmentIndexStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.GetSegmentIndexStateResponse";
  }
  protected:
  explicit GetSegmentIndexStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.index.SegmentIndexState states = 2;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::milvus::proto::index::SegmentIndexState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::SegmentIndexState >*
      mutable_states();
  private:
  const ::milvus::proto::index::SegmentIndexState& _internal_states(int index) const;
  ::milvus::proto::index::SegmentIndexState* _internal_add_states();
  public:
  const ::milvus::proto::index::SegmentIndexState& states(int index) const;
  ::milvus::proto::index::SegmentIndexState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::SegmentIndexState >&
      states() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.index.GetSegmentIndexStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::SegmentIndexState > states_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class CreateIndexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.CreateIndexRequest) */ {
 public:
  inline CreateIndexRequest() : CreateIndexRequest(nullptr) {}
  ~CreateIndexRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateIndexRequest(const CreateIndexRequest& from);
  CreateIndexRequest(CreateIndexRequest&& from) noexcept
    : CreateIndexRequest() {
    *this = ::std::move(from);
  }

  inline CreateIndexRequest& operator=(const CreateIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIndexRequest& operator=(CreateIndexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateIndexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateIndexRequest* internal_default_instance() {
    return reinterpret_cast<const CreateIndexRequest*>(
               &_CreateIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CreateIndexRequest& a, CreateIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateIndexRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateIndexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateIndexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateIndexRequest& from) {
    CreateIndexRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateIndexRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.CreateIndexRequest";
  }
  protected:
  explicit CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeParamsFieldNumber = 4,
    kIndexParamsFieldNumber = 5,
    kUserIndexParamsFieldNumber = 8,
    kIndexNameFieldNumber = 3,
    kCollectionIDFieldNumber = 1,
    kFieldIDFieldNumber = 2,
    kTimestampFieldNumber = 6,
    kIsAutoIndexFieldNumber = 7,
  };
  // repeated .milvus.proto.common.KeyValuePair type_params = 4;
  int type_params_size() const;
  private:
  int _internal_type_params_size() const;
  public:
  void clear_type_params();
  ::milvus::proto::common::KeyValuePair* mutable_type_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_type_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_type_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_type_params();
  public:
  const ::milvus::proto::common::KeyValuePair& type_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_type_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      type_params() const;

  // repeated .milvus.proto.common.KeyValuePair index_params = 5;
  int index_params_size() const;
  private:
  int _internal_index_params_size() const;
  public:
  void clear_index_params();
  ::milvus::proto::common::KeyValuePair* mutable_index_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_index_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_index_params();
  public:
  const ::milvus::proto::common::KeyValuePair& index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_index_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      index_params() const;

  // repeated .milvus.proto.common.KeyValuePair user_index_params = 8;
  int user_index_params_size() const;
  private:
  int _internal_user_index_params_size() const;
  public:
  void clear_user_index_params();
  ::milvus::proto::common::KeyValuePair* mutable_user_index_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_user_index_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_user_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_user_index_params();
  public:
  const ::milvus::proto::common::KeyValuePair& user_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_user_index_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      user_index_params() const;

  // string index_name = 3;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 fieldID = 2;
  void clear_fieldid();
  int64_t fieldid() const;
  void set_fieldid(int64_t value);
  private:
  int64_t _internal_fieldid() const;
  void _internal_set_fieldid(int64_t value);
  public:

  // uint64 timestamp = 6;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // bool is_auto_index = 7;
  void clear_is_auto_index();
  bool is_auto_index() const;
  void set_is_auto_index(bool value);
  private:
  bool _internal_is_auto_index() const;
  void _internal_set_is_auto_index(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.CreateIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > type_params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > index_params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > user_index_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    int64_t collectionid_;
    int64_t fieldid_;
    uint64_t timestamp_;
    bool is_auto_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetIndexInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.GetIndexInfoRequest) */ {
 public:
  inline GetIndexInfoRequest() : GetIndexInfoRequest(nullptr) {}
  ~GetIndexInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetIndexInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIndexInfoRequest(const GetIndexInfoRequest& from);
  GetIndexInfoRequest(GetIndexInfoRequest&& from) noexcept
    : GetIndexInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetIndexInfoRequest& operator=(const GetIndexInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexInfoRequest& operator=(GetIndexInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIndexInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIndexInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetIndexInfoRequest*>(
               &_GetIndexInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetIndexInfoRequest& a, GetIndexInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIndexInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIndexInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIndexInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIndexInfoRequest& from) {
    GetIndexInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.GetIndexInfoRequest";
  }
  protected:
  explicit GetIndexInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDsFieldNumber = 2,
    kIndexNameFieldNumber = 3,
    kCollectionIDFieldNumber = 1,
  };
  // repeated int64 segmentIDs = 2;
  int segmentids_size() const;
  private:
  int _internal_segmentids_size() const;
  public:
  void clear_segmentids();
  private:
  int64_t _internal_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segmentids() const;
  void _internal_add_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segmentids();
  public:
  int64_t segmentids(int index) const;
  void set_segmentids(int index, int64_t value);
  void add_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segmentids();

  // string index_name = 3;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.GetIndexInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segmentids_;
    mutable std::atomic<int> _segmentids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class IndexFilePathInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.IndexFilePathInfo) */ {
 public:
  inline IndexFilePathInfo() : IndexFilePathInfo(nullptr) {}
  ~IndexFilePathInfo() override;
  explicit PROTOBUF_CONSTEXPR IndexFilePathInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexFilePathInfo(const IndexFilePathInfo& from);
  IndexFilePathInfo(IndexFilePathInfo&& from) noexcept
    : IndexFilePathInfo() {
    *this = ::std::move(from);
  }

  inline IndexFilePathInfo& operator=(const IndexFilePathInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexFilePathInfo& operator=(IndexFilePathInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexFilePathInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexFilePathInfo* internal_default_instance() {
    return reinterpret_cast<const IndexFilePathInfo*>(
               &_IndexFilePathInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IndexFilePathInfo& a, IndexFilePathInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexFilePathInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexFilePathInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexFilePathInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexFilePathInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexFilePathInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexFilePathInfo& from) {
    IndexFilePathInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexFilePathInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.IndexFilePathInfo";
  }
  protected:
  explicit IndexFilePathInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexParamsFieldNumber = 6,
    kIndexFilePathsFieldNumber = 7,
    kIndexNameFieldNumber = 5,
    kSegmentIDFieldNumber = 1,
    kFieldIDFieldNumber = 2,
    kIndexIDFieldNumber = 3,
    kBuildIDFieldNumber = 4,
    kSerializedSizeFieldNumber = 8,
    kIndexVersionFieldNumber = 9,
    kNumRowsFieldNumber = 10,
  };
  // repeated .milvus.proto.common.KeyValuePair index_params = 6;
  int index_params_size() const;
  private:
  int _internal_index_params_size() const;
  public:
  void clear_index_params();
  ::milvus::proto::common::KeyValuePair* mutable_index_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_index_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_index_params();
  public:
  const ::milvus::proto::common::KeyValuePair& index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_index_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      index_params() const;

  // repeated string index_file_paths = 7;
  int index_file_paths_size() const;
  private:
  int _internal_index_file_paths_size() const;
  public:
  void clear_index_file_paths();
  const std::string& index_file_paths(int index) const;
  std::string* mutable_index_file_paths(int index);
  void set_index_file_paths(int index, const std::string& value);
  void set_index_file_paths(int index, std::string&& value);
  void set_index_file_paths(int index, const char* value);
  void set_index_file_paths(int index, const char* value, size_t size);
  std::string* add_index_file_paths();
  void add_index_file_paths(const std::string& value);
  void add_index_file_paths(std::string&& value);
  void add_index_file_paths(const char* value);
  void add_index_file_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& index_file_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_index_file_paths();
  private:
  const std::string& _internal_index_file_paths(int index) const;
  std::string* _internal_add_index_file_paths();
  public:

  // string index_name = 5;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // int64 segmentID = 1;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // int64 fieldID = 2;
  void clear_fieldid();
  int64_t fieldid() const;
  void set_fieldid(int64_t value);
  private:
  int64_t _internal_fieldid() const;
  void _internal_set_fieldid(int64_t value);
  public:

  // int64 indexID = 3;
  void clear_indexid();
  int64_t indexid() const;
  void set_indexid(int64_t value);
  private:
  int64_t _internal_indexid() const;
  void _internal_set_indexid(int64_t value);
  public:

  // int64 buildID = 4;
  void clear_buildid();
  int64_t buildid() const;
  void set_buildid(int64_t value);
  private:
  int64_t _internal_buildid() const;
  void _internal_set_buildid(int64_t value);
  public:

  // uint64 serialized_size = 8;
  void clear_serialized_size();
  uint64_t serialized_size() const;
  void set_serialized_size(uint64_t value);
  private:
  uint64_t _internal_serialized_size() const;
  void _internal_set_serialized_size(uint64_t value);
  public:

  // int64 index_version = 9;
  void clear_index_version();
  int64_t index_version() const;
  void set_index_version(int64_t value);
  private:
  int64_t _internal_index_version() const;
  void _internal_set_index_version(int64_t value);
  public:

  // int64 num_rows = 10;
  void clear_num_rows();
  int64_t num_rows() const;
  void set_num_rows(int64_t value);
  private:
  int64_t _internal_num_rows() const;
  void _internal_set_num_rows(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.IndexFilePathInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > index_params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> index_file_paths_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    int64_t segmentid_;
    int64_t fieldid_;
    int64_t indexid_;
    int64_t buildid_;
    uint64_t serialized_size_;
    int64_t index_version_;
    int64_t num_rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class SegmentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.SegmentInfo) */ {
 public:
  inline SegmentInfo() : SegmentInfo(nullptr) {}
  ~SegmentInfo() override;
  explicit PROTOBUF_CONSTEXPR SegmentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentInfo(const SegmentInfo& from);
  SegmentInfo(SegmentInfo&& from) noexcept
    : SegmentInfo() {
    *this = ::std::move(from);
  }

  inline SegmentInfo& operator=(const SegmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentInfo& operator=(SegmentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentInfo* internal_default_instance() {
    return reinterpret_cast<const SegmentInfo*>(
               &_SegmentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SegmentInfo& a, SegmentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentInfo& from) {
    SegmentInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.SegmentInfo";
  }
  protected:
  explicit SegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexInfosFieldNumber = 4,
    kCollectionIDFieldNumber = 1,
    kSegmentIDFieldNumber = 2,
    kEnableIndexFieldNumber = 3,
  };
  // repeated .milvus.proto.index.IndexFilePathInfo index_infos = 4;
  int index_infos_size() const;
  private:
  int _internal_index_infos_size() const;
  public:
  void clear_index_infos();
  ::milvus::proto::index::IndexFilePathInfo* mutable_index_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexFilePathInfo >*
      mutable_index_infos();
  private:
  const ::milvus::proto::index::IndexFilePathInfo& _internal_index_infos(int index) const;
  ::milvus::proto::index::IndexFilePathInfo* _internal_add_index_infos();
  public:
  const ::milvus::proto::index::IndexFilePathInfo& index_infos(int index) const;
  ::milvus::proto::index::IndexFilePathInfo* add_index_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexFilePathInfo >&
      index_infos() const;

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 segmentID = 2;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // bool enable_index = 3;
  void clear_enable_index();
  bool enable_index() const;
  void set_enable_index(bool value);
  private:
  bool _internal_enable_index() const;
  void _internal_set_enable_index(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.SegmentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexFilePathInfo > index_infos_;
    int64_t collectionid_;
    int64_t segmentid_;
    bool enable_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetIndexInfoResponse_SegmentInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetIndexInfoResponse_SegmentInfoEntry_DoNotUse, 
    int64_t, ::milvus::proto::index::SegmentInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetIndexInfoResponse_SegmentInfoEntry_DoNotUse, 
    int64_t, ::milvus::proto::index::SegmentInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  GetIndexInfoResponse_SegmentInfoEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetIndexInfoResponse_SegmentInfoEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetIndexInfoResponse_SegmentInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetIndexInfoResponse_SegmentInfoEntry_DoNotUse& other);
  static const GetIndexInfoResponse_SegmentInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetIndexInfoResponse_SegmentInfoEntry_DoNotUse*>(&_GetIndexInfoResponse_SegmentInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_index_5fcoord_2eproto;
};

// -------------------------------------------------------------------

class GetIndexInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.GetIndexInfoResponse) */ {
 public:
  inline GetIndexInfoResponse() : GetIndexInfoResponse(nullptr) {}
  ~GetIndexInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetIndexInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIndexInfoResponse(const GetIndexInfoResponse& from);
  GetIndexInfoResponse(GetIndexInfoResponse&& from) noexcept
    : GetIndexInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetIndexInfoResponse& operator=(const GetIndexInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexInfoResponse& operator=(GetIndexInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIndexInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIndexInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetIndexInfoResponse*>(
               &_GetIndexInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetIndexInfoResponse& a, GetIndexInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIndexInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIndexInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIndexInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIndexInfoResponse& from) {
    GetIndexInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.GetIndexInfoResponse";
  }
  protected:
  explicit GetIndexInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSegmentInfoFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // map<int64, .milvus.proto.index.SegmentInfo> segment_info = 2;
  int segment_info_size() const;
  private:
  int _internal_segment_info_size() const;
  public:
  void clear_segment_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::milvus::proto::index::SegmentInfo >&
      _internal_segment_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::milvus::proto::index::SegmentInfo >*
      _internal_mutable_segment_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::milvus::proto::index::SegmentInfo >&
      segment_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::milvus::proto::index::SegmentInfo >*
      mutable_segment_info();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.index.GetIndexInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GetIndexInfoResponse_SegmentInfoEntry_DoNotUse,
        int64_t, ::milvus::proto::index::SegmentInfo,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> segment_info_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class DropIndexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.DropIndexRequest) */ {
 public:
  inline DropIndexRequest() : DropIndexRequest(nullptr) {}
  ~DropIndexRequest() override;
  explicit PROTOBUF_CONSTEXPR DropIndexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropIndexRequest(const DropIndexRequest& from);
  DropIndexRequest(DropIndexRequest&& from) noexcept
    : DropIndexRequest() {
    *this = ::std::move(from);
  }

  inline DropIndexRequest& operator=(const DropIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropIndexRequest& operator=(DropIndexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropIndexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropIndexRequest* internal_default_instance() {
    return reinterpret_cast<const DropIndexRequest*>(
               &_DropIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DropIndexRequest& a, DropIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropIndexRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropIndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropIndexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropIndexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropIndexRequest& from) {
    DropIndexRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropIndexRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.DropIndexRequest";
  }
  protected:
  explicit DropIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionIDsFieldNumber = 2,
    kIndexNameFieldNumber = 3,
    kCollectionIDFieldNumber = 1,
    kDropAllFieldNumber = 4,
  };
  // repeated int64 partitionIDs = 2;
  int partitionids_size() const;
  private:
  int _internal_partitionids_size() const;
  public:
  void clear_partitionids();
  private:
  int64_t _internal_partitionids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_partitionids() const;
  void _internal_add_partitionids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_partitionids();
  public:
  int64_t partitionids(int index) const;
  void set_partitionids(int index, int64_t value);
  void add_partitionids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      partitionids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_partitionids();

  // string index_name = 3;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // bool drop_all = 4;
  void clear_drop_all();
  bool drop_all() const;
  void set_drop_all(bool value);
  private:
  bool _internal_drop_all() const;
  void _internal_set_drop_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.DropIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > partitionids_;
    mutable std::atomic<int> _partitionids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    int64_t collectionid_;
    bool drop_all_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class DescribeIndexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.DescribeIndexRequest) */ {
 public:
  inline DescribeIndexRequest() : DescribeIndexRequest(nullptr) {}
  ~DescribeIndexRequest() override;
  explicit PROTOBUF_CONSTEXPR DescribeIndexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescribeIndexRequest(const DescribeIndexRequest& from);
  DescribeIndexRequest(DescribeIndexRequest&& from) noexcept
    : DescribeIndexRequest() {
    *this = ::std::move(from);
  }

  inline DescribeIndexRequest& operator=(const DescribeIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeIndexRequest& operator=(DescribeIndexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescribeIndexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DescribeIndexRequest* internal_default_instance() {
    return reinterpret_cast<const DescribeIndexRequest*>(
               &_DescribeIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DescribeIndexRequest& a, DescribeIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeIndexRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeIndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescribeIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescribeIndexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescribeIndexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescribeIndexRequest& from) {
    DescribeIndexRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeIndexRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.DescribeIndexRequest";
  }
  protected:
  explicit DescribeIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexNameFieldNumber = 2,
    kCollectionIDFieldNumber = 1,
  };
  // string index_name = 2;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.DescribeIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class DescribeIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.DescribeIndexResponse) */ {
 public:
  inline DescribeIndexResponse() : DescribeIndexResponse(nullptr) {}
  ~DescribeIndexResponse() override;
  explicit PROTOBUF_CONSTEXPR DescribeIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescribeIndexResponse(const DescribeIndexResponse& from);
  DescribeIndexResponse(DescribeIndexResponse&& from) noexcept
    : DescribeIndexResponse() {
    *this = ::std::move(from);
  }

  inline DescribeIndexResponse& operator=(const DescribeIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeIndexResponse& operator=(DescribeIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescribeIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DescribeIndexResponse* internal_default_instance() {
    return reinterpret_cast<const DescribeIndexResponse*>(
               &_DescribeIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DescribeIndexResponse& a, DescribeIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeIndexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescribeIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescribeIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescribeIndexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescribeIndexResponse& from) {
    DescribeIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeIndexResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.DescribeIndexResponse";
  }
  protected:
  explicit DescribeIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexInfosFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.index.IndexInfo index_infos = 2;
  int index_infos_size() const;
  private:
  int _internal_index_infos_size() const;
  public:
  void clear_index_infos();
  ::milvus::proto::index::IndexInfo* mutable_index_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexInfo >*
      mutable_index_infos();
  private:
  const ::milvus::proto::index::IndexInfo& _internal_index_infos(int index) const;
  ::milvus::proto::index::IndexInfo* _internal_add_index_infos();
  public:
  const ::milvus::proto::index::IndexInfo& index_infos(int index) const;
  ::milvus::proto::index::IndexInfo* add_index_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexInfo >&
      index_infos() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.index.DescribeIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexInfo > index_infos_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetIndexBuildProgressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.GetIndexBuildProgressRequest) */ {
 public:
  inline GetIndexBuildProgressRequest() : GetIndexBuildProgressRequest(nullptr) {}
  ~GetIndexBuildProgressRequest() override;
  explicit PROTOBUF_CONSTEXPR GetIndexBuildProgressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIndexBuildProgressRequest(const GetIndexBuildProgressRequest& from);
  GetIndexBuildProgressRequest(GetIndexBuildProgressRequest&& from) noexcept
    : GetIndexBuildProgressRequest() {
    *this = ::std::move(from);
  }

  inline GetIndexBuildProgressRequest& operator=(const GetIndexBuildProgressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexBuildProgressRequest& operator=(GetIndexBuildProgressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIndexBuildProgressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIndexBuildProgressRequest* internal_default_instance() {
    return reinterpret_cast<const GetIndexBuildProgressRequest*>(
               &_GetIndexBuildProgressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetIndexBuildProgressRequest& a, GetIndexBuildProgressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexBuildProgressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexBuildProgressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIndexBuildProgressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIndexBuildProgressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIndexBuildProgressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIndexBuildProgressRequest& from) {
    GetIndexBuildProgressRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexBuildProgressRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.GetIndexBuildProgressRequest";
  }
  protected:
  explicit GetIndexBuildProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexNameFieldNumber = 2,
    kCollectionIDFieldNumber = 1,
  };
  // string index_name = 2;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.GetIndexBuildProgressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetIndexBuildProgressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.GetIndexBuildProgressResponse) */ {
 public:
  inline GetIndexBuildProgressResponse() : GetIndexBuildProgressResponse(nullptr) {}
  ~GetIndexBuildProgressResponse() override;
  explicit PROTOBUF_CONSTEXPR GetIndexBuildProgressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIndexBuildProgressResponse(const GetIndexBuildProgressResponse& from);
  GetIndexBuildProgressResponse(GetIndexBuildProgressResponse&& from) noexcept
    : GetIndexBuildProgressResponse() {
    *this = ::std::move(from);
  }

  inline GetIndexBuildProgressResponse& operator=(const GetIndexBuildProgressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexBuildProgressResponse& operator=(GetIndexBuildProgressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIndexBuildProgressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIndexBuildProgressResponse* internal_default_instance() {
    return reinterpret_cast<const GetIndexBuildProgressResponse*>(
               &_GetIndexBuildProgressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetIndexBuildProgressResponse& a, GetIndexBuildProgressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexBuildProgressResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexBuildProgressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIndexBuildProgressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIndexBuildProgressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIndexBuildProgressResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIndexBuildProgressResponse& from) {
    GetIndexBuildProgressResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexBuildProgressResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.GetIndexBuildProgressResponse";
  }
  protected:
  explicit GetIndexBuildProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kIndexedRowsFieldNumber = 2,
    kTotalRowsFieldNumber = 3,
    kPendingIndexRowsFieldNumber = 4,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // int64 indexed_rows = 2;
  void clear_indexed_rows();
  int64_t indexed_rows() const;
  void set_indexed_rows(int64_t value);
  private:
  int64_t _internal_indexed_rows() const;
  void _internal_set_indexed_rows(int64_t value);
  public:

  // int64 total_rows = 3;
  void clear_total_rows();
  int64_t total_rows() const;
  void set_total_rows(int64_t value);
  private:
  int64_t _internal_total_rows() const;
  void _internal_set_total_rows(int64_t value);
  public:

  // int64 pending_index_rows = 4;
  void clear_pending_index_rows();
  int64_t pending_index_rows() const;
  void set_pending_index_rows(int64_t value);
  private:
  int64_t _internal_pending_index_rows() const;
  void _internal_set_pending_index_rows(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.GetIndexBuildProgressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    int64_t indexed_rows_;
    int64_t total_rows_;
    int64_t pending_index_rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class StorageConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.StorageConfig) */ {
 public:
  inline StorageConfig() : StorageConfig(nullptr) {}
  ~StorageConfig() override;
  explicit PROTOBUF_CONSTEXPR StorageConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StorageConfig(const StorageConfig& from);
  StorageConfig(StorageConfig&& from) noexcept
    : StorageConfig() {
    *this = ::std::move(from);
  }

  inline StorageConfig& operator=(const StorageConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageConfig& operator=(StorageConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StorageConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageConfig* internal_default_instance() {
    return reinterpret_cast<const StorageConfig*>(
               &_StorageConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StorageConfig& a, StorageConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StorageConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StorageConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StorageConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StorageConfig& from) {
    StorageConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.StorageConfig";
  }
  protected:
  explicit StorageConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kAccessKeyIDFieldNumber = 2,
    kSecretAccessKeyFieldNumber = 3,
    kBucketNameFieldNumber = 5,
    kRootPathFieldNumber = 6,
    kIAMEndpointFieldNumber = 8,
    kStorageTypeFieldNumber = 9,
    kUseSSLFieldNumber = 4,
    kUseIAMFieldNumber = 7,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string access_keyID = 2;
  void clear_access_keyid();
  const std::string& access_keyid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_keyid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_keyid();
  PROTOBUF_NODISCARD std::string* release_access_keyid();
  void set_allocated_access_keyid(std::string* access_keyid);
  private:
  const std::string& _internal_access_keyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_keyid(const std::string& value);
  std::string* _internal_mutable_access_keyid();
  public:

  // string secret_access_key = 3;
  void clear_secret_access_key();
  const std::string& secret_access_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret_access_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret_access_key();
  PROTOBUF_NODISCARD std::string* release_secret_access_key();
  void set_allocated_secret_access_key(std::string* secret_access_key);
  private:
  const std::string& _internal_secret_access_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_access_key(const std::string& value);
  std::string* _internal_mutable_secret_access_key();
  public:

  // string bucket_name = 5;
  void clear_bucket_name();
  const std::string& bucket_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket_name();
  PROTOBUF_NODISCARD std::string* release_bucket_name();
  void set_allocated_bucket_name(std::string* bucket_name);
  private:
  const std::string& _internal_bucket_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket_name(const std::string& value);
  std::string* _internal_mutable_bucket_name();
  public:

  // string root_path = 6;
  void clear_root_path();
  const std::string& root_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root_path();
  PROTOBUF_NODISCARD std::string* release_root_path();
  void set_allocated_root_path(std::string* root_path);
  private:
  const std::string& _internal_root_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_path(const std::string& value);
  std::string* _internal_mutable_root_path();
  public:

  // string IAMEndpoint = 8;
  void clear_iamendpoint();
  const std::string& iamendpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iamendpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iamendpoint();
  PROTOBUF_NODISCARD std::string* release_iamendpoint();
  void set_allocated_iamendpoint(std::string* iamendpoint);
  private:
  const std::string& _internal_iamendpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iamendpoint(const std::string& value);
  std::string* _internal_mutable_iamendpoint();
  public:

  // string storage_type = 9;
  void clear_storage_type();
  const std::string& storage_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_storage_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_storage_type();
  PROTOBUF_NODISCARD std::string* release_storage_type();
  void set_allocated_storage_type(std::string* storage_type);
  private:
  const std::string& _internal_storage_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_storage_type(const std::string& value);
  std::string* _internal_mutable_storage_type();
  public:

  // bool useSSL = 4;
  void clear_usessl();
  bool usessl() const;
  void set_usessl(bool value);
  private:
  bool _internal_usessl() const;
  void _internal_set_usessl(bool value);
  public:

  // bool useIAM = 7;
  void clear_useiam();
  bool useiam() const;
  void set_useiam(bool value);
  private:
  bool _internal_useiam() const;
  void _internal_set_useiam(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.StorageConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_keyid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_access_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iamendpoint_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_type_;
    bool usessl_;
    bool useiam_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class CreateJobRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.CreateJobRequest) */ {
 public:
  inline CreateJobRequest() : CreateJobRequest(nullptr) {}
  ~CreateJobRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateJobRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateJobRequest(const CreateJobRequest& from);
  CreateJobRequest(CreateJobRequest&& from) noexcept
    : CreateJobRequest() {
    *this = ::std::move(from);
  }

  inline CreateJobRequest& operator=(const CreateJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateJobRequest& operator=(CreateJobRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateJobRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateJobRequest* internal_default_instance() {
    return reinterpret_cast<const CreateJobRequest*>(
               &_CreateJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CreateJobRequest& a, CreateJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateJobRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateJobRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateJobRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateJobRequest& from) {
    CreateJobRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateJobRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.CreateJobRequest";
  }
  protected:
  explicit CreateJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPathsFieldNumber = 4,
    kIndexParamsFieldNumber = 9,
    kTypeParamsFieldNumber = 10,
    kClusterIDFieldNumber = 1,
    kIndexFilePrefixFieldNumber = 2,
    kIndexNameFieldNumber = 7,
    kStorageConfigFieldNumber = 8,
    kBuildIDFieldNumber = 3,
    kIndexVersionFieldNumber = 5,
    kIndexIDFieldNumber = 6,
    kNumRowsFieldNumber = 11,
  };
  // repeated string data_paths = 4;
  int data_paths_size() const;
  private:
  int _internal_data_paths_size() const;
  public:
  void clear_data_paths();
  const std::string& data_paths(int index) const;
  std::string* mutable_data_paths(int index);
  void set_data_paths(int index, const std::string& value);
  void set_data_paths(int index, std::string&& value);
  void set_data_paths(int index, const char* value);
  void set_data_paths(int index, const char* value, size_t size);
  std::string* add_data_paths();
  void add_data_paths(const std::string& value);
  void add_data_paths(std::string&& value);
  void add_data_paths(const char* value);
  void add_data_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_paths();
  private:
  const std::string& _internal_data_paths(int index) const;
  std::string* _internal_add_data_paths();
  public:

  // repeated .milvus.proto.common.KeyValuePair index_params = 9;
  int index_params_size() const;
  private:
  int _internal_index_params_size() const;
  public:
  void clear_index_params();
  ::milvus::proto::common::KeyValuePair* mutable_index_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_index_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_index_params();
  public:
  const ::milvus::proto::common::KeyValuePair& index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_index_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      index_params() const;

  // repeated .milvus.proto.common.KeyValuePair type_params = 10;
  int type_params_size() const;
  private:
  int _internal_type_params_size() const;
  public:
  void clear_type_params();
  ::milvus::proto::common::KeyValuePair* mutable_type_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_type_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_type_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_type_params();
  public:
  const ::milvus::proto::common::KeyValuePair& type_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_type_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      type_params() const;

  // string clusterID = 1;
  void clear_clusterid();
  const std::string& clusterid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clusterid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clusterid();
  PROTOBUF_NODISCARD std::string* release_clusterid();
  void set_allocated_clusterid(std::string* clusterid);
  private:
  const std::string& _internal_clusterid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clusterid(const std::string& value);
  std::string* _internal_mutable_clusterid();
  public:

  // string index_file_prefix = 2;
  void clear_index_file_prefix();
  const std::string& index_file_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_file_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_file_prefix();
  PROTOBUF_NODISCARD std::string* release_index_file_prefix();
  void set_allocated_index_file_prefix(std::string* index_file_prefix);
  private:
  const std::string& _internal_index_file_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_file_prefix(const std::string& value);
  std::string* _internal_mutable_index_file_prefix();
  public:

  // string index_name = 7;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // .milvus.proto.index.StorageConfig storage_config = 8;
  bool has_storage_config() const;
  private:
  bool _internal_has_storage_config() const;
  public:
  void clear_storage_config();
  const ::milvus::proto::index::StorageConfig& storage_config() const;
  PROTOBUF_NODISCARD ::milvus::proto::index::StorageConfig* release_storage_config();
  ::milvus::proto::index::StorageConfig* mutable_storage_config();
  void set_allocated_storage_config(::milvus::proto::index::StorageConfig* storage_config);
  private:
  const ::milvus::proto::index::StorageConfig& _internal_storage_config() const;
  ::milvus::proto::index::StorageConfig* _internal_mutable_storage_config();
  public:
  void unsafe_arena_set_allocated_storage_config(
      ::milvus::proto::index::StorageConfig* storage_config);
  ::milvus::proto::index::StorageConfig* unsafe_arena_release_storage_config();

  // int64 buildID = 3;
  void clear_buildid();
  int64_t buildid() const;
  void set_buildid(int64_t value);
  private:
  int64_t _internal_buildid() const;
  void _internal_set_buildid(int64_t value);
  public:

  // int64 index_version = 5;
  void clear_index_version();
  int64_t index_version() const;
  void set_index_version(int64_t value);
  private:
  int64_t _internal_index_version() const;
  void _internal_set_index_version(int64_t value);
  public:

  // int64 indexID = 6;
  void clear_indexid();
  int64_t indexid() const;
  void set_indexid(int64_t value);
  private:
  int64_t _internal_indexid() const;
  void _internal_set_indexid(int64_t value);
  public:

  // int64 num_rows = 11;
  void clear_num_rows();
  int64_t num_rows() const;
  void set_num_rows(int64_t value);
  private:
  int64_t _internal_num_rows() const;
  void _internal_set_num_rows(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.CreateJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_paths_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > index_params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > type_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clusterid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_file_prefix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    ::milvus::proto::index::StorageConfig* storage_config_;
    int64_t buildid_;
    int64_t index_version_;
    int64_t indexid_;
    int64_t num_rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class QueryJobsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.QueryJobsRequest) */ {
 public:
  inline QueryJobsRequest() : QueryJobsRequest(nullptr) {}
  ~QueryJobsRequest() override;
  explicit PROTOBUF_CONSTEXPR QueryJobsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryJobsRequest(const QueryJobsRequest& from);
  QueryJobsRequest(QueryJobsRequest&& from) noexcept
    : QueryJobsRequest() {
    *this = ::std::move(from);
  }

  inline QueryJobsRequest& operator=(const QueryJobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryJobsRequest& operator=(QueryJobsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryJobsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryJobsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryJobsRequest*>(
               &_QueryJobsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(QueryJobsRequest& a, QueryJobsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryJobsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryJobsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryJobsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryJobsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryJobsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryJobsRequest& from) {
    QueryJobsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryJobsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.QueryJobsRequest";
  }
  protected:
  explicit QueryJobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildIDsFieldNumber = 2,
    kClusterIDFieldNumber = 1,
  };
  // repeated int64 buildIDs = 2;
  int buildids_size() const;
  private:
  int _internal_buildids_size() const;
  public:
  void clear_buildids();
  private:
  int64_t _internal_buildids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_buildids() const;
  void _internal_add_buildids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_buildids();
  public:
  int64_t buildids(int index) const;
  void set_buildids(int index, int64_t value);
  void add_buildids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      buildids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_buildids();

  // string clusterID = 1;
  void clear_clusterid();
  const std::string& clusterid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clusterid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clusterid();
  PROTOBUF_NODISCARD std::string* release_clusterid();
  void set_allocated_clusterid(std::string* clusterid);
  private:
  const std::string& _internal_clusterid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clusterid(const std::string& value);
  std::string* _internal_mutable_clusterid();
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.QueryJobsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > buildids_;
    mutable std::atomic<int> _buildids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clusterid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class IndexTaskInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.IndexTaskInfo) */ {
 public:
  inline IndexTaskInfo() : IndexTaskInfo(nullptr) {}
  ~IndexTaskInfo() override;
  explicit PROTOBUF_CONSTEXPR IndexTaskInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexTaskInfo(const IndexTaskInfo& from);
  IndexTaskInfo(IndexTaskInfo&& from) noexcept
    : IndexTaskInfo() {
    *this = ::std::move(from);
  }

  inline IndexTaskInfo& operator=(const IndexTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexTaskInfo& operator=(IndexTaskInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexTaskInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexTaskInfo* internal_default_instance() {
    return reinterpret_cast<const IndexTaskInfo*>(
               &_IndexTaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(IndexTaskInfo& a, IndexTaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexTaskInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexTaskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexTaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexTaskInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexTaskInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexTaskInfo& from) {
    IndexTaskInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexTaskInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.IndexTaskInfo";
  }
  protected:
  explicit IndexTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFileKeysFieldNumber = 3,
    kFailReasonFieldNumber = 5,
    kBuildIDFieldNumber = 1,
    kSerializedSizeFieldNumber = 4,
    kStateFieldNumber = 2,
  };
  // repeated string index_file_keys = 3;
  int index_file_keys_size() const;
  private:
  int _internal_index_file_keys_size() const;
  public:
  void clear_index_file_keys();
  const std::string& index_file_keys(int index) const;
  std::string* mutable_index_file_keys(int index);
  void set_index_file_keys(int index, const std::string& value);
  void set_index_file_keys(int index, std::string&& value);
  void set_index_file_keys(int index, const char* value);
  void set_index_file_keys(int index, const char* value, size_t size);
  std::string* add_index_file_keys();
  void add_index_file_keys(const std::string& value);
  void add_index_file_keys(std::string&& value);
  void add_index_file_keys(const char* value);
  void add_index_file_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& index_file_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_index_file_keys();
  private:
  const std::string& _internal_index_file_keys(int index) const;
  std::string* _internal_add_index_file_keys();
  public:

  // string fail_reason = 5;
  void clear_fail_reason();
  const std::string& fail_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fail_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fail_reason();
  PROTOBUF_NODISCARD std::string* release_fail_reason();
  void set_allocated_fail_reason(std::string* fail_reason);
  private:
  const std::string& _internal_fail_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fail_reason(const std::string& value);
  std::string* _internal_mutable_fail_reason();
  public:

  // int64 buildID = 1;
  void clear_buildid();
  int64_t buildid() const;
  void set_buildid(int64_t value);
  private:
  int64_t _internal_buildid() const;
  void _internal_set_buildid(int64_t value);
  public:

  // uint64 serialized_size = 4;
  void clear_serialized_size();
  uint64_t serialized_size() const;
  void set_serialized_size(uint64_t value);
  private:
  uint64_t _internal_serialized_size() const;
  void _internal_set_serialized_size(uint64_t value);
  public:

  // .milvus.proto.common.IndexState state = 2;
  void clear_state();
  ::milvus::proto::common::IndexState state() const;
  void set_state(::milvus::proto::common::IndexState value);
  private:
  ::milvus::proto::common::IndexState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::IndexState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.IndexTaskInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> index_file_keys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fail_reason_;
    int64_t buildid_;
    uint64_t serialized_size_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class QueryJobsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.QueryJobsResponse) */ {
 public:
  inline QueryJobsResponse() : QueryJobsResponse(nullptr) {}
  ~QueryJobsResponse() override;
  explicit PROTOBUF_CONSTEXPR QueryJobsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryJobsResponse(const QueryJobsResponse& from);
  QueryJobsResponse(QueryJobsResponse&& from) noexcept
    : QueryJobsResponse() {
    *this = ::std::move(from);
  }

  inline QueryJobsResponse& operator=(const QueryJobsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryJobsResponse& operator=(QueryJobsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryJobsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryJobsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryJobsResponse*>(
               &_QueryJobsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(QueryJobsResponse& a, QueryJobsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryJobsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryJobsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryJobsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryJobsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryJobsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryJobsResponse& from) {
    QueryJobsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryJobsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.QueryJobsResponse";
  }
  protected:
  explicit QueryJobsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexInfosFieldNumber = 3,
    kClusterIDFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.index.IndexTaskInfo index_infos = 3;
  int index_infos_size() const;
  private:
  int _internal_index_infos_size() const;
  public:
  void clear_index_infos();
  ::milvus::proto::index::IndexTaskInfo* mutable_index_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexTaskInfo >*
      mutable_index_infos();
  private:
  const ::milvus::proto::index::IndexTaskInfo& _internal_index_infos(int index) const;
  ::milvus::proto::index::IndexTaskInfo* _internal_add_index_infos();
  public:
  const ::milvus::proto::index::IndexTaskInfo& index_infos(int index) const;
  ::milvus::proto::index::IndexTaskInfo* add_index_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexTaskInfo >&
      index_infos() const;

  // string clusterID = 2;
  void clear_clusterid();
  const std::string& clusterid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clusterid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clusterid();
  PROTOBUF_NODISCARD std::string* release_clusterid();
  void set_allocated_clusterid(std::string* clusterid);
  private:
  const std::string& _internal_clusterid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clusterid(const std::string& value);
  std::string* _internal_mutable_clusterid();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.index.QueryJobsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexTaskInfo > index_infos_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clusterid_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class DropJobsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.DropJobsRequest) */ {
 public:
  inline DropJobsRequest() : DropJobsRequest(nullptr) {}
  ~DropJobsRequest() override;
  explicit PROTOBUF_CONSTEXPR DropJobsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropJobsRequest(const DropJobsRequest& from);
  DropJobsRequest(DropJobsRequest&& from) noexcept
    : DropJobsRequest() {
    *this = ::std::move(from);
  }

  inline DropJobsRequest& operator=(const DropJobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropJobsRequest& operator=(DropJobsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropJobsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropJobsRequest* internal_default_instance() {
    return reinterpret_cast<const DropJobsRequest*>(
               &_DropJobsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DropJobsRequest& a, DropJobsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropJobsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropJobsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropJobsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropJobsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropJobsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropJobsRequest& from) {
    DropJobsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropJobsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.DropJobsRequest";
  }
  protected:
  explicit DropJobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildIDsFieldNumber = 2,
    kClusterIDFieldNumber = 1,
  };
  // repeated int64 buildIDs = 2;
  int buildids_size() const;
  private:
  int _internal_buildids_size() const;
  public:
  void clear_buildids();
  private:
  int64_t _internal_buildids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_buildids() const;
  void _internal_add_buildids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_buildids();
  public:
  int64_t buildids(int index) const;
  void set_buildids(int index, int64_t value);
  void add_buildids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      buildids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_buildids();

  // string clusterID = 1;
  void clear_clusterid();
  const std::string& clusterid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clusterid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clusterid();
  PROTOBUF_NODISCARD std::string* release_clusterid();
  void set_allocated_clusterid(std::string* clusterid);
  private:
  const std::string& _internal_clusterid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clusterid(const std::string& value);
  std::string* _internal_mutable_clusterid();
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.DropJobsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > buildids_;
    mutable std::atomic<int> _buildids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clusterid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class JobInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.JobInfo) */ {
 public:
  inline JobInfo() : JobInfo(nullptr) {}
  ~JobInfo() override;
  explicit PROTOBUF_CONSTEXPR JobInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobInfo(const JobInfo& from);
  JobInfo(JobInfo&& from) noexcept
    : JobInfo() {
    *this = ::std::move(from);
  }

  inline JobInfo& operator=(const JobInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobInfo& operator=(JobInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobInfo* internal_default_instance() {
    return reinterpret_cast<const JobInfo*>(
               &_JobInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(JobInfo& a, JobInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(JobInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobInfo& from) {
    JobInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.JobInfo";
  }
  protected:
  explicit JobInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexParamsFieldNumber = 5,
    kNumRowsFieldNumber = 1,
    kDimFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kPodIDFieldNumber = 6,
  };
  // repeated .milvus.proto.common.KeyValuePair index_params = 5;
  int index_params_size() const;
  private:
  int _internal_index_params_size() const;
  public:
  void clear_index_params();
  ::milvus::proto::common::KeyValuePair* mutable_index_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_index_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_index_params();
  public:
  const ::milvus::proto::common::KeyValuePair& index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_index_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      index_params() const;

  // int64 num_rows = 1;
  void clear_num_rows();
  int64_t num_rows() const;
  void set_num_rows(int64_t value);
  private:
  int64_t _internal_num_rows() const;
  void _internal_set_num_rows(int64_t value);
  public:

  // int64 dim = 2;
  void clear_dim();
  int64_t dim() const;
  void set_dim(int64_t value);
  private:
  int64_t _internal_dim() const;
  void _internal_set_dim(int64_t value);
  public:

  // int64 start_time = 3;
  void clear_start_time();
  int64_t start_time() const;
  void set_start_time(int64_t value);
  private:
  int64_t _internal_start_time() const;
  void _internal_set_start_time(int64_t value);
  public:

  // int64 end_time = 4;
  void clear_end_time();
  int64_t end_time() const;
  void set_end_time(int64_t value);
  private:
  int64_t _internal_end_time() const;
  void _internal_set_end_time(int64_t value);
  public:

  // int64 podID = 6;
  void clear_podid();
  int64_t podid() const;
  void set_podid(int64_t value);
  private:
  int64_t _internal_podid() const;
  void _internal_set_podid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.JobInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > index_params_;
    int64_t num_rows_;
    int64_t dim_;
    int64_t start_time_;
    int64_t end_time_;
    int64_t podid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetJobStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:milvus.proto.index.GetJobStatsRequest) */ {
 public:
  inline GetJobStatsRequest() : GetJobStatsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetJobStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetJobStatsRequest(const GetJobStatsRequest& from);
  GetJobStatsRequest(GetJobStatsRequest&& from) noexcept
    : GetJobStatsRequest() {
    *this = ::std::move(from);
  }

  inline GetJobStatsRequest& operator=(const GetJobStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJobStatsRequest& operator=(GetJobStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetJobStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetJobStatsRequest* internal_default_instance() {
    return reinterpret_cast<const GetJobStatsRequest*>(
               &_GetJobStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetJobStatsRequest& a, GetJobStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJobStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJobStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetJobStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetJobStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetJobStatsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetJobStatsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.GetJobStatsRequest";
  }
  protected:
  explicit GetJobStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:milvus.proto.index.GetJobStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetJobStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.GetJobStatsResponse) */ {
 public:
  inline GetJobStatsResponse() : GetJobStatsResponse(nullptr) {}
  ~GetJobStatsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetJobStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetJobStatsResponse(const GetJobStatsResponse& from);
  GetJobStatsResponse(GetJobStatsResponse&& from) noexcept
    : GetJobStatsResponse() {
    *this = ::std::move(from);
  }

  inline GetJobStatsResponse& operator=(const GetJobStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJobStatsResponse& operator=(GetJobStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetJobStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetJobStatsResponse* internal_default_instance() {
    return reinterpret_cast<const GetJobStatsResponse*>(
               &_GetJobStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetJobStatsResponse& a, GetJobStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJobStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJobStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetJobStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetJobStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetJobStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetJobStatsResponse& from) {
    GetJobStatsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJobStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.GetJobStatsResponse";
  }
  protected:
  explicit GetJobStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobInfosFieldNumber = 6,
    kStatusFieldNumber = 1,
    kTotalJobNumFieldNumber = 2,
    kInProgressJobNumFieldNumber = 3,
    kEnqueueJobNumFieldNumber = 4,
    kTaskSlotsFieldNumber = 5,
    kEnableDiskFieldNumber = 7,
  };
  // repeated .milvus.proto.index.JobInfo job_infos = 6;
  int job_infos_size() const;
  private:
  int _internal_job_infos_size() const;
  public:
  void clear_job_infos();
  ::milvus::proto::index::JobInfo* mutable_job_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::JobInfo >*
      mutable_job_infos();
  private:
  const ::milvus::proto::index::JobInfo& _internal_job_infos(int index) const;
  ::milvus::proto::index::JobInfo* _internal_add_job_infos();
  public:
  const ::milvus::proto::index::JobInfo& job_infos(int index) const;
  ::milvus::proto::index::JobInfo* add_job_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::JobInfo >&
      job_infos() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // int64 total_job_num = 2;
  void clear_total_job_num();
  int64_t total_job_num() const;
  void set_total_job_num(int64_t value);
  private:
  int64_t _internal_total_job_num() const;
  void _internal_set_total_job_num(int64_t value);
  public:

  // int64 in_progress_job_num = 3;
  void clear_in_progress_job_num();
  int64_t in_progress_job_num() const;
  void set_in_progress_job_num(int64_t value);
  private:
  int64_t _internal_in_progress_job_num() const;
  void _internal_set_in_progress_job_num(int64_t value);
  public:

  // int64 enqueue_job_num = 4;
  void clear_enqueue_job_num();
  int64_t enqueue_job_num() const;
  void set_enqueue_job_num(int64_t value);
  private:
  int64_t _internal_enqueue_job_num() const;
  void _internal_set_enqueue_job_num(int64_t value);
  public:

  // int64 task_slots = 5;
  void clear_task_slots();
  int64_t task_slots() const;
  void set_task_slots(int64_t value);
  private:
  int64_t _internal_task_slots() const;
  void _internal_set_task_slots(int64_t value);
  public:

  // bool enable_disk = 7;
  void clear_enable_disk();
  bool enable_disk() const;
  void set_enable_disk(bool value);
  private:
  bool _internal_enable_disk() const;
  void _internal_set_enable_disk(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.GetJobStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::JobInfo > job_infos_;
    ::milvus::proto::common::Status* status_;
    int64_t total_job_num_;
    int64_t in_progress_job_num_;
    int64_t enqueue_job_num_;
    int64_t task_slots_;
    bool enable_disk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetIndexStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.GetIndexStatisticsRequest) */ {
 public:
  inline GetIndexStatisticsRequest() : GetIndexStatisticsRequest(nullptr) {}
  ~GetIndexStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetIndexStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIndexStatisticsRequest(const GetIndexStatisticsRequest& from);
  GetIndexStatisticsRequest(GetIndexStatisticsRequest&& from) noexcept
    : GetIndexStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetIndexStatisticsRequest& operator=(const GetIndexStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexStatisticsRequest& operator=(GetIndexStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIndexStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIndexStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetIndexStatisticsRequest*>(
               &_GetIndexStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetIndexStatisticsRequest& a, GetIndexStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIndexStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIndexStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIndexStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIndexStatisticsRequest& from) {
    GetIndexStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.GetIndexStatisticsRequest";
  }
  protected:
  explicit GetIndexStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexNameFieldNumber = 2,
    kCollectionIDFieldNumber = 1,
  };
  // string index_name = 2;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.index.GetIndexStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// -------------------------------------------------------------------

class GetIndexStatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.index.GetIndexStatisticsResponse) */ {
 public:
  inline GetIndexStatisticsResponse() : GetIndexStatisticsResponse(nullptr) {}
  ~GetIndexStatisticsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetIndexStatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIndexStatisticsResponse(const GetIndexStatisticsResponse& from);
  GetIndexStatisticsResponse(GetIndexStatisticsResponse&& from) noexcept
    : GetIndexStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline GetIndexStatisticsResponse& operator=(const GetIndexStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexStatisticsResponse& operator=(GetIndexStatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIndexStatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIndexStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const GetIndexStatisticsResponse*>(
               &_GetIndexStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetIndexStatisticsResponse& a, GetIndexStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexStatisticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIndexStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIndexStatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIndexStatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIndexStatisticsResponse& from) {
    GetIndexStatisticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexStatisticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.index.GetIndexStatisticsResponse";
  }
  protected:
  explicit GetIndexStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexInfosFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.index.IndexInfo index_infos = 2;
  int index_infos_size() const;
  private:
  int _internal_index_infos_size() const;
  public:
  void clear_index_infos();
  ::milvus::proto::index::IndexInfo* mutable_index_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexInfo >*
      mutable_index_infos();
  private:
  const ::milvus::proto::index::IndexInfo& _internal_index_infos(int index) const;
  ::milvus::proto::index::IndexInfo* _internal_add_index_infos();
  public:
  const ::milvus::proto::index::IndexInfo& index_infos(int index) const;
  ::milvus::proto::index::IndexInfo* add_index_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexInfo >&
      index_infos() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.index.GetIndexStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexInfo > index_infos_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_5fcoord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IndexInfo

// int64 collectionID = 1;
inline void IndexInfo::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t IndexInfo::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t IndexInfo::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexInfo.collectionID)
  return _internal_collectionid();
}
inline void IndexInfo::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void IndexInfo::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexInfo.collectionID)
}

// int64 fieldID = 2;
inline void IndexInfo::clear_fieldid() {
  _impl_.fieldid_ = int64_t{0};
}
inline int64_t IndexInfo::_internal_fieldid() const {
  return _impl_.fieldid_;
}
inline int64_t IndexInfo::fieldid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexInfo.fieldID)
  return _internal_fieldid();
}
inline void IndexInfo::_internal_set_fieldid(int64_t value) {
  
  _impl_.fieldid_ = value;
}
inline void IndexInfo::set_fieldid(int64_t value) {
  _internal_set_fieldid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexInfo.fieldID)
}

// string index_name = 3;
inline void IndexInfo::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& IndexInfo::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexInfo.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexInfo::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexInfo.index_name)
}
inline std::string* IndexInfo::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.IndexInfo.index_name)
  return _s;
}
inline const std::string& IndexInfo::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void IndexInfo::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexInfo::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* IndexInfo::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.IndexInfo.index_name)
  return _impl_.index_name_.Release();
}
inline void IndexInfo::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.IndexInfo.index_name)
}

// int64 indexID = 4;
inline void IndexInfo::clear_indexid() {
  _impl_.indexid_ = int64_t{0};
}
inline int64_t IndexInfo::_internal_indexid() const {
  return _impl_.indexid_;
}
inline int64_t IndexInfo::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexInfo.indexID)
  return _internal_indexid();
}
inline void IndexInfo::_internal_set_indexid(int64_t value) {
  
  _impl_.indexid_ = value;
}
inline void IndexInfo::set_indexid(int64_t value) {
  _internal_set_indexid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexInfo.indexID)
}

// repeated .milvus.proto.common.KeyValuePair type_params = 5;
inline int IndexInfo::_internal_type_params_size() const {
  return _impl_.type_params_.size();
}
inline int IndexInfo::type_params_size() const {
  return _internal_type_params_size();
}
inline ::milvus::proto::common::KeyValuePair* IndexInfo::mutable_type_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.IndexInfo.type_params)
  return _impl_.type_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
IndexInfo::mutable_type_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.IndexInfo.type_params)
  return &_impl_.type_params_;
}
inline const ::milvus::proto::common::KeyValuePair& IndexInfo::_internal_type_params(int index) const {
  return _impl_.type_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& IndexInfo::type_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexInfo.type_params)
  return _internal_type_params(index);
}
inline ::milvus::proto::common::KeyValuePair* IndexInfo::_internal_add_type_params() {
  return _impl_.type_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* IndexInfo::add_type_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_type_params();
  // @@protoc_insertion_point(field_add:milvus.proto.index.IndexInfo.type_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
IndexInfo::type_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.IndexInfo.type_params)
  return _impl_.type_params_;
}

// repeated .milvus.proto.common.KeyValuePair index_params = 6;
inline int IndexInfo::_internal_index_params_size() const {
  return _impl_.index_params_.size();
}
inline int IndexInfo::index_params_size() const {
  return _internal_index_params_size();
}
inline ::milvus::proto::common::KeyValuePair* IndexInfo::mutable_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.IndexInfo.index_params)
  return _impl_.index_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
IndexInfo::mutable_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.IndexInfo.index_params)
  return &_impl_.index_params_;
}
inline const ::milvus::proto::common::KeyValuePair& IndexInfo::_internal_index_params(int index) const {
  return _impl_.index_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& IndexInfo::index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexInfo.index_params)
  return _internal_index_params(index);
}
inline ::milvus::proto::common::KeyValuePair* IndexInfo::_internal_add_index_params() {
  return _impl_.index_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* IndexInfo::add_index_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_index_params();
  // @@protoc_insertion_point(field_add:milvus.proto.index.IndexInfo.index_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
IndexInfo::index_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.IndexInfo.index_params)
  return _impl_.index_params_;
}

// int64 indexed_rows = 7;
inline void IndexInfo::clear_indexed_rows() {
  _impl_.indexed_rows_ = int64_t{0};
}
inline int64_t IndexInfo::_internal_indexed_rows() const {
  return _impl_.indexed_rows_;
}
inline int64_t IndexInfo::indexed_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexInfo.indexed_rows)
  return _internal_indexed_rows();
}
inline void IndexInfo::_internal_set_indexed_rows(int64_t value) {
  
  _impl_.indexed_rows_ = value;
}
inline void IndexInfo::set_indexed_rows(int64_t value) {
  _internal_set_indexed_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexInfo.indexed_rows)
}

// int64 total_rows = 8;
inline void IndexInfo::clear_total_rows() {
  _impl_.total_rows_ = int64_t{0};
}
inline int64_t IndexInfo::_internal_total_rows() const {
  return _impl_.total_rows_;
}
inline int64_t IndexInfo::total_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexInfo.total_rows)
  return _internal_total_rows();
}
inline void IndexInfo::_internal_set_total_rows(int64_t value) {
  
  _impl_.total_rows_ = value;
}
inline void IndexInfo::set_total_rows(int64_t value) {
  _internal_set_total_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexInfo.total_rows)
}

// .milvus.proto.common.IndexState state = 9;
inline void IndexInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::IndexState IndexInfo::_internal_state() const {
  return static_cast< ::milvus::proto::common::IndexState >(_impl_.state_);
}
inline ::milvus::proto::common::IndexState IndexInfo::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexInfo.state)
  return _internal_state();
}
inline void IndexInfo::_internal_set_state(::milvus::proto::common::IndexState value) {
  
  _impl_.state_ = value;
}
inline void IndexInfo::set_state(::milvus::proto::common::IndexState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexInfo.state)
}

// string index_state_fail_reason = 10;
inline void IndexInfo::clear_index_state_fail_reason() {
  _impl_.index_state_fail_reason_.ClearToEmpty();
}
inline const std::string& IndexInfo::index_state_fail_reason() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexInfo.index_state_fail_reason)
  return _internal_index_state_fail_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexInfo::set_index_state_fail_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_state_fail_reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexInfo.index_state_fail_reason)
}
inline std::string* IndexInfo::mutable_index_state_fail_reason() {
  std::string* _s = _internal_mutable_index_state_fail_reason();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.IndexInfo.index_state_fail_reason)
  return _s;
}
inline const std::string& IndexInfo::_internal_index_state_fail_reason() const {
  return _impl_.index_state_fail_reason_.Get();
}
inline void IndexInfo::_internal_set_index_state_fail_reason(const std::string& value) {
  
  _impl_.index_state_fail_reason_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexInfo::_internal_mutable_index_state_fail_reason() {
  
  return _impl_.index_state_fail_reason_.Mutable(GetArenaForAllocation());
}
inline std::string* IndexInfo::release_index_state_fail_reason() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.IndexInfo.index_state_fail_reason)
  return _impl_.index_state_fail_reason_.Release();
}
inline void IndexInfo::set_allocated_index_state_fail_reason(std::string* index_state_fail_reason) {
  if (index_state_fail_reason != nullptr) {
    
  } else {
    
  }
  _impl_.index_state_fail_reason_.SetAllocated(index_state_fail_reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_state_fail_reason_.IsDefault()) {
    _impl_.index_state_fail_reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.IndexInfo.index_state_fail_reason)
}

// bool is_auto_index = 11;
inline void IndexInfo::clear_is_auto_index() {
  _impl_.is_auto_index_ = false;
}
inline bool IndexInfo::_internal_is_auto_index() const {
  return _impl_.is_auto_index_;
}
inline bool IndexInfo::is_auto_index() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexInfo.is_auto_index)
  return _internal_is_auto_index();
}
inline void IndexInfo::_internal_set_is_auto_index(bool value) {
  
  _impl_.is_auto_index_ = value;
}
inline void IndexInfo::set_is_auto_index(bool value) {
  _internal_set_is_auto_index(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexInfo.is_auto_index)
}

// repeated .milvus.proto.common.KeyValuePair user_index_params = 12;
inline int IndexInfo::_internal_user_index_params_size() const {
  return _impl_.user_index_params_.size();
}
inline int IndexInfo::user_index_params_size() const {
  return _internal_user_index_params_size();
}
inline ::milvus::proto::common::KeyValuePair* IndexInfo::mutable_user_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.IndexInfo.user_index_params)
  return _impl_.user_index_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
IndexInfo::mutable_user_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.IndexInfo.user_index_params)
  return &_impl_.user_index_params_;
}
inline const ::milvus::proto::common::KeyValuePair& IndexInfo::_internal_user_index_params(int index) const {
  return _impl_.user_index_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& IndexInfo::user_index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexInfo.user_index_params)
  return _internal_user_index_params(index);
}
inline ::milvus::proto::common::KeyValuePair* IndexInfo::_internal_add_user_index_params() {
  return _impl_.user_index_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* IndexInfo::add_user_index_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_user_index_params();
  // @@protoc_insertion_point(field_add:milvus.proto.index.IndexInfo.user_index_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
IndexInfo::user_index_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.IndexInfo.user_index_params)
  return _impl_.user_index_params_;
}

// int64 pending_index_rows = 13;
inline void IndexInfo::clear_pending_index_rows() {
  _impl_.pending_index_rows_ = int64_t{0};
}
inline int64_t IndexInfo::_internal_pending_index_rows() const {
  return _impl_.pending_index_rows_;
}
inline int64_t IndexInfo::pending_index_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexInfo.pending_index_rows)
  return _internal_pending_index_rows();
}
inline void IndexInfo::_internal_set_pending_index_rows(int64_t value) {
  
  _impl_.pending_index_rows_ = value;
}
inline void IndexInfo::set_pending_index_rows(int64_t value) {
  _internal_set_pending_index_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexInfo.pending_index_rows)
}

// -------------------------------------------------------------------

// FieldIndex

// .milvus.proto.index.IndexInfo index_info = 1;
inline bool FieldIndex::_internal_has_index_info() const {
  return this != internal_default_instance() && _impl_.index_info_ != nullptr;
}
inline bool FieldIndex::has_index_info() const {
  return _internal_has_index_info();
}
inline void FieldIndex::clear_index_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.index_info_ != nullptr) {
    delete _impl_.index_info_;
  }
  _impl_.index_info_ = nullptr;
}
inline const ::milvus::proto::index::IndexInfo& FieldIndex::_internal_index_info() const {
  const ::milvus::proto::index::IndexInfo* p = _impl_.index_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::index::IndexInfo&>(
      ::milvus::proto::index::_IndexInfo_default_instance_);
}
inline const ::milvus::proto::index::IndexInfo& FieldIndex::index_info() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.FieldIndex.index_info)
  return _internal_index_info();
}
inline void FieldIndex::unsafe_arena_set_allocated_index_info(
    ::milvus::proto::index::IndexInfo* index_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.index_info_);
  }
  _impl_.index_info_ = index_info;
  if (index_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.index.FieldIndex.index_info)
}
inline ::milvus::proto::index::IndexInfo* FieldIndex::release_index_info() {
  
  ::milvus::proto::index::IndexInfo* temp = _impl_.index_info_;
  _impl_.index_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::index::IndexInfo* FieldIndex::unsafe_arena_release_index_info() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.FieldIndex.index_info)
  
  ::milvus::proto::index::IndexInfo* temp = _impl_.index_info_;
  _impl_.index_info_ = nullptr;
  return temp;
}
inline ::milvus::proto::index::IndexInfo* FieldIndex::_internal_mutable_index_info() {
  
  if (_impl_.index_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::index::IndexInfo>(GetArenaForAllocation());
    _impl_.index_info_ = p;
  }
  return _impl_.index_info_;
}
inline ::milvus::proto::index::IndexInfo* FieldIndex::mutable_index_info() {
  ::milvus::proto::index::IndexInfo* _msg = _internal_mutable_index_info();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.FieldIndex.index_info)
  return _msg;
}
inline void FieldIndex::set_allocated_index_info(::milvus::proto::index::IndexInfo* index_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.index_info_;
  }
  if (index_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(index_info);
    if (message_arena != submessage_arena) {
      index_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.index_info_ = index_info;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.FieldIndex.index_info)
}

// bool deleted = 2;
inline void FieldIndex::clear_deleted() {
  _impl_.deleted_ = false;
}
inline bool FieldIndex::_internal_deleted() const {
  return _impl_.deleted_;
}
inline bool FieldIndex::deleted() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.FieldIndex.deleted)
  return _internal_deleted();
}
inline void FieldIndex::_internal_set_deleted(bool value) {
  
  _impl_.deleted_ = value;
}
inline void FieldIndex::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.FieldIndex.deleted)
}

// uint64 create_time = 3;
inline void FieldIndex::clear_create_time() {
  _impl_.create_time_ = uint64_t{0u};
}
inline uint64_t FieldIndex::_internal_create_time() const {
  return _impl_.create_time_;
}
inline uint64_t FieldIndex::create_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.FieldIndex.create_time)
  return _internal_create_time();
}
inline void FieldIndex::_internal_set_create_time(uint64_t value) {
  
  _impl_.create_time_ = value;
}
inline void FieldIndex::set_create_time(uint64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.FieldIndex.create_time)
}

// -------------------------------------------------------------------

// SegmentIndex

// int64 collectionID = 1;
inline void SegmentIndex::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t SegmentIndex::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t SegmentIndex::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.collectionID)
  return _internal_collectionid();
}
inline void SegmentIndex::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void SegmentIndex::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.collectionID)
}

// int64 partitionID = 2;
inline void SegmentIndex::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t SegmentIndex::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t SegmentIndex::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.partitionID)
  return _internal_partitionid();
}
inline void SegmentIndex::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void SegmentIndex::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.partitionID)
}

// int64 segmentID = 3;
inline void SegmentIndex::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t SegmentIndex::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t SegmentIndex::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.segmentID)
  return _internal_segmentid();
}
inline void SegmentIndex::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void SegmentIndex::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.segmentID)
}

// int64 num_rows = 4;
inline void SegmentIndex::clear_num_rows() {
  _impl_.num_rows_ = int64_t{0};
}
inline int64_t SegmentIndex::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline int64_t SegmentIndex::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.num_rows)
  return _internal_num_rows();
}
inline void SegmentIndex::_internal_set_num_rows(int64_t value) {
  
  _impl_.num_rows_ = value;
}
inline void SegmentIndex::set_num_rows(int64_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.num_rows)
}

// int64 indexID = 5;
inline void SegmentIndex::clear_indexid() {
  _impl_.indexid_ = int64_t{0};
}
inline int64_t SegmentIndex::_internal_indexid() const {
  return _impl_.indexid_;
}
inline int64_t SegmentIndex::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.indexID)
  return _internal_indexid();
}
inline void SegmentIndex::_internal_set_indexid(int64_t value) {
  
  _impl_.indexid_ = value;
}
inline void SegmentIndex::set_indexid(int64_t value) {
  _internal_set_indexid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.indexID)
}

// int64 buildID = 6;
inline void SegmentIndex::clear_buildid() {
  _impl_.buildid_ = int64_t{0};
}
inline int64_t SegmentIndex::_internal_buildid() const {
  return _impl_.buildid_;
}
inline int64_t SegmentIndex::buildid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.buildID)
  return _internal_buildid();
}
inline void SegmentIndex::_internal_set_buildid(int64_t value) {
  
  _impl_.buildid_ = value;
}
inline void SegmentIndex::set_buildid(int64_t value) {
  _internal_set_buildid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.buildID)
}

// int64 nodeID = 7;
inline void SegmentIndex::clear_nodeid() {
  _impl_.nodeid_ = int64_t{0};
}
inline int64_t SegmentIndex::_internal_nodeid() const {
  return _impl_.nodeid_;
}
inline int64_t SegmentIndex::nodeid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.nodeID)
  return _internal_nodeid();
}
inline void SegmentIndex::_internal_set_nodeid(int64_t value) {
  
  _impl_.nodeid_ = value;
}
inline void SegmentIndex::set_nodeid(int64_t value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.nodeID)
}

// int64 index_version = 8;
inline void SegmentIndex::clear_index_version() {
  _impl_.index_version_ = int64_t{0};
}
inline int64_t SegmentIndex::_internal_index_version() const {
  return _impl_.index_version_;
}
inline int64_t SegmentIndex::index_version() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.index_version)
  return _internal_index_version();
}
inline void SegmentIndex::_internal_set_index_version(int64_t value) {
  
  _impl_.index_version_ = value;
}
inline void SegmentIndex::set_index_version(int64_t value) {
  _internal_set_index_version(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.index_version)
}

// .milvus.proto.common.IndexState state = 9;
inline void SegmentIndex::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::IndexState SegmentIndex::_internal_state() const {
  return static_cast< ::milvus::proto::common::IndexState >(_impl_.state_);
}
inline ::milvus::proto::common::IndexState SegmentIndex::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.state)
  return _internal_state();
}
inline void SegmentIndex::_internal_set_state(::milvus::proto::common::IndexState value) {
  
  _impl_.state_ = value;
}
inline void SegmentIndex::set_state(::milvus::proto::common::IndexState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.state)
}

// string fail_reason = 10;
inline void SegmentIndex::clear_fail_reason() {
  _impl_.fail_reason_.ClearToEmpty();
}
inline const std::string& SegmentIndex::fail_reason() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.fail_reason)
  return _internal_fail_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegmentIndex::set_fail_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fail_reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.fail_reason)
}
inline std::string* SegmentIndex::mutable_fail_reason() {
  std::string* _s = _internal_mutable_fail_reason();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.SegmentIndex.fail_reason)
  return _s;
}
inline const std::string& SegmentIndex::_internal_fail_reason() const {
  return _impl_.fail_reason_.Get();
}
inline void SegmentIndex::_internal_set_fail_reason(const std::string& value) {
  
  _impl_.fail_reason_.Set(value, GetArenaForAllocation());
}
inline std::string* SegmentIndex::_internal_mutable_fail_reason() {
  
  return _impl_.fail_reason_.Mutable(GetArenaForAllocation());
}
inline std::string* SegmentIndex::release_fail_reason() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.SegmentIndex.fail_reason)
  return _impl_.fail_reason_.Release();
}
inline void SegmentIndex::set_allocated_fail_reason(std::string* fail_reason) {
  if (fail_reason != nullptr) {
    
  } else {
    
  }
  _impl_.fail_reason_.SetAllocated(fail_reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fail_reason_.IsDefault()) {
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.SegmentIndex.fail_reason)
}

// repeated string index_file_keys = 11;
inline int SegmentIndex::_internal_index_file_keys_size() const {
  return _impl_.index_file_keys_.size();
}
inline int SegmentIndex::index_file_keys_size() const {
  return _internal_index_file_keys_size();
}
inline void SegmentIndex::clear_index_file_keys() {
  _impl_.index_file_keys_.Clear();
}
inline std::string* SegmentIndex::add_index_file_keys() {
  std::string* _s = _internal_add_index_file_keys();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.index.SegmentIndex.index_file_keys)
  return _s;
}
inline const std::string& SegmentIndex::_internal_index_file_keys(int index) const {
  return _impl_.index_file_keys_.Get(index);
}
inline const std::string& SegmentIndex::index_file_keys(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.index_file_keys)
  return _internal_index_file_keys(index);
}
inline std::string* SegmentIndex::mutable_index_file_keys(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.SegmentIndex.index_file_keys)
  return _impl_.index_file_keys_.Mutable(index);
}
inline void SegmentIndex::set_index_file_keys(int index, const std::string& value) {
  _impl_.index_file_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.index_file_keys)
}
inline void SegmentIndex::set_index_file_keys(int index, std::string&& value) {
  _impl_.index_file_keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.index_file_keys)
}
inline void SegmentIndex::set_index_file_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.index_file_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.index.SegmentIndex.index_file_keys)
}
inline void SegmentIndex::set_index_file_keys(int index, const char* value, size_t size) {
  _impl_.index_file_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.index.SegmentIndex.index_file_keys)
}
inline std::string* SegmentIndex::_internal_add_index_file_keys() {
  return _impl_.index_file_keys_.Add();
}
inline void SegmentIndex::add_index_file_keys(const std::string& value) {
  _impl_.index_file_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.index.SegmentIndex.index_file_keys)
}
inline void SegmentIndex::add_index_file_keys(std::string&& value) {
  _impl_.index_file_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.index.SegmentIndex.index_file_keys)
}
inline void SegmentIndex::add_index_file_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.index_file_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.index.SegmentIndex.index_file_keys)
}
inline void SegmentIndex::add_index_file_keys(const char* value, size_t size) {
  _impl_.index_file_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.index.SegmentIndex.index_file_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SegmentIndex::index_file_keys() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.SegmentIndex.index_file_keys)
  return _impl_.index_file_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SegmentIndex::mutable_index_file_keys() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.SegmentIndex.index_file_keys)
  return &_impl_.index_file_keys_;
}

// bool deleted = 12;
inline void SegmentIndex::clear_deleted() {
  _impl_.deleted_ = false;
}
inline bool SegmentIndex::_internal_deleted() const {
  return _impl_.deleted_;
}
inline bool SegmentIndex::deleted() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.deleted)
  return _internal_deleted();
}
inline void SegmentIndex::_internal_set_deleted(bool value) {
  
  _impl_.deleted_ = value;
}
inline void SegmentIndex::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.deleted)
}

// uint64 create_time = 13;
inline void SegmentIndex::clear_create_time() {
  _impl_.create_time_ = uint64_t{0u};
}
inline uint64_t SegmentIndex::_internal_create_time() const {
  return _impl_.create_time_;
}
inline uint64_t SegmentIndex::create_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.create_time)
  return _internal_create_time();
}
inline void SegmentIndex::_internal_set_create_time(uint64_t value) {
  
  _impl_.create_time_ = value;
}
inline void SegmentIndex::set_create_time(uint64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.create_time)
}

// uint64 serialize_size = 14;
inline void SegmentIndex::clear_serialize_size() {
  _impl_.serialize_size_ = uint64_t{0u};
}
inline uint64_t SegmentIndex::_internal_serialize_size() const {
  return _impl_.serialize_size_;
}
inline uint64_t SegmentIndex::serialize_size() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.serialize_size)
  return _internal_serialize_size();
}
inline void SegmentIndex::_internal_set_serialize_size(uint64_t value) {
  
  _impl_.serialize_size_ = value;
}
inline void SegmentIndex::set_serialize_size(uint64_t value) {
  _internal_set_serialize_size(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.serialize_size)
}

// bool write_handoff = 15;
inline void SegmentIndex::clear_write_handoff() {
  _impl_.write_handoff_ = false;
}
inline bool SegmentIndex::_internal_write_handoff() const {
  return _impl_.write_handoff_;
}
inline bool SegmentIndex::write_handoff() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndex.write_handoff)
  return _internal_write_handoff();
}
inline void SegmentIndex::_internal_set_write_handoff(bool value) {
  
  _impl_.write_handoff_ = value;
}
inline void SegmentIndex::set_write_handoff(bool value) {
  _internal_set_write_handoff(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndex.write_handoff)
}

// -------------------------------------------------------------------

// RegisterNodeRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool RegisterNodeRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool RegisterNodeRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& RegisterNodeRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& RegisterNodeRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.RegisterNodeRequest.base)
  return _internal_base();
}
inline void RegisterNodeRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.index.RegisterNodeRequest.base)
}
inline ::milvus::proto::common::MsgBase* RegisterNodeRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* RegisterNodeRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.RegisterNodeRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* RegisterNodeRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* RegisterNodeRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.RegisterNodeRequest.base)
  return _msg;
}
inline void RegisterNodeRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.RegisterNodeRequest.base)
}

// .milvus.proto.common.Address address = 2;
inline bool RegisterNodeRequest::_internal_has_address() const {
  return this != internal_default_instance() && _impl_.address_ != nullptr;
}
inline bool RegisterNodeRequest::has_address() const {
  return _internal_has_address();
}
inline const ::milvus::proto::common::Address& RegisterNodeRequest::_internal_address() const {
  const ::milvus::proto::common::Address* p = _impl_.address_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Address&>(
      ::milvus::proto::common::_Address_default_instance_);
}
inline const ::milvus::proto::common::Address& RegisterNodeRequest::address() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.RegisterNodeRequest.address)
  return _internal_address();
}
inline void RegisterNodeRequest::unsafe_arena_set_allocated_address(
    ::milvus::proto::common::Address* address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.address_);
  }
  _impl_.address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.index.RegisterNodeRequest.address)
}
inline ::milvus::proto::common::Address* RegisterNodeRequest::release_address() {
  
  ::milvus::proto::common::Address* temp = _impl_.address_;
  _impl_.address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Address* RegisterNodeRequest::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.RegisterNodeRequest.address)
  
  ::milvus::proto::common::Address* temp = _impl_.address_;
  _impl_.address_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Address* RegisterNodeRequest::_internal_mutable_address() {
  
  if (_impl_.address_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Address>(GetArenaForAllocation());
    _impl_.address_ = p;
  }
  return _impl_.address_;
}
inline ::milvus::proto::common::Address* RegisterNodeRequest::mutable_address() {
  ::milvus::proto::common::Address* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.RegisterNodeRequest.address)
  return _msg;
}
inline void RegisterNodeRequest::set_allocated_address(::milvus::proto::common::Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address));
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.address_ = address;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.RegisterNodeRequest.address)
}

// int64 nodeID = 3;
inline void RegisterNodeRequest::clear_nodeid() {
  _impl_.nodeid_ = int64_t{0};
}
inline int64_t RegisterNodeRequest::_internal_nodeid() const {
  return _impl_.nodeid_;
}
inline int64_t RegisterNodeRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.RegisterNodeRequest.nodeID)
  return _internal_nodeid();
}
inline void RegisterNodeRequest::_internal_set_nodeid(int64_t value) {
  
  _impl_.nodeid_ = value;
}
inline void RegisterNodeRequest::set_nodeid(int64_t value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.RegisterNodeRequest.nodeID)
}

// -------------------------------------------------------------------

// RegisterNodeResponse

// .milvus.proto.common.Status status = 1;
inline bool RegisterNodeResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool RegisterNodeResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& RegisterNodeResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& RegisterNodeResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.RegisterNodeResponse.status)
  return _internal_status();
}
inline void RegisterNodeResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.index.RegisterNodeResponse.status)
}
inline ::milvus::proto::common::Status* RegisterNodeResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* RegisterNodeResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.RegisterNodeResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* RegisterNodeResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* RegisterNodeResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.RegisterNodeResponse.status)
  return _msg;
}
inline void RegisterNodeResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.RegisterNodeResponse.status)
}

// .milvus.proto.internal.InitParams init_params = 2;
inline bool RegisterNodeResponse::_internal_has_init_params() const {
  return this != internal_default_instance() && _impl_.init_params_ != nullptr;
}
inline bool RegisterNodeResponse::has_init_params() const {
  return _internal_has_init_params();
}
inline const ::milvus::proto::internal::InitParams& RegisterNodeResponse::_internal_init_params() const {
  const ::milvus::proto::internal::InitParams* p = _impl_.init_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::internal::InitParams&>(
      ::milvus::proto::internal::_InitParams_default_instance_);
}
inline const ::milvus::proto::internal::InitParams& RegisterNodeResponse::init_params() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.RegisterNodeResponse.init_params)
  return _internal_init_params();
}
inline void RegisterNodeResponse::unsafe_arena_set_allocated_init_params(
    ::milvus::proto::internal::InitParams* init_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.init_params_);
  }
  _impl_.init_params_ = init_params;
  if (init_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.index.RegisterNodeResponse.init_params)
}
inline ::milvus::proto::internal::InitParams* RegisterNodeResponse::release_init_params() {
  
  ::milvus::proto::internal::InitParams* temp = _impl_.init_params_;
  _impl_.init_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::internal::InitParams* RegisterNodeResponse::unsafe_arena_release_init_params() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.RegisterNodeResponse.init_params)
  
  ::milvus::proto::internal::InitParams* temp = _impl_.init_params_;
  _impl_.init_params_ = nullptr;
  return temp;
}
inline ::milvus::proto::internal::InitParams* RegisterNodeResponse::_internal_mutable_init_params() {
  
  if (_impl_.init_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::internal::InitParams>(GetArenaForAllocation());
    _impl_.init_params_ = p;
  }
  return _impl_.init_params_;
}
inline ::milvus::proto::internal::InitParams* RegisterNodeResponse::mutable_init_params() {
  ::milvus::proto::internal::InitParams* _msg = _internal_mutable_init_params();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.RegisterNodeResponse.init_params)
  return _msg;
}
inline void RegisterNodeResponse::set_allocated_init_params(::milvus::proto::internal::InitParams* init_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.init_params_);
  }
  if (init_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(init_params));
    if (message_arena != submessage_arena) {
      init_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.init_params_ = init_params;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.RegisterNodeResponse.init_params)
}

// -------------------------------------------------------------------

// GetIndexStateRequest

// int64 collectionID = 1;
inline void GetIndexStateRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t GetIndexStateRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t GetIndexStateRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexStateRequest.collectionID)
  return _internal_collectionid();
}
inline void GetIndexStateRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void GetIndexStateRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetIndexStateRequest.collectionID)
}

// string index_name = 2;
inline void GetIndexStateRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& GetIndexStateRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexStateRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexStateRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetIndexStateRequest.index_name)
}
inline std::string* GetIndexStateRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetIndexStateRequest.index_name)
  return _s;
}
inline const std::string& GetIndexStateRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void GetIndexStateRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexStateRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexStateRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.GetIndexStateRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void GetIndexStateRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.GetIndexStateRequest.index_name)
}

// -------------------------------------------------------------------

// GetIndexStateResponse

// .milvus.proto.common.Status status = 1;
inline bool GetIndexStateResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetIndexStateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetIndexStateResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetIndexStateResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexStateResponse.status)
  return _internal_status();
}
inline void GetIndexStateResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.index.GetIndexStateResponse.status)
}
inline ::milvus::proto::common::Status* GetIndexStateResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexStateResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.GetIndexStateResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexStateResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetIndexStateResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetIndexStateResponse.status)
  return _msg;
}
inline void GetIndexStateResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.GetIndexStateResponse.status)
}

// .milvus.proto.common.IndexState state = 2;
inline void GetIndexStateResponse::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::IndexState GetIndexStateResponse::_internal_state() const {
  return static_cast< ::milvus::proto::common::IndexState >(_impl_.state_);
}
inline ::milvus::proto::common::IndexState GetIndexStateResponse::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexStateResponse.state)
  return _internal_state();
}
inline void GetIndexStateResponse::_internal_set_state(::milvus::proto::common::IndexState value) {
  
  _impl_.state_ = value;
}
inline void GetIndexStateResponse::set_state(::milvus::proto::common::IndexState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetIndexStateResponse.state)
}

// string fail_reason = 3;
inline void GetIndexStateResponse::clear_fail_reason() {
  _impl_.fail_reason_.ClearToEmpty();
}
inline const std::string& GetIndexStateResponse::fail_reason() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexStateResponse.fail_reason)
  return _internal_fail_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexStateResponse::set_fail_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fail_reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetIndexStateResponse.fail_reason)
}
inline std::string* GetIndexStateResponse::mutable_fail_reason() {
  std::string* _s = _internal_mutable_fail_reason();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetIndexStateResponse.fail_reason)
  return _s;
}
inline const std::string& GetIndexStateResponse::_internal_fail_reason() const {
  return _impl_.fail_reason_.Get();
}
inline void GetIndexStateResponse::_internal_set_fail_reason(const std::string& value) {
  
  _impl_.fail_reason_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexStateResponse::_internal_mutable_fail_reason() {
  
  return _impl_.fail_reason_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexStateResponse::release_fail_reason() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.GetIndexStateResponse.fail_reason)
  return _impl_.fail_reason_.Release();
}
inline void GetIndexStateResponse::set_allocated_fail_reason(std::string* fail_reason) {
  if (fail_reason != nullptr) {
    
  } else {
    
  }
  _impl_.fail_reason_.SetAllocated(fail_reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fail_reason_.IsDefault()) {
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.GetIndexStateResponse.fail_reason)
}

// -------------------------------------------------------------------

// GetSegmentIndexStateRequest

// int64 collectionID = 1;
inline void GetSegmentIndexStateRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t GetSegmentIndexStateRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t GetSegmentIndexStateRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetSegmentIndexStateRequest.collectionID)
  return _internal_collectionid();
}
inline void GetSegmentIndexStateRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void GetSegmentIndexStateRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetSegmentIndexStateRequest.collectionID)
}

// string index_name = 2;
inline void GetSegmentIndexStateRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& GetSegmentIndexStateRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetSegmentIndexStateRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSegmentIndexStateRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetSegmentIndexStateRequest.index_name)
}
inline std::string* GetSegmentIndexStateRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetSegmentIndexStateRequest.index_name)
  return _s;
}
inline const std::string& GetSegmentIndexStateRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void GetSegmentIndexStateRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSegmentIndexStateRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSegmentIndexStateRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.GetSegmentIndexStateRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void GetSegmentIndexStateRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.GetSegmentIndexStateRequest.index_name)
}

// repeated int64 segmentIDs = 3;
inline int GetSegmentIndexStateRequest::_internal_segmentids_size() const {
  return _impl_.segmentids_.size();
}
inline int GetSegmentIndexStateRequest::segmentids_size() const {
  return _internal_segmentids_size();
}
inline void GetSegmentIndexStateRequest::clear_segmentids() {
  _impl_.segmentids_.Clear();
}
inline int64_t GetSegmentIndexStateRequest::_internal_segmentids(int index) const {
  return _impl_.segmentids_.Get(index);
}
inline int64_t GetSegmentIndexStateRequest::segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetSegmentIndexStateRequest.segmentIDs)
  return _internal_segmentids(index);
}
inline void GetSegmentIndexStateRequest::set_segmentids(int index, int64_t value) {
  _impl_.segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetSegmentIndexStateRequest.segmentIDs)
}
inline void GetSegmentIndexStateRequest::_internal_add_segmentids(int64_t value) {
  _impl_.segmentids_.Add(value);
}
inline void GetSegmentIndexStateRequest::add_segmentids(int64_t value) {
  _internal_add_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.index.GetSegmentIndexStateRequest.segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetSegmentIndexStateRequest::_internal_segmentids() const {
  return _impl_.segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetSegmentIndexStateRequest::segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.GetSegmentIndexStateRequest.segmentIDs)
  return _internal_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetSegmentIndexStateRequest::_internal_mutable_segmentids() {
  return &_impl_.segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetSegmentIndexStateRequest::mutable_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.GetSegmentIndexStateRequest.segmentIDs)
  return _internal_mutable_segmentids();
}

// -------------------------------------------------------------------

// SegmentIndexState

// int64 segmentID = 1;
inline void SegmentIndexState::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t SegmentIndexState::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t SegmentIndexState::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndexState.segmentID)
  return _internal_segmentid();
}
inline void SegmentIndexState::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void SegmentIndexState::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndexState.segmentID)
}

// .milvus.proto.common.IndexState state = 2;
inline void SegmentIndexState::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::IndexState SegmentIndexState::_internal_state() const {
  return static_cast< ::milvus::proto::common::IndexState >(_impl_.state_);
}
inline ::milvus::proto::common::IndexState SegmentIndexState::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndexState.state)
  return _internal_state();
}
inline void SegmentIndexState::_internal_set_state(::milvus::proto::common::IndexState value) {
  
  _impl_.state_ = value;
}
inline void SegmentIndexState::set_state(::milvus::proto::common::IndexState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndexState.state)
}

// string fail_reason = 3;
inline void SegmentIndexState::clear_fail_reason() {
  _impl_.fail_reason_.ClearToEmpty();
}
inline const std::string& SegmentIndexState::fail_reason() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentIndexState.fail_reason)
  return _internal_fail_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegmentIndexState::set_fail_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fail_reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentIndexState.fail_reason)
}
inline std::string* SegmentIndexState::mutable_fail_reason() {
  std::string* _s = _internal_mutable_fail_reason();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.SegmentIndexState.fail_reason)
  return _s;
}
inline const std::string& SegmentIndexState::_internal_fail_reason() const {
  return _impl_.fail_reason_.Get();
}
inline void SegmentIndexState::_internal_set_fail_reason(const std::string& value) {
  
  _impl_.fail_reason_.Set(value, GetArenaForAllocation());
}
inline std::string* SegmentIndexState::_internal_mutable_fail_reason() {
  
  return _impl_.fail_reason_.Mutable(GetArenaForAllocation());
}
inline std::string* SegmentIndexState::release_fail_reason() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.SegmentIndexState.fail_reason)
  return _impl_.fail_reason_.Release();
}
inline void SegmentIndexState::set_allocated_fail_reason(std::string* fail_reason) {
  if (fail_reason != nullptr) {
    
  } else {
    
  }
  _impl_.fail_reason_.SetAllocated(fail_reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fail_reason_.IsDefault()) {
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.SegmentIndexState.fail_reason)
}

// -------------------------------------------------------------------

// GetSegmentIndexStateResponse

// .milvus.proto.common.Status status = 1;
inline bool GetSegmentIndexStateResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetSegmentIndexStateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetSegmentIndexStateResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetSegmentIndexStateResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetSegmentIndexStateResponse.status)
  return _internal_status();
}
inline void GetSegmentIndexStateResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.index.GetSegmentIndexStateResponse.status)
}
inline ::milvus::proto::common::Status* GetSegmentIndexStateResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetSegmentIndexStateResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.GetSegmentIndexStateResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetSegmentIndexStateResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetSegmentIndexStateResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetSegmentIndexStateResponse.status)
  return _msg;
}
inline void GetSegmentIndexStateResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.GetSegmentIndexStateResponse.status)
}

// repeated .milvus.proto.index.SegmentIndexState states = 2;
inline int GetSegmentIndexStateResponse::_internal_states_size() const {
  return _impl_.states_.size();
}
inline int GetSegmentIndexStateResponse::states_size() const {
  return _internal_states_size();
}
inline void GetSegmentIndexStateResponse::clear_states() {
  _impl_.states_.Clear();
}
inline ::milvus::proto::index::SegmentIndexState* GetSegmentIndexStateResponse::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetSegmentIndexStateResponse.states)
  return _impl_.states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::SegmentIndexState >*
GetSegmentIndexStateResponse::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.GetSegmentIndexStateResponse.states)
  return &_impl_.states_;
}
inline const ::milvus::proto::index::SegmentIndexState& GetSegmentIndexStateResponse::_internal_states(int index) const {
  return _impl_.states_.Get(index);
}
inline const ::milvus::proto::index::SegmentIndexState& GetSegmentIndexStateResponse::states(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetSegmentIndexStateResponse.states)
  return _internal_states(index);
}
inline ::milvus::proto::index::SegmentIndexState* GetSegmentIndexStateResponse::_internal_add_states() {
  return _impl_.states_.Add();
}
inline ::milvus::proto::index::SegmentIndexState* GetSegmentIndexStateResponse::add_states() {
  ::milvus::proto::index::SegmentIndexState* _add = _internal_add_states();
  // @@protoc_insertion_point(field_add:milvus.proto.index.GetSegmentIndexStateResponse.states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::SegmentIndexState >&
GetSegmentIndexStateResponse::states() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.GetSegmentIndexStateResponse.states)
  return _impl_.states_;
}

// -------------------------------------------------------------------

// CreateIndexRequest

// int64 collectionID = 1;
inline void CreateIndexRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t CreateIndexRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t CreateIndexRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateIndexRequest.collectionID)
  return _internal_collectionid();
}
inline void CreateIndexRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void CreateIndexRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.CreateIndexRequest.collectionID)
}

// int64 fieldID = 2;
inline void CreateIndexRequest::clear_fieldid() {
  _impl_.fieldid_ = int64_t{0};
}
inline int64_t CreateIndexRequest::_internal_fieldid() const {
  return _impl_.fieldid_;
}
inline int64_t CreateIndexRequest::fieldid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateIndexRequest.fieldID)
  return _internal_fieldid();
}
inline void CreateIndexRequest::_internal_set_fieldid(int64_t value) {
  
  _impl_.fieldid_ = value;
}
inline void CreateIndexRequest::set_fieldid(int64_t value) {
  _internal_set_fieldid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.CreateIndexRequest.fieldID)
}

// string index_name = 3;
inline void CreateIndexRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& CreateIndexRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateIndexRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateIndexRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.CreateIndexRequest.index_name)
}
inline std::string* CreateIndexRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.CreateIndexRequest.index_name)
  return _s;
}
inline const std::string& CreateIndexRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void CreateIndexRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.CreateIndexRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void CreateIndexRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.CreateIndexRequest.index_name)
}

// repeated .milvus.proto.common.KeyValuePair type_params = 4;
inline int CreateIndexRequest::_internal_type_params_size() const {
  return _impl_.type_params_.size();
}
inline int CreateIndexRequest::type_params_size() const {
  return _internal_type_params_size();
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::mutable_type_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.CreateIndexRequest.type_params)
  return _impl_.type_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
CreateIndexRequest::mutable_type_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.CreateIndexRequest.type_params)
  return &_impl_.type_params_;
}
inline const ::milvus::proto::common::KeyValuePair& CreateIndexRequest::_internal_type_params(int index) const {
  return _impl_.type_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& CreateIndexRequest::type_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateIndexRequest.type_params)
  return _internal_type_params(index);
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::_internal_add_type_params() {
  return _impl_.type_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::add_type_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_type_params();
  // @@protoc_insertion_point(field_add:milvus.proto.index.CreateIndexRequest.type_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
CreateIndexRequest::type_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.CreateIndexRequest.type_params)
  return _impl_.type_params_;
}

// repeated .milvus.proto.common.KeyValuePair index_params = 5;
inline int CreateIndexRequest::_internal_index_params_size() const {
  return _impl_.index_params_.size();
}
inline int CreateIndexRequest::index_params_size() const {
  return _internal_index_params_size();
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::mutable_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.CreateIndexRequest.index_params)
  return _impl_.index_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
CreateIndexRequest::mutable_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.CreateIndexRequest.index_params)
  return &_impl_.index_params_;
}
inline const ::milvus::proto::common::KeyValuePair& CreateIndexRequest::_internal_index_params(int index) const {
  return _impl_.index_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& CreateIndexRequest::index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateIndexRequest.index_params)
  return _internal_index_params(index);
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::_internal_add_index_params() {
  return _impl_.index_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::add_index_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_index_params();
  // @@protoc_insertion_point(field_add:milvus.proto.index.CreateIndexRequest.index_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
CreateIndexRequest::index_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.CreateIndexRequest.index_params)
  return _impl_.index_params_;
}

// uint64 timestamp = 6;
inline void CreateIndexRequest::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t CreateIndexRequest::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t CreateIndexRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateIndexRequest.timestamp)
  return _internal_timestamp();
}
inline void CreateIndexRequest::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void CreateIndexRequest::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.CreateIndexRequest.timestamp)
}

// bool is_auto_index = 7;
inline void CreateIndexRequest::clear_is_auto_index() {
  _impl_.is_auto_index_ = false;
}
inline bool CreateIndexRequest::_internal_is_auto_index() const {
  return _impl_.is_auto_index_;
}
inline bool CreateIndexRequest::is_auto_index() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateIndexRequest.is_auto_index)
  return _internal_is_auto_index();
}
inline void CreateIndexRequest::_internal_set_is_auto_index(bool value) {
  
  _impl_.is_auto_index_ = value;
}
inline void CreateIndexRequest::set_is_auto_index(bool value) {
  _internal_set_is_auto_index(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.CreateIndexRequest.is_auto_index)
}

// repeated .milvus.proto.common.KeyValuePair user_index_params = 8;
inline int CreateIndexRequest::_internal_user_index_params_size() const {
  return _impl_.user_index_params_.size();
}
inline int CreateIndexRequest::user_index_params_size() const {
  return _internal_user_index_params_size();
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::mutable_user_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.CreateIndexRequest.user_index_params)
  return _impl_.user_index_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
CreateIndexRequest::mutable_user_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.CreateIndexRequest.user_index_params)
  return &_impl_.user_index_params_;
}
inline const ::milvus::proto::common::KeyValuePair& CreateIndexRequest::_internal_user_index_params(int index) const {
  return _impl_.user_index_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& CreateIndexRequest::user_index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateIndexRequest.user_index_params)
  return _internal_user_index_params(index);
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::_internal_add_user_index_params() {
  return _impl_.user_index_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::add_user_index_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_user_index_params();
  // @@protoc_insertion_point(field_add:milvus.proto.index.CreateIndexRequest.user_index_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
CreateIndexRequest::user_index_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.CreateIndexRequest.user_index_params)
  return _impl_.user_index_params_;
}

// -------------------------------------------------------------------

// GetIndexInfoRequest

// int64 collectionID = 1;
inline void GetIndexInfoRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t GetIndexInfoRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t GetIndexInfoRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexInfoRequest.collectionID)
  return _internal_collectionid();
}
inline void GetIndexInfoRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void GetIndexInfoRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetIndexInfoRequest.collectionID)
}

// repeated int64 segmentIDs = 2;
inline int GetIndexInfoRequest::_internal_segmentids_size() const {
  return _impl_.segmentids_.size();
}
inline int GetIndexInfoRequest::segmentids_size() const {
  return _internal_segmentids_size();
}
inline void GetIndexInfoRequest::clear_segmentids() {
  _impl_.segmentids_.Clear();
}
inline int64_t GetIndexInfoRequest::_internal_segmentids(int index) const {
  return _impl_.segmentids_.Get(index);
}
inline int64_t GetIndexInfoRequest::segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexInfoRequest.segmentIDs)
  return _internal_segmentids(index);
}
inline void GetIndexInfoRequest::set_segmentids(int index, int64_t value) {
  _impl_.segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetIndexInfoRequest.segmentIDs)
}
inline void GetIndexInfoRequest::_internal_add_segmentids(int64_t value) {
  _impl_.segmentids_.Add(value);
}
inline void GetIndexInfoRequest::add_segmentids(int64_t value) {
  _internal_add_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.index.GetIndexInfoRequest.segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetIndexInfoRequest::_internal_segmentids() const {
  return _impl_.segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetIndexInfoRequest::segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.GetIndexInfoRequest.segmentIDs)
  return _internal_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetIndexInfoRequest::_internal_mutable_segmentids() {
  return &_impl_.segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetIndexInfoRequest::mutable_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.GetIndexInfoRequest.segmentIDs)
  return _internal_mutable_segmentids();
}

// string index_name = 3;
inline void GetIndexInfoRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& GetIndexInfoRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexInfoRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexInfoRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetIndexInfoRequest.index_name)
}
inline std::string* GetIndexInfoRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetIndexInfoRequest.index_name)
  return _s;
}
inline const std::string& GetIndexInfoRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void GetIndexInfoRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexInfoRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexInfoRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.GetIndexInfoRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void GetIndexInfoRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.GetIndexInfoRequest.index_name)
}

// -------------------------------------------------------------------

// IndexFilePathInfo

// int64 segmentID = 1;
inline void IndexFilePathInfo::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t IndexFilePathInfo::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t IndexFilePathInfo::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexFilePathInfo.segmentID)
  return _internal_segmentid();
}
inline void IndexFilePathInfo::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void IndexFilePathInfo::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexFilePathInfo.segmentID)
}

// int64 fieldID = 2;
inline void IndexFilePathInfo::clear_fieldid() {
  _impl_.fieldid_ = int64_t{0};
}
inline int64_t IndexFilePathInfo::_internal_fieldid() const {
  return _impl_.fieldid_;
}
inline int64_t IndexFilePathInfo::fieldid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexFilePathInfo.fieldID)
  return _internal_fieldid();
}
inline void IndexFilePathInfo::_internal_set_fieldid(int64_t value) {
  
  _impl_.fieldid_ = value;
}
inline void IndexFilePathInfo::set_fieldid(int64_t value) {
  _internal_set_fieldid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexFilePathInfo.fieldID)
}

// int64 indexID = 3;
inline void IndexFilePathInfo::clear_indexid() {
  _impl_.indexid_ = int64_t{0};
}
inline int64_t IndexFilePathInfo::_internal_indexid() const {
  return _impl_.indexid_;
}
inline int64_t IndexFilePathInfo::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexFilePathInfo.indexID)
  return _internal_indexid();
}
inline void IndexFilePathInfo::_internal_set_indexid(int64_t value) {
  
  _impl_.indexid_ = value;
}
inline void IndexFilePathInfo::set_indexid(int64_t value) {
  _internal_set_indexid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexFilePathInfo.indexID)
}

// int64 buildID = 4;
inline void IndexFilePathInfo::clear_buildid() {
  _impl_.buildid_ = int64_t{0};
}
inline int64_t IndexFilePathInfo::_internal_buildid() const {
  return _impl_.buildid_;
}
inline int64_t IndexFilePathInfo::buildid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexFilePathInfo.buildID)
  return _internal_buildid();
}
inline void IndexFilePathInfo::_internal_set_buildid(int64_t value) {
  
  _impl_.buildid_ = value;
}
inline void IndexFilePathInfo::set_buildid(int64_t value) {
  _internal_set_buildid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexFilePathInfo.buildID)
}

// string index_name = 5;
inline void IndexFilePathInfo::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& IndexFilePathInfo::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexFilePathInfo.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexFilePathInfo::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexFilePathInfo.index_name)
}
inline std::string* IndexFilePathInfo::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.IndexFilePathInfo.index_name)
  return _s;
}
inline const std::string& IndexFilePathInfo::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void IndexFilePathInfo::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexFilePathInfo::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* IndexFilePathInfo::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.IndexFilePathInfo.index_name)
  return _impl_.index_name_.Release();
}
inline void IndexFilePathInfo::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.IndexFilePathInfo.index_name)
}

// repeated .milvus.proto.common.KeyValuePair index_params = 6;
inline int IndexFilePathInfo::_internal_index_params_size() const {
  return _impl_.index_params_.size();
}
inline int IndexFilePathInfo::index_params_size() const {
  return _internal_index_params_size();
}
inline ::milvus::proto::common::KeyValuePair* IndexFilePathInfo::mutable_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.IndexFilePathInfo.index_params)
  return _impl_.index_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
IndexFilePathInfo::mutable_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.IndexFilePathInfo.index_params)
  return &_impl_.index_params_;
}
inline const ::milvus::proto::common::KeyValuePair& IndexFilePathInfo::_internal_index_params(int index) const {
  return _impl_.index_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& IndexFilePathInfo::index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexFilePathInfo.index_params)
  return _internal_index_params(index);
}
inline ::milvus::proto::common::KeyValuePair* IndexFilePathInfo::_internal_add_index_params() {
  return _impl_.index_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* IndexFilePathInfo::add_index_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_index_params();
  // @@protoc_insertion_point(field_add:milvus.proto.index.IndexFilePathInfo.index_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
IndexFilePathInfo::index_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.IndexFilePathInfo.index_params)
  return _impl_.index_params_;
}

// repeated string index_file_paths = 7;
inline int IndexFilePathInfo::_internal_index_file_paths_size() const {
  return _impl_.index_file_paths_.size();
}
inline int IndexFilePathInfo::index_file_paths_size() const {
  return _internal_index_file_paths_size();
}
inline void IndexFilePathInfo::clear_index_file_paths() {
  _impl_.index_file_paths_.Clear();
}
inline std::string* IndexFilePathInfo::add_index_file_paths() {
  std::string* _s = _internal_add_index_file_paths();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.index.IndexFilePathInfo.index_file_paths)
  return _s;
}
inline const std::string& IndexFilePathInfo::_internal_index_file_paths(int index) const {
  return _impl_.index_file_paths_.Get(index);
}
inline const std::string& IndexFilePathInfo::index_file_paths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexFilePathInfo.index_file_paths)
  return _internal_index_file_paths(index);
}
inline std::string* IndexFilePathInfo::mutable_index_file_paths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.IndexFilePathInfo.index_file_paths)
  return _impl_.index_file_paths_.Mutable(index);
}
inline void IndexFilePathInfo::set_index_file_paths(int index, const std::string& value) {
  _impl_.index_file_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexFilePathInfo.index_file_paths)
}
inline void IndexFilePathInfo::set_index_file_paths(int index, std::string&& value) {
  _impl_.index_file_paths_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexFilePathInfo.index_file_paths)
}
inline void IndexFilePathInfo::set_index_file_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.index_file_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.index.IndexFilePathInfo.index_file_paths)
}
inline void IndexFilePathInfo::set_index_file_paths(int index, const char* value, size_t size) {
  _impl_.index_file_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.index.IndexFilePathInfo.index_file_paths)
}
inline std::string* IndexFilePathInfo::_internal_add_index_file_paths() {
  return _impl_.index_file_paths_.Add();
}
inline void IndexFilePathInfo::add_index_file_paths(const std::string& value) {
  _impl_.index_file_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.index.IndexFilePathInfo.index_file_paths)
}
inline void IndexFilePathInfo::add_index_file_paths(std::string&& value) {
  _impl_.index_file_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.index.IndexFilePathInfo.index_file_paths)
}
inline void IndexFilePathInfo::add_index_file_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.index_file_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.index.IndexFilePathInfo.index_file_paths)
}
inline void IndexFilePathInfo::add_index_file_paths(const char* value, size_t size) {
  _impl_.index_file_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.index.IndexFilePathInfo.index_file_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IndexFilePathInfo::index_file_paths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.IndexFilePathInfo.index_file_paths)
  return _impl_.index_file_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IndexFilePathInfo::mutable_index_file_paths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.IndexFilePathInfo.index_file_paths)
  return &_impl_.index_file_paths_;
}

// uint64 serialized_size = 8;
inline void IndexFilePathInfo::clear_serialized_size() {
  _impl_.serialized_size_ = uint64_t{0u};
}
inline uint64_t IndexFilePathInfo::_internal_serialized_size() const {
  return _impl_.serialized_size_;
}
inline uint64_t IndexFilePathInfo::serialized_size() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexFilePathInfo.serialized_size)
  return _internal_serialized_size();
}
inline void IndexFilePathInfo::_internal_set_serialized_size(uint64_t value) {
  
  _impl_.serialized_size_ = value;
}
inline void IndexFilePathInfo::set_serialized_size(uint64_t value) {
  _internal_set_serialized_size(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexFilePathInfo.serialized_size)
}

// int64 index_version = 9;
inline void IndexFilePathInfo::clear_index_version() {
  _impl_.index_version_ = int64_t{0};
}
inline int64_t IndexFilePathInfo::_internal_index_version() const {
  return _impl_.index_version_;
}
inline int64_t IndexFilePathInfo::index_version() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexFilePathInfo.index_version)
  return _internal_index_version();
}
inline void IndexFilePathInfo::_internal_set_index_version(int64_t value) {
  
  _impl_.index_version_ = value;
}
inline void IndexFilePathInfo::set_index_version(int64_t value) {
  _internal_set_index_version(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexFilePathInfo.index_version)
}

// int64 num_rows = 10;
inline void IndexFilePathInfo::clear_num_rows() {
  _impl_.num_rows_ = int64_t{0};
}
inline int64_t IndexFilePathInfo::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline int64_t IndexFilePathInfo::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexFilePathInfo.num_rows)
  return _internal_num_rows();
}
inline void IndexFilePathInfo::_internal_set_num_rows(int64_t value) {
  
  _impl_.num_rows_ = value;
}
inline void IndexFilePathInfo::set_num_rows(int64_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexFilePathInfo.num_rows)
}

// -------------------------------------------------------------------

// SegmentInfo

// int64 collectionID = 1;
inline void SegmentInfo::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t SegmentInfo::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t SegmentInfo::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentInfo.collectionID)
  return _internal_collectionid();
}
inline void SegmentInfo::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void SegmentInfo::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentInfo.collectionID)
}

// int64 segmentID = 2;
inline void SegmentInfo::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t SegmentInfo::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t SegmentInfo::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentInfo.segmentID)
  return _internal_segmentid();
}
inline void SegmentInfo::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void SegmentInfo::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentInfo.segmentID)
}

// bool enable_index = 3;
inline void SegmentInfo::clear_enable_index() {
  _impl_.enable_index_ = false;
}
inline bool SegmentInfo::_internal_enable_index() const {
  return _impl_.enable_index_;
}
inline bool SegmentInfo::enable_index() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentInfo.enable_index)
  return _internal_enable_index();
}
inline void SegmentInfo::_internal_set_enable_index(bool value) {
  
  _impl_.enable_index_ = value;
}
inline void SegmentInfo::set_enable_index(bool value) {
  _internal_set_enable_index(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.SegmentInfo.enable_index)
}

// repeated .milvus.proto.index.IndexFilePathInfo index_infos = 4;
inline int SegmentInfo::_internal_index_infos_size() const {
  return _impl_.index_infos_.size();
}
inline int SegmentInfo::index_infos_size() const {
  return _internal_index_infos_size();
}
inline void SegmentInfo::clear_index_infos() {
  _impl_.index_infos_.Clear();
}
inline ::milvus::proto::index::IndexFilePathInfo* SegmentInfo::mutable_index_infos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.SegmentInfo.index_infos)
  return _impl_.index_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexFilePathInfo >*
SegmentInfo::mutable_index_infos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.SegmentInfo.index_infos)
  return &_impl_.index_infos_;
}
inline const ::milvus::proto::index::IndexFilePathInfo& SegmentInfo::_internal_index_infos(int index) const {
  return _impl_.index_infos_.Get(index);
}
inline const ::milvus::proto::index::IndexFilePathInfo& SegmentInfo::index_infos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.SegmentInfo.index_infos)
  return _internal_index_infos(index);
}
inline ::milvus::proto::index::IndexFilePathInfo* SegmentInfo::_internal_add_index_infos() {
  return _impl_.index_infos_.Add();
}
inline ::milvus::proto::index::IndexFilePathInfo* SegmentInfo::add_index_infos() {
  ::milvus::proto::index::IndexFilePathInfo* _add = _internal_add_index_infos();
  // @@protoc_insertion_point(field_add:milvus.proto.index.SegmentInfo.index_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexFilePathInfo >&
SegmentInfo::index_infos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.SegmentInfo.index_infos)
  return _impl_.index_infos_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetIndexInfoResponse

// .milvus.proto.common.Status status = 1;
inline bool GetIndexInfoResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetIndexInfoResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetIndexInfoResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetIndexInfoResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexInfoResponse.status)
  return _internal_status();
}
inline void GetIndexInfoResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.index.GetIndexInfoResponse.status)
}
inline ::milvus::proto::common::Status* GetIndexInfoResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexInfoResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.GetIndexInfoResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexInfoResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetIndexInfoResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetIndexInfoResponse.status)
  return _msg;
}
inline void GetIndexInfoResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.GetIndexInfoResponse.status)
}

// map<int64, .milvus.proto.index.SegmentInfo> segment_info = 2;
inline int GetIndexInfoResponse::_internal_segment_info_size() const {
  return _impl_.segment_info_.size();
}
inline int GetIndexInfoResponse::segment_info_size() const {
  return _internal_segment_info_size();
}
inline void GetIndexInfoResponse::clear_segment_info() {
  _impl_.segment_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::milvus::proto::index::SegmentInfo >&
GetIndexInfoResponse::_internal_segment_info() const {
  return _impl_.segment_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::milvus::proto::index::SegmentInfo >&
GetIndexInfoResponse::segment_info() const {
  // @@protoc_insertion_point(field_map:milvus.proto.index.GetIndexInfoResponse.segment_info)
  return _internal_segment_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::milvus::proto::index::SegmentInfo >*
GetIndexInfoResponse::_internal_mutable_segment_info() {
  return _impl_.segment_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::milvus::proto::index::SegmentInfo >*
GetIndexInfoResponse::mutable_segment_info() {
  // @@protoc_insertion_point(field_mutable_map:milvus.proto.index.GetIndexInfoResponse.segment_info)
  return _internal_mutable_segment_info();
}

// -------------------------------------------------------------------

// DropIndexRequest

// int64 collectionID = 1;
inline void DropIndexRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t DropIndexRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t DropIndexRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.DropIndexRequest.collectionID)
  return _internal_collectionid();
}
inline void DropIndexRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void DropIndexRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.DropIndexRequest.collectionID)
}

// repeated int64 partitionIDs = 2;
inline int DropIndexRequest::_internal_partitionids_size() const {
  return _impl_.partitionids_.size();
}
inline int DropIndexRequest::partitionids_size() const {
  return _internal_partitionids_size();
}
inline void DropIndexRequest::clear_partitionids() {
  _impl_.partitionids_.Clear();
}
inline int64_t DropIndexRequest::_internal_partitionids(int index) const {
  return _impl_.partitionids_.Get(index);
}
inline int64_t DropIndexRequest::partitionids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.DropIndexRequest.partitionIDs)
  return _internal_partitionids(index);
}
inline void DropIndexRequest::set_partitionids(int index, int64_t value) {
  _impl_.partitionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.DropIndexRequest.partitionIDs)
}
inline void DropIndexRequest::_internal_add_partitionids(int64_t value) {
  _impl_.partitionids_.Add(value);
}
inline void DropIndexRequest::add_partitionids(int64_t value) {
  _internal_add_partitionids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.index.DropIndexRequest.partitionIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DropIndexRequest::_internal_partitionids() const {
  return _impl_.partitionids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DropIndexRequest::partitionids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.DropIndexRequest.partitionIDs)
  return _internal_partitionids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DropIndexRequest::_internal_mutable_partitionids() {
  return &_impl_.partitionids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DropIndexRequest::mutable_partitionids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.DropIndexRequest.partitionIDs)
  return _internal_mutable_partitionids();
}

// string index_name = 3;
inline void DropIndexRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& DropIndexRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.DropIndexRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropIndexRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.DropIndexRequest.index_name)
}
inline std::string* DropIndexRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.DropIndexRequest.index_name)
  return _s;
}
inline const std::string& DropIndexRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void DropIndexRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropIndexRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropIndexRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.DropIndexRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void DropIndexRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.DropIndexRequest.index_name)
}

// bool drop_all = 4;
inline void DropIndexRequest::clear_drop_all() {
  _impl_.drop_all_ = false;
}
inline bool DropIndexRequest::_internal_drop_all() const {
  return _impl_.drop_all_;
}
inline bool DropIndexRequest::drop_all() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.DropIndexRequest.drop_all)
  return _internal_drop_all();
}
inline void DropIndexRequest::_internal_set_drop_all(bool value) {
  
  _impl_.drop_all_ = value;
}
inline void DropIndexRequest::set_drop_all(bool value) {
  _internal_set_drop_all(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.DropIndexRequest.drop_all)
}

// -------------------------------------------------------------------

// DescribeIndexRequest

// int64 collectionID = 1;
inline void DescribeIndexRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t DescribeIndexRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t DescribeIndexRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.DescribeIndexRequest.collectionID)
  return _internal_collectionid();
}
inline void DescribeIndexRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void DescribeIndexRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.DescribeIndexRequest.collectionID)
}

// string index_name = 2;
inline void DescribeIndexRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& DescribeIndexRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.DescribeIndexRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeIndexRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.DescribeIndexRequest.index_name)
}
inline std::string* DescribeIndexRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.DescribeIndexRequest.index_name)
  return _s;
}
inline const std::string& DescribeIndexRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void DescribeIndexRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeIndexRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeIndexRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.DescribeIndexRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void DescribeIndexRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.DescribeIndexRequest.index_name)
}

// -------------------------------------------------------------------

// DescribeIndexResponse

// .milvus.proto.common.Status status = 1;
inline bool DescribeIndexResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool DescribeIndexResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& DescribeIndexResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& DescribeIndexResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.DescribeIndexResponse.status)
  return _internal_status();
}
inline void DescribeIndexResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.index.DescribeIndexResponse.status)
}
inline ::milvus::proto::common::Status* DescribeIndexResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* DescribeIndexResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.DescribeIndexResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* DescribeIndexResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* DescribeIndexResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.DescribeIndexResponse.status)
  return _msg;
}
inline void DescribeIndexResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.DescribeIndexResponse.status)
}

// repeated .milvus.proto.index.IndexInfo index_infos = 2;
inline int DescribeIndexResponse::_internal_index_infos_size() const {
  return _impl_.index_infos_.size();
}
inline int DescribeIndexResponse::index_infos_size() const {
  return _internal_index_infos_size();
}
inline void DescribeIndexResponse::clear_index_infos() {
  _impl_.index_infos_.Clear();
}
inline ::milvus::proto::index::IndexInfo* DescribeIndexResponse::mutable_index_infos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.DescribeIndexResponse.index_infos)
  return _impl_.index_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexInfo >*
DescribeIndexResponse::mutable_index_infos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.DescribeIndexResponse.index_infos)
  return &_impl_.index_infos_;
}
inline const ::milvus::proto::index::IndexInfo& DescribeIndexResponse::_internal_index_infos(int index) const {
  return _impl_.index_infos_.Get(index);
}
inline const ::milvus::proto::index::IndexInfo& DescribeIndexResponse::index_infos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.DescribeIndexResponse.index_infos)
  return _internal_index_infos(index);
}
inline ::milvus::proto::index::IndexInfo* DescribeIndexResponse::_internal_add_index_infos() {
  return _impl_.index_infos_.Add();
}
inline ::milvus::proto::index::IndexInfo* DescribeIndexResponse::add_index_infos() {
  ::milvus::proto::index::IndexInfo* _add = _internal_add_index_infos();
  // @@protoc_insertion_point(field_add:milvus.proto.index.DescribeIndexResponse.index_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexInfo >&
DescribeIndexResponse::index_infos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.DescribeIndexResponse.index_infos)
  return _impl_.index_infos_;
}

// -------------------------------------------------------------------

// GetIndexBuildProgressRequest

// int64 collectionID = 1;
inline void GetIndexBuildProgressRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t GetIndexBuildProgressRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t GetIndexBuildProgressRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexBuildProgressRequest.collectionID)
  return _internal_collectionid();
}
inline void GetIndexBuildProgressRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void GetIndexBuildProgressRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetIndexBuildProgressRequest.collectionID)
}

// string index_name = 2;
inline void GetIndexBuildProgressRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& GetIndexBuildProgressRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexBuildProgressRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexBuildProgressRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetIndexBuildProgressRequest.index_name)
}
inline std::string* GetIndexBuildProgressRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetIndexBuildProgressRequest.index_name)
  return _s;
}
inline const std::string& GetIndexBuildProgressRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void GetIndexBuildProgressRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexBuildProgressRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexBuildProgressRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.GetIndexBuildProgressRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void GetIndexBuildProgressRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.GetIndexBuildProgressRequest.index_name)
}

// -------------------------------------------------------------------

// GetIndexBuildProgressResponse

// .milvus.proto.common.Status status = 1;
inline bool GetIndexBuildProgressResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetIndexBuildProgressResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetIndexBuildProgressResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetIndexBuildProgressResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexBuildProgressResponse.status)
  return _internal_status();
}
inline void GetIndexBuildProgressResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.index.GetIndexBuildProgressResponse.status)
}
inline ::milvus::proto::common::Status* GetIndexBuildProgressResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexBuildProgressResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.GetIndexBuildProgressResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexBuildProgressResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetIndexBuildProgressResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetIndexBuildProgressResponse.status)
  return _msg;
}
inline void GetIndexBuildProgressResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.GetIndexBuildProgressResponse.status)
}

// int64 indexed_rows = 2;
inline void GetIndexBuildProgressResponse::clear_indexed_rows() {
  _impl_.indexed_rows_ = int64_t{0};
}
inline int64_t GetIndexBuildProgressResponse::_internal_indexed_rows() const {
  return _impl_.indexed_rows_;
}
inline int64_t GetIndexBuildProgressResponse::indexed_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexBuildProgressResponse.indexed_rows)
  return _internal_indexed_rows();
}
inline void GetIndexBuildProgressResponse::_internal_set_indexed_rows(int64_t value) {
  
  _impl_.indexed_rows_ = value;
}
inline void GetIndexBuildProgressResponse::set_indexed_rows(int64_t value) {
  _internal_set_indexed_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetIndexBuildProgressResponse.indexed_rows)
}

// int64 total_rows = 3;
inline void GetIndexBuildProgressResponse::clear_total_rows() {
  _impl_.total_rows_ = int64_t{0};
}
inline int64_t GetIndexBuildProgressResponse::_internal_total_rows() const {
  return _impl_.total_rows_;
}
inline int64_t GetIndexBuildProgressResponse::total_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexBuildProgressResponse.total_rows)
  return _internal_total_rows();
}
inline void GetIndexBuildProgressResponse::_internal_set_total_rows(int64_t value) {
  
  _impl_.total_rows_ = value;
}
inline void GetIndexBuildProgressResponse::set_total_rows(int64_t value) {
  _internal_set_total_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetIndexBuildProgressResponse.total_rows)
}

// int64 pending_index_rows = 4;
inline void GetIndexBuildProgressResponse::clear_pending_index_rows() {
  _impl_.pending_index_rows_ = int64_t{0};
}
inline int64_t GetIndexBuildProgressResponse::_internal_pending_index_rows() const {
  return _impl_.pending_index_rows_;
}
inline int64_t GetIndexBuildProgressResponse::pending_index_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexBuildProgressResponse.pending_index_rows)
  return _internal_pending_index_rows();
}
inline void GetIndexBuildProgressResponse::_internal_set_pending_index_rows(int64_t value) {
  
  _impl_.pending_index_rows_ = value;
}
inline void GetIndexBuildProgressResponse::set_pending_index_rows(int64_t value) {
  _internal_set_pending_index_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetIndexBuildProgressResponse.pending_index_rows)
}

// -------------------------------------------------------------------

// StorageConfig

// string address = 1;
inline void StorageConfig::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& StorageConfig::address() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.StorageConfig.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageConfig::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.StorageConfig.address)
}
inline std::string* StorageConfig::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.StorageConfig.address)
  return _s;
}
inline const std::string& StorageConfig::_internal_address() const {
  return _impl_.address_.Get();
}
inline void StorageConfig::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageConfig::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageConfig::release_address() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.StorageConfig.address)
  return _impl_.address_.Release();
}
inline void StorageConfig::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.StorageConfig.address)
}

// string access_keyID = 2;
inline void StorageConfig::clear_access_keyid() {
  _impl_.access_keyid_.ClearToEmpty();
}
inline const std::string& StorageConfig::access_keyid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.StorageConfig.access_keyID)
  return _internal_access_keyid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageConfig::set_access_keyid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.access_keyid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.StorageConfig.access_keyID)
}
inline std::string* StorageConfig::mutable_access_keyid() {
  std::string* _s = _internal_mutable_access_keyid();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.StorageConfig.access_keyID)
  return _s;
}
inline const std::string& StorageConfig::_internal_access_keyid() const {
  return _impl_.access_keyid_.Get();
}
inline void StorageConfig::_internal_set_access_keyid(const std::string& value) {
  
  _impl_.access_keyid_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageConfig::_internal_mutable_access_keyid() {
  
  return _impl_.access_keyid_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageConfig::release_access_keyid() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.StorageConfig.access_keyID)
  return _impl_.access_keyid_.Release();
}
inline void StorageConfig::set_allocated_access_keyid(std::string* access_keyid) {
  if (access_keyid != nullptr) {
    
  } else {
    
  }
  _impl_.access_keyid_.SetAllocated(access_keyid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_keyid_.IsDefault()) {
    _impl_.access_keyid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.StorageConfig.access_keyID)
}

// string secret_access_key = 3;
inline void StorageConfig::clear_secret_access_key() {
  _impl_.secret_access_key_.ClearToEmpty();
}
inline const std::string& StorageConfig::secret_access_key() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.StorageConfig.secret_access_key)
  return _internal_secret_access_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageConfig::set_secret_access_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secret_access_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.StorageConfig.secret_access_key)
}
inline std::string* StorageConfig::mutable_secret_access_key() {
  std::string* _s = _internal_mutable_secret_access_key();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.StorageConfig.secret_access_key)
  return _s;
}
inline const std::string& StorageConfig::_internal_secret_access_key() const {
  return _impl_.secret_access_key_.Get();
}
inline void StorageConfig::_internal_set_secret_access_key(const std::string& value) {
  
  _impl_.secret_access_key_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageConfig::_internal_mutable_secret_access_key() {
  
  return _impl_.secret_access_key_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageConfig::release_secret_access_key() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.StorageConfig.secret_access_key)
  return _impl_.secret_access_key_.Release();
}
inline void StorageConfig::set_allocated_secret_access_key(std::string* secret_access_key) {
  if (secret_access_key != nullptr) {
    
  } else {
    
  }
  _impl_.secret_access_key_.SetAllocated(secret_access_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secret_access_key_.IsDefault()) {
    _impl_.secret_access_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.StorageConfig.secret_access_key)
}

// bool useSSL = 4;
inline void StorageConfig::clear_usessl() {
  _impl_.usessl_ = false;
}
inline bool StorageConfig::_internal_usessl() const {
  return _impl_.usessl_;
}
inline bool StorageConfig::usessl() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.StorageConfig.useSSL)
  return _internal_usessl();
}
inline void StorageConfig::_internal_set_usessl(bool value) {
  
  _impl_.usessl_ = value;
}
inline void StorageConfig::set_usessl(bool value) {
  _internal_set_usessl(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.StorageConfig.useSSL)
}

// string bucket_name = 5;
inline void StorageConfig::clear_bucket_name() {
  _impl_.bucket_name_.ClearToEmpty();
}
inline const std::string& StorageConfig::bucket_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.StorageConfig.bucket_name)
  return _internal_bucket_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageConfig::set_bucket_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bucket_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.StorageConfig.bucket_name)
}
inline std::string* StorageConfig::mutable_bucket_name() {
  std::string* _s = _internal_mutable_bucket_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.StorageConfig.bucket_name)
  return _s;
}
inline const std::string& StorageConfig::_internal_bucket_name() const {
  return _impl_.bucket_name_.Get();
}
inline void StorageConfig::_internal_set_bucket_name(const std::string& value) {
  
  _impl_.bucket_name_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageConfig::_internal_mutable_bucket_name() {
  
  return _impl_.bucket_name_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageConfig::release_bucket_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.StorageConfig.bucket_name)
  return _impl_.bucket_name_.Release();
}
inline void StorageConfig::set_allocated_bucket_name(std::string* bucket_name) {
  if (bucket_name != nullptr) {
    
  } else {
    
  }
  _impl_.bucket_name_.SetAllocated(bucket_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bucket_name_.IsDefault()) {
    _impl_.bucket_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.StorageConfig.bucket_name)
}

// string root_path = 6;
inline void StorageConfig::clear_root_path() {
  _impl_.root_path_.ClearToEmpty();
}
inline const std::string& StorageConfig::root_path() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.StorageConfig.root_path)
  return _internal_root_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageConfig::set_root_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.root_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.StorageConfig.root_path)
}
inline std::string* StorageConfig::mutable_root_path() {
  std::string* _s = _internal_mutable_root_path();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.StorageConfig.root_path)
  return _s;
}
inline const std::string& StorageConfig::_internal_root_path() const {
  return _impl_.root_path_.Get();
}
inline void StorageConfig::_internal_set_root_path(const std::string& value) {
  
  _impl_.root_path_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageConfig::_internal_mutable_root_path() {
  
  return _impl_.root_path_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageConfig::release_root_path() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.StorageConfig.root_path)
  return _impl_.root_path_.Release();
}
inline void StorageConfig::set_allocated_root_path(std::string* root_path) {
  if (root_path != nullptr) {
    
  } else {
    
  }
  _impl_.root_path_.SetAllocated(root_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.root_path_.IsDefault()) {
    _impl_.root_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.StorageConfig.root_path)
}

// bool useIAM = 7;
inline void StorageConfig::clear_useiam() {
  _impl_.useiam_ = false;
}
inline bool StorageConfig::_internal_useiam() const {
  return _impl_.useiam_;
}
inline bool StorageConfig::useiam() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.StorageConfig.useIAM)
  return _internal_useiam();
}
inline void StorageConfig::_internal_set_useiam(bool value) {
  
  _impl_.useiam_ = value;
}
inline void StorageConfig::set_useiam(bool value) {
  _internal_set_useiam(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.StorageConfig.useIAM)
}

// string IAMEndpoint = 8;
inline void StorageConfig::clear_iamendpoint() {
  _impl_.iamendpoint_.ClearToEmpty();
}
inline const std::string& StorageConfig::iamendpoint() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.StorageConfig.IAMEndpoint)
  return _internal_iamendpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageConfig::set_iamendpoint(ArgT0&& arg0, ArgT... args) {
 
 _impl_.iamendpoint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.StorageConfig.IAMEndpoint)
}
inline std::string* StorageConfig::mutable_iamendpoint() {
  std::string* _s = _internal_mutable_iamendpoint();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.StorageConfig.IAMEndpoint)
  return _s;
}
inline const std::string& StorageConfig::_internal_iamendpoint() const {
  return _impl_.iamendpoint_.Get();
}
inline void StorageConfig::_internal_set_iamendpoint(const std::string& value) {
  
  _impl_.iamendpoint_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageConfig::_internal_mutable_iamendpoint() {
  
  return _impl_.iamendpoint_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageConfig::release_iamendpoint() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.StorageConfig.IAMEndpoint)
  return _impl_.iamendpoint_.Release();
}
inline void StorageConfig::set_allocated_iamendpoint(std::string* iamendpoint) {
  if (iamendpoint != nullptr) {
    
  } else {
    
  }
  _impl_.iamendpoint_.SetAllocated(iamendpoint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.iamendpoint_.IsDefault()) {
    _impl_.iamendpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.StorageConfig.IAMEndpoint)
}

// string storage_type = 9;
inline void StorageConfig::clear_storage_type() {
  _impl_.storage_type_.ClearToEmpty();
}
inline const std::string& StorageConfig::storage_type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.StorageConfig.storage_type)
  return _internal_storage_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageConfig::set_storage_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.storage_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.StorageConfig.storage_type)
}
inline std::string* StorageConfig::mutable_storage_type() {
  std::string* _s = _internal_mutable_storage_type();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.StorageConfig.storage_type)
  return _s;
}
inline const std::string& StorageConfig::_internal_storage_type() const {
  return _impl_.storage_type_.Get();
}
inline void StorageConfig::_internal_set_storage_type(const std::string& value) {
  
  _impl_.storage_type_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageConfig::_internal_mutable_storage_type() {
  
  return _impl_.storage_type_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageConfig::release_storage_type() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.StorageConfig.storage_type)
  return _impl_.storage_type_.Release();
}
inline void StorageConfig::set_allocated_storage_type(std::string* storage_type) {
  if (storage_type != nullptr) {
    
  } else {
    
  }
  _impl_.storage_type_.SetAllocated(storage_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.storage_type_.IsDefault()) {
    _impl_.storage_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.StorageConfig.storage_type)
}

// -------------------------------------------------------------------

// CreateJobRequest

// string clusterID = 1;
inline void CreateJobRequest::clear_clusterid() {
  _impl_.clusterid_.ClearToEmpty();
}
inline const std::string& CreateJobRequest::clusterid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateJobRequest.clusterID)
  return _internal_clusterid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateJobRequest::set_clusterid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clusterid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.CreateJobRequest.clusterID)
}
inline std::string* CreateJobRequest::mutable_clusterid() {
  std::string* _s = _internal_mutable_clusterid();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.CreateJobRequest.clusterID)
  return _s;
}
inline const std::string& CreateJobRequest::_internal_clusterid() const {
  return _impl_.clusterid_.Get();
}
inline void CreateJobRequest::_internal_set_clusterid(const std::string& value) {
  
  _impl_.clusterid_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateJobRequest::_internal_mutable_clusterid() {
  
  return _impl_.clusterid_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateJobRequest::release_clusterid() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.CreateJobRequest.clusterID)
  return _impl_.clusterid_.Release();
}
inline void CreateJobRequest::set_allocated_clusterid(std::string* clusterid) {
  if (clusterid != nullptr) {
    
  } else {
    
  }
  _impl_.clusterid_.SetAllocated(clusterid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clusterid_.IsDefault()) {
    _impl_.clusterid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.CreateJobRequest.clusterID)
}

// string index_file_prefix = 2;
inline void CreateJobRequest::clear_index_file_prefix() {
  _impl_.index_file_prefix_.ClearToEmpty();
}
inline const std::string& CreateJobRequest::index_file_prefix() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateJobRequest.index_file_prefix)
  return _internal_index_file_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateJobRequest::set_index_file_prefix(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_file_prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.CreateJobRequest.index_file_prefix)
}
inline std::string* CreateJobRequest::mutable_index_file_prefix() {
  std::string* _s = _internal_mutable_index_file_prefix();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.CreateJobRequest.index_file_prefix)
  return _s;
}
inline const std::string& CreateJobRequest::_internal_index_file_prefix() const {
  return _impl_.index_file_prefix_.Get();
}
inline void CreateJobRequest::_internal_set_index_file_prefix(const std::string& value) {
  
  _impl_.index_file_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateJobRequest::_internal_mutable_index_file_prefix() {
  
  return _impl_.index_file_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateJobRequest::release_index_file_prefix() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.CreateJobRequest.index_file_prefix)
  return _impl_.index_file_prefix_.Release();
}
inline void CreateJobRequest::set_allocated_index_file_prefix(std::string* index_file_prefix) {
  if (index_file_prefix != nullptr) {
    
  } else {
    
  }
  _impl_.index_file_prefix_.SetAllocated(index_file_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_file_prefix_.IsDefault()) {
    _impl_.index_file_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.CreateJobRequest.index_file_prefix)
}

// int64 buildID = 3;
inline void CreateJobRequest::clear_buildid() {
  _impl_.buildid_ = int64_t{0};
}
inline int64_t CreateJobRequest::_internal_buildid() const {
  return _impl_.buildid_;
}
inline int64_t CreateJobRequest::buildid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateJobRequest.buildID)
  return _internal_buildid();
}
inline void CreateJobRequest::_internal_set_buildid(int64_t value) {
  
  _impl_.buildid_ = value;
}
inline void CreateJobRequest::set_buildid(int64_t value) {
  _internal_set_buildid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.CreateJobRequest.buildID)
}

// repeated string data_paths = 4;
inline int CreateJobRequest::_internal_data_paths_size() const {
  return _impl_.data_paths_.size();
}
inline int CreateJobRequest::data_paths_size() const {
  return _internal_data_paths_size();
}
inline void CreateJobRequest::clear_data_paths() {
  _impl_.data_paths_.Clear();
}
inline std::string* CreateJobRequest::add_data_paths() {
  std::string* _s = _internal_add_data_paths();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.index.CreateJobRequest.data_paths)
  return _s;
}
inline const std::string& CreateJobRequest::_internal_data_paths(int index) const {
  return _impl_.data_paths_.Get(index);
}
inline const std::string& CreateJobRequest::data_paths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateJobRequest.data_paths)
  return _internal_data_paths(index);
}
inline std::string* CreateJobRequest::mutable_data_paths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.CreateJobRequest.data_paths)
  return _impl_.data_paths_.Mutable(index);
}
inline void CreateJobRequest::set_data_paths(int index, const std::string& value) {
  _impl_.data_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.CreateJobRequest.data_paths)
}
inline void CreateJobRequest::set_data_paths(int index, std::string&& value) {
  _impl_.data_paths_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.index.CreateJobRequest.data_paths)
}
inline void CreateJobRequest::set_data_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.index.CreateJobRequest.data_paths)
}
inline void CreateJobRequest::set_data_paths(int index, const char* value, size_t size) {
  _impl_.data_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.index.CreateJobRequest.data_paths)
}
inline std::string* CreateJobRequest::_internal_add_data_paths() {
  return _impl_.data_paths_.Add();
}
inline void CreateJobRequest::add_data_paths(const std::string& value) {
  _impl_.data_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.index.CreateJobRequest.data_paths)
}
inline void CreateJobRequest::add_data_paths(std::string&& value) {
  _impl_.data_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.index.CreateJobRequest.data_paths)
}
inline void CreateJobRequest::add_data_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.index.CreateJobRequest.data_paths)
}
inline void CreateJobRequest::add_data_paths(const char* value, size_t size) {
  _impl_.data_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.index.CreateJobRequest.data_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateJobRequest::data_paths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.CreateJobRequest.data_paths)
  return _impl_.data_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateJobRequest::mutable_data_paths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.CreateJobRequest.data_paths)
  return &_impl_.data_paths_;
}

// int64 index_version = 5;
inline void CreateJobRequest::clear_index_version() {
  _impl_.index_version_ = int64_t{0};
}
inline int64_t CreateJobRequest::_internal_index_version() const {
  return _impl_.index_version_;
}
inline int64_t CreateJobRequest::index_version() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateJobRequest.index_version)
  return _internal_index_version();
}
inline void CreateJobRequest::_internal_set_index_version(int64_t value) {
  
  _impl_.index_version_ = value;
}
inline void CreateJobRequest::set_index_version(int64_t value) {
  _internal_set_index_version(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.CreateJobRequest.index_version)
}

// int64 indexID = 6;
inline void CreateJobRequest::clear_indexid() {
  _impl_.indexid_ = int64_t{0};
}
inline int64_t CreateJobRequest::_internal_indexid() const {
  return _impl_.indexid_;
}
inline int64_t CreateJobRequest::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateJobRequest.indexID)
  return _internal_indexid();
}
inline void CreateJobRequest::_internal_set_indexid(int64_t value) {
  
  _impl_.indexid_ = value;
}
inline void CreateJobRequest::set_indexid(int64_t value) {
  _internal_set_indexid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.CreateJobRequest.indexID)
}

// string index_name = 7;
inline void CreateJobRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& CreateJobRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateJobRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateJobRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.CreateJobRequest.index_name)
}
inline std::string* CreateJobRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.CreateJobRequest.index_name)
  return _s;
}
inline const std::string& CreateJobRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void CreateJobRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateJobRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateJobRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.CreateJobRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void CreateJobRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.CreateJobRequest.index_name)
}

// .milvus.proto.index.StorageConfig storage_config = 8;
inline bool CreateJobRequest::_internal_has_storage_config() const {
  return this != internal_default_instance() && _impl_.storage_config_ != nullptr;
}
inline bool CreateJobRequest::has_storage_config() const {
  return _internal_has_storage_config();
}
inline void CreateJobRequest::clear_storage_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.storage_config_ != nullptr) {
    delete _impl_.storage_config_;
  }
  _impl_.storage_config_ = nullptr;
}
inline const ::milvus::proto::index::StorageConfig& CreateJobRequest::_internal_storage_config() const {
  const ::milvus::proto::index::StorageConfig* p = _impl_.storage_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::index::StorageConfig&>(
      ::milvus::proto::index::_StorageConfig_default_instance_);
}
inline const ::milvus::proto::index::StorageConfig& CreateJobRequest::storage_config() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateJobRequest.storage_config)
  return _internal_storage_config();
}
inline void CreateJobRequest::unsafe_arena_set_allocated_storage_config(
    ::milvus::proto::index::StorageConfig* storage_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.storage_config_);
  }
  _impl_.storage_config_ = storage_config;
  if (storage_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.index.CreateJobRequest.storage_config)
}
inline ::milvus::proto::index::StorageConfig* CreateJobRequest::release_storage_config() {
  
  ::milvus::proto::index::StorageConfig* temp = _impl_.storage_config_;
  _impl_.storage_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::index::StorageConfig* CreateJobRequest::unsafe_arena_release_storage_config() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.CreateJobRequest.storage_config)
  
  ::milvus::proto::index::StorageConfig* temp = _impl_.storage_config_;
  _impl_.storage_config_ = nullptr;
  return temp;
}
inline ::milvus::proto::index::StorageConfig* CreateJobRequest::_internal_mutable_storage_config() {
  
  if (_impl_.storage_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::index::StorageConfig>(GetArenaForAllocation());
    _impl_.storage_config_ = p;
  }
  return _impl_.storage_config_;
}
inline ::milvus::proto::index::StorageConfig* CreateJobRequest::mutable_storage_config() {
  ::milvus::proto::index::StorageConfig* _msg = _internal_mutable_storage_config();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.CreateJobRequest.storage_config)
  return _msg;
}
inline void CreateJobRequest::set_allocated_storage_config(::milvus::proto::index::StorageConfig* storage_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.storage_config_;
  }
  if (storage_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(storage_config);
    if (message_arena != submessage_arena) {
      storage_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.storage_config_ = storage_config;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.CreateJobRequest.storage_config)
}

// repeated .milvus.proto.common.KeyValuePair index_params = 9;
inline int CreateJobRequest::_internal_index_params_size() const {
  return _impl_.index_params_.size();
}
inline int CreateJobRequest::index_params_size() const {
  return _internal_index_params_size();
}
inline ::milvus::proto::common::KeyValuePair* CreateJobRequest::mutable_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.CreateJobRequest.index_params)
  return _impl_.index_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
CreateJobRequest::mutable_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.CreateJobRequest.index_params)
  return &_impl_.index_params_;
}
inline const ::milvus::proto::common::KeyValuePair& CreateJobRequest::_internal_index_params(int index) const {
  return _impl_.index_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& CreateJobRequest::index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateJobRequest.index_params)
  return _internal_index_params(index);
}
inline ::milvus::proto::common::KeyValuePair* CreateJobRequest::_internal_add_index_params() {
  return _impl_.index_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* CreateJobRequest::add_index_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_index_params();
  // @@protoc_insertion_point(field_add:milvus.proto.index.CreateJobRequest.index_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
CreateJobRequest::index_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.CreateJobRequest.index_params)
  return _impl_.index_params_;
}

// repeated .milvus.proto.common.KeyValuePair type_params = 10;
inline int CreateJobRequest::_internal_type_params_size() const {
  return _impl_.type_params_.size();
}
inline int CreateJobRequest::type_params_size() const {
  return _internal_type_params_size();
}
inline ::milvus::proto::common::KeyValuePair* CreateJobRequest::mutable_type_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.CreateJobRequest.type_params)
  return _impl_.type_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
CreateJobRequest::mutable_type_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.CreateJobRequest.type_params)
  return &_impl_.type_params_;
}
inline const ::milvus::proto::common::KeyValuePair& CreateJobRequest::_internal_type_params(int index) const {
  return _impl_.type_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& CreateJobRequest::type_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateJobRequest.type_params)
  return _internal_type_params(index);
}
inline ::milvus::proto::common::KeyValuePair* CreateJobRequest::_internal_add_type_params() {
  return _impl_.type_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* CreateJobRequest::add_type_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_type_params();
  // @@protoc_insertion_point(field_add:milvus.proto.index.CreateJobRequest.type_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
CreateJobRequest::type_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.CreateJobRequest.type_params)
  return _impl_.type_params_;
}

// int64 num_rows = 11;
inline void CreateJobRequest::clear_num_rows() {
  _impl_.num_rows_ = int64_t{0};
}
inline int64_t CreateJobRequest::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline int64_t CreateJobRequest::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.CreateJobRequest.num_rows)
  return _internal_num_rows();
}
inline void CreateJobRequest::_internal_set_num_rows(int64_t value) {
  
  _impl_.num_rows_ = value;
}
inline void CreateJobRequest::set_num_rows(int64_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.CreateJobRequest.num_rows)
}

// -------------------------------------------------------------------

// QueryJobsRequest

// string clusterID = 1;
inline void QueryJobsRequest::clear_clusterid() {
  _impl_.clusterid_.ClearToEmpty();
}
inline const std::string& QueryJobsRequest::clusterid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.QueryJobsRequest.clusterID)
  return _internal_clusterid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryJobsRequest::set_clusterid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clusterid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.QueryJobsRequest.clusterID)
}
inline std::string* QueryJobsRequest::mutable_clusterid() {
  std::string* _s = _internal_mutable_clusterid();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.QueryJobsRequest.clusterID)
  return _s;
}
inline const std::string& QueryJobsRequest::_internal_clusterid() const {
  return _impl_.clusterid_.Get();
}
inline void QueryJobsRequest::_internal_set_clusterid(const std::string& value) {
  
  _impl_.clusterid_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryJobsRequest::_internal_mutable_clusterid() {
  
  return _impl_.clusterid_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryJobsRequest::release_clusterid() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.QueryJobsRequest.clusterID)
  return _impl_.clusterid_.Release();
}
inline void QueryJobsRequest::set_allocated_clusterid(std::string* clusterid) {
  if (clusterid != nullptr) {
    
  } else {
    
  }
  _impl_.clusterid_.SetAllocated(clusterid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clusterid_.IsDefault()) {
    _impl_.clusterid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.QueryJobsRequest.clusterID)
}

// repeated int64 buildIDs = 2;
inline int QueryJobsRequest::_internal_buildids_size() const {
  return _impl_.buildids_.size();
}
inline int QueryJobsRequest::buildids_size() const {
  return _internal_buildids_size();
}
inline void QueryJobsRequest::clear_buildids() {
  _impl_.buildids_.Clear();
}
inline int64_t QueryJobsRequest::_internal_buildids(int index) const {
  return _impl_.buildids_.Get(index);
}
inline int64_t QueryJobsRequest::buildids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.QueryJobsRequest.buildIDs)
  return _internal_buildids(index);
}
inline void QueryJobsRequest::set_buildids(int index, int64_t value) {
  _impl_.buildids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.QueryJobsRequest.buildIDs)
}
inline void QueryJobsRequest::_internal_add_buildids(int64_t value) {
  _impl_.buildids_.Add(value);
}
inline void QueryJobsRequest::add_buildids(int64_t value) {
  _internal_add_buildids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.index.QueryJobsRequest.buildIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
QueryJobsRequest::_internal_buildids() const {
  return _impl_.buildids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
QueryJobsRequest::buildids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.QueryJobsRequest.buildIDs)
  return _internal_buildids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
QueryJobsRequest::_internal_mutable_buildids() {
  return &_impl_.buildids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
QueryJobsRequest::mutable_buildids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.QueryJobsRequest.buildIDs)
  return _internal_mutable_buildids();
}

// -------------------------------------------------------------------

// IndexTaskInfo

// int64 buildID = 1;
inline void IndexTaskInfo::clear_buildid() {
  _impl_.buildid_ = int64_t{0};
}
inline int64_t IndexTaskInfo::_internal_buildid() const {
  return _impl_.buildid_;
}
inline int64_t IndexTaskInfo::buildid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexTaskInfo.buildID)
  return _internal_buildid();
}
inline void IndexTaskInfo::_internal_set_buildid(int64_t value) {
  
  _impl_.buildid_ = value;
}
inline void IndexTaskInfo::set_buildid(int64_t value) {
  _internal_set_buildid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexTaskInfo.buildID)
}

// .milvus.proto.common.IndexState state = 2;
inline void IndexTaskInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::IndexState IndexTaskInfo::_internal_state() const {
  return static_cast< ::milvus::proto::common::IndexState >(_impl_.state_);
}
inline ::milvus::proto::common::IndexState IndexTaskInfo::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexTaskInfo.state)
  return _internal_state();
}
inline void IndexTaskInfo::_internal_set_state(::milvus::proto::common::IndexState value) {
  
  _impl_.state_ = value;
}
inline void IndexTaskInfo::set_state(::milvus::proto::common::IndexState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexTaskInfo.state)
}

// repeated string index_file_keys = 3;
inline int IndexTaskInfo::_internal_index_file_keys_size() const {
  return _impl_.index_file_keys_.size();
}
inline int IndexTaskInfo::index_file_keys_size() const {
  return _internal_index_file_keys_size();
}
inline void IndexTaskInfo::clear_index_file_keys() {
  _impl_.index_file_keys_.Clear();
}
inline std::string* IndexTaskInfo::add_index_file_keys() {
  std::string* _s = _internal_add_index_file_keys();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.index.IndexTaskInfo.index_file_keys)
  return _s;
}
inline const std::string& IndexTaskInfo::_internal_index_file_keys(int index) const {
  return _impl_.index_file_keys_.Get(index);
}
inline const std::string& IndexTaskInfo::index_file_keys(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexTaskInfo.index_file_keys)
  return _internal_index_file_keys(index);
}
inline std::string* IndexTaskInfo::mutable_index_file_keys(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.IndexTaskInfo.index_file_keys)
  return _impl_.index_file_keys_.Mutable(index);
}
inline void IndexTaskInfo::set_index_file_keys(int index, const std::string& value) {
  _impl_.index_file_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexTaskInfo.index_file_keys)
}
inline void IndexTaskInfo::set_index_file_keys(int index, std::string&& value) {
  _impl_.index_file_keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexTaskInfo.index_file_keys)
}
inline void IndexTaskInfo::set_index_file_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.index_file_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.index.IndexTaskInfo.index_file_keys)
}
inline void IndexTaskInfo::set_index_file_keys(int index, const char* value, size_t size) {
  _impl_.index_file_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.index.IndexTaskInfo.index_file_keys)
}
inline std::string* IndexTaskInfo::_internal_add_index_file_keys() {
  return _impl_.index_file_keys_.Add();
}
inline void IndexTaskInfo::add_index_file_keys(const std::string& value) {
  _impl_.index_file_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.index.IndexTaskInfo.index_file_keys)
}
inline void IndexTaskInfo::add_index_file_keys(std::string&& value) {
  _impl_.index_file_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.index.IndexTaskInfo.index_file_keys)
}
inline void IndexTaskInfo::add_index_file_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.index_file_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.index.IndexTaskInfo.index_file_keys)
}
inline void IndexTaskInfo::add_index_file_keys(const char* value, size_t size) {
  _impl_.index_file_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.index.IndexTaskInfo.index_file_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IndexTaskInfo::index_file_keys() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.IndexTaskInfo.index_file_keys)
  return _impl_.index_file_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IndexTaskInfo::mutable_index_file_keys() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.IndexTaskInfo.index_file_keys)
  return &_impl_.index_file_keys_;
}

// uint64 serialized_size = 4;
inline void IndexTaskInfo::clear_serialized_size() {
  _impl_.serialized_size_ = uint64_t{0u};
}
inline uint64_t IndexTaskInfo::_internal_serialized_size() const {
  return _impl_.serialized_size_;
}
inline uint64_t IndexTaskInfo::serialized_size() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexTaskInfo.serialized_size)
  return _internal_serialized_size();
}
inline void IndexTaskInfo::_internal_set_serialized_size(uint64_t value) {
  
  _impl_.serialized_size_ = value;
}
inline void IndexTaskInfo::set_serialized_size(uint64_t value) {
  _internal_set_serialized_size(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexTaskInfo.serialized_size)
}

// string fail_reason = 5;
inline void IndexTaskInfo::clear_fail_reason() {
  _impl_.fail_reason_.ClearToEmpty();
}
inline const std::string& IndexTaskInfo::fail_reason() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.IndexTaskInfo.fail_reason)
  return _internal_fail_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexTaskInfo::set_fail_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fail_reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.IndexTaskInfo.fail_reason)
}
inline std::string* IndexTaskInfo::mutable_fail_reason() {
  std::string* _s = _internal_mutable_fail_reason();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.IndexTaskInfo.fail_reason)
  return _s;
}
inline const std::string& IndexTaskInfo::_internal_fail_reason() const {
  return _impl_.fail_reason_.Get();
}
inline void IndexTaskInfo::_internal_set_fail_reason(const std::string& value) {
  
  _impl_.fail_reason_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexTaskInfo::_internal_mutable_fail_reason() {
  
  return _impl_.fail_reason_.Mutable(GetArenaForAllocation());
}
inline std::string* IndexTaskInfo::release_fail_reason() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.IndexTaskInfo.fail_reason)
  return _impl_.fail_reason_.Release();
}
inline void IndexTaskInfo::set_allocated_fail_reason(std::string* fail_reason) {
  if (fail_reason != nullptr) {
    
  } else {
    
  }
  _impl_.fail_reason_.SetAllocated(fail_reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fail_reason_.IsDefault()) {
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.IndexTaskInfo.fail_reason)
}

// -------------------------------------------------------------------

// QueryJobsResponse

// .milvus.proto.common.Status status = 1;
inline bool QueryJobsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool QueryJobsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& QueryJobsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& QueryJobsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.QueryJobsResponse.status)
  return _internal_status();
}
inline void QueryJobsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.index.QueryJobsResponse.status)
}
inline ::milvus::proto::common::Status* QueryJobsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* QueryJobsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.QueryJobsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* QueryJobsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* QueryJobsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.QueryJobsResponse.status)
  return _msg;
}
inline void QueryJobsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.QueryJobsResponse.status)
}

// string clusterID = 2;
inline void QueryJobsResponse::clear_clusterid() {
  _impl_.clusterid_.ClearToEmpty();
}
inline const std::string& QueryJobsResponse::clusterid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.QueryJobsResponse.clusterID)
  return _internal_clusterid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryJobsResponse::set_clusterid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clusterid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.QueryJobsResponse.clusterID)
}
inline std::string* QueryJobsResponse::mutable_clusterid() {
  std::string* _s = _internal_mutable_clusterid();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.QueryJobsResponse.clusterID)
  return _s;
}
inline const std::string& QueryJobsResponse::_internal_clusterid() const {
  return _impl_.clusterid_.Get();
}
inline void QueryJobsResponse::_internal_set_clusterid(const std::string& value) {
  
  _impl_.clusterid_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryJobsResponse::_internal_mutable_clusterid() {
  
  return _impl_.clusterid_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryJobsResponse::release_clusterid() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.QueryJobsResponse.clusterID)
  return _impl_.clusterid_.Release();
}
inline void QueryJobsResponse::set_allocated_clusterid(std::string* clusterid) {
  if (clusterid != nullptr) {
    
  } else {
    
  }
  _impl_.clusterid_.SetAllocated(clusterid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clusterid_.IsDefault()) {
    _impl_.clusterid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.QueryJobsResponse.clusterID)
}

// repeated .milvus.proto.index.IndexTaskInfo index_infos = 3;
inline int QueryJobsResponse::_internal_index_infos_size() const {
  return _impl_.index_infos_.size();
}
inline int QueryJobsResponse::index_infos_size() const {
  return _internal_index_infos_size();
}
inline void QueryJobsResponse::clear_index_infos() {
  _impl_.index_infos_.Clear();
}
inline ::milvus::proto::index::IndexTaskInfo* QueryJobsResponse::mutable_index_infos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.QueryJobsResponse.index_infos)
  return _impl_.index_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexTaskInfo >*
QueryJobsResponse::mutable_index_infos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.QueryJobsResponse.index_infos)
  return &_impl_.index_infos_;
}
inline const ::milvus::proto::index::IndexTaskInfo& QueryJobsResponse::_internal_index_infos(int index) const {
  return _impl_.index_infos_.Get(index);
}
inline const ::milvus::proto::index::IndexTaskInfo& QueryJobsResponse::index_infos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.QueryJobsResponse.index_infos)
  return _internal_index_infos(index);
}
inline ::milvus::proto::index::IndexTaskInfo* QueryJobsResponse::_internal_add_index_infos() {
  return _impl_.index_infos_.Add();
}
inline ::milvus::proto::index::IndexTaskInfo* QueryJobsResponse::add_index_infos() {
  ::milvus::proto::index::IndexTaskInfo* _add = _internal_add_index_infos();
  // @@protoc_insertion_point(field_add:milvus.proto.index.QueryJobsResponse.index_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexTaskInfo >&
QueryJobsResponse::index_infos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.QueryJobsResponse.index_infos)
  return _impl_.index_infos_;
}

// -------------------------------------------------------------------

// DropJobsRequest

// string clusterID = 1;
inline void DropJobsRequest::clear_clusterid() {
  _impl_.clusterid_.ClearToEmpty();
}
inline const std::string& DropJobsRequest::clusterid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.DropJobsRequest.clusterID)
  return _internal_clusterid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropJobsRequest::set_clusterid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clusterid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.DropJobsRequest.clusterID)
}
inline std::string* DropJobsRequest::mutable_clusterid() {
  std::string* _s = _internal_mutable_clusterid();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.DropJobsRequest.clusterID)
  return _s;
}
inline const std::string& DropJobsRequest::_internal_clusterid() const {
  return _impl_.clusterid_.Get();
}
inline void DropJobsRequest::_internal_set_clusterid(const std::string& value) {
  
  _impl_.clusterid_.Set(value, GetArenaForAllocation());
}
inline std::string* DropJobsRequest::_internal_mutable_clusterid() {
  
  return _impl_.clusterid_.Mutable(GetArenaForAllocation());
}
inline std::string* DropJobsRequest::release_clusterid() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.DropJobsRequest.clusterID)
  return _impl_.clusterid_.Release();
}
inline void DropJobsRequest::set_allocated_clusterid(std::string* clusterid) {
  if (clusterid != nullptr) {
    
  } else {
    
  }
  _impl_.clusterid_.SetAllocated(clusterid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clusterid_.IsDefault()) {
    _impl_.clusterid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.DropJobsRequest.clusterID)
}

// repeated int64 buildIDs = 2;
inline int DropJobsRequest::_internal_buildids_size() const {
  return _impl_.buildids_.size();
}
inline int DropJobsRequest::buildids_size() const {
  return _internal_buildids_size();
}
inline void DropJobsRequest::clear_buildids() {
  _impl_.buildids_.Clear();
}
inline int64_t DropJobsRequest::_internal_buildids(int index) const {
  return _impl_.buildids_.Get(index);
}
inline int64_t DropJobsRequest::buildids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.DropJobsRequest.buildIDs)
  return _internal_buildids(index);
}
inline void DropJobsRequest::set_buildids(int index, int64_t value) {
  _impl_.buildids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.DropJobsRequest.buildIDs)
}
inline void DropJobsRequest::_internal_add_buildids(int64_t value) {
  _impl_.buildids_.Add(value);
}
inline void DropJobsRequest::add_buildids(int64_t value) {
  _internal_add_buildids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.index.DropJobsRequest.buildIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DropJobsRequest::_internal_buildids() const {
  return _impl_.buildids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DropJobsRequest::buildids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.DropJobsRequest.buildIDs)
  return _internal_buildids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DropJobsRequest::_internal_mutable_buildids() {
  return &_impl_.buildids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DropJobsRequest::mutable_buildids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.DropJobsRequest.buildIDs)
  return _internal_mutable_buildids();
}

// -------------------------------------------------------------------

// JobInfo

// int64 num_rows = 1;
inline void JobInfo::clear_num_rows() {
  _impl_.num_rows_ = int64_t{0};
}
inline int64_t JobInfo::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline int64_t JobInfo::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.JobInfo.num_rows)
  return _internal_num_rows();
}
inline void JobInfo::_internal_set_num_rows(int64_t value) {
  
  _impl_.num_rows_ = value;
}
inline void JobInfo::set_num_rows(int64_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.JobInfo.num_rows)
}

// int64 dim = 2;
inline void JobInfo::clear_dim() {
  _impl_.dim_ = int64_t{0};
}
inline int64_t JobInfo::_internal_dim() const {
  return _impl_.dim_;
}
inline int64_t JobInfo::dim() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.JobInfo.dim)
  return _internal_dim();
}
inline void JobInfo::_internal_set_dim(int64_t value) {
  
  _impl_.dim_ = value;
}
inline void JobInfo::set_dim(int64_t value) {
  _internal_set_dim(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.JobInfo.dim)
}

// int64 start_time = 3;
inline void JobInfo::clear_start_time() {
  _impl_.start_time_ = int64_t{0};
}
inline int64_t JobInfo::_internal_start_time() const {
  return _impl_.start_time_;
}
inline int64_t JobInfo::start_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.JobInfo.start_time)
  return _internal_start_time();
}
inline void JobInfo::_internal_set_start_time(int64_t value) {
  
  _impl_.start_time_ = value;
}
inline void JobInfo::set_start_time(int64_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.JobInfo.start_time)
}

// int64 end_time = 4;
inline void JobInfo::clear_end_time() {
  _impl_.end_time_ = int64_t{0};
}
inline int64_t JobInfo::_internal_end_time() const {
  return _impl_.end_time_;
}
inline int64_t JobInfo::end_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.JobInfo.end_time)
  return _internal_end_time();
}
inline void JobInfo::_internal_set_end_time(int64_t value) {
  
  _impl_.end_time_ = value;
}
inline void JobInfo::set_end_time(int64_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.JobInfo.end_time)
}

// repeated .milvus.proto.common.KeyValuePair index_params = 5;
inline int JobInfo::_internal_index_params_size() const {
  return _impl_.index_params_.size();
}
inline int JobInfo::index_params_size() const {
  return _internal_index_params_size();
}
inline ::milvus::proto::common::KeyValuePair* JobInfo::mutable_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.JobInfo.index_params)
  return _impl_.index_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
JobInfo::mutable_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.JobInfo.index_params)
  return &_impl_.index_params_;
}
inline const ::milvus::proto::common::KeyValuePair& JobInfo::_internal_index_params(int index) const {
  return _impl_.index_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& JobInfo::index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.JobInfo.index_params)
  return _internal_index_params(index);
}
inline ::milvus::proto::common::KeyValuePair* JobInfo::_internal_add_index_params() {
  return _impl_.index_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* JobInfo::add_index_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_index_params();
  // @@protoc_insertion_point(field_add:milvus.proto.index.JobInfo.index_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
JobInfo::index_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.JobInfo.index_params)
  return _impl_.index_params_;
}

// int64 podID = 6;
inline void JobInfo::clear_podid() {
  _impl_.podid_ = int64_t{0};
}
inline int64_t JobInfo::_internal_podid() const {
  return _impl_.podid_;
}
inline int64_t JobInfo::podid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.JobInfo.podID)
  return _internal_podid();
}
inline void JobInfo::_internal_set_podid(int64_t value) {
  
  _impl_.podid_ = value;
}
inline void JobInfo::set_podid(int64_t value) {
  _internal_set_podid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.JobInfo.podID)
}

// -------------------------------------------------------------------

// GetJobStatsRequest

// -------------------------------------------------------------------

// GetJobStatsResponse

// .milvus.proto.common.Status status = 1;
inline bool GetJobStatsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetJobStatsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetJobStatsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetJobStatsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetJobStatsResponse.status)
  return _internal_status();
}
inline void GetJobStatsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.index.GetJobStatsResponse.status)
}
inline ::milvus::proto::common::Status* GetJobStatsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetJobStatsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.GetJobStatsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetJobStatsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetJobStatsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetJobStatsResponse.status)
  return _msg;
}
inline void GetJobStatsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.GetJobStatsResponse.status)
}

// int64 total_job_num = 2;
inline void GetJobStatsResponse::clear_total_job_num() {
  _impl_.total_job_num_ = int64_t{0};
}
inline int64_t GetJobStatsResponse::_internal_total_job_num() const {
  return _impl_.total_job_num_;
}
inline int64_t GetJobStatsResponse::total_job_num() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetJobStatsResponse.total_job_num)
  return _internal_total_job_num();
}
inline void GetJobStatsResponse::_internal_set_total_job_num(int64_t value) {
  
  _impl_.total_job_num_ = value;
}
inline void GetJobStatsResponse::set_total_job_num(int64_t value) {
  _internal_set_total_job_num(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetJobStatsResponse.total_job_num)
}

// int64 in_progress_job_num = 3;
inline void GetJobStatsResponse::clear_in_progress_job_num() {
  _impl_.in_progress_job_num_ = int64_t{0};
}
inline int64_t GetJobStatsResponse::_internal_in_progress_job_num() const {
  return _impl_.in_progress_job_num_;
}
inline int64_t GetJobStatsResponse::in_progress_job_num() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetJobStatsResponse.in_progress_job_num)
  return _internal_in_progress_job_num();
}
inline void GetJobStatsResponse::_internal_set_in_progress_job_num(int64_t value) {
  
  _impl_.in_progress_job_num_ = value;
}
inline void GetJobStatsResponse::set_in_progress_job_num(int64_t value) {
  _internal_set_in_progress_job_num(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetJobStatsResponse.in_progress_job_num)
}

// int64 enqueue_job_num = 4;
inline void GetJobStatsResponse::clear_enqueue_job_num() {
  _impl_.enqueue_job_num_ = int64_t{0};
}
inline int64_t GetJobStatsResponse::_internal_enqueue_job_num() const {
  return _impl_.enqueue_job_num_;
}
inline int64_t GetJobStatsResponse::enqueue_job_num() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetJobStatsResponse.enqueue_job_num)
  return _internal_enqueue_job_num();
}
inline void GetJobStatsResponse::_internal_set_enqueue_job_num(int64_t value) {
  
  _impl_.enqueue_job_num_ = value;
}
inline void GetJobStatsResponse::set_enqueue_job_num(int64_t value) {
  _internal_set_enqueue_job_num(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetJobStatsResponse.enqueue_job_num)
}

// int64 task_slots = 5;
inline void GetJobStatsResponse::clear_task_slots() {
  _impl_.task_slots_ = int64_t{0};
}
inline int64_t GetJobStatsResponse::_internal_task_slots() const {
  return _impl_.task_slots_;
}
inline int64_t GetJobStatsResponse::task_slots() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetJobStatsResponse.task_slots)
  return _internal_task_slots();
}
inline void GetJobStatsResponse::_internal_set_task_slots(int64_t value) {
  
  _impl_.task_slots_ = value;
}
inline void GetJobStatsResponse::set_task_slots(int64_t value) {
  _internal_set_task_slots(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetJobStatsResponse.task_slots)
}

// repeated .milvus.proto.index.JobInfo job_infos = 6;
inline int GetJobStatsResponse::_internal_job_infos_size() const {
  return _impl_.job_infos_.size();
}
inline int GetJobStatsResponse::job_infos_size() const {
  return _internal_job_infos_size();
}
inline void GetJobStatsResponse::clear_job_infos() {
  _impl_.job_infos_.Clear();
}
inline ::milvus::proto::index::JobInfo* GetJobStatsResponse::mutable_job_infos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetJobStatsResponse.job_infos)
  return _impl_.job_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::JobInfo >*
GetJobStatsResponse::mutable_job_infos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.GetJobStatsResponse.job_infos)
  return &_impl_.job_infos_;
}
inline const ::milvus::proto::index::JobInfo& GetJobStatsResponse::_internal_job_infos(int index) const {
  return _impl_.job_infos_.Get(index);
}
inline const ::milvus::proto::index::JobInfo& GetJobStatsResponse::job_infos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetJobStatsResponse.job_infos)
  return _internal_job_infos(index);
}
inline ::milvus::proto::index::JobInfo* GetJobStatsResponse::_internal_add_job_infos() {
  return _impl_.job_infos_.Add();
}
inline ::milvus::proto::index::JobInfo* GetJobStatsResponse::add_job_infos() {
  ::milvus::proto::index::JobInfo* _add = _internal_add_job_infos();
  // @@protoc_insertion_point(field_add:milvus.proto.index.GetJobStatsResponse.job_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::JobInfo >&
GetJobStatsResponse::job_infos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.GetJobStatsResponse.job_infos)
  return _impl_.job_infos_;
}

// bool enable_disk = 7;
inline void GetJobStatsResponse::clear_enable_disk() {
  _impl_.enable_disk_ = false;
}
inline bool GetJobStatsResponse::_internal_enable_disk() const {
  return _impl_.enable_disk_;
}
inline bool GetJobStatsResponse::enable_disk() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetJobStatsResponse.enable_disk)
  return _internal_enable_disk();
}
inline void GetJobStatsResponse::_internal_set_enable_disk(bool value) {
  
  _impl_.enable_disk_ = value;
}
inline void GetJobStatsResponse::set_enable_disk(bool value) {
  _internal_set_enable_disk(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetJobStatsResponse.enable_disk)
}

// -------------------------------------------------------------------

// GetIndexStatisticsRequest

// int64 collectionID = 1;
inline void GetIndexStatisticsRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t GetIndexStatisticsRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t GetIndexStatisticsRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexStatisticsRequest.collectionID)
  return _internal_collectionid();
}
inline void GetIndexStatisticsRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void GetIndexStatisticsRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetIndexStatisticsRequest.collectionID)
}

// string index_name = 2;
inline void GetIndexStatisticsRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& GetIndexStatisticsRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexStatisticsRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexStatisticsRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.index.GetIndexStatisticsRequest.index_name)
}
inline std::string* GetIndexStatisticsRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetIndexStatisticsRequest.index_name)
  return _s;
}
inline const std::string& GetIndexStatisticsRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void GetIndexStatisticsRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexStatisticsRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexStatisticsRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.GetIndexStatisticsRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void GetIndexStatisticsRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.GetIndexStatisticsRequest.index_name)
}

// -------------------------------------------------------------------

// GetIndexStatisticsResponse

// .milvus.proto.common.Status status = 1;
inline bool GetIndexStatisticsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetIndexStatisticsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetIndexStatisticsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetIndexStatisticsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexStatisticsResponse.status)
  return _internal_status();
}
inline void GetIndexStatisticsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.index.GetIndexStatisticsResponse.status)
}
inline ::milvus::proto::common::Status* GetIndexStatisticsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexStatisticsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.index.GetIndexStatisticsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexStatisticsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetIndexStatisticsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetIndexStatisticsResponse.status)
  return _msg;
}
inline void GetIndexStatisticsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.index.GetIndexStatisticsResponse.status)
}

// repeated .milvus.proto.index.IndexInfo index_infos = 2;
inline int GetIndexStatisticsResponse::_internal_index_infos_size() const {
  return _impl_.index_infos_.size();
}
inline int GetIndexStatisticsResponse::index_infos_size() const {
  return _internal_index_infos_size();
}
inline void GetIndexStatisticsResponse::clear_index_infos() {
  _impl_.index_infos_.Clear();
}
inline ::milvus::proto::index::IndexInfo* GetIndexStatisticsResponse::mutable_index_infos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.index.GetIndexStatisticsResponse.index_infos)
  return _impl_.index_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexInfo >*
GetIndexStatisticsResponse::mutable_index_infos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.index.GetIndexStatisticsResponse.index_infos)
  return &_impl_.index_infos_;
}
inline const ::milvus::proto::index::IndexInfo& GetIndexStatisticsResponse::_internal_index_infos(int index) const {
  return _impl_.index_infos_.Get(index);
}
inline const ::milvus::proto::index::IndexInfo& GetIndexStatisticsResponse::index_infos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.index.GetIndexStatisticsResponse.index_infos)
  return _internal_index_infos(index);
}
inline ::milvus::proto::index::IndexInfo* GetIndexStatisticsResponse::_internal_add_index_infos() {
  return _impl_.index_infos_.Add();
}
inline ::milvus::proto::index::IndexInfo* GetIndexStatisticsResponse::add_index_infos() {
  ::milvus::proto::index::IndexInfo* _add = _internal_add_index_infos();
  // @@protoc_insertion_point(field_add:milvus.proto.index.GetIndexStatisticsResponse.index_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::index::IndexInfo >&
GetIndexStatisticsResponse::index_infos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.index.GetIndexStatisticsResponse.index_infos)
  return _impl_.index_infos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace index
}  // namespace proto
}  // namespace milvus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_index_5fcoord_2eproto
