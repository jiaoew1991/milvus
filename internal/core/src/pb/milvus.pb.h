// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: milvus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_milvus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_milvus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "schema.pb.h"
#include "feder.pb.h"
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_milvus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_milvus_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_milvus_2eproto;
namespace milvus {
namespace proto {
namespace milvus {
class AlterAliasRequest;
struct AlterAliasRequestDefaultTypeInternal;
extern AlterAliasRequestDefaultTypeInternal _AlterAliasRequest_default_instance_;
class AlterCollectionRequest;
struct AlterCollectionRequestDefaultTypeInternal;
extern AlterCollectionRequestDefaultTypeInternal _AlterCollectionRequest_default_instance_;
class BoolResponse;
struct BoolResponseDefaultTypeInternal;
extern BoolResponseDefaultTypeInternal _BoolResponse_default_instance_;
class CalcDistanceRequest;
struct CalcDistanceRequestDefaultTypeInternal;
extern CalcDistanceRequestDefaultTypeInternal _CalcDistanceRequest_default_instance_;
class CalcDistanceResults;
struct CalcDistanceResultsDefaultTypeInternal;
extern CalcDistanceResultsDefaultTypeInternal _CalcDistanceResults_default_instance_;
class CheckHealthRequest;
struct CheckHealthRequestDefaultTypeInternal;
extern CheckHealthRequestDefaultTypeInternal _CheckHealthRequest_default_instance_;
class CheckHealthResponse;
struct CheckHealthResponseDefaultTypeInternal;
extern CheckHealthResponseDefaultTypeInternal _CheckHealthResponse_default_instance_;
class CompactionMergeInfo;
struct CompactionMergeInfoDefaultTypeInternal;
extern CompactionMergeInfoDefaultTypeInternal _CompactionMergeInfo_default_instance_;
class ComponentInfo;
struct ComponentInfoDefaultTypeInternal;
extern ComponentInfoDefaultTypeInternal _ComponentInfo_default_instance_;
class ComponentStates;
struct ComponentStatesDefaultTypeInternal;
extern ComponentStatesDefaultTypeInternal _ComponentStates_default_instance_;
class ConnectRequest;
struct ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class ConnectResponse;
struct ConnectResponseDefaultTypeInternal;
extern ConnectResponseDefaultTypeInternal _ConnectResponse_default_instance_;
class CreateAliasRequest;
struct CreateAliasRequestDefaultTypeInternal;
extern CreateAliasRequestDefaultTypeInternal _CreateAliasRequest_default_instance_;
class CreateCollectionRequest;
struct CreateCollectionRequestDefaultTypeInternal;
extern CreateCollectionRequestDefaultTypeInternal _CreateCollectionRequest_default_instance_;
class CreateCredentialRequest;
struct CreateCredentialRequestDefaultTypeInternal;
extern CreateCredentialRequestDefaultTypeInternal _CreateCredentialRequest_default_instance_;
class CreateDatabaseRequest;
struct CreateDatabaseRequestDefaultTypeInternal;
extern CreateDatabaseRequestDefaultTypeInternal _CreateDatabaseRequest_default_instance_;
class CreateIndexRequest;
struct CreateIndexRequestDefaultTypeInternal;
extern CreateIndexRequestDefaultTypeInternal _CreateIndexRequest_default_instance_;
class CreatePartitionRequest;
struct CreatePartitionRequestDefaultTypeInternal;
extern CreatePartitionRequestDefaultTypeInternal _CreatePartitionRequest_default_instance_;
class CreateResourceGroupRequest;
struct CreateResourceGroupRequestDefaultTypeInternal;
extern CreateResourceGroupRequestDefaultTypeInternal _CreateResourceGroupRequest_default_instance_;
class CreateRoleRequest;
struct CreateRoleRequestDefaultTypeInternal;
extern CreateRoleRequestDefaultTypeInternal _CreateRoleRequest_default_instance_;
class DeleteCredentialRequest;
struct DeleteCredentialRequestDefaultTypeInternal;
extern DeleteCredentialRequestDefaultTypeInternal _DeleteCredentialRequest_default_instance_;
class DeleteRequest;
struct DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DescribeAliasRequest;
struct DescribeAliasRequestDefaultTypeInternal;
extern DescribeAliasRequestDefaultTypeInternal _DescribeAliasRequest_default_instance_;
class DescribeAliasResponse;
struct DescribeAliasResponseDefaultTypeInternal;
extern DescribeAliasResponseDefaultTypeInternal _DescribeAliasResponse_default_instance_;
class DescribeCollectionRequest;
struct DescribeCollectionRequestDefaultTypeInternal;
extern DescribeCollectionRequestDefaultTypeInternal _DescribeCollectionRequest_default_instance_;
class DescribeCollectionResponse;
struct DescribeCollectionResponseDefaultTypeInternal;
extern DescribeCollectionResponseDefaultTypeInternal _DescribeCollectionResponse_default_instance_;
class DescribeIndexRequest;
struct DescribeIndexRequestDefaultTypeInternal;
extern DescribeIndexRequestDefaultTypeInternal _DescribeIndexRequest_default_instance_;
class DescribeIndexResponse;
struct DescribeIndexResponseDefaultTypeInternal;
extern DescribeIndexResponseDefaultTypeInternal _DescribeIndexResponse_default_instance_;
class DescribeResourceGroupRequest;
struct DescribeResourceGroupRequestDefaultTypeInternal;
extern DescribeResourceGroupRequestDefaultTypeInternal _DescribeResourceGroupRequest_default_instance_;
class DescribeResourceGroupResponse;
struct DescribeResourceGroupResponseDefaultTypeInternal;
extern DescribeResourceGroupResponseDefaultTypeInternal _DescribeResourceGroupResponse_default_instance_;
class DescribeSegmentRequest;
struct DescribeSegmentRequestDefaultTypeInternal;
extern DescribeSegmentRequestDefaultTypeInternal _DescribeSegmentRequest_default_instance_;
class DescribeSegmentResponse;
struct DescribeSegmentResponseDefaultTypeInternal;
extern DescribeSegmentResponseDefaultTypeInternal _DescribeSegmentResponse_default_instance_;
class DropAliasRequest;
struct DropAliasRequestDefaultTypeInternal;
extern DropAliasRequestDefaultTypeInternal _DropAliasRequest_default_instance_;
class DropCollectionRequest;
struct DropCollectionRequestDefaultTypeInternal;
extern DropCollectionRequestDefaultTypeInternal _DropCollectionRequest_default_instance_;
class DropDatabaseRequest;
struct DropDatabaseRequestDefaultTypeInternal;
extern DropDatabaseRequestDefaultTypeInternal _DropDatabaseRequest_default_instance_;
class DropIndexRequest;
struct DropIndexRequestDefaultTypeInternal;
extern DropIndexRequestDefaultTypeInternal _DropIndexRequest_default_instance_;
class DropPartitionRequest;
struct DropPartitionRequestDefaultTypeInternal;
extern DropPartitionRequestDefaultTypeInternal _DropPartitionRequest_default_instance_;
class DropResourceGroupRequest;
struct DropResourceGroupRequestDefaultTypeInternal;
extern DropResourceGroupRequestDefaultTypeInternal _DropResourceGroupRequest_default_instance_;
class DropRoleRequest;
struct DropRoleRequestDefaultTypeInternal;
extern DropRoleRequestDefaultTypeInternal _DropRoleRequest_default_instance_;
class DummyRequest;
struct DummyRequestDefaultTypeInternal;
extern DummyRequestDefaultTypeInternal _DummyRequest_default_instance_;
class DummyResponse;
struct DummyResponseDefaultTypeInternal;
extern DummyResponseDefaultTypeInternal _DummyResponse_default_instance_;
class FlushAllRequest;
struct FlushAllRequestDefaultTypeInternal;
extern FlushAllRequestDefaultTypeInternal _FlushAllRequest_default_instance_;
class FlushAllResponse;
struct FlushAllResponseDefaultTypeInternal;
extern FlushAllResponseDefaultTypeInternal _FlushAllResponse_default_instance_;
class FlushRequest;
struct FlushRequestDefaultTypeInternal;
extern FlushRequestDefaultTypeInternal _FlushRequest_default_instance_;
class FlushResponse;
struct FlushResponseDefaultTypeInternal;
extern FlushResponseDefaultTypeInternal _FlushResponse_default_instance_;
class FlushResponse_CollSealTimesEntry_DoNotUse;
struct FlushResponse_CollSealTimesEntry_DoNotUseDefaultTypeInternal;
extern FlushResponse_CollSealTimesEntry_DoNotUseDefaultTypeInternal _FlushResponse_CollSealTimesEntry_DoNotUse_default_instance_;
class FlushResponse_CollSegIDsEntry_DoNotUse;
struct FlushResponse_CollSegIDsEntry_DoNotUseDefaultTypeInternal;
extern FlushResponse_CollSegIDsEntry_DoNotUseDefaultTypeInternal _FlushResponse_CollSegIDsEntry_DoNotUse_default_instance_;
class FlushResponse_FlushCollSegIDsEntry_DoNotUse;
struct FlushResponse_FlushCollSegIDsEntry_DoNotUseDefaultTypeInternal;
extern FlushResponse_FlushCollSegIDsEntry_DoNotUseDefaultTypeInternal _FlushResponse_FlushCollSegIDsEntry_DoNotUse_default_instance_;
class GetCollectionStatisticsRequest;
struct GetCollectionStatisticsRequestDefaultTypeInternal;
extern GetCollectionStatisticsRequestDefaultTypeInternal _GetCollectionStatisticsRequest_default_instance_;
class GetCollectionStatisticsResponse;
struct GetCollectionStatisticsResponseDefaultTypeInternal;
extern GetCollectionStatisticsResponseDefaultTypeInternal _GetCollectionStatisticsResponse_default_instance_;
class GetCompactionPlansRequest;
struct GetCompactionPlansRequestDefaultTypeInternal;
extern GetCompactionPlansRequestDefaultTypeInternal _GetCompactionPlansRequest_default_instance_;
class GetCompactionPlansResponse;
struct GetCompactionPlansResponseDefaultTypeInternal;
extern GetCompactionPlansResponseDefaultTypeInternal _GetCompactionPlansResponse_default_instance_;
class GetCompactionStateRequest;
struct GetCompactionStateRequestDefaultTypeInternal;
extern GetCompactionStateRequestDefaultTypeInternal _GetCompactionStateRequest_default_instance_;
class GetCompactionStateResponse;
struct GetCompactionStateResponseDefaultTypeInternal;
extern GetCompactionStateResponseDefaultTypeInternal _GetCompactionStateResponse_default_instance_;
class GetComponentStatesRequest;
struct GetComponentStatesRequestDefaultTypeInternal;
extern GetComponentStatesRequestDefaultTypeInternal _GetComponentStatesRequest_default_instance_;
class GetFlushAllStateRequest;
struct GetFlushAllStateRequestDefaultTypeInternal;
extern GetFlushAllStateRequestDefaultTypeInternal _GetFlushAllStateRequest_default_instance_;
class GetFlushAllStateResponse;
struct GetFlushAllStateResponseDefaultTypeInternal;
extern GetFlushAllStateResponseDefaultTypeInternal _GetFlushAllStateResponse_default_instance_;
class GetFlushStateRequest;
struct GetFlushStateRequestDefaultTypeInternal;
extern GetFlushStateRequestDefaultTypeInternal _GetFlushStateRequest_default_instance_;
class GetFlushStateResponse;
struct GetFlushStateResponseDefaultTypeInternal;
extern GetFlushStateResponseDefaultTypeInternal _GetFlushStateResponse_default_instance_;
class GetImportStateRequest;
struct GetImportStateRequestDefaultTypeInternal;
extern GetImportStateRequestDefaultTypeInternal _GetImportStateRequest_default_instance_;
class GetImportStateResponse;
struct GetImportStateResponseDefaultTypeInternal;
extern GetImportStateResponseDefaultTypeInternal _GetImportStateResponse_default_instance_;
class GetIndexBuildProgressRequest;
struct GetIndexBuildProgressRequestDefaultTypeInternal;
extern GetIndexBuildProgressRequestDefaultTypeInternal _GetIndexBuildProgressRequest_default_instance_;
class GetIndexBuildProgressResponse;
struct GetIndexBuildProgressResponseDefaultTypeInternal;
extern GetIndexBuildProgressResponseDefaultTypeInternal _GetIndexBuildProgressResponse_default_instance_;
class GetIndexStateRequest;
struct GetIndexStateRequestDefaultTypeInternal;
extern GetIndexStateRequestDefaultTypeInternal _GetIndexStateRequest_default_instance_;
class GetIndexStateResponse;
struct GetIndexStateResponseDefaultTypeInternal;
extern GetIndexStateResponseDefaultTypeInternal _GetIndexStateResponse_default_instance_;
class GetIndexStatisticsRequest;
struct GetIndexStatisticsRequestDefaultTypeInternal;
extern GetIndexStatisticsRequestDefaultTypeInternal _GetIndexStatisticsRequest_default_instance_;
class GetIndexStatisticsResponse;
struct GetIndexStatisticsResponseDefaultTypeInternal;
extern GetIndexStatisticsResponseDefaultTypeInternal _GetIndexStatisticsResponse_default_instance_;
class GetLoadStateRequest;
struct GetLoadStateRequestDefaultTypeInternal;
extern GetLoadStateRequestDefaultTypeInternal _GetLoadStateRequest_default_instance_;
class GetLoadStateResponse;
struct GetLoadStateResponseDefaultTypeInternal;
extern GetLoadStateResponseDefaultTypeInternal _GetLoadStateResponse_default_instance_;
class GetLoadingProgressRequest;
struct GetLoadingProgressRequestDefaultTypeInternal;
extern GetLoadingProgressRequestDefaultTypeInternal _GetLoadingProgressRequest_default_instance_;
class GetLoadingProgressResponse;
struct GetLoadingProgressResponseDefaultTypeInternal;
extern GetLoadingProgressResponseDefaultTypeInternal _GetLoadingProgressResponse_default_instance_;
class GetMetricsRequest;
struct GetMetricsRequestDefaultTypeInternal;
extern GetMetricsRequestDefaultTypeInternal _GetMetricsRequest_default_instance_;
class GetMetricsResponse;
struct GetMetricsResponseDefaultTypeInternal;
extern GetMetricsResponseDefaultTypeInternal _GetMetricsResponse_default_instance_;
class GetPartitionStatisticsRequest;
struct GetPartitionStatisticsRequestDefaultTypeInternal;
extern GetPartitionStatisticsRequestDefaultTypeInternal _GetPartitionStatisticsRequest_default_instance_;
class GetPartitionStatisticsResponse;
struct GetPartitionStatisticsResponseDefaultTypeInternal;
extern GetPartitionStatisticsResponseDefaultTypeInternal _GetPartitionStatisticsResponse_default_instance_;
class GetPersistentSegmentInfoRequest;
struct GetPersistentSegmentInfoRequestDefaultTypeInternal;
extern GetPersistentSegmentInfoRequestDefaultTypeInternal _GetPersistentSegmentInfoRequest_default_instance_;
class GetPersistentSegmentInfoResponse;
struct GetPersistentSegmentInfoResponseDefaultTypeInternal;
extern GetPersistentSegmentInfoResponseDefaultTypeInternal _GetPersistentSegmentInfoResponse_default_instance_;
class GetQuerySegmentInfoRequest;
struct GetQuerySegmentInfoRequestDefaultTypeInternal;
extern GetQuerySegmentInfoRequestDefaultTypeInternal _GetQuerySegmentInfoRequest_default_instance_;
class GetQuerySegmentInfoResponse;
struct GetQuerySegmentInfoResponseDefaultTypeInternal;
extern GetQuerySegmentInfoResponseDefaultTypeInternal _GetQuerySegmentInfoResponse_default_instance_;
class GetReplicasRequest;
struct GetReplicasRequestDefaultTypeInternal;
extern GetReplicasRequestDefaultTypeInternal _GetReplicasRequest_default_instance_;
class GetReplicasResponse;
struct GetReplicasResponseDefaultTypeInternal;
extern GetReplicasResponseDefaultTypeInternal _GetReplicasResponse_default_instance_;
class GetStatisticsRequest;
struct GetStatisticsRequestDefaultTypeInternal;
extern GetStatisticsRequestDefaultTypeInternal _GetStatisticsRequest_default_instance_;
class GetStatisticsResponse;
struct GetStatisticsResponseDefaultTypeInternal;
extern GetStatisticsResponseDefaultTypeInternal _GetStatisticsResponse_default_instance_;
class GetVersionRequest;
struct GetVersionRequestDefaultTypeInternal;
extern GetVersionRequestDefaultTypeInternal _GetVersionRequest_default_instance_;
class GetVersionResponse;
struct GetVersionResponseDefaultTypeInternal;
extern GetVersionResponseDefaultTypeInternal _GetVersionResponse_default_instance_;
class GrantEntity;
struct GrantEntityDefaultTypeInternal;
extern GrantEntityDefaultTypeInternal _GrantEntity_default_instance_;
class GrantPrivilegeEntity;
struct GrantPrivilegeEntityDefaultTypeInternal;
extern GrantPrivilegeEntityDefaultTypeInternal _GrantPrivilegeEntity_default_instance_;
class GrantorEntity;
struct GrantorEntityDefaultTypeInternal;
extern GrantorEntityDefaultTypeInternal _GrantorEntity_default_instance_;
class HasCollectionRequest;
struct HasCollectionRequestDefaultTypeInternal;
extern HasCollectionRequestDefaultTypeInternal _HasCollectionRequest_default_instance_;
class HasPartitionRequest;
struct HasPartitionRequestDefaultTypeInternal;
extern HasPartitionRequestDefaultTypeInternal _HasPartitionRequest_default_instance_;
class Hits;
struct HitsDefaultTypeInternal;
extern HitsDefaultTypeInternal _Hits_default_instance_;
class ImportRequest;
struct ImportRequestDefaultTypeInternal;
extern ImportRequestDefaultTypeInternal _ImportRequest_default_instance_;
class ImportResponse;
struct ImportResponseDefaultTypeInternal;
extern ImportResponseDefaultTypeInternal _ImportResponse_default_instance_;
class IndexDescription;
struct IndexDescriptionDefaultTypeInternal;
extern IndexDescriptionDefaultTypeInternal _IndexDescription_default_instance_;
class InsertRequest;
struct InsertRequestDefaultTypeInternal;
extern InsertRequestDefaultTypeInternal _InsertRequest_default_instance_;
class ListAliasesRequest;
struct ListAliasesRequestDefaultTypeInternal;
extern ListAliasesRequestDefaultTypeInternal _ListAliasesRequest_default_instance_;
class ListAliasesResponse;
struct ListAliasesResponseDefaultTypeInternal;
extern ListAliasesResponseDefaultTypeInternal _ListAliasesResponse_default_instance_;
class ListCredUsersRequest;
struct ListCredUsersRequestDefaultTypeInternal;
extern ListCredUsersRequestDefaultTypeInternal _ListCredUsersRequest_default_instance_;
class ListCredUsersResponse;
struct ListCredUsersResponseDefaultTypeInternal;
extern ListCredUsersResponseDefaultTypeInternal _ListCredUsersResponse_default_instance_;
class ListDatabasesRequest;
struct ListDatabasesRequestDefaultTypeInternal;
extern ListDatabasesRequestDefaultTypeInternal _ListDatabasesRequest_default_instance_;
class ListDatabasesResponse;
struct ListDatabasesResponseDefaultTypeInternal;
extern ListDatabasesResponseDefaultTypeInternal _ListDatabasesResponse_default_instance_;
class ListImportTasksRequest;
struct ListImportTasksRequestDefaultTypeInternal;
extern ListImportTasksRequestDefaultTypeInternal _ListImportTasksRequest_default_instance_;
class ListImportTasksResponse;
struct ListImportTasksResponseDefaultTypeInternal;
extern ListImportTasksResponseDefaultTypeInternal _ListImportTasksResponse_default_instance_;
class ListResourceGroupsRequest;
struct ListResourceGroupsRequestDefaultTypeInternal;
extern ListResourceGroupsRequestDefaultTypeInternal _ListResourceGroupsRequest_default_instance_;
class ListResourceGroupsResponse;
struct ListResourceGroupsResponseDefaultTypeInternal;
extern ListResourceGroupsResponseDefaultTypeInternal _ListResourceGroupsResponse_default_instance_;
class LoadBalanceRequest;
struct LoadBalanceRequestDefaultTypeInternal;
extern LoadBalanceRequestDefaultTypeInternal _LoadBalanceRequest_default_instance_;
class LoadCollectionRequest;
struct LoadCollectionRequestDefaultTypeInternal;
extern LoadCollectionRequestDefaultTypeInternal _LoadCollectionRequest_default_instance_;
class LoadPartitionsRequest;
struct LoadPartitionsRequestDefaultTypeInternal;
extern LoadPartitionsRequestDefaultTypeInternal _LoadPartitionsRequest_default_instance_;
class ManualCompactionRequest;
struct ManualCompactionRequestDefaultTypeInternal;
extern ManualCompactionRequestDefaultTypeInternal _ManualCompactionRequest_default_instance_;
class ManualCompactionResponse;
struct ManualCompactionResponseDefaultTypeInternal;
extern ManualCompactionResponseDefaultTypeInternal _ManualCompactionResponse_default_instance_;
class MilvusExt;
struct MilvusExtDefaultTypeInternal;
extern MilvusExtDefaultTypeInternal _MilvusExt_default_instance_;
class MutationResult;
struct MutationResultDefaultTypeInternal;
extern MutationResultDefaultTypeInternal _MutationResult_default_instance_;
class ObjectEntity;
struct ObjectEntityDefaultTypeInternal;
extern ObjectEntityDefaultTypeInternal _ObjectEntity_default_instance_;
class OperatePrivilegeRequest;
struct OperatePrivilegeRequestDefaultTypeInternal;
extern OperatePrivilegeRequestDefaultTypeInternal _OperatePrivilegeRequest_default_instance_;
class OperateUserRoleRequest;
struct OperateUserRoleRequestDefaultTypeInternal;
extern OperateUserRoleRequestDefaultTypeInternal _OperateUserRoleRequest_default_instance_;
class PersistentSegmentInfo;
struct PersistentSegmentInfoDefaultTypeInternal;
extern PersistentSegmentInfoDefaultTypeInternal _PersistentSegmentInfo_default_instance_;
class PrivilegeEntity;
struct PrivilegeEntityDefaultTypeInternal;
extern PrivilegeEntityDefaultTypeInternal _PrivilegeEntity_default_instance_;
class QueryRequest;
struct QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryResults;
struct QueryResultsDefaultTypeInternal;
extern QueryResultsDefaultTypeInternal _QueryResults_default_instance_;
class QuerySegmentInfo;
struct QuerySegmentInfoDefaultTypeInternal;
extern QuerySegmentInfoDefaultTypeInternal _QuerySegmentInfo_default_instance_;
class RegisterLinkRequest;
struct RegisterLinkRequestDefaultTypeInternal;
extern RegisterLinkRequestDefaultTypeInternal _RegisterLinkRequest_default_instance_;
class RegisterLinkResponse;
struct RegisterLinkResponseDefaultTypeInternal;
extern RegisterLinkResponseDefaultTypeInternal _RegisterLinkResponse_default_instance_;
class ReleaseCollectionRequest;
struct ReleaseCollectionRequestDefaultTypeInternal;
extern ReleaseCollectionRequestDefaultTypeInternal _ReleaseCollectionRequest_default_instance_;
class ReleasePartitionsRequest;
struct ReleasePartitionsRequestDefaultTypeInternal;
extern ReleasePartitionsRequestDefaultTypeInternal _ReleasePartitionsRequest_default_instance_;
class RenameCollectionRequest;
struct RenameCollectionRequestDefaultTypeInternal;
extern RenameCollectionRequestDefaultTypeInternal _RenameCollectionRequest_default_instance_;
class ReplicaInfo;
struct ReplicaInfoDefaultTypeInternal;
extern ReplicaInfoDefaultTypeInternal _ReplicaInfo_default_instance_;
class ReplicaInfo_NumOutboundNodeEntry_DoNotUse;
struct ReplicaInfo_NumOutboundNodeEntry_DoNotUseDefaultTypeInternal;
extern ReplicaInfo_NumOutboundNodeEntry_DoNotUseDefaultTypeInternal _ReplicaInfo_NumOutboundNodeEntry_DoNotUse_default_instance_;
class ResourceGroup;
struct ResourceGroupDefaultTypeInternal;
extern ResourceGroupDefaultTypeInternal _ResourceGroup_default_instance_;
class ResourceGroup_NumIncomingNodeEntry_DoNotUse;
struct ResourceGroup_NumIncomingNodeEntry_DoNotUseDefaultTypeInternal;
extern ResourceGroup_NumIncomingNodeEntry_DoNotUseDefaultTypeInternal _ResourceGroup_NumIncomingNodeEntry_DoNotUse_default_instance_;
class ResourceGroup_NumLoadedReplicaEntry_DoNotUse;
struct ResourceGroup_NumLoadedReplicaEntry_DoNotUseDefaultTypeInternal;
extern ResourceGroup_NumLoadedReplicaEntry_DoNotUseDefaultTypeInternal _ResourceGroup_NumLoadedReplicaEntry_DoNotUse_default_instance_;
class ResourceGroup_NumOutgoingNodeEntry_DoNotUse;
struct ResourceGroup_NumOutgoingNodeEntry_DoNotUseDefaultTypeInternal;
extern ResourceGroup_NumOutgoingNodeEntry_DoNotUseDefaultTypeInternal _ResourceGroup_NumOutgoingNodeEntry_DoNotUse_default_instance_;
class RoleEntity;
struct RoleEntityDefaultTypeInternal;
extern RoleEntityDefaultTypeInternal _RoleEntity_default_instance_;
class RoleResult;
struct RoleResultDefaultTypeInternal;
extern RoleResultDefaultTypeInternal _RoleResult_default_instance_;
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResults;
struct SearchResultsDefaultTypeInternal;
extern SearchResultsDefaultTypeInternal _SearchResults_default_instance_;
class SelectGrantRequest;
struct SelectGrantRequestDefaultTypeInternal;
extern SelectGrantRequestDefaultTypeInternal _SelectGrantRequest_default_instance_;
class SelectGrantResponse;
struct SelectGrantResponseDefaultTypeInternal;
extern SelectGrantResponseDefaultTypeInternal _SelectGrantResponse_default_instance_;
class SelectRoleRequest;
struct SelectRoleRequestDefaultTypeInternal;
extern SelectRoleRequestDefaultTypeInternal _SelectRoleRequest_default_instance_;
class SelectRoleResponse;
struct SelectRoleResponseDefaultTypeInternal;
extern SelectRoleResponseDefaultTypeInternal _SelectRoleResponse_default_instance_;
class SelectUserRequest;
struct SelectUserRequestDefaultTypeInternal;
extern SelectUserRequestDefaultTypeInternal _SelectUserRequest_default_instance_;
class SelectUserResponse;
struct SelectUserResponseDefaultTypeInternal;
extern SelectUserResponseDefaultTypeInternal _SelectUserResponse_default_instance_;
class ShardReplica;
struct ShardReplicaDefaultTypeInternal;
extern ShardReplicaDefaultTypeInternal _ShardReplica_default_instance_;
class ShowCollectionsRequest;
struct ShowCollectionsRequestDefaultTypeInternal;
extern ShowCollectionsRequestDefaultTypeInternal _ShowCollectionsRequest_default_instance_;
class ShowCollectionsResponse;
struct ShowCollectionsResponseDefaultTypeInternal;
extern ShowCollectionsResponseDefaultTypeInternal _ShowCollectionsResponse_default_instance_;
class ShowPartitionsRequest;
struct ShowPartitionsRequestDefaultTypeInternal;
extern ShowPartitionsRequestDefaultTypeInternal _ShowPartitionsRequest_default_instance_;
class ShowPartitionsResponse;
struct ShowPartitionsResponseDefaultTypeInternal;
extern ShowPartitionsResponseDefaultTypeInternal _ShowPartitionsResponse_default_instance_;
class ShowSegmentsRequest;
struct ShowSegmentsRequestDefaultTypeInternal;
extern ShowSegmentsRequestDefaultTypeInternal _ShowSegmentsRequest_default_instance_;
class ShowSegmentsResponse;
struct ShowSegmentsResponseDefaultTypeInternal;
extern ShowSegmentsResponseDefaultTypeInternal _ShowSegmentsResponse_default_instance_;
class StringResponse;
struct StringResponseDefaultTypeInternal;
extern StringResponseDefaultTypeInternal _StringResponse_default_instance_;
class TransferNodeRequest;
struct TransferNodeRequestDefaultTypeInternal;
extern TransferNodeRequestDefaultTypeInternal _TransferNodeRequest_default_instance_;
class TransferReplicaRequest;
struct TransferReplicaRequestDefaultTypeInternal;
extern TransferReplicaRequestDefaultTypeInternal _TransferReplicaRequest_default_instance_;
class UpdateCredentialRequest;
struct UpdateCredentialRequestDefaultTypeInternal;
extern UpdateCredentialRequestDefaultTypeInternal _UpdateCredentialRequest_default_instance_;
class UpsertRequest;
struct UpsertRequestDefaultTypeInternal;
extern UpsertRequestDefaultTypeInternal _UpsertRequest_default_instance_;
class UserEntity;
struct UserEntityDefaultTypeInternal;
extern UserEntityDefaultTypeInternal _UserEntity_default_instance_;
class UserResult;
struct UserResultDefaultTypeInternal;
extern UserResultDefaultTypeInternal _UserResult_default_instance_;
class VectorIDs;
struct VectorIDsDefaultTypeInternal;
extern VectorIDsDefaultTypeInternal _VectorIDs_default_instance_;
class VectorsArray;
struct VectorsArrayDefaultTypeInternal;
extern VectorsArrayDefaultTypeInternal _VectorsArray_default_instance_;
}  // namespace milvus
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> ::milvus::proto::milvus::AlterAliasRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::AlterAliasRequest>(Arena*);
template<> ::milvus::proto::milvus::AlterCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::AlterCollectionRequest>(Arena*);
template<> ::milvus::proto::milvus::BoolResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::BoolResponse>(Arena*);
template<> ::milvus::proto::milvus::CalcDistanceRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CalcDistanceRequest>(Arena*);
template<> ::milvus::proto::milvus::CalcDistanceResults* Arena::CreateMaybeMessage<::milvus::proto::milvus::CalcDistanceResults>(Arena*);
template<> ::milvus::proto::milvus::CheckHealthRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CheckHealthRequest>(Arena*);
template<> ::milvus::proto::milvus::CheckHealthResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::CheckHealthResponse>(Arena*);
template<> ::milvus::proto::milvus::CompactionMergeInfo* Arena::CreateMaybeMessage<::milvus::proto::milvus::CompactionMergeInfo>(Arena*);
template<> ::milvus::proto::milvus::ComponentInfo* Arena::CreateMaybeMessage<::milvus::proto::milvus::ComponentInfo>(Arena*);
template<> ::milvus::proto::milvus::ComponentStates* Arena::CreateMaybeMessage<::milvus::proto::milvus::ComponentStates>(Arena*);
template<> ::milvus::proto::milvus::ConnectRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ConnectRequest>(Arena*);
template<> ::milvus::proto::milvus::ConnectResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ConnectResponse>(Arena*);
template<> ::milvus::proto::milvus::CreateAliasRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CreateAliasRequest>(Arena*);
template<> ::milvus::proto::milvus::CreateCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CreateCollectionRequest>(Arena*);
template<> ::milvus::proto::milvus::CreateCredentialRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CreateCredentialRequest>(Arena*);
template<> ::milvus::proto::milvus::CreateDatabaseRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CreateDatabaseRequest>(Arena*);
template<> ::milvus::proto::milvus::CreateIndexRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CreateIndexRequest>(Arena*);
template<> ::milvus::proto::milvus::CreatePartitionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CreatePartitionRequest>(Arena*);
template<> ::milvus::proto::milvus::CreateResourceGroupRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CreateResourceGroupRequest>(Arena*);
template<> ::milvus::proto::milvus::CreateRoleRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::CreateRoleRequest>(Arena*);
template<> ::milvus::proto::milvus::DeleteCredentialRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DeleteCredentialRequest>(Arena*);
template<> ::milvus::proto::milvus::DeleteRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DeleteRequest>(Arena*);
template<> ::milvus::proto::milvus::DescribeAliasRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeAliasRequest>(Arena*);
template<> ::milvus::proto::milvus::DescribeAliasResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeAliasResponse>(Arena*);
template<> ::milvus::proto::milvus::DescribeCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeCollectionRequest>(Arena*);
template<> ::milvus::proto::milvus::DescribeCollectionResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeCollectionResponse>(Arena*);
template<> ::milvus::proto::milvus::DescribeIndexRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeIndexRequest>(Arena*);
template<> ::milvus::proto::milvus::DescribeIndexResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeIndexResponse>(Arena*);
template<> ::milvus::proto::milvus::DescribeResourceGroupRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeResourceGroupRequest>(Arena*);
template<> ::milvus::proto::milvus::DescribeResourceGroupResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeResourceGroupResponse>(Arena*);
template<> ::milvus::proto::milvus::DescribeSegmentRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeSegmentRequest>(Arena*);
template<> ::milvus::proto::milvus::DescribeSegmentResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::DescribeSegmentResponse>(Arena*);
template<> ::milvus::proto::milvus::DropAliasRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DropAliasRequest>(Arena*);
template<> ::milvus::proto::milvus::DropCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DropCollectionRequest>(Arena*);
template<> ::milvus::proto::milvus::DropDatabaseRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DropDatabaseRequest>(Arena*);
template<> ::milvus::proto::milvus::DropIndexRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DropIndexRequest>(Arena*);
template<> ::milvus::proto::milvus::DropPartitionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DropPartitionRequest>(Arena*);
template<> ::milvus::proto::milvus::DropResourceGroupRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DropResourceGroupRequest>(Arena*);
template<> ::milvus::proto::milvus::DropRoleRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DropRoleRequest>(Arena*);
template<> ::milvus::proto::milvus::DummyRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::DummyRequest>(Arena*);
template<> ::milvus::proto::milvus::DummyResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::DummyResponse>(Arena*);
template<> ::milvus::proto::milvus::FlushAllRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::FlushAllRequest>(Arena*);
template<> ::milvus::proto::milvus::FlushAllResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::FlushAllResponse>(Arena*);
template<> ::milvus::proto::milvus::FlushRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::FlushRequest>(Arena*);
template<> ::milvus::proto::milvus::FlushResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::FlushResponse>(Arena*);
template<> ::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse* Arena::CreateMaybeMessage<::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse>(Arena*);
template<> ::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse* Arena::CreateMaybeMessage<::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse>(Arena*);
template<> ::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse* Arena::CreateMaybeMessage<::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse>(Arena*);
template<> ::milvus::proto::milvus::GetCollectionStatisticsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetCollectionStatisticsRequest>(Arena*);
template<> ::milvus::proto::milvus::GetCollectionStatisticsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetCollectionStatisticsResponse>(Arena*);
template<> ::milvus::proto::milvus::GetCompactionPlansRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetCompactionPlansRequest>(Arena*);
template<> ::milvus::proto::milvus::GetCompactionPlansResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetCompactionPlansResponse>(Arena*);
template<> ::milvus::proto::milvus::GetCompactionStateRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetCompactionStateRequest>(Arena*);
template<> ::milvus::proto::milvus::GetCompactionStateResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetCompactionStateResponse>(Arena*);
template<> ::milvus::proto::milvus::GetComponentStatesRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetComponentStatesRequest>(Arena*);
template<> ::milvus::proto::milvus::GetFlushAllStateRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetFlushAllStateRequest>(Arena*);
template<> ::milvus::proto::milvus::GetFlushAllStateResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetFlushAllStateResponse>(Arena*);
template<> ::milvus::proto::milvus::GetFlushStateRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetFlushStateRequest>(Arena*);
template<> ::milvus::proto::milvus::GetFlushStateResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetFlushStateResponse>(Arena*);
template<> ::milvus::proto::milvus::GetImportStateRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetImportStateRequest>(Arena*);
template<> ::milvus::proto::milvus::GetImportStateResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetImportStateResponse>(Arena*);
template<> ::milvus::proto::milvus::GetIndexBuildProgressRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetIndexBuildProgressRequest>(Arena*);
template<> ::milvus::proto::milvus::GetIndexBuildProgressResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetIndexBuildProgressResponse>(Arena*);
template<> ::milvus::proto::milvus::GetIndexStateRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetIndexStateRequest>(Arena*);
template<> ::milvus::proto::milvus::GetIndexStateResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetIndexStateResponse>(Arena*);
template<> ::milvus::proto::milvus::GetIndexStatisticsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetIndexStatisticsRequest>(Arena*);
template<> ::milvus::proto::milvus::GetIndexStatisticsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetIndexStatisticsResponse>(Arena*);
template<> ::milvus::proto::milvus::GetLoadStateRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetLoadStateRequest>(Arena*);
template<> ::milvus::proto::milvus::GetLoadStateResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetLoadStateResponse>(Arena*);
template<> ::milvus::proto::milvus::GetLoadingProgressRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetLoadingProgressRequest>(Arena*);
template<> ::milvus::proto::milvus::GetLoadingProgressResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetLoadingProgressResponse>(Arena*);
template<> ::milvus::proto::milvus::GetMetricsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetMetricsRequest>(Arena*);
template<> ::milvus::proto::milvus::GetMetricsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetMetricsResponse>(Arena*);
template<> ::milvus::proto::milvus::GetPartitionStatisticsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetPartitionStatisticsRequest>(Arena*);
template<> ::milvus::proto::milvus::GetPartitionStatisticsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetPartitionStatisticsResponse>(Arena*);
template<> ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetPersistentSegmentInfoRequest>(Arena*);
template<> ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetPersistentSegmentInfoResponse>(Arena*);
template<> ::milvus::proto::milvus::GetQuerySegmentInfoRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetQuerySegmentInfoRequest>(Arena*);
template<> ::milvus::proto::milvus::GetQuerySegmentInfoResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetQuerySegmentInfoResponse>(Arena*);
template<> ::milvus::proto::milvus::GetReplicasRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetReplicasRequest>(Arena*);
template<> ::milvus::proto::milvus::GetReplicasResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetReplicasResponse>(Arena*);
template<> ::milvus::proto::milvus::GetStatisticsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetStatisticsRequest>(Arena*);
template<> ::milvus::proto::milvus::GetStatisticsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetStatisticsResponse>(Arena*);
template<> ::milvus::proto::milvus::GetVersionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetVersionRequest>(Arena*);
template<> ::milvus::proto::milvus::GetVersionResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::GetVersionResponse>(Arena*);
template<> ::milvus::proto::milvus::GrantEntity* Arena::CreateMaybeMessage<::milvus::proto::milvus::GrantEntity>(Arena*);
template<> ::milvus::proto::milvus::GrantPrivilegeEntity* Arena::CreateMaybeMessage<::milvus::proto::milvus::GrantPrivilegeEntity>(Arena*);
template<> ::milvus::proto::milvus::GrantorEntity* Arena::CreateMaybeMessage<::milvus::proto::milvus::GrantorEntity>(Arena*);
template<> ::milvus::proto::milvus::HasCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::HasCollectionRequest>(Arena*);
template<> ::milvus::proto::milvus::HasPartitionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::HasPartitionRequest>(Arena*);
template<> ::milvus::proto::milvus::Hits* Arena::CreateMaybeMessage<::milvus::proto::milvus::Hits>(Arena*);
template<> ::milvus::proto::milvus::ImportRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ImportRequest>(Arena*);
template<> ::milvus::proto::milvus::ImportResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ImportResponse>(Arena*);
template<> ::milvus::proto::milvus::IndexDescription* Arena::CreateMaybeMessage<::milvus::proto::milvus::IndexDescription>(Arena*);
template<> ::milvus::proto::milvus::InsertRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::InsertRequest>(Arena*);
template<> ::milvus::proto::milvus::ListAliasesRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ListAliasesRequest>(Arena*);
template<> ::milvus::proto::milvus::ListAliasesResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ListAliasesResponse>(Arena*);
template<> ::milvus::proto::milvus::ListCredUsersRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ListCredUsersRequest>(Arena*);
template<> ::milvus::proto::milvus::ListCredUsersResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ListCredUsersResponse>(Arena*);
template<> ::milvus::proto::milvus::ListDatabasesRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ListDatabasesRequest>(Arena*);
template<> ::milvus::proto::milvus::ListDatabasesResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ListDatabasesResponse>(Arena*);
template<> ::milvus::proto::milvus::ListImportTasksRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ListImportTasksRequest>(Arena*);
template<> ::milvus::proto::milvus::ListImportTasksResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ListImportTasksResponse>(Arena*);
template<> ::milvus::proto::milvus::ListResourceGroupsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ListResourceGroupsRequest>(Arena*);
template<> ::milvus::proto::milvus::ListResourceGroupsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ListResourceGroupsResponse>(Arena*);
template<> ::milvus::proto::milvus::LoadBalanceRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::LoadBalanceRequest>(Arena*);
template<> ::milvus::proto::milvus::LoadCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::LoadCollectionRequest>(Arena*);
template<> ::milvus::proto::milvus::LoadPartitionsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::LoadPartitionsRequest>(Arena*);
template<> ::milvus::proto::milvus::ManualCompactionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ManualCompactionRequest>(Arena*);
template<> ::milvus::proto::milvus::ManualCompactionResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ManualCompactionResponse>(Arena*);
template<> ::milvus::proto::milvus::MilvusExt* Arena::CreateMaybeMessage<::milvus::proto::milvus::MilvusExt>(Arena*);
template<> ::milvus::proto::milvus::MutationResult* Arena::CreateMaybeMessage<::milvus::proto::milvus::MutationResult>(Arena*);
template<> ::milvus::proto::milvus::ObjectEntity* Arena::CreateMaybeMessage<::milvus::proto::milvus::ObjectEntity>(Arena*);
template<> ::milvus::proto::milvus::OperatePrivilegeRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::OperatePrivilegeRequest>(Arena*);
template<> ::milvus::proto::milvus::OperateUserRoleRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::OperateUserRoleRequest>(Arena*);
template<> ::milvus::proto::milvus::PersistentSegmentInfo* Arena::CreateMaybeMessage<::milvus::proto::milvus::PersistentSegmentInfo>(Arena*);
template<> ::milvus::proto::milvus::PrivilegeEntity* Arena::CreateMaybeMessage<::milvus::proto::milvus::PrivilegeEntity>(Arena*);
template<> ::milvus::proto::milvus::QueryRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::QueryRequest>(Arena*);
template<> ::milvus::proto::milvus::QueryResults* Arena::CreateMaybeMessage<::milvus::proto::milvus::QueryResults>(Arena*);
template<> ::milvus::proto::milvus::QuerySegmentInfo* Arena::CreateMaybeMessage<::milvus::proto::milvus::QuerySegmentInfo>(Arena*);
template<> ::milvus::proto::milvus::RegisterLinkRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::RegisterLinkRequest>(Arena*);
template<> ::milvus::proto::milvus::RegisterLinkResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::RegisterLinkResponse>(Arena*);
template<> ::milvus::proto::milvus::ReleaseCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ReleaseCollectionRequest>(Arena*);
template<> ::milvus::proto::milvus::ReleasePartitionsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ReleasePartitionsRequest>(Arena*);
template<> ::milvus::proto::milvus::RenameCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::RenameCollectionRequest>(Arena*);
template<> ::milvus::proto::milvus::ReplicaInfo* Arena::CreateMaybeMessage<::milvus::proto::milvus::ReplicaInfo>(Arena*);
template<> ::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse>(Arena*);
template<> ::milvus::proto::milvus::ResourceGroup* Arena::CreateMaybeMessage<::milvus::proto::milvus::ResourceGroup>(Arena*);
template<> ::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse>(Arena*);
template<> ::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse>(Arena*);
template<> ::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse>(Arena*);
template<> ::milvus::proto::milvus::RoleEntity* Arena::CreateMaybeMessage<::milvus::proto::milvus::RoleEntity>(Arena*);
template<> ::milvus::proto::milvus::RoleResult* Arena::CreateMaybeMessage<::milvus::proto::milvus::RoleResult>(Arena*);
template<> ::milvus::proto::milvus::SearchRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::SearchRequest>(Arena*);
template<> ::milvus::proto::milvus::SearchResults* Arena::CreateMaybeMessage<::milvus::proto::milvus::SearchResults>(Arena*);
template<> ::milvus::proto::milvus::SelectGrantRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::SelectGrantRequest>(Arena*);
template<> ::milvus::proto::milvus::SelectGrantResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::SelectGrantResponse>(Arena*);
template<> ::milvus::proto::milvus::SelectRoleRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::SelectRoleRequest>(Arena*);
template<> ::milvus::proto::milvus::SelectRoleResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::SelectRoleResponse>(Arena*);
template<> ::milvus::proto::milvus::SelectUserRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::SelectUserRequest>(Arena*);
template<> ::milvus::proto::milvus::SelectUserResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::SelectUserResponse>(Arena*);
template<> ::milvus::proto::milvus::ShardReplica* Arena::CreateMaybeMessage<::milvus::proto::milvus::ShardReplica>(Arena*);
template<> ::milvus::proto::milvus::ShowCollectionsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ShowCollectionsRequest>(Arena*);
template<> ::milvus::proto::milvus::ShowCollectionsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ShowCollectionsResponse>(Arena*);
template<> ::milvus::proto::milvus::ShowPartitionsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ShowPartitionsRequest>(Arena*);
template<> ::milvus::proto::milvus::ShowPartitionsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ShowPartitionsResponse>(Arena*);
template<> ::milvus::proto::milvus::ShowSegmentsRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::ShowSegmentsRequest>(Arena*);
template<> ::milvus::proto::milvus::ShowSegmentsResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::ShowSegmentsResponse>(Arena*);
template<> ::milvus::proto::milvus::StringResponse* Arena::CreateMaybeMessage<::milvus::proto::milvus::StringResponse>(Arena*);
template<> ::milvus::proto::milvus::TransferNodeRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::TransferNodeRequest>(Arena*);
template<> ::milvus::proto::milvus::TransferReplicaRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::TransferReplicaRequest>(Arena*);
template<> ::milvus::proto::milvus::UpdateCredentialRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::UpdateCredentialRequest>(Arena*);
template<> ::milvus::proto::milvus::UpsertRequest* Arena::CreateMaybeMessage<::milvus::proto::milvus::UpsertRequest>(Arena*);
template<> ::milvus::proto::milvus::UserEntity* Arena::CreateMaybeMessage<::milvus::proto::milvus::UserEntity>(Arena*);
template<> ::milvus::proto::milvus::UserResult* Arena::CreateMaybeMessage<::milvus::proto::milvus::UserResult>(Arena*);
template<> ::milvus::proto::milvus::VectorIDs* Arena::CreateMaybeMessage<::milvus::proto::milvus::VectorIDs>(Arena*);
template<> ::milvus::proto::milvus::VectorsArray* Arena::CreateMaybeMessage<::milvus::proto::milvus::VectorsArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace milvus {
namespace proto {
namespace milvus {

enum ShowType : int {
  All = 0,
  InMemory = 1,
  ShowType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ShowType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ShowType_IsValid(int value);
constexpr ShowType ShowType_MIN = All;
constexpr ShowType ShowType_MAX = InMemory;
constexpr int ShowType_ARRAYSIZE = ShowType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShowType_descriptor();
template<typename T>
inline const std::string& ShowType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShowType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShowType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShowType_descriptor(), enum_t_value);
}
inline bool ShowType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ShowType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShowType>(
    ShowType_descriptor(), name, value);
}
enum OperateUserRoleType : int {
  AddUserToRole = 0,
  RemoveUserFromRole = 1,
  OperateUserRoleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OperateUserRoleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OperateUserRoleType_IsValid(int value);
constexpr OperateUserRoleType OperateUserRoleType_MIN = AddUserToRole;
constexpr OperateUserRoleType OperateUserRoleType_MAX = RemoveUserFromRole;
constexpr int OperateUserRoleType_ARRAYSIZE = OperateUserRoleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperateUserRoleType_descriptor();
template<typename T>
inline const std::string& OperateUserRoleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OperateUserRoleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OperateUserRoleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OperateUserRoleType_descriptor(), enum_t_value);
}
inline bool OperateUserRoleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OperateUserRoleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OperateUserRoleType>(
    OperateUserRoleType_descriptor(), name, value);
}
enum OperatePrivilegeType : int {
  Grant = 0,
  Revoke = 1,
  OperatePrivilegeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OperatePrivilegeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OperatePrivilegeType_IsValid(int value);
constexpr OperatePrivilegeType OperatePrivilegeType_MIN = Grant;
constexpr OperatePrivilegeType OperatePrivilegeType_MAX = Revoke;
constexpr int OperatePrivilegeType_ARRAYSIZE = OperatePrivilegeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperatePrivilegeType_descriptor();
template<typename T>
inline const std::string& OperatePrivilegeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OperatePrivilegeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OperatePrivilegeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OperatePrivilegeType_descriptor(), enum_t_value);
}
inline bool OperatePrivilegeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OperatePrivilegeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OperatePrivilegeType>(
    OperatePrivilegeType_descriptor(), name, value);
}
enum QuotaState : int {
  Unknown = 0,
  ReadLimited = 2,
  WriteLimited = 3,
  DenyToRead = 4,
  DenyToWrite = 5,
  QuotaState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  QuotaState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool QuotaState_IsValid(int value);
constexpr QuotaState QuotaState_MIN = Unknown;
constexpr QuotaState QuotaState_MAX = DenyToWrite;
constexpr int QuotaState_ARRAYSIZE = QuotaState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuotaState_descriptor();
template<typename T>
inline const std::string& QuotaState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QuotaState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QuotaState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QuotaState_descriptor(), enum_t_value);
}
inline bool QuotaState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QuotaState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QuotaState>(
    QuotaState_descriptor(), name, value);
}
// ===================================================================

class CreateAliasRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CreateAliasRequest) */ {
 public:
  inline CreateAliasRequest() : CreateAliasRequest(nullptr) {}
  ~CreateAliasRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateAliasRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAliasRequest(const CreateAliasRequest& from);
  CreateAliasRequest(CreateAliasRequest&& from) noexcept
    : CreateAliasRequest() {
    *this = ::std::move(from);
  }

  inline CreateAliasRequest& operator=(const CreateAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAliasRequest& operator=(CreateAliasRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAliasRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAliasRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAliasRequest*>(
               &_CreateAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAliasRequest& a, CreateAliasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAliasRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAliasRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAliasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateAliasRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAliasRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateAliasRequest& from) {
    CreateAliasRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAliasRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CreateAliasRequest";
  }
  protected:
  explicit CreateAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kAliasFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string alias = 4;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CreateAliasRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DropAliasRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DropAliasRequest) */ {
 public:
  inline DropAliasRequest() : DropAliasRequest(nullptr) {}
  ~DropAliasRequest() override;
  explicit PROTOBUF_CONSTEXPR DropAliasRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropAliasRequest(const DropAliasRequest& from);
  DropAliasRequest(DropAliasRequest&& from) noexcept
    : DropAliasRequest() {
    *this = ::std::move(from);
  }

  inline DropAliasRequest& operator=(const DropAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropAliasRequest& operator=(DropAliasRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropAliasRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropAliasRequest* internal_default_instance() {
    return reinterpret_cast<const DropAliasRequest*>(
               &_DropAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DropAliasRequest& a, DropAliasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropAliasRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropAliasRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropAliasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropAliasRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropAliasRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropAliasRequest& from) {
    DropAliasRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropAliasRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DropAliasRequest";
  }
  protected:
  explicit DropAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kAliasFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string alias = 3;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DropAliasRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class AlterAliasRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.AlterAliasRequest) */ {
 public:
  inline AlterAliasRequest() : AlterAliasRequest(nullptr) {}
  ~AlterAliasRequest() override;
  explicit PROTOBUF_CONSTEXPR AlterAliasRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlterAliasRequest(const AlterAliasRequest& from);
  AlterAliasRequest(AlterAliasRequest&& from) noexcept
    : AlterAliasRequest() {
    *this = ::std::move(from);
  }

  inline AlterAliasRequest& operator=(const AlterAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlterAliasRequest& operator=(AlterAliasRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlterAliasRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlterAliasRequest* internal_default_instance() {
    return reinterpret_cast<const AlterAliasRequest*>(
               &_AlterAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AlterAliasRequest& a, AlterAliasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlterAliasRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlterAliasRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlterAliasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlterAliasRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlterAliasRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlterAliasRequest& from) {
    AlterAliasRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlterAliasRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.AlterAliasRequest";
  }
  protected:
  explicit AlterAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kAliasFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string alias = 4;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.AlterAliasRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeAliasRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeAliasRequest) */ {
 public:
  inline DescribeAliasRequest() : DescribeAliasRequest(nullptr) {}
  ~DescribeAliasRequest() override;
  explicit PROTOBUF_CONSTEXPR DescribeAliasRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescribeAliasRequest(const DescribeAliasRequest& from);
  DescribeAliasRequest(DescribeAliasRequest&& from) noexcept
    : DescribeAliasRequest() {
    *this = ::std::move(from);
  }

  inline DescribeAliasRequest& operator=(const DescribeAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeAliasRequest& operator=(DescribeAliasRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescribeAliasRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DescribeAliasRequest* internal_default_instance() {
    return reinterpret_cast<const DescribeAliasRequest*>(
               &_DescribeAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DescribeAliasRequest& a, DescribeAliasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeAliasRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeAliasRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescribeAliasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescribeAliasRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescribeAliasRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescribeAliasRequest& from) {
    DescribeAliasRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeAliasRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeAliasRequest";
  }
  protected:
  explicit DescribeAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kAliasFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string alias = 3;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeAliasRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeAliasResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeAliasResponse) */ {
 public:
  inline DescribeAliasResponse() : DescribeAliasResponse(nullptr) {}
  ~DescribeAliasResponse() override;
  explicit PROTOBUF_CONSTEXPR DescribeAliasResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescribeAliasResponse(const DescribeAliasResponse& from);
  DescribeAliasResponse(DescribeAliasResponse&& from) noexcept
    : DescribeAliasResponse() {
    *this = ::std::move(from);
  }

  inline DescribeAliasResponse& operator=(const DescribeAliasResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeAliasResponse& operator=(DescribeAliasResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescribeAliasResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DescribeAliasResponse* internal_default_instance() {
    return reinterpret_cast<const DescribeAliasResponse*>(
               &_DescribeAliasResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DescribeAliasResponse& a, DescribeAliasResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeAliasResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeAliasResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescribeAliasResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescribeAliasResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescribeAliasResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescribeAliasResponse& from) {
    DescribeAliasResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeAliasResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeAliasResponse";
  }
  protected:
  explicit DescribeAliasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kAliasFieldNumber = 3,
    kCollectionFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string alias = 3;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string collection = 4;
  void clear_collection();
  const std::string& collection() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection();
  PROTOBUF_NODISCARD std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeAliasResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ListAliasesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ListAliasesRequest) */ {
 public:
  inline ListAliasesRequest() : ListAliasesRequest(nullptr) {}
  ~ListAliasesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListAliasesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAliasesRequest(const ListAliasesRequest& from);
  ListAliasesRequest(ListAliasesRequest&& from) noexcept
    : ListAliasesRequest() {
    *this = ::std::move(from);
  }

  inline ListAliasesRequest& operator=(const ListAliasesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAliasesRequest& operator=(ListAliasesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAliasesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAliasesRequest* internal_default_instance() {
    return reinterpret_cast<const ListAliasesRequest*>(
               &_ListAliasesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListAliasesRequest& a, ListAliasesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAliasesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAliasesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAliasesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAliasesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAliasesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListAliasesRequest& from) {
    ListAliasesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAliasesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ListAliasesRequest";
  }
  protected:
  explicit ListAliasesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ListAliasesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ListAliasesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ListAliasesResponse) */ {
 public:
  inline ListAliasesResponse() : ListAliasesResponse(nullptr) {}
  ~ListAliasesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListAliasesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAliasesResponse(const ListAliasesResponse& from);
  ListAliasesResponse(ListAliasesResponse&& from) noexcept
    : ListAliasesResponse() {
    *this = ::std::move(from);
  }

  inline ListAliasesResponse& operator=(const ListAliasesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAliasesResponse& operator=(ListAliasesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAliasesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAliasesResponse* internal_default_instance() {
    return reinterpret_cast<const ListAliasesResponse*>(
               &_ListAliasesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListAliasesResponse& a, ListAliasesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAliasesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAliasesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAliasesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAliasesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAliasesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListAliasesResponse& from) {
    ListAliasesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAliasesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ListAliasesResponse";
  }
  protected:
  explicit ListAliasesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAliasesFieldNumber = 4,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated string aliases = 4;
  int aliases_size() const;
  private:
  int _internal_aliases_size() const;
  public:
  void clear_aliases();
  const std::string& aliases(int index) const;
  std::string* mutable_aliases(int index);
  void set_aliases(int index, const std::string& value);
  void set_aliases(int index, std::string&& value);
  void set_aliases(int index, const char* value);
  void set_aliases(int index, const char* value, size_t size);
  std::string* add_aliases();
  void add_aliases(const std::string& value);
  void add_aliases(std::string&& value);
  void add_aliases(const char* value);
  void add_aliases(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aliases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aliases();
  private:
  const std::string& _internal_aliases(int index) const;
  std::string* _internal_add_aliases();
  public:

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ListAliasesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aliases_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CreateCollectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CreateCollectionRequest) */ {
 public:
  inline CreateCollectionRequest() : CreateCollectionRequest(nullptr) {}
  ~CreateCollectionRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateCollectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCollectionRequest(const CreateCollectionRequest& from);
  CreateCollectionRequest(CreateCollectionRequest&& from) noexcept
    : CreateCollectionRequest() {
    *this = ::std::move(from);
  }

  inline CreateCollectionRequest& operator=(const CreateCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCollectionRequest& operator=(CreateCollectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCollectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCollectionRequest*>(
               &_CreateCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateCollectionRequest& a, CreateCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCollectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCollectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCollectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateCollectionRequest& from) {
    CreateCollectionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCollectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CreateCollectionRequest";
  }
  protected:
  explicit CreateCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 7,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kSchemaFieldNumber = 4,
    kBaseFieldNumber = 1,
    kShardsNumFieldNumber = 5,
    kConsistencyLevelFieldNumber = 6,
    kNumPartitionsFieldNumber = 8,
  };
  // repeated .milvus.proto.common.KeyValuePair properties = 7;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::milvus::proto::common::KeyValuePair* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_properties();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_properties(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_properties();
  public:
  const ::milvus::proto::common::KeyValuePair& properties(int index) const;
  ::milvus::proto::common::KeyValuePair* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      properties() const;

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // bytes schema = 4;
  void clear_schema();
  const std::string& schema() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema();
  PROTOBUF_NODISCARD std::string* release_schema();
  void set_allocated_schema(std::string* schema);
  private:
  const std::string& _internal_schema() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema(const std::string& value);
  std::string* _internal_mutable_schema();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int32 shards_num = 5;
  void clear_shards_num();
  int32_t shards_num() const;
  void set_shards_num(int32_t value);
  private:
  int32_t _internal_shards_num() const;
  void _internal_set_shards_num(int32_t value);
  public:

  // .milvus.proto.common.ConsistencyLevel consistency_level = 6;
  void clear_consistency_level();
  ::milvus::proto::common::ConsistencyLevel consistency_level() const;
  void set_consistency_level(::milvus::proto::common::ConsistencyLevel value);
  private:
  ::milvus::proto::common::ConsistencyLevel _internal_consistency_level() const;
  void _internal_set_consistency_level(::milvus::proto::common::ConsistencyLevel value);
  public:

  // int64 num_partitions = 8;
  void clear_num_partitions();
  int64_t num_partitions() const;
  void set_num_partitions(int64_t value);
  private:
  int64_t _internal_num_partitions() const;
  void _internal_set_num_partitions(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CreateCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > properties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_;
    ::milvus::proto::common::MsgBase* base_;
    int32_t shards_num_;
    int consistency_level_;
    int64_t num_partitions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DropCollectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DropCollectionRequest) */ {
 public:
  inline DropCollectionRequest() : DropCollectionRequest(nullptr) {}
  ~DropCollectionRequest() override;
  explicit PROTOBUF_CONSTEXPR DropCollectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropCollectionRequest(const DropCollectionRequest& from);
  DropCollectionRequest(DropCollectionRequest&& from) noexcept
    : DropCollectionRequest() {
    *this = ::std::move(from);
  }

  inline DropCollectionRequest& operator=(const DropCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropCollectionRequest& operator=(DropCollectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropCollectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const DropCollectionRequest*>(
               &_DropCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DropCollectionRequest& a, DropCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropCollectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropCollectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropCollectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropCollectionRequest& from) {
    DropCollectionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropCollectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DropCollectionRequest";
  }
  protected:
  explicit DropCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DropCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class AlterCollectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.AlterCollectionRequest) */ {
 public:
  inline AlterCollectionRequest() : AlterCollectionRequest(nullptr) {}
  ~AlterCollectionRequest() override;
  explicit PROTOBUF_CONSTEXPR AlterCollectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlterCollectionRequest(const AlterCollectionRequest& from);
  AlterCollectionRequest(AlterCollectionRequest&& from) noexcept
    : AlterCollectionRequest() {
    *this = ::std::move(from);
  }

  inline AlterCollectionRequest& operator=(const AlterCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlterCollectionRequest& operator=(AlterCollectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlterCollectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlterCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const AlterCollectionRequest*>(
               &_AlterCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AlterCollectionRequest& a, AlterCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlterCollectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlterCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlterCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlterCollectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlterCollectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlterCollectionRequest& from) {
    AlterCollectionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlterCollectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.AlterCollectionRequest";
  }
  protected:
  explicit AlterCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 5,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kCollectionIDFieldNumber = 4,
  };
  // repeated .milvus.proto.common.KeyValuePair properties = 5;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::milvus::proto::common::KeyValuePair* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_properties();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_properties(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_properties();
  public:
  const ::milvus::proto::common::KeyValuePair& properties(int index) const;
  ::milvus::proto::common::KeyValuePair* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      properties() const;

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 collectionID = 4;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.AlterCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > properties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class HasCollectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.HasCollectionRequest) */ {
 public:
  inline HasCollectionRequest() : HasCollectionRequest(nullptr) {}
  ~HasCollectionRequest() override;
  explicit PROTOBUF_CONSTEXPR HasCollectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HasCollectionRequest(const HasCollectionRequest& from);
  HasCollectionRequest(HasCollectionRequest&& from) noexcept
    : HasCollectionRequest() {
    *this = ::std::move(from);
  }

  inline HasCollectionRequest& operator=(const HasCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HasCollectionRequest& operator=(HasCollectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HasCollectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HasCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const HasCollectionRequest*>(
               &_HasCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HasCollectionRequest& a, HasCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HasCollectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HasCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HasCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HasCollectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HasCollectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HasCollectionRequest& from) {
    HasCollectionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HasCollectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.HasCollectionRequest";
  }
  protected:
  explicit HasCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kTimeStampFieldNumber = 4,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // uint64 time_stamp = 4;
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.HasCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::MsgBase* base_;
    uint64_t time_stamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class BoolResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.BoolResponse) */ {
 public:
  inline BoolResponse() : BoolResponse(nullptr) {}
  ~BoolResponse() override;
  explicit PROTOBUF_CONSTEXPR BoolResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoolResponse(const BoolResponse& from);
  BoolResponse(BoolResponse&& from) noexcept
    : BoolResponse() {
    *this = ::std::move(from);
  }

  inline BoolResponse& operator=(const BoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolResponse& operator=(BoolResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolResponse* internal_default_instance() {
    return reinterpret_cast<const BoolResponse*>(
               &_BoolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BoolResponse& a, BoolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoolResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoolResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BoolResponse& from) {
    BoolResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.BoolResponse";
  }
  protected:
  explicit BoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // bool value = 2;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.BoolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    bool value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class StringResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.StringResponse) */ {
 public:
  inline StringResponse() : StringResponse(nullptr) {}
  ~StringResponse() override;
  explicit PROTOBUF_CONSTEXPR StringResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringResponse(const StringResponse& from);
  StringResponse(StringResponse&& from) noexcept
    : StringResponse() {
    *this = ::std::move(from);
  }

  inline StringResponse& operator=(const StringResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringResponse& operator=(StringResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringResponse* internal_default_instance() {
    return reinterpret_cast<const StringResponse*>(
               &_StringResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StringResponse& a, StringResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StringResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringResponse& from) {
    StringResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.StringResponse";
  }
  protected:
  explicit StringResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.StringResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeCollectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeCollectionRequest) */ {
 public:
  inline DescribeCollectionRequest() : DescribeCollectionRequest(nullptr) {}
  ~DescribeCollectionRequest() override;
  explicit PROTOBUF_CONSTEXPR DescribeCollectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescribeCollectionRequest(const DescribeCollectionRequest& from);
  DescribeCollectionRequest(DescribeCollectionRequest&& from) noexcept
    : DescribeCollectionRequest() {
    *this = ::std::move(from);
  }

  inline DescribeCollectionRequest& operator=(const DescribeCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeCollectionRequest& operator=(DescribeCollectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescribeCollectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DescribeCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const DescribeCollectionRequest*>(
               &_DescribeCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DescribeCollectionRequest& a, DescribeCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeCollectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescribeCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescribeCollectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescribeCollectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescribeCollectionRequest& from) {
    DescribeCollectionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeCollectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeCollectionRequest";
  }
  protected:
  explicit DescribeCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kCollectionIDFieldNumber = 4,
    kTimeStampFieldNumber = 5,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 collectionID = 4;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // uint64 time_stamp = 5;
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t collectionid_;
    uint64_t time_stamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeCollectionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeCollectionResponse) */ {
 public:
  inline DescribeCollectionResponse() : DescribeCollectionResponse(nullptr) {}
  ~DescribeCollectionResponse() override;
  explicit PROTOBUF_CONSTEXPR DescribeCollectionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescribeCollectionResponse(const DescribeCollectionResponse& from);
  DescribeCollectionResponse(DescribeCollectionResponse&& from) noexcept
    : DescribeCollectionResponse() {
    *this = ::std::move(from);
  }

  inline DescribeCollectionResponse& operator=(const DescribeCollectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeCollectionResponse& operator=(DescribeCollectionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescribeCollectionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DescribeCollectionResponse* internal_default_instance() {
    return reinterpret_cast<const DescribeCollectionResponse*>(
               &_DescribeCollectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DescribeCollectionResponse& a, DescribeCollectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeCollectionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeCollectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescribeCollectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescribeCollectionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescribeCollectionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescribeCollectionResponse& from) {
    DescribeCollectionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeCollectionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeCollectionResponse";
  }
  protected:
  explicit DescribeCollectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNamesFieldNumber = 4,
    kPhysicalChannelNamesFieldNumber = 5,
    kAliasesFieldNumber = 9,
    kStartPositionsFieldNumber = 10,
    kPropertiesFieldNumber = 13,
    kCollectionNameFieldNumber = 12,
    kDbNameFieldNumber = 14,
    kStatusFieldNumber = 1,
    kSchemaFieldNumber = 2,
    kCollectionIDFieldNumber = 3,
    kCreatedTimestampFieldNumber = 6,
    kCreatedUtcTimestampFieldNumber = 7,
    kShardsNumFieldNumber = 8,
    kConsistencyLevelFieldNumber = 11,
    kNumPartitionsFieldNumber = 15,
  };
  // repeated string virtual_channel_names = 4;
  int virtual_channel_names_size() const;
  private:
  int _internal_virtual_channel_names_size() const;
  public:
  void clear_virtual_channel_names();
  const std::string& virtual_channel_names(int index) const;
  std::string* mutable_virtual_channel_names(int index);
  void set_virtual_channel_names(int index, const std::string& value);
  void set_virtual_channel_names(int index, std::string&& value);
  void set_virtual_channel_names(int index, const char* value);
  void set_virtual_channel_names(int index, const char* value, size_t size);
  std::string* add_virtual_channel_names();
  void add_virtual_channel_names(const std::string& value);
  void add_virtual_channel_names(std::string&& value);
  void add_virtual_channel_names(const char* value);
  void add_virtual_channel_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& virtual_channel_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_virtual_channel_names();
  private:
  const std::string& _internal_virtual_channel_names(int index) const;
  std::string* _internal_add_virtual_channel_names();
  public:

  // repeated string physical_channel_names = 5;
  int physical_channel_names_size() const;
  private:
  int _internal_physical_channel_names_size() const;
  public:
  void clear_physical_channel_names();
  const std::string& physical_channel_names(int index) const;
  std::string* mutable_physical_channel_names(int index);
  void set_physical_channel_names(int index, const std::string& value);
  void set_physical_channel_names(int index, std::string&& value);
  void set_physical_channel_names(int index, const char* value);
  void set_physical_channel_names(int index, const char* value, size_t size);
  std::string* add_physical_channel_names();
  void add_physical_channel_names(const std::string& value);
  void add_physical_channel_names(std::string&& value);
  void add_physical_channel_names(const char* value);
  void add_physical_channel_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& physical_channel_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_physical_channel_names();
  private:
  const std::string& _internal_physical_channel_names(int index) const;
  std::string* _internal_add_physical_channel_names();
  public:

  // repeated string aliases = 9;
  int aliases_size() const;
  private:
  int _internal_aliases_size() const;
  public:
  void clear_aliases();
  const std::string& aliases(int index) const;
  std::string* mutable_aliases(int index);
  void set_aliases(int index, const std::string& value);
  void set_aliases(int index, std::string&& value);
  void set_aliases(int index, const char* value);
  void set_aliases(int index, const char* value, size_t size);
  std::string* add_aliases();
  void add_aliases(const std::string& value);
  void add_aliases(std::string&& value);
  void add_aliases(const char* value);
  void add_aliases(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aliases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aliases();
  private:
  const std::string& _internal_aliases(int index) const;
  std::string* _internal_add_aliases();
  public:

  // repeated .milvus.proto.common.KeyDataPair start_positions = 10;
  int start_positions_size() const;
  private:
  int _internal_start_positions_size() const;
  public:
  void clear_start_positions();
  ::milvus::proto::common::KeyDataPair* mutable_start_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >*
      mutable_start_positions();
  private:
  const ::milvus::proto::common::KeyDataPair& _internal_start_positions(int index) const;
  ::milvus::proto::common::KeyDataPair* _internal_add_start_positions();
  public:
  const ::milvus::proto::common::KeyDataPair& start_positions(int index) const;
  ::milvus::proto::common::KeyDataPair* add_start_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >&
      start_positions() const;

  // repeated .milvus.proto.common.KeyValuePair properties = 13;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::milvus::proto::common::KeyValuePair* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_properties();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_properties(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_properties();
  public:
  const ::milvus::proto::common::KeyValuePair& properties(int index) const;
  ::milvus::proto::common::KeyValuePair* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      properties() const;

  // string collection_name = 12;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string db_name = 14;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // .milvus.proto.schema.CollectionSchema schema = 2;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::milvus::proto::schema::CollectionSchema& schema() const;
  PROTOBUF_NODISCARD ::milvus::proto::schema::CollectionSchema* release_schema();
  ::milvus::proto::schema::CollectionSchema* mutable_schema();
  void set_allocated_schema(::milvus::proto::schema::CollectionSchema* schema);
  private:
  const ::milvus::proto::schema::CollectionSchema& _internal_schema() const;
  ::milvus::proto::schema::CollectionSchema* _internal_mutable_schema();
  public:
  void unsafe_arena_set_allocated_schema(
      ::milvus::proto::schema::CollectionSchema* schema);
  ::milvus::proto::schema::CollectionSchema* unsafe_arena_release_schema();

  // int64 collectionID = 3;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // uint64 created_timestamp = 6;
  void clear_created_timestamp();
  uint64_t created_timestamp() const;
  void set_created_timestamp(uint64_t value);
  private:
  uint64_t _internal_created_timestamp() const;
  void _internal_set_created_timestamp(uint64_t value);
  public:

  // uint64 created_utc_timestamp = 7;
  void clear_created_utc_timestamp();
  uint64_t created_utc_timestamp() const;
  void set_created_utc_timestamp(uint64_t value);
  private:
  uint64_t _internal_created_utc_timestamp() const;
  void _internal_set_created_utc_timestamp(uint64_t value);
  public:

  // int32 shards_num = 8;
  void clear_shards_num();
  int32_t shards_num() const;
  void set_shards_num(int32_t value);
  private:
  int32_t _internal_shards_num() const;
  void _internal_set_shards_num(int32_t value);
  public:

  // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
  void clear_consistency_level();
  ::milvus::proto::common::ConsistencyLevel consistency_level() const;
  void set_consistency_level(::milvus::proto::common::ConsistencyLevel value);
  private:
  ::milvus::proto::common::ConsistencyLevel _internal_consistency_level() const;
  void _internal_set_consistency_level(::milvus::proto::common::ConsistencyLevel value);
  public:

  // int64 num_partitions = 15;
  void clear_num_partitions();
  int64_t num_partitions() const;
  void set_num_partitions(int64_t value);
  private:
  int64_t _internal_num_partitions() const;
  void _internal_set_num_partitions(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeCollectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> virtual_channel_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> physical_channel_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aliases_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair > start_positions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > properties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::milvus::proto::common::Status* status_;
    ::milvus::proto::schema::CollectionSchema* schema_;
    int64_t collectionid_;
    uint64_t created_timestamp_;
    uint64_t created_utc_timestamp_;
    int32_t shards_num_;
    int consistency_level_;
    int64_t num_partitions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class LoadCollectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.LoadCollectionRequest) */ {
 public:
  inline LoadCollectionRequest() : LoadCollectionRequest(nullptr) {}
  ~LoadCollectionRequest() override;
  explicit PROTOBUF_CONSTEXPR LoadCollectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadCollectionRequest(const LoadCollectionRequest& from);
  LoadCollectionRequest(LoadCollectionRequest&& from) noexcept
    : LoadCollectionRequest() {
    *this = ::std::move(from);
  }

  inline LoadCollectionRequest& operator=(const LoadCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadCollectionRequest& operator=(LoadCollectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadCollectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const LoadCollectionRequest*>(
               &_LoadCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(LoadCollectionRequest& a, LoadCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadCollectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadCollectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadCollectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadCollectionRequest& from) {
    LoadCollectionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadCollectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.LoadCollectionRequest";
  }
  protected:
  explicit LoadCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceGroupsFieldNumber = 5,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kReplicaNumberFieldNumber = 4,
    kRefreshFieldNumber = 6,
  };
  // repeated string resource_groups = 5;
  int resource_groups_size() const;
  private:
  int _internal_resource_groups_size() const;
  public:
  void clear_resource_groups();
  const std::string& resource_groups(int index) const;
  std::string* mutable_resource_groups(int index);
  void set_resource_groups(int index, const std::string& value);
  void set_resource_groups(int index, std::string&& value);
  void set_resource_groups(int index, const char* value);
  void set_resource_groups(int index, const char* value, size_t size);
  std::string* add_resource_groups();
  void add_resource_groups(const std::string& value);
  void add_resource_groups(std::string&& value);
  void add_resource_groups(const char* value);
  void add_resource_groups(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& resource_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_resource_groups();
  private:
  const std::string& _internal_resource_groups(int index) const;
  std::string* _internal_add_resource_groups();
  public:

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int32 replica_number = 4;
  void clear_replica_number();
  int32_t replica_number() const;
  void set_replica_number(int32_t value);
  private:
  int32_t _internal_replica_number() const;
  void _internal_set_replica_number(int32_t value);
  public:

  // bool refresh = 6;
  void clear_refresh();
  bool refresh() const;
  void set_refresh(bool value);
  private:
  bool _internal_refresh() const;
  void _internal_set_refresh(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.LoadCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> resource_groups_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::MsgBase* base_;
    int32_t replica_number_;
    bool refresh_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ReleaseCollectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ReleaseCollectionRequest) */ {
 public:
  inline ReleaseCollectionRequest() : ReleaseCollectionRequest(nullptr) {}
  ~ReleaseCollectionRequest() override;
  explicit PROTOBUF_CONSTEXPR ReleaseCollectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReleaseCollectionRequest(const ReleaseCollectionRequest& from);
  ReleaseCollectionRequest(ReleaseCollectionRequest&& from) noexcept
    : ReleaseCollectionRequest() {
    *this = ::std::move(from);
  }

  inline ReleaseCollectionRequest& operator=(const ReleaseCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseCollectionRequest& operator=(ReleaseCollectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseCollectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const ReleaseCollectionRequest*>(
               &_ReleaseCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ReleaseCollectionRequest& a, ReleaseCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseCollectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleaseCollectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReleaseCollectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReleaseCollectionRequest& from) {
    ReleaseCollectionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseCollectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ReleaseCollectionRequest";
  }
  protected:
  explicit ReleaseCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ReleaseCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetStatisticsRequest) */ {
 public:
  inline GetStatisticsRequest() : GetStatisticsRequest(nullptr) {}
  ~GetStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatisticsRequest(const GetStatisticsRequest& from);
  GetStatisticsRequest(GetStatisticsRequest&& from) noexcept
    : GetStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetStatisticsRequest& operator=(const GetStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatisticsRequest& operator=(GetStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetStatisticsRequest*>(
               &_GetStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetStatisticsRequest& a, GetStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStatisticsRequest& from) {
    GetStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetStatisticsRequest";
  }
  protected:
  explicit GetStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 4,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kGuaranteeTimestampFieldNumber = 5,
  };
  // repeated string partition_names = 4;
  int partition_names_size() const;
  private:
  int _internal_partition_names_size() const;
  public:
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();
  private:
  const std::string& _internal_partition_names(int index) const;
  std::string* _internal_add_partition_names();
  public:

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // uint64 guarantee_timestamp = 5;
  void clear_guarantee_timestamp();
  uint64_t guarantee_timestamp() const;
  void set_guarantee_timestamp(uint64_t value);
  private:
  uint64_t _internal_guarantee_timestamp() const;
  void _internal_set_guarantee_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::MsgBase* base_;
    uint64_t guarantee_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetStatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetStatisticsResponse) */ {
 public:
  inline GetStatisticsResponse() : GetStatisticsResponse(nullptr) {}
  ~GetStatisticsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetStatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatisticsResponse(const GetStatisticsResponse& from);
  GetStatisticsResponse(GetStatisticsResponse&& from) noexcept
    : GetStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline GetStatisticsResponse& operator=(const GetStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatisticsResponse& operator=(GetStatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const GetStatisticsResponse*>(
               &_GetStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetStatisticsResponse& a, GetStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatisticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStatisticsResponse& from) {
    GetStatisticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatisticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetStatisticsResponse";
  }
  protected:
  explicit GetStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::milvus::proto::common::KeyValuePair* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_stats();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_stats(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_stats();
  public:
  const ::milvus::proto::common::KeyValuePair& stats(int index) const;
  ::milvus::proto::common::KeyValuePair* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      stats() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > stats_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetCollectionStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetCollectionStatisticsRequest) */ {
 public:
  inline GetCollectionStatisticsRequest() : GetCollectionStatisticsRequest(nullptr) {}
  ~GetCollectionStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetCollectionStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCollectionStatisticsRequest(const GetCollectionStatisticsRequest& from);
  GetCollectionStatisticsRequest(GetCollectionStatisticsRequest&& from) noexcept
    : GetCollectionStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetCollectionStatisticsRequest& operator=(const GetCollectionStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollectionStatisticsRequest& operator=(GetCollectionStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCollectionStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCollectionStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetCollectionStatisticsRequest*>(
               &_GetCollectionStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetCollectionStatisticsRequest& a, GetCollectionStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCollectionStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCollectionStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCollectionStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCollectionStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCollectionStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCollectionStatisticsRequest& from) {
    GetCollectionStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollectionStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetCollectionStatisticsRequest";
  }
  protected:
  explicit GetCollectionStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetCollectionStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetCollectionStatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetCollectionStatisticsResponse) */ {
 public:
  inline GetCollectionStatisticsResponse() : GetCollectionStatisticsResponse(nullptr) {}
  ~GetCollectionStatisticsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetCollectionStatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCollectionStatisticsResponse(const GetCollectionStatisticsResponse& from);
  GetCollectionStatisticsResponse(GetCollectionStatisticsResponse&& from) noexcept
    : GetCollectionStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline GetCollectionStatisticsResponse& operator=(const GetCollectionStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollectionStatisticsResponse& operator=(GetCollectionStatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCollectionStatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCollectionStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const GetCollectionStatisticsResponse*>(
               &_GetCollectionStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetCollectionStatisticsResponse& a, GetCollectionStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCollectionStatisticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCollectionStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCollectionStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCollectionStatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCollectionStatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCollectionStatisticsResponse& from) {
    GetCollectionStatisticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollectionStatisticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetCollectionStatisticsResponse";
  }
  protected:
  explicit GetCollectionStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::milvus::proto::common::KeyValuePair* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_stats();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_stats(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_stats();
  public:
  const ::milvus::proto::common::KeyValuePair& stats(int index) const;
  ::milvus::proto::common::KeyValuePair* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      stats() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetCollectionStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > stats_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ShowCollectionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ShowCollectionsRequest) */ {
 public:
  inline ShowCollectionsRequest() : ShowCollectionsRequest(nullptr) {}
  ~ShowCollectionsRequest() override;
  explicit PROTOBUF_CONSTEXPR ShowCollectionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowCollectionsRequest(const ShowCollectionsRequest& from);
  ShowCollectionsRequest(ShowCollectionsRequest&& from) noexcept
    : ShowCollectionsRequest() {
    *this = ::std::move(from);
  }

  inline ShowCollectionsRequest& operator=(const ShowCollectionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowCollectionsRequest& operator=(ShowCollectionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowCollectionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowCollectionsRequest* internal_default_instance() {
    return reinterpret_cast<const ShowCollectionsRequest*>(
               &_ShowCollectionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ShowCollectionsRequest& a, ShowCollectionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowCollectionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowCollectionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowCollectionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowCollectionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShowCollectionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShowCollectionsRequest& from) {
    ShowCollectionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowCollectionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ShowCollectionsRequest";
  }
  protected:
  explicit ShowCollectionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNamesFieldNumber = 5,
    kDbNameFieldNumber = 2,
    kBaseFieldNumber = 1,
    kTimeStampFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // repeated string collection_names = 5;
  int collection_names_size() const;
  private:
  int _internal_collection_names_size() const;
  public:
  void clear_collection_names();
  const std::string& collection_names(int index) const;
  std::string* mutable_collection_names(int index);
  void set_collection_names(int index, const std::string& value);
  void set_collection_names(int index, std::string&& value);
  void set_collection_names(int index, const char* value);
  void set_collection_names(int index, const char* value, size_t size);
  std::string* add_collection_names();
  void add_collection_names(const std::string& value);
  void add_collection_names(std::string&& value);
  void add_collection_names(const char* value);
  void add_collection_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& collection_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_collection_names();
  private:
  const std::string& _internal_collection_names(int index) const;
  std::string* _internal_add_collection_names();
  public:

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // uint64 time_stamp = 3;
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // .milvus.proto.milvus.ShowType type = 4;
  void clear_type();
  ::milvus::proto::milvus::ShowType type() const;
  void set_type(::milvus::proto::milvus::ShowType value);
  private:
  ::milvus::proto::milvus::ShowType _internal_type() const;
  void _internal_set_type(::milvus::proto::milvus::ShowType value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ShowCollectionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> collection_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::milvus::proto::common::MsgBase* base_;
    uint64_t time_stamp_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ShowCollectionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ShowCollectionsResponse) */ {
 public:
  inline ShowCollectionsResponse() : ShowCollectionsResponse(nullptr) {}
  ~ShowCollectionsResponse() override;
  explicit PROTOBUF_CONSTEXPR ShowCollectionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowCollectionsResponse(const ShowCollectionsResponse& from);
  ShowCollectionsResponse(ShowCollectionsResponse&& from) noexcept
    : ShowCollectionsResponse() {
    *this = ::std::move(from);
  }

  inline ShowCollectionsResponse& operator=(const ShowCollectionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowCollectionsResponse& operator=(ShowCollectionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowCollectionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowCollectionsResponse* internal_default_instance() {
    return reinterpret_cast<const ShowCollectionsResponse*>(
               &_ShowCollectionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ShowCollectionsResponse& a, ShowCollectionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowCollectionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowCollectionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowCollectionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowCollectionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShowCollectionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShowCollectionsResponse& from) {
    ShowCollectionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowCollectionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ShowCollectionsResponse";
  }
  protected:
  explicit ShowCollectionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNamesFieldNumber = 2,
    kCollectionIdsFieldNumber = 3,
    kCreatedTimestampsFieldNumber = 4,
    kCreatedUtcTimestampsFieldNumber = 5,
    kInMemoryPercentagesFieldNumber = 6,
    kQueryServiceAvailableFieldNumber = 7,
    kStatusFieldNumber = 1,
  };
  // repeated string collection_names = 2;
  int collection_names_size() const;
  private:
  int _internal_collection_names_size() const;
  public:
  void clear_collection_names();
  const std::string& collection_names(int index) const;
  std::string* mutable_collection_names(int index);
  void set_collection_names(int index, const std::string& value);
  void set_collection_names(int index, std::string&& value);
  void set_collection_names(int index, const char* value);
  void set_collection_names(int index, const char* value, size_t size);
  std::string* add_collection_names();
  void add_collection_names(const std::string& value);
  void add_collection_names(std::string&& value);
  void add_collection_names(const char* value);
  void add_collection_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& collection_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_collection_names();
  private:
  const std::string& _internal_collection_names(int index) const;
  std::string* _internal_add_collection_names();
  public:

  // repeated int64 collection_ids = 3;
  int collection_ids_size() const;
  private:
  int _internal_collection_ids_size() const;
  public:
  void clear_collection_ids();
  private:
  int64_t _internal_collection_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_collection_ids() const;
  void _internal_add_collection_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_collection_ids();
  public:
  int64_t collection_ids(int index) const;
  void set_collection_ids(int index, int64_t value);
  void add_collection_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      collection_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_collection_ids();

  // repeated uint64 created_timestamps = 4;
  int created_timestamps_size() const;
  private:
  int _internal_created_timestamps_size() const;
  public:
  void clear_created_timestamps();
  private:
  uint64_t _internal_created_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_created_timestamps() const;
  void _internal_add_created_timestamps(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_created_timestamps();
  public:
  uint64_t created_timestamps(int index) const;
  void set_created_timestamps(int index, uint64_t value);
  void add_created_timestamps(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      created_timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_created_timestamps();

  // repeated uint64 created_utc_timestamps = 5;
  int created_utc_timestamps_size() const;
  private:
  int _internal_created_utc_timestamps_size() const;
  public:
  void clear_created_utc_timestamps();
  private:
  uint64_t _internal_created_utc_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_created_utc_timestamps() const;
  void _internal_add_created_utc_timestamps(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_created_utc_timestamps();
  public:
  uint64_t created_utc_timestamps(int index) const;
  void set_created_utc_timestamps(int index, uint64_t value);
  void add_created_utc_timestamps(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      created_utc_timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_created_utc_timestamps();

  // repeated int64 inMemory_percentages = 6;
  int inmemory_percentages_size() const;
  private:
  int _internal_inmemory_percentages_size() const;
  public:
  void clear_inmemory_percentages();
  private:
  int64_t _internal_inmemory_percentages(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_inmemory_percentages() const;
  void _internal_add_inmemory_percentages(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_inmemory_percentages();
  public:
  int64_t inmemory_percentages(int index) const;
  void set_inmemory_percentages(int index, int64_t value);
  void add_inmemory_percentages(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      inmemory_percentages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_inmemory_percentages();

  // repeated bool query_service_available = 7;
  int query_service_available_size() const;
  private:
  int _internal_query_service_available_size() const;
  public:
  void clear_query_service_available();
  private:
  bool _internal_query_service_available(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_query_service_available() const;
  void _internal_add_query_service_available(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_query_service_available();
  public:
  bool query_service_available(int index) const;
  void set_query_service_available(int index, bool value);
  void add_query_service_available(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      query_service_available() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_query_service_available();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ShowCollectionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> collection_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > collection_ids_;
    mutable std::atomic<int> _collection_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > created_timestamps_;
    mutable std::atomic<int> _created_timestamps_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > created_utc_timestamps_;
    mutable std::atomic<int> _created_utc_timestamps_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > inmemory_percentages_;
    mutable std::atomic<int> _inmemory_percentages_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > query_service_available_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CreatePartitionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CreatePartitionRequest) */ {
 public:
  inline CreatePartitionRequest() : CreatePartitionRequest(nullptr) {}
  ~CreatePartitionRequest() override;
  explicit PROTOBUF_CONSTEXPR CreatePartitionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreatePartitionRequest(const CreatePartitionRequest& from);
  CreatePartitionRequest(CreatePartitionRequest&& from) noexcept
    : CreatePartitionRequest() {
    *this = ::std::move(from);
  }

  inline CreatePartitionRequest& operator=(const CreatePartitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePartitionRequest& operator=(CreatePartitionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePartitionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePartitionRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePartitionRequest*>(
               &_CreatePartitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CreatePartitionRequest& a, CreatePartitionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePartitionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePartitionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePartitionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatePartitionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreatePartitionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreatePartitionRequest& from) {
    CreatePartitionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePartitionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CreatePartitionRequest";
  }
  protected:
  explicit CreatePartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CreatePartitionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DropPartitionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DropPartitionRequest) */ {
 public:
  inline DropPartitionRequest() : DropPartitionRequest(nullptr) {}
  ~DropPartitionRequest() override;
  explicit PROTOBUF_CONSTEXPR DropPartitionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropPartitionRequest(const DropPartitionRequest& from);
  DropPartitionRequest(DropPartitionRequest&& from) noexcept
    : DropPartitionRequest() {
    *this = ::std::move(from);
  }

  inline DropPartitionRequest& operator=(const DropPartitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropPartitionRequest& operator=(DropPartitionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropPartitionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropPartitionRequest* internal_default_instance() {
    return reinterpret_cast<const DropPartitionRequest*>(
               &_DropPartitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DropPartitionRequest& a, DropPartitionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropPartitionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropPartitionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropPartitionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropPartitionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropPartitionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropPartitionRequest& from) {
    DropPartitionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropPartitionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DropPartitionRequest";
  }
  protected:
  explicit DropPartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DropPartitionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class HasPartitionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.HasPartitionRequest) */ {
 public:
  inline HasPartitionRequest() : HasPartitionRequest(nullptr) {}
  ~HasPartitionRequest() override;
  explicit PROTOBUF_CONSTEXPR HasPartitionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HasPartitionRequest(const HasPartitionRequest& from);
  HasPartitionRequest(HasPartitionRequest&& from) noexcept
    : HasPartitionRequest() {
    *this = ::std::move(from);
  }

  inline HasPartitionRequest& operator=(const HasPartitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HasPartitionRequest& operator=(HasPartitionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HasPartitionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HasPartitionRequest* internal_default_instance() {
    return reinterpret_cast<const HasPartitionRequest*>(
               &_HasPartitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(HasPartitionRequest& a, HasPartitionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HasPartitionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HasPartitionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HasPartitionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HasPartitionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HasPartitionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HasPartitionRequest& from) {
    HasPartitionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HasPartitionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.HasPartitionRequest";
  }
  protected:
  explicit HasPartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.HasPartitionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class LoadPartitionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.LoadPartitionsRequest) */ {
 public:
  inline LoadPartitionsRequest() : LoadPartitionsRequest(nullptr) {}
  ~LoadPartitionsRequest() override;
  explicit PROTOBUF_CONSTEXPR LoadPartitionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadPartitionsRequest(const LoadPartitionsRequest& from);
  LoadPartitionsRequest(LoadPartitionsRequest&& from) noexcept
    : LoadPartitionsRequest() {
    *this = ::std::move(from);
  }

  inline LoadPartitionsRequest& operator=(const LoadPartitionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadPartitionsRequest& operator=(LoadPartitionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadPartitionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadPartitionsRequest* internal_default_instance() {
    return reinterpret_cast<const LoadPartitionsRequest*>(
               &_LoadPartitionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(LoadPartitionsRequest& a, LoadPartitionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadPartitionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadPartitionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadPartitionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadPartitionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadPartitionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadPartitionsRequest& from) {
    LoadPartitionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPartitionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.LoadPartitionsRequest";
  }
  protected:
  explicit LoadPartitionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 4,
    kResourceGroupsFieldNumber = 6,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kReplicaNumberFieldNumber = 5,
    kRefreshFieldNumber = 7,
  };
  // repeated string partition_names = 4;
  int partition_names_size() const;
  private:
  int _internal_partition_names_size() const;
  public:
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();
  private:
  const std::string& _internal_partition_names(int index) const;
  std::string* _internal_add_partition_names();
  public:

  // repeated string resource_groups = 6;
  int resource_groups_size() const;
  private:
  int _internal_resource_groups_size() const;
  public:
  void clear_resource_groups();
  const std::string& resource_groups(int index) const;
  std::string* mutable_resource_groups(int index);
  void set_resource_groups(int index, const std::string& value);
  void set_resource_groups(int index, std::string&& value);
  void set_resource_groups(int index, const char* value);
  void set_resource_groups(int index, const char* value, size_t size);
  std::string* add_resource_groups();
  void add_resource_groups(const std::string& value);
  void add_resource_groups(std::string&& value);
  void add_resource_groups(const char* value);
  void add_resource_groups(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& resource_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_resource_groups();
  private:
  const std::string& _internal_resource_groups(int index) const;
  std::string* _internal_add_resource_groups();
  public:

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int32 replica_number = 5;
  void clear_replica_number();
  int32_t replica_number() const;
  void set_replica_number(int32_t value);
  private:
  int32_t _internal_replica_number() const;
  void _internal_set_replica_number(int32_t value);
  public:

  // bool refresh = 7;
  void clear_refresh();
  bool refresh() const;
  void set_refresh(bool value);
  private:
  bool _internal_refresh() const;
  void _internal_set_refresh(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.LoadPartitionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> resource_groups_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::MsgBase* base_;
    int32_t replica_number_;
    bool refresh_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ReleasePartitionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ReleasePartitionsRequest) */ {
 public:
  inline ReleasePartitionsRequest() : ReleasePartitionsRequest(nullptr) {}
  ~ReleasePartitionsRequest() override;
  explicit PROTOBUF_CONSTEXPR ReleasePartitionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReleasePartitionsRequest(const ReleasePartitionsRequest& from);
  ReleasePartitionsRequest(ReleasePartitionsRequest&& from) noexcept
    : ReleasePartitionsRequest() {
    *this = ::std::move(from);
  }

  inline ReleasePartitionsRequest& operator=(const ReleasePartitionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleasePartitionsRequest& operator=(ReleasePartitionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleasePartitionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleasePartitionsRequest* internal_default_instance() {
    return reinterpret_cast<const ReleasePartitionsRequest*>(
               &_ReleasePartitionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ReleasePartitionsRequest& a, ReleasePartitionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleasePartitionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleasePartitionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleasePartitionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleasePartitionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReleasePartitionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReleasePartitionsRequest& from) {
    ReleasePartitionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleasePartitionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ReleasePartitionsRequest";
  }
  protected:
  explicit ReleasePartitionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 4,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated string partition_names = 4;
  int partition_names_size() const;
  private:
  int _internal_partition_names_size() const;
  public:
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();
  private:
  const std::string& _internal_partition_names(int index) const;
  std::string* _internal_add_partition_names();
  public:

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ReleasePartitionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetPartitionStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetPartitionStatisticsRequest) */ {
 public:
  inline GetPartitionStatisticsRequest() : GetPartitionStatisticsRequest(nullptr) {}
  ~GetPartitionStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPartitionStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPartitionStatisticsRequest(const GetPartitionStatisticsRequest& from);
  GetPartitionStatisticsRequest(GetPartitionStatisticsRequest&& from) noexcept
    : GetPartitionStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetPartitionStatisticsRequest& operator=(const GetPartitionStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPartitionStatisticsRequest& operator=(GetPartitionStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPartitionStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPartitionStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetPartitionStatisticsRequest*>(
               &_GetPartitionStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetPartitionStatisticsRequest& a, GetPartitionStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPartitionStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPartitionStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPartitionStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPartitionStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPartitionStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPartitionStatisticsRequest& from) {
    GetPartitionStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPartitionStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetPartitionStatisticsRequest";
  }
  protected:
  explicit GetPartitionStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetPartitionStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetPartitionStatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetPartitionStatisticsResponse) */ {
 public:
  inline GetPartitionStatisticsResponse() : GetPartitionStatisticsResponse(nullptr) {}
  ~GetPartitionStatisticsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPartitionStatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPartitionStatisticsResponse(const GetPartitionStatisticsResponse& from);
  GetPartitionStatisticsResponse(GetPartitionStatisticsResponse&& from) noexcept
    : GetPartitionStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline GetPartitionStatisticsResponse& operator=(const GetPartitionStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPartitionStatisticsResponse& operator=(GetPartitionStatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPartitionStatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPartitionStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const GetPartitionStatisticsResponse*>(
               &_GetPartitionStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetPartitionStatisticsResponse& a, GetPartitionStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPartitionStatisticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPartitionStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPartitionStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPartitionStatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPartitionStatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPartitionStatisticsResponse& from) {
    GetPartitionStatisticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPartitionStatisticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetPartitionStatisticsResponse";
  }
  protected:
  explicit GetPartitionStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::milvus::proto::common::KeyValuePair* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_stats();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_stats(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_stats();
  public:
  const ::milvus::proto::common::KeyValuePair& stats(int index) const;
  ::milvus::proto::common::KeyValuePair* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      stats() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetPartitionStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > stats_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ShowPartitionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ShowPartitionsRequest) */ {
 public:
  inline ShowPartitionsRequest() : ShowPartitionsRequest(nullptr) {}
  ~ShowPartitionsRequest() override;
  explicit PROTOBUF_CONSTEXPR ShowPartitionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowPartitionsRequest(const ShowPartitionsRequest& from);
  ShowPartitionsRequest(ShowPartitionsRequest&& from) noexcept
    : ShowPartitionsRequest() {
    *this = ::std::move(from);
  }

  inline ShowPartitionsRequest& operator=(const ShowPartitionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowPartitionsRequest& operator=(ShowPartitionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowPartitionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowPartitionsRequest* internal_default_instance() {
    return reinterpret_cast<const ShowPartitionsRequest*>(
               &_ShowPartitionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ShowPartitionsRequest& a, ShowPartitionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowPartitionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowPartitionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowPartitionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowPartitionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShowPartitionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShowPartitionsRequest& from) {
    ShowPartitionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowPartitionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ShowPartitionsRequest";
  }
  protected:
  explicit ShowPartitionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 5,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kCollectionIDFieldNumber = 4,
    kTypeFieldNumber = 6,
  };
  // repeated string partition_names = 5;
  int partition_names_size() const;
  private:
  int _internal_partition_names_size() const;
  public:
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();
  private:
  const std::string& _internal_partition_names(int index) const;
  std::string* _internal_add_partition_names();
  public:

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 collectionID = 4;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // .milvus.proto.milvus.ShowType type = 6;
  void clear_type();
  ::milvus::proto::milvus::ShowType type() const;
  void set_type(::milvus::proto::milvus::ShowType value);
  private:
  ::milvus::proto::milvus::ShowType _internal_type() const;
  void _internal_set_type(::milvus::proto::milvus::ShowType value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ShowPartitionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t collectionid_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ShowPartitionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ShowPartitionsResponse) */ {
 public:
  inline ShowPartitionsResponse() : ShowPartitionsResponse(nullptr) {}
  ~ShowPartitionsResponse() override;
  explicit PROTOBUF_CONSTEXPR ShowPartitionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowPartitionsResponse(const ShowPartitionsResponse& from);
  ShowPartitionsResponse(ShowPartitionsResponse&& from) noexcept
    : ShowPartitionsResponse() {
    *this = ::std::move(from);
  }

  inline ShowPartitionsResponse& operator=(const ShowPartitionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowPartitionsResponse& operator=(ShowPartitionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowPartitionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowPartitionsResponse* internal_default_instance() {
    return reinterpret_cast<const ShowPartitionsResponse*>(
               &_ShowPartitionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ShowPartitionsResponse& a, ShowPartitionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowPartitionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowPartitionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowPartitionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowPartitionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShowPartitionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShowPartitionsResponse& from) {
    ShowPartitionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowPartitionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ShowPartitionsResponse";
  }
  protected:
  explicit ShowPartitionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 2,
    kPartitionIDsFieldNumber = 3,
    kCreatedTimestampsFieldNumber = 4,
    kCreatedUtcTimestampsFieldNumber = 5,
    kInMemoryPercentagesFieldNumber = 6,
    kStatusFieldNumber = 1,
  };
  // repeated string partition_names = 2;
  int partition_names_size() const;
  private:
  int _internal_partition_names_size() const;
  public:
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();
  private:
  const std::string& _internal_partition_names(int index) const;
  std::string* _internal_add_partition_names();
  public:

  // repeated int64 partitionIDs = 3;
  int partitionids_size() const;
  private:
  int _internal_partitionids_size() const;
  public:
  void clear_partitionids();
  private:
  int64_t _internal_partitionids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_partitionids() const;
  void _internal_add_partitionids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_partitionids();
  public:
  int64_t partitionids(int index) const;
  void set_partitionids(int index, int64_t value);
  void add_partitionids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      partitionids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_partitionids();

  // repeated uint64 created_timestamps = 4;
  int created_timestamps_size() const;
  private:
  int _internal_created_timestamps_size() const;
  public:
  void clear_created_timestamps();
  private:
  uint64_t _internal_created_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_created_timestamps() const;
  void _internal_add_created_timestamps(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_created_timestamps();
  public:
  uint64_t created_timestamps(int index) const;
  void set_created_timestamps(int index, uint64_t value);
  void add_created_timestamps(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      created_timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_created_timestamps();

  // repeated uint64 created_utc_timestamps = 5;
  int created_utc_timestamps_size() const;
  private:
  int _internal_created_utc_timestamps_size() const;
  public:
  void clear_created_utc_timestamps();
  private:
  uint64_t _internal_created_utc_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_created_utc_timestamps() const;
  void _internal_add_created_utc_timestamps(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_created_utc_timestamps();
  public:
  uint64_t created_utc_timestamps(int index) const;
  void set_created_utc_timestamps(int index, uint64_t value);
  void add_created_utc_timestamps(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      created_utc_timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_created_utc_timestamps();

  // repeated int64 inMemory_percentages = 6;
  int inmemory_percentages_size() const;
  private:
  int _internal_inmemory_percentages_size() const;
  public:
  void clear_inmemory_percentages();
  private:
  int64_t _internal_inmemory_percentages(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_inmemory_percentages() const;
  void _internal_add_inmemory_percentages(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_inmemory_percentages();
  public:
  int64_t inmemory_percentages(int index) const;
  void set_inmemory_percentages(int index, int64_t value);
  void add_inmemory_percentages(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      inmemory_percentages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_inmemory_percentages();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ShowPartitionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > partitionids_;
    mutable std::atomic<int> _partitionids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > created_timestamps_;
    mutable std::atomic<int> _created_timestamps_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > created_utc_timestamps_;
    mutable std::atomic<int> _created_utc_timestamps_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > inmemory_percentages_;
    mutable std::atomic<int> _inmemory_percentages_cached_byte_size_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeSegmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeSegmentRequest) */ {
 public:
  inline DescribeSegmentRequest() : DescribeSegmentRequest(nullptr) {}
  ~DescribeSegmentRequest() override;
  explicit PROTOBUF_CONSTEXPR DescribeSegmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescribeSegmentRequest(const DescribeSegmentRequest& from);
  DescribeSegmentRequest(DescribeSegmentRequest&& from) noexcept
    : DescribeSegmentRequest() {
    *this = ::std::move(from);
  }

  inline DescribeSegmentRequest& operator=(const DescribeSegmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeSegmentRequest& operator=(DescribeSegmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescribeSegmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DescribeSegmentRequest* internal_default_instance() {
    return reinterpret_cast<const DescribeSegmentRequest*>(
               &_DescribeSegmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DescribeSegmentRequest& a, DescribeSegmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeSegmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeSegmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescribeSegmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescribeSegmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescribeSegmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescribeSegmentRequest& from) {
    DescribeSegmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeSegmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeSegmentRequest";
  }
  protected:
  explicit DescribeSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kSegmentIDFieldNumber = 3,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 collectionID = 2;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 segmentID = 3;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeSegmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    int64_t collectionid_;
    int64_t segmentid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeSegmentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeSegmentResponse) */ {
 public:
  inline DescribeSegmentResponse() : DescribeSegmentResponse(nullptr) {}
  ~DescribeSegmentResponse() override;
  explicit PROTOBUF_CONSTEXPR DescribeSegmentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescribeSegmentResponse(const DescribeSegmentResponse& from);
  DescribeSegmentResponse(DescribeSegmentResponse&& from) noexcept
    : DescribeSegmentResponse() {
    *this = ::std::move(from);
  }

  inline DescribeSegmentResponse& operator=(const DescribeSegmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeSegmentResponse& operator=(DescribeSegmentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescribeSegmentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DescribeSegmentResponse* internal_default_instance() {
    return reinterpret_cast<const DescribeSegmentResponse*>(
               &_DescribeSegmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DescribeSegmentResponse& a, DescribeSegmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeSegmentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeSegmentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescribeSegmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescribeSegmentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescribeSegmentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescribeSegmentResponse& from) {
    DescribeSegmentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeSegmentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeSegmentResponse";
  }
  protected:
  explicit DescribeSegmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kIndexIDFieldNumber = 2,
    kBuildIDFieldNumber = 3,
    kFieldIDFieldNumber = 5,
    kEnableIndexFieldNumber = 4,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // int64 indexID = 2;
  void clear_indexid();
  int64_t indexid() const;
  void set_indexid(int64_t value);
  private:
  int64_t _internal_indexid() const;
  void _internal_set_indexid(int64_t value);
  public:

  // int64 buildID = 3;
  void clear_buildid();
  int64_t buildid() const;
  void set_buildid(int64_t value);
  private:
  int64_t _internal_buildid() const;
  void _internal_set_buildid(int64_t value);
  public:

  // int64 fieldID = 5;
  void clear_fieldid();
  int64_t fieldid() const;
  void set_fieldid(int64_t value);
  private:
  int64_t _internal_fieldid() const;
  void _internal_set_fieldid(int64_t value);
  public:

  // bool enable_index = 4;
  void clear_enable_index();
  bool enable_index() const;
  void set_enable_index(bool value);
  private:
  bool _internal_enable_index() const;
  void _internal_set_enable_index(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeSegmentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    int64_t indexid_;
    int64_t buildid_;
    int64_t fieldid_;
    bool enable_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ShowSegmentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ShowSegmentsRequest) */ {
 public:
  inline ShowSegmentsRequest() : ShowSegmentsRequest(nullptr) {}
  ~ShowSegmentsRequest() override;
  explicit PROTOBUF_CONSTEXPR ShowSegmentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowSegmentsRequest(const ShowSegmentsRequest& from);
  ShowSegmentsRequest(ShowSegmentsRequest&& from) noexcept
    : ShowSegmentsRequest() {
    *this = ::std::move(from);
  }

  inline ShowSegmentsRequest& operator=(const ShowSegmentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowSegmentsRequest& operator=(ShowSegmentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowSegmentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowSegmentsRequest* internal_default_instance() {
    return reinterpret_cast<const ShowSegmentsRequest*>(
               &_ShowSegmentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ShowSegmentsRequest& a, ShowSegmentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowSegmentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowSegmentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowSegmentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowSegmentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShowSegmentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShowSegmentsRequest& from) {
    ShowSegmentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowSegmentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ShowSegmentsRequest";
  }
  protected:
  explicit ShowSegmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kPartitionIDFieldNumber = 3,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 collectionID = 2;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 partitionID = 3;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ShowSegmentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    int64_t collectionid_;
    int64_t partitionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ShowSegmentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ShowSegmentsResponse) */ {
 public:
  inline ShowSegmentsResponse() : ShowSegmentsResponse(nullptr) {}
  ~ShowSegmentsResponse() override;
  explicit PROTOBUF_CONSTEXPR ShowSegmentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowSegmentsResponse(const ShowSegmentsResponse& from);
  ShowSegmentsResponse(ShowSegmentsResponse&& from) noexcept
    : ShowSegmentsResponse() {
    *this = ::std::move(from);
  }

  inline ShowSegmentsResponse& operator=(const ShowSegmentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowSegmentsResponse& operator=(ShowSegmentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowSegmentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowSegmentsResponse* internal_default_instance() {
    return reinterpret_cast<const ShowSegmentsResponse*>(
               &_ShowSegmentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ShowSegmentsResponse& a, ShowSegmentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowSegmentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowSegmentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowSegmentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowSegmentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShowSegmentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShowSegmentsResponse& from) {
    ShowSegmentsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowSegmentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ShowSegmentsResponse";
  }
  protected:
  explicit ShowSegmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated int64 segmentIDs = 2;
  int segmentids_size() const;
  private:
  int _internal_segmentids_size() const;
  public:
  void clear_segmentids();
  private:
  int64_t _internal_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segmentids() const;
  void _internal_add_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segmentids();
  public:
  int64_t segmentids(int index) const;
  void set_segmentids(int index, int64_t value);
  void add_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segmentids();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ShowSegmentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segmentids_;
    mutable std::atomic<int> _segmentids_cached_byte_size_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CreateIndexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CreateIndexRequest) */ {
 public:
  inline CreateIndexRequest() : CreateIndexRequest(nullptr) {}
  ~CreateIndexRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateIndexRequest(const CreateIndexRequest& from);
  CreateIndexRequest(CreateIndexRequest&& from) noexcept
    : CreateIndexRequest() {
    *this = ::std::move(from);
  }

  inline CreateIndexRequest& operator=(const CreateIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIndexRequest& operator=(CreateIndexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateIndexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateIndexRequest* internal_default_instance() {
    return reinterpret_cast<const CreateIndexRequest*>(
               &_CreateIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CreateIndexRequest& a, CreateIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateIndexRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateIndexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateIndexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateIndexRequest& from) {
    CreateIndexRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateIndexRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CreateIndexRequest";
  }
  protected:
  explicit CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraParamsFieldNumber = 5,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kFieldNameFieldNumber = 4,
    kIndexNameFieldNumber = 6,
    kBaseFieldNumber = 1,
  };
  // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
  int extra_params_size() const;
  private:
  int _internal_extra_params_size() const;
  public:
  void clear_extra_params();
  ::milvus::proto::common::KeyValuePair* mutable_extra_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_extra_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_extra_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_extra_params();
  public:
  const ::milvus::proto::common::KeyValuePair& extra_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_extra_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      extra_params() const;

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string field_name = 4;
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // string index_name = 6;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CreateIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > extra_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeIndexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeIndexRequest) */ {
 public:
  inline DescribeIndexRequest() : DescribeIndexRequest(nullptr) {}
  ~DescribeIndexRequest() override;
  explicit PROTOBUF_CONSTEXPR DescribeIndexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescribeIndexRequest(const DescribeIndexRequest& from);
  DescribeIndexRequest(DescribeIndexRequest&& from) noexcept
    : DescribeIndexRequest() {
    *this = ::std::move(from);
  }

  inline DescribeIndexRequest& operator=(const DescribeIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeIndexRequest& operator=(DescribeIndexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescribeIndexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DescribeIndexRequest* internal_default_instance() {
    return reinterpret_cast<const DescribeIndexRequest*>(
               &_DescribeIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(DescribeIndexRequest& a, DescribeIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeIndexRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeIndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescribeIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescribeIndexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescribeIndexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescribeIndexRequest& from) {
    DescribeIndexRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeIndexRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeIndexRequest";
  }
  protected:
  explicit DescribeIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kFieldNameFieldNumber = 4,
    kIndexNameFieldNumber = 5,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string field_name = 4;
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // string index_name = 5;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class IndexDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.IndexDescription) */ {
 public:
  inline IndexDescription() : IndexDescription(nullptr) {}
  ~IndexDescription() override;
  explicit PROTOBUF_CONSTEXPR IndexDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexDescription(const IndexDescription& from);
  IndexDescription(IndexDescription&& from) noexcept
    : IndexDescription() {
    *this = ::std::move(from);
  }

  inline IndexDescription& operator=(const IndexDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexDescription& operator=(IndexDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexDescription* internal_default_instance() {
    return reinterpret_cast<const IndexDescription*>(
               &_IndexDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(IndexDescription& a, IndexDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexDescription& from) {
    IndexDescription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.IndexDescription";
  }
  protected:
  explicit IndexDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kIndexNameFieldNumber = 1,
    kFieldNameFieldNumber = 4,
    kIndexStateFailReasonFieldNumber = 8,
    kIndexIDFieldNumber = 2,
    kIndexedRowsFieldNumber = 5,
    kTotalRowsFieldNumber = 6,
    kPendingIndexRowsFieldNumber = 9,
    kStateFieldNumber = 7,
  };
  // repeated .milvus.proto.common.KeyValuePair params = 3;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::milvus::proto::common::KeyValuePair* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_params();
  public:
  const ::milvus::proto::common::KeyValuePair& params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      params() const;

  // string index_name = 1;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // string field_name = 4;
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // string index_state_fail_reason = 8;
  void clear_index_state_fail_reason();
  const std::string& index_state_fail_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_state_fail_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_state_fail_reason();
  PROTOBUF_NODISCARD std::string* release_index_state_fail_reason();
  void set_allocated_index_state_fail_reason(std::string* index_state_fail_reason);
  private:
  const std::string& _internal_index_state_fail_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_state_fail_reason(const std::string& value);
  std::string* _internal_mutable_index_state_fail_reason();
  public:

  // int64 indexID = 2;
  void clear_indexid();
  int64_t indexid() const;
  void set_indexid(int64_t value);
  private:
  int64_t _internal_indexid() const;
  void _internal_set_indexid(int64_t value);
  public:

  // int64 indexed_rows = 5;
  void clear_indexed_rows();
  int64_t indexed_rows() const;
  void set_indexed_rows(int64_t value);
  private:
  int64_t _internal_indexed_rows() const;
  void _internal_set_indexed_rows(int64_t value);
  public:

  // int64 total_rows = 6;
  void clear_total_rows();
  int64_t total_rows() const;
  void set_total_rows(int64_t value);
  private:
  int64_t _internal_total_rows() const;
  void _internal_set_total_rows(int64_t value);
  public:

  // int64 pending_index_rows = 9;
  void clear_pending_index_rows();
  int64_t pending_index_rows() const;
  void set_pending_index_rows(int64_t value);
  private:
  int64_t _internal_pending_index_rows() const;
  void _internal_set_pending_index_rows(int64_t value);
  public:

  // .milvus.proto.common.IndexState state = 7;
  void clear_state();
  ::milvus::proto::common::IndexState state() const;
  void set_state(::milvus::proto::common::IndexState value);
  private:
  ::milvus::proto::common::IndexState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::IndexState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.IndexDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_state_fail_reason_;
    int64_t indexid_;
    int64_t indexed_rows_;
    int64_t total_rows_;
    int64_t pending_index_rows_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeIndexResponse) */ {
 public:
  inline DescribeIndexResponse() : DescribeIndexResponse(nullptr) {}
  ~DescribeIndexResponse() override;
  explicit PROTOBUF_CONSTEXPR DescribeIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescribeIndexResponse(const DescribeIndexResponse& from);
  DescribeIndexResponse(DescribeIndexResponse&& from) noexcept
    : DescribeIndexResponse() {
    *this = ::std::move(from);
  }

  inline DescribeIndexResponse& operator=(const DescribeIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeIndexResponse& operator=(DescribeIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescribeIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DescribeIndexResponse* internal_default_instance() {
    return reinterpret_cast<const DescribeIndexResponse*>(
               &_DescribeIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(DescribeIndexResponse& a, DescribeIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeIndexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescribeIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescribeIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescribeIndexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescribeIndexResponse& from) {
    DescribeIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeIndexResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeIndexResponse";
  }
  protected:
  explicit DescribeIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexDescriptionsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
  int index_descriptions_size() const;
  private:
  int _internal_index_descriptions_size() const;
  public:
  void clear_index_descriptions();
  ::milvus::proto::milvus::IndexDescription* mutable_index_descriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription >*
      mutable_index_descriptions();
  private:
  const ::milvus::proto::milvus::IndexDescription& _internal_index_descriptions(int index) const;
  ::milvus::proto::milvus::IndexDescription* _internal_add_index_descriptions();
  public:
  const ::milvus::proto::milvus::IndexDescription& index_descriptions(int index) const;
  ::milvus::proto::milvus::IndexDescription* add_index_descriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription >&
      index_descriptions() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription > index_descriptions_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetIndexBuildProgressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetIndexBuildProgressRequest) */ {
 public:
  inline GetIndexBuildProgressRequest() : GetIndexBuildProgressRequest(nullptr) {}
  ~GetIndexBuildProgressRequest() override;
  explicit PROTOBUF_CONSTEXPR GetIndexBuildProgressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIndexBuildProgressRequest(const GetIndexBuildProgressRequest& from);
  GetIndexBuildProgressRequest(GetIndexBuildProgressRequest&& from) noexcept
    : GetIndexBuildProgressRequest() {
    *this = ::std::move(from);
  }

  inline GetIndexBuildProgressRequest& operator=(const GetIndexBuildProgressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexBuildProgressRequest& operator=(GetIndexBuildProgressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIndexBuildProgressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIndexBuildProgressRequest* internal_default_instance() {
    return reinterpret_cast<const GetIndexBuildProgressRequest*>(
               &_GetIndexBuildProgressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetIndexBuildProgressRequest& a, GetIndexBuildProgressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexBuildProgressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexBuildProgressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIndexBuildProgressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIndexBuildProgressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIndexBuildProgressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIndexBuildProgressRequest& from) {
    GetIndexBuildProgressRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexBuildProgressRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetIndexBuildProgressRequest";
  }
  protected:
  explicit GetIndexBuildProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kFieldNameFieldNumber = 4,
    kIndexNameFieldNumber = 5,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string field_name = 4;
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // string index_name = 5;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetIndexBuildProgressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetIndexBuildProgressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetIndexBuildProgressResponse) */ {
 public:
  inline GetIndexBuildProgressResponse() : GetIndexBuildProgressResponse(nullptr) {}
  ~GetIndexBuildProgressResponse() override;
  explicit PROTOBUF_CONSTEXPR GetIndexBuildProgressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIndexBuildProgressResponse(const GetIndexBuildProgressResponse& from);
  GetIndexBuildProgressResponse(GetIndexBuildProgressResponse&& from) noexcept
    : GetIndexBuildProgressResponse() {
    *this = ::std::move(from);
  }

  inline GetIndexBuildProgressResponse& operator=(const GetIndexBuildProgressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexBuildProgressResponse& operator=(GetIndexBuildProgressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIndexBuildProgressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIndexBuildProgressResponse* internal_default_instance() {
    return reinterpret_cast<const GetIndexBuildProgressResponse*>(
               &_GetIndexBuildProgressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GetIndexBuildProgressResponse& a, GetIndexBuildProgressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexBuildProgressResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexBuildProgressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIndexBuildProgressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIndexBuildProgressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIndexBuildProgressResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIndexBuildProgressResponse& from) {
    GetIndexBuildProgressResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexBuildProgressResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetIndexBuildProgressResponse";
  }
  protected:
  explicit GetIndexBuildProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kIndexedRowsFieldNumber = 2,
    kTotalRowsFieldNumber = 3,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // int64 indexed_rows = 2;
  void clear_indexed_rows();
  int64_t indexed_rows() const;
  void set_indexed_rows(int64_t value);
  private:
  int64_t _internal_indexed_rows() const;
  void _internal_set_indexed_rows(int64_t value);
  public:

  // int64 total_rows = 3;
  void clear_total_rows();
  int64_t total_rows() const;
  void set_total_rows(int64_t value);
  private:
  int64_t _internal_total_rows() const;
  void _internal_set_total_rows(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetIndexBuildProgressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    int64_t indexed_rows_;
    int64_t total_rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetIndexStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetIndexStateRequest) */ {
 public:
  inline GetIndexStateRequest() : GetIndexStateRequest(nullptr) {}
  ~GetIndexStateRequest() override;
  explicit PROTOBUF_CONSTEXPR GetIndexStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIndexStateRequest(const GetIndexStateRequest& from);
  GetIndexStateRequest(GetIndexStateRequest&& from) noexcept
    : GetIndexStateRequest() {
    *this = ::std::move(from);
  }

  inline GetIndexStateRequest& operator=(const GetIndexStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexStateRequest& operator=(GetIndexStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIndexStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIndexStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetIndexStateRequest*>(
               &_GetIndexStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GetIndexStateRequest& a, GetIndexStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIndexStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIndexStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIndexStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIndexStateRequest& from) {
    GetIndexStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetIndexStateRequest";
  }
  protected:
  explicit GetIndexStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kFieldNameFieldNumber = 4,
    kIndexNameFieldNumber = 5,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string field_name = 4;
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // string index_name = 5;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetIndexStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetIndexStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetIndexStateResponse) */ {
 public:
  inline GetIndexStateResponse() : GetIndexStateResponse(nullptr) {}
  ~GetIndexStateResponse() override;
  explicit PROTOBUF_CONSTEXPR GetIndexStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIndexStateResponse(const GetIndexStateResponse& from);
  GetIndexStateResponse(GetIndexStateResponse&& from) noexcept
    : GetIndexStateResponse() {
    *this = ::std::move(from);
  }

  inline GetIndexStateResponse& operator=(const GetIndexStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexStateResponse& operator=(GetIndexStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIndexStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIndexStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetIndexStateResponse*>(
               &_GetIndexStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GetIndexStateResponse& a, GetIndexStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIndexStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIndexStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIndexStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIndexStateResponse& from) {
    GetIndexStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetIndexStateResponse";
  }
  protected:
  explicit GetIndexStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailReasonFieldNumber = 3,
    kStatusFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string fail_reason = 3;
  void clear_fail_reason();
  const std::string& fail_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fail_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fail_reason();
  PROTOBUF_NODISCARD std::string* release_fail_reason();
  void set_allocated_fail_reason(std::string* fail_reason);
  private:
  const std::string& _internal_fail_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fail_reason(const std::string& value);
  std::string* _internal_mutable_fail_reason();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // .milvus.proto.common.IndexState state = 2;
  void clear_state();
  ::milvus::proto::common::IndexState state() const;
  void set_state(::milvus::proto::common::IndexState value);
  private:
  ::milvus::proto::common::IndexState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::IndexState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetIndexStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fail_reason_;
    ::milvus::proto::common::Status* status_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DropIndexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DropIndexRequest) */ {
 public:
  inline DropIndexRequest() : DropIndexRequest(nullptr) {}
  ~DropIndexRequest() override;
  explicit PROTOBUF_CONSTEXPR DropIndexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropIndexRequest(const DropIndexRequest& from);
  DropIndexRequest(DropIndexRequest&& from) noexcept
    : DropIndexRequest() {
    *this = ::std::move(from);
  }

  inline DropIndexRequest& operator=(const DropIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropIndexRequest& operator=(DropIndexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropIndexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropIndexRequest* internal_default_instance() {
    return reinterpret_cast<const DropIndexRequest*>(
               &_DropIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(DropIndexRequest& a, DropIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropIndexRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropIndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropIndexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropIndexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropIndexRequest& from) {
    DropIndexRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropIndexRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DropIndexRequest";
  }
  protected:
  explicit DropIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kFieldNameFieldNumber = 4,
    kIndexNameFieldNumber = 5,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string field_name = 4;
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // string index_name = 5;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DropIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class InsertRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.InsertRequest) */ {
 public:
  inline InsertRequest() : InsertRequest(nullptr) {}
  ~InsertRequest() override;
  explicit PROTOBUF_CONSTEXPR InsertRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertRequest(const InsertRequest& from);
  InsertRequest(InsertRequest&& from) noexcept
    : InsertRequest() {
    *this = ::std::move(from);
  }

  inline InsertRequest& operator=(const InsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertRequest& operator=(InsertRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertRequest* internal_default_instance() {
    return reinterpret_cast<const InsertRequest*>(
               &_InsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(InsertRequest& a, InsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InsertRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InsertRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InsertRequest& from) {
    InsertRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.InsertRequest";
  }
  protected:
  explicit InsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsDataFieldNumber = 5,
    kHashKeysFieldNumber = 6,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
    kNumRowsFieldNumber = 7,
  };
  // repeated .milvus.proto.schema.FieldData fields_data = 5;
  int fields_data_size() const;
  private:
  int _internal_fields_data_size() const;
  public:
  void clear_fields_data();
  ::milvus::proto::schema::FieldData* mutable_fields_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
      mutable_fields_data();
  private:
  const ::milvus::proto::schema::FieldData& _internal_fields_data(int index) const;
  ::milvus::proto::schema::FieldData* _internal_add_fields_data();
  public:
  const ::milvus::proto::schema::FieldData& fields_data(int index) const;
  ::milvus::proto::schema::FieldData* add_fields_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
      fields_data() const;

  // repeated uint32 hash_keys = 6;
  int hash_keys_size() const;
  private:
  int _internal_hash_keys_size() const;
  public:
  void clear_hash_keys();
  private:
  uint32_t _internal_hash_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_hash_keys() const;
  void _internal_add_hash_keys(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_hash_keys();
  public:
  uint32_t hash_keys(int index) const;
  void set_hash_keys(int index, uint32_t value);
  void add_hash_keys(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      hash_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_hash_keys();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // uint32 num_rows = 7;
  void clear_num_rows();
  uint32_t num_rows() const;
  void set_num_rows(uint32_t value);
  private:
  uint32_t _internal_num_rows() const;
  void _internal_set_num_rows(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.InsertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData > fields_data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > hash_keys_;
    mutable std::atomic<int> _hash_keys_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
    ::milvus::proto::common::MsgBase* base_;
    uint32_t num_rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class UpsertRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.UpsertRequest) */ {
 public:
  inline UpsertRequest() : UpsertRequest(nullptr) {}
  ~UpsertRequest() override;
  explicit PROTOBUF_CONSTEXPR UpsertRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpsertRequest(const UpsertRequest& from);
  UpsertRequest(UpsertRequest&& from) noexcept
    : UpsertRequest() {
    *this = ::std::move(from);
  }

  inline UpsertRequest& operator=(const UpsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpsertRequest& operator=(UpsertRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpsertRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpsertRequest* internal_default_instance() {
    return reinterpret_cast<const UpsertRequest*>(
               &_UpsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(UpsertRequest& a, UpsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpsertRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpsertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpsertRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpsertRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpsertRequest& from) {
    UpsertRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpsertRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.UpsertRequest";
  }
  protected:
  explicit UpsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsDataFieldNumber = 5,
    kHashKeysFieldNumber = 6,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
    kNumRowsFieldNumber = 7,
  };
  // repeated .milvus.proto.schema.FieldData fields_data = 5;
  int fields_data_size() const;
  private:
  int _internal_fields_data_size() const;
  public:
  void clear_fields_data();
  ::milvus::proto::schema::FieldData* mutable_fields_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
      mutable_fields_data();
  private:
  const ::milvus::proto::schema::FieldData& _internal_fields_data(int index) const;
  ::milvus::proto::schema::FieldData* _internal_add_fields_data();
  public:
  const ::milvus::proto::schema::FieldData& fields_data(int index) const;
  ::milvus::proto::schema::FieldData* add_fields_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
      fields_data() const;

  // repeated uint32 hash_keys = 6;
  int hash_keys_size() const;
  private:
  int _internal_hash_keys_size() const;
  public:
  void clear_hash_keys();
  private:
  uint32_t _internal_hash_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_hash_keys() const;
  void _internal_add_hash_keys(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_hash_keys();
  public:
  uint32_t hash_keys(int index) const;
  void set_hash_keys(int index, uint32_t value);
  void add_hash_keys(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      hash_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_hash_keys();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // uint32 num_rows = 7;
  void clear_num_rows();
  uint32_t num_rows() const;
  void set_num_rows(uint32_t value);
  private:
  uint32_t _internal_num_rows() const;
  void _internal_set_num_rows(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.UpsertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData > fields_data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > hash_keys_;
    mutable std::atomic<int> _hash_keys_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
    ::milvus::proto::common::MsgBase* base_;
    uint32_t num_rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class MutationResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.MutationResult) */ {
 public:
  inline MutationResult() : MutationResult(nullptr) {}
  ~MutationResult() override;
  explicit PROTOBUF_CONSTEXPR MutationResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MutationResult(const MutationResult& from);
  MutationResult(MutationResult&& from) noexcept
    : MutationResult() {
    *this = ::std::move(from);
  }

  inline MutationResult& operator=(const MutationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutationResult& operator=(MutationResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MutationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutationResult* internal_default_instance() {
    return reinterpret_cast<const MutationResult*>(
               &_MutationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(MutationResult& a, MutationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MutationResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutationResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MutationResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MutationResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MutationResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MutationResult& from) {
    MutationResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutationResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.MutationResult";
  }
  protected:
  explicit MutationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccIndexFieldNumber = 3,
    kErrIndexFieldNumber = 4,
    kStatusFieldNumber = 1,
    kIDsFieldNumber = 2,
    kInsertCntFieldNumber = 6,
    kDeleteCntFieldNumber = 7,
    kUpsertCntFieldNumber = 8,
    kTimestampFieldNumber = 9,
    kAcknowledgedFieldNumber = 5,
  };
  // repeated uint32 succ_index = 3;
  int succ_index_size() const;
  private:
  int _internal_succ_index_size() const;
  public:
  void clear_succ_index();
  private:
  uint32_t _internal_succ_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_succ_index() const;
  void _internal_add_succ_index(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_succ_index();
  public:
  uint32_t succ_index(int index) const;
  void set_succ_index(int index, uint32_t value);
  void add_succ_index(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      succ_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_succ_index();

  // repeated uint32 err_index = 4;
  int err_index_size() const;
  private:
  int _internal_err_index_size() const;
  public:
  void clear_err_index();
  private:
  uint32_t _internal_err_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_err_index() const;
  void _internal_add_err_index(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_err_index();
  public:
  uint32_t err_index(int index) const;
  void set_err_index(int index, uint32_t value);
  void add_err_index(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      err_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_err_index();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // .milvus.proto.schema.IDs IDs = 2;
  bool has_ids() const;
  private:
  bool _internal_has_ids() const;
  public:
  void clear_ids();
  const ::milvus::proto::schema::IDs& ids() const;
  PROTOBUF_NODISCARD ::milvus::proto::schema::IDs* release_ids();
  ::milvus::proto::schema::IDs* mutable_ids();
  void set_allocated_ids(::milvus::proto::schema::IDs* ids);
  private:
  const ::milvus::proto::schema::IDs& _internal_ids() const;
  ::milvus::proto::schema::IDs* _internal_mutable_ids();
  public:
  void unsafe_arena_set_allocated_ids(
      ::milvus::proto::schema::IDs* ids);
  ::milvus::proto::schema::IDs* unsafe_arena_release_ids();

  // int64 insert_cnt = 6;
  void clear_insert_cnt();
  int64_t insert_cnt() const;
  void set_insert_cnt(int64_t value);
  private:
  int64_t _internal_insert_cnt() const;
  void _internal_set_insert_cnt(int64_t value);
  public:

  // int64 delete_cnt = 7;
  void clear_delete_cnt();
  int64_t delete_cnt() const;
  void set_delete_cnt(int64_t value);
  private:
  int64_t _internal_delete_cnt() const;
  void _internal_set_delete_cnt(int64_t value);
  public:

  // int64 upsert_cnt = 8;
  void clear_upsert_cnt();
  int64_t upsert_cnt() const;
  void set_upsert_cnt(int64_t value);
  private:
  int64_t _internal_upsert_cnt() const;
  void _internal_set_upsert_cnt(int64_t value);
  public:

  // uint64 timestamp = 9;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // bool acknowledged = 5;
  void clear_acknowledged();
  bool acknowledged() const;
  void set_acknowledged(bool value);
  private:
  bool _internal_acknowledged() const;
  void _internal_set_acknowledged(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.MutationResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > succ_index_;
    mutable std::atomic<int> _succ_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > err_index_;
    mutable std::atomic<int> _err_index_cached_byte_size_;
    ::milvus::proto::common::Status* status_;
    ::milvus::proto::schema::IDs* ids_;
    int64_t insert_cnt_;
    int64_t delete_cnt_;
    int64_t upsert_cnt_;
    uint64_t timestamp_;
    bool acknowledged_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DeleteRequest) */ {
 public:
  inline DeleteRequest() : DeleteRequest(nullptr) {}
  ~DeleteRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRequest(const DeleteRequest& from);
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteRequest& from) {
    DeleteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DeleteRequest";
  }
  protected:
  explicit DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashKeysFieldNumber = 6,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kExprFieldNumber = 5,
    kBaseFieldNumber = 1,
  };
  // repeated uint32 hash_keys = 6;
  int hash_keys_size() const;
  private:
  int _internal_hash_keys_size() const;
  public:
  void clear_hash_keys();
  private:
  uint32_t _internal_hash_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_hash_keys() const;
  void _internal_add_hash_keys(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_hash_keys();
  public:
  uint32_t hash_keys(int index) const;
  void set_hash_keys(int index, uint32_t value);
  void add_hash_keys(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      hash_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_hash_keys();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // string expr = 5;
  void clear_expr();
  const std::string& expr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expr();
  PROTOBUF_NODISCARD std::string* release_expr();
  void set_allocated_expr(std::string* expr);
  private:
  const std::string& _internal_expr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expr(const std::string& value);
  std::string* _internal_mutable_expr();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > hash_keys_;
    mutable std::atomic<int> _hash_keys_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchRequest& from) {
    SearchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 4,
    kOutputFieldsFieldNumber = 8,
    kSearchParamsFieldNumber = 9,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kDslFieldNumber = 5,
    kPlaceholderGroupFieldNumber = 6,
    kBaseFieldNumber = 1,
    kTravelTimestampFieldNumber = 10,
    kDslTypeFieldNumber = 7,
    kConsistencyLevelFieldNumber = 14,
    kGuaranteeTimestampFieldNumber = 11,
    kNqFieldNumber = 12,
    kNotReturnAllMetaFieldNumber = 13,
    kUseDefaultConsistencyFieldNumber = 15,
  };
  // repeated string partition_names = 4;
  int partition_names_size() const;
  private:
  int _internal_partition_names_size() const;
  public:
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();
  private:
  const std::string& _internal_partition_names(int index) const;
  std::string* _internal_add_partition_names();
  public:

  // repeated string output_fields = 8;
  int output_fields_size() const;
  private:
  int _internal_output_fields_size() const;
  public:
  void clear_output_fields();
  const std::string& output_fields(int index) const;
  std::string* mutable_output_fields(int index);
  void set_output_fields(int index, const std::string& value);
  void set_output_fields(int index, std::string&& value);
  void set_output_fields(int index, const char* value);
  void set_output_fields(int index, const char* value, size_t size);
  std::string* add_output_fields();
  void add_output_fields(const std::string& value);
  void add_output_fields(std::string&& value);
  void add_output_fields(const char* value);
  void add_output_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_fields();
  private:
  const std::string& _internal_output_fields(int index) const;
  std::string* _internal_add_output_fields();
  public:

  // repeated .milvus.proto.common.KeyValuePair search_params = 9;
  int search_params_size() const;
  private:
  int _internal_search_params_size() const;
  public:
  void clear_search_params();
  ::milvus::proto::common::KeyValuePair* mutable_search_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_search_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_search_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_search_params();
  public:
  const ::milvus::proto::common::KeyValuePair& search_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_search_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      search_params() const;

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string dsl = 5;
  void clear_dsl();
  const std::string& dsl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dsl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dsl();
  PROTOBUF_NODISCARD std::string* release_dsl();
  void set_allocated_dsl(std::string* dsl);
  private:
  const std::string& _internal_dsl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dsl(const std::string& value);
  std::string* _internal_mutable_dsl();
  public:

  // bytes placeholder_group = 6;
  void clear_placeholder_group();
  const std::string& placeholder_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_placeholder_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_placeholder_group();
  PROTOBUF_NODISCARD std::string* release_placeholder_group();
  void set_allocated_placeholder_group(std::string* placeholder_group);
  private:
  const std::string& _internal_placeholder_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_placeholder_group(const std::string& value);
  std::string* _internal_mutable_placeholder_group();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // uint64 travel_timestamp = 10;
  void clear_travel_timestamp();
  uint64_t travel_timestamp() const;
  void set_travel_timestamp(uint64_t value);
  private:
  uint64_t _internal_travel_timestamp() const;
  void _internal_set_travel_timestamp(uint64_t value);
  public:

  // .milvus.proto.common.DslType dsl_type = 7;
  void clear_dsl_type();
  ::milvus::proto::common::DslType dsl_type() const;
  void set_dsl_type(::milvus::proto::common::DslType value);
  private:
  ::milvus::proto::common::DslType _internal_dsl_type() const;
  void _internal_set_dsl_type(::milvus::proto::common::DslType value);
  public:

  // .milvus.proto.common.ConsistencyLevel consistency_level = 14;
  void clear_consistency_level();
  ::milvus::proto::common::ConsistencyLevel consistency_level() const;
  void set_consistency_level(::milvus::proto::common::ConsistencyLevel value);
  private:
  ::milvus::proto::common::ConsistencyLevel _internal_consistency_level() const;
  void _internal_set_consistency_level(::milvus::proto::common::ConsistencyLevel value);
  public:

  // uint64 guarantee_timestamp = 11;
  void clear_guarantee_timestamp();
  uint64_t guarantee_timestamp() const;
  void set_guarantee_timestamp(uint64_t value);
  private:
  uint64_t _internal_guarantee_timestamp() const;
  void _internal_set_guarantee_timestamp(uint64_t value);
  public:

  // int64 nq = 12;
  void clear_nq();
  int64_t nq() const;
  void set_nq(int64_t value);
  private:
  int64_t _internal_nq() const;
  void _internal_set_nq(int64_t value);
  public:

  // bool not_return_all_meta = 13;
  void clear_not_return_all_meta();
  bool not_return_all_meta() const;
  void set_not_return_all_meta(bool value);
  private:
  bool _internal_not_return_all_meta() const;
  void _internal_set_not_return_all_meta(bool value);
  public:

  // bool use_default_consistency = 15;
  void clear_use_default_consistency();
  bool use_default_consistency() const;
  void set_use_default_consistency(bool value);
  private:
  bool _internal_use_default_consistency() const;
  void _internal_set_use_default_consistency(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_fields_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > search_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dsl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placeholder_group_;
    ::milvus::proto::common::MsgBase* base_;
    uint64_t travel_timestamp_;
    int dsl_type_;
    int consistency_level_;
    uint64_t guarantee_timestamp_;
    int64_t nq_;
    bool not_return_all_meta_;
    bool use_default_consistency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class Hits final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.Hits) */ {
 public:
  inline Hits() : Hits(nullptr) {}
  ~Hits() override;
  explicit PROTOBUF_CONSTEXPR Hits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Hits(const Hits& from);
  Hits(Hits&& from) noexcept
    : Hits() {
    *this = ::std::move(from);
  }

  inline Hits& operator=(const Hits& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hits& operator=(Hits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hits& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hits* internal_default_instance() {
    return reinterpret_cast<const Hits*>(
               &_Hits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(Hits& a, Hits& b) {
    a.Swap(&b);
  }
  inline void Swap(Hits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Hits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Hits>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Hits& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Hits& from) {
    Hits::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hits* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.Hits";
  }
  protected:
  explicit Hits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDsFieldNumber = 1,
    kRowDataFieldNumber = 2,
    kScoresFieldNumber = 3,
  };
  // repeated int64 IDs = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  int64_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_ids() const;
  void _internal_add_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_ids();
  public:
  int64_t ids(int index) const;
  void set_ids(int index, int64_t value);
  void add_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_ids();

  // repeated bytes row_data = 2;
  int row_data_size() const;
  private:
  int _internal_row_data_size() const;
  public:
  void clear_row_data();
  const std::string& row_data(int index) const;
  std::string* mutable_row_data(int index);
  void set_row_data(int index, const std::string& value);
  void set_row_data(int index, std::string&& value);
  void set_row_data(int index, const char* value);
  void set_row_data(int index, const void* value, size_t size);
  std::string* add_row_data();
  void add_row_data(const std::string& value);
  void add_row_data(std::string&& value);
  void add_row_data(const char* value);
  void add_row_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& row_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_row_data();
  private:
  const std::string& _internal_row_data(int index) const;
  std::string* _internal_add_row_data();
  public:

  // repeated float scores = 3;
  int scores_size() const;
  private:
  int _internal_scores_size() const;
  public:
  void clear_scores();
  private:
  float _internal_scores(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_scores() const;
  void _internal_add_scores(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_scores();
  public:
  float scores(int index) const;
  void set_scores(int index, float value);
  void add_scores(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      scores() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_scores();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.Hits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > ids_;
    mutable std::atomic<int> _ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> row_data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > scores_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class SearchResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.SearchResults) */ {
 public:
  inline SearchResults() : SearchResults(nullptr) {}
  ~SearchResults() override;
  explicit PROTOBUF_CONSTEXPR SearchResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResults(const SearchResults& from);
  SearchResults(SearchResults&& from) noexcept
    : SearchResults() {
    *this = ::std::move(from);
  }

  inline SearchResults& operator=(const SearchResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResults& operator=(SearchResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResults* internal_default_instance() {
    return reinterpret_cast<const SearchResults*>(
               &_SearchResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(SearchResults& a, SearchResults& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchResults& from) {
    SearchResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.SearchResults";
  }
  protected:
  explicit SearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNameFieldNumber = 3,
    kStatusFieldNumber = 1,
    kResultsFieldNumber = 2,
  };
  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // .milvus.proto.schema.SearchResultData results = 2;
  bool has_results() const;
  private:
  bool _internal_has_results() const;
  public:
  void clear_results();
  const ::milvus::proto::schema::SearchResultData& results() const;
  PROTOBUF_NODISCARD ::milvus::proto::schema::SearchResultData* release_results();
  ::milvus::proto::schema::SearchResultData* mutable_results();
  void set_allocated_results(::milvus::proto::schema::SearchResultData* results);
  private:
  const ::milvus::proto::schema::SearchResultData& _internal_results() const;
  ::milvus::proto::schema::SearchResultData* _internal_mutable_results();
  public:
  void unsafe_arena_set_allocated_results(
      ::milvus::proto::schema::SearchResultData* results);
  ::milvus::proto::schema::SearchResultData* unsafe_arena_release_results();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.SearchResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::Status* status_;
    ::milvus::proto::schema::SearchResultData* results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class FlushRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.FlushRequest) */ {
 public:
  inline FlushRequest() : FlushRequest(nullptr) {}
  ~FlushRequest() override;
  explicit PROTOBUF_CONSTEXPR FlushRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlushRequest(const FlushRequest& from);
  FlushRequest(FlushRequest&& from) noexcept
    : FlushRequest() {
    *this = ::std::move(from);
  }

  inline FlushRequest& operator=(const FlushRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushRequest& operator=(FlushRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushRequest* internal_default_instance() {
    return reinterpret_cast<const FlushRequest*>(
               &_FlushRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(FlushRequest& a, FlushRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlushRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlushRequest& from) {
    FlushRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.FlushRequest";
  }
  protected:
  explicit FlushRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNamesFieldNumber = 3,
    kDbNameFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated string collection_names = 3;
  int collection_names_size() const;
  private:
  int _internal_collection_names_size() const;
  public:
  void clear_collection_names();
  const std::string& collection_names(int index) const;
  std::string* mutable_collection_names(int index);
  void set_collection_names(int index, const std::string& value);
  void set_collection_names(int index, std::string&& value);
  void set_collection_names(int index, const char* value);
  void set_collection_names(int index, const char* value, size_t size);
  std::string* add_collection_names();
  void add_collection_names(const std::string& value);
  void add_collection_names(std::string&& value);
  void add_collection_names(const char* value);
  void add_collection_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& collection_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_collection_names();
  private:
  const std::string& _internal_collection_names(int index) const;
  std::string* _internal_add_collection_names();
  public:

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.FlushRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> collection_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class FlushResponse_CollSegIDsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlushResponse_CollSegIDsEntry_DoNotUse, 
    std::string, ::milvus::proto::schema::LongArray,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlushResponse_CollSegIDsEntry_DoNotUse, 
    std::string, ::milvus::proto::schema::LongArray,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  FlushResponse_CollSegIDsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FlushResponse_CollSegIDsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FlushResponse_CollSegIDsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FlushResponse_CollSegIDsEntry_DoNotUse& other);
  static const FlushResponse_CollSegIDsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlushResponse_CollSegIDsEntry_DoNotUse*>(&_FlushResponse_CollSegIDsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "milvus.proto.milvus.FlushResponse.CollSegIDsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_milvus_2eproto;
};

// -------------------------------------------------------------------

class FlushResponse_FlushCollSegIDsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlushResponse_FlushCollSegIDsEntry_DoNotUse, 
    std::string, ::milvus::proto::schema::LongArray,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlushResponse_FlushCollSegIDsEntry_DoNotUse, 
    std::string, ::milvus::proto::schema::LongArray,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  FlushResponse_FlushCollSegIDsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FlushResponse_FlushCollSegIDsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FlushResponse_FlushCollSegIDsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FlushResponse_FlushCollSegIDsEntry_DoNotUse& other);
  static const FlushResponse_FlushCollSegIDsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlushResponse_FlushCollSegIDsEntry_DoNotUse*>(&_FlushResponse_FlushCollSegIDsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "milvus.proto.milvus.FlushResponse.FlushCollSegIDsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_milvus_2eproto;
};

// -------------------------------------------------------------------

class FlushResponse_CollSealTimesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlushResponse_CollSealTimesEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlushResponse_CollSealTimesEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  FlushResponse_CollSealTimesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FlushResponse_CollSealTimesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FlushResponse_CollSealTimesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FlushResponse_CollSealTimesEntry_DoNotUse& other);
  static const FlushResponse_CollSealTimesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlushResponse_CollSealTimesEntry_DoNotUse*>(&_FlushResponse_CollSealTimesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "milvus.proto.milvus.FlushResponse.CollSealTimesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_milvus_2eproto;
};

// -------------------------------------------------------------------

class FlushResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.FlushResponse) */ {
 public:
  inline FlushResponse() : FlushResponse(nullptr) {}
  ~FlushResponse() override;
  explicit PROTOBUF_CONSTEXPR FlushResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlushResponse(const FlushResponse& from);
  FlushResponse(FlushResponse&& from) noexcept
    : FlushResponse() {
    *this = ::std::move(from);
  }

  inline FlushResponse& operator=(const FlushResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushResponse& operator=(FlushResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushResponse* internal_default_instance() {
    return reinterpret_cast<const FlushResponse*>(
               &_FlushResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(FlushResponse& a, FlushResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlushResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlushResponse& from) {
    FlushResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.FlushResponse";
  }
  protected:
  explicit FlushResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCollSegIDsFieldNumber = 3,
    kFlushCollSegIDsFieldNumber = 4,
    kCollSealTimesFieldNumber = 5,
    kDbNameFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // map<string, .milvus.proto.schema.LongArray> coll_segIDs = 3;
  int coll_segids_size() const;
  private:
  int _internal_coll_segids_size() const;
  public:
  void clear_coll_segids();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >&
      _internal_coll_segids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >*
      _internal_mutable_coll_segids();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >&
      coll_segids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >*
      mutable_coll_segids();

  // map<string, .milvus.proto.schema.LongArray> flush_coll_segIDs = 4;
  int flush_coll_segids_size() const;
  private:
  int _internal_flush_coll_segids_size() const;
  public:
  void clear_flush_coll_segids();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >&
      _internal_flush_coll_segids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >*
      _internal_mutable_flush_coll_segids();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >&
      flush_coll_segids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >*
      mutable_flush_coll_segids();

  // map<string, int64> coll_seal_times = 5;
  int coll_seal_times_size() const;
  private:
  int _internal_coll_seal_times_size() const;
  public:
  void clear_coll_seal_times();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      _internal_coll_seal_times() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      _internal_mutable_coll_seal_times();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      coll_seal_times() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      mutable_coll_seal_times();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.FlushResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FlushResponse_CollSegIDsEntry_DoNotUse,
        std::string, ::milvus::proto::schema::LongArray,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> coll_segids_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FlushResponse_FlushCollSegIDsEntry_DoNotUse,
        std::string, ::milvus::proto::schema::LongArray,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> flush_coll_segids_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FlushResponse_CollSealTimesEntry_DoNotUse,
        std::string, int64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> coll_seal_times_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class QueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.QueryRequest) */ {
 public:
  inline QueryRequest() : QueryRequest(nullptr) {}
  ~QueryRequest() override;
  explicit PROTOBUF_CONSTEXPR QueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryRequest(const QueryRequest& from);
  QueryRequest(QueryRequest&& from) noexcept
    : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
               &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(QueryRequest& a, QueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryRequest& from) {
    QueryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.QueryRequest";
  }
  protected:
  explicit QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFieldsFieldNumber = 5,
    kPartitionNamesFieldNumber = 6,
    kQueryParamsFieldNumber = 9,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kExprFieldNumber = 4,
    kBaseFieldNumber = 1,
    kTravelTimestampFieldNumber = 7,
    kGuaranteeTimestampFieldNumber = 8,
    kConsistencyLevelFieldNumber = 11,
    kNotReturnAllMetaFieldNumber = 10,
    kUseDefaultConsistencyFieldNumber = 12,
  };
  // repeated string output_fields = 5;
  int output_fields_size() const;
  private:
  int _internal_output_fields_size() const;
  public:
  void clear_output_fields();
  const std::string& output_fields(int index) const;
  std::string* mutable_output_fields(int index);
  void set_output_fields(int index, const std::string& value);
  void set_output_fields(int index, std::string&& value);
  void set_output_fields(int index, const char* value);
  void set_output_fields(int index, const char* value, size_t size);
  std::string* add_output_fields();
  void add_output_fields(const std::string& value);
  void add_output_fields(std::string&& value);
  void add_output_fields(const char* value);
  void add_output_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_fields();
  private:
  const std::string& _internal_output_fields(int index) const;
  std::string* _internal_add_output_fields();
  public:

  // repeated string partition_names = 6;
  int partition_names_size() const;
  private:
  int _internal_partition_names_size() const;
  public:
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();
  private:
  const std::string& _internal_partition_names(int index) const;
  std::string* _internal_add_partition_names();
  public:

  // repeated .milvus.proto.common.KeyValuePair query_params = 9;
  int query_params_size() const;
  private:
  int _internal_query_params_size() const;
  public:
  void clear_query_params();
  ::milvus::proto::common::KeyValuePair* mutable_query_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_query_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_query_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_query_params();
  public:
  const ::milvus::proto::common::KeyValuePair& query_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_query_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      query_params() const;

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string expr = 4;
  void clear_expr();
  const std::string& expr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expr();
  PROTOBUF_NODISCARD std::string* release_expr();
  void set_allocated_expr(std::string* expr);
  private:
  const std::string& _internal_expr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expr(const std::string& value);
  std::string* _internal_mutable_expr();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // uint64 travel_timestamp = 7;
  void clear_travel_timestamp();
  uint64_t travel_timestamp() const;
  void set_travel_timestamp(uint64_t value);
  private:
  uint64_t _internal_travel_timestamp() const;
  void _internal_set_travel_timestamp(uint64_t value);
  public:

  // uint64 guarantee_timestamp = 8;
  void clear_guarantee_timestamp();
  uint64_t guarantee_timestamp() const;
  void set_guarantee_timestamp(uint64_t value);
  private:
  uint64_t _internal_guarantee_timestamp() const;
  void _internal_set_guarantee_timestamp(uint64_t value);
  public:

  // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
  void clear_consistency_level();
  ::milvus::proto::common::ConsistencyLevel consistency_level() const;
  void set_consistency_level(::milvus::proto::common::ConsistencyLevel value);
  private:
  ::milvus::proto::common::ConsistencyLevel _internal_consistency_level() const;
  void _internal_set_consistency_level(::milvus::proto::common::ConsistencyLevel value);
  public:

  // bool not_return_all_meta = 10;
  void clear_not_return_all_meta();
  bool not_return_all_meta() const;
  void set_not_return_all_meta(bool value);
  private:
  bool _internal_not_return_all_meta() const;
  void _internal_set_not_return_all_meta(bool value);
  public:

  // bool use_default_consistency = 12;
  void clear_use_default_consistency();
  bool use_default_consistency() const;
  void set_use_default_consistency(bool value);
  private:
  bool _internal_use_default_consistency() const;
  void _internal_set_use_default_consistency(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.QueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_fields_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > query_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_;
    ::milvus::proto::common::MsgBase* base_;
    uint64_t travel_timestamp_;
    uint64_t guarantee_timestamp_;
    int consistency_level_;
    bool not_return_all_meta_;
    bool use_default_consistency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class QueryResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.QueryResults) */ {
 public:
  inline QueryResults() : QueryResults(nullptr) {}
  ~QueryResults() override;
  explicit PROTOBUF_CONSTEXPR QueryResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryResults(const QueryResults& from);
  QueryResults(QueryResults&& from) noexcept
    : QueryResults() {
    *this = ::std::move(from);
  }

  inline QueryResults& operator=(const QueryResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResults& operator=(QueryResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryResults* internal_default_instance() {
    return reinterpret_cast<const QueryResults*>(
               &_QueryResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(QueryResults& a, QueryResults& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryResults& from) {
    QueryResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.QueryResults";
  }
  protected:
  explicit QueryResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsDataFieldNumber = 2,
    kOutputFieldsFieldNumber = 4,
    kCollectionNameFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.schema.FieldData fields_data = 2;
  int fields_data_size() const;
  private:
  int _internal_fields_data_size() const;
  public:
  void clear_fields_data();
  ::milvus::proto::schema::FieldData* mutable_fields_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
      mutable_fields_data();
  private:
  const ::milvus::proto::schema::FieldData& _internal_fields_data(int index) const;
  ::milvus::proto::schema::FieldData* _internal_add_fields_data();
  public:
  const ::milvus::proto::schema::FieldData& fields_data(int index) const;
  ::milvus::proto::schema::FieldData* add_fields_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
      fields_data() const;

  // repeated string output_fields = 4;
  int output_fields_size() const;
  private:
  int _internal_output_fields_size() const;
  public:
  void clear_output_fields();
  const std::string& output_fields(int index) const;
  std::string* mutable_output_fields(int index);
  void set_output_fields(int index, const std::string& value);
  void set_output_fields(int index, std::string&& value);
  void set_output_fields(int index, const char* value);
  void set_output_fields(int index, const char* value, size_t size);
  std::string* add_output_fields();
  void add_output_fields(const std::string& value);
  void add_output_fields(std::string&& value);
  void add_output_fields(const char* value);
  void add_output_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_fields();
  private:
  const std::string& _internal_output_fields(int index) const;
  std::string* _internal_add_output_fields();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.QueryResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData > fields_data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_fields_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class VectorIDs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.VectorIDs) */ {
 public:
  inline VectorIDs() : VectorIDs(nullptr) {}
  ~VectorIDs() override;
  explicit PROTOBUF_CONSTEXPR VectorIDs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorIDs(const VectorIDs& from);
  VectorIDs(VectorIDs&& from) noexcept
    : VectorIDs() {
    *this = ::std::move(from);
  }

  inline VectorIDs& operator=(const VectorIDs& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorIDs& operator=(VectorIDs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorIDs& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorIDs* internal_default_instance() {
    return reinterpret_cast<const VectorIDs*>(
               &_VectorIDs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(VectorIDs& a, VectorIDs& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorIDs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorIDs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorIDs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorIDs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorIDs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorIDs& from) {
    VectorIDs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorIDs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.VectorIDs";
  }
  protected:
  explicit VectorIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 4,
    kCollectionNameFieldNumber = 1,
    kFieldNameFieldNumber = 2,
    kIdArrayFieldNumber = 3,
  };
  // repeated string partition_names = 4;
  int partition_names_size() const;
  private:
  int _internal_partition_names_size() const;
  public:
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();
  private:
  const std::string& _internal_partition_names(int index) const;
  std::string* _internal_add_partition_names();
  public:

  // string collection_name = 1;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string field_name = 2;
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // .milvus.proto.schema.IDs id_array = 3;
  bool has_id_array() const;
  private:
  bool _internal_has_id_array() const;
  public:
  void clear_id_array();
  const ::milvus::proto::schema::IDs& id_array() const;
  PROTOBUF_NODISCARD ::milvus::proto::schema::IDs* release_id_array();
  ::milvus::proto::schema::IDs* mutable_id_array();
  void set_allocated_id_array(::milvus::proto::schema::IDs* id_array);
  private:
  const ::milvus::proto::schema::IDs& _internal_id_array() const;
  ::milvus::proto::schema::IDs* _internal_mutable_id_array();
  public:
  void unsafe_arena_set_allocated_id_array(
      ::milvus::proto::schema::IDs* id_array);
  ::milvus::proto::schema::IDs* unsafe_arena_release_id_array();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.VectorIDs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
    ::milvus::proto::schema::IDs* id_array_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class VectorsArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.VectorsArray) */ {
 public:
  inline VectorsArray() : VectorsArray(nullptr) {}
  ~VectorsArray() override;
  explicit PROTOBUF_CONSTEXPR VectorsArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorsArray(const VectorsArray& from);
  VectorsArray(VectorsArray&& from) noexcept
    : VectorsArray() {
    *this = ::std::move(from);
  }

  inline VectorsArray& operator=(const VectorsArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorsArray& operator=(VectorsArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorsArray& default_instance() {
    return *internal_default_instance();
  }
  enum ArrayCase {
    kIdArray = 1,
    kDataArray = 2,
    ARRAY_NOT_SET = 0,
  };

  static inline const VectorsArray* internal_default_instance() {
    return reinterpret_cast<const VectorsArray*>(
               &_VectorsArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(VectorsArray& a, VectorsArray& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorsArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorsArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorsArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorsArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorsArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorsArray& from) {
    VectorsArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorsArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.VectorsArray";
  }
  protected:
  explicit VectorsArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdArrayFieldNumber = 1,
    kDataArrayFieldNumber = 2,
  };
  // .milvus.proto.milvus.VectorIDs id_array = 1;
  bool has_id_array() const;
  private:
  bool _internal_has_id_array() const;
  public:
  void clear_id_array();
  const ::milvus::proto::milvus::VectorIDs& id_array() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::VectorIDs* release_id_array();
  ::milvus::proto::milvus::VectorIDs* mutable_id_array();
  void set_allocated_id_array(::milvus::proto::milvus::VectorIDs* id_array);
  private:
  const ::milvus::proto::milvus::VectorIDs& _internal_id_array() const;
  ::milvus::proto::milvus::VectorIDs* _internal_mutable_id_array();
  public:
  void unsafe_arena_set_allocated_id_array(
      ::milvus::proto::milvus::VectorIDs* id_array);
  ::milvus::proto::milvus::VectorIDs* unsafe_arena_release_id_array();

  // .milvus.proto.schema.VectorField data_array = 2;
  bool has_data_array() const;
  private:
  bool _internal_has_data_array() const;
  public:
  void clear_data_array();
  const ::milvus::proto::schema::VectorField& data_array() const;
  PROTOBUF_NODISCARD ::milvus::proto::schema::VectorField* release_data_array();
  ::milvus::proto::schema::VectorField* mutable_data_array();
  void set_allocated_data_array(::milvus::proto::schema::VectorField* data_array);
  private:
  const ::milvus::proto::schema::VectorField& _internal_data_array() const;
  ::milvus::proto::schema::VectorField* _internal_mutable_data_array();
  public:
  void unsafe_arena_set_allocated_data_array(
      ::milvus::proto::schema::VectorField* data_array);
  ::milvus::proto::schema::VectorField* unsafe_arena_release_data_array();

  void clear_array();
  ArrayCase array_case() const;
  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.VectorsArray)
 private:
  class _Internal;
  void set_has_id_array();
  void set_has_data_array();

  inline bool has_array() const;
  inline void clear_has_array();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ArrayUnion {
      constexpr ArrayUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::milvus::proto::milvus::VectorIDs* id_array_;
      ::milvus::proto::schema::VectorField* data_array_;
    } array_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CalcDistanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CalcDistanceRequest) */ {
 public:
  inline CalcDistanceRequest() : CalcDistanceRequest(nullptr) {}
  ~CalcDistanceRequest() override;
  explicit PROTOBUF_CONSTEXPR CalcDistanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalcDistanceRequest(const CalcDistanceRequest& from);
  CalcDistanceRequest(CalcDistanceRequest&& from) noexcept
    : CalcDistanceRequest() {
    *this = ::std::move(from);
  }

  inline CalcDistanceRequest& operator=(const CalcDistanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalcDistanceRequest& operator=(CalcDistanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalcDistanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalcDistanceRequest* internal_default_instance() {
    return reinterpret_cast<const CalcDistanceRequest*>(
               &_CalcDistanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CalcDistanceRequest& a, CalcDistanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalcDistanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalcDistanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalcDistanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalcDistanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalcDistanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalcDistanceRequest& from) {
    CalcDistanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalcDistanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CalcDistanceRequest";
  }
  protected:
  explicit CalcDistanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 4,
    kBaseFieldNumber = 1,
    kOpLeftFieldNumber = 2,
    kOpRightFieldNumber = 3,
  };
  // repeated .milvus.proto.common.KeyValuePair params = 4;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::milvus::proto::common::KeyValuePair* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_params();
  public:
  const ::milvus::proto::common::KeyValuePair& params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      params() const;

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.milvus.VectorsArray op_left = 2;
  bool has_op_left() const;
  private:
  bool _internal_has_op_left() const;
  public:
  void clear_op_left();
  const ::milvus::proto::milvus::VectorsArray& op_left() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::VectorsArray* release_op_left();
  ::milvus::proto::milvus::VectorsArray* mutable_op_left();
  void set_allocated_op_left(::milvus::proto::milvus::VectorsArray* op_left);
  private:
  const ::milvus::proto::milvus::VectorsArray& _internal_op_left() const;
  ::milvus::proto::milvus::VectorsArray* _internal_mutable_op_left();
  public:
  void unsafe_arena_set_allocated_op_left(
      ::milvus::proto::milvus::VectorsArray* op_left);
  ::milvus::proto::milvus::VectorsArray* unsafe_arena_release_op_left();

  // .milvus.proto.milvus.VectorsArray op_right = 3;
  bool has_op_right() const;
  private:
  bool _internal_has_op_right() const;
  public:
  void clear_op_right();
  const ::milvus::proto::milvus::VectorsArray& op_right() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::VectorsArray* release_op_right();
  ::milvus::proto::milvus::VectorsArray* mutable_op_right();
  void set_allocated_op_right(::milvus::proto::milvus::VectorsArray* op_right);
  private:
  const ::milvus::proto::milvus::VectorsArray& _internal_op_right() const;
  ::milvus::proto::milvus::VectorsArray* _internal_mutable_op_right();
  public:
  void unsafe_arena_set_allocated_op_right(
      ::milvus::proto::milvus::VectorsArray* op_right);
  ::milvus::proto::milvus::VectorsArray* unsafe_arena_release_op_right();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CalcDistanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > params_;
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::milvus::VectorsArray* op_left_;
    ::milvus::proto::milvus::VectorsArray* op_right_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CalcDistanceResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CalcDistanceResults) */ {
 public:
  inline CalcDistanceResults() : CalcDistanceResults(nullptr) {}
  ~CalcDistanceResults() override;
  explicit PROTOBUF_CONSTEXPR CalcDistanceResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalcDistanceResults(const CalcDistanceResults& from);
  CalcDistanceResults(CalcDistanceResults&& from) noexcept
    : CalcDistanceResults() {
    *this = ::std::move(from);
  }

  inline CalcDistanceResults& operator=(const CalcDistanceResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalcDistanceResults& operator=(CalcDistanceResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalcDistanceResults& default_instance() {
    return *internal_default_instance();
  }
  enum ArrayCase {
    kIntDist = 2,
    kFloatDist = 3,
    ARRAY_NOT_SET = 0,
  };

  static inline const CalcDistanceResults* internal_default_instance() {
    return reinterpret_cast<const CalcDistanceResults*>(
               &_CalcDistanceResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CalcDistanceResults& a, CalcDistanceResults& b) {
    a.Swap(&b);
  }
  inline void Swap(CalcDistanceResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalcDistanceResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalcDistanceResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalcDistanceResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalcDistanceResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalcDistanceResults& from) {
    CalcDistanceResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalcDistanceResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CalcDistanceResults";
  }
  protected:
  explicit CalcDistanceResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kIntDistFieldNumber = 2,
    kFloatDistFieldNumber = 3,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // .milvus.proto.schema.IntArray int_dist = 2;
  bool has_int_dist() const;
  private:
  bool _internal_has_int_dist() const;
  public:
  void clear_int_dist();
  const ::milvus::proto::schema::IntArray& int_dist() const;
  PROTOBUF_NODISCARD ::milvus::proto::schema::IntArray* release_int_dist();
  ::milvus::proto::schema::IntArray* mutable_int_dist();
  void set_allocated_int_dist(::milvus::proto::schema::IntArray* int_dist);
  private:
  const ::milvus::proto::schema::IntArray& _internal_int_dist() const;
  ::milvus::proto::schema::IntArray* _internal_mutable_int_dist();
  public:
  void unsafe_arena_set_allocated_int_dist(
      ::milvus::proto::schema::IntArray* int_dist);
  ::milvus::proto::schema::IntArray* unsafe_arena_release_int_dist();

  // .milvus.proto.schema.FloatArray float_dist = 3;
  bool has_float_dist() const;
  private:
  bool _internal_has_float_dist() const;
  public:
  void clear_float_dist();
  const ::milvus::proto::schema::FloatArray& float_dist() const;
  PROTOBUF_NODISCARD ::milvus::proto::schema::FloatArray* release_float_dist();
  ::milvus::proto::schema::FloatArray* mutable_float_dist();
  void set_allocated_float_dist(::milvus::proto::schema::FloatArray* float_dist);
  private:
  const ::milvus::proto::schema::FloatArray& _internal_float_dist() const;
  ::milvus::proto::schema::FloatArray* _internal_mutable_float_dist();
  public:
  void unsafe_arena_set_allocated_float_dist(
      ::milvus::proto::schema::FloatArray* float_dist);
  ::milvus::proto::schema::FloatArray* unsafe_arena_release_float_dist();

  void clear_array();
  ArrayCase array_case() const;
  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CalcDistanceResults)
 private:
  class _Internal;
  void set_has_int_dist();
  void set_has_float_dist();

  inline bool has_array() const;
  inline void clear_has_array();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    union ArrayUnion {
      constexpr ArrayUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::milvus::proto::schema::IntArray* int_dist_;
      ::milvus::proto::schema::FloatArray* float_dist_;
    } array_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class FlushAllRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.FlushAllRequest) */ {
 public:
  inline FlushAllRequest() : FlushAllRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FlushAllRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlushAllRequest(const FlushAllRequest& from);
  FlushAllRequest(FlushAllRequest&& from) noexcept
    : FlushAllRequest() {
    *this = ::std::move(from);
  }

  inline FlushAllRequest& operator=(const FlushAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushAllRequest& operator=(FlushAllRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushAllRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushAllRequest* internal_default_instance() {
    return reinterpret_cast<const FlushAllRequest*>(
               &_FlushAllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(FlushAllRequest& a, FlushAllRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushAllRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushAllRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushAllRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushAllRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FlushAllRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FlushAllRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.FlushAllRequest";
  }
  protected:
  explicit FlushAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.FlushAllRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class FlushAllResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.FlushAllResponse) */ {
 public:
  inline FlushAllResponse() : FlushAllResponse(nullptr) {}
  ~FlushAllResponse() override;
  explicit PROTOBUF_CONSTEXPR FlushAllResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlushAllResponse(const FlushAllResponse& from);
  FlushAllResponse(FlushAllResponse&& from) noexcept
    : FlushAllResponse() {
    *this = ::std::move(from);
  }

  inline FlushAllResponse& operator=(const FlushAllResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushAllResponse& operator=(FlushAllResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushAllResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushAllResponse* internal_default_instance() {
    return reinterpret_cast<const FlushAllResponse*>(
               &_FlushAllResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(FlushAllResponse& a, FlushAllResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushAllResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushAllResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushAllResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushAllResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlushAllResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlushAllResponse& from) {
    FlushAllResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushAllResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.FlushAllResponse";
  }
  protected:
  explicit FlushAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kFlushAllTsFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // uint64 flush_all_ts = 2;
  void clear_flush_all_ts();
  uint64_t flush_all_ts() const;
  void set_flush_all_ts(uint64_t value);
  private:
  uint64_t _internal_flush_all_ts() const;
  void _internal_set_flush_all_ts(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.FlushAllResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    uint64_t flush_all_ts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class PersistentSegmentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.PersistentSegmentInfo) */ {
 public:
  inline PersistentSegmentInfo() : PersistentSegmentInfo(nullptr) {}
  ~PersistentSegmentInfo() override;
  explicit PROTOBUF_CONSTEXPR PersistentSegmentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PersistentSegmentInfo(const PersistentSegmentInfo& from);
  PersistentSegmentInfo(PersistentSegmentInfo&& from) noexcept
    : PersistentSegmentInfo() {
    *this = ::std::move(from);
  }

  inline PersistentSegmentInfo& operator=(const PersistentSegmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistentSegmentInfo& operator=(PersistentSegmentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PersistentSegmentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PersistentSegmentInfo* internal_default_instance() {
    return reinterpret_cast<const PersistentSegmentInfo*>(
               &_PersistentSegmentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(PersistentSegmentInfo& a, PersistentSegmentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistentSegmentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersistentSegmentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PersistentSegmentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PersistentSegmentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PersistentSegmentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PersistentSegmentInfo& from) {
    PersistentSegmentInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistentSegmentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.PersistentSegmentInfo";
  }
  protected:
  explicit PersistentSegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kPartitionIDFieldNumber = 3,
    kNumRowsFieldNumber = 4,
    kStateFieldNumber = 5,
  };
  // int64 segmentID = 1;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // int64 collectionID = 2;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 partitionID = 3;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // int64 num_rows = 4;
  void clear_num_rows();
  int64_t num_rows() const;
  void set_num_rows(int64_t value);
  private:
  int64_t _internal_num_rows() const;
  void _internal_set_num_rows(int64_t value);
  public:

  // .milvus.proto.common.SegmentState state = 5;
  void clear_state();
  ::milvus::proto::common::SegmentState state() const;
  void set_state(::milvus::proto::common::SegmentState value);
  private:
  ::milvus::proto::common::SegmentState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::SegmentState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.PersistentSegmentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t segmentid_;
    int64_t collectionid_;
    int64_t partitionid_;
    int64_t num_rows_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetPersistentSegmentInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetPersistentSegmentInfoRequest) */ {
 public:
  inline GetPersistentSegmentInfoRequest() : GetPersistentSegmentInfoRequest(nullptr) {}
  ~GetPersistentSegmentInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPersistentSegmentInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPersistentSegmentInfoRequest(const GetPersistentSegmentInfoRequest& from);
  GetPersistentSegmentInfoRequest(GetPersistentSegmentInfoRequest&& from) noexcept
    : GetPersistentSegmentInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetPersistentSegmentInfoRequest& operator=(const GetPersistentSegmentInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersistentSegmentInfoRequest& operator=(GetPersistentSegmentInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPersistentSegmentInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPersistentSegmentInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetPersistentSegmentInfoRequest*>(
               &_GetPersistentSegmentInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GetPersistentSegmentInfoRequest& a, GetPersistentSegmentInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersistentSegmentInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPersistentSegmentInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPersistentSegmentInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPersistentSegmentInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPersistentSegmentInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPersistentSegmentInfoRequest& from) {
    GetPersistentSegmentInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersistentSegmentInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetPersistentSegmentInfoRequest";
  }
  protected:
  explicit GetPersistentSegmentInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string dbName = 2;
  void clear_dbname();
  const std::string& dbname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dbname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dbname();
  PROTOBUF_NODISCARD std::string* release_dbname();
  void set_allocated_dbname(std::string* dbname);
  private:
  const std::string& _internal_dbname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dbname(const std::string& value);
  std::string* _internal_mutable_dbname();
  public:

  // string collectionName = 3;
  void clear_collectionname();
  const std::string& collectionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collectionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collectionname();
  PROTOBUF_NODISCARD std::string* release_collectionname();
  void set_allocated_collectionname(std::string* collectionname);
  private:
  const std::string& _internal_collectionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collectionname(const std::string& value);
  std::string* _internal_mutable_collectionname();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dbname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectionname_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetPersistentSegmentInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetPersistentSegmentInfoResponse) */ {
 public:
  inline GetPersistentSegmentInfoResponse() : GetPersistentSegmentInfoResponse(nullptr) {}
  ~GetPersistentSegmentInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPersistentSegmentInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPersistentSegmentInfoResponse(const GetPersistentSegmentInfoResponse& from);
  GetPersistentSegmentInfoResponse(GetPersistentSegmentInfoResponse&& from) noexcept
    : GetPersistentSegmentInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetPersistentSegmentInfoResponse& operator=(const GetPersistentSegmentInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersistentSegmentInfoResponse& operator=(GetPersistentSegmentInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPersistentSegmentInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPersistentSegmentInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetPersistentSegmentInfoResponse*>(
               &_GetPersistentSegmentInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(GetPersistentSegmentInfoResponse& a, GetPersistentSegmentInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersistentSegmentInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPersistentSegmentInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPersistentSegmentInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPersistentSegmentInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPersistentSegmentInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPersistentSegmentInfoResponse& from) {
    GetPersistentSegmentInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersistentSegmentInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetPersistentSegmentInfoResponse";
  }
  protected:
  explicit GetPersistentSegmentInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::milvus::proto::milvus::PersistentSegmentInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PersistentSegmentInfo >*
      mutable_infos();
  private:
  const ::milvus::proto::milvus::PersistentSegmentInfo& _internal_infos(int index) const;
  ::milvus::proto::milvus::PersistentSegmentInfo* _internal_add_infos();
  public:
  const ::milvus::proto::milvus::PersistentSegmentInfo& infos(int index) const;
  ::milvus::proto::milvus::PersistentSegmentInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PersistentSegmentInfo >&
      infos() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PersistentSegmentInfo > infos_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class QuerySegmentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.QuerySegmentInfo) */ {
 public:
  inline QuerySegmentInfo() : QuerySegmentInfo(nullptr) {}
  ~QuerySegmentInfo() override;
  explicit PROTOBUF_CONSTEXPR QuerySegmentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySegmentInfo(const QuerySegmentInfo& from);
  QuerySegmentInfo(QuerySegmentInfo&& from) noexcept
    : QuerySegmentInfo() {
    *this = ::std::move(from);
  }

  inline QuerySegmentInfo& operator=(const QuerySegmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySegmentInfo& operator=(QuerySegmentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySegmentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySegmentInfo* internal_default_instance() {
    return reinterpret_cast<const QuerySegmentInfo*>(
               &_QuerySegmentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(QuerySegmentInfo& a, QuerySegmentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySegmentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySegmentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySegmentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySegmentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySegmentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySegmentInfo& from) {
    QuerySegmentInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySegmentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.QuerySegmentInfo";
  }
  protected:
  explicit QuerySegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdsFieldNumber = 10,
    kIndexNameFieldNumber = 6,
    kSegmentIDFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kPartitionIDFieldNumber = 3,
    kMemSizeFieldNumber = 4,
    kNumRowsFieldNumber = 5,
    kIndexIDFieldNumber = 7,
    kNodeIDFieldNumber = 8,
    kStateFieldNumber = 9,
  };
  // repeated int64 nodeIds = 10;
  int nodeids_size() const;
  private:
  int _internal_nodeids_size() const;
  public:
  void clear_nodeids();
  private:
  int64_t _internal_nodeids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_nodeids() const;
  void _internal_add_nodeids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_nodeids();
  public:
  int64_t nodeids(int index) const;
  void set_nodeids(int index, int64_t value);
  void add_nodeids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      nodeids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_nodeids();

  // string index_name = 6;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // int64 segmentID = 1;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // int64 collectionID = 2;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 partitionID = 3;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // int64 mem_size = 4;
  void clear_mem_size();
  int64_t mem_size() const;
  void set_mem_size(int64_t value);
  private:
  int64_t _internal_mem_size() const;
  void _internal_set_mem_size(int64_t value);
  public:

  // int64 num_rows = 5;
  void clear_num_rows();
  int64_t num_rows() const;
  void set_num_rows(int64_t value);
  private:
  int64_t _internal_num_rows() const;
  void _internal_set_num_rows(int64_t value);
  public:

  // int64 indexID = 7;
  void clear_indexid();
  int64_t indexid() const;
  void set_indexid(int64_t value);
  private:
  int64_t _internal_indexid() const;
  void _internal_set_indexid(int64_t value);
  public:

  // int64 nodeID = 8;
  void clear_nodeid();
  int64_t nodeid() const;
  void set_nodeid(int64_t value);
  private:
  int64_t _internal_nodeid() const;
  void _internal_set_nodeid(int64_t value);
  public:

  // .milvus.proto.common.SegmentState state = 9;
  void clear_state();
  ::milvus::proto::common::SegmentState state() const;
  void set_state(::milvus::proto::common::SegmentState value);
  private:
  ::milvus::proto::common::SegmentState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::SegmentState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.QuerySegmentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > nodeids_;
    mutable std::atomic<int> _nodeids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    int64_t segmentid_;
    int64_t collectionid_;
    int64_t partitionid_;
    int64_t mem_size_;
    int64_t num_rows_;
    int64_t indexid_;
    int64_t nodeid_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetQuerySegmentInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetQuerySegmentInfoRequest) */ {
 public:
  inline GetQuerySegmentInfoRequest() : GetQuerySegmentInfoRequest(nullptr) {}
  ~GetQuerySegmentInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetQuerySegmentInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetQuerySegmentInfoRequest(const GetQuerySegmentInfoRequest& from);
  GetQuerySegmentInfoRequest(GetQuerySegmentInfoRequest&& from) noexcept
    : GetQuerySegmentInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetQuerySegmentInfoRequest& operator=(const GetQuerySegmentInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetQuerySegmentInfoRequest& operator=(GetQuerySegmentInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetQuerySegmentInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetQuerySegmentInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetQuerySegmentInfoRequest*>(
               &_GetQuerySegmentInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(GetQuerySegmentInfoRequest& a, GetQuerySegmentInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetQuerySegmentInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetQuerySegmentInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetQuerySegmentInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetQuerySegmentInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetQuerySegmentInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetQuerySegmentInfoRequest& from) {
    GetQuerySegmentInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetQuerySegmentInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetQuerySegmentInfoRequest";
  }
  protected:
  explicit GetQuerySegmentInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string dbName = 2;
  void clear_dbname();
  const std::string& dbname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dbname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dbname();
  PROTOBUF_NODISCARD std::string* release_dbname();
  void set_allocated_dbname(std::string* dbname);
  private:
  const std::string& _internal_dbname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dbname(const std::string& value);
  std::string* _internal_mutable_dbname();
  public:

  // string collectionName = 3;
  void clear_collectionname();
  const std::string& collectionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collectionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collectionname();
  PROTOBUF_NODISCARD std::string* release_collectionname();
  void set_allocated_collectionname(std::string* collectionname);
  private:
  const std::string& _internal_collectionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collectionname(const std::string& value);
  std::string* _internal_mutable_collectionname();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetQuerySegmentInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dbname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectionname_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetQuerySegmentInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetQuerySegmentInfoResponse) */ {
 public:
  inline GetQuerySegmentInfoResponse() : GetQuerySegmentInfoResponse(nullptr) {}
  ~GetQuerySegmentInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetQuerySegmentInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetQuerySegmentInfoResponse(const GetQuerySegmentInfoResponse& from);
  GetQuerySegmentInfoResponse(GetQuerySegmentInfoResponse&& from) noexcept
    : GetQuerySegmentInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetQuerySegmentInfoResponse& operator=(const GetQuerySegmentInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetQuerySegmentInfoResponse& operator=(GetQuerySegmentInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetQuerySegmentInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetQuerySegmentInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetQuerySegmentInfoResponse*>(
               &_GetQuerySegmentInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(GetQuerySegmentInfoResponse& a, GetQuerySegmentInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetQuerySegmentInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetQuerySegmentInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetQuerySegmentInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetQuerySegmentInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetQuerySegmentInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetQuerySegmentInfoResponse& from) {
    GetQuerySegmentInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetQuerySegmentInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetQuerySegmentInfoResponse";
  }
  protected:
  explicit GetQuerySegmentInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::milvus::proto::milvus::QuerySegmentInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::QuerySegmentInfo >*
      mutable_infos();
  private:
  const ::milvus::proto::milvus::QuerySegmentInfo& _internal_infos(int index) const;
  ::milvus::proto::milvus::QuerySegmentInfo* _internal_add_infos();
  public:
  const ::milvus::proto::milvus::QuerySegmentInfo& infos(int index) const;
  ::milvus::proto::milvus::QuerySegmentInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::QuerySegmentInfo >&
      infos() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetQuerySegmentInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::QuerySegmentInfo > infos_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DummyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DummyRequest) */ {
 public:
  inline DummyRequest() : DummyRequest(nullptr) {}
  ~DummyRequest() override;
  explicit PROTOBUF_CONSTEXPR DummyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DummyRequest(const DummyRequest& from);
  DummyRequest(DummyRequest&& from) noexcept
    : DummyRequest() {
    *this = ::std::move(from);
  }

  inline DummyRequest& operator=(const DummyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DummyRequest& operator=(DummyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DummyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DummyRequest* internal_default_instance() {
    return reinterpret_cast<const DummyRequest*>(
               &_DummyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(DummyRequest& a, DummyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DummyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DummyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DummyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DummyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DummyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DummyRequest& from) {
    DummyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DummyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DummyRequest";
  }
  protected:
  explicit DummyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestTypeFieldNumber = 1,
  };
  // string request_type = 1;
  void clear_request_type();
  const std::string& request_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_type();
  PROTOBUF_NODISCARD std::string* release_request_type();
  void set_allocated_request_type(std::string* request_type);
  private:
  const std::string& _internal_request_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_type(const std::string& value);
  std::string* _internal_mutable_request_type();
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DummyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DummyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DummyResponse) */ {
 public:
  inline DummyResponse() : DummyResponse(nullptr) {}
  ~DummyResponse() override;
  explicit PROTOBUF_CONSTEXPR DummyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DummyResponse(const DummyResponse& from);
  DummyResponse(DummyResponse&& from) noexcept
    : DummyResponse() {
    *this = ::std::move(from);
  }

  inline DummyResponse& operator=(const DummyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DummyResponse& operator=(DummyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DummyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DummyResponse* internal_default_instance() {
    return reinterpret_cast<const DummyResponse*>(
               &_DummyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(DummyResponse& a, DummyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DummyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DummyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DummyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DummyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DummyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DummyResponse& from) {
    DummyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DummyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DummyResponse";
  }
  protected:
  explicit DummyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // string response = 1;
  void clear_response();
  const std::string& response() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response();
  PROTOBUF_NODISCARD std::string* release_response();
  void set_allocated_response(std::string* response);
  private:
  const std::string& _internal_response() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DummyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class RegisterLinkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.RegisterLinkRequest) */ {
 public:
  inline RegisterLinkRequest() : RegisterLinkRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RegisterLinkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterLinkRequest(const RegisterLinkRequest& from);
  RegisterLinkRequest(RegisterLinkRequest&& from) noexcept
    : RegisterLinkRequest() {
    *this = ::std::move(from);
  }

  inline RegisterLinkRequest& operator=(const RegisterLinkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterLinkRequest& operator=(RegisterLinkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterLinkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterLinkRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterLinkRequest*>(
               &_RegisterLinkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(RegisterLinkRequest& a, RegisterLinkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterLinkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterLinkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterLinkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterLinkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RegisterLinkRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RegisterLinkRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.RegisterLinkRequest";
  }
  protected:
  explicit RegisterLinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.RegisterLinkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class RegisterLinkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.RegisterLinkResponse) */ {
 public:
  inline RegisterLinkResponse() : RegisterLinkResponse(nullptr) {}
  ~RegisterLinkResponse() override;
  explicit PROTOBUF_CONSTEXPR RegisterLinkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterLinkResponse(const RegisterLinkResponse& from);
  RegisterLinkResponse(RegisterLinkResponse&& from) noexcept
    : RegisterLinkResponse() {
    *this = ::std::move(from);
  }

  inline RegisterLinkResponse& operator=(const RegisterLinkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterLinkResponse& operator=(RegisterLinkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterLinkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterLinkResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterLinkResponse*>(
               &_RegisterLinkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(RegisterLinkResponse& a, RegisterLinkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterLinkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterLinkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterLinkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterLinkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterLinkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterLinkResponse& from) {
    RegisterLinkResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterLinkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.RegisterLinkResponse";
  }
  protected:
  explicit RegisterLinkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .milvus.proto.common.Address address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::milvus::proto::common::Address& address() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Address* release_address();
  ::milvus::proto::common::Address* mutable_address();
  void set_allocated_address(::milvus::proto::common::Address* address);
  private:
  const ::milvus::proto::common::Address& _internal_address() const;
  ::milvus::proto::common::Address* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::milvus::proto::common::Address* address);
  ::milvus::proto::common::Address* unsafe_arena_release_address();

  // .milvus.proto.common.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.RegisterLinkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Address* address_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetMetricsRequest) */ {
 public:
  inline GetMetricsRequest() : GetMetricsRequest(nullptr) {}
  ~GetMetricsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMetricsRequest(const GetMetricsRequest& from);
  GetMetricsRequest(GetMetricsRequest&& from) noexcept
    : GetMetricsRequest() {
    *this = ::std::move(from);
  }

  inline GetMetricsRequest& operator=(const GetMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMetricsRequest& operator=(GetMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const GetMetricsRequest*>(
               &_GetMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GetMetricsRequest& a, GetMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMetricsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMetricsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMetricsRequest& from) {
    GetMetricsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMetricsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetMetricsRequest";
  }
  protected:
  explicit GetMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // string request = 2;
  void clear_request();
  const std::string& request() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request();
  PROTOBUF_NODISCARD std::string* release_request();
  void set_allocated_request(std::string* request);
  private:
  const std::string& _internal_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request(const std::string& value);
  std::string* _internal_mutable_request();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetMetricsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetMetricsResponse) */ {
 public:
  inline GetMetricsResponse() : GetMetricsResponse(nullptr) {}
  ~GetMetricsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetMetricsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMetricsResponse(const GetMetricsResponse& from);
  GetMetricsResponse(GetMetricsResponse&& from) noexcept
    : GetMetricsResponse() {
    *this = ::std::move(from);
  }

  inline GetMetricsResponse& operator=(const GetMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMetricsResponse& operator=(GetMetricsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMetricsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const GetMetricsResponse*>(
               &_GetMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(GetMetricsResponse& a, GetMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMetricsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMetricsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMetricsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMetricsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMetricsResponse& from) {
    GetMetricsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMetricsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetMetricsResponse";
  }
  protected:
  explicit GetMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 2,
    kComponentNameFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string response = 2;
  void clear_response();
  const std::string& response() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response();
  PROTOBUF_NODISCARD std::string* release_response();
  void set_allocated_response(std::string* response);
  private:
  const std::string& _internal_response() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // string component_name = 3;
  void clear_component_name();
  const std::string& component_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_name();
  PROTOBUF_NODISCARD std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetMetricsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ComponentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ComponentInfo) */ {
 public:
  inline ComponentInfo() : ComponentInfo(nullptr) {}
  ~ComponentInfo() override;
  explicit PROTOBUF_CONSTEXPR ComponentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentInfo(const ComponentInfo& from);
  ComponentInfo(ComponentInfo&& from) noexcept
    : ComponentInfo() {
    *this = ::std::move(from);
  }

  inline ComponentInfo& operator=(const ComponentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentInfo& operator=(ComponentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentInfo* internal_default_instance() {
    return reinterpret_cast<const ComponentInfo*>(
               &_ComponentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(ComponentInfo& a, ComponentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComponentInfo& from) {
    ComponentInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ComponentInfo";
  }
  protected:
  explicit ComponentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraInfoFieldNumber = 4,
    kRoleFieldNumber = 2,
    kNodeIDFieldNumber = 1,
    kStateCodeFieldNumber = 3,
  };
  // repeated .milvus.proto.common.KeyValuePair extra_info = 4;
  int extra_info_size() const;
  private:
  int _internal_extra_info_size() const;
  public:
  void clear_extra_info();
  ::milvus::proto::common::KeyValuePair* mutable_extra_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_extra_info();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_extra_info(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_extra_info();
  public:
  const ::milvus::proto::common::KeyValuePair& extra_info(int index) const;
  ::milvus::proto::common::KeyValuePair* add_extra_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      extra_info() const;

  // string role = 2;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // int64 nodeID = 1;
  void clear_nodeid();
  int64_t nodeid() const;
  void set_nodeid(int64_t value);
  private:
  int64_t _internal_nodeid() const;
  void _internal_set_nodeid(int64_t value);
  public:

  // .milvus.proto.common.StateCode state_code = 3;
  void clear_state_code();
  ::milvus::proto::common::StateCode state_code() const;
  void set_state_code(::milvus::proto::common::StateCode value);
  private:
  ::milvus::proto::common::StateCode _internal_state_code() const;
  void _internal_set_state_code(::milvus::proto::common::StateCode value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ComponentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > extra_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    int64_t nodeid_;
    int state_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ComponentStates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ComponentStates) */ {
 public:
  inline ComponentStates() : ComponentStates(nullptr) {}
  ~ComponentStates() override;
  explicit PROTOBUF_CONSTEXPR ComponentStates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentStates(const ComponentStates& from);
  ComponentStates(ComponentStates&& from) noexcept
    : ComponentStates() {
    *this = ::std::move(from);
  }

  inline ComponentStates& operator=(const ComponentStates& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentStates& operator=(ComponentStates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentStates& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentStates* internal_default_instance() {
    return reinterpret_cast<const ComponentStates*>(
               &_ComponentStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(ComponentStates& a, ComponentStates& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentStates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentStates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentStates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentStates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentStates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComponentStates& from) {
    ComponentStates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentStates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ComponentStates";
  }
  protected:
  explicit ComponentStates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubcomponentStatesFieldNumber = 2,
    kStateFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // repeated .milvus.proto.milvus.ComponentInfo subcomponent_states = 2;
  int subcomponent_states_size() const;
  private:
  int _internal_subcomponent_states_size() const;
  public:
  void clear_subcomponent_states();
  ::milvus::proto::milvus::ComponentInfo* mutable_subcomponent_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ComponentInfo >*
      mutable_subcomponent_states();
  private:
  const ::milvus::proto::milvus::ComponentInfo& _internal_subcomponent_states(int index) const;
  ::milvus::proto::milvus::ComponentInfo* _internal_add_subcomponent_states();
  public:
  const ::milvus::proto::milvus::ComponentInfo& subcomponent_states(int index) const;
  ::milvus::proto::milvus::ComponentInfo* add_subcomponent_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ComponentInfo >&
      subcomponent_states() const;

  // .milvus.proto.milvus.ComponentInfo state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::milvus::proto::milvus::ComponentInfo& state() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::ComponentInfo* release_state();
  ::milvus::proto::milvus::ComponentInfo* mutable_state();
  void set_allocated_state(::milvus::proto::milvus::ComponentInfo* state);
  private:
  const ::milvus::proto::milvus::ComponentInfo& _internal_state() const;
  ::milvus::proto::milvus::ComponentInfo* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::milvus::proto::milvus::ComponentInfo* state);
  ::milvus::proto::milvus::ComponentInfo* unsafe_arena_release_state();

  // .milvus.proto.common.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ComponentStates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ComponentInfo > subcomponent_states_;
    ::milvus::proto::milvus::ComponentInfo* state_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetComponentStatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetComponentStatesRequest) */ {
 public:
  inline GetComponentStatesRequest() : GetComponentStatesRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetComponentStatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetComponentStatesRequest(const GetComponentStatesRequest& from);
  GetComponentStatesRequest(GetComponentStatesRequest&& from) noexcept
    : GetComponentStatesRequest() {
    *this = ::std::move(from);
  }

  inline GetComponentStatesRequest& operator=(const GetComponentStatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetComponentStatesRequest& operator=(GetComponentStatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetComponentStatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetComponentStatesRequest* internal_default_instance() {
    return reinterpret_cast<const GetComponentStatesRequest*>(
               &_GetComponentStatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(GetComponentStatesRequest& a, GetComponentStatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetComponentStatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetComponentStatesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetComponentStatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetComponentStatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetComponentStatesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetComponentStatesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetComponentStatesRequest";
  }
  protected:
  explicit GetComponentStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetComponentStatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class LoadBalanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.LoadBalanceRequest) */ {
 public:
  inline LoadBalanceRequest() : LoadBalanceRequest(nullptr) {}
  ~LoadBalanceRequest() override;
  explicit PROTOBUF_CONSTEXPR LoadBalanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadBalanceRequest(const LoadBalanceRequest& from);
  LoadBalanceRequest(LoadBalanceRequest&& from) noexcept
    : LoadBalanceRequest() {
    *this = ::std::move(from);
  }

  inline LoadBalanceRequest& operator=(const LoadBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadBalanceRequest& operator=(LoadBalanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadBalanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const LoadBalanceRequest*>(
               &_LoadBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(LoadBalanceRequest& a, LoadBalanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadBalanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadBalanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadBalanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadBalanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadBalanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadBalanceRequest& from) {
    LoadBalanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadBalanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.LoadBalanceRequest";
  }
  protected:
  explicit LoadBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDstNodeIDsFieldNumber = 3,
    kSealedSegmentIDsFieldNumber = 4,
    kCollectionNameFieldNumber = 5,
    kDbNameFieldNumber = 6,
    kBaseFieldNumber = 1,
    kSrcNodeIDFieldNumber = 2,
  };
  // repeated int64 dst_nodeIDs = 3;
  int dst_nodeids_size() const;
  private:
  int _internal_dst_nodeids_size() const;
  public:
  void clear_dst_nodeids();
  private:
  int64_t _internal_dst_nodeids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_dst_nodeids() const;
  void _internal_add_dst_nodeids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_dst_nodeids();
  public:
  int64_t dst_nodeids(int index) const;
  void set_dst_nodeids(int index, int64_t value);
  void add_dst_nodeids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      dst_nodeids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_dst_nodeids();

  // repeated int64 sealed_segmentIDs = 4;
  int sealed_segmentids_size() const;
  private:
  int _internal_sealed_segmentids_size() const;
  public:
  void clear_sealed_segmentids();
  private:
  int64_t _internal_sealed_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sealed_segmentids() const;
  void _internal_add_sealed_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sealed_segmentids();
  public:
  int64_t sealed_segmentids(int index) const;
  void set_sealed_segmentids(int index, int64_t value);
  void add_sealed_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sealed_segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sealed_segmentids();

  // string collectionName = 5;
  void clear_collectionname();
  const std::string& collectionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collectionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collectionname();
  PROTOBUF_NODISCARD std::string* release_collectionname();
  void set_allocated_collectionname(std::string* collectionname);
  private:
  const std::string& _internal_collectionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collectionname(const std::string& value);
  std::string* _internal_mutable_collectionname();
  public:

  // string db_name = 6;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 src_nodeID = 2;
  void clear_src_nodeid();
  int64_t src_nodeid() const;
  void set_src_nodeid(int64_t value);
  private:
  int64_t _internal_src_nodeid() const;
  void _internal_set_src_nodeid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.LoadBalanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > dst_nodeids_;
    mutable std::atomic<int> _dst_nodeids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sealed_segmentids_;
    mutable std::atomic<int> _sealed_segmentids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectionname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t src_nodeid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ManualCompactionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ManualCompactionRequest) */ {
 public:
  inline ManualCompactionRequest() : ManualCompactionRequest(nullptr) {}
  ~ManualCompactionRequest() override;
  explicit PROTOBUF_CONSTEXPR ManualCompactionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ManualCompactionRequest(const ManualCompactionRequest& from);
  ManualCompactionRequest(ManualCompactionRequest&& from) noexcept
    : ManualCompactionRequest() {
    *this = ::std::move(from);
  }

  inline ManualCompactionRequest& operator=(const ManualCompactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManualCompactionRequest& operator=(ManualCompactionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ManualCompactionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ManualCompactionRequest* internal_default_instance() {
    return reinterpret_cast<const ManualCompactionRequest*>(
               &_ManualCompactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(ManualCompactionRequest& a, ManualCompactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ManualCompactionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManualCompactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ManualCompactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ManualCompactionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ManualCompactionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ManualCompactionRequest& from) {
    ManualCompactionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManualCompactionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ManualCompactionRequest";
  }
  protected:
  explicit ManualCompactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionIDFieldNumber = 1,
    kTimetravelFieldNumber = 2,
  };
  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // uint64 timetravel = 2;
  void clear_timetravel();
  uint64_t timetravel() const;
  void set_timetravel(uint64_t value);
  private:
  uint64_t _internal_timetravel() const;
  void _internal_set_timetravel(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ManualCompactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t collectionid_;
    uint64_t timetravel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ManualCompactionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ManualCompactionResponse) */ {
 public:
  inline ManualCompactionResponse() : ManualCompactionResponse(nullptr) {}
  ~ManualCompactionResponse() override;
  explicit PROTOBUF_CONSTEXPR ManualCompactionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ManualCompactionResponse(const ManualCompactionResponse& from);
  ManualCompactionResponse(ManualCompactionResponse&& from) noexcept
    : ManualCompactionResponse() {
    *this = ::std::move(from);
  }

  inline ManualCompactionResponse& operator=(const ManualCompactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManualCompactionResponse& operator=(ManualCompactionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ManualCompactionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ManualCompactionResponse* internal_default_instance() {
    return reinterpret_cast<const ManualCompactionResponse*>(
               &_ManualCompactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(ManualCompactionResponse& a, ManualCompactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ManualCompactionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManualCompactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ManualCompactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ManualCompactionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ManualCompactionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ManualCompactionResponse& from) {
    ManualCompactionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManualCompactionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ManualCompactionResponse";
  }
  protected:
  explicit ManualCompactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kCompactionIDFieldNumber = 2,
    kCompactionPlanCountFieldNumber = 3,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // int64 compactionID = 2;
  void clear_compactionid();
  int64_t compactionid() const;
  void set_compactionid(int64_t value);
  private:
  int64_t _internal_compactionid() const;
  void _internal_set_compactionid(int64_t value);
  public:

  // int32 compactionPlanCount = 3;
  void clear_compactionplancount();
  int32_t compactionplancount() const;
  void set_compactionplancount(int32_t value);
  private:
  int32_t _internal_compactionplancount() const;
  void _internal_set_compactionplancount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ManualCompactionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    int64_t compactionid_;
    int32_t compactionplancount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetCompactionStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetCompactionStateRequest) */ {
 public:
  inline GetCompactionStateRequest() : GetCompactionStateRequest(nullptr) {}
  ~GetCompactionStateRequest() override;
  explicit PROTOBUF_CONSTEXPR GetCompactionStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCompactionStateRequest(const GetCompactionStateRequest& from);
  GetCompactionStateRequest(GetCompactionStateRequest&& from) noexcept
    : GetCompactionStateRequest() {
    *this = ::std::move(from);
  }

  inline GetCompactionStateRequest& operator=(const GetCompactionStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCompactionStateRequest& operator=(GetCompactionStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCompactionStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCompactionStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetCompactionStateRequest*>(
               &_GetCompactionStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(GetCompactionStateRequest& a, GetCompactionStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCompactionStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCompactionStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCompactionStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCompactionStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCompactionStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCompactionStateRequest& from) {
    GetCompactionStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCompactionStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetCompactionStateRequest";
  }
  protected:
  explicit GetCompactionStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompactionIDFieldNumber = 1,
  };
  // int64 compactionID = 1;
  void clear_compactionid();
  int64_t compactionid() const;
  void set_compactionid(int64_t value);
  private:
  int64_t _internal_compactionid() const;
  void _internal_set_compactionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetCompactionStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t compactionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetCompactionStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetCompactionStateResponse) */ {
 public:
  inline GetCompactionStateResponse() : GetCompactionStateResponse(nullptr) {}
  ~GetCompactionStateResponse() override;
  explicit PROTOBUF_CONSTEXPR GetCompactionStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCompactionStateResponse(const GetCompactionStateResponse& from);
  GetCompactionStateResponse(GetCompactionStateResponse&& from) noexcept
    : GetCompactionStateResponse() {
    *this = ::std::move(from);
  }

  inline GetCompactionStateResponse& operator=(const GetCompactionStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCompactionStateResponse& operator=(GetCompactionStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCompactionStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCompactionStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetCompactionStateResponse*>(
               &_GetCompactionStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(GetCompactionStateResponse& a, GetCompactionStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCompactionStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCompactionStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCompactionStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCompactionStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCompactionStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCompactionStateResponse& from) {
    GetCompactionStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCompactionStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetCompactionStateResponse";
  }
  protected:
  explicit GetCompactionStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kExecutingPlanNoFieldNumber = 3,
    kTimeoutPlanNoFieldNumber = 4,
    kCompletedPlanNoFieldNumber = 5,
    kFailedPlanNoFieldNumber = 6,
    kStateFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // int64 executingPlanNo = 3;
  void clear_executingplanno();
  int64_t executingplanno() const;
  void set_executingplanno(int64_t value);
  private:
  int64_t _internal_executingplanno() const;
  void _internal_set_executingplanno(int64_t value);
  public:

  // int64 timeoutPlanNo = 4;
  void clear_timeoutplanno();
  int64_t timeoutplanno() const;
  void set_timeoutplanno(int64_t value);
  private:
  int64_t _internal_timeoutplanno() const;
  void _internal_set_timeoutplanno(int64_t value);
  public:

  // int64 completedPlanNo = 5;
  void clear_completedplanno();
  int64_t completedplanno() const;
  void set_completedplanno(int64_t value);
  private:
  int64_t _internal_completedplanno() const;
  void _internal_set_completedplanno(int64_t value);
  public:

  // int64 failedPlanNo = 6;
  void clear_failedplanno();
  int64_t failedplanno() const;
  void set_failedplanno(int64_t value);
  private:
  int64_t _internal_failedplanno() const;
  void _internal_set_failedplanno(int64_t value);
  public:

  // .milvus.proto.common.CompactionState state = 2;
  void clear_state();
  ::milvus::proto::common::CompactionState state() const;
  void set_state(::milvus::proto::common::CompactionState value);
  private:
  ::milvus::proto::common::CompactionState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::CompactionState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetCompactionStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    int64_t executingplanno_;
    int64_t timeoutplanno_;
    int64_t completedplanno_;
    int64_t failedplanno_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetCompactionPlansRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetCompactionPlansRequest) */ {
 public:
  inline GetCompactionPlansRequest() : GetCompactionPlansRequest(nullptr) {}
  ~GetCompactionPlansRequest() override;
  explicit PROTOBUF_CONSTEXPR GetCompactionPlansRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCompactionPlansRequest(const GetCompactionPlansRequest& from);
  GetCompactionPlansRequest(GetCompactionPlansRequest&& from) noexcept
    : GetCompactionPlansRequest() {
    *this = ::std::move(from);
  }

  inline GetCompactionPlansRequest& operator=(const GetCompactionPlansRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCompactionPlansRequest& operator=(GetCompactionPlansRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCompactionPlansRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCompactionPlansRequest* internal_default_instance() {
    return reinterpret_cast<const GetCompactionPlansRequest*>(
               &_GetCompactionPlansRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(GetCompactionPlansRequest& a, GetCompactionPlansRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCompactionPlansRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCompactionPlansRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCompactionPlansRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCompactionPlansRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCompactionPlansRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCompactionPlansRequest& from) {
    GetCompactionPlansRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCompactionPlansRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetCompactionPlansRequest";
  }
  protected:
  explicit GetCompactionPlansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompactionIDFieldNumber = 1,
  };
  // int64 compactionID = 1;
  void clear_compactionid();
  int64_t compactionid() const;
  void set_compactionid(int64_t value);
  private:
  int64_t _internal_compactionid() const;
  void _internal_set_compactionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetCompactionPlansRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t compactionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetCompactionPlansResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetCompactionPlansResponse) */ {
 public:
  inline GetCompactionPlansResponse() : GetCompactionPlansResponse(nullptr) {}
  ~GetCompactionPlansResponse() override;
  explicit PROTOBUF_CONSTEXPR GetCompactionPlansResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCompactionPlansResponse(const GetCompactionPlansResponse& from);
  GetCompactionPlansResponse(GetCompactionPlansResponse&& from) noexcept
    : GetCompactionPlansResponse() {
    *this = ::std::move(from);
  }

  inline GetCompactionPlansResponse& operator=(const GetCompactionPlansResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCompactionPlansResponse& operator=(GetCompactionPlansResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCompactionPlansResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCompactionPlansResponse* internal_default_instance() {
    return reinterpret_cast<const GetCompactionPlansResponse*>(
               &_GetCompactionPlansResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(GetCompactionPlansResponse& a, GetCompactionPlansResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCompactionPlansResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCompactionPlansResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCompactionPlansResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCompactionPlansResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCompactionPlansResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCompactionPlansResponse& from) {
    GetCompactionPlansResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCompactionPlansResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetCompactionPlansResponse";
  }
  protected:
  explicit GetCompactionPlansResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMergeInfosFieldNumber = 3,
    kStatusFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // repeated .milvus.proto.milvus.CompactionMergeInfo mergeInfos = 3;
  int mergeinfos_size() const;
  private:
  int _internal_mergeinfos_size() const;
  public:
  void clear_mergeinfos();
  ::milvus::proto::milvus::CompactionMergeInfo* mutable_mergeinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::CompactionMergeInfo >*
      mutable_mergeinfos();
  private:
  const ::milvus::proto::milvus::CompactionMergeInfo& _internal_mergeinfos(int index) const;
  ::milvus::proto::milvus::CompactionMergeInfo* _internal_add_mergeinfos();
  public:
  const ::milvus::proto::milvus::CompactionMergeInfo& mergeinfos(int index) const;
  ::milvus::proto::milvus::CompactionMergeInfo* add_mergeinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::CompactionMergeInfo >&
      mergeinfos() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // .milvus.proto.common.CompactionState state = 2;
  void clear_state();
  ::milvus::proto::common::CompactionState state() const;
  void set_state(::milvus::proto::common::CompactionState value);
  private:
  ::milvus::proto::common::CompactionState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::CompactionState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetCompactionPlansResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::CompactionMergeInfo > mergeinfos_;
    ::milvus::proto::common::Status* status_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CompactionMergeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CompactionMergeInfo) */ {
 public:
  inline CompactionMergeInfo() : CompactionMergeInfo(nullptr) {}
  ~CompactionMergeInfo() override;
  explicit PROTOBUF_CONSTEXPR CompactionMergeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompactionMergeInfo(const CompactionMergeInfo& from);
  CompactionMergeInfo(CompactionMergeInfo&& from) noexcept
    : CompactionMergeInfo() {
    *this = ::std::move(from);
  }

  inline CompactionMergeInfo& operator=(const CompactionMergeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactionMergeInfo& operator=(CompactionMergeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompactionMergeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompactionMergeInfo* internal_default_instance() {
    return reinterpret_cast<const CompactionMergeInfo*>(
               &_CompactionMergeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CompactionMergeInfo& a, CompactionMergeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactionMergeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompactionMergeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompactionMergeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompactionMergeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompactionMergeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompactionMergeInfo& from) {
    CompactionMergeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactionMergeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CompactionMergeInfo";
  }
  protected:
  explicit CompactionMergeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcesFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // repeated int64 sources = 1;
  int sources_size() const;
  private:
  int _internal_sources_size() const;
  public:
  void clear_sources();
  private:
  int64_t _internal_sources(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sources() const;
  void _internal_add_sources(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sources();
  public:
  int64_t sources(int index) const;
  void set_sources(int index, int64_t value);
  void add_sources(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sources() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sources();

  // int64 target = 2;
  void clear_target();
  int64_t target() const;
  void set_target(int64_t value);
  private:
  int64_t _internal_target() const;
  void _internal_set_target(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CompactionMergeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sources_;
    mutable std::atomic<int> _sources_cached_byte_size_;
    int64_t target_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetFlushStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetFlushStateRequest) */ {
 public:
  inline GetFlushStateRequest() : GetFlushStateRequest(nullptr) {}
  ~GetFlushStateRequest() override;
  explicit PROTOBUF_CONSTEXPR GetFlushStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFlushStateRequest(const GetFlushStateRequest& from);
  GetFlushStateRequest(GetFlushStateRequest&& from) noexcept
    : GetFlushStateRequest() {
    *this = ::std::move(from);
  }

  inline GetFlushStateRequest& operator=(const GetFlushStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFlushStateRequest& operator=(GetFlushStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFlushStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFlushStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetFlushStateRequest*>(
               &_GetFlushStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(GetFlushStateRequest& a, GetFlushStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFlushStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFlushStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFlushStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFlushStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFlushStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFlushStateRequest& from) {
    GetFlushStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFlushStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetFlushStateRequest";
  }
  protected:
  explicit GetFlushStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDsFieldNumber = 1,
  };
  // repeated int64 segmentIDs = 1;
  int segmentids_size() const;
  private:
  int _internal_segmentids_size() const;
  public:
  void clear_segmentids();
  private:
  int64_t _internal_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segmentids() const;
  void _internal_add_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segmentids();
  public:
  int64_t segmentids(int index) const;
  void set_segmentids(int index, int64_t value);
  void add_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segmentids();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetFlushStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segmentids_;
    mutable std::atomic<int> _segmentids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetFlushStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetFlushStateResponse) */ {
 public:
  inline GetFlushStateResponse() : GetFlushStateResponse(nullptr) {}
  ~GetFlushStateResponse() override;
  explicit PROTOBUF_CONSTEXPR GetFlushStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFlushStateResponse(const GetFlushStateResponse& from);
  GetFlushStateResponse(GetFlushStateResponse&& from) noexcept
    : GetFlushStateResponse() {
    *this = ::std::move(from);
  }

  inline GetFlushStateResponse& operator=(const GetFlushStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFlushStateResponse& operator=(GetFlushStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFlushStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFlushStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetFlushStateResponse*>(
               &_GetFlushStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(GetFlushStateResponse& a, GetFlushStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFlushStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFlushStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFlushStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFlushStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFlushStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFlushStateResponse& from) {
    GetFlushStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFlushStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetFlushStateResponse";
  }
  protected:
  explicit GetFlushStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kFlushedFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // bool flushed = 2;
  void clear_flushed();
  bool flushed() const;
  void set_flushed(bool value);
  private:
  bool _internal_flushed() const;
  void _internal_set_flushed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetFlushStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    bool flushed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetFlushAllStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetFlushAllStateRequest) */ {
 public:
  inline GetFlushAllStateRequest() : GetFlushAllStateRequest(nullptr) {}
  ~GetFlushAllStateRequest() override;
  explicit PROTOBUF_CONSTEXPR GetFlushAllStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFlushAllStateRequest(const GetFlushAllStateRequest& from);
  GetFlushAllStateRequest(GetFlushAllStateRequest&& from) noexcept
    : GetFlushAllStateRequest() {
    *this = ::std::move(from);
  }

  inline GetFlushAllStateRequest& operator=(const GetFlushAllStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFlushAllStateRequest& operator=(GetFlushAllStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFlushAllStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFlushAllStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetFlushAllStateRequest*>(
               &_GetFlushAllStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(GetFlushAllStateRequest& a, GetFlushAllStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFlushAllStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFlushAllStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFlushAllStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFlushAllStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFlushAllStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFlushAllStateRequest& from) {
    GetFlushAllStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFlushAllStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetFlushAllStateRequest";
  }
  protected:
  explicit GetFlushAllStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kFlushAllTsFieldNumber = 2,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // uint64 flush_all_ts = 2;
  void clear_flush_all_ts();
  uint64_t flush_all_ts() const;
  void set_flush_all_ts(uint64_t value);
  private:
  uint64_t _internal_flush_all_ts() const;
  void _internal_set_flush_all_ts(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetFlushAllStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    uint64_t flush_all_ts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetFlushAllStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetFlushAllStateResponse) */ {
 public:
  inline GetFlushAllStateResponse() : GetFlushAllStateResponse(nullptr) {}
  ~GetFlushAllStateResponse() override;
  explicit PROTOBUF_CONSTEXPR GetFlushAllStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFlushAllStateResponse(const GetFlushAllStateResponse& from);
  GetFlushAllStateResponse(GetFlushAllStateResponse&& from) noexcept
    : GetFlushAllStateResponse() {
    *this = ::std::move(from);
  }

  inline GetFlushAllStateResponse& operator=(const GetFlushAllStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFlushAllStateResponse& operator=(GetFlushAllStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFlushAllStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFlushAllStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetFlushAllStateResponse*>(
               &_GetFlushAllStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(GetFlushAllStateResponse& a, GetFlushAllStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFlushAllStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFlushAllStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFlushAllStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFlushAllStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFlushAllStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFlushAllStateResponse& from) {
    GetFlushAllStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFlushAllStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetFlushAllStateResponse";
  }
  protected:
  explicit GetFlushAllStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kFlushedFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // bool flushed = 2;
  void clear_flushed();
  bool flushed() const;
  void set_flushed(bool value);
  private:
  bool _internal_flushed() const;
  void _internal_set_flushed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetFlushAllStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    bool flushed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ImportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ImportRequest) */ {
 public:
  inline ImportRequest() : ImportRequest(nullptr) {}
  ~ImportRequest() override;
  explicit PROTOBUF_CONSTEXPR ImportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportRequest(const ImportRequest& from);
  ImportRequest(ImportRequest&& from) noexcept
    : ImportRequest() {
    *this = ::std::move(from);
  }

  inline ImportRequest& operator=(const ImportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportRequest& operator=(ImportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportRequest* internal_default_instance() {
    return reinterpret_cast<const ImportRequest*>(
               &_ImportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(ImportRequest& a, ImportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportRequest& from) {
    ImportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ImportRequest";
  }
  protected:
  explicit ImportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNamesFieldNumber = 3,
    kFilesFieldNumber = 5,
    kOptionsFieldNumber = 6,
    kCollectionNameFieldNumber = 1,
    kPartitionNameFieldNumber = 2,
    kDbNameFieldNumber = 7,
    kRowBasedFieldNumber = 4,
  };
  // repeated string channel_names = 3;
  int channel_names_size() const;
  private:
  int _internal_channel_names_size() const;
  public:
  void clear_channel_names();
  const std::string& channel_names(int index) const;
  std::string* mutable_channel_names(int index);
  void set_channel_names(int index, const std::string& value);
  void set_channel_names(int index, std::string&& value);
  void set_channel_names(int index, const char* value);
  void set_channel_names(int index, const char* value, size_t size);
  std::string* add_channel_names();
  void add_channel_names(const std::string& value);
  void add_channel_names(std::string&& value);
  void add_channel_names(const char* value);
  void add_channel_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channel_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channel_names();
  private:
  const std::string& _internal_channel_names(int index) const;
  std::string* _internal_add_channel_names();
  public:

  // repeated string files = 5;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  const std::string& files(int index) const;
  std::string* mutable_files(int index);
  void set_files(int index, const std::string& value);
  void set_files(int index, std::string&& value);
  void set_files(int index, const char* value);
  void set_files(int index, const char* value, size_t size);
  std::string* add_files();
  void add_files(const std::string& value);
  void add_files(std::string&& value);
  void add_files(const char* value);
  void add_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_files();
  private:
  const std::string& _internal_files(int index) const;
  std::string* _internal_add_files();
  public:

  // repeated .milvus.proto.common.KeyValuePair options = 6;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  ::milvus::proto::common::KeyValuePair* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_options();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_options(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_options();
  public:
  const ::milvus::proto::common::KeyValuePair& options(int index) const;
  ::milvus::proto::common::KeyValuePair* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      options() const;

  // string collection_name = 1;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 2;
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // string db_name = 7;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // bool row_based = 4;
  void clear_row_based();
  bool row_based() const;
  void set_row_based(bool value);
  private:
  bool _internal_row_based() const;
  void _internal_set_row_based(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ImportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channel_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> files_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > options_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    bool row_based_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ImportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ImportResponse) */ {
 public:
  inline ImportResponse() : ImportResponse(nullptr) {}
  ~ImportResponse() override;
  explicit PROTOBUF_CONSTEXPR ImportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportResponse(const ImportResponse& from);
  ImportResponse(ImportResponse&& from) noexcept
    : ImportResponse() {
    *this = ::std::move(from);
  }

  inline ImportResponse& operator=(const ImportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportResponse& operator=(ImportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportResponse* internal_default_instance() {
    return reinterpret_cast<const ImportResponse*>(
               &_ImportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(ImportResponse& a, ImportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportResponse& from) {
    ImportResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ImportResponse";
  }
  protected:
  explicit ImportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated int64 tasks = 2;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  private:
  int64_t _internal_tasks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_tasks() const;
  void _internal_add_tasks(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_tasks();
  public:
  int64_t tasks(int index) const;
  void set_tasks(int index, int64_t value);
  void add_tasks(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      tasks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_tasks();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ImportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > tasks_;
    mutable std::atomic<int> _tasks_cached_byte_size_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetImportStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetImportStateRequest) */ {
 public:
  inline GetImportStateRequest() : GetImportStateRequest(nullptr) {}
  ~GetImportStateRequest() override;
  explicit PROTOBUF_CONSTEXPR GetImportStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetImportStateRequest(const GetImportStateRequest& from);
  GetImportStateRequest(GetImportStateRequest&& from) noexcept
    : GetImportStateRequest() {
    *this = ::std::move(from);
  }

  inline GetImportStateRequest& operator=(const GetImportStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImportStateRequest& operator=(GetImportStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImportStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImportStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetImportStateRequest*>(
               &_GetImportStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(GetImportStateRequest& a, GetImportStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImportStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImportStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetImportStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetImportStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetImportStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetImportStateRequest& from) {
    GetImportStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImportStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetImportStateRequest";
  }
  protected:
  explicit GetImportStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 1,
  };
  // int64 task = 1;
  void clear_task();
  int64_t task() const;
  void set_task(int64_t value);
  private:
  int64_t _internal_task() const;
  void _internal_set_task(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetImportStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t task_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetImportStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetImportStateResponse) */ {
 public:
  inline GetImportStateResponse() : GetImportStateResponse(nullptr) {}
  ~GetImportStateResponse() override;
  explicit PROTOBUF_CONSTEXPR GetImportStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetImportStateResponse(const GetImportStateResponse& from);
  GetImportStateResponse(GetImportStateResponse&& from) noexcept
    : GetImportStateResponse() {
    *this = ::std::move(from);
  }

  inline GetImportStateResponse& operator=(const GetImportStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImportStateResponse& operator=(GetImportStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImportStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImportStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetImportStateResponse*>(
               &_GetImportStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(GetImportStateResponse& a, GetImportStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImportStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImportStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetImportStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetImportStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetImportStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetImportStateResponse& from) {
    GetImportStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImportStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetImportStateResponse";
  }
  protected:
  explicit GetImportStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdListFieldNumber = 4,
    kInfosFieldNumber = 5,
    kSegmentIdsFieldNumber = 8,
    kStatusFieldNumber = 1,
    kRowCountFieldNumber = 3,
    kIdFieldNumber = 6,
    kCollectionIdFieldNumber = 7,
    kCreateTsFieldNumber = 9,
    kStateFieldNumber = 2,
  };
  // repeated int64 id_list = 4;
  int id_list_size() const;
  private:
  int _internal_id_list_size() const;
  public:
  void clear_id_list();
  private:
  int64_t _internal_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_id_list() const;
  void _internal_add_id_list(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_id_list();
  public:
  int64_t id_list(int index) const;
  void set_id_list(int index, int64_t value);
  void add_id_list(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_id_list();

  // repeated .milvus.proto.common.KeyValuePair infos = 5;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::milvus::proto::common::KeyValuePair* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_infos();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_infos(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_infos();
  public:
  const ::milvus::proto::common::KeyValuePair& infos(int index) const;
  ::milvus::proto::common::KeyValuePair* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      infos() const;

  // repeated int64 segment_ids = 8;
  int segment_ids_size() const;
  private:
  int _internal_segment_ids_size() const;
  public:
  void clear_segment_ids();
  private:
  int64_t _internal_segment_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_segment_ids() const;
  void _internal_add_segment_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_segment_ids();
  public:
  int64_t segment_ids(int index) const;
  void set_segment_ids(int index, int64_t value);
  void add_segment_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      segment_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_segment_ids();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // int64 row_count = 3;
  void clear_row_count();
  int64_t row_count() const;
  void set_row_count(int64_t value);
  private:
  int64_t _internal_row_count() const;
  void _internal_set_row_count(int64_t value);
  public:

  // int64 id = 6;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 collection_id = 7;
  void clear_collection_id();
  int64_t collection_id() const;
  void set_collection_id(int64_t value);
  private:
  int64_t _internal_collection_id() const;
  void _internal_set_collection_id(int64_t value);
  public:

  // int64 create_ts = 9;
  void clear_create_ts();
  int64_t create_ts() const;
  void set_create_ts(int64_t value);
  private:
  int64_t _internal_create_ts() const;
  void _internal_set_create_ts(int64_t value);
  public:

  // .milvus.proto.common.ImportState state = 2;
  void clear_state();
  ::milvus::proto::common::ImportState state() const;
  void set_state(::milvus::proto::common::ImportState value);
  private:
  ::milvus::proto::common::ImportState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::ImportState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetImportStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > id_list_;
    mutable std::atomic<int> _id_list_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > segment_ids_;
    mutable std::atomic<int> _segment_ids_cached_byte_size_;
    ::milvus::proto::common::Status* status_;
    int64_t row_count_;
    int64_t id_;
    int64_t collection_id_;
    int64_t create_ts_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ListImportTasksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ListImportTasksRequest) */ {
 public:
  inline ListImportTasksRequest() : ListImportTasksRequest(nullptr) {}
  ~ListImportTasksRequest() override;
  explicit PROTOBUF_CONSTEXPR ListImportTasksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListImportTasksRequest(const ListImportTasksRequest& from);
  ListImportTasksRequest(ListImportTasksRequest&& from) noexcept
    : ListImportTasksRequest() {
    *this = ::std::move(from);
  }

  inline ListImportTasksRequest& operator=(const ListImportTasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListImportTasksRequest& operator=(ListImportTasksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListImportTasksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListImportTasksRequest* internal_default_instance() {
    return reinterpret_cast<const ListImportTasksRequest*>(
               &_ListImportTasksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(ListImportTasksRequest& a, ListImportTasksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListImportTasksRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListImportTasksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListImportTasksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListImportTasksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListImportTasksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListImportTasksRequest& from) {
    ListImportTasksRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListImportTasksRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ListImportTasksRequest";
  }
  protected:
  explicit ListImportTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNameFieldNumber = 1,
    kDbNameFieldNumber = 3,
    kLimitFieldNumber = 2,
  };
  // string collection_name = 1;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string db_name = 3;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // int64 limit = 2;
  void clear_limit();
  int64_t limit() const;
  void set_limit(int64_t value);
  private:
  int64_t _internal_limit() const;
  void _internal_set_limit(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ListImportTasksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    int64_t limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ListImportTasksResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ListImportTasksResponse) */ {
 public:
  inline ListImportTasksResponse() : ListImportTasksResponse(nullptr) {}
  ~ListImportTasksResponse() override;
  explicit PROTOBUF_CONSTEXPR ListImportTasksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListImportTasksResponse(const ListImportTasksResponse& from);
  ListImportTasksResponse(ListImportTasksResponse&& from) noexcept
    : ListImportTasksResponse() {
    *this = ::std::move(from);
  }

  inline ListImportTasksResponse& operator=(const ListImportTasksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListImportTasksResponse& operator=(ListImportTasksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListImportTasksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListImportTasksResponse* internal_default_instance() {
    return reinterpret_cast<const ListImportTasksResponse*>(
               &_ListImportTasksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(ListImportTasksResponse& a, ListImportTasksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListImportTasksResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListImportTasksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListImportTasksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListImportTasksResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListImportTasksResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListImportTasksResponse& from) {
    ListImportTasksResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListImportTasksResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ListImportTasksResponse";
  }
  protected:
  explicit ListImportTasksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.GetImportStateResponse tasks = 2;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::milvus::proto::milvus::GetImportStateResponse* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GetImportStateResponse >*
      mutable_tasks();
  private:
  const ::milvus::proto::milvus::GetImportStateResponse& _internal_tasks(int index) const;
  ::milvus::proto::milvus::GetImportStateResponse* _internal_add_tasks();
  public:
  const ::milvus::proto::milvus::GetImportStateResponse& tasks(int index) const;
  ::milvus::proto::milvus::GetImportStateResponse* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GetImportStateResponse >&
      tasks() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ListImportTasksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GetImportStateResponse > tasks_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetReplicasRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetReplicasRequest) */ {
 public:
  inline GetReplicasRequest() : GetReplicasRequest(nullptr) {}
  ~GetReplicasRequest() override;
  explicit PROTOBUF_CONSTEXPR GetReplicasRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetReplicasRequest(const GetReplicasRequest& from);
  GetReplicasRequest(GetReplicasRequest&& from) noexcept
    : GetReplicasRequest() {
    *this = ::std::move(from);
  }

  inline GetReplicasRequest& operator=(const GetReplicasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReplicasRequest& operator=(GetReplicasRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReplicasRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReplicasRequest* internal_default_instance() {
    return reinterpret_cast<const GetReplicasRequest*>(
               &_GetReplicasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(GetReplicasRequest& a, GetReplicasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReplicasRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReplicasRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReplicasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetReplicasRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetReplicasRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetReplicasRequest& from) {
    GetReplicasRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReplicasRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetReplicasRequest";
  }
  protected:
  explicit GetReplicasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNameFieldNumber = 4,
    kDbNameFieldNumber = 5,
    kBaseFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kWithShardNodesFieldNumber = 3,
  };
  // string collection_name = 4;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string db_name = 5;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 collectionID = 2;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // bool with_shard_nodes = 3;
  void clear_with_shard_nodes();
  bool with_shard_nodes() const;
  void set_with_shard_nodes(bool value);
  private:
  bool _internal_with_shard_nodes() const;
  void _internal_set_with_shard_nodes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetReplicasRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t collectionid_;
    bool with_shard_nodes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetReplicasResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetReplicasResponse) */ {
 public:
  inline GetReplicasResponse() : GetReplicasResponse(nullptr) {}
  ~GetReplicasResponse() override;
  explicit PROTOBUF_CONSTEXPR GetReplicasResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetReplicasResponse(const GetReplicasResponse& from);
  GetReplicasResponse(GetReplicasResponse&& from) noexcept
    : GetReplicasResponse() {
    *this = ::std::move(from);
  }

  inline GetReplicasResponse& operator=(const GetReplicasResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReplicasResponse& operator=(GetReplicasResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReplicasResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReplicasResponse* internal_default_instance() {
    return reinterpret_cast<const GetReplicasResponse*>(
               &_GetReplicasResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(GetReplicasResponse& a, GetReplicasResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReplicasResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReplicasResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReplicasResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetReplicasResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetReplicasResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetReplicasResponse& from) {
    GetReplicasResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReplicasResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetReplicasResponse";
  }
  protected:
  explicit GetReplicasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplicasFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.ReplicaInfo replicas = 2;
  int replicas_size() const;
  private:
  int _internal_replicas_size() const;
  public:
  void clear_replicas();
  ::milvus::proto::milvus::ReplicaInfo* mutable_replicas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ReplicaInfo >*
      mutable_replicas();
  private:
  const ::milvus::proto::milvus::ReplicaInfo& _internal_replicas(int index) const;
  ::milvus::proto::milvus::ReplicaInfo* _internal_add_replicas();
  public:
  const ::milvus::proto::milvus::ReplicaInfo& replicas(int index) const;
  ::milvus::proto::milvus::ReplicaInfo* add_replicas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ReplicaInfo >&
      replicas() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetReplicasResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ReplicaInfo > replicas_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ReplicaInfo_NumOutboundNodeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ReplicaInfo_NumOutboundNodeEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ReplicaInfo_NumOutboundNodeEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  ReplicaInfo_NumOutboundNodeEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ReplicaInfo_NumOutboundNodeEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ReplicaInfo_NumOutboundNodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ReplicaInfo_NumOutboundNodeEntry_DoNotUse& other);
  static const ReplicaInfo_NumOutboundNodeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ReplicaInfo_NumOutboundNodeEntry_DoNotUse*>(&_ReplicaInfo_NumOutboundNodeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "milvus.proto.milvus.ReplicaInfo.NumOutboundNodeEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_milvus_2eproto;
};

// -------------------------------------------------------------------

class ReplicaInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ReplicaInfo) */ {
 public:
  inline ReplicaInfo() : ReplicaInfo(nullptr) {}
  ~ReplicaInfo() override;
  explicit PROTOBUF_CONSTEXPR ReplicaInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplicaInfo(const ReplicaInfo& from);
  ReplicaInfo(ReplicaInfo&& from) noexcept
    : ReplicaInfo() {
    *this = ::std::move(from);
  }

  inline ReplicaInfo& operator=(const ReplicaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicaInfo& operator=(ReplicaInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicaInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicaInfo* internal_default_instance() {
    return reinterpret_cast<const ReplicaInfo*>(
               &_ReplicaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(ReplicaInfo& a, ReplicaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicaInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplicaInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplicaInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplicaInfo& from) {
    ReplicaInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicaInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ReplicaInfo";
  }
  protected:
  explicit ReplicaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPartitionIdsFieldNumber = 3,
    kShardReplicasFieldNumber = 4,
    kNodeIdsFieldNumber = 5,
    kNumOutboundNodeFieldNumber = 7,
    kResourceGroupNameFieldNumber = 6,
    kReplicaIDFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
  };
  // repeated int64 partition_ids = 3;
  int partition_ids_size() const;
  private:
  int _internal_partition_ids_size() const;
  public:
  void clear_partition_ids();
  private:
  int64_t _internal_partition_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_partition_ids() const;
  void _internal_add_partition_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_partition_ids();
  public:
  int64_t partition_ids(int index) const;
  void set_partition_ids(int index, int64_t value);
  void add_partition_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      partition_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_partition_ids();

  // repeated .milvus.proto.milvus.ShardReplica shard_replicas = 4;
  int shard_replicas_size() const;
  private:
  int _internal_shard_replicas_size() const;
  public:
  void clear_shard_replicas();
  ::milvus::proto::milvus::ShardReplica* mutable_shard_replicas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ShardReplica >*
      mutable_shard_replicas();
  private:
  const ::milvus::proto::milvus::ShardReplica& _internal_shard_replicas(int index) const;
  ::milvus::proto::milvus::ShardReplica* _internal_add_shard_replicas();
  public:
  const ::milvus::proto::milvus::ShardReplica& shard_replicas(int index) const;
  ::milvus::proto::milvus::ShardReplica* add_shard_replicas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ShardReplica >&
      shard_replicas() const;

  // repeated int64 node_ids = 5;
  int node_ids_size() const;
  private:
  int _internal_node_ids_size() const;
  public:
  void clear_node_ids();
  private:
  int64_t _internal_node_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_node_ids() const;
  void _internal_add_node_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_node_ids();
  public:
  int64_t node_ids(int index) const;
  void set_node_ids(int index, int64_t value);
  void add_node_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      node_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_node_ids();

  // map<string, int32> num_outbound_node = 7;
  int num_outbound_node_size() const;
  private:
  int _internal_num_outbound_node_size() const;
  public:
  void clear_num_outbound_node();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_num_outbound_node() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_num_outbound_node();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      num_outbound_node() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_num_outbound_node();

  // string resource_group_name = 6;
  void clear_resource_group_name();
  const std::string& resource_group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource_group_name();
  PROTOBUF_NODISCARD std::string* release_resource_group_name();
  void set_allocated_resource_group_name(std::string* resource_group_name);
  private:
  const std::string& _internal_resource_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_group_name(const std::string& value);
  std::string* _internal_mutable_resource_group_name();
  public:

  // int64 replicaID = 1;
  void clear_replicaid();
  int64_t replicaid() const;
  void set_replicaid(int64_t value);
  private:
  int64_t _internal_replicaid() const;
  void _internal_set_replicaid(int64_t value);
  public:

  // int64 collectionID = 2;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ReplicaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > partition_ids_;
    mutable std::atomic<int> _partition_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ShardReplica > shard_replicas_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > node_ids_;
    mutable std::atomic<int> _node_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ReplicaInfo_NumOutboundNodeEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> num_outbound_node_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_group_name_;
    int64_t replicaid_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ShardReplica final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ShardReplica) */ {
 public:
  inline ShardReplica() : ShardReplica(nullptr) {}
  ~ShardReplica() override;
  explicit PROTOBUF_CONSTEXPR ShardReplica(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShardReplica(const ShardReplica& from);
  ShardReplica(ShardReplica&& from) noexcept
    : ShardReplica() {
    *this = ::std::move(from);
  }

  inline ShardReplica& operator=(const ShardReplica& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardReplica& operator=(ShardReplica&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardReplica& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShardReplica* internal_default_instance() {
    return reinterpret_cast<const ShardReplica*>(
               &_ShardReplica_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(ShardReplica& a, ShardReplica& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardReplica* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardReplica* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardReplica* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShardReplica>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShardReplica& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShardReplica& from) {
    ShardReplica::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardReplica* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ShardReplica";
  }
  protected:
  explicit ShardReplica(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdsFieldNumber = 4,
    kLeaderAddrFieldNumber = 2,
    kDmChannelNameFieldNumber = 3,
    kLeaderIDFieldNumber = 1,
  };
  // repeated int64 node_ids = 4;
  int node_ids_size() const;
  private:
  int _internal_node_ids_size() const;
  public:
  void clear_node_ids();
  private:
  int64_t _internal_node_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_node_ids() const;
  void _internal_add_node_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_node_ids();
  public:
  int64_t node_ids(int index) const;
  void set_node_ids(int index, int64_t value);
  void add_node_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      node_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_node_ids();

  // string leader_addr = 2;
  void clear_leader_addr();
  const std::string& leader_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leader_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leader_addr();
  PROTOBUF_NODISCARD std::string* release_leader_addr();
  void set_allocated_leader_addr(std::string* leader_addr);
  private:
  const std::string& _internal_leader_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader_addr(const std::string& value);
  std::string* _internal_mutable_leader_addr();
  public:

  // string dm_channel_name = 3;
  void clear_dm_channel_name();
  const std::string& dm_channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dm_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dm_channel_name();
  PROTOBUF_NODISCARD std::string* release_dm_channel_name();
  void set_allocated_dm_channel_name(std::string* dm_channel_name);
  private:
  const std::string& _internal_dm_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dm_channel_name(const std::string& value);
  std::string* _internal_mutable_dm_channel_name();
  public:

  // int64 leaderID = 1;
  void clear_leaderid();
  int64_t leaderid() const;
  void set_leaderid(int64_t value);
  private:
  int64_t _internal_leaderid() const;
  void _internal_set_leaderid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ShardReplica)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > node_ids_;
    mutable std::atomic<int> _node_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dm_channel_name_;
    int64_t leaderid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CreateCredentialRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CreateCredentialRequest) */ {
 public:
  inline CreateCredentialRequest() : CreateCredentialRequest(nullptr) {}
  ~CreateCredentialRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateCredentialRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCredentialRequest(const CreateCredentialRequest& from);
  CreateCredentialRequest(CreateCredentialRequest&& from) noexcept
    : CreateCredentialRequest() {
    *this = ::std::move(from);
  }

  inline CreateCredentialRequest& operator=(const CreateCredentialRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCredentialRequest& operator=(CreateCredentialRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCredentialRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCredentialRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCredentialRequest*>(
               &_CreateCredentialRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(CreateCredentialRequest& a, CreateCredentialRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCredentialRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCredentialRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCredentialRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCredentialRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCredentialRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateCredentialRequest& from) {
    CreateCredentialRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCredentialRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CreateCredentialRequest";
  }
  protected:
  explicit CreateCredentialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kBaseFieldNumber = 1,
    kCreatedUtcTimestampsFieldNumber = 4,
    kModifiedUtcTimestampsFieldNumber = 5,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // uint64 created_utc_timestamps = 4;
  void clear_created_utc_timestamps();
  uint64_t created_utc_timestamps() const;
  void set_created_utc_timestamps(uint64_t value);
  private:
  uint64_t _internal_created_utc_timestamps() const;
  void _internal_set_created_utc_timestamps(uint64_t value);
  public:

  // uint64 modified_utc_timestamps = 5;
  void clear_modified_utc_timestamps();
  uint64_t modified_utc_timestamps() const;
  void set_modified_utc_timestamps(uint64_t value);
  private:
  uint64_t _internal_modified_utc_timestamps() const;
  void _internal_set_modified_utc_timestamps(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CreateCredentialRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::milvus::proto::common::MsgBase* base_;
    uint64_t created_utc_timestamps_;
    uint64_t modified_utc_timestamps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class UpdateCredentialRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.UpdateCredentialRequest) */ {
 public:
  inline UpdateCredentialRequest() : UpdateCredentialRequest(nullptr) {}
  ~UpdateCredentialRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateCredentialRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateCredentialRequest(const UpdateCredentialRequest& from);
  UpdateCredentialRequest(UpdateCredentialRequest&& from) noexcept
    : UpdateCredentialRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCredentialRequest& operator=(const UpdateCredentialRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCredentialRequest& operator=(UpdateCredentialRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateCredentialRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateCredentialRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCredentialRequest*>(
               &_UpdateCredentialRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(UpdateCredentialRequest& a, UpdateCredentialRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCredentialRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCredentialRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateCredentialRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateCredentialRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateCredentialRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateCredentialRequest& from) {
    UpdateCredentialRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCredentialRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.UpdateCredentialRequest";
  }
  protected:
  explicit UpdateCredentialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kOldPasswordFieldNumber = 3,
    kNewPasswordFieldNumber = 4,
    kBaseFieldNumber = 1,
    kCreatedUtcTimestampsFieldNumber = 5,
    kModifiedUtcTimestampsFieldNumber = 6,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string oldPassword = 3;
  void clear_oldpassword();
  const std::string& oldpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldpassword();
  PROTOBUF_NODISCARD std::string* release_oldpassword();
  void set_allocated_oldpassword(std::string* oldpassword);
  private:
  const std::string& _internal_oldpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oldpassword(const std::string& value);
  std::string* _internal_mutable_oldpassword();
  public:

  // string newPassword = 4;
  void clear_newpassword();
  const std::string& newpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newpassword();
  PROTOBUF_NODISCARD std::string* release_newpassword();
  void set_allocated_newpassword(std::string* newpassword);
  private:
  const std::string& _internal_newpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newpassword(const std::string& value);
  std::string* _internal_mutable_newpassword();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // uint64 created_utc_timestamps = 5;
  void clear_created_utc_timestamps();
  uint64_t created_utc_timestamps() const;
  void set_created_utc_timestamps(uint64_t value);
  private:
  uint64_t _internal_created_utc_timestamps() const;
  void _internal_set_created_utc_timestamps(uint64_t value);
  public:

  // uint64 modified_utc_timestamps = 6;
  void clear_modified_utc_timestamps();
  uint64_t modified_utc_timestamps() const;
  void set_modified_utc_timestamps(uint64_t value);
  private:
  uint64_t _internal_modified_utc_timestamps() const;
  void _internal_set_modified_utc_timestamps(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.UpdateCredentialRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldpassword_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newpassword_;
    ::milvus::proto::common::MsgBase* base_;
    uint64_t created_utc_timestamps_;
    uint64_t modified_utc_timestamps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DeleteCredentialRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DeleteCredentialRequest) */ {
 public:
  inline DeleteCredentialRequest() : DeleteCredentialRequest(nullptr) {}
  ~DeleteCredentialRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteCredentialRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteCredentialRequest(const DeleteCredentialRequest& from);
  DeleteCredentialRequest(DeleteCredentialRequest&& from) noexcept
    : DeleteCredentialRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCredentialRequest& operator=(const DeleteCredentialRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCredentialRequest& operator=(DeleteCredentialRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCredentialRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCredentialRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCredentialRequest*>(
               &_DeleteCredentialRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(DeleteCredentialRequest& a, DeleteCredentialRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCredentialRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCredentialRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteCredentialRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteCredentialRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteCredentialRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteCredentialRequest& from) {
    DeleteCredentialRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCredentialRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DeleteCredentialRequest";
  }
  protected:
  explicit DeleteCredentialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DeleteCredentialRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ListCredUsersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ListCredUsersResponse) */ {
 public:
  inline ListCredUsersResponse() : ListCredUsersResponse(nullptr) {}
  ~ListCredUsersResponse() override;
  explicit PROTOBUF_CONSTEXPR ListCredUsersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCredUsersResponse(const ListCredUsersResponse& from);
  ListCredUsersResponse(ListCredUsersResponse&& from) noexcept
    : ListCredUsersResponse() {
    *this = ::std::move(from);
  }

  inline ListCredUsersResponse& operator=(const ListCredUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCredUsersResponse& operator=(ListCredUsersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCredUsersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCredUsersResponse* internal_default_instance() {
    return reinterpret_cast<const ListCredUsersResponse*>(
               &_ListCredUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(ListCredUsersResponse& a, ListCredUsersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCredUsersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCredUsersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCredUsersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCredUsersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCredUsersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListCredUsersResponse& from) {
    ListCredUsersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCredUsersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ListCredUsersResponse";
  }
  protected:
  explicit ListCredUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernamesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string usernames = 2;
  int usernames_size() const;
  private:
  int _internal_usernames_size() const;
  public:
  void clear_usernames();
  const std::string& usernames(int index) const;
  std::string* mutable_usernames(int index);
  void set_usernames(int index, const std::string& value);
  void set_usernames(int index, std::string&& value);
  void set_usernames(int index, const char* value);
  void set_usernames(int index, const char* value, size_t size);
  std::string* add_usernames();
  void add_usernames(const std::string& value);
  void add_usernames(std::string&& value);
  void add_usernames(const char* value);
  void add_usernames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& usernames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_usernames();
  private:
  const std::string& _internal_usernames(int index) const;
  std::string* _internal_add_usernames();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ListCredUsersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> usernames_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ListCredUsersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ListCredUsersRequest) */ {
 public:
  inline ListCredUsersRequest() : ListCredUsersRequest(nullptr) {}
  ~ListCredUsersRequest() override;
  explicit PROTOBUF_CONSTEXPR ListCredUsersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCredUsersRequest(const ListCredUsersRequest& from);
  ListCredUsersRequest(ListCredUsersRequest&& from) noexcept
    : ListCredUsersRequest() {
    *this = ::std::move(from);
  }

  inline ListCredUsersRequest& operator=(const ListCredUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCredUsersRequest& operator=(ListCredUsersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCredUsersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCredUsersRequest* internal_default_instance() {
    return reinterpret_cast<const ListCredUsersRequest*>(
               &_ListCredUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(ListCredUsersRequest& a, ListCredUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCredUsersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCredUsersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCredUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCredUsersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCredUsersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListCredUsersRequest& from) {
    ListCredUsersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCredUsersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ListCredUsersRequest";
  }
  protected:
  explicit ListCredUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ListCredUsersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class RoleEntity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.RoleEntity) */ {
 public:
  inline RoleEntity() : RoleEntity(nullptr) {}
  ~RoleEntity() override;
  explicit PROTOBUF_CONSTEXPR RoleEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleEntity(const RoleEntity& from);
  RoleEntity(RoleEntity&& from) noexcept
    : RoleEntity() {
    *this = ::std::move(from);
  }

  inline RoleEntity& operator=(const RoleEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleEntity& operator=(RoleEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleEntity* internal_default_instance() {
    return reinterpret_cast<const RoleEntity*>(
               &_RoleEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(RoleEntity& a, RoleEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleEntity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleEntity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleEntity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleEntity& from) {
    RoleEntity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleEntity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.RoleEntity";
  }
  protected:
  explicit RoleEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.RoleEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class UserEntity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.UserEntity) */ {
 public:
  inline UserEntity() : UserEntity(nullptr) {}
  ~UserEntity() override;
  explicit PROTOBUF_CONSTEXPR UserEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEntity(const UserEntity& from);
  UserEntity(UserEntity&& from) noexcept
    : UserEntity() {
    *this = ::std::move(from);
  }

  inline UserEntity& operator=(const UserEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEntity& operator=(UserEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserEntity* internal_default_instance() {
    return reinterpret_cast<const UserEntity*>(
               &_UserEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(UserEntity& a, UserEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEntity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserEntity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserEntity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserEntity& from) {
    UserEntity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEntity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.UserEntity";
  }
  protected:
  explicit UserEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.UserEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CreateRoleRequest) */ {
 public:
  inline CreateRoleRequest() : CreateRoleRequest(nullptr) {}
  ~CreateRoleRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateRoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoleRequest(const CreateRoleRequest& from);
  CreateRoleRequest(CreateRoleRequest&& from) noexcept
    : CreateRoleRequest() {
    *this = ::std::move(from);
  }

  inline CreateRoleRequest& operator=(const CreateRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleRequest& operator=(CreateRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoleRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRoleRequest*>(
               &_CreateRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(CreateRoleRequest& a, CreateRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateRoleRequest& from) {
    CreateRoleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CreateRoleRequest";
  }
  protected:
  explicit CreateRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEntityFieldNumber = 2,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.milvus.RoleEntity entity = 2;
  bool has_entity() const;
  private:
  bool _internal_has_entity() const;
  public:
  void clear_entity();
  const ::milvus::proto::milvus::RoleEntity& entity() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::RoleEntity* release_entity();
  ::milvus::proto::milvus::RoleEntity* mutable_entity();
  void set_allocated_entity(::milvus::proto::milvus::RoleEntity* entity);
  private:
  const ::milvus::proto::milvus::RoleEntity& _internal_entity() const;
  ::milvus::proto::milvus::RoleEntity* _internal_mutable_entity();
  public:
  void unsafe_arena_set_allocated_entity(
      ::milvus::proto::milvus::RoleEntity* entity);
  ::milvus::proto::milvus::RoleEntity* unsafe_arena_release_entity();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CreateRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::milvus::RoleEntity* entity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DropRoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DropRoleRequest) */ {
 public:
  inline DropRoleRequest() : DropRoleRequest(nullptr) {}
  ~DropRoleRequest() override;
  explicit PROTOBUF_CONSTEXPR DropRoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropRoleRequest(const DropRoleRequest& from);
  DropRoleRequest(DropRoleRequest&& from) noexcept
    : DropRoleRequest() {
    *this = ::std::move(from);
  }

  inline DropRoleRequest& operator=(const DropRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropRoleRequest& operator=(DropRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropRoleRequest* internal_default_instance() {
    return reinterpret_cast<const DropRoleRequest*>(
               &_DropRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(DropRoleRequest& a, DropRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropRoleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropRoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropRoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropRoleRequest& from) {
    DropRoleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropRoleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DropRoleRequest";
  }
  protected:
  explicit DropRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // string role_name = 2;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DropRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class OperateUserRoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.OperateUserRoleRequest) */ {
 public:
  inline OperateUserRoleRequest() : OperateUserRoleRequest(nullptr) {}
  ~OperateUserRoleRequest() override;
  explicit PROTOBUF_CONSTEXPR OperateUserRoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperateUserRoleRequest(const OperateUserRoleRequest& from);
  OperateUserRoleRequest(OperateUserRoleRequest&& from) noexcept
    : OperateUserRoleRequest() {
    *this = ::std::move(from);
  }

  inline OperateUserRoleRequest& operator=(const OperateUserRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperateUserRoleRequest& operator=(OperateUserRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperateUserRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperateUserRoleRequest* internal_default_instance() {
    return reinterpret_cast<const OperateUserRoleRequest*>(
               &_OperateUserRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(OperateUserRoleRequest& a, OperateUserRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OperateUserRoleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperateUserRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperateUserRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperateUserRoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperateUserRoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperateUserRoleRequest& from) {
    OperateUserRoleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperateUserRoleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.OperateUserRoleRequest";
  }
  protected:
  explicit OperateUserRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kRoleNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kTypeFieldNumber = 4,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string role_name = 3;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.milvus.OperateUserRoleType type = 4;
  void clear_type();
  ::milvus::proto::milvus::OperateUserRoleType type() const;
  void set_type(::milvus::proto::milvus::OperateUserRoleType value);
  private:
  ::milvus::proto::milvus::OperateUserRoleType _internal_type() const;
  void _internal_set_type(::milvus::proto::milvus::OperateUserRoleType value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.OperateUserRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
    ::milvus::proto::common::MsgBase* base_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class SelectRoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.SelectRoleRequest) */ {
 public:
  inline SelectRoleRequest() : SelectRoleRequest(nullptr) {}
  ~SelectRoleRequest() override;
  explicit PROTOBUF_CONSTEXPR SelectRoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectRoleRequest(const SelectRoleRequest& from);
  SelectRoleRequest(SelectRoleRequest&& from) noexcept
    : SelectRoleRequest() {
    *this = ::std::move(from);
  }

  inline SelectRoleRequest& operator=(const SelectRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectRoleRequest& operator=(SelectRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectRoleRequest* internal_default_instance() {
    return reinterpret_cast<const SelectRoleRequest*>(
               &_SelectRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(SelectRoleRequest& a, SelectRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectRoleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectRoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectRoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SelectRoleRequest& from) {
    SelectRoleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectRoleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.SelectRoleRequest";
  }
  protected:
  explicit SelectRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kRoleFieldNumber = 2,
    kIncludeUserInfoFieldNumber = 3,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.milvus.RoleEntity role = 2;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::milvus::proto::milvus::RoleEntity& role() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::RoleEntity* release_role();
  ::milvus::proto::milvus::RoleEntity* mutable_role();
  void set_allocated_role(::milvus::proto::milvus::RoleEntity* role);
  private:
  const ::milvus::proto::milvus::RoleEntity& _internal_role() const;
  ::milvus::proto::milvus::RoleEntity* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::milvus::proto::milvus::RoleEntity* role);
  ::milvus::proto::milvus::RoleEntity* unsafe_arena_release_role();

  // bool include_user_info = 3;
  void clear_include_user_info();
  bool include_user_info() const;
  void set_include_user_info(bool value);
  private:
  bool _internal_include_user_info() const;
  void _internal_set_include_user_info(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.SelectRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::milvus::RoleEntity* role_;
    bool include_user_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class RoleResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.RoleResult) */ {
 public:
  inline RoleResult() : RoleResult(nullptr) {}
  ~RoleResult() override;
  explicit PROTOBUF_CONSTEXPR RoleResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleResult(const RoleResult& from);
  RoleResult(RoleResult&& from) noexcept
    : RoleResult() {
    *this = ::std::move(from);
  }

  inline RoleResult& operator=(const RoleResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleResult& operator=(RoleResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleResult* internal_default_instance() {
    return reinterpret_cast<const RoleResult*>(
               &_RoleResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(RoleResult& a, RoleResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleResult& from) {
    RoleResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.RoleResult";
  }
  protected:
  explicit RoleResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 2,
    kRoleFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.UserEntity users = 2;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::milvus::proto::milvus::UserEntity* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::UserEntity >*
      mutable_users();
  private:
  const ::milvus::proto::milvus::UserEntity& _internal_users(int index) const;
  ::milvus::proto::milvus::UserEntity* _internal_add_users();
  public:
  const ::milvus::proto::milvus::UserEntity& users(int index) const;
  ::milvus::proto::milvus::UserEntity* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::UserEntity >&
      users() const;

  // .milvus.proto.milvus.RoleEntity role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::milvus::proto::milvus::RoleEntity& role() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::RoleEntity* release_role();
  ::milvus::proto::milvus::RoleEntity* mutable_role();
  void set_allocated_role(::milvus::proto::milvus::RoleEntity* role);
  private:
  const ::milvus::proto::milvus::RoleEntity& _internal_role() const;
  ::milvus::proto::milvus::RoleEntity* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::milvus::proto::milvus::RoleEntity* role);
  ::milvus::proto::milvus::RoleEntity* unsafe_arena_release_role();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.RoleResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::UserEntity > users_;
    ::milvus::proto::milvus::RoleEntity* role_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class SelectRoleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.SelectRoleResponse) */ {
 public:
  inline SelectRoleResponse() : SelectRoleResponse(nullptr) {}
  ~SelectRoleResponse() override;
  explicit PROTOBUF_CONSTEXPR SelectRoleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectRoleResponse(const SelectRoleResponse& from);
  SelectRoleResponse(SelectRoleResponse&& from) noexcept
    : SelectRoleResponse() {
    *this = ::std::move(from);
  }

  inline SelectRoleResponse& operator=(const SelectRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectRoleResponse& operator=(SelectRoleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectRoleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectRoleResponse* internal_default_instance() {
    return reinterpret_cast<const SelectRoleResponse*>(
               &_SelectRoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(SelectRoleResponse& a, SelectRoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectRoleResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectRoleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectRoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectRoleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectRoleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SelectRoleResponse& from) {
    SelectRoleResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectRoleResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.SelectRoleResponse";
  }
  protected:
  explicit SelectRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.RoleResult results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::milvus::proto::milvus::RoleResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::RoleResult >*
      mutable_results();
  private:
  const ::milvus::proto::milvus::RoleResult& _internal_results(int index) const;
  ::milvus::proto::milvus::RoleResult* _internal_add_results();
  public:
  const ::milvus::proto::milvus::RoleResult& results(int index) const;
  ::milvus::proto::milvus::RoleResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::RoleResult >&
      results() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.SelectRoleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::RoleResult > results_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class SelectUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.SelectUserRequest) */ {
 public:
  inline SelectUserRequest() : SelectUserRequest(nullptr) {}
  ~SelectUserRequest() override;
  explicit PROTOBUF_CONSTEXPR SelectUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectUserRequest(const SelectUserRequest& from);
  SelectUserRequest(SelectUserRequest&& from) noexcept
    : SelectUserRequest() {
    *this = ::std::move(from);
  }

  inline SelectUserRequest& operator=(const SelectUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectUserRequest& operator=(SelectUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectUserRequest* internal_default_instance() {
    return reinterpret_cast<const SelectUserRequest*>(
               &_SelectUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(SelectUserRequest& a, SelectUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SelectUserRequest& from) {
    SelectUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.SelectUserRequest";
  }
  protected:
  explicit SelectUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kUserFieldNumber = 2,
    kIncludeRoleInfoFieldNumber = 3,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.milvus.UserEntity user = 2;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::milvus::proto::milvus::UserEntity& user() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::UserEntity* release_user();
  ::milvus::proto::milvus::UserEntity* mutable_user();
  void set_allocated_user(::milvus::proto::milvus::UserEntity* user);
  private:
  const ::milvus::proto::milvus::UserEntity& _internal_user() const;
  ::milvus::proto::milvus::UserEntity* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::milvus::proto::milvus::UserEntity* user);
  ::milvus::proto::milvus::UserEntity* unsafe_arena_release_user();

  // bool include_role_info = 3;
  void clear_include_role_info();
  bool include_role_info() const;
  void set_include_role_info(bool value);
  private:
  bool _internal_include_role_info() const;
  void _internal_set_include_role_info(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.SelectUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::milvus::UserEntity* user_;
    bool include_role_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class UserResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.UserResult) */ {
 public:
  inline UserResult() : UserResult(nullptr) {}
  ~UserResult() override;
  explicit PROTOBUF_CONSTEXPR UserResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserResult(const UserResult& from);
  UserResult(UserResult&& from) noexcept
    : UserResult() {
    *this = ::std::move(from);
  }

  inline UserResult& operator=(const UserResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserResult& operator=(UserResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserResult* internal_default_instance() {
    return reinterpret_cast<const UserResult*>(
               &_UserResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(UserResult& a, UserResult& b) {
    a.Swap(&b);
  }
  inline void Swap(UserResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserResult& from) {
    UserResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.UserResult";
  }
  protected:
  explicit UserResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.RoleEntity roles = 2;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::milvus::proto::milvus::RoleEntity* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::RoleEntity >*
      mutable_roles();
  private:
  const ::milvus::proto::milvus::RoleEntity& _internal_roles(int index) const;
  ::milvus::proto::milvus::RoleEntity* _internal_add_roles();
  public:
  const ::milvus::proto::milvus::RoleEntity& roles(int index) const;
  ::milvus::proto::milvus::RoleEntity* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::RoleEntity >&
      roles() const;

  // .milvus.proto.milvus.UserEntity user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::milvus::proto::milvus::UserEntity& user() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::UserEntity* release_user();
  ::milvus::proto::milvus::UserEntity* mutable_user();
  void set_allocated_user(::milvus::proto::milvus::UserEntity* user);
  private:
  const ::milvus::proto::milvus::UserEntity& _internal_user() const;
  ::milvus::proto::milvus::UserEntity* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::milvus::proto::milvus::UserEntity* user);
  ::milvus::proto::milvus::UserEntity* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.UserResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::RoleEntity > roles_;
    ::milvus::proto::milvus::UserEntity* user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class SelectUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.SelectUserResponse) */ {
 public:
  inline SelectUserResponse() : SelectUserResponse(nullptr) {}
  ~SelectUserResponse() override;
  explicit PROTOBUF_CONSTEXPR SelectUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectUserResponse(const SelectUserResponse& from);
  SelectUserResponse(SelectUserResponse&& from) noexcept
    : SelectUserResponse() {
    *this = ::std::move(from);
  }

  inline SelectUserResponse& operator=(const SelectUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectUserResponse& operator=(SelectUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectUserResponse* internal_default_instance() {
    return reinterpret_cast<const SelectUserResponse*>(
               &_SelectUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(SelectUserResponse& a, SelectUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SelectUserResponse& from) {
    SelectUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.SelectUserResponse";
  }
  protected:
  explicit SelectUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.UserResult results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::milvus::proto::milvus::UserResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::UserResult >*
      mutable_results();
  private:
  const ::milvus::proto::milvus::UserResult& _internal_results(int index) const;
  ::milvus::proto::milvus::UserResult* _internal_add_results();
  public:
  const ::milvus::proto::milvus::UserResult& results(int index) const;
  ::milvus::proto::milvus::UserResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::UserResult >&
      results() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.SelectUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::UserResult > results_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ObjectEntity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ObjectEntity) */ {
 public:
  inline ObjectEntity() : ObjectEntity(nullptr) {}
  ~ObjectEntity() override;
  explicit PROTOBUF_CONSTEXPR ObjectEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectEntity(const ObjectEntity& from);
  ObjectEntity(ObjectEntity&& from) noexcept
    : ObjectEntity() {
    *this = ::std::move(from);
  }

  inline ObjectEntity& operator=(const ObjectEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectEntity& operator=(ObjectEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectEntity* internal_default_instance() {
    return reinterpret_cast<const ObjectEntity*>(
               &_ObjectEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(ObjectEntity& a, ObjectEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectEntity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectEntity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectEntity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectEntity& from) {
    ObjectEntity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectEntity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ObjectEntity";
  }
  protected:
  explicit ObjectEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ObjectEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class PrivilegeEntity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.PrivilegeEntity) */ {
 public:
  inline PrivilegeEntity() : PrivilegeEntity(nullptr) {}
  ~PrivilegeEntity() override;
  explicit PROTOBUF_CONSTEXPR PrivilegeEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrivilegeEntity(const PrivilegeEntity& from);
  PrivilegeEntity(PrivilegeEntity&& from) noexcept
    : PrivilegeEntity() {
    *this = ::std::move(from);
  }

  inline PrivilegeEntity& operator=(const PrivilegeEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivilegeEntity& operator=(PrivilegeEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrivilegeEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrivilegeEntity* internal_default_instance() {
    return reinterpret_cast<const PrivilegeEntity*>(
               &_PrivilegeEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(PrivilegeEntity& a, PrivilegeEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivilegeEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivilegeEntity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrivilegeEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrivilegeEntity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrivilegeEntity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrivilegeEntity& from) {
    PrivilegeEntity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivilegeEntity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.PrivilegeEntity";
  }
  protected:
  explicit PrivilegeEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.PrivilegeEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GrantorEntity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GrantorEntity) */ {
 public:
  inline GrantorEntity() : GrantorEntity(nullptr) {}
  ~GrantorEntity() override;
  explicit PROTOBUF_CONSTEXPR GrantorEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrantorEntity(const GrantorEntity& from);
  GrantorEntity(GrantorEntity&& from) noexcept
    : GrantorEntity() {
    *this = ::std::move(from);
  }

  inline GrantorEntity& operator=(const GrantorEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrantorEntity& operator=(GrantorEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrantorEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrantorEntity* internal_default_instance() {
    return reinterpret_cast<const GrantorEntity*>(
               &_GrantorEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(GrantorEntity& a, GrantorEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(GrantorEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrantorEntity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrantorEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrantorEntity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrantorEntity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrantorEntity& from) {
    GrantorEntity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrantorEntity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GrantorEntity";
  }
  protected:
  explicit GrantorEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kPrivilegeFieldNumber = 2,
  };
  // .milvus.proto.milvus.UserEntity user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::milvus::proto::milvus::UserEntity& user() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::UserEntity* release_user();
  ::milvus::proto::milvus::UserEntity* mutable_user();
  void set_allocated_user(::milvus::proto::milvus::UserEntity* user);
  private:
  const ::milvus::proto::milvus::UserEntity& _internal_user() const;
  ::milvus::proto::milvus::UserEntity* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::milvus::proto::milvus::UserEntity* user);
  ::milvus::proto::milvus::UserEntity* unsafe_arena_release_user();

  // .milvus.proto.milvus.PrivilegeEntity privilege = 2;
  bool has_privilege() const;
  private:
  bool _internal_has_privilege() const;
  public:
  void clear_privilege();
  const ::milvus::proto::milvus::PrivilegeEntity& privilege() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::PrivilegeEntity* release_privilege();
  ::milvus::proto::milvus::PrivilegeEntity* mutable_privilege();
  void set_allocated_privilege(::milvus::proto::milvus::PrivilegeEntity* privilege);
  private:
  const ::milvus::proto::milvus::PrivilegeEntity& _internal_privilege() const;
  ::milvus::proto::milvus::PrivilegeEntity* _internal_mutable_privilege();
  public:
  void unsafe_arena_set_allocated_privilege(
      ::milvus::proto::milvus::PrivilegeEntity* privilege);
  ::milvus::proto::milvus::PrivilegeEntity* unsafe_arena_release_privilege();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GrantorEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::milvus::UserEntity* user_;
    ::milvus::proto::milvus::PrivilegeEntity* privilege_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GrantPrivilegeEntity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GrantPrivilegeEntity) */ {
 public:
  inline GrantPrivilegeEntity() : GrantPrivilegeEntity(nullptr) {}
  ~GrantPrivilegeEntity() override;
  explicit PROTOBUF_CONSTEXPR GrantPrivilegeEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrantPrivilegeEntity(const GrantPrivilegeEntity& from);
  GrantPrivilegeEntity(GrantPrivilegeEntity&& from) noexcept
    : GrantPrivilegeEntity() {
    *this = ::std::move(from);
  }

  inline GrantPrivilegeEntity& operator=(const GrantPrivilegeEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrantPrivilegeEntity& operator=(GrantPrivilegeEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrantPrivilegeEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrantPrivilegeEntity* internal_default_instance() {
    return reinterpret_cast<const GrantPrivilegeEntity*>(
               &_GrantPrivilegeEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(GrantPrivilegeEntity& a, GrantPrivilegeEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(GrantPrivilegeEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrantPrivilegeEntity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrantPrivilegeEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrantPrivilegeEntity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrantPrivilegeEntity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrantPrivilegeEntity& from) {
    GrantPrivilegeEntity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrantPrivilegeEntity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GrantPrivilegeEntity";
  }
  protected:
  explicit GrantPrivilegeEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.GrantorEntity entities = 1;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::milvus::proto::milvus::GrantorEntity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GrantorEntity >*
      mutable_entities();
  private:
  const ::milvus::proto::milvus::GrantorEntity& _internal_entities(int index) const;
  ::milvus::proto::milvus::GrantorEntity* _internal_add_entities();
  public:
  const ::milvus::proto::milvus::GrantorEntity& entities(int index) const;
  ::milvus::proto::milvus::GrantorEntity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GrantorEntity >&
      entities() const;

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GrantPrivilegeEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GrantorEntity > entities_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GrantEntity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GrantEntity) */ {
 public:
  inline GrantEntity() : GrantEntity(nullptr) {}
  ~GrantEntity() override;
  explicit PROTOBUF_CONSTEXPR GrantEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrantEntity(const GrantEntity& from);
  GrantEntity(GrantEntity&& from) noexcept
    : GrantEntity() {
    *this = ::std::move(from);
  }

  inline GrantEntity& operator=(const GrantEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrantEntity& operator=(GrantEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrantEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrantEntity* internal_default_instance() {
    return reinterpret_cast<const GrantEntity*>(
               &_GrantEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(GrantEntity& a, GrantEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(GrantEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrantEntity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrantEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrantEntity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrantEntity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrantEntity& from) {
    GrantEntity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrantEntity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GrantEntity";
  }
  protected:
  explicit GrantEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectNameFieldNumber = 3,
    kDbNameFieldNumber = 5,
    kRoleFieldNumber = 1,
    kObjectFieldNumber = 2,
    kGrantorFieldNumber = 4,
  };
  // string object_name = 3;
  void clear_object_name();
  const std::string& object_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object_name();
  PROTOBUF_NODISCARD std::string* release_object_name();
  void set_allocated_object_name(std::string* object_name);
  private:
  const std::string& _internal_object_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object_name(const std::string& value);
  std::string* _internal_mutable_object_name();
  public:

  // string db_name = 5;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // .milvus.proto.milvus.RoleEntity role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::milvus::proto::milvus::RoleEntity& role() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::RoleEntity* release_role();
  ::milvus::proto::milvus::RoleEntity* mutable_role();
  void set_allocated_role(::milvus::proto::milvus::RoleEntity* role);
  private:
  const ::milvus::proto::milvus::RoleEntity& _internal_role() const;
  ::milvus::proto::milvus::RoleEntity* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::milvus::proto::milvus::RoleEntity* role);
  ::milvus::proto::milvus::RoleEntity* unsafe_arena_release_role();

  // .milvus.proto.milvus.ObjectEntity object = 2;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::milvus::proto::milvus::ObjectEntity& object() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::ObjectEntity* release_object();
  ::milvus::proto::milvus::ObjectEntity* mutable_object();
  void set_allocated_object(::milvus::proto::milvus::ObjectEntity* object);
  private:
  const ::milvus::proto::milvus::ObjectEntity& _internal_object() const;
  ::milvus::proto::milvus::ObjectEntity* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::milvus::proto::milvus::ObjectEntity* object);
  ::milvus::proto::milvus::ObjectEntity* unsafe_arena_release_object();

  // .milvus.proto.milvus.GrantorEntity grantor = 4;
  bool has_grantor() const;
  private:
  bool _internal_has_grantor() const;
  public:
  void clear_grantor();
  const ::milvus::proto::milvus::GrantorEntity& grantor() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::GrantorEntity* release_grantor();
  ::milvus::proto::milvus::GrantorEntity* mutable_grantor();
  void set_allocated_grantor(::milvus::proto::milvus::GrantorEntity* grantor);
  private:
  const ::milvus::proto::milvus::GrantorEntity& _internal_grantor() const;
  ::milvus::proto::milvus::GrantorEntity* _internal_mutable_grantor();
  public:
  void unsafe_arena_set_allocated_grantor(
      ::milvus::proto::milvus::GrantorEntity* grantor);
  ::milvus::proto::milvus::GrantorEntity* unsafe_arena_release_grantor();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GrantEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::milvus::proto::milvus::RoleEntity* role_;
    ::milvus::proto::milvus::ObjectEntity* object_;
    ::milvus::proto::milvus::GrantorEntity* grantor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class SelectGrantRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.SelectGrantRequest) */ {
 public:
  inline SelectGrantRequest() : SelectGrantRequest(nullptr) {}
  ~SelectGrantRequest() override;
  explicit PROTOBUF_CONSTEXPR SelectGrantRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectGrantRequest(const SelectGrantRequest& from);
  SelectGrantRequest(SelectGrantRequest&& from) noexcept
    : SelectGrantRequest() {
    *this = ::std::move(from);
  }

  inline SelectGrantRequest& operator=(const SelectGrantRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectGrantRequest& operator=(SelectGrantRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectGrantRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectGrantRequest* internal_default_instance() {
    return reinterpret_cast<const SelectGrantRequest*>(
               &_SelectGrantRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(SelectGrantRequest& a, SelectGrantRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectGrantRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectGrantRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectGrantRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectGrantRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectGrantRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SelectGrantRequest& from) {
    SelectGrantRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectGrantRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.SelectGrantRequest";
  }
  protected:
  explicit SelectGrantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEntityFieldNumber = 2,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.milvus.GrantEntity entity = 2;
  bool has_entity() const;
  private:
  bool _internal_has_entity() const;
  public:
  void clear_entity();
  const ::milvus::proto::milvus::GrantEntity& entity() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::GrantEntity* release_entity();
  ::milvus::proto::milvus::GrantEntity* mutable_entity();
  void set_allocated_entity(::milvus::proto::milvus::GrantEntity* entity);
  private:
  const ::milvus::proto::milvus::GrantEntity& _internal_entity() const;
  ::milvus::proto::milvus::GrantEntity* _internal_mutable_entity();
  public:
  void unsafe_arena_set_allocated_entity(
      ::milvus::proto::milvus::GrantEntity* entity);
  ::milvus::proto::milvus::GrantEntity* unsafe_arena_release_entity();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.SelectGrantRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::milvus::GrantEntity* entity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class SelectGrantResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.SelectGrantResponse) */ {
 public:
  inline SelectGrantResponse() : SelectGrantResponse(nullptr) {}
  ~SelectGrantResponse() override;
  explicit PROTOBUF_CONSTEXPR SelectGrantResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectGrantResponse(const SelectGrantResponse& from);
  SelectGrantResponse(SelectGrantResponse&& from) noexcept
    : SelectGrantResponse() {
    *this = ::std::move(from);
  }

  inline SelectGrantResponse& operator=(const SelectGrantResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectGrantResponse& operator=(SelectGrantResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectGrantResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectGrantResponse* internal_default_instance() {
    return reinterpret_cast<const SelectGrantResponse*>(
               &_SelectGrantResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(SelectGrantResponse& a, SelectGrantResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectGrantResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectGrantResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectGrantResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectGrantResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectGrantResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SelectGrantResponse& from) {
    SelectGrantResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectGrantResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.SelectGrantResponse";
  }
  protected:
  explicit SelectGrantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.GrantEntity entities = 2;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::milvus::proto::milvus::GrantEntity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GrantEntity >*
      mutable_entities();
  private:
  const ::milvus::proto::milvus::GrantEntity& _internal_entities(int index) const;
  ::milvus::proto::milvus::GrantEntity* _internal_add_entities();
  public:
  const ::milvus::proto::milvus::GrantEntity& entities(int index) const;
  ::milvus::proto::milvus::GrantEntity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GrantEntity >&
      entities() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.SelectGrantResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GrantEntity > entities_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class OperatePrivilegeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.OperatePrivilegeRequest) */ {
 public:
  inline OperatePrivilegeRequest() : OperatePrivilegeRequest(nullptr) {}
  ~OperatePrivilegeRequest() override;
  explicit PROTOBUF_CONSTEXPR OperatePrivilegeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperatePrivilegeRequest(const OperatePrivilegeRequest& from);
  OperatePrivilegeRequest(OperatePrivilegeRequest&& from) noexcept
    : OperatePrivilegeRequest() {
    *this = ::std::move(from);
  }

  inline OperatePrivilegeRequest& operator=(const OperatePrivilegeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperatePrivilegeRequest& operator=(OperatePrivilegeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperatePrivilegeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperatePrivilegeRequest* internal_default_instance() {
    return reinterpret_cast<const OperatePrivilegeRequest*>(
               &_OperatePrivilegeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(OperatePrivilegeRequest& a, OperatePrivilegeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OperatePrivilegeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperatePrivilegeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperatePrivilegeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperatePrivilegeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperatePrivilegeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperatePrivilegeRequest& from) {
    OperatePrivilegeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperatePrivilegeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.OperatePrivilegeRequest";
  }
  protected:
  explicit OperatePrivilegeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEntityFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.milvus.GrantEntity entity = 2;
  bool has_entity() const;
  private:
  bool _internal_has_entity() const;
  public:
  void clear_entity();
  const ::milvus::proto::milvus::GrantEntity& entity() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::GrantEntity* release_entity();
  ::milvus::proto::milvus::GrantEntity* mutable_entity();
  void set_allocated_entity(::milvus::proto::milvus::GrantEntity* entity);
  private:
  const ::milvus::proto::milvus::GrantEntity& _internal_entity() const;
  ::milvus::proto::milvus::GrantEntity* _internal_mutable_entity();
  public:
  void unsafe_arena_set_allocated_entity(
      ::milvus::proto::milvus::GrantEntity* entity);
  ::milvus::proto::milvus::GrantEntity* unsafe_arena_release_entity();

  // .milvus.proto.milvus.OperatePrivilegeType type = 3;
  void clear_type();
  ::milvus::proto::milvus::OperatePrivilegeType type() const;
  void set_type(::milvus::proto::milvus::OperatePrivilegeType value);
  private:
  ::milvus::proto::milvus::OperatePrivilegeType _internal_type() const;
  void _internal_set_type(::milvus::proto::milvus::OperatePrivilegeType value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.OperatePrivilegeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::milvus::GrantEntity* entity_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetLoadingProgressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetLoadingProgressRequest) */ {
 public:
  inline GetLoadingProgressRequest() : GetLoadingProgressRequest(nullptr) {}
  ~GetLoadingProgressRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLoadingProgressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLoadingProgressRequest(const GetLoadingProgressRequest& from);
  GetLoadingProgressRequest(GetLoadingProgressRequest&& from) noexcept
    : GetLoadingProgressRequest() {
    *this = ::std::move(from);
  }

  inline GetLoadingProgressRequest& operator=(const GetLoadingProgressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLoadingProgressRequest& operator=(GetLoadingProgressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLoadingProgressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLoadingProgressRequest* internal_default_instance() {
    return reinterpret_cast<const GetLoadingProgressRequest*>(
               &_GetLoadingProgressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(GetLoadingProgressRequest& a, GetLoadingProgressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLoadingProgressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLoadingProgressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLoadingProgressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLoadingProgressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLoadingProgressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLoadingProgressRequest& from) {
    GetLoadingProgressRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLoadingProgressRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetLoadingProgressRequest";
  }
  protected:
  explicit GetLoadingProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 3,
    kCollectionNameFieldNumber = 2,
    kDbNameFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // repeated string partition_names = 3;
  int partition_names_size() const;
  private:
  int _internal_partition_names_size() const;
  public:
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();
  private:
  const std::string& _internal_partition_names(int index) const;
  std::string* _internal_add_partition_names();
  public:

  // string collection_name = 2;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string db_name = 4;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetLoadingProgressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetLoadingProgressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetLoadingProgressResponse) */ {
 public:
  inline GetLoadingProgressResponse() : GetLoadingProgressResponse(nullptr) {}
  ~GetLoadingProgressResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLoadingProgressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLoadingProgressResponse(const GetLoadingProgressResponse& from);
  GetLoadingProgressResponse(GetLoadingProgressResponse&& from) noexcept
    : GetLoadingProgressResponse() {
    *this = ::std::move(from);
  }

  inline GetLoadingProgressResponse& operator=(const GetLoadingProgressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLoadingProgressResponse& operator=(GetLoadingProgressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLoadingProgressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLoadingProgressResponse* internal_default_instance() {
    return reinterpret_cast<const GetLoadingProgressResponse*>(
               &_GetLoadingProgressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(GetLoadingProgressResponse& a, GetLoadingProgressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLoadingProgressResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLoadingProgressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLoadingProgressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLoadingProgressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLoadingProgressResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLoadingProgressResponse& from) {
    GetLoadingProgressResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLoadingProgressResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetLoadingProgressResponse";
  }
  protected:
  explicit GetLoadingProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kProgressFieldNumber = 2,
    kRefreshProgressFieldNumber = 3,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // int64 progress = 2;
  void clear_progress();
  int64_t progress() const;
  void set_progress(int64_t value);
  private:
  int64_t _internal_progress() const;
  void _internal_set_progress(int64_t value);
  public:

  // int64 refresh_progress = 3;
  void clear_refresh_progress();
  int64_t refresh_progress() const;
  void set_refresh_progress(int64_t value);
  private:
  int64_t _internal_refresh_progress() const;
  void _internal_set_refresh_progress(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetLoadingProgressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    int64_t progress_;
    int64_t refresh_progress_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetLoadStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetLoadStateRequest) */ {
 public:
  inline GetLoadStateRequest() : GetLoadStateRequest(nullptr) {}
  ~GetLoadStateRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLoadStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLoadStateRequest(const GetLoadStateRequest& from);
  GetLoadStateRequest(GetLoadStateRequest&& from) noexcept
    : GetLoadStateRequest() {
    *this = ::std::move(from);
  }

  inline GetLoadStateRequest& operator=(const GetLoadStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLoadStateRequest& operator=(GetLoadStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLoadStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLoadStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetLoadStateRequest*>(
               &_GetLoadStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(GetLoadStateRequest& a, GetLoadStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLoadStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLoadStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLoadStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLoadStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLoadStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLoadStateRequest& from) {
    GetLoadStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLoadStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetLoadStateRequest";
  }
  protected:
  explicit GetLoadStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNamesFieldNumber = 3,
    kCollectionNameFieldNumber = 2,
    kDbNameFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // repeated string partition_names = 3;
  int partition_names_size() const;
  private:
  int _internal_partition_names_size() const;
  public:
  void clear_partition_names();
  const std::string& partition_names(int index) const;
  std::string* mutable_partition_names(int index);
  void set_partition_names(int index, const std::string& value);
  void set_partition_names(int index, std::string&& value);
  void set_partition_names(int index, const char* value);
  void set_partition_names(int index, const char* value, size_t size);
  std::string* add_partition_names();
  void add_partition_names(const std::string& value);
  void add_partition_names(std::string&& value);
  void add_partition_names(const char* value);
  void add_partition_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_names();
  private:
  const std::string& _internal_partition_names(int index) const;
  std::string* _internal_add_partition_names();
  public:

  // string collection_name = 2;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string db_name = 4;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetLoadStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetLoadStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetLoadStateResponse) */ {
 public:
  inline GetLoadStateResponse() : GetLoadStateResponse(nullptr) {}
  ~GetLoadStateResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLoadStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLoadStateResponse(const GetLoadStateResponse& from);
  GetLoadStateResponse(GetLoadStateResponse&& from) noexcept
    : GetLoadStateResponse() {
    *this = ::std::move(from);
  }

  inline GetLoadStateResponse& operator=(const GetLoadStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLoadStateResponse& operator=(GetLoadStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLoadStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLoadStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetLoadStateResponse*>(
               &_GetLoadStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(GetLoadStateResponse& a, GetLoadStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLoadStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLoadStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLoadStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLoadStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLoadStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLoadStateResponse& from) {
    GetLoadStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLoadStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetLoadStateResponse";
  }
  protected:
  explicit GetLoadStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // .milvus.proto.common.LoadState state = 2;
  void clear_state();
  ::milvus::proto::common::LoadState state() const;
  void set_state(::milvus::proto::common::LoadState value);
  private:
  ::milvus::proto::common::LoadState _internal_state() const;
  void _internal_set_state(::milvus::proto::common::LoadState value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetLoadStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class MilvusExt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.MilvusExt) */ {
 public:
  inline MilvusExt() : MilvusExt(nullptr) {}
  ~MilvusExt() override;
  explicit PROTOBUF_CONSTEXPR MilvusExt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MilvusExt(const MilvusExt& from);
  MilvusExt(MilvusExt&& from) noexcept
    : MilvusExt() {
    *this = ::std::move(from);
  }

  inline MilvusExt& operator=(const MilvusExt& from) {
    CopyFrom(from);
    return *this;
  }
  inline MilvusExt& operator=(MilvusExt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MilvusExt& default_instance() {
    return *internal_default_instance();
  }
  static inline const MilvusExt* internal_default_instance() {
    return reinterpret_cast<const MilvusExt*>(
               &_MilvusExt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(MilvusExt& a, MilvusExt& b) {
    a.Swap(&b);
  }
  inline void Swap(MilvusExt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MilvusExt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MilvusExt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MilvusExt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MilvusExt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MilvusExt& from) {
    MilvusExt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MilvusExt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.MilvusExt";
  }
  protected:
  explicit MilvusExt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.MilvusExt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetVersionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetVersionRequest) */ {
 public:
  inline GetVersionRequest() : GetVersionRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetVersionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVersionRequest(const GetVersionRequest& from);
  GetVersionRequest(GetVersionRequest&& from) noexcept
    : GetVersionRequest() {
    *this = ::std::move(from);
  }

  inline GetVersionRequest& operator=(const GetVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVersionRequest& operator=(GetVersionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVersionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVersionRequest* internal_default_instance() {
    return reinterpret_cast<const GetVersionRequest*>(
               &_GetVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(GetVersionRequest& a, GetVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVersionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVersionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetVersionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetVersionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetVersionRequest";
  }
  protected:
  explicit GetVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetVersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetVersionResponse) */ {
 public:
  inline GetVersionResponse() : GetVersionResponse(nullptr) {}
  ~GetVersionResponse() override;
  explicit PROTOBUF_CONSTEXPR GetVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVersionResponse(const GetVersionResponse& from);
  GetVersionResponse(GetVersionResponse&& from) noexcept
    : GetVersionResponse() {
    *this = ::std::move(from);
  }

  inline GetVersionResponse& operator=(const GetVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVersionResponse& operator=(GetVersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVersionResponse* internal_default_instance() {
    return reinterpret_cast<const GetVersionResponse*>(
               &_GetVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(GetVersionResponse& a, GetVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVersionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVersionResponse& from) {
    GetVersionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVersionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetVersionResponse";
  }
  protected:
  explicit GetVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CheckHealthRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CheckHealthRequest) */ {
 public:
  inline CheckHealthRequest() : CheckHealthRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CheckHealthRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckHealthRequest(const CheckHealthRequest& from);
  CheckHealthRequest(CheckHealthRequest&& from) noexcept
    : CheckHealthRequest() {
    *this = ::std::move(from);
  }

  inline CheckHealthRequest& operator=(const CheckHealthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckHealthRequest& operator=(CheckHealthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckHealthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckHealthRequest* internal_default_instance() {
    return reinterpret_cast<const CheckHealthRequest*>(
               &_CheckHealthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(CheckHealthRequest& a, CheckHealthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckHealthRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckHealthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckHealthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckHealthRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CheckHealthRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CheckHealthRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CheckHealthRequest";
  }
  protected:
  explicit CheckHealthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CheckHealthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CheckHealthResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CheckHealthResponse) */ {
 public:
  inline CheckHealthResponse() : CheckHealthResponse(nullptr) {}
  ~CheckHealthResponse() override;
  explicit PROTOBUF_CONSTEXPR CheckHealthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckHealthResponse(const CheckHealthResponse& from);
  CheckHealthResponse(CheckHealthResponse&& from) noexcept
    : CheckHealthResponse() {
    *this = ::std::move(from);
  }

  inline CheckHealthResponse& operator=(const CheckHealthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckHealthResponse& operator=(CheckHealthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckHealthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckHealthResponse* internal_default_instance() {
    return reinterpret_cast<const CheckHealthResponse*>(
               &_CheckHealthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(CheckHealthResponse& a, CheckHealthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckHealthResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckHealthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckHealthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckHealthResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckHealthResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckHealthResponse& from) {
    CheckHealthResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckHealthResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CheckHealthResponse";
  }
  protected:
  explicit CheckHealthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonsFieldNumber = 3,
    kQuotaStatesFieldNumber = 4,
    kStatusFieldNumber = 1,
    kIsHealthyFieldNumber = 2,
  };
  // repeated string reasons = 3;
  int reasons_size() const;
  private:
  int _internal_reasons_size() const;
  public:
  void clear_reasons();
  const std::string& reasons(int index) const;
  std::string* mutable_reasons(int index);
  void set_reasons(int index, const std::string& value);
  void set_reasons(int index, std::string&& value);
  void set_reasons(int index, const char* value);
  void set_reasons(int index, const char* value, size_t size);
  std::string* add_reasons();
  void add_reasons(const std::string& value);
  void add_reasons(std::string&& value);
  void add_reasons(const char* value);
  void add_reasons(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reasons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reasons();
  private:
  const std::string& _internal_reasons(int index) const;
  std::string* _internal_add_reasons();
  public:

  // repeated .milvus.proto.milvus.QuotaState quota_states = 4;
  int quota_states_size() const;
  private:
  int _internal_quota_states_size() const;
  public:
  void clear_quota_states();
  private:
  ::milvus::proto::milvus::QuotaState _internal_quota_states(int index) const;
  void _internal_add_quota_states(::milvus::proto::milvus::QuotaState value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_quota_states();
  public:
  ::milvus::proto::milvus::QuotaState quota_states(int index) const;
  void set_quota_states(int index, ::milvus::proto::milvus::QuotaState value);
  void add_quota_states(::milvus::proto::milvus::QuotaState value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& quota_states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_quota_states();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // bool isHealthy = 2;
  void clear_ishealthy();
  bool ishealthy() const;
  void set_ishealthy(bool value);
  private:
  bool _internal_ishealthy() const;
  void _internal_set_ishealthy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CheckHealthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reasons_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> quota_states_;
    mutable std::atomic<int> _quota_states_cached_byte_size_;
    ::milvus::proto::common::Status* status_;
    bool ishealthy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CreateResourceGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CreateResourceGroupRequest) */ {
 public:
  inline CreateResourceGroupRequest() : CreateResourceGroupRequest(nullptr) {}
  ~CreateResourceGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateResourceGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateResourceGroupRequest(const CreateResourceGroupRequest& from);
  CreateResourceGroupRequest(CreateResourceGroupRequest&& from) noexcept
    : CreateResourceGroupRequest() {
    *this = ::std::move(from);
  }

  inline CreateResourceGroupRequest& operator=(const CreateResourceGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResourceGroupRequest& operator=(CreateResourceGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateResourceGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateResourceGroupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateResourceGroupRequest*>(
               &_CreateResourceGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(CreateResourceGroupRequest& a, CreateResourceGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResourceGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateResourceGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateResourceGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateResourceGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateResourceGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateResourceGroupRequest& from) {
    CreateResourceGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResourceGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CreateResourceGroupRequest";
  }
  protected:
  explicit CreateResourceGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceGroupFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // string resource_group = 2;
  void clear_resource_group();
  const std::string& resource_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource_group();
  PROTOBUF_NODISCARD std::string* release_resource_group();
  void set_allocated_resource_group(std::string* resource_group);
  private:
  const std::string& _internal_resource_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_group(const std::string& value);
  std::string* _internal_mutable_resource_group();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CreateResourceGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_group_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DropResourceGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DropResourceGroupRequest) */ {
 public:
  inline DropResourceGroupRequest() : DropResourceGroupRequest(nullptr) {}
  ~DropResourceGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR DropResourceGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropResourceGroupRequest(const DropResourceGroupRequest& from);
  DropResourceGroupRequest(DropResourceGroupRequest&& from) noexcept
    : DropResourceGroupRequest() {
    *this = ::std::move(from);
  }

  inline DropResourceGroupRequest& operator=(const DropResourceGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropResourceGroupRequest& operator=(DropResourceGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropResourceGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropResourceGroupRequest* internal_default_instance() {
    return reinterpret_cast<const DropResourceGroupRequest*>(
               &_DropResourceGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(DropResourceGroupRequest& a, DropResourceGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropResourceGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropResourceGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropResourceGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropResourceGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropResourceGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropResourceGroupRequest& from) {
    DropResourceGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropResourceGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DropResourceGroupRequest";
  }
  protected:
  explicit DropResourceGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceGroupFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // string resource_group = 2;
  void clear_resource_group();
  const std::string& resource_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource_group();
  PROTOBUF_NODISCARD std::string* release_resource_group();
  void set_allocated_resource_group(std::string* resource_group);
  private:
  const std::string& _internal_resource_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_group(const std::string& value);
  std::string* _internal_mutable_resource_group();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DropResourceGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_group_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class TransferNodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.TransferNodeRequest) */ {
 public:
  inline TransferNodeRequest() : TransferNodeRequest(nullptr) {}
  ~TransferNodeRequest() override;
  explicit PROTOBUF_CONSTEXPR TransferNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferNodeRequest(const TransferNodeRequest& from);
  TransferNodeRequest(TransferNodeRequest&& from) noexcept
    : TransferNodeRequest() {
    *this = ::std::move(from);
  }

  inline TransferNodeRequest& operator=(const TransferNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferNodeRequest& operator=(TransferNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferNodeRequest* internal_default_instance() {
    return reinterpret_cast<const TransferNodeRequest*>(
               &_TransferNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(TransferNodeRequest& a, TransferNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferNodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferNodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferNodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransferNodeRequest& from) {
    TransferNodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferNodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.TransferNodeRequest";
  }
  protected:
  explicit TransferNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceResourceGroupFieldNumber = 2,
    kTargetResourceGroupFieldNumber = 3,
    kBaseFieldNumber = 1,
    kNumNodeFieldNumber = 4,
  };
  // string source_resource_group = 2;
  void clear_source_resource_group();
  const std::string& source_resource_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_resource_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_resource_group();
  PROTOBUF_NODISCARD std::string* release_source_resource_group();
  void set_allocated_source_resource_group(std::string* source_resource_group);
  private:
  const std::string& _internal_source_resource_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_resource_group(const std::string& value);
  std::string* _internal_mutable_source_resource_group();
  public:

  // string target_resource_group = 3;
  void clear_target_resource_group();
  const std::string& target_resource_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_resource_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_resource_group();
  PROTOBUF_NODISCARD std::string* release_target_resource_group();
  void set_allocated_target_resource_group(std::string* target_resource_group);
  private:
  const std::string& _internal_target_resource_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_resource_group(const std::string& value);
  std::string* _internal_mutable_target_resource_group();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int32 num_node = 4;
  void clear_num_node();
  int32_t num_node() const;
  void set_num_node(int32_t value);
  private:
  int32_t _internal_num_node() const;
  void _internal_set_num_node(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.TransferNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_resource_group_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_resource_group_;
    ::milvus::proto::common::MsgBase* base_;
    int32_t num_node_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class TransferReplicaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.TransferReplicaRequest) */ {
 public:
  inline TransferReplicaRequest() : TransferReplicaRequest(nullptr) {}
  ~TransferReplicaRequest() override;
  explicit PROTOBUF_CONSTEXPR TransferReplicaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferReplicaRequest(const TransferReplicaRequest& from);
  TransferReplicaRequest(TransferReplicaRequest&& from) noexcept
    : TransferReplicaRequest() {
    *this = ::std::move(from);
  }

  inline TransferReplicaRequest& operator=(const TransferReplicaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferReplicaRequest& operator=(TransferReplicaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferReplicaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferReplicaRequest* internal_default_instance() {
    return reinterpret_cast<const TransferReplicaRequest*>(
               &_TransferReplicaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(TransferReplicaRequest& a, TransferReplicaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferReplicaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferReplicaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferReplicaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferReplicaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferReplicaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransferReplicaRequest& from) {
    TransferReplicaRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferReplicaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.TransferReplicaRequest";
  }
  protected:
  explicit TransferReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceResourceGroupFieldNumber = 2,
    kTargetResourceGroupFieldNumber = 3,
    kCollectionNameFieldNumber = 4,
    kDbNameFieldNumber = 6,
    kBaseFieldNumber = 1,
    kNumReplicaFieldNumber = 5,
  };
  // string source_resource_group = 2;
  void clear_source_resource_group();
  const std::string& source_resource_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_resource_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_resource_group();
  PROTOBUF_NODISCARD std::string* release_source_resource_group();
  void set_allocated_source_resource_group(std::string* source_resource_group);
  private:
  const std::string& _internal_source_resource_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_resource_group(const std::string& value);
  std::string* _internal_mutable_source_resource_group();
  public:

  // string target_resource_group = 3;
  void clear_target_resource_group();
  const std::string& target_resource_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_resource_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_resource_group();
  PROTOBUF_NODISCARD std::string* release_target_resource_group();
  void set_allocated_target_resource_group(std::string* target_resource_group);
  private:
  const std::string& _internal_target_resource_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_resource_group(const std::string& value);
  std::string* _internal_mutable_target_resource_group();
  public:

  // string collection_name = 4;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string db_name = 6;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 num_replica = 5;
  void clear_num_replica();
  int64_t num_replica() const;
  void set_num_replica(int64_t value);
  private:
  int64_t _internal_num_replica() const;
  void _internal_set_num_replica(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.TransferReplicaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_resource_group_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_resource_group_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t num_replica_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ListResourceGroupsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ListResourceGroupsRequest) */ {
 public:
  inline ListResourceGroupsRequest() : ListResourceGroupsRequest(nullptr) {}
  ~ListResourceGroupsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListResourceGroupsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListResourceGroupsRequest(const ListResourceGroupsRequest& from);
  ListResourceGroupsRequest(ListResourceGroupsRequest&& from) noexcept
    : ListResourceGroupsRequest() {
    *this = ::std::move(from);
  }

  inline ListResourceGroupsRequest& operator=(const ListResourceGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListResourceGroupsRequest& operator=(ListResourceGroupsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListResourceGroupsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListResourceGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const ListResourceGroupsRequest*>(
               &_ListResourceGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(ListResourceGroupsRequest& a, ListResourceGroupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListResourceGroupsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListResourceGroupsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListResourceGroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListResourceGroupsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListResourceGroupsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListResourceGroupsRequest& from) {
    ListResourceGroupsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListResourceGroupsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ListResourceGroupsRequest";
  }
  protected:
  explicit ListResourceGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ListResourceGroupsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ListResourceGroupsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ListResourceGroupsResponse) */ {
 public:
  inline ListResourceGroupsResponse() : ListResourceGroupsResponse(nullptr) {}
  ~ListResourceGroupsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListResourceGroupsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListResourceGroupsResponse(const ListResourceGroupsResponse& from);
  ListResourceGroupsResponse(ListResourceGroupsResponse&& from) noexcept
    : ListResourceGroupsResponse() {
    *this = ::std::move(from);
  }

  inline ListResourceGroupsResponse& operator=(const ListResourceGroupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListResourceGroupsResponse& operator=(ListResourceGroupsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListResourceGroupsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListResourceGroupsResponse* internal_default_instance() {
    return reinterpret_cast<const ListResourceGroupsResponse*>(
               &_ListResourceGroupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(ListResourceGroupsResponse& a, ListResourceGroupsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListResourceGroupsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListResourceGroupsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListResourceGroupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListResourceGroupsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListResourceGroupsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListResourceGroupsResponse& from) {
    ListResourceGroupsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListResourceGroupsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ListResourceGroupsResponse";
  }
  protected:
  explicit ListResourceGroupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceGroupsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string resource_groups = 2;
  int resource_groups_size() const;
  private:
  int _internal_resource_groups_size() const;
  public:
  void clear_resource_groups();
  const std::string& resource_groups(int index) const;
  std::string* mutable_resource_groups(int index);
  void set_resource_groups(int index, const std::string& value);
  void set_resource_groups(int index, std::string&& value);
  void set_resource_groups(int index, const char* value);
  void set_resource_groups(int index, const char* value, size_t size);
  std::string* add_resource_groups();
  void add_resource_groups(const std::string& value);
  void add_resource_groups(std::string&& value);
  void add_resource_groups(const char* value);
  void add_resource_groups(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& resource_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_resource_groups();
  private:
  const std::string& _internal_resource_groups(int index) const;
  std::string* _internal_add_resource_groups();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ListResourceGroupsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> resource_groups_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeResourceGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeResourceGroupRequest) */ {
 public:
  inline DescribeResourceGroupRequest() : DescribeResourceGroupRequest(nullptr) {}
  ~DescribeResourceGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR DescribeResourceGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescribeResourceGroupRequest(const DescribeResourceGroupRequest& from);
  DescribeResourceGroupRequest(DescribeResourceGroupRequest&& from) noexcept
    : DescribeResourceGroupRequest() {
    *this = ::std::move(from);
  }

  inline DescribeResourceGroupRequest& operator=(const DescribeResourceGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeResourceGroupRequest& operator=(DescribeResourceGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescribeResourceGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DescribeResourceGroupRequest* internal_default_instance() {
    return reinterpret_cast<const DescribeResourceGroupRequest*>(
               &_DescribeResourceGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(DescribeResourceGroupRequest& a, DescribeResourceGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeResourceGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeResourceGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescribeResourceGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescribeResourceGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescribeResourceGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescribeResourceGroupRequest& from) {
    DescribeResourceGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeResourceGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeResourceGroupRequest";
  }
  protected:
  explicit DescribeResourceGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceGroupFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // string resource_group = 2;
  void clear_resource_group();
  const std::string& resource_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource_group();
  PROTOBUF_NODISCARD std::string* release_resource_group();
  void set_allocated_resource_group(std::string* resource_group);
  private:
  const std::string& _internal_resource_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_group(const std::string& value);
  std::string* _internal_mutable_resource_group();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeResourceGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_group_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DescribeResourceGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DescribeResourceGroupResponse) */ {
 public:
  inline DescribeResourceGroupResponse() : DescribeResourceGroupResponse(nullptr) {}
  ~DescribeResourceGroupResponse() override;
  explicit PROTOBUF_CONSTEXPR DescribeResourceGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescribeResourceGroupResponse(const DescribeResourceGroupResponse& from);
  DescribeResourceGroupResponse(DescribeResourceGroupResponse&& from) noexcept
    : DescribeResourceGroupResponse() {
    *this = ::std::move(from);
  }

  inline DescribeResourceGroupResponse& operator=(const DescribeResourceGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeResourceGroupResponse& operator=(DescribeResourceGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescribeResourceGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DescribeResourceGroupResponse* internal_default_instance() {
    return reinterpret_cast<const DescribeResourceGroupResponse*>(
               &_DescribeResourceGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(DescribeResourceGroupResponse& a, DescribeResourceGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeResourceGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeResourceGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescribeResourceGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescribeResourceGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescribeResourceGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescribeResourceGroupResponse& from) {
    DescribeResourceGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeResourceGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DescribeResourceGroupResponse";
  }
  protected:
  explicit DescribeResourceGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kResourceGroupFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // .milvus.proto.milvus.ResourceGroup resource_group = 2;
  bool has_resource_group() const;
  private:
  bool _internal_has_resource_group() const;
  public:
  void clear_resource_group();
  const ::milvus::proto::milvus::ResourceGroup& resource_group() const;
  PROTOBUF_NODISCARD ::milvus::proto::milvus::ResourceGroup* release_resource_group();
  ::milvus::proto::milvus::ResourceGroup* mutable_resource_group();
  void set_allocated_resource_group(::milvus::proto::milvus::ResourceGroup* resource_group);
  private:
  const ::milvus::proto::milvus::ResourceGroup& _internal_resource_group() const;
  ::milvus::proto::milvus::ResourceGroup* _internal_mutable_resource_group();
  public:
  void unsafe_arena_set_allocated_resource_group(
      ::milvus::proto::milvus::ResourceGroup* resource_group);
  ::milvus::proto::milvus::ResourceGroup* unsafe_arena_release_resource_group();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DescribeResourceGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    ::milvus::proto::milvus::ResourceGroup* resource_group_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ResourceGroup_NumLoadedReplicaEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ResourceGroup_NumLoadedReplicaEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ResourceGroup_NumLoadedReplicaEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  ResourceGroup_NumLoadedReplicaEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ResourceGroup_NumLoadedReplicaEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ResourceGroup_NumLoadedReplicaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ResourceGroup_NumLoadedReplicaEntry_DoNotUse& other);
  static const ResourceGroup_NumLoadedReplicaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ResourceGroup_NumLoadedReplicaEntry_DoNotUse*>(&_ResourceGroup_NumLoadedReplicaEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "milvus.proto.milvus.ResourceGroup.NumLoadedReplicaEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_milvus_2eproto;
};

// -------------------------------------------------------------------

class ResourceGroup_NumOutgoingNodeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ResourceGroup_NumOutgoingNodeEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ResourceGroup_NumOutgoingNodeEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  ResourceGroup_NumOutgoingNodeEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ResourceGroup_NumOutgoingNodeEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ResourceGroup_NumOutgoingNodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ResourceGroup_NumOutgoingNodeEntry_DoNotUse& other);
  static const ResourceGroup_NumOutgoingNodeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ResourceGroup_NumOutgoingNodeEntry_DoNotUse*>(&_ResourceGroup_NumOutgoingNodeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "milvus.proto.milvus.ResourceGroup.NumOutgoingNodeEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_milvus_2eproto;
};

// -------------------------------------------------------------------

class ResourceGroup_NumIncomingNodeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ResourceGroup_NumIncomingNodeEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ResourceGroup_NumIncomingNodeEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  ResourceGroup_NumIncomingNodeEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ResourceGroup_NumIncomingNodeEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ResourceGroup_NumIncomingNodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ResourceGroup_NumIncomingNodeEntry_DoNotUse& other);
  static const ResourceGroup_NumIncomingNodeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ResourceGroup_NumIncomingNodeEntry_DoNotUse*>(&_ResourceGroup_NumIncomingNodeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "milvus.proto.milvus.ResourceGroup.NumIncomingNodeEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_milvus_2eproto;
};

// -------------------------------------------------------------------

class ResourceGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ResourceGroup) */ {
 public:
  inline ResourceGroup() : ResourceGroup(nullptr) {}
  ~ResourceGroup() override;
  explicit PROTOBUF_CONSTEXPR ResourceGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceGroup(const ResourceGroup& from);
  ResourceGroup(ResourceGroup&& from) noexcept
    : ResourceGroup() {
    *this = ::std::move(from);
  }

  inline ResourceGroup& operator=(const ResourceGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceGroup& operator=(ResourceGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceGroup* internal_default_instance() {
    return reinterpret_cast<const ResourceGroup*>(
               &_ResourceGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(ResourceGroup& a, ResourceGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceGroup& from) {
    ResourceGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ResourceGroup";
  }
  protected:
  explicit ResourceGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNumLoadedReplicaFieldNumber = 4,
    kNumOutgoingNodeFieldNumber = 5,
    kNumIncomingNodeFieldNumber = 6,
    kNameFieldNumber = 1,
    kCapacityFieldNumber = 2,
    kNumAvailableNodeFieldNumber = 3,
  };
  // map<string, int32> num_loaded_replica = 4;
  int num_loaded_replica_size() const;
  private:
  int _internal_num_loaded_replica_size() const;
  public:
  void clear_num_loaded_replica();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_num_loaded_replica() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_num_loaded_replica();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      num_loaded_replica() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_num_loaded_replica();

  // map<string, int32> num_outgoing_node = 5;
  int num_outgoing_node_size() const;
  private:
  int _internal_num_outgoing_node_size() const;
  public:
  void clear_num_outgoing_node();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_num_outgoing_node() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_num_outgoing_node();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      num_outgoing_node() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_num_outgoing_node();

  // map<string, int32> num_incoming_node = 6;
  int num_incoming_node_size() const;
  private:
  int _internal_num_incoming_node_size() const;
  public:
  void clear_num_incoming_node();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_num_incoming_node() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_num_incoming_node();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      num_incoming_node() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_num_incoming_node();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 capacity = 2;
  void clear_capacity();
  int32_t capacity() const;
  void set_capacity(int32_t value);
  private:
  int32_t _internal_capacity() const;
  void _internal_set_capacity(int32_t value);
  public:

  // int32 num_available_node = 3;
  void clear_num_available_node();
  int32_t num_available_node() const;
  void set_num_available_node(int32_t value);
  private:
  int32_t _internal_num_available_node() const;
  void _internal_set_num_available_node(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ResourceGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ResourceGroup_NumLoadedReplicaEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> num_loaded_replica_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ResourceGroup_NumOutgoingNodeEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> num_outgoing_node_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ResourceGroup_NumIncomingNodeEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> num_incoming_node_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t capacity_;
    int32_t num_available_node_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class RenameCollectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.RenameCollectionRequest) */ {
 public:
  inline RenameCollectionRequest() : RenameCollectionRequest(nullptr) {}
  ~RenameCollectionRequest() override;
  explicit PROTOBUF_CONSTEXPR RenameCollectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenameCollectionRequest(const RenameCollectionRequest& from);
  RenameCollectionRequest(RenameCollectionRequest&& from) noexcept
    : RenameCollectionRequest() {
    *this = ::std::move(from);
  }

  inline RenameCollectionRequest& operator=(const RenameCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameCollectionRequest& operator=(RenameCollectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenameCollectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenameCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const RenameCollectionRequest*>(
               &_RenameCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(RenameCollectionRequest& a, RenameCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameCollectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenameCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenameCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenameCollectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenameCollectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RenameCollectionRequest& from) {
    RenameCollectionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameCollectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.RenameCollectionRequest";
  }
  protected:
  explicit RenameCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kOldNameFieldNumber = 3,
    kNewNameFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string oldName = 3;
  void clear_oldname();
  const std::string& oldname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldname();
  PROTOBUF_NODISCARD std::string* release_oldname();
  void set_allocated_oldname(std::string* oldname);
  private:
  const std::string& _internal_oldname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oldname(const std::string& value);
  std::string* _internal_mutable_oldname();
  public:

  // string newName = 4;
  void clear_newname();
  const std::string& newname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newname();
  PROTOBUF_NODISCARD std::string* release_newname();
  void set_allocated_newname(std::string* newname);
  private:
  const std::string& _internal_newname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newname(const std::string& value);
  std::string* _internal_mutable_newname();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.RenameCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newname_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetIndexStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetIndexStatisticsRequest) */ {
 public:
  inline GetIndexStatisticsRequest() : GetIndexStatisticsRequest(nullptr) {}
  ~GetIndexStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetIndexStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIndexStatisticsRequest(const GetIndexStatisticsRequest& from);
  GetIndexStatisticsRequest(GetIndexStatisticsRequest&& from) noexcept
    : GetIndexStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetIndexStatisticsRequest& operator=(const GetIndexStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexStatisticsRequest& operator=(GetIndexStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIndexStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIndexStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetIndexStatisticsRequest*>(
               &_GetIndexStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(GetIndexStatisticsRequest& a, GetIndexStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIndexStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIndexStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIndexStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIndexStatisticsRequest& from) {
    GetIndexStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetIndexStatisticsRequest";
  }
  protected:
  explicit GetIndexStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kIndexNameFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string index_name = 4;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetIndexStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetIndexStatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.GetIndexStatisticsResponse) */ {
 public:
  inline GetIndexStatisticsResponse() : GetIndexStatisticsResponse(nullptr) {}
  ~GetIndexStatisticsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetIndexStatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIndexStatisticsResponse(const GetIndexStatisticsResponse& from);
  GetIndexStatisticsResponse(GetIndexStatisticsResponse&& from) noexcept
    : GetIndexStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline GetIndexStatisticsResponse& operator=(const GetIndexStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexStatisticsResponse& operator=(GetIndexStatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIndexStatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIndexStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const GetIndexStatisticsResponse*>(
               &_GetIndexStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(GetIndexStatisticsResponse& a, GetIndexStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexStatisticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIndexStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIndexStatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIndexStatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIndexStatisticsResponse& from) {
    GetIndexStatisticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexStatisticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.GetIndexStatisticsResponse";
  }
  protected:
  explicit GetIndexStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexDescriptionsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
  int index_descriptions_size() const;
  private:
  int _internal_index_descriptions_size() const;
  public:
  void clear_index_descriptions();
  ::milvus::proto::milvus::IndexDescription* mutable_index_descriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription >*
      mutable_index_descriptions();
  private:
  const ::milvus::proto::milvus::IndexDescription& _internal_index_descriptions(int index) const;
  ::milvus::proto::milvus::IndexDescription* _internal_add_index_descriptions();
  public:
  const ::milvus::proto::milvus::IndexDescription& index_descriptions(int index) const;
  ::milvus::proto::milvus::IndexDescription* add_index_descriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription >&
      index_descriptions() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.GetIndexStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription > index_descriptions_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ConnectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ConnectRequest) */ {
 public:
  inline ConnectRequest() : ConnectRequest(nullptr) {}
  ~ConnectRequest() override;
  explicit PROTOBUF_CONSTEXPR ConnectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectRequest(const ConnectRequest& from);
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectRequest& from) {
    ConnectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ConnectRequest";
  }
  protected:
  explicit ConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kClientInfoFieldNumber = 2,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.common.ClientInfo client_info = 2;
  bool has_client_info() const;
  private:
  bool _internal_has_client_info() const;
  public:
  void clear_client_info();
  const ::milvus::proto::common::ClientInfo& client_info() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::ClientInfo* release_client_info();
  ::milvus::proto::common::ClientInfo* mutable_client_info();
  void set_allocated_client_info(::milvus::proto::common::ClientInfo* client_info);
  private:
  const ::milvus::proto::common::ClientInfo& _internal_client_info() const;
  ::milvus::proto::common::ClientInfo* _internal_mutable_client_info();
  public:
  void unsafe_arena_set_allocated_client_info(
      ::milvus::proto::common::ClientInfo* client_info);
  ::milvus::proto::common::ClientInfo* unsafe_arena_release_client_info();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ConnectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::common::ClientInfo* client_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ConnectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ConnectResponse) */ {
 public:
  inline ConnectResponse() : ConnectResponse(nullptr) {}
  ~ConnectResponse() override;
  explicit PROTOBUF_CONSTEXPR ConnectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectResponse(const ConnectResponse& from);
  ConnectResponse(ConnectResponse&& from) noexcept
    : ConnectResponse() {
    *this = ::std::move(from);
  }

  inline ConnectResponse& operator=(const ConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectResponse& operator=(ConnectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectResponse*>(
               &_ConnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(ConnectResponse& a, ConnectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectResponse& from) {
    ConnectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ConnectResponse";
  }
  protected:
  explicit ConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kServerInfoFieldNumber = 2,
    kIdentifierFieldNumber = 3,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // .milvus.proto.common.ServerInfo server_info = 2;
  bool has_server_info() const;
  private:
  bool _internal_has_server_info() const;
  public:
  void clear_server_info();
  const ::milvus::proto::common::ServerInfo& server_info() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::ServerInfo* release_server_info();
  ::milvus::proto::common::ServerInfo* mutable_server_info();
  void set_allocated_server_info(::milvus::proto::common::ServerInfo* server_info);
  private:
  const ::milvus::proto::common::ServerInfo& _internal_server_info() const;
  ::milvus::proto::common::ServerInfo* _internal_mutable_server_info();
  public:
  void unsafe_arena_set_allocated_server_info(
      ::milvus::proto::common::ServerInfo* server_info);
  ::milvus::proto::common::ServerInfo* unsafe_arena_release_server_info();

  // int64 identifier = 3;
  void clear_identifier();
  int64_t identifier() const;
  void set_identifier(int64_t value);
  private:
  int64_t _internal_identifier() const;
  void _internal_set_identifier(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ConnectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::Status* status_;
    ::milvus::proto::common::ServerInfo* server_info_;
    int64_t identifier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CreateDatabaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.CreateDatabaseRequest) */ {
 public:
  inline CreateDatabaseRequest() : CreateDatabaseRequest(nullptr) {}
  ~CreateDatabaseRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateDatabaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDatabaseRequest(const CreateDatabaseRequest& from);
  CreateDatabaseRequest(CreateDatabaseRequest&& from) noexcept
    : CreateDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline CreateDatabaseRequest& operator=(const CreateDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDatabaseRequest& operator=(CreateDatabaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDatabaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDatabaseRequest*>(
               &_CreateDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(CreateDatabaseRequest& a, CreateDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDatabaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDatabaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDatabaseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDatabaseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateDatabaseRequest& from) {
    CreateDatabaseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDatabaseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.CreateDatabaseRequest";
  }
  protected:
  explicit CreateDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.CreateDatabaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DropDatabaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.DropDatabaseRequest) */ {
 public:
  inline DropDatabaseRequest() : DropDatabaseRequest(nullptr) {}
  ~DropDatabaseRequest() override;
  explicit PROTOBUF_CONSTEXPR DropDatabaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropDatabaseRequest(const DropDatabaseRequest& from);
  DropDatabaseRequest(DropDatabaseRequest&& from) noexcept
    : DropDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline DropDatabaseRequest& operator=(const DropDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropDatabaseRequest& operator=(DropDatabaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropDatabaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const DropDatabaseRequest*>(
               &_DropDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(DropDatabaseRequest& a, DropDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropDatabaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropDatabaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropDatabaseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropDatabaseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropDatabaseRequest& from) {
    DropDatabaseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropDatabaseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.DropDatabaseRequest";
  }
  protected:
  explicit DropDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.DropDatabaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ListDatabasesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ListDatabasesRequest) */ {
 public:
  inline ListDatabasesRequest() : ListDatabasesRequest(nullptr) {}
  ~ListDatabasesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListDatabasesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatabasesRequest(const ListDatabasesRequest& from);
  ListDatabasesRequest(ListDatabasesRequest&& from) noexcept
    : ListDatabasesRequest() {
    *this = ::std::move(from);
  }

  inline ListDatabasesRequest& operator=(const ListDatabasesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabasesRequest& operator=(ListDatabasesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDatabasesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatabasesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDatabasesRequest*>(
               &_ListDatabasesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(ListDatabasesRequest& a, ListDatabasesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabasesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatabasesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDatabasesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDatabasesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDatabasesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListDatabasesRequest& from) {
    ListDatabasesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabasesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ListDatabasesRequest";
  }
  protected:
  explicit ListDatabasesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ListDatabasesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class ListDatabasesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.milvus.ListDatabasesResponse) */ {
 public:
  inline ListDatabasesResponse() : ListDatabasesResponse(nullptr) {}
  ~ListDatabasesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListDatabasesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatabasesResponse(const ListDatabasesResponse& from);
  ListDatabasesResponse(ListDatabasesResponse&& from) noexcept
    : ListDatabasesResponse() {
    *this = ::std::move(from);
  }

  inline ListDatabasesResponse& operator=(const ListDatabasesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabasesResponse& operator=(ListDatabasesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDatabasesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatabasesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDatabasesResponse*>(
               &_ListDatabasesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(ListDatabasesResponse& a, ListDatabasesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabasesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatabasesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDatabasesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDatabasesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDatabasesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListDatabasesResponse& from) {
    ListDatabasesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabasesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.milvus.ListDatabasesResponse";
  }
  protected:
  explicit ListDatabasesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNamesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string db_names = 2;
  int db_names_size() const;
  private:
  int _internal_db_names_size() const;
  public:
  void clear_db_names();
  const std::string& db_names(int index) const;
  std::string* mutable_db_names(int index);
  void set_db_names(int index, const std::string& value);
  void set_db_names(int index, std::string&& value);
  void set_db_names(int index, const char* value);
  void set_db_names(int index, const char* value, size_t size);
  std::string* add_db_names();
  void add_db_names(const std::string& value);
  void add_db_names(std::string&& value);
  void add_db_names(const char* value);
  void add_db_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& db_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_db_names();
  private:
  const std::string& _internal_db_names(int index) const;
  std::string* _internal_add_db_names();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.milvus.ListDatabasesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> db_names_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_milvus_2eproto;
};
// ===================================================================

static const int kMilvusExtObjFieldNumber = 1001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::milvus::proto::milvus::MilvusExt >, 11, false >
  milvus_ext_obj;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAliasRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreateAliasRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool CreateAliasRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CreateAliasRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CreateAliasRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateAliasRequest.base)
  return _internal_base();
}
inline void CreateAliasRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CreateAliasRequest.base)
}
inline ::milvus::proto::common::MsgBase* CreateAliasRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateAliasRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateAliasRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateAliasRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* CreateAliasRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateAliasRequest.base)
  return _msg;
}
inline void CreateAliasRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateAliasRequest.base)
}

// string db_name = 2;
inline void CreateAliasRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& CreateAliasRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateAliasRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAliasRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateAliasRequest.db_name)
}
inline std::string* CreateAliasRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateAliasRequest.db_name)
  return _s;
}
inline const std::string& CreateAliasRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void CreateAliasRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAliasRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAliasRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateAliasRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void CreateAliasRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateAliasRequest.db_name)
}

// string collection_name = 3;
inline void CreateAliasRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& CreateAliasRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateAliasRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAliasRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateAliasRequest.collection_name)
}
inline std::string* CreateAliasRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateAliasRequest.collection_name)
  return _s;
}
inline const std::string& CreateAliasRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void CreateAliasRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAliasRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAliasRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateAliasRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void CreateAliasRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateAliasRequest.collection_name)
}

// string alias = 4;
inline void CreateAliasRequest::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& CreateAliasRequest::alias() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateAliasRequest.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAliasRequest::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateAliasRequest.alias)
}
inline std::string* CreateAliasRequest::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateAliasRequest.alias)
  return _s;
}
inline const std::string& CreateAliasRequest::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void CreateAliasRequest::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAliasRequest::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateAliasRequest.alias)
  return _impl_.alias_.Release();
}
inline void CreateAliasRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateAliasRequest.alias)
}

// -------------------------------------------------------------------

// DropAliasRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropAliasRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DropAliasRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DropAliasRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DropAliasRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropAliasRequest.base)
  return _internal_base();
}
inline void DropAliasRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DropAliasRequest.base)
}
inline ::milvus::proto::common::MsgBase* DropAliasRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropAliasRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropAliasRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropAliasRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DropAliasRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropAliasRequest.base)
  return _msg;
}
inline void DropAliasRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropAliasRequest.base)
}

// string db_name = 2;
inline void DropAliasRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DropAliasRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropAliasRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropAliasRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropAliasRequest.db_name)
}
inline std::string* DropAliasRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropAliasRequest.db_name)
  return _s;
}
inline const std::string& DropAliasRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DropAliasRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropAliasRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropAliasRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropAliasRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void DropAliasRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropAliasRequest.db_name)
}

// string alias = 3;
inline void DropAliasRequest::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& DropAliasRequest::alias() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropAliasRequest.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropAliasRequest::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropAliasRequest.alias)
}
inline std::string* DropAliasRequest::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropAliasRequest.alias)
  return _s;
}
inline const std::string& DropAliasRequest::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void DropAliasRequest::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* DropAliasRequest::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* DropAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropAliasRequest.alias)
  return _impl_.alias_.Release();
}
inline void DropAliasRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropAliasRequest.alias)
}

// -------------------------------------------------------------------

// AlterAliasRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool AlterAliasRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool AlterAliasRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& AlterAliasRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& AlterAliasRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.AlterAliasRequest.base)
  return _internal_base();
}
inline void AlterAliasRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.AlterAliasRequest.base)
}
inline ::milvus::proto::common::MsgBase* AlterAliasRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* AlterAliasRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.AlterAliasRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* AlterAliasRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* AlterAliasRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.AlterAliasRequest.base)
  return _msg;
}
inline void AlterAliasRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.AlterAliasRequest.base)
}

// string db_name = 2;
inline void AlterAliasRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& AlterAliasRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.AlterAliasRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlterAliasRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.AlterAliasRequest.db_name)
}
inline std::string* AlterAliasRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.AlterAliasRequest.db_name)
  return _s;
}
inline const std::string& AlterAliasRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void AlterAliasRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AlterAliasRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AlterAliasRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.AlterAliasRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void AlterAliasRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.AlterAliasRequest.db_name)
}

// string collection_name = 3;
inline void AlterAliasRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& AlterAliasRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.AlterAliasRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlterAliasRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.AlterAliasRequest.collection_name)
}
inline std::string* AlterAliasRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.AlterAliasRequest.collection_name)
  return _s;
}
inline const std::string& AlterAliasRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void AlterAliasRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AlterAliasRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AlterAliasRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.AlterAliasRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void AlterAliasRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.AlterAliasRequest.collection_name)
}

// string alias = 4;
inline void AlterAliasRequest::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& AlterAliasRequest::alias() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.AlterAliasRequest.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlterAliasRequest::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.AlterAliasRequest.alias)
}
inline std::string* AlterAliasRequest::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.AlterAliasRequest.alias)
  return _s;
}
inline const std::string& AlterAliasRequest::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void AlterAliasRequest::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* AlterAliasRequest::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* AlterAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.AlterAliasRequest.alias)
  return _impl_.alias_.Release();
}
inline void AlterAliasRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.AlterAliasRequest.alias)
}

// -------------------------------------------------------------------

// DescribeAliasRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DescribeAliasRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DescribeAliasRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DescribeAliasRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DescribeAliasRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeAliasRequest.base)
  return _internal_base();
}
inline void DescribeAliasRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DescribeAliasRequest.base)
}
inline ::milvus::proto::common::MsgBase* DescribeAliasRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeAliasRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeAliasRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeAliasRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DescribeAliasRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeAliasRequest.base)
  return _msg;
}
inline void DescribeAliasRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeAliasRequest.base)
}

// string db_name = 2;
inline void DescribeAliasRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DescribeAliasRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeAliasRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeAliasRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeAliasRequest.db_name)
}
inline std::string* DescribeAliasRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeAliasRequest.db_name)
  return _s;
}
inline const std::string& DescribeAliasRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DescribeAliasRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeAliasRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeAliasRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeAliasRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void DescribeAliasRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeAliasRequest.db_name)
}

// string alias = 3;
inline void DescribeAliasRequest::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& DescribeAliasRequest::alias() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeAliasRequest.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeAliasRequest::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeAliasRequest.alias)
}
inline std::string* DescribeAliasRequest::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeAliasRequest.alias)
  return _s;
}
inline const std::string& DescribeAliasRequest::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void DescribeAliasRequest::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeAliasRequest::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeAliasRequest.alias)
  return _impl_.alias_.Release();
}
inline void DescribeAliasRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeAliasRequest.alias)
}

// -------------------------------------------------------------------

// DescribeAliasResponse

// .milvus.proto.common.Status status = 1;
inline bool DescribeAliasResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool DescribeAliasResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& DescribeAliasResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& DescribeAliasResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeAliasResponse.status)
  return _internal_status();
}
inline void DescribeAliasResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DescribeAliasResponse.status)
}
inline ::milvus::proto::common::Status* DescribeAliasResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* DescribeAliasResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeAliasResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* DescribeAliasResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* DescribeAliasResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeAliasResponse.status)
  return _msg;
}
inline void DescribeAliasResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeAliasResponse.status)
}

// string db_name = 2;
inline void DescribeAliasResponse::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DescribeAliasResponse::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeAliasResponse.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeAliasResponse::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeAliasResponse.db_name)
}
inline std::string* DescribeAliasResponse::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeAliasResponse.db_name)
  return _s;
}
inline const std::string& DescribeAliasResponse::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DescribeAliasResponse::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeAliasResponse::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeAliasResponse::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeAliasResponse.db_name)
  return _impl_.db_name_.Release();
}
inline void DescribeAliasResponse::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeAliasResponse.db_name)
}

// string alias = 3;
inline void DescribeAliasResponse::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& DescribeAliasResponse::alias() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeAliasResponse.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeAliasResponse::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeAliasResponse.alias)
}
inline std::string* DescribeAliasResponse::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeAliasResponse.alias)
  return _s;
}
inline const std::string& DescribeAliasResponse::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void DescribeAliasResponse::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeAliasResponse::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeAliasResponse::release_alias() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeAliasResponse.alias)
  return _impl_.alias_.Release();
}
inline void DescribeAliasResponse::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeAliasResponse.alias)
}

// string collection = 4;
inline void DescribeAliasResponse::clear_collection() {
  _impl_.collection_.ClearToEmpty();
}
inline const std::string& DescribeAliasResponse::collection() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeAliasResponse.collection)
  return _internal_collection();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeAliasResponse::set_collection(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeAliasResponse.collection)
}
inline std::string* DescribeAliasResponse::mutable_collection() {
  std::string* _s = _internal_mutable_collection();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeAliasResponse.collection)
  return _s;
}
inline const std::string& DescribeAliasResponse::_internal_collection() const {
  return _impl_.collection_.Get();
}
inline void DescribeAliasResponse::_internal_set_collection(const std::string& value) {
  
  _impl_.collection_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeAliasResponse::_internal_mutable_collection() {
  
  return _impl_.collection_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeAliasResponse::release_collection() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeAliasResponse.collection)
  return _impl_.collection_.Release();
}
inline void DescribeAliasResponse::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  _impl_.collection_.SetAllocated(collection, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_.IsDefault()) {
    _impl_.collection_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeAliasResponse.collection)
}

// -------------------------------------------------------------------

// ListAliasesRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ListAliasesRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ListAliasesRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ListAliasesRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ListAliasesRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListAliasesRequest.base)
  return _internal_base();
}
inline void ListAliasesRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ListAliasesRequest.base)
}
inline ::milvus::proto::common::MsgBase* ListAliasesRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ListAliasesRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListAliasesRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ListAliasesRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ListAliasesRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListAliasesRequest.base)
  return _msg;
}
inline void ListAliasesRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListAliasesRequest.base)
}

// string db_name = 2;
inline void ListAliasesRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& ListAliasesRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListAliasesRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAliasesRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListAliasesRequest.db_name)
}
inline std::string* ListAliasesRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListAliasesRequest.db_name)
  return _s;
}
inline const std::string& ListAliasesRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void ListAliasesRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAliasesRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAliasesRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListAliasesRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void ListAliasesRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListAliasesRequest.db_name)
}

// string collection_name = 3;
inline void ListAliasesRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& ListAliasesRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListAliasesRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAliasesRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListAliasesRequest.collection_name)
}
inline std::string* ListAliasesRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListAliasesRequest.collection_name)
  return _s;
}
inline const std::string& ListAliasesRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void ListAliasesRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAliasesRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAliasesRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListAliasesRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void ListAliasesRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListAliasesRequest.collection_name)
}

// -------------------------------------------------------------------

// ListAliasesResponse

// .milvus.proto.common.Status status = 1;
inline bool ListAliasesResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ListAliasesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ListAliasesResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ListAliasesResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListAliasesResponse.status)
  return _internal_status();
}
inline void ListAliasesResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ListAliasesResponse.status)
}
inline ::milvus::proto::common::Status* ListAliasesResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ListAliasesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListAliasesResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ListAliasesResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ListAliasesResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListAliasesResponse.status)
  return _msg;
}
inline void ListAliasesResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListAliasesResponse.status)
}

// string db_name = 2;
inline void ListAliasesResponse::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& ListAliasesResponse::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListAliasesResponse.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAliasesResponse::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListAliasesResponse.db_name)
}
inline std::string* ListAliasesResponse::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListAliasesResponse.db_name)
  return _s;
}
inline const std::string& ListAliasesResponse::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void ListAliasesResponse::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAliasesResponse::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAliasesResponse::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListAliasesResponse.db_name)
  return _impl_.db_name_.Release();
}
inline void ListAliasesResponse::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListAliasesResponse.db_name)
}

// string collection_name = 3;
inline void ListAliasesResponse::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& ListAliasesResponse::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListAliasesResponse.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAliasesResponse::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListAliasesResponse.collection_name)
}
inline std::string* ListAliasesResponse::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListAliasesResponse.collection_name)
  return _s;
}
inline const std::string& ListAliasesResponse::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void ListAliasesResponse::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAliasesResponse::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAliasesResponse::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListAliasesResponse.collection_name)
  return _impl_.collection_name_.Release();
}
inline void ListAliasesResponse::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListAliasesResponse.collection_name)
}

// repeated string aliases = 4;
inline int ListAliasesResponse::_internal_aliases_size() const {
  return _impl_.aliases_.size();
}
inline int ListAliasesResponse::aliases_size() const {
  return _internal_aliases_size();
}
inline void ListAliasesResponse::clear_aliases() {
  _impl_.aliases_.Clear();
}
inline std::string* ListAliasesResponse::add_aliases() {
  std::string* _s = _internal_add_aliases();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ListAliasesResponse.aliases)
  return _s;
}
inline const std::string& ListAliasesResponse::_internal_aliases(int index) const {
  return _impl_.aliases_.Get(index);
}
inline const std::string& ListAliasesResponse::aliases(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListAliasesResponse.aliases)
  return _internal_aliases(index);
}
inline std::string* ListAliasesResponse::mutable_aliases(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListAliasesResponse.aliases)
  return _impl_.aliases_.Mutable(index);
}
inline void ListAliasesResponse::set_aliases(int index, const std::string& value) {
  _impl_.aliases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListAliasesResponse.aliases)
}
inline void ListAliasesResponse::set_aliases(int index, std::string&& value) {
  _impl_.aliases_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListAliasesResponse.aliases)
}
inline void ListAliasesResponse::set_aliases(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.aliases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ListAliasesResponse.aliases)
}
inline void ListAliasesResponse::set_aliases(int index, const char* value, size_t size) {
  _impl_.aliases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ListAliasesResponse.aliases)
}
inline std::string* ListAliasesResponse::_internal_add_aliases() {
  return _impl_.aliases_.Add();
}
inline void ListAliasesResponse::add_aliases(const std::string& value) {
  _impl_.aliases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ListAliasesResponse.aliases)
}
inline void ListAliasesResponse::add_aliases(std::string&& value) {
  _impl_.aliases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ListAliasesResponse.aliases)
}
inline void ListAliasesResponse::add_aliases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.aliases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ListAliasesResponse.aliases)
}
inline void ListAliasesResponse::add_aliases(const char* value, size_t size) {
  _impl_.aliases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ListAliasesResponse.aliases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListAliasesResponse::aliases() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ListAliasesResponse.aliases)
  return _impl_.aliases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListAliasesResponse::mutable_aliases() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ListAliasesResponse.aliases)
  return &_impl_.aliases_;
}

// -------------------------------------------------------------------

// CreateCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreateCollectionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool CreateCollectionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CreateCollectionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CreateCollectionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCollectionRequest.base)
  return _internal_base();
}
inline void CreateCollectionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CreateCollectionRequest.base)
}
inline ::milvus::proto::common::MsgBase* CreateCollectionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateCollectionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateCollectionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* CreateCollectionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateCollectionRequest.base)
  return _msg;
}
inline void CreateCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateCollectionRequest.base)
}

// string db_name = 2;
inline void CreateCollectionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& CreateCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCollectionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCollectionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCollectionRequest.db_name)
}
inline std::string* CreateCollectionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateCollectionRequest.db_name)
  return _s;
}
inline const std::string& CreateCollectionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void CreateCollectionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCollectionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateCollectionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void CreateCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateCollectionRequest.db_name)
}

// string collection_name = 3;
inline void CreateCollectionRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& CreateCollectionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCollectionRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCollectionRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCollectionRequest.collection_name)
}
inline std::string* CreateCollectionRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateCollectionRequest.collection_name)
  return _s;
}
inline const std::string& CreateCollectionRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void CreateCollectionRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCollectionRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCollectionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateCollectionRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void CreateCollectionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateCollectionRequest.collection_name)
}

// bytes schema = 4;
inline void CreateCollectionRequest::clear_schema() {
  _impl_.schema_.ClearToEmpty();
}
inline const std::string& CreateCollectionRequest::schema() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCollectionRequest.schema)
  return _internal_schema();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCollectionRequest::set_schema(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schema_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCollectionRequest.schema)
}
inline std::string* CreateCollectionRequest::mutable_schema() {
  std::string* _s = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateCollectionRequest.schema)
  return _s;
}
inline const std::string& CreateCollectionRequest::_internal_schema() const {
  return _impl_.schema_.Get();
}
inline void CreateCollectionRequest::_internal_set_schema(const std::string& value) {
  
  _impl_.schema_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCollectionRequest::_internal_mutable_schema() {
  
  return _impl_.schema_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCollectionRequest::release_schema() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateCollectionRequest.schema)
  return _impl_.schema_.Release();
}
inline void CreateCollectionRequest::set_allocated_schema(std::string* schema) {
  if (schema != nullptr) {
    
  } else {
    
  }
  _impl_.schema_.SetAllocated(schema, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_.IsDefault()) {
    _impl_.schema_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateCollectionRequest.schema)
}

// int32 shards_num = 5;
inline void CreateCollectionRequest::clear_shards_num() {
  _impl_.shards_num_ = 0;
}
inline int32_t CreateCollectionRequest::_internal_shards_num() const {
  return _impl_.shards_num_;
}
inline int32_t CreateCollectionRequest::shards_num() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCollectionRequest.shards_num)
  return _internal_shards_num();
}
inline void CreateCollectionRequest::_internal_set_shards_num(int32_t value) {
  
  _impl_.shards_num_ = value;
}
inline void CreateCollectionRequest::set_shards_num(int32_t value) {
  _internal_set_shards_num(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCollectionRequest.shards_num)
}

// .milvus.proto.common.ConsistencyLevel consistency_level = 6;
inline void CreateCollectionRequest::clear_consistency_level() {
  _impl_.consistency_level_ = 0;
}
inline ::milvus::proto::common::ConsistencyLevel CreateCollectionRequest::_internal_consistency_level() const {
  return static_cast< ::milvus::proto::common::ConsistencyLevel >(_impl_.consistency_level_);
}
inline ::milvus::proto::common::ConsistencyLevel CreateCollectionRequest::consistency_level() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCollectionRequest.consistency_level)
  return _internal_consistency_level();
}
inline void CreateCollectionRequest::_internal_set_consistency_level(::milvus::proto::common::ConsistencyLevel value) {
  
  _impl_.consistency_level_ = value;
}
inline void CreateCollectionRequest::set_consistency_level(::milvus::proto::common::ConsistencyLevel value) {
  _internal_set_consistency_level(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCollectionRequest.consistency_level)
}

// repeated .milvus.proto.common.KeyValuePair properties = 7;
inline int CreateCollectionRequest::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int CreateCollectionRequest::properties_size() const {
  return _internal_properties_size();
}
inline ::milvus::proto::common::KeyValuePair* CreateCollectionRequest::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateCollectionRequest.properties)
  return _impl_.properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
CreateCollectionRequest::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.CreateCollectionRequest.properties)
  return &_impl_.properties_;
}
inline const ::milvus::proto::common::KeyValuePair& CreateCollectionRequest::_internal_properties(int index) const {
  return _impl_.properties_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& CreateCollectionRequest::properties(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCollectionRequest.properties)
  return _internal_properties(index);
}
inline ::milvus::proto::common::KeyValuePair* CreateCollectionRequest::_internal_add_properties() {
  return _impl_.properties_.Add();
}
inline ::milvus::proto::common::KeyValuePair* CreateCollectionRequest::add_properties() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.CreateCollectionRequest.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
CreateCollectionRequest::properties() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.CreateCollectionRequest.properties)
  return _impl_.properties_;
}

// int64 num_partitions = 8;
inline void CreateCollectionRequest::clear_num_partitions() {
  _impl_.num_partitions_ = int64_t{0};
}
inline int64_t CreateCollectionRequest::_internal_num_partitions() const {
  return _impl_.num_partitions_;
}
inline int64_t CreateCollectionRequest::num_partitions() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCollectionRequest.num_partitions)
  return _internal_num_partitions();
}
inline void CreateCollectionRequest::_internal_set_num_partitions(int64_t value) {
  
  _impl_.num_partitions_ = value;
}
inline void CreateCollectionRequest::set_num_partitions(int64_t value) {
  _internal_set_num_partitions(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCollectionRequest.num_partitions)
}

// -------------------------------------------------------------------

// DropCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropCollectionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DropCollectionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DropCollectionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DropCollectionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropCollectionRequest.base)
  return _internal_base();
}
inline void DropCollectionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DropCollectionRequest.base)
}
inline ::milvus::proto::common::MsgBase* DropCollectionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropCollectionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropCollectionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DropCollectionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropCollectionRequest.base)
  return _msg;
}
inline void DropCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropCollectionRequest.base)
}

// string db_name = 2;
inline void DropCollectionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DropCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropCollectionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropCollectionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropCollectionRequest.db_name)
}
inline std::string* DropCollectionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropCollectionRequest.db_name)
  return _s;
}
inline const std::string& DropCollectionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DropCollectionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropCollectionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropCollectionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void DropCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropCollectionRequest.db_name)
}

// string collection_name = 3;
inline void DropCollectionRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& DropCollectionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropCollectionRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropCollectionRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropCollectionRequest.collection_name)
}
inline std::string* DropCollectionRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropCollectionRequest.collection_name)
  return _s;
}
inline const std::string& DropCollectionRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void DropCollectionRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropCollectionRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropCollectionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropCollectionRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void DropCollectionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropCollectionRequest.collection_name)
}

// -------------------------------------------------------------------

// AlterCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool AlterCollectionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool AlterCollectionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& AlterCollectionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& AlterCollectionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.AlterCollectionRequest.base)
  return _internal_base();
}
inline void AlterCollectionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.AlterCollectionRequest.base)
}
inline ::milvus::proto::common::MsgBase* AlterCollectionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* AlterCollectionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.AlterCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* AlterCollectionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* AlterCollectionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.AlterCollectionRequest.base)
  return _msg;
}
inline void AlterCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.AlterCollectionRequest.base)
}

// string db_name = 2;
inline void AlterCollectionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& AlterCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.AlterCollectionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlterCollectionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.AlterCollectionRequest.db_name)
}
inline std::string* AlterCollectionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.AlterCollectionRequest.db_name)
  return _s;
}
inline const std::string& AlterCollectionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void AlterCollectionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AlterCollectionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AlterCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.AlterCollectionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void AlterCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.AlterCollectionRequest.db_name)
}

// string collection_name = 3;
inline void AlterCollectionRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& AlterCollectionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.AlterCollectionRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlterCollectionRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.AlterCollectionRequest.collection_name)
}
inline std::string* AlterCollectionRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.AlterCollectionRequest.collection_name)
  return _s;
}
inline const std::string& AlterCollectionRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void AlterCollectionRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AlterCollectionRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AlterCollectionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.AlterCollectionRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void AlterCollectionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.AlterCollectionRequest.collection_name)
}

// int64 collectionID = 4;
inline void AlterCollectionRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t AlterCollectionRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t AlterCollectionRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.AlterCollectionRequest.collectionID)
  return _internal_collectionid();
}
inline void AlterCollectionRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void AlterCollectionRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.AlterCollectionRequest.collectionID)
}

// repeated .milvus.proto.common.KeyValuePair properties = 5;
inline int AlterCollectionRequest::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int AlterCollectionRequest::properties_size() const {
  return _internal_properties_size();
}
inline ::milvus::proto::common::KeyValuePair* AlterCollectionRequest::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.AlterCollectionRequest.properties)
  return _impl_.properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
AlterCollectionRequest::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.AlterCollectionRequest.properties)
  return &_impl_.properties_;
}
inline const ::milvus::proto::common::KeyValuePair& AlterCollectionRequest::_internal_properties(int index) const {
  return _impl_.properties_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& AlterCollectionRequest::properties(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.AlterCollectionRequest.properties)
  return _internal_properties(index);
}
inline ::milvus::proto::common::KeyValuePair* AlterCollectionRequest::_internal_add_properties() {
  return _impl_.properties_.Add();
}
inline ::milvus::proto::common::KeyValuePair* AlterCollectionRequest::add_properties() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.AlterCollectionRequest.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
AlterCollectionRequest::properties() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.AlterCollectionRequest.properties)
  return _impl_.properties_;
}

// -------------------------------------------------------------------

// HasCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool HasCollectionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool HasCollectionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& HasCollectionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& HasCollectionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasCollectionRequest.base)
  return _internal_base();
}
inline void HasCollectionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.HasCollectionRequest.base)
}
inline ::milvus::proto::common::MsgBase* HasCollectionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* HasCollectionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.HasCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* HasCollectionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* HasCollectionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.HasCollectionRequest.base)
  return _msg;
}
inline void HasCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.HasCollectionRequest.base)
}

// string db_name = 2;
inline void HasCollectionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& HasCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasCollectionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HasCollectionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.HasCollectionRequest.db_name)
}
inline std::string* HasCollectionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.HasCollectionRequest.db_name)
  return _s;
}
inline const std::string& HasCollectionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void HasCollectionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* HasCollectionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* HasCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.HasCollectionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void HasCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.HasCollectionRequest.db_name)
}

// string collection_name = 3;
inline void HasCollectionRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& HasCollectionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasCollectionRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HasCollectionRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.HasCollectionRequest.collection_name)
}
inline std::string* HasCollectionRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.HasCollectionRequest.collection_name)
  return _s;
}
inline const std::string& HasCollectionRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void HasCollectionRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* HasCollectionRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* HasCollectionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.HasCollectionRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void HasCollectionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.HasCollectionRequest.collection_name)
}

// uint64 time_stamp = 4;
inline void HasCollectionRequest::clear_time_stamp() {
  _impl_.time_stamp_ = uint64_t{0u};
}
inline uint64_t HasCollectionRequest::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline uint64_t HasCollectionRequest::time_stamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasCollectionRequest.time_stamp)
  return _internal_time_stamp();
}
inline void HasCollectionRequest::_internal_set_time_stamp(uint64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void HasCollectionRequest::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.HasCollectionRequest.time_stamp)
}

// -------------------------------------------------------------------

// BoolResponse

// .milvus.proto.common.Status status = 1;
inline bool BoolResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool BoolResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& BoolResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& BoolResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.BoolResponse.status)
  return _internal_status();
}
inline void BoolResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.BoolResponse.status)
}
inline ::milvus::proto::common::Status* BoolResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* BoolResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.BoolResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* BoolResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* BoolResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.BoolResponse.status)
  return _msg;
}
inline void BoolResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.BoolResponse.status)
}

// bool value = 2;
inline void BoolResponse::clear_value() {
  _impl_.value_ = false;
}
inline bool BoolResponse::_internal_value() const {
  return _impl_.value_;
}
inline bool BoolResponse::value() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.BoolResponse.value)
  return _internal_value();
}
inline void BoolResponse::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void BoolResponse::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.BoolResponse.value)
}

// -------------------------------------------------------------------

// StringResponse

// .milvus.proto.common.Status status = 1;
inline bool StringResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool StringResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& StringResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& StringResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.StringResponse.status)
  return _internal_status();
}
inline void StringResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.StringResponse.status)
}
inline ::milvus::proto::common::Status* StringResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* StringResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.StringResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* StringResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* StringResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.StringResponse.status)
  return _msg;
}
inline void StringResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.StringResponse.status)
}

// string value = 2;
inline void StringResponse::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& StringResponse::value() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.StringResponse.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringResponse::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.StringResponse.value)
}
inline std::string* StringResponse::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.StringResponse.value)
  return _s;
}
inline const std::string& StringResponse::_internal_value() const {
  return _impl_.value_.Get();
}
inline void StringResponse::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* StringResponse::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* StringResponse::release_value() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.StringResponse.value)
  return _impl_.value_.Release();
}
inline void StringResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.StringResponse.value)
}

// -------------------------------------------------------------------

// DescribeCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DescribeCollectionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DescribeCollectionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DescribeCollectionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DescribeCollectionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionRequest.base)
  return _internal_base();
}
inline void DescribeCollectionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DescribeCollectionRequest.base)
}
inline ::milvus::proto::common::MsgBase* DescribeCollectionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeCollectionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeCollectionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DescribeCollectionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionRequest.base)
  return _msg;
}
inline void DescribeCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeCollectionRequest.base)
}

// string db_name = 2;
inline void DescribeCollectionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DescribeCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeCollectionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionRequest.db_name)
}
inline std::string* DescribeCollectionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionRequest.db_name)
  return _s;
}
inline const std::string& DescribeCollectionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DescribeCollectionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeCollectionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeCollectionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void DescribeCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeCollectionRequest.db_name)
}

// string collection_name = 3;
inline void DescribeCollectionRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& DescribeCollectionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeCollectionRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionRequest.collection_name)
}
inline std::string* DescribeCollectionRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionRequest.collection_name)
  return _s;
}
inline const std::string& DescribeCollectionRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void DescribeCollectionRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeCollectionRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeCollectionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeCollectionRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void DescribeCollectionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeCollectionRequest.collection_name)
}

// int64 collectionID = 4;
inline void DescribeCollectionRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t DescribeCollectionRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t DescribeCollectionRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionRequest.collectionID)
  return _internal_collectionid();
}
inline void DescribeCollectionRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void DescribeCollectionRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionRequest.collectionID)
}

// uint64 time_stamp = 5;
inline void DescribeCollectionRequest::clear_time_stamp() {
  _impl_.time_stamp_ = uint64_t{0u};
}
inline uint64_t DescribeCollectionRequest::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline uint64_t DescribeCollectionRequest::time_stamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionRequest.time_stamp)
  return _internal_time_stamp();
}
inline void DescribeCollectionRequest::_internal_set_time_stamp(uint64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void DescribeCollectionRequest::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionRequest.time_stamp)
}

// -------------------------------------------------------------------

// DescribeCollectionResponse

// .milvus.proto.common.Status status = 1;
inline bool DescribeCollectionResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool DescribeCollectionResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& DescribeCollectionResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& DescribeCollectionResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.status)
  return _internal_status();
}
inline void DescribeCollectionResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DescribeCollectionResponse.status)
}
inline ::milvus::proto::common::Status* DescribeCollectionResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* DescribeCollectionResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeCollectionResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* DescribeCollectionResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* DescribeCollectionResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.status)
  return _msg;
}
inline void DescribeCollectionResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeCollectionResponse.status)
}

// .milvus.proto.schema.CollectionSchema schema = 2;
inline bool DescribeCollectionResponse::_internal_has_schema() const {
  return this != internal_default_instance() && _impl_.schema_ != nullptr;
}
inline bool DescribeCollectionResponse::has_schema() const {
  return _internal_has_schema();
}
inline const ::milvus::proto::schema::CollectionSchema& DescribeCollectionResponse::_internal_schema() const {
  const ::milvus::proto::schema::CollectionSchema* p = _impl_.schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::schema::CollectionSchema&>(
      ::milvus::proto::schema::_CollectionSchema_default_instance_);
}
inline const ::milvus::proto::schema::CollectionSchema& DescribeCollectionResponse::schema() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.schema)
  return _internal_schema();
}
inline void DescribeCollectionResponse::unsafe_arena_set_allocated_schema(
    ::milvus::proto::schema::CollectionSchema* schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_);
  }
  _impl_.schema_ = schema;
  if (schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DescribeCollectionResponse.schema)
}
inline ::milvus::proto::schema::CollectionSchema* DescribeCollectionResponse::release_schema() {
  
  ::milvus::proto::schema::CollectionSchema* temp = _impl_.schema_;
  _impl_.schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::schema::CollectionSchema* DescribeCollectionResponse::unsafe_arena_release_schema() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeCollectionResponse.schema)
  
  ::milvus::proto::schema::CollectionSchema* temp = _impl_.schema_;
  _impl_.schema_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::CollectionSchema* DescribeCollectionResponse::_internal_mutable_schema() {
  
  if (_impl_.schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::CollectionSchema>(GetArenaForAllocation());
    _impl_.schema_ = p;
  }
  return _impl_.schema_;
}
inline ::milvus::proto::schema::CollectionSchema* DescribeCollectionResponse::mutable_schema() {
  ::milvus::proto::schema::CollectionSchema* _msg = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.schema)
  return _msg;
}
inline void DescribeCollectionResponse::set_allocated_schema(::milvus::proto::schema::CollectionSchema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_);
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema));
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeCollectionResponse.schema)
}

// int64 collectionID = 3;
inline void DescribeCollectionResponse::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t DescribeCollectionResponse::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t DescribeCollectionResponse::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.collectionID)
  return _internal_collectionid();
}
inline void DescribeCollectionResponse::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void DescribeCollectionResponse::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.collectionID)
}

// repeated string virtual_channel_names = 4;
inline int DescribeCollectionResponse::_internal_virtual_channel_names_size() const {
  return _impl_.virtual_channel_names_.size();
}
inline int DescribeCollectionResponse::virtual_channel_names_size() const {
  return _internal_virtual_channel_names_size();
}
inline void DescribeCollectionResponse::clear_virtual_channel_names() {
  _impl_.virtual_channel_names_.Clear();
}
inline std::string* DescribeCollectionResponse::add_virtual_channel_names() {
  std::string* _s = _internal_add_virtual_channel_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
  return _s;
}
inline const std::string& DescribeCollectionResponse::_internal_virtual_channel_names(int index) const {
  return _impl_.virtual_channel_names_.Get(index);
}
inline const std::string& DescribeCollectionResponse::virtual_channel_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
  return _internal_virtual_channel_names(index);
}
inline std::string* DescribeCollectionResponse::mutable_virtual_channel_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
  return _impl_.virtual_channel_names_.Mutable(index);
}
inline void DescribeCollectionResponse::set_virtual_channel_names(int index, const std::string& value) {
  _impl_.virtual_channel_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
}
inline void DescribeCollectionResponse::set_virtual_channel_names(int index, std::string&& value) {
  _impl_.virtual_channel_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
}
inline void DescribeCollectionResponse::set_virtual_channel_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.virtual_channel_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
}
inline void DescribeCollectionResponse::set_virtual_channel_names(int index, const char* value, size_t size) {
  _impl_.virtual_channel_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
}
inline std::string* DescribeCollectionResponse::_internal_add_virtual_channel_names() {
  return _impl_.virtual_channel_names_.Add();
}
inline void DescribeCollectionResponse::add_virtual_channel_names(const std::string& value) {
  _impl_.virtual_channel_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
}
inline void DescribeCollectionResponse::add_virtual_channel_names(std::string&& value) {
  _impl_.virtual_channel_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
}
inline void DescribeCollectionResponse::add_virtual_channel_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.virtual_channel_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
}
inline void DescribeCollectionResponse::add_virtual_channel_names(const char* value, size_t size) {
  _impl_.virtual_channel_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DescribeCollectionResponse::virtual_channel_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
  return _impl_.virtual_channel_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DescribeCollectionResponse::mutable_virtual_channel_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names)
  return &_impl_.virtual_channel_names_;
}

// repeated string physical_channel_names = 5;
inline int DescribeCollectionResponse::_internal_physical_channel_names_size() const {
  return _impl_.physical_channel_names_.size();
}
inline int DescribeCollectionResponse::physical_channel_names_size() const {
  return _internal_physical_channel_names_size();
}
inline void DescribeCollectionResponse::clear_physical_channel_names() {
  _impl_.physical_channel_names_.Clear();
}
inline std::string* DescribeCollectionResponse::add_physical_channel_names() {
  std::string* _s = _internal_add_physical_channel_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
  return _s;
}
inline const std::string& DescribeCollectionResponse::_internal_physical_channel_names(int index) const {
  return _impl_.physical_channel_names_.Get(index);
}
inline const std::string& DescribeCollectionResponse::physical_channel_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
  return _internal_physical_channel_names(index);
}
inline std::string* DescribeCollectionResponse::mutable_physical_channel_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
  return _impl_.physical_channel_names_.Mutable(index);
}
inline void DescribeCollectionResponse::set_physical_channel_names(int index, const std::string& value) {
  _impl_.physical_channel_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
}
inline void DescribeCollectionResponse::set_physical_channel_names(int index, std::string&& value) {
  _impl_.physical_channel_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
}
inline void DescribeCollectionResponse::set_physical_channel_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.physical_channel_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
}
inline void DescribeCollectionResponse::set_physical_channel_names(int index, const char* value, size_t size) {
  _impl_.physical_channel_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
}
inline std::string* DescribeCollectionResponse::_internal_add_physical_channel_names() {
  return _impl_.physical_channel_names_.Add();
}
inline void DescribeCollectionResponse::add_physical_channel_names(const std::string& value) {
  _impl_.physical_channel_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
}
inline void DescribeCollectionResponse::add_physical_channel_names(std::string&& value) {
  _impl_.physical_channel_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
}
inline void DescribeCollectionResponse::add_physical_channel_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.physical_channel_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
}
inline void DescribeCollectionResponse::add_physical_channel_names(const char* value, size_t size) {
  _impl_.physical_channel_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DescribeCollectionResponse::physical_channel_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
  return _impl_.physical_channel_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DescribeCollectionResponse::mutable_physical_channel_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names)
  return &_impl_.physical_channel_names_;
}

// uint64 created_timestamp = 6;
inline void DescribeCollectionResponse::clear_created_timestamp() {
  _impl_.created_timestamp_ = uint64_t{0u};
}
inline uint64_t DescribeCollectionResponse::_internal_created_timestamp() const {
  return _impl_.created_timestamp_;
}
inline uint64_t DescribeCollectionResponse::created_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.created_timestamp)
  return _internal_created_timestamp();
}
inline void DescribeCollectionResponse::_internal_set_created_timestamp(uint64_t value) {
  
  _impl_.created_timestamp_ = value;
}
inline void DescribeCollectionResponse::set_created_timestamp(uint64_t value) {
  _internal_set_created_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.created_timestamp)
}

// uint64 created_utc_timestamp = 7;
inline void DescribeCollectionResponse::clear_created_utc_timestamp() {
  _impl_.created_utc_timestamp_ = uint64_t{0u};
}
inline uint64_t DescribeCollectionResponse::_internal_created_utc_timestamp() const {
  return _impl_.created_utc_timestamp_;
}
inline uint64_t DescribeCollectionResponse::created_utc_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.created_utc_timestamp)
  return _internal_created_utc_timestamp();
}
inline void DescribeCollectionResponse::_internal_set_created_utc_timestamp(uint64_t value) {
  
  _impl_.created_utc_timestamp_ = value;
}
inline void DescribeCollectionResponse::set_created_utc_timestamp(uint64_t value) {
  _internal_set_created_utc_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.created_utc_timestamp)
}

// int32 shards_num = 8;
inline void DescribeCollectionResponse::clear_shards_num() {
  _impl_.shards_num_ = 0;
}
inline int32_t DescribeCollectionResponse::_internal_shards_num() const {
  return _impl_.shards_num_;
}
inline int32_t DescribeCollectionResponse::shards_num() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.shards_num)
  return _internal_shards_num();
}
inline void DescribeCollectionResponse::_internal_set_shards_num(int32_t value) {
  
  _impl_.shards_num_ = value;
}
inline void DescribeCollectionResponse::set_shards_num(int32_t value) {
  _internal_set_shards_num(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.shards_num)
}

// repeated string aliases = 9;
inline int DescribeCollectionResponse::_internal_aliases_size() const {
  return _impl_.aliases_.size();
}
inline int DescribeCollectionResponse::aliases_size() const {
  return _internal_aliases_size();
}
inline void DescribeCollectionResponse::clear_aliases() {
  _impl_.aliases_.Clear();
}
inline std::string* DescribeCollectionResponse::add_aliases() {
  std::string* _s = _internal_add_aliases();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.DescribeCollectionResponse.aliases)
  return _s;
}
inline const std::string& DescribeCollectionResponse::_internal_aliases(int index) const {
  return _impl_.aliases_.Get(index);
}
inline const std::string& DescribeCollectionResponse::aliases(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.aliases)
  return _internal_aliases(index);
}
inline std::string* DescribeCollectionResponse::mutable_aliases(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.aliases)
  return _impl_.aliases_.Mutable(index);
}
inline void DescribeCollectionResponse::set_aliases(int index, const std::string& value) {
  _impl_.aliases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.aliases)
}
inline void DescribeCollectionResponse::set_aliases(int index, std::string&& value) {
  _impl_.aliases_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.aliases)
}
inline void DescribeCollectionResponse::set_aliases(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.aliases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.DescribeCollectionResponse.aliases)
}
inline void DescribeCollectionResponse::set_aliases(int index, const char* value, size_t size) {
  _impl_.aliases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.DescribeCollectionResponse.aliases)
}
inline std::string* DescribeCollectionResponse::_internal_add_aliases() {
  return _impl_.aliases_.Add();
}
inline void DescribeCollectionResponse::add_aliases(const std::string& value) {
  _impl_.aliases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.aliases)
}
inline void DescribeCollectionResponse::add_aliases(std::string&& value) {
  _impl_.aliases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.aliases)
}
inline void DescribeCollectionResponse::add_aliases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.aliases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.DescribeCollectionResponse.aliases)
}
inline void DescribeCollectionResponse::add_aliases(const char* value, size_t size) {
  _impl_.aliases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.DescribeCollectionResponse.aliases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DescribeCollectionResponse::aliases() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.DescribeCollectionResponse.aliases)
  return _impl_.aliases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DescribeCollectionResponse::mutable_aliases() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.DescribeCollectionResponse.aliases)
  return &_impl_.aliases_;
}

// repeated .milvus.proto.common.KeyDataPair start_positions = 10;
inline int DescribeCollectionResponse::_internal_start_positions_size() const {
  return _impl_.start_positions_.size();
}
inline int DescribeCollectionResponse::start_positions_size() const {
  return _internal_start_positions_size();
}
inline ::milvus::proto::common::KeyDataPair* DescribeCollectionResponse::mutable_start_positions(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.start_positions)
  return _impl_.start_positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >*
DescribeCollectionResponse::mutable_start_positions() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.DescribeCollectionResponse.start_positions)
  return &_impl_.start_positions_;
}
inline const ::milvus::proto::common::KeyDataPair& DescribeCollectionResponse::_internal_start_positions(int index) const {
  return _impl_.start_positions_.Get(index);
}
inline const ::milvus::proto::common::KeyDataPair& DescribeCollectionResponse::start_positions(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.start_positions)
  return _internal_start_positions(index);
}
inline ::milvus::proto::common::KeyDataPair* DescribeCollectionResponse::_internal_add_start_positions() {
  return _impl_.start_positions_.Add();
}
inline ::milvus::proto::common::KeyDataPair* DescribeCollectionResponse::add_start_positions() {
  ::milvus::proto::common::KeyDataPair* _add = _internal_add_start_positions();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.start_positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyDataPair >&
DescribeCollectionResponse::start_positions() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.DescribeCollectionResponse.start_positions)
  return _impl_.start_positions_;
}

// .milvus.proto.common.ConsistencyLevel consistency_level = 11;
inline void DescribeCollectionResponse::clear_consistency_level() {
  _impl_.consistency_level_ = 0;
}
inline ::milvus::proto::common::ConsistencyLevel DescribeCollectionResponse::_internal_consistency_level() const {
  return static_cast< ::milvus::proto::common::ConsistencyLevel >(_impl_.consistency_level_);
}
inline ::milvus::proto::common::ConsistencyLevel DescribeCollectionResponse::consistency_level() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.consistency_level)
  return _internal_consistency_level();
}
inline void DescribeCollectionResponse::_internal_set_consistency_level(::milvus::proto::common::ConsistencyLevel value) {
  
  _impl_.consistency_level_ = value;
}
inline void DescribeCollectionResponse::set_consistency_level(::milvus::proto::common::ConsistencyLevel value) {
  _internal_set_consistency_level(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.consistency_level)
}

// string collection_name = 12;
inline void DescribeCollectionResponse::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& DescribeCollectionResponse::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeCollectionResponse::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.collection_name)
}
inline std::string* DescribeCollectionResponse::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.collection_name)
  return _s;
}
inline const std::string& DescribeCollectionResponse::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void DescribeCollectionResponse::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeCollectionResponse::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeCollectionResponse::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeCollectionResponse.collection_name)
  return _impl_.collection_name_.Release();
}
inline void DescribeCollectionResponse::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeCollectionResponse.collection_name)
}

// repeated .milvus.proto.common.KeyValuePair properties = 13;
inline int DescribeCollectionResponse::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int DescribeCollectionResponse::properties_size() const {
  return _internal_properties_size();
}
inline ::milvus::proto::common::KeyValuePair* DescribeCollectionResponse::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.properties)
  return _impl_.properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
DescribeCollectionResponse::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.DescribeCollectionResponse.properties)
  return &_impl_.properties_;
}
inline const ::milvus::proto::common::KeyValuePair& DescribeCollectionResponse::_internal_properties(int index) const {
  return _impl_.properties_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& DescribeCollectionResponse::properties(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.properties)
  return _internal_properties(index);
}
inline ::milvus::proto::common::KeyValuePair* DescribeCollectionResponse::_internal_add_properties() {
  return _impl_.properties_.Add();
}
inline ::milvus::proto::common::KeyValuePair* DescribeCollectionResponse::add_properties() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeCollectionResponse.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
DescribeCollectionResponse::properties() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.DescribeCollectionResponse.properties)
  return _impl_.properties_;
}

// string db_name = 14;
inline void DescribeCollectionResponse::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DescribeCollectionResponse::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeCollectionResponse::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.db_name)
}
inline std::string* DescribeCollectionResponse::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeCollectionResponse.db_name)
  return _s;
}
inline const std::string& DescribeCollectionResponse::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DescribeCollectionResponse::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeCollectionResponse::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeCollectionResponse::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeCollectionResponse.db_name)
  return _impl_.db_name_.Release();
}
inline void DescribeCollectionResponse::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeCollectionResponse.db_name)
}

// int64 num_partitions = 15;
inline void DescribeCollectionResponse::clear_num_partitions() {
  _impl_.num_partitions_ = int64_t{0};
}
inline int64_t DescribeCollectionResponse::_internal_num_partitions() const {
  return _impl_.num_partitions_;
}
inline int64_t DescribeCollectionResponse::num_partitions() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeCollectionResponse.num_partitions)
  return _internal_num_partitions();
}
inline void DescribeCollectionResponse::_internal_set_num_partitions(int64_t value) {
  
  _impl_.num_partitions_ = value;
}
inline void DescribeCollectionResponse::set_num_partitions(int64_t value) {
  _internal_set_num_partitions(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeCollectionResponse.num_partitions)
}

// -------------------------------------------------------------------

// LoadCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool LoadCollectionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool LoadCollectionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& LoadCollectionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& LoadCollectionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadCollectionRequest.base)
  return _internal_base();
}
inline void LoadCollectionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.LoadCollectionRequest.base)
}
inline ::milvus::proto::common::MsgBase* LoadCollectionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* LoadCollectionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* LoadCollectionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* LoadCollectionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadCollectionRequest.base)
  return _msg;
}
inline void LoadCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadCollectionRequest.base)
}

// string db_name = 2;
inline void LoadCollectionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& LoadCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadCollectionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadCollectionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadCollectionRequest.db_name)
}
inline std::string* LoadCollectionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadCollectionRequest.db_name)
  return _s;
}
inline const std::string& LoadCollectionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void LoadCollectionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadCollectionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadCollectionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void LoadCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadCollectionRequest.db_name)
}

// string collection_name = 3;
inline void LoadCollectionRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& LoadCollectionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadCollectionRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadCollectionRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadCollectionRequest.collection_name)
}
inline std::string* LoadCollectionRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadCollectionRequest.collection_name)
  return _s;
}
inline const std::string& LoadCollectionRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void LoadCollectionRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadCollectionRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadCollectionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadCollectionRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void LoadCollectionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadCollectionRequest.collection_name)
}

// int32 replica_number = 4;
inline void LoadCollectionRequest::clear_replica_number() {
  _impl_.replica_number_ = 0;
}
inline int32_t LoadCollectionRequest::_internal_replica_number() const {
  return _impl_.replica_number_;
}
inline int32_t LoadCollectionRequest::replica_number() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadCollectionRequest.replica_number)
  return _internal_replica_number();
}
inline void LoadCollectionRequest::_internal_set_replica_number(int32_t value) {
  
  _impl_.replica_number_ = value;
}
inline void LoadCollectionRequest::set_replica_number(int32_t value) {
  _internal_set_replica_number(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadCollectionRequest.replica_number)
}

// repeated string resource_groups = 5;
inline int LoadCollectionRequest::_internal_resource_groups_size() const {
  return _impl_.resource_groups_.size();
}
inline int LoadCollectionRequest::resource_groups_size() const {
  return _internal_resource_groups_size();
}
inline void LoadCollectionRequest::clear_resource_groups() {
  _impl_.resource_groups_.Clear();
}
inline std::string* LoadCollectionRequest::add_resource_groups() {
  std::string* _s = _internal_add_resource_groups();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.LoadCollectionRequest.resource_groups)
  return _s;
}
inline const std::string& LoadCollectionRequest::_internal_resource_groups(int index) const {
  return _impl_.resource_groups_.Get(index);
}
inline const std::string& LoadCollectionRequest::resource_groups(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadCollectionRequest.resource_groups)
  return _internal_resource_groups(index);
}
inline std::string* LoadCollectionRequest::mutable_resource_groups(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadCollectionRequest.resource_groups)
  return _impl_.resource_groups_.Mutable(index);
}
inline void LoadCollectionRequest::set_resource_groups(int index, const std::string& value) {
  _impl_.resource_groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadCollectionRequest.resource_groups)
}
inline void LoadCollectionRequest::set_resource_groups(int index, std::string&& value) {
  _impl_.resource_groups_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadCollectionRequest.resource_groups)
}
inline void LoadCollectionRequest::set_resource_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.resource_groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.LoadCollectionRequest.resource_groups)
}
inline void LoadCollectionRequest::set_resource_groups(int index, const char* value, size_t size) {
  _impl_.resource_groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.LoadCollectionRequest.resource_groups)
}
inline std::string* LoadCollectionRequest::_internal_add_resource_groups() {
  return _impl_.resource_groups_.Add();
}
inline void LoadCollectionRequest::add_resource_groups(const std::string& value) {
  _impl_.resource_groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.LoadCollectionRequest.resource_groups)
}
inline void LoadCollectionRequest::add_resource_groups(std::string&& value) {
  _impl_.resource_groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.LoadCollectionRequest.resource_groups)
}
inline void LoadCollectionRequest::add_resource_groups(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.resource_groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.LoadCollectionRequest.resource_groups)
}
inline void LoadCollectionRequest::add_resource_groups(const char* value, size_t size) {
  _impl_.resource_groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.LoadCollectionRequest.resource_groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LoadCollectionRequest::resource_groups() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.LoadCollectionRequest.resource_groups)
  return _impl_.resource_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LoadCollectionRequest::mutable_resource_groups() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.LoadCollectionRequest.resource_groups)
  return &_impl_.resource_groups_;
}

// bool refresh = 6;
inline void LoadCollectionRequest::clear_refresh() {
  _impl_.refresh_ = false;
}
inline bool LoadCollectionRequest::_internal_refresh() const {
  return _impl_.refresh_;
}
inline bool LoadCollectionRequest::refresh() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadCollectionRequest.refresh)
  return _internal_refresh();
}
inline void LoadCollectionRequest::_internal_set_refresh(bool value) {
  
  _impl_.refresh_ = value;
}
inline void LoadCollectionRequest::set_refresh(bool value) {
  _internal_set_refresh(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadCollectionRequest.refresh)
}

// -------------------------------------------------------------------

// ReleaseCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ReleaseCollectionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ReleaseCollectionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ReleaseCollectionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ReleaseCollectionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReleaseCollectionRequest.base)
  return _internal_base();
}
inline void ReleaseCollectionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ReleaseCollectionRequest.base)
}
inline ::milvus::proto::common::MsgBase* ReleaseCollectionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ReleaseCollectionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ReleaseCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ReleaseCollectionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ReleaseCollectionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReleaseCollectionRequest.base)
  return _msg;
}
inline void ReleaseCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ReleaseCollectionRequest.base)
}

// string db_name = 2;
inline void ReleaseCollectionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& ReleaseCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReleaseCollectionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReleaseCollectionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReleaseCollectionRequest.db_name)
}
inline std::string* ReleaseCollectionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReleaseCollectionRequest.db_name)
  return _s;
}
inline const std::string& ReleaseCollectionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void ReleaseCollectionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReleaseCollectionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReleaseCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ReleaseCollectionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void ReleaseCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ReleaseCollectionRequest.db_name)
}

// string collection_name = 3;
inline void ReleaseCollectionRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& ReleaseCollectionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReleaseCollectionRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReleaseCollectionRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReleaseCollectionRequest.collection_name)
}
inline std::string* ReleaseCollectionRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReleaseCollectionRequest.collection_name)
  return _s;
}
inline const std::string& ReleaseCollectionRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void ReleaseCollectionRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReleaseCollectionRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReleaseCollectionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ReleaseCollectionRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void ReleaseCollectionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ReleaseCollectionRequest.collection_name)
}

// -------------------------------------------------------------------

// GetStatisticsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetStatisticsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetStatisticsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetStatisticsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetStatisticsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetStatisticsRequest.base)
  return _internal_base();
}
inline void GetStatisticsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetStatisticsRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetStatisticsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetStatisticsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetStatisticsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetStatisticsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetStatisticsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetStatisticsRequest.base)
  return _msg;
}
inline void GetStatisticsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetStatisticsRequest.base)
}

// string db_name = 2;
inline void GetStatisticsRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& GetStatisticsRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetStatisticsRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStatisticsRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetStatisticsRequest.db_name)
}
inline std::string* GetStatisticsRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetStatisticsRequest.db_name)
  return _s;
}
inline const std::string& GetStatisticsRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void GetStatisticsRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStatisticsRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStatisticsRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetStatisticsRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void GetStatisticsRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetStatisticsRequest.db_name)
}

// string collection_name = 3;
inline void GetStatisticsRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& GetStatisticsRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetStatisticsRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStatisticsRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetStatisticsRequest.collection_name)
}
inline std::string* GetStatisticsRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetStatisticsRequest.collection_name)
  return _s;
}
inline const std::string& GetStatisticsRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void GetStatisticsRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStatisticsRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStatisticsRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetStatisticsRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void GetStatisticsRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetStatisticsRequest.collection_name)
}

// repeated string partition_names = 4;
inline int GetStatisticsRequest::_internal_partition_names_size() const {
  return _impl_.partition_names_.size();
}
inline int GetStatisticsRequest::partition_names_size() const {
  return _internal_partition_names_size();
}
inline void GetStatisticsRequest::clear_partition_names() {
  _impl_.partition_names_.Clear();
}
inline std::string* GetStatisticsRequest::add_partition_names() {
  std::string* _s = _internal_add_partition_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.GetStatisticsRequest.partition_names)
  return _s;
}
inline const std::string& GetStatisticsRequest::_internal_partition_names(int index) const {
  return _impl_.partition_names_.Get(index);
}
inline const std::string& GetStatisticsRequest::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetStatisticsRequest.partition_names)
  return _internal_partition_names(index);
}
inline std::string* GetStatisticsRequest::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetStatisticsRequest.partition_names)
  return _impl_.partition_names_.Mutable(index);
}
inline void GetStatisticsRequest::set_partition_names(int index, const std::string& value) {
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetStatisticsRequest.partition_names)
}
inline void GetStatisticsRequest::set_partition_names(int index, std::string&& value) {
  _impl_.partition_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetStatisticsRequest.partition_names)
}
inline void GetStatisticsRequest::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetStatisticsRequest.partition_names)
}
inline void GetStatisticsRequest::set_partition_names(int index, const char* value, size_t size) {
  _impl_.partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetStatisticsRequest.partition_names)
}
inline std::string* GetStatisticsRequest::_internal_add_partition_names() {
  return _impl_.partition_names_.Add();
}
inline void GetStatisticsRequest::add_partition_names(const std::string& value) {
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetStatisticsRequest.partition_names)
}
inline void GetStatisticsRequest::add_partition_names(std::string&& value) {
  _impl_.partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetStatisticsRequest.partition_names)
}
inline void GetStatisticsRequest::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.GetStatisticsRequest.partition_names)
}
inline void GetStatisticsRequest::add_partition_names(const char* value, size_t size) {
  _impl_.partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.GetStatisticsRequest.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetStatisticsRequest::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetStatisticsRequest.partition_names)
  return _impl_.partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetStatisticsRequest::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetStatisticsRequest.partition_names)
  return &_impl_.partition_names_;
}

// uint64 guarantee_timestamp = 5;
inline void GetStatisticsRequest::clear_guarantee_timestamp() {
  _impl_.guarantee_timestamp_ = uint64_t{0u};
}
inline uint64_t GetStatisticsRequest::_internal_guarantee_timestamp() const {
  return _impl_.guarantee_timestamp_;
}
inline uint64_t GetStatisticsRequest::guarantee_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetStatisticsRequest.guarantee_timestamp)
  return _internal_guarantee_timestamp();
}
inline void GetStatisticsRequest::_internal_set_guarantee_timestamp(uint64_t value) {
  
  _impl_.guarantee_timestamp_ = value;
}
inline void GetStatisticsRequest::set_guarantee_timestamp(uint64_t value) {
  _internal_set_guarantee_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetStatisticsRequest.guarantee_timestamp)
}

// -------------------------------------------------------------------

// GetStatisticsResponse

// .milvus.proto.common.Status status = 1;
inline bool GetStatisticsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetStatisticsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetStatisticsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetStatisticsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetStatisticsResponse.status)
  return _internal_status();
}
inline void GetStatisticsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetStatisticsResponse.status)
}
inline ::milvus::proto::common::Status* GetStatisticsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetStatisticsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetStatisticsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetStatisticsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetStatisticsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetStatisticsResponse.status)
  return _msg;
}
inline void GetStatisticsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetStatisticsResponse.status)
}

// repeated .milvus.proto.common.KeyValuePair stats = 2;
inline int GetStatisticsResponse::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int GetStatisticsResponse::stats_size() const {
  return _internal_stats_size();
}
inline ::milvus::proto::common::KeyValuePair* GetStatisticsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetStatisticsResponse.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
GetStatisticsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetStatisticsResponse.stats)
  return &_impl_.stats_;
}
inline const ::milvus::proto::common::KeyValuePair& GetStatisticsResponse::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& GetStatisticsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetStatisticsResponse.stats)
  return _internal_stats(index);
}
inline ::milvus::proto::common::KeyValuePair* GetStatisticsResponse::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::milvus::proto::common::KeyValuePair* GetStatisticsResponse::add_stats() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetStatisticsResponse.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
GetStatisticsResponse::stats() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetStatisticsResponse.stats)
  return _impl_.stats_;
}

// -------------------------------------------------------------------

// GetCollectionStatisticsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetCollectionStatisticsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetCollectionStatisticsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetCollectionStatisticsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetCollectionStatisticsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCollectionStatisticsRequest.base)
  return _internal_base();
}
inline void GetCollectionStatisticsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetCollectionStatisticsRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetCollectionStatisticsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetCollectionStatisticsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetCollectionStatisticsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetCollectionStatisticsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetCollectionStatisticsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCollectionStatisticsRequest.base)
  return _msg;
}
inline void GetCollectionStatisticsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetCollectionStatisticsRequest.base)
}

// string db_name = 2;
inline void GetCollectionStatisticsRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& GetCollectionStatisticsRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCollectionStatisticsRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCollectionStatisticsRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCollectionStatisticsRequest.db_name)
}
inline std::string* GetCollectionStatisticsRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCollectionStatisticsRequest.db_name)
  return _s;
}
inline const std::string& GetCollectionStatisticsRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void GetCollectionStatisticsRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCollectionStatisticsRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCollectionStatisticsRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetCollectionStatisticsRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void GetCollectionStatisticsRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetCollectionStatisticsRequest.db_name)
}

// string collection_name = 3;
inline void GetCollectionStatisticsRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& GetCollectionStatisticsRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCollectionStatisticsRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name)
}
inline std::string* GetCollectionStatisticsRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name)
  return _s;
}
inline const std::string& GetCollectionStatisticsRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void GetCollectionStatisticsRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCollectionStatisticsRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCollectionStatisticsRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void GetCollectionStatisticsRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name)
}

// -------------------------------------------------------------------

// GetCollectionStatisticsResponse

// .milvus.proto.common.Status status = 1;
inline bool GetCollectionStatisticsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetCollectionStatisticsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetCollectionStatisticsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetCollectionStatisticsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCollectionStatisticsResponse.status)
  return _internal_status();
}
inline void GetCollectionStatisticsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetCollectionStatisticsResponse.status)
}
inline ::milvus::proto::common::Status* GetCollectionStatisticsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetCollectionStatisticsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetCollectionStatisticsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetCollectionStatisticsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetCollectionStatisticsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCollectionStatisticsResponse.status)
  return _msg;
}
inline void GetCollectionStatisticsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetCollectionStatisticsResponse.status)
}

// repeated .milvus.proto.common.KeyValuePair stats = 2;
inline int GetCollectionStatisticsResponse::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int GetCollectionStatisticsResponse::stats_size() const {
  return _internal_stats_size();
}
inline ::milvus::proto::common::KeyValuePair* GetCollectionStatisticsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCollectionStatisticsResponse.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
GetCollectionStatisticsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetCollectionStatisticsResponse.stats)
  return &_impl_.stats_;
}
inline const ::milvus::proto::common::KeyValuePair& GetCollectionStatisticsResponse::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& GetCollectionStatisticsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCollectionStatisticsResponse.stats)
  return _internal_stats(index);
}
inline ::milvus::proto::common::KeyValuePair* GetCollectionStatisticsResponse::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::milvus::proto::common::KeyValuePair* GetCollectionStatisticsResponse::add_stats() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetCollectionStatisticsResponse.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
GetCollectionStatisticsResponse::stats() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetCollectionStatisticsResponse.stats)
  return _impl_.stats_;
}

// -------------------------------------------------------------------

// ShowCollectionsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ShowCollectionsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ShowCollectionsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ShowCollectionsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ShowCollectionsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsRequest.base)
  return _internal_base();
}
inline void ShowCollectionsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ShowCollectionsRequest.base)
}
inline ::milvus::proto::common::MsgBase* ShowCollectionsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ShowCollectionsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowCollectionsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ShowCollectionsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ShowCollectionsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowCollectionsRequest.base)
  return _msg;
}
inline void ShowCollectionsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowCollectionsRequest.base)
}

// string db_name = 2;
inline void ShowCollectionsRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& ShowCollectionsRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShowCollectionsRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsRequest.db_name)
}
inline std::string* ShowCollectionsRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowCollectionsRequest.db_name)
  return _s;
}
inline const std::string& ShowCollectionsRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void ShowCollectionsRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ShowCollectionsRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ShowCollectionsRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowCollectionsRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void ShowCollectionsRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowCollectionsRequest.db_name)
}

// uint64 time_stamp = 3;
inline void ShowCollectionsRequest::clear_time_stamp() {
  _impl_.time_stamp_ = uint64_t{0u};
}
inline uint64_t ShowCollectionsRequest::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline uint64_t ShowCollectionsRequest::time_stamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsRequest.time_stamp)
  return _internal_time_stamp();
}
inline void ShowCollectionsRequest::_internal_set_time_stamp(uint64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void ShowCollectionsRequest::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsRequest.time_stamp)
}

// .milvus.proto.milvus.ShowType type = 4;
inline void ShowCollectionsRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::milvus::proto::milvus::ShowType ShowCollectionsRequest::_internal_type() const {
  return static_cast< ::milvus::proto::milvus::ShowType >(_impl_.type_);
}
inline ::milvus::proto::milvus::ShowType ShowCollectionsRequest::type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsRequest.type)
  return _internal_type();
}
inline void ShowCollectionsRequest::_internal_set_type(::milvus::proto::milvus::ShowType value) {
  
  _impl_.type_ = value;
}
inline void ShowCollectionsRequest::set_type(::milvus::proto::milvus::ShowType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsRequest.type)
}

// repeated string collection_names = 5;
inline int ShowCollectionsRequest::_internal_collection_names_size() const {
  return _impl_.collection_names_.size();
}
inline int ShowCollectionsRequest::collection_names_size() const {
  return _internal_collection_names_size();
}
inline void ShowCollectionsRequest::clear_collection_names() {
  _impl_.collection_names_.Clear();
}
inline std::string* ShowCollectionsRequest::add_collection_names() {
  std::string* _s = _internal_add_collection_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
  return _s;
}
inline const std::string& ShowCollectionsRequest::_internal_collection_names(int index) const {
  return _impl_.collection_names_.Get(index);
}
inline const std::string& ShowCollectionsRequest::collection_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
  return _internal_collection_names(index);
}
inline std::string* ShowCollectionsRequest::mutable_collection_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
  return _impl_.collection_names_.Mutable(index);
}
inline void ShowCollectionsRequest::set_collection_names(int index, const std::string& value) {
  _impl_.collection_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
}
inline void ShowCollectionsRequest::set_collection_names(int index, std::string&& value) {
  _impl_.collection_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
}
inline void ShowCollectionsRequest::set_collection_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.collection_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
}
inline void ShowCollectionsRequest::set_collection_names(int index, const char* value, size_t size) {
  _impl_.collection_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
}
inline std::string* ShowCollectionsRequest::_internal_add_collection_names() {
  return _impl_.collection_names_.Add();
}
inline void ShowCollectionsRequest::add_collection_names(const std::string& value) {
  _impl_.collection_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
}
inline void ShowCollectionsRequest::add_collection_names(std::string&& value) {
  _impl_.collection_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
}
inline void ShowCollectionsRequest::add_collection_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.collection_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
}
inline void ShowCollectionsRequest::add_collection_names(const char* value, size_t size) {
  _impl_.collection_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShowCollectionsRequest::collection_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
  return _impl_.collection_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShowCollectionsRequest::mutable_collection_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowCollectionsRequest.collection_names)
  return &_impl_.collection_names_;
}

// -------------------------------------------------------------------

// ShowCollectionsResponse

// .milvus.proto.common.Status status = 1;
inline bool ShowCollectionsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ShowCollectionsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ShowCollectionsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ShowCollectionsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsResponse.status)
  return _internal_status();
}
inline void ShowCollectionsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ShowCollectionsResponse.status)
}
inline ::milvus::proto::common::Status* ShowCollectionsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ShowCollectionsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowCollectionsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ShowCollectionsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ShowCollectionsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowCollectionsResponse.status)
  return _msg;
}
inline void ShowCollectionsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowCollectionsResponse.status)
}

// repeated string collection_names = 2;
inline int ShowCollectionsResponse::_internal_collection_names_size() const {
  return _impl_.collection_names_.size();
}
inline int ShowCollectionsResponse::collection_names_size() const {
  return _internal_collection_names_size();
}
inline void ShowCollectionsResponse::clear_collection_names() {
  _impl_.collection_names_.Clear();
}
inline std::string* ShowCollectionsResponse::add_collection_names() {
  std::string* _s = _internal_add_collection_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
  return _s;
}
inline const std::string& ShowCollectionsResponse::_internal_collection_names(int index) const {
  return _impl_.collection_names_.Get(index);
}
inline const std::string& ShowCollectionsResponse::collection_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
  return _internal_collection_names(index);
}
inline std::string* ShowCollectionsResponse::mutable_collection_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
  return _impl_.collection_names_.Mutable(index);
}
inline void ShowCollectionsResponse::set_collection_names(int index, const std::string& value) {
  _impl_.collection_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
}
inline void ShowCollectionsResponse::set_collection_names(int index, std::string&& value) {
  _impl_.collection_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
}
inline void ShowCollectionsResponse::set_collection_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.collection_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
}
inline void ShowCollectionsResponse::set_collection_names(int index, const char* value, size_t size) {
  _impl_.collection_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
}
inline std::string* ShowCollectionsResponse::_internal_add_collection_names() {
  return _impl_.collection_names_.Add();
}
inline void ShowCollectionsResponse::add_collection_names(const std::string& value) {
  _impl_.collection_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
}
inline void ShowCollectionsResponse::add_collection_names(std::string&& value) {
  _impl_.collection_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
}
inline void ShowCollectionsResponse::add_collection_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.collection_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
}
inline void ShowCollectionsResponse::add_collection_names(const char* value, size_t size) {
  _impl_.collection_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShowCollectionsResponse::collection_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
  return _impl_.collection_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShowCollectionsResponse::mutable_collection_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowCollectionsResponse.collection_names)
  return &_impl_.collection_names_;
}

// repeated int64 collection_ids = 3;
inline int ShowCollectionsResponse::_internal_collection_ids_size() const {
  return _impl_.collection_ids_.size();
}
inline int ShowCollectionsResponse::collection_ids_size() const {
  return _internal_collection_ids_size();
}
inline void ShowCollectionsResponse::clear_collection_ids() {
  _impl_.collection_ids_.Clear();
}
inline int64_t ShowCollectionsResponse::_internal_collection_ids(int index) const {
  return _impl_.collection_ids_.Get(index);
}
inline int64_t ShowCollectionsResponse::collection_ids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsResponse.collection_ids)
  return _internal_collection_ids(index);
}
inline void ShowCollectionsResponse::set_collection_ids(int index, int64_t value) {
  _impl_.collection_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsResponse.collection_ids)
}
inline void ShowCollectionsResponse::_internal_add_collection_ids(int64_t value) {
  _impl_.collection_ids_.Add(value);
}
inline void ShowCollectionsResponse::add_collection_ids(int64_t value) {
  _internal_add_collection_ids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsResponse.collection_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ShowCollectionsResponse::_internal_collection_ids() const {
  return _impl_.collection_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ShowCollectionsResponse::collection_ids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowCollectionsResponse.collection_ids)
  return _internal_collection_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ShowCollectionsResponse::_internal_mutable_collection_ids() {
  return &_impl_.collection_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ShowCollectionsResponse::mutable_collection_ids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowCollectionsResponse.collection_ids)
  return _internal_mutable_collection_ids();
}

// repeated uint64 created_timestamps = 4;
inline int ShowCollectionsResponse::_internal_created_timestamps_size() const {
  return _impl_.created_timestamps_.size();
}
inline int ShowCollectionsResponse::created_timestamps_size() const {
  return _internal_created_timestamps_size();
}
inline void ShowCollectionsResponse::clear_created_timestamps() {
  _impl_.created_timestamps_.Clear();
}
inline uint64_t ShowCollectionsResponse::_internal_created_timestamps(int index) const {
  return _impl_.created_timestamps_.Get(index);
}
inline uint64_t ShowCollectionsResponse::created_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsResponse.created_timestamps)
  return _internal_created_timestamps(index);
}
inline void ShowCollectionsResponse::set_created_timestamps(int index, uint64_t value) {
  _impl_.created_timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsResponse.created_timestamps)
}
inline void ShowCollectionsResponse::_internal_add_created_timestamps(uint64_t value) {
  _impl_.created_timestamps_.Add(value);
}
inline void ShowCollectionsResponse::add_created_timestamps(uint64_t value) {
  _internal_add_created_timestamps(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsResponse.created_timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ShowCollectionsResponse::_internal_created_timestamps() const {
  return _impl_.created_timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ShowCollectionsResponse::created_timestamps() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowCollectionsResponse.created_timestamps)
  return _internal_created_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ShowCollectionsResponse::_internal_mutable_created_timestamps() {
  return &_impl_.created_timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ShowCollectionsResponse::mutable_created_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowCollectionsResponse.created_timestamps)
  return _internal_mutable_created_timestamps();
}

// repeated uint64 created_utc_timestamps = 5;
inline int ShowCollectionsResponse::_internal_created_utc_timestamps_size() const {
  return _impl_.created_utc_timestamps_.size();
}
inline int ShowCollectionsResponse::created_utc_timestamps_size() const {
  return _internal_created_utc_timestamps_size();
}
inline void ShowCollectionsResponse::clear_created_utc_timestamps() {
  _impl_.created_utc_timestamps_.Clear();
}
inline uint64_t ShowCollectionsResponse::_internal_created_utc_timestamps(int index) const {
  return _impl_.created_utc_timestamps_.Get(index);
}
inline uint64_t ShowCollectionsResponse::created_utc_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsResponse.created_utc_timestamps)
  return _internal_created_utc_timestamps(index);
}
inline void ShowCollectionsResponse::set_created_utc_timestamps(int index, uint64_t value) {
  _impl_.created_utc_timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsResponse.created_utc_timestamps)
}
inline void ShowCollectionsResponse::_internal_add_created_utc_timestamps(uint64_t value) {
  _impl_.created_utc_timestamps_.Add(value);
}
inline void ShowCollectionsResponse::add_created_utc_timestamps(uint64_t value) {
  _internal_add_created_utc_timestamps(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsResponse.created_utc_timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ShowCollectionsResponse::_internal_created_utc_timestamps() const {
  return _impl_.created_utc_timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ShowCollectionsResponse::created_utc_timestamps() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowCollectionsResponse.created_utc_timestamps)
  return _internal_created_utc_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ShowCollectionsResponse::_internal_mutable_created_utc_timestamps() {
  return &_impl_.created_utc_timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ShowCollectionsResponse::mutable_created_utc_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowCollectionsResponse.created_utc_timestamps)
  return _internal_mutable_created_utc_timestamps();
}

// repeated int64 inMemory_percentages = 6;
inline int ShowCollectionsResponse::_internal_inmemory_percentages_size() const {
  return _impl_.inmemory_percentages_.size();
}
inline int ShowCollectionsResponse::inmemory_percentages_size() const {
  return _internal_inmemory_percentages_size();
}
inline void ShowCollectionsResponse::clear_inmemory_percentages() {
  _impl_.inmemory_percentages_.Clear();
}
inline int64_t ShowCollectionsResponse::_internal_inmemory_percentages(int index) const {
  return _impl_.inmemory_percentages_.Get(index);
}
inline int64_t ShowCollectionsResponse::inmemory_percentages(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsResponse.inMemory_percentages)
  return _internal_inmemory_percentages(index);
}
inline void ShowCollectionsResponse::set_inmemory_percentages(int index, int64_t value) {
  _impl_.inmemory_percentages_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsResponse.inMemory_percentages)
}
inline void ShowCollectionsResponse::_internal_add_inmemory_percentages(int64_t value) {
  _impl_.inmemory_percentages_.Add(value);
}
inline void ShowCollectionsResponse::add_inmemory_percentages(int64_t value) {
  _internal_add_inmemory_percentages(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsResponse.inMemory_percentages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ShowCollectionsResponse::_internal_inmemory_percentages() const {
  return _impl_.inmemory_percentages_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ShowCollectionsResponse::inmemory_percentages() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowCollectionsResponse.inMemory_percentages)
  return _internal_inmemory_percentages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ShowCollectionsResponse::_internal_mutable_inmemory_percentages() {
  return &_impl_.inmemory_percentages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ShowCollectionsResponse::mutable_inmemory_percentages() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowCollectionsResponse.inMemory_percentages)
  return _internal_mutable_inmemory_percentages();
}

// repeated bool query_service_available = 7;
inline int ShowCollectionsResponse::_internal_query_service_available_size() const {
  return _impl_.query_service_available_.size();
}
inline int ShowCollectionsResponse::query_service_available_size() const {
  return _internal_query_service_available_size();
}
inline void ShowCollectionsResponse::clear_query_service_available() {
  _impl_.query_service_available_.Clear();
}
inline bool ShowCollectionsResponse::_internal_query_service_available(int index) const {
  return _impl_.query_service_available_.Get(index);
}
inline bool ShowCollectionsResponse::query_service_available(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowCollectionsResponse.query_service_available)
  return _internal_query_service_available(index);
}
inline void ShowCollectionsResponse::set_query_service_available(int index, bool value) {
  _impl_.query_service_available_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowCollectionsResponse.query_service_available)
}
inline void ShowCollectionsResponse::_internal_add_query_service_available(bool value) {
  _impl_.query_service_available_.Add(value);
}
inline void ShowCollectionsResponse::add_query_service_available(bool value) {
  _internal_add_query_service_available(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowCollectionsResponse.query_service_available)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ShowCollectionsResponse::_internal_query_service_available() const {
  return _impl_.query_service_available_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ShowCollectionsResponse::query_service_available() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowCollectionsResponse.query_service_available)
  return _internal_query_service_available();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ShowCollectionsResponse::_internal_mutable_query_service_available() {
  return &_impl_.query_service_available_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ShowCollectionsResponse::mutable_query_service_available() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowCollectionsResponse.query_service_available)
  return _internal_mutable_query_service_available();
}

// -------------------------------------------------------------------

// CreatePartitionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreatePartitionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool CreatePartitionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CreatePartitionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CreatePartitionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreatePartitionRequest.base)
  return _internal_base();
}
inline void CreatePartitionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CreatePartitionRequest.base)
}
inline ::milvus::proto::common::MsgBase* CreatePartitionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreatePartitionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreatePartitionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreatePartitionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* CreatePartitionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreatePartitionRequest.base)
  return _msg;
}
inline void CreatePartitionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreatePartitionRequest.base)
}

// string db_name = 2;
inline void CreatePartitionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& CreatePartitionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreatePartitionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePartitionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreatePartitionRequest.db_name)
}
inline std::string* CreatePartitionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreatePartitionRequest.db_name)
  return _s;
}
inline const std::string& CreatePartitionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void CreatePartitionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePartitionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePartitionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreatePartitionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void CreatePartitionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreatePartitionRequest.db_name)
}

// string collection_name = 3;
inline void CreatePartitionRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& CreatePartitionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreatePartitionRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePartitionRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreatePartitionRequest.collection_name)
}
inline std::string* CreatePartitionRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreatePartitionRequest.collection_name)
  return _s;
}
inline const std::string& CreatePartitionRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void CreatePartitionRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePartitionRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePartitionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreatePartitionRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void CreatePartitionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreatePartitionRequest.collection_name)
}

// string partition_name = 4;
inline void CreatePartitionRequest::clear_partition_name() {
  _impl_.partition_name_.ClearToEmpty();
}
inline const std::string& CreatePartitionRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreatePartitionRequest.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePartitionRequest::set_partition_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.partition_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreatePartitionRequest.partition_name)
}
inline std::string* CreatePartitionRequest::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreatePartitionRequest.partition_name)
  return _s;
}
inline const std::string& CreatePartitionRequest::_internal_partition_name() const {
  return _impl_.partition_name_.Get();
}
inline void CreatePartitionRequest::_internal_set_partition_name(const std::string& value) {
  
  _impl_.partition_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePartitionRequest::_internal_mutable_partition_name() {
  
  return _impl_.partition_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePartitionRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreatePartitionRequest.partition_name)
  return _impl_.partition_name_.Release();
}
inline void CreatePartitionRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  _impl_.partition_name_.SetAllocated(partition_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partition_name_.IsDefault()) {
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreatePartitionRequest.partition_name)
}

// -------------------------------------------------------------------

// DropPartitionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropPartitionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DropPartitionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DropPartitionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DropPartitionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropPartitionRequest.base)
  return _internal_base();
}
inline void DropPartitionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DropPartitionRequest.base)
}
inline ::milvus::proto::common::MsgBase* DropPartitionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropPartitionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropPartitionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropPartitionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DropPartitionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropPartitionRequest.base)
  return _msg;
}
inline void DropPartitionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropPartitionRequest.base)
}

// string db_name = 2;
inline void DropPartitionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DropPartitionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropPartitionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropPartitionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropPartitionRequest.db_name)
}
inline std::string* DropPartitionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropPartitionRequest.db_name)
  return _s;
}
inline const std::string& DropPartitionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DropPartitionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropPartitionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropPartitionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropPartitionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void DropPartitionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropPartitionRequest.db_name)
}

// string collection_name = 3;
inline void DropPartitionRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& DropPartitionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropPartitionRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropPartitionRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropPartitionRequest.collection_name)
}
inline std::string* DropPartitionRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropPartitionRequest.collection_name)
  return _s;
}
inline const std::string& DropPartitionRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void DropPartitionRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropPartitionRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropPartitionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropPartitionRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void DropPartitionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropPartitionRequest.collection_name)
}

// string partition_name = 4;
inline void DropPartitionRequest::clear_partition_name() {
  _impl_.partition_name_.ClearToEmpty();
}
inline const std::string& DropPartitionRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropPartitionRequest.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropPartitionRequest::set_partition_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.partition_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropPartitionRequest.partition_name)
}
inline std::string* DropPartitionRequest::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropPartitionRequest.partition_name)
  return _s;
}
inline const std::string& DropPartitionRequest::_internal_partition_name() const {
  return _impl_.partition_name_.Get();
}
inline void DropPartitionRequest::_internal_set_partition_name(const std::string& value) {
  
  _impl_.partition_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropPartitionRequest::_internal_mutable_partition_name() {
  
  return _impl_.partition_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropPartitionRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropPartitionRequest.partition_name)
  return _impl_.partition_name_.Release();
}
inline void DropPartitionRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  _impl_.partition_name_.SetAllocated(partition_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partition_name_.IsDefault()) {
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropPartitionRequest.partition_name)
}

// -------------------------------------------------------------------

// HasPartitionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool HasPartitionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool HasPartitionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& HasPartitionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& HasPartitionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasPartitionRequest.base)
  return _internal_base();
}
inline void HasPartitionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.HasPartitionRequest.base)
}
inline ::milvus::proto::common::MsgBase* HasPartitionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* HasPartitionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.HasPartitionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* HasPartitionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* HasPartitionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.HasPartitionRequest.base)
  return _msg;
}
inline void HasPartitionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.HasPartitionRequest.base)
}

// string db_name = 2;
inline void HasPartitionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& HasPartitionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasPartitionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HasPartitionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.HasPartitionRequest.db_name)
}
inline std::string* HasPartitionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.HasPartitionRequest.db_name)
  return _s;
}
inline const std::string& HasPartitionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void HasPartitionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* HasPartitionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* HasPartitionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.HasPartitionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void HasPartitionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.HasPartitionRequest.db_name)
}

// string collection_name = 3;
inline void HasPartitionRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& HasPartitionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasPartitionRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HasPartitionRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.HasPartitionRequest.collection_name)
}
inline std::string* HasPartitionRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.HasPartitionRequest.collection_name)
  return _s;
}
inline const std::string& HasPartitionRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void HasPartitionRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* HasPartitionRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* HasPartitionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.HasPartitionRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void HasPartitionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.HasPartitionRequest.collection_name)
}

// string partition_name = 4;
inline void HasPartitionRequest::clear_partition_name() {
  _impl_.partition_name_.ClearToEmpty();
}
inline const std::string& HasPartitionRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.HasPartitionRequest.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HasPartitionRequest::set_partition_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.partition_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.HasPartitionRequest.partition_name)
}
inline std::string* HasPartitionRequest::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.HasPartitionRequest.partition_name)
  return _s;
}
inline const std::string& HasPartitionRequest::_internal_partition_name() const {
  return _impl_.partition_name_.Get();
}
inline void HasPartitionRequest::_internal_set_partition_name(const std::string& value) {
  
  _impl_.partition_name_.Set(value, GetArenaForAllocation());
}
inline std::string* HasPartitionRequest::_internal_mutable_partition_name() {
  
  return _impl_.partition_name_.Mutable(GetArenaForAllocation());
}
inline std::string* HasPartitionRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.HasPartitionRequest.partition_name)
  return _impl_.partition_name_.Release();
}
inline void HasPartitionRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  _impl_.partition_name_.SetAllocated(partition_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partition_name_.IsDefault()) {
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.HasPartitionRequest.partition_name)
}

// -------------------------------------------------------------------

// LoadPartitionsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool LoadPartitionsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool LoadPartitionsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& LoadPartitionsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& LoadPartitionsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadPartitionsRequest.base)
  return _internal_base();
}
inline void LoadPartitionsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.LoadPartitionsRequest.base)
}
inline ::milvus::proto::common::MsgBase* LoadPartitionsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* LoadPartitionsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadPartitionsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* LoadPartitionsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* LoadPartitionsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadPartitionsRequest.base)
  return _msg;
}
inline void LoadPartitionsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadPartitionsRequest.base)
}

// string db_name = 2;
inline void LoadPartitionsRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& LoadPartitionsRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadPartitionsRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadPartitionsRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadPartitionsRequest.db_name)
}
inline std::string* LoadPartitionsRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadPartitionsRequest.db_name)
  return _s;
}
inline const std::string& LoadPartitionsRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void LoadPartitionsRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadPartitionsRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadPartitionsRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadPartitionsRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void LoadPartitionsRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadPartitionsRequest.db_name)
}

// string collection_name = 3;
inline void LoadPartitionsRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& LoadPartitionsRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadPartitionsRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadPartitionsRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadPartitionsRequest.collection_name)
}
inline std::string* LoadPartitionsRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadPartitionsRequest.collection_name)
  return _s;
}
inline const std::string& LoadPartitionsRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void LoadPartitionsRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadPartitionsRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadPartitionsRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadPartitionsRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void LoadPartitionsRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadPartitionsRequest.collection_name)
}

// repeated string partition_names = 4;
inline int LoadPartitionsRequest::_internal_partition_names_size() const {
  return _impl_.partition_names_.size();
}
inline int LoadPartitionsRequest::partition_names_size() const {
  return _internal_partition_names_size();
}
inline void LoadPartitionsRequest::clear_partition_names() {
  _impl_.partition_names_.Clear();
}
inline std::string* LoadPartitionsRequest::add_partition_names() {
  std::string* _s = _internal_add_partition_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
  return _s;
}
inline const std::string& LoadPartitionsRequest::_internal_partition_names(int index) const {
  return _impl_.partition_names_.Get(index);
}
inline const std::string& LoadPartitionsRequest::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
  return _internal_partition_names(index);
}
inline std::string* LoadPartitionsRequest::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
  return _impl_.partition_names_.Mutable(index);
}
inline void LoadPartitionsRequest::set_partition_names(int index, const std::string& value) {
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
}
inline void LoadPartitionsRequest::set_partition_names(int index, std::string&& value) {
  _impl_.partition_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
}
inline void LoadPartitionsRequest::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
}
inline void LoadPartitionsRequest::set_partition_names(int index, const char* value, size_t size) {
  _impl_.partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
}
inline std::string* LoadPartitionsRequest::_internal_add_partition_names() {
  return _impl_.partition_names_.Add();
}
inline void LoadPartitionsRequest::add_partition_names(const std::string& value) {
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
}
inline void LoadPartitionsRequest::add_partition_names(std::string&& value) {
  _impl_.partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
}
inline void LoadPartitionsRequest::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
}
inline void LoadPartitionsRequest::add_partition_names(const char* value, size_t size) {
  _impl_.partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LoadPartitionsRequest::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
  return _impl_.partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LoadPartitionsRequest::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.LoadPartitionsRequest.partition_names)
  return &_impl_.partition_names_;
}

// int32 replica_number = 5;
inline void LoadPartitionsRequest::clear_replica_number() {
  _impl_.replica_number_ = 0;
}
inline int32_t LoadPartitionsRequest::_internal_replica_number() const {
  return _impl_.replica_number_;
}
inline int32_t LoadPartitionsRequest::replica_number() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadPartitionsRequest.replica_number)
  return _internal_replica_number();
}
inline void LoadPartitionsRequest::_internal_set_replica_number(int32_t value) {
  
  _impl_.replica_number_ = value;
}
inline void LoadPartitionsRequest::set_replica_number(int32_t value) {
  _internal_set_replica_number(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadPartitionsRequest.replica_number)
}

// repeated string resource_groups = 6;
inline int LoadPartitionsRequest::_internal_resource_groups_size() const {
  return _impl_.resource_groups_.size();
}
inline int LoadPartitionsRequest::resource_groups_size() const {
  return _internal_resource_groups_size();
}
inline void LoadPartitionsRequest::clear_resource_groups() {
  _impl_.resource_groups_.Clear();
}
inline std::string* LoadPartitionsRequest::add_resource_groups() {
  std::string* _s = _internal_add_resource_groups();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.LoadPartitionsRequest.resource_groups)
  return _s;
}
inline const std::string& LoadPartitionsRequest::_internal_resource_groups(int index) const {
  return _impl_.resource_groups_.Get(index);
}
inline const std::string& LoadPartitionsRequest::resource_groups(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadPartitionsRequest.resource_groups)
  return _internal_resource_groups(index);
}
inline std::string* LoadPartitionsRequest::mutable_resource_groups(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadPartitionsRequest.resource_groups)
  return _impl_.resource_groups_.Mutable(index);
}
inline void LoadPartitionsRequest::set_resource_groups(int index, const std::string& value) {
  _impl_.resource_groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadPartitionsRequest.resource_groups)
}
inline void LoadPartitionsRequest::set_resource_groups(int index, std::string&& value) {
  _impl_.resource_groups_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadPartitionsRequest.resource_groups)
}
inline void LoadPartitionsRequest::set_resource_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.resource_groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.LoadPartitionsRequest.resource_groups)
}
inline void LoadPartitionsRequest::set_resource_groups(int index, const char* value, size_t size) {
  _impl_.resource_groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.LoadPartitionsRequest.resource_groups)
}
inline std::string* LoadPartitionsRequest::_internal_add_resource_groups() {
  return _impl_.resource_groups_.Add();
}
inline void LoadPartitionsRequest::add_resource_groups(const std::string& value) {
  _impl_.resource_groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.LoadPartitionsRequest.resource_groups)
}
inline void LoadPartitionsRequest::add_resource_groups(std::string&& value) {
  _impl_.resource_groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.LoadPartitionsRequest.resource_groups)
}
inline void LoadPartitionsRequest::add_resource_groups(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.resource_groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.LoadPartitionsRequest.resource_groups)
}
inline void LoadPartitionsRequest::add_resource_groups(const char* value, size_t size) {
  _impl_.resource_groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.LoadPartitionsRequest.resource_groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LoadPartitionsRequest::resource_groups() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.LoadPartitionsRequest.resource_groups)
  return _impl_.resource_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LoadPartitionsRequest::mutable_resource_groups() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.LoadPartitionsRequest.resource_groups)
  return &_impl_.resource_groups_;
}

// bool refresh = 7;
inline void LoadPartitionsRequest::clear_refresh() {
  _impl_.refresh_ = false;
}
inline bool LoadPartitionsRequest::_internal_refresh() const {
  return _impl_.refresh_;
}
inline bool LoadPartitionsRequest::refresh() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadPartitionsRequest.refresh)
  return _internal_refresh();
}
inline void LoadPartitionsRequest::_internal_set_refresh(bool value) {
  
  _impl_.refresh_ = value;
}
inline void LoadPartitionsRequest::set_refresh(bool value) {
  _internal_set_refresh(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadPartitionsRequest.refresh)
}

// -------------------------------------------------------------------

// ReleasePartitionsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ReleasePartitionsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ReleasePartitionsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ReleasePartitionsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ReleasePartitionsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReleasePartitionsRequest.base)
  return _internal_base();
}
inline void ReleasePartitionsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ReleasePartitionsRequest.base)
}
inline ::milvus::proto::common::MsgBase* ReleasePartitionsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ReleasePartitionsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ReleasePartitionsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ReleasePartitionsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ReleasePartitionsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReleasePartitionsRequest.base)
  return _msg;
}
inline void ReleasePartitionsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ReleasePartitionsRequest.base)
}

// string db_name = 2;
inline void ReleasePartitionsRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& ReleasePartitionsRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReleasePartitionsRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReleasePartitionsRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReleasePartitionsRequest.db_name)
}
inline std::string* ReleasePartitionsRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReleasePartitionsRequest.db_name)
  return _s;
}
inline const std::string& ReleasePartitionsRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void ReleasePartitionsRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReleasePartitionsRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReleasePartitionsRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ReleasePartitionsRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void ReleasePartitionsRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ReleasePartitionsRequest.db_name)
}

// string collection_name = 3;
inline void ReleasePartitionsRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& ReleasePartitionsRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReleasePartitionsRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReleasePartitionsRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReleasePartitionsRequest.collection_name)
}
inline std::string* ReleasePartitionsRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReleasePartitionsRequest.collection_name)
  return _s;
}
inline const std::string& ReleasePartitionsRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void ReleasePartitionsRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReleasePartitionsRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReleasePartitionsRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ReleasePartitionsRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void ReleasePartitionsRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ReleasePartitionsRequest.collection_name)
}

// repeated string partition_names = 4;
inline int ReleasePartitionsRequest::_internal_partition_names_size() const {
  return _impl_.partition_names_.size();
}
inline int ReleasePartitionsRequest::partition_names_size() const {
  return _internal_partition_names_size();
}
inline void ReleasePartitionsRequest::clear_partition_names() {
  _impl_.partition_names_.Clear();
}
inline std::string* ReleasePartitionsRequest::add_partition_names() {
  std::string* _s = _internal_add_partition_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
  return _s;
}
inline const std::string& ReleasePartitionsRequest::_internal_partition_names(int index) const {
  return _impl_.partition_names_.Get(index);
}
inline const std::string& ReleasePartitionsRequest::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
  return _internal_partition_names(index);
}
inline std::string* ReleasePartitionsRequest::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
  return _impl_.partition_names_.Mutable(index);
}
inline void ReleasePartitionsRequest::set_partition_names(int index, const std::string& value) {
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
}
inline void ReleasePartitionsRequest::set_partition_names(int index, std::string&& value) {
  _impl_.partition_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
}
inline void ReleasePartitionsRequest::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
}
inline void ReleasePartitionsRequest::set_partition_names(int index, const char* value, size_t size) {
  _impl_.partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
}
inline std::string* ReleasePartitionsRequest::_internal_add_partition_names() {
  return _impl_.partition_names_.Add();
}
inline void ReleasePartitionsRequest::add_partition_names(const std::string& value) {
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
}
inline void ReleasePartitionsRequest::add_partition_names(std::string&& value) {
  _impl_.partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
}
inline void ReleasePartitionsRequest::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
}
inline void ReleasePartitionsRequest::add_partition_names(const char* value, size_t size) {
  _impl_.partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReleasePartitionsRequest::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
  return _impl_.partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReleasePartitionsRequest::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ReleasePartitionsRequest.partition_names)
  return &_impl_.partition_names_;
}

// -------------------------------------------------------------------

// GetPartitionStatisticsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetPartitionStatisticsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetPartitionStatisticsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetPartitionStatisticsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetPartitionStatisticsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPartitionStatisticsRequest.base)
  return _internal_base();
}
inline void GetPartitionStatisticsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetPartitionStatisticsRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetPartitionStatisticsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetPartitionStatisticsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPartitionStatisticsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetPartitionStatisticsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetPartitionStatisticsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPartitionStatisticsRequest.base)
  return _msg;
}
inline void GetPartitionStatisticsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPartitionStatisticsRequest.base)
}

// string db_name = 2;
inline void GetPartitionStatisticsRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& GetPartitionStatisticsRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPartitionStatisticsRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPartitionStatisticsRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetPartitionStatisticsRequest.db_name)
}
inline std::string* GetPartitionStatisticsRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPartitionStatisticsRequest.db_name)
  return _s;
}
inline const std::string& GetPartitionStatisticsRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void GetPartitionStatisticsRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPartitionStatisticsRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPartitionStatisticsRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPartitionStatisticsRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void GetPartitionStatisticsRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPartitionStatisticsRequest.db_name)
}

// string collection_name = 3;
inline void GetPartitionStatisticsRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& GetPartitionStatisticsRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPartitionStatisticsRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name)
}
inline std::string* GetPartitionStatisticsRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name)
  return _s;
}
inline const std::string& GetPartitionStatisticsRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void GetPartitionStatisticsRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPartitionStatisticsRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPartitionStatisticsRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void GetPartitionStatisticsRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name)
}

// string partition_name = 4;
inline void GetPartitionStatisticsRequest::clear_partition_name() {
  _impl_.partition_name_.ClearToEmpty();
}
inline const std::string& GetPartitionStatisticsRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPartitionStatisticsRequest::set_partition_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.partition_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name)
}
inline std::string* GetPartitionStatisticsRequest::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name)
  return _s;
}
inline const std::string& GetPartitionStatisticsRequest::_internal_partition_name() const {
  return _impl_.partition_name_.Get();
}
inline void GetPartitionStatisticsRequest::_internal_set_partition_name(const std::string& value) {
  
  _impl_.partition_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPartitionStatisticsRequest::_internal_mutable_partition_name() {
  
  return _impl_.partition_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPartitionStatisticsRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name)
  return _impl_.partition_name_.Release();
}
inline void GetPartitionStatisticsRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  _impl_.partition_name_.SetAllocated(partition_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partition_name_.IsDefault()) {
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name)
}

// -------------------------------------------------------------------

// GetPartitionStatisticsResponse

// .milvus.proto.common.Status status = 1;
inline bool GetPartitionStatisticsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetPartitionStatisticsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetPartitionStatisticsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetPartitionStatisticsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPartitionStatisticsResponse.status)
  return _internal_status();
}
inline void GetPartitionStatisticsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetPartitionStatisticsResponse.status)
}
inline ::milvus::proto::common::Status* GetPartitionStatisticsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetPartitionStatisticsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPartitionStatisticsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetPartitionStatisticsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetPartitionStatisticsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPartitionStatisticsResponse.status)
  return _msg;
}
inline void GetPartitionStatisticsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPartitionStatisticsResponse.status)
}

// repeated .milvus.proto.common.KeyValuePair stats = 2;
inline int GetPartitionStatisticsResponse::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int GetPartitionStatisticsResponse::stats_size() const {
  return _internal_stats_size();
}
inline ::milvus::proto::common::KeyValuePair* GetPartitionStatisticsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPartitionStatisticsResponse.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
GetPartitionStatisticsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetPartitionStatisticsResponse.stats)
  return &_impl_.stats_;
}
inline const ::milvus::proto::common::KeyValuePair& GetPartitionStatisticsResponse::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& GetPartitionStatisticsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPartitionStatisticsResponse.stats)
  return _internal_stats(index);
}
inline ::milvus::proto::common::KeyValuePair* GetPartitionStatisticsResponse::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::milvus::proto::common::KeyValuePair* GetPartitionStatisticsResponse::add_stats() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetPartitionStatisticsResponse.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
GetPartitionStatisticsResponse::stats() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetPartitionStatisticsResponse.stats)
  return _impl_.stats_;
}

// -------------------------------------------------------------------

// ShowPartitionsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ShowPartitionsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ShowPartitionsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ShowPartitionsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ShowPartitionsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsRequest.base)
  return _internal_base();
}
inline void ShowPartitionsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ShowPartitionsRequest.base)
}
inline ::milvus::proto::common::MsgBase* ShowPartitionsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ShowPartitionsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowPartitionsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ShowPartitionsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ShowPartitionsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowPartitionsRequest.base)
  return _msg;
}
inline void ShowPartitionsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowPartitionsRequest.base)
}

// string db_name = 2;
inline void ShowPartitionsRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& ShowPartitionsRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShowPartitionsRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsRequest.db_name)
}
inline std::string* ShowPartitionsRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowPartitionsRequest.db_name)
  return _s;
}
inline const std::string& ShowPartitionsRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void ShowPartitionsRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ShowPartitionsRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ShowPartitionsRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowPartitionsRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void ShowPartitionsRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowPartitionsRequest.db_name)
}

// string collection_name = 3;
inline void ShowPartitionsRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& ShowPartitionsRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShowPartitionsRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsRequest.collection_name)
}
inline std::string* ShowPartitionsRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowPartitionsRequest.collection_name)
  return _s;
}
inline const std::string& ShowPartitionsRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void ShowPartitionsRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ShowPartitionsRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ShowPartitionsRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowPartitionsRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void ShowPartitionsRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowPartitionsRequest.collection_name)
}

// int64 collectionID = 4;
inline void ShowPartitionsRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t ShowPartitionsRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t ShowPartitionsRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsRequest.collectionID)
  return _internal_collectionid();
}
inline void ShowPartitionsRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void ShowPartitionsRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsRequest.collectionID)
}

// repeated string partition_names = 5;
inline int ShowPartitionsRequest::_internal_partition_names_size() const {
  return _impl_.partition_names_.size();
}
inline int ShowPartitionsRequest::partition_names_size() const {
  return _internal_partition_names_size();
}
inline void ShowPartitionsRequest::clear_partition_names() {
  _impl_.partition_names_.Clear();
}
inline std::string* ShowPartitionsRequest::add_partition_names() {
  std::string* _s = _internal_add_partition_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
  return _s;
}
inline const std::string& ShowPartitionsRequest::_internal_partition_names(int index) const {
  return _impl_.partition_names_.Get(index);
}
inline const std::string& ShowPartitionsRequest::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
  return _internal_partition_names(index);
}
inline std::string* ShowPartitionsRequest::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
  return _impl_.partition_names_.Mutable(index);
}
inline void ShowPartitionsRequest::set_partition_names(int index, const std::string& value) {
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
}
inline void ShowPartitionsRequest::set_partition_names(int index, std::string&& value) {
  _impl_.partition_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
}
inline void ShowPartitionsRequest::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
}
inline void ShowPartitionsRequest::set_partition_names(int index, const char* value, size_t size) {
  _impl_.partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
}
inline std::string* ShowPartitionsRequest::_internal_add_partition_names() {
  return _impl_.partition_names_.Add();
}
inline void ShowPartitionsRequest::add_partition_names(const std::string& value) {
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
}
inline void ShowPartitionsRequest::add_partition_names(std::string&& value) {
  _impl_.partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
}
inline void ShowPartitionsRequest::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
}
inline void ShowPartitionsRequest::add_partition_names(const char* value, size_t size) {
  _impl_.partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShowPartitionsRequest::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
  return _impl_.partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShowPartitionsRequest::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowPartitionsRequest.partition_names)
  return &_impl_.partition_names_;
}

// .milvus.proto.milvus.ShowType type = 6;
inline void ShowPartitionsRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::milvus::proto::milvus::ShowType ShowPartitionsRequest::_internal_type() const {
  return static_cast< ::milvus::proto::milvus::ShowType >(_impl_.type_);
}
inline ::milvus::proto::milvus::ShowType ShowPartitionsRequest::type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsRequest.type)
  return _internal_type();
}
inline void ShowPartitionsRequest::_internal_set_type(::milvus::proto::milvus::ShowType value) {
  
  _impl_.type_ = value;
}
inline void ShowPartitionsRequest::set_type(::milvus::proto::milvus::ShowType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsRequest.type)
}

// -------------------------------------------------------------------

// ShowPartitionsResponse

// .milvus.proto.common.Status status = 1;
inline bool ShowPartitionsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ShowPartitionsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ShowPartitionsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ShowPartitionsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsResponse.status)
  return _internal_status();
}
inline void ShowPartitionsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ShowPartitionsResponse.status)
}
inline ::milvus::proto::common::Status* ShowPartitionsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ShowPartitionsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowPartitionsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ShowPartitionsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ShowPartitionsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowPartitionsResponse.status)
  return _msg;
}
inline void ShowPartitionsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowPartitionsResponse.status)
}

// repeated string partition_names = 2;
inline int ShowPartitionsResponse::_internal_partition_names_size() const {
  return _impl_.partition_names_.size();
}
inline int ShowPartitionsResponse::partition_names_size() const {
  return _internal_partition_names_size();
}
inline void ShowPartitionsResponse::clear_partition_names() {
  _impl_.partition_names_.Clear();
}
inline std::string* ShowPartitionsResponse::add_partition_names() {
  std::string* _s = _internal_add_partition_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
  return _s;
}
inline const std::string& ShowPartitionsResponse::_internal_partition_names(int index) const {
  return _impl_.partition_names_.Get(index);
}
inline const std::string& ShowPartitionsResponse::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
  return _internal_partition_names(index);
}
inline std::string* ShowPartitionsResponse::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
  return _impl_.partition_names_.Mutable(index);
}
inline void ShowPartitionsResponse::set_partition_names(int index, const std::string& value) {
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
}
inline void ShowPartitionsResponse::set_partition_names(int index, std::string&& value) {
  _impl_.partition_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
}
inline void ShowPartitionsResponse::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
}
inline void ShowPartitionsResponse::set_partition_names(int index, const char* value, size_t size) {
  _impl_.partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
}
inline std::string* ShowPartitionsResponse::_internal_add_partition_names() {
  return _impl_.partition_names_.Add();
}
inline void ShowPartitionsResponse::add_partition_names(const std::string& value) {
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
}
inline void ShowPartitionsResponse::add_partition_names(std::string&& value) {
  _impl_.partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
}
inline void ShowPartitionsResponse::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
}
inline void ShowPartitionsResponse::add_partition_names(const char* value, size_t size) {
  _impl_.partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShowPartitionsResponse::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
  return _impl_.partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShowPartitionsResponse::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowPartitionsResponse.partition_names)
  return &_impl_.partition_names_;
}

// repeated int64 partitionIDs = 3;
inline int ShowPartitionsResponse::_internal_partitionids_size() const {
  return _impl_.partitionids_.size();
}
inline int ShowPartitionsResponse::partitionids_size() const {
  return _internal_partitionids_size();
}
inline void ShowPartitionsResponse::clear_partitionids() {
  _impl_.partitionids_.Clear();
}
inline int64_t ShowPartitionsResponse::_internal_partitionids(int index) const {
  return _impl_.partitionids_.Get(index);
}
inline int64_t ShowPartitionsResponse::partitionids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsResponse.partitionIDs)
  return _internal_partitionids(index);
}
inline void ShowPartitionsResponse::set_partitionids(int index, int64_t value) {
  _impl_.partitionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsResponse.partitionIDs)
}
inline void ShowPartitionsResponse::_internal_add_partitionids(int64_t value) {
  _impl_.partitionids_.Add(value);
}
inline void ShowPartitionsResponse::add_partitionids(int64_t value) {
  _internal_add_partitionids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsResponse.partitionIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ShowPartitionsResponse::_internal_partitionids() const {
  return _impl_.partitionids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ShowPartitionsResponse::partitionids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowPartitionsResponse.partitionIDs)
  return _internal_partitionids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ShowPartitionsResponse::_internal_mutable_partitionids() {
  return &_impl_.partitionids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ShowPartitionsResponse::mutable_partitionids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowPartitionsResponse.partitionIDs)
  return _internal_mutable_partitionids();
}

// repeated uint64 created_timestamps = 4;
inline int ShowPartitionsResponse::_internal_created_timestamps_size() const {
  return _impl_.created_timestamps_.size();
}
inline int ShowPartitionsResponse::created_timestamps_size() const {
  return _internal_created_timestamps_size();
}
inline void ShowPartitionsResponse::clear_created_timestamps() {
  _impl_.created_timestamps_.Clear();
}
inline uint64_t ShowPartitionsResponse::_internal_created_timestamps(int index) const {
  return _impl_.created_timestamps_.Get(index);
}
inline uint64_t ShowPartitionsResponse::created_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsResponse.created_timestamps)
  return _internal_created_timestamps(index);
}
inline void ShowPartitionsResponse::set_created_timestamps(int index, uint64_t value) {
  _impl_.created_timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsResponse.created_timestamps)
}
inline void ShowPartitionsResponse::_internal_add_created_timestamps(uint64_t value) {
  _impl_.created_timestamps_.Add(value);
}
inline void ShowPartitionsResponse::add_created_timestamps(uint64_t value) {
  _internal_add_created_timestamps(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsResponse.created_timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ShowPartitionsResponse::_internal_created_timestamps() const {
  return _impl_.created_timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ShowPartitionsResponse::created_timestamps() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowPartitionsResponse.created_timestamps)
  return _internal_created_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ShowPartitionsResponse::_internal_mutable_created_timestamps() {
  return &_impl_.created_timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ShowPartitionsResponse::mutable_created_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowPartitionsResponse.created_timestamps)
  return _internal_mutable_created_timestamps();
}

// repeated uint64 created_utc_timestamps = 5;
inline int ShowPartitionsResponse::_internal_created_utc_timestamps_size() const {
  return _impl_.created_utc_timestamps_.size();
}
inline int ShowPartitionsResponse::created_utc_timestamps_size() const {
  return _internal_created_utc_timestamps_size();
}
inline void ShowPartitionsResponse::clear_created_utc_timestamps() {
  _impl_.created_utc_timestamps_.Clear();
}
inline uint64_t ShowPartitionsResponse::_internal_created_utc_timestamps(int index) const {
  return _impl_.created_utc_timestamps_.Get(index);
}
inline uint64_t ShowPartitionsResponse::created_utc_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsResponse.created_utc_timestamps)
  return _internal_created_utc_timestamps(index);
}
inline void ShowPartitionsResponse::set_created_utc_timestamps(int index, uint64_t value) {
  _impl_.created_utc_timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsResponse.created_utc_timestamps)
}
inline void ShowPartitionsResponse::_internal_add_created_utc_timestamps(uint64_t value) {
  _impl_.created_utc_timestamps_.Add(value);
}
inline void ShowPartitionsResponse::add_created_utc_timestamps(uint64_t value) {
  _internal_add_created_utc_timestamps(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsResponse.created_utc_timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ShowPartitionsResponse::_internal_created_utc_timestamps() const {
  return _impl_.created_utc_timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ShowPartitionsResponse::created_utc_timestamps() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowPartitionsResponse.created_utc_timestamps)
  return _internal_created_utc_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ShowPartitionsResponse::_internal_mutable_created_utc_timestamps() {
  return &_impl_.created_utc_timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ShowPartitionsResponse::mutable_created_utc_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowPartitionsResponse.created_utc_timestamps)
  return _internal_mutable_created_utc_timestamps();
}

// repeated int64 inMemory_percentages = 6;
inline int ShowPartitionsResponse::_internal_inmemory_percentages_size() const {
  return _impl_.inmemory_percentages_.size();
}
inline int ShowPartitionsResponse::inmemory_percentages_size() const {
  return _internal_inmemory_percentages_size();
}
inline void ShowPartitionsResponse::clear_inmemory_percentages() {
  _impl_.inmemory_percentages_.Clear();
}
inline int64_t ShowPartitionsResponse::_internal_inmemory_percentages(int index) const {
  return _impl_.inmemory_percentages_.Get(index);
}
inline int64_t ShowPartitionsResponse::inmemory_percentages(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowPartitionsResponse.inMemory_percentages)
  return _internal_inmemory_percentages(index);
}
inline void ShowPartitionsResponse::set_inmemory_percentages(int index, int64_t value) {
  _impl_.inmemory_percentages_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowPartitionsResponse.inMemory_percentages)
}
inline void ShowPartitionsResponse::_internal_add_inmemory_percentages(int64_t value) {
  _impl_.inmemory_percentages_.Add(value);
}
inline void ShowPartitionsResponse::add_inmemory_percentages(int64_t value) {
  _internal_add_inmemory_percentages(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowPartitionsResponse.inMemory_percentages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ShowPartitionsResponse::_internal_inmemory_percentages() const {
  return _impl_.inmemory_percentages_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ShowPartitionsResponse::inmemory_percentages() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowPartitionsResponse.inMemory_percentages)
  return _internal_inmemory_percentages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ShowPartitionsResponse::_internal_mutable_inmemory_percentages() {
  return &_impl_.inmemory_percentages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ShowPartitionsResponse::mutable_inmemory_percentages() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowPartitionsResponse.inMemory_percentages)
  return _internal_mutable_inmemory_percentages();
}

// -------------------------------------------------------------------

// DescribeSegmentRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DescribeSegmentRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DescribeSegmentRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DescribeSegmentRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DescribeSegmentRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentRequest.base)
  return _internal_base();
}
inline void DescribeSegmentRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DescribeSegmentRequest.base)
}
inline ::milvus::proto::common::MsgBase* DescribeSegmentRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeSegmentRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeSegmentRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeSegmentRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DescribeSegmentRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeSegmentRequest.base)
  return _msg;
}
inline void DescribeSegmentRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeSegmentRequest.base)
}

// int64 collectionID = 2;
inline void DescribeSegmentRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t DescribeSegmentRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t DescribeSegmentRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentRequest.collectionID)
  return _internal_collectionid();
}
inline void DescribeSegmentRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void DescribeSegmentRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeSegmentRequest.collectionID)
}

// int64 segmentID = 3;
inline void DescribeSegmentRequest::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t DescribeSegmentRequest::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t DescribeSegmentRequest::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentRequest.segmentID)
  return _internal_segmentid();
}
inline void DescribeSegmentRequest::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void DescribeSegmentRequest::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeSegmentRequest.segmentID)
}

// -------------------------------------------------------------------

// DescribeSegmentResponse

// .milvus.proto.common.Status status = 1;
inline bool DescribeSegmentResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool DescribeSegmentResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& DescribeSegmentResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& DescribeSegmentResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentResponse.status)
  return _internal_status();
}
inline void DescribeSegmentResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DescribeSegmentResponse.status)
}
inline ::milvus::proto::common::Status* DescribeSegmentResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* DescribeSegmentResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeSegmentResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* DescribeSegmentResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* DescribeSegmentResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeSegmentResponse.status)
  return _msg;
}
inline void DescribeSegmentResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeSegmentResponse.status)
}

// int64 indexID = 2;
inline void DescribeSegmentResponse::clear_indexid() {
  _impl_.indexid_ = int64_t{0};
}
inline int64_t DescribeSegmentResponse::_internal_indexid() const {
  return _impl_.indexid_;
}
inline int64_t DescribeSegmentResponse::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentResponse.indexID)
  return _internal_indexid();
}
inline void DescribeSegmentResponse::_internal_set_indexid(int64_t value) {
  
  _impl_.indexid_ = value;
}
inline void DescribeSegmentResponse::set_indexid(int64_t value) {
  _internal_set_indexid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeSegmentResponse.indexID)
}

// int64 buildID = 3;
inline void DescribeSegmentResponse::clear_buildid() {
  _impl_.buildid_ = int64_t{0};
}
inline int64_t DescribeSegmentResponse::_internal_buildid() const {
  return _impl_.buildid_;
}
inline int64_t DescribeSegmentResponse::buildid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentResponse.buildID)
  return _internal_buildid();
}
inline void DescribeSegmentResponse::_internal_set_buildid(int64_t value) {
  
  _impl_.buildid_ = value;
}
inline void DescribeSegmentResponse::set_buildid(int64_t value) {
  _internal_set_buildid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeSegmentResponse.buildID)
}

// bool enable_index = 4;
inline void DescribeSegmentResponse::clear_enable_index() {
  _impl_.enable_index_ = false;
}
inline bool DescribeSegmentResponse::_internal_enable_index() const {
  return _impl_.enable_index_;
}
inline bool DescribeSegmentResponse::enable_index() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentResponse.enable_index)
  return _internal_enable_index();
}
inline void DescribeSegmentResponse::_internal_set_enable_index(bool value) {
  
  _impl_.enable_index_ = value;
}
inline void DescribeSegmentResponse::set_enable_index(bool value) {
  _internal_set_enable_index(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeSegmentResponse.enable_index)
}

// int64 fieldID = 5;
inline void DescribeSegmentResponse::clear_fieldid() {
  _impl_.fieldid_ = int64_t{0};
}
inline int64_t DescribeSegmentResponse::_internal_fieldid() const {
  return _impl_.fieldid_;
}
inline int64_t DescribeSegmentResponse::fieldid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeSegmentResponse.fieldID)
  return _internal_fieldid();
}
inline void DescribeSegmentResponse::_internal_set_fieldid(int64_t value) {
  
  _impl_.fieldid_ = value;
}
inline void DescribeSegmentResponse::set_fieldid(int64_t value) {
  _internal_set_fieldid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeSegmentResponse.fieldID)
}

// -------------------------------------------------------------------

// ShowSegmentsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ShowSegmentsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ShowSegmentsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ShowSegmentsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ShowSegmentsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowSegmentsRequest.base)
  return _internal_base();
}
inline void ShowSegmentsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ShowSegmentsRequest.base)
}
inline ::milvus::proto::common::MsgBase* ShowSegmentsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ShowSegmentsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowSegmentsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ShowSegmentsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ShowSegmentsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowSegmentsRequest.base)
  return _msg;
}
inline void ShowSegmentsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowSegmentsRequest.base)
}

// int64 collectionID = 2;
inline void ShowSegmentsRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t ShowSegmentsRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t ShowSegmentsRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowSegmentsRequest.collectionID)
  return _internal_collectionid();
}
inline void ShowSegmentsRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void ShowSegmentsRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowSegmentsRequest.collectionID)
}

// int64 partitionID = 3;
inline void ShowSegmentsRequest::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t ShowSegmentsRequest::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t ShowSegmentsRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowSegmentsRequest.partitionID)
  return _internal_partitionid();
}
inline void ShowSegmentsRequest::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void ShowSegmentsRequest::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowSegmentsRequest.partitionID)
}

// -------------------------------------------------------------------

// ShowSegmentsResponse

// .milvus.proto.common.Status status = 1;
inline bool ShowSegmentsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ShowSegmentsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ShowSegmentsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ShowSegmentsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowSegmentsResponse.status)
  return _internal_status();
}
inline void ShowSegmentsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ShowSegmentsResponse.status)
}
inline ::milvus::proto::common::Status* ShowSegmentsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ShowSegmentsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShowSegmentsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ShowSegmentsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ShowSegmentsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShowSegmentsResponse.status)
  return _msg;
}
inline void ShowSegmentsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShowSegmentsResponse.status)
}

// repeated int64 segmentIDs = 2;
inline int ShowSegmentsResponse::_internal_segmentids_size() const {
  return _impl_.segmentids_.size();
}
inline int ShowSegmentsResponse::segmentids_size() const {
  return _internal_segmentids_size();
}
inline void ShowSegmentsResponse::clear_segmentids() {
  _impl_.segmentids_.Clear();
}
inline int64_t ShowSegmentsResponse::_internal_segmentids(int index) const {
  return _impl_.segmentids_.Get(index);
}
inline int64_t ShowSegmentsResponse::segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShowSegmentsResponse.segmentIDs)
  return _internal_segmentids(index);
}
inline void ShowSegmentsResponse::set_segmentids(int index, int64_t value) {
  _impl_.segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShowSegmentsResponse.segmentIDs)
}
inline void ShowSegmentsResponse::_internal_add_segmentids(int64_t value) {
  _impl_.segmentids_.Add(value);
}
inline void ShowSegmentsResponse::add_segmentids(int64_t value) {
  _internal_add_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShowSegmentsResponse.segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ShowSegmentsResponse::_internal_segmentids() const {
  return _impl_.segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ShowSegmentsResponse::segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShowSegmentsResponse.segmentIDs)
  return _internal_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ShowSegmentsResponse::_internal_mutable_segmentids() {
  return &_impl_.segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ShowSegmentsResponse::mutable_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShowSegmentsResponse.segmentIDs)
  return _internal_mutable_segmentids();
}

// -------------------------------------------------------------------

// CreateIndexRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreateIndexRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool CreateIndexRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CreateIndexRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CreateIndexRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateIndexRequest.base)
  return _internal_base();
}
inline void CreateIndexRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CreateIndexRequest.base)
}
inline ::milvus::proto::common::MsgBase* CreateIndexRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateIndexRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateIndexRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateIndexRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* CreateIndexRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateIndexRequest.base)
  return _msg;
}
inline void CreateIndexRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateIndexRequest.base)
}

// string db_name = 2;
inline void CreateIndexRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& CreateIndexRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateIndexRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateIndexRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateIndexRequest.db_name)
}
inline std::string* CreateIndexRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateIndexRequest.db_name)
  return _s;
}
inline const std::string& CreateIndexRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void CreateIndexRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateIndexRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void CreateIndexRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateIndexRequest.db_name)
}

// string collection_name = 3;
inline void CreateIndexRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& CreateIndexRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateIndexRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateIndexRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateIndexRequest.collection_name)
}
inline std::string* CreateIndexRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateIndexRequest.collection_name)
  return _s;
}
inline const std::string& CreateIndexRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void CreateIndexRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateIndexRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void CreateIndexRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateIndexRequest.collection_name)
}

// string field_name = 4;
inline void CreateIndexRequest::clear_field_name() {
  _impl_.field_name_.ClearToEmpty();
}
inline const std::string& CreateIndexRequest::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateIndexRequest.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateIndexRequest::set_field_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateIndexRequest.field_name)
}
inline std::string* CreateIndexRequest::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateIndexRequest.field_name)
  return _s;
}
inline const std::string& CreateIndexRequest::_internal_field_name() const {
  return _impl_.field_name_.Get();
}
inline void CreateIndexRequest::_internal_set_field_name(const std::string& value) {
  
  _impl_.field_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::_internal_mutable_field_name() {
  
  return _impl_.field_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateIndexRequest.field_name)
  return _impl_.field_name_.Release();
}
inline void CreateIndexRequest::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  _impl_.field_name_.SetAllocated(field_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_name_.IsDefault()) {
    _impl_.field_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateIndexRequest.field_name)
}

// repeated .milvus.proto.common.KeyValuePair extra_params = 5;
inline int CreateIndexRequest::_internal_extra_params_size() const {
  return _impl_.extra_params_.size();
}
inline int CreateIndexRequest::extra_params_size() const {
  return _internal_extra_params_size();
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateIndexRequest.extra_params)
  return _impl_.extra_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
CreateIndexRequest::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.CreateIndexRequest.extra_params)
  return &_impl_.extra_params_;
}
inline const ::milvus::proto::common::KeyValuePair& CreateIndexRequest::_internal_extra_params(int index) const {
  return _impl_.extra_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& CreateIndexRequest::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateIndexRequest.extra_params)
  return _internal_extra_params(index);
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::_internal_add_extra_params() {
  return _impl_.extra_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::add_extra_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_extra_params();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.CreateIndexRequest.extra_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
CreateIndexRequest::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.CreateIndexRequest.extra_params)
  return _impl_.extra_params_;
}

// string index_name = 6;
inline void CreateIndexRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& CreateIndexRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateIndexRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateIndexRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateIndexRequest.index_name)
}
inline std::string* CreateIndexRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateIndexRequest.index_name)
  return _s;
}
inline const std::string& CreateIndexRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void CreateIndexRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateIndexRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void CreateIndexRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateIndexRequest.index_name)
}

// -------------------------------------------------------------------

// DescribeIndexRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DescribeIndexRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DescribeIndexRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DescribeIndexRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DescribeIndexRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeIndexRequest.base)
  return _internal_base();
}
inline void DescribeIndexRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DescribeIndexRequest.base)
}
inline ::milvus::proto::common::MsgBase* DescribeIndexRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeIndexRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeIndexRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeIndexRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DescribeIndexRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeIndexRequest.base)
  return _msg;
}
inline void DescribeIndexRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeIndexRequest.base)
}

// string db_name = 2;
inline void DescribeIndexRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DescribeIndexRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeIndexRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeIndexRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeIndexRequest.db_name)
}
inline std::string* DescribeIndexRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeIndexRequest.db_name)
  return _s;
}
inline const std::string& DescribeIndexRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DescribeIndexRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeIndexRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeIndexRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeIndexRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void DescribeIndexRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeIndexRequest.db_name)
}

// string collection_name = 3;
inline void DescribeIndexRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& DescribeIndexRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeIndexRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeIndexRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeIndexRequest.collection_name)
}
inline std::string* DescribeIndexRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeIndexRequest.collection_name)
  return _s;
}
inline const std::string& DescribeIndexRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void DescribeIndexRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeIndexRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeIndexRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeIndexRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void DescribeIndexRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeIndexRequest.collection_name)
}

// string field_name = 4;
inline void DescribeIndexRequest::clear_field_name() {
  _impl_.field_name_.ClearToEmpty();
}
inline const std::string& DescribeIndexRequest::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeIndexRequest.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeIndexRequest::set_field_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeIndexRequest.field_name)
}
inline std::string* DescribeIndexRequest::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeIndexRequest.field_name)
  return _s;
}
inline const std::string& DescribeIndexRequest::_internal_field_name() const {
  return _impl_.field_name_.Get();
}
inline void DescribeIndexRequest::_internal_set_field_name(const std::string& value) {
  
  _impl_.field_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeIndexRequest::_internal_mutable_field_name() {
  
  return _impl_.field_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeIndexRequest::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeIndexRequest.field_name)
  return _impl_.field_name_.Release();
}
inline void DescribeIndexRequest::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  _impl_.field_name_.SetAllocated(field_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_name_.IsDefault()) {
    _impl_.field_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeIndexRequest.field_name)
}

// string index_name = 5;
inline void DescribeIndexRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& DescribeIndexRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeIndexRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeIndexRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeIndexRequest.index_name)
}
inline std::string* DescribeIndexRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeIndexRequest.index_name)
  return _s;
}
inline const std::string& DescribeIndexRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void DescribeIndexRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeIndexRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeIndexRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeIndexRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void DescribeIndexRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeIndexRequest.index_name)
}

// -------------------------------------------------------------------

// IndexDescription

// string index_name = 1;
inline void IndexDescription::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& IndexDescription::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.IndexDescription.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexDescription::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.IndexDescription.index_name)
}
inline std::string* IndexDescription::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.IndexDescription.index_name)
  return _s;
}
inline const std::string& IndexDescription::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void IndexDescription::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexDescription::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* IndexDescription::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.IndexDescription.index_name)
  return _impl_.index_name_.Release();
}
inline void IndexDescription::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.IndexDescription.index_name)
}

// int64 indexID = 2;
inline void IndexDescription::clear_indexid() {
  _impl_.indexid_ = int64_t{0};
}
inline int64_t IndexDescription::_internal_indexid() const {
  return _impl_.indexid_;
}
inline int64_t IndexDescription::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.IndexDescription.indexID)
  return _internal_indexid();
}
inline void IndexDescription::_internal_set_indexid(int64_t value) {
  
  _impl_.indexid_ = value;
}
inline void IndexDescription::set_indexid(int64_t value) {
  _internal_set_indexid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.IndexDescription.indexID)
}

// repeated .milvus.proto.common.KeyValuePair params = 3;
inline int IndexDescription::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int IndexDescription::params_size() const {
  return _internal_params_size();
}
inline ::milvus::proto::common::KeyValuePair* IndexDescription::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.IndexDescription.params)
  return _impl_.params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
IndexDescription::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.IndexDescription.params)
  return &_impl_.params_;
}
inline const ::milvus::proto::common::KeyValuePair& IndexDescription::_internal_params(int index) const {
  return _impl_.params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& IndexDescription::params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.IndexDescription.params)
  return _internal_params(index);
}
inline ::milvus::proto::common::KeyValuePair* IndexDescription::_internal_add_params() {
  return _impl_.params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* IndexDescription::add_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.IndexDescription.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
IndexDescription::params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.IndexDescription.params)
  return _impl_.params_;
}

// string field_name = 4;
inline void IndexDescription::clear_field_name() {
  _impl_.field_name_.ClearToEmpty();
}
inline const std::string& IndexDescription::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.IndexDescription.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexDescription::set_field_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.IndexDescription.field_name)
}
inline std::string* IndexDescription::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.IndexDescription.field_name)
  return _s;
}
inline const std::string& IndexDescription::_internal_field_name() const {
  return _impl_.field_name_.Get();
}
inline void IndexDescription::_internal_set_field_name(const std::string& value) {
  
  _impl_.field_name_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexDescription::_internal_mutable_field_name() {
  
  return _impl_.field_name_.Mutable(GetArenaForAllocation());
}
inline std::string* IndexDescription::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.IndexDescription.field_name)
  return _impl_.field_name_.Release();
}
inline void IndexDescription::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  _impl_.field_name_.SetAllocated(field_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_name_.IsDefault()) {
    _impl_.field_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.IndexDescription.field_name)
}

// int64 indexed_rows = 5;
inline void IndexDescription::clear_indexed_rows() {
  _impl_.indexed_rows_ = int64_t{0};
}
inline int64_t IndexDescription::_internal_indexed_rows() const {
  return _impl_.indexed_rows_;
}
inline int64_t IndexDescription::indexed_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.IndexDescription.indexed_rows)
  return _internal_indexed_rows();
}
inline void IndexDescription::_internal_set_indexed_rows(int64_t value) {
  
  _impl_.indexed_rows_ = value;
}
inline void IndexDescription::set_indexed_rows(int64_t value) {
  _internal_set_indexed_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.IndexDescription.indexed_rows)
}

// int64 total_rows = 6;
inline void IndexDescription::clear_total_rows() {
  _impl_.total_rows_ = int64_t{0};
}
inline int64_t IndexDescription::_internal_total_rows() const {
  return _impl_.total_rows_;
}
inline int64_t IndexDescription::total_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.IndexDescription.total_rows)
  return _internal_total_rows();
}
inline void IndexDescription::_internal_set_total_rows(int64_t value) {
  
  _impl_.total_rows_ = value;
}
inline void IndexDescription::set_total_rows(int64_t value) {
  _internal_set_total_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.IndexDescription.total_rows)
}

// .milvus.proto.common.IndexState state = 7;
inline void IndexDescription::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::IndexState IndexDescription::_internal_state() const {
  return static_cast< ::milvus::proto::common::IndexState >(_impl_.state_);
}
inline ::milvus::proto::common::IndexState IndexDescription::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.IndexDescription.state)
  return _internal_state();
}
inline void IndexDescription::_internal_set_state(::milvus::proto::common::IndexState value) {
  
  _impl_.state_ = value;
}
inline void IndexDescription::set_state(::milvus::proto::common::IndexState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.IndexDescription.state)
}

// string index_state_fail_reason = 8;
inline void IndexDescription::clear_index_state_fail_reason() {
  _impl_.index_state_fail_reason_.ClearToEmpty();
}
inline const std::string& IndexDescription::index_state_fail_reason() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.IndexDescription.index_state_fail_reason)
  return _internal_index_state_fail_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexDescription::set_index_state_fail_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_state_fail_reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.IndexDescription.index_state_fail_reason)
}
inline std::string* IndexDescription::mutable_index_state_fail_reason() {
  std::string* _s = _internal_mutable_index_state_fail_reason();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.IndexDescription.index_state_fail_reason)
  return _s;
}
inline const std::string& IndexDescription::_internal_index_state_fail_reason() const {
  return _impl_.index_state_fail_reason_.Get();
}
inline void IndexDescription::_internal_set_index_state_fail_reason(const std::string& value) {
  
  _impl_.index_state_fail_reason_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexDescription::_internal_mutable_index_state_fail_reason() {
  
  return _impl_.index_state_fail_reason_.Mutable(GetArenaForAllocation());
}
inline std::string* IndexDescription::release_index_state_fail_reason() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.IndexDescription.index_state_fail_reason)
  return _impl_.index_state_fail_reason_.Release();
}
inline void IndexDescription::set_allocated_index_state_fail_reason(std::string* index_state_fail_reason) {
  if (index_state_fail_reason != nullptr) {
    
  } else {
    
  }
  _impl_.index_state_fail_reason_.SetAllocated(index_state_fail_reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_state_fail_reason_.IsDefault()) {
    _impl_.index_state_fail_reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.IndexDescription.index_state_fail_reason)
}

// int64 pending_index_rows = 9;
inline void IndexDescription::clear_pending_index_rows() {
  _impl_.pending_index_rows_ = int64_t{0};
}
inline int64_t IndexDescription::_internal_pending_index_rows() const {
  return _impl_.pending_index_rows_;
}
inline int64_t IndexDescription::pending_index_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.IndexDescription.pending_index_rows)
  return _internal_pending_index_rows();
}
inline void IndexDescription::_internal_set_pending_index_rows(int64_t value) {
  
  _impl_.pending_index_rows_ = value;
}
inline void IndexDescription::set_pending_index_rows(int64_t value) {
  _internal_set_pending_index_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.IndexDescription.pending_index_rows)
}

// -------------------------------------------------------------------

// DescribeIndexResponse

// .milvus.proto.common.Status status = 1;
inline bool DescribeIndexResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool DescribeIndexResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& DescribeIndexResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& DescribeIndexResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeIndexResponse.status)
  return _internal_status();
}
inline void DescribeIndexResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DescribeIndexResponse.status)
}
inline ::milvus::proto::common::Status* DescribeIndexResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* DescribeIndexResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeIndexResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* DescribeIndexResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* DescribeIndexResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeIndexResponse.status)
  return _msg;
}
inline void DescribeIndexResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeIndexResponse.status)
}

// repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
inline int DescribeIndexResponse::_internal_index_descriptions_size() const {
  return _impl_.index_descriptions_.size();
}
inline int DescribeIndexResponse::index_descriptions_size() const {
  return _internal_index_descriptions_size();
}
inline void DescribeIndexResponse::clear_index_descriptions() {
  _impl_.index_descriptions_.Clear();
}
inline ::milvus::proto::milvus::IndexDescription* DescribeIndexResponse::mutable_index_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeIndexResponse.index_descriptions)
  return _impl_.index_descriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription >*
DescribeIndexResponse::mutable_index_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.DescribeIndexResponse.index_descriptions)
  return &_impl_.index_descriptions_;
}
inline const ::milvus::proto::milvus::IndexDescription& DescribeIndexResponse::_internal_index_descriptions(int index) const {
  return _impl_.index_descriptions_.Get(index);
}
inline const ::milvus::proto::milvus::IndexDescription& DescribeIndexResponse::index_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeIndexResponse.index_descriptions)
  return _internal_index_descriptions(index);
}
inline ::milvus::proto::milvus::IndexDescription* DescribeIndexResponse::_internal_add_index_descriptions() {
  return _impl_.index_descriptions_.Add();
}
inline ::milvus::proto::milvus::IndexDescription* DescribeIndexResponse::add_index_descriptions() {
  ::milvus::proto::milvus::IndexDescription* _add = _internal_add_index_descriptions();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DescribeIndexResponse.index_descriptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription >&
DescribeIndexResponse::index_descriptions() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.DescribeIndexResponse.index_descriptions)
  return _impl_.index_descriptions_;
}

// -------------------------------------------------------------------

// GetIndexBuildProgressRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetIndexBuildProgressRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetIndexBuildProgressRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetIndexBuildProgressRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetIndexBuildProgressRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressRequest.base)
  return _internal_base();
}
inline void GetIndexBuildProgressRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetIndexBuildProgressRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetIndexBuildProgressRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetIndexBuildProgressRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexBuildProgressRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetIndexBuildProgressRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetIndexBuildProgressRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexBuildProgressRequest.base)
  return _msg;
}
inline void GetIndexBuildProgressRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexBuildProgressRequest.base)
}

// string db_name = 2;
inline void GetIndexBuildProgressRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& GetIndexBuildProgressRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexBuildProgressRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexBuildProgressRequest.db_name)
}
inline std::string* GetIndexBuildProgressRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexBuildProgressRequest.db_name)
  return _s;
}
inline const std::string& GetIndexBuildProgressRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void GetIndexBuildProgressRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexBuildProgressRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexBuildProgressRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexBuildProgressRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void GetIndexBuildProgressRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexBuildProgressRequest.db_name)
}

// string collection_name = 3;
inline void GetIndexBuildProgressRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& GetIndexBuildProgressRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexBuildProgressRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name)
}
inline std::string* GetIndexBuildProgressRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name)
  return _s;
}
inline const std::string& GetIndexBuildProgressRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void GetIndexBuildProgressRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexBuildProgressRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexBuildProgressRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void GetIndexBuildProgressRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name)
}

// string field_name = 4;
inline void GetIndexBuildProgressRequest::clear_field_name() {
  _impl_.field_name_.ClearToEmpty();
}
inline const std::string& GetIndexBuildProgressRequest::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressRequest.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexBuildProgressRequest::set_field_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexBuildProgressRequest.field_name)
}
inline std::string* GetIndexBuildProgressRequest::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexBuildProgressRequest.field_name)
  return _s;
}
inline const std::string& GetIndexBuildProgressRequest::_internal_field_name() const {
  return _impl_.field_name_.Get();
}
inline void GetIndexBuildProgressRequest::_internal_set_field_name(const std::string& value) {
  
  _impl_.field_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexBuildProgressRequest::_internal_mutable_field_name() {
  
  return _impl_.field_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexBuildProgressRequest::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexBuildProgressRequest.field_name)
  return _impl_.field_name_.Release();
}
inline void GetIndexBuildProgressRequest::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  _impl_.field_name_.SetAllocated(field_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_name_.IsDefault()) {
    _impl_.field_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexBuildProgressRequest.field_name)
}

// string index_name = 5;
inline void GetIndexBuildProgressRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& GetIndexBuildProgressRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexBuildProgressRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexBuildProgressRequest.index_name)
}
inline std::string* GetIndexBuildProgressRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexBuildProgressRequest.index_name)
  return _s;
}
inline const std::string& GetIndexBuildProgressRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void GetIndexBuildProgressRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexBuildProgressRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexBuildProgressRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexBuildProgressRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void GetIndexBuildProgressRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexBuildProgressRequest.index_name)
}

// -------------------------------------------------------------------

// GetIndexBuildProgressResponse

// .milvus.proto.common.Status status = 1;
inline bool GetIndexBuildProgressResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetIndexBuildProgressResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetIndexBuildProgressResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetIndexBuildProgressResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressResponse.status)
  return _internal_status();
}
inline void GetIndexBuildProgressResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetIndexBuildProgressResponse.status)
}
inline ::milvus::proto::common::Status* GetIndexBuildProgressResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexBuildProgressResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexBuildProgressResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexBuildProgressResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetIndexBuildProgressResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexBuildProgressResponse.status)
  return _msg;
}
inline void GetIndexBuildProgressResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexBuildProgressResponse.status)
}

// int64 indexed_rows = 2;
inline void GetIndexBuildProgressResponse::clear_indexed_rows() {
  _impl_.indexed_rows_ = int64_t{0};
}
inline int64_t GetIndexBuildProgressResponse::_internal_indexed_rows() const {
  return _impl_.indexed_rows_;
}
inline int64_t GetIndexBuildProgressResponse::indexed_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressResponse.indexed_rows)
  return _internal_indexed_rows();
}
inline void GetIndexBuildProgressResponse::_internal_set_indexed_rows(int64_t value) {
  
  _impl_.indexed_rows_ = value;
}
inline void GetIndexBuildProgressResponse::set_indexed_rows(int64_t value) {
  _internal_set_indexed_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexBuildProgressResponse.indexed_rows)
}

// int64 total_rows = 3;
inline void GetIndexBuildProgressResponse::clear_total_rows() {
  _impl_.total_rows_ = int64_t{0};
}
inline int64_t GetIndexBuildProgressResponse::_internal_total_rows() const {
  return _impl_.total_rows_;
}
inline int64_t GetIndexBuildProgressResponse::total_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexBuildProgressResponse.total_rows)
  return _internal_total_rows();
}
inline void GetIndexBuildProgressResponse::_internal_set_total_rows(int64_t value) {
  
  _impl_.total_rows_ = value;
}
inline void GetIndexBuildProgressResponse::set_total_rows(int64_t value) {
  _internal_set_total_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexBuildProgressResponse.total_rows)
}

// -------------------------------------------------------------------

// GetIndexStateRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetIndexStateRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetIndexStateRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetIndexStateRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetIndexStateRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateRequest.base)
  return _internal_base();
}
inline void GetIndexStateRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetIndexStateRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetIndexStateRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetIndexStateRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStateRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetIndexStateRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetIndexStateRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStateRequest.base)
  return _msg;
}
inline void GetIndexStateRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStateRequest.base)
}

// string db_name = 2;
inline void GetIndexStateRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& GetIndexStateRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexStateRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStateRequest.db_name)
}
inline std::string* GetIndexStateRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStateRequest.db_name)
  return _s;
}
inline const std::string& GetIndexStateRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void GetIndexStateRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexStateRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexStateRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStateRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void GetIndexStateRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStateRequest.db_name)
}

// string collection_name = 3;
inline void GetIndexStateRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& GetIndexStateRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexStateRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStateRequest.collection_name)
}
inline std::string* GetIndexStateRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStateRequest.collection_name)
  return _s;
}
inline const std::string& GetIndexStateRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void GetIndexStateRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexStateRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexStateRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStateRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void GetIndexStateRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStateRequest.collection_name)
}

// string field_name = 4;
inline void GetIndexStateRequest::clear_field_name() {
  _impl_.field_name_.ClearToEmpty();
}
inline const std::string& GetIndexStateRequest::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateRequest.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexStateRequest::set_field_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStateRequest.field_name)
}
inline std::string* GetIndexStateRequest::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStateRequest.field_name)
  return _s;
}
inline const std::string& GetIndexStateRequest::_internal_field_name() const {
  return _impl_.field_name_.Get();
}
inline void GetIndexStateRequest::_internal_set_field_name(const std::string& value) {
  
  _impl_.field_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexStateRequest::_internal_mutable_field_name() {
  
  return _impl_.field_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexStateRequest::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStateRequest.field_name)
  return _impl_.field_name_.Release();
}
inline void GetIndexStateRequest::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  _impl_.field_name_.SetAllocated(field_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_name_.IsDefault()) {
    _impl_.field_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStateRequest.field_name)
}

// string index_name = 5;
inline void GetIndexStateRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& GetIndexStateRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexStateRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStateRequest.index_name)
}
inline std::string* GetIndexStateRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStateRequest.index_name)
  return _s;
}
inline const std::string& GetIndexStateRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void GetIndexStateRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexStateRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexStateRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStateRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void GetIndexStateRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStateRequest.index_name)
}

// -------------------------------------------------------------------

// GetIndexStateResponse

// .milvus.proto.common.Status status = 1;
inline bool GetIndexStateResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetIndexStateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetIndexStateResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetIndexStateResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateResponse.status)
  return _internal_status();
}
inline void GetIndexStateResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetIndexStateResponse.status)
}
inline ::milvus::proto::common::Status* GetIndexStateResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexStateResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStateResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexStateResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetIndexStateResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStateResponse.status)
  return _msg;
}
inline void GetIndexStateResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStateResponse.status)
}

// .milvus.proto.common.IndexState state = 2;
inline void GetIndexStateResponse::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::IndexState GetIndexStateResponse::_internal_state() const {
  return static_cast< ::milvus::proto::common::IndexState >(_impl_.state_);
}
inline ::milvus::proto::common::IndexState GetIndexStateResponse::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateResponse.state)
  return _internal_state();
}
inline void GetIndexStateResponse::_internal_set_state(::milvus::proto::common::IndexState value) {
  
  _impl_.state_ = value;
}
inline void GetIndexStateResponse::set_state(::milvus::proto::common::IndexState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStateResponse.state)
}

// string fail_reason = 3;
inline void GetIndexStateResponse::clear_fail_reason() {
  _impl_.fail_reason_.ClearToEmpty();
}
inline const std::string& GetIndexStateResponse::fail_reason() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStateResponse.fail_reason)
  return _internal_fail_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexStateResponse::set_fail_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fail_reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStateResponse.fail_reason)
}
inline std::string* GetIndexStateResponse::mutable_fail_reason() {
  std::string* _s = _internal_mutable_fail_reason();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStateResponse.fail_reason)
  return _s;
}
inline const std::string& GetIndexStateResponse::_internal_fail_reason() const {
  return _impl_.fail_reason_.Get();
}
inline void GetIndexStateResponse::_internal_set_fail_reason(const std::string& value) {
  
  _impl_.fail_reason_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexStateResponse::_internal_mutable_fail_reason() {
  
  return _impl_.fail_reason_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexStateResponse::release_fail_reason() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStateResponse.fail_reason)
  return _impl_.fail_reason_.Release();
}
inline void GetIndexStateResponse::set_allocated_fail_reason(std::string* fail_reason) {
  if (fail_reason != nullptr) {
    
  } else {
    
  }
  _impl_.fail_reason_.SetAllocated(fail_reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fail_reason_.IsDefault()) {
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStateResponse.fail_reason)
}

// -------------------------------------------------------------------

// DropIndexRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropIndexRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DropIndexRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DropIndexRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DropIndexRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropIndexRequest.base)
  return _internal_base();
}
inline void DropIndexRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DropIndexRequest.base)
}
inline ::milvus::proto::common::MsgBase* DropIndexRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropIndexRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropIndexRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropIndexRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DropIndexRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropIndexRequest.base)
  return _msg;
}
inline void DropIndexRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropIndexRequest.base)
}

// string db_name = 2;
inline void DropIndexRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DropIndexRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropIndexRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropIndexRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropIndexRequest.db_name)
}
inline std::string* DropIndexRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropIndexRequest.db_name)
  return _s;
}
inline const std::string& DropIndexRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DropIndexRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropIndexRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropIndexRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropIndexRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void DropIndexRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropIndexRequest.db_name)
}

// string collection_name = 3;
inline void DropIndexRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& DropIndexRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropIndexRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropIndexRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropIndexRequest.collection_name)
}
inline std::string* DropIndexRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropIndexRequest.collection_name)
  return _s;
}
inline const std::string& DropIndexRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void DropIndexRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropIndexRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropIndexRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropIndexRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void DropIndexRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropIndexRequest.collection_name)
}

// string field_name = 4;
inline void DropIndexRequest::clear_field_name() {
  _impl_.field_name_.ClearToEmpty();
}
inline const std::string& DropIndexRequest::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropIndexRequest.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropIndexRequest::set_field_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropIndexRequest.field_name)
}
inline std::string* DropIndexRequest::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropIndexRequest.field_name)
  return _s;
}
inline const std::string& DropIndexRequest::_internal_field_name() const {
  return _impl_.field_name_.Get();
}
inline void DropIndexRequest::_internal_set_field_name(const std::string& value) {
  
  _impl_.field_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropIndexRequest::_internal_mutable_field_name() {
  
  return _impl_.field_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropIndexRequest::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropIndexRequest.field_name)
  return _impl_.field_name_.Release();
}
inline void DropIndexRequest::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  _impl_.field_name_.SetAllocated(field_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_name_.IsDefault()) {
    _impl_.field_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropIndexRequest.field_name)
}

// string index_name = 5;
inline void DropIndexRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& DropIndexRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropIndexRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropIndexRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropIndexRequest.index_name)
}
inline std::string* DropIndexRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropIndexRequest.index_name)
  return _s;
}
inline const std::string& DropIndexRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void DropIndexRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropIndexRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropIndexRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropIndexRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void DropIndexRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropIndexRequest.index_name)
}

// -------------------------------------------------------------------

// InsertRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool InsertRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool InsertRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& InsertRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& InsertRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.InsertRequest.base)
  return _internal_base();
}
inline void InsertRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.InsertRequest.base)
}
inline ::milvus::proto::common::MsgBase* InsertRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* InsertRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.InsertRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* InsertRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* InsertRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.InsertRequest.base)
  return _msg;
}
inline void InsertRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.InsertRequest.base)
}

// string db_name = 2;
inline void InsertRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& InsertRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.InsertRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InsertRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.InsertRequest.db_name)
}
inline std::string* InsertRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.InsertRequest.db_name)
  return _s;
}
inline const std::string& InsertRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void InsertRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* InsertRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* InsertRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.InsertRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void InsertRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.InsertRequest.db_name)
}

// string collection_name = 3;
inline void InsertRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& InsertRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.InsertRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InsertRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.InsertRequest.collection_name)
}
inline std::string* InsertRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.InsertRequest.collection_name)
  return _s;
}
inline const std::string& InsertRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void InsertRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* InsertRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* InsertRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.InsertRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void InsertRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.InsertRequest.collection_name)
}

// string partition_name = 4;
inline void InsertRequest::clear_partition_name() {
  _impl_.partition_name_.ClearToEmpty();
}
inline const std::string& InsertRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.InsertRequest.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InsertRequest::set_partition_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.partition_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.InsertRequest.partition_name)
}
inline std::string* InsertRequest::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.InsertRequest.partition_name)
  return _s;
}
inline const std::string& InsertRequest::_internal_partition_name() const {
  return _impl_.partition_name_.Get();
}
inline void InsertRequest::_internal_set_partition_name(const std::string& value) {
  
  _impl_.partition_name_.Set(value, GetArenaForAllocation());
}
inline std::string* InsertRequest::_internal_mutable_partition_name() {
  
  return _impl_.partition_name_.Mutable(GetArenaForAllocation());
}
inline std::string* InsertRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.InsertRequest.partition_name)
  return _impl_.partition_name_.Release();
}
inline void InsertRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  _impl_.partition_name_.SetAllocated(partition_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partition_name_.IsDefault()) {
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.InsertRequest.partition_name)
}

// repeated .milvus.proto.schema.FieldData fields_data = 5;
inline int InsertRequest::_internal_fields_data_size() const {
  return _impl_.fields_data_.size();
}
inline int InsertRequest::fields_data_size() const {
  return _internal_fields_data_size();
}
inline ::milvus::proto::schema::FieldData* InsertRequest::mutable_fields_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.InsertRequest.fields_data)
  return _impl_.fields_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
InsertRequest::mutable_fields_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.InsertRequest.fields_data)
  return &_impl_.fields_data_;
}
inline const ::milvus::proto::schema::FieldData& InsertRequest::_internal_fields_data(int index) const {
  return _impl_.fields_data_.Get(index);
}
inline const ::milvus::proto::schema::FieldData& InsertRequest::fields_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.InsertRequest.fields_data)
  return _internal_fields_data(index);
}
inline ::milvus::proto::schema::FieldData* InsertRequest::_internal_add_fields_data() {
  return _impl_.fields_data_.Add();
}
inline ::milvus::proto::schema::FieldData* InsertRequest::add_fields_data() {
  ::milvus::proto::schema::FieldData* _add = _internal_add_fields_data();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.InsertRequest.fields_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
InsertRequest::fields_data() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.InsertRequest.fields_data)
  return _impl_.fields_data_;
}

// repeated uint32 hash_keys = 6;
inline int InsertRequest::_internal_hash_keys_size() const {
  return _impl_.hash_keys_.size();
}
inline int InsertRequest::hash_keys_size() const {
  return _internal_hash_keys_size();
}
inline void InsertRequest::clear_hash_keys() {
  _impl_.hash_keys_.Clear();
}
inline uint32_t InsertRequest::_internal_hash_keys(int index) const {
  return _impl_.hash_keys_.Get(index);
}
inline uint32_t InsertRequest::hash_keys(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.InsertRequest.hash_keys)
  return _internal_hash_keys(index);
}
inline void InsertRequest::set_hash_keys(int index, uint32_t value) {
  _impl_.hash_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.InsertRequest.hash_keys)
}
inline void InsertRequest::_internal_add_hash_keys(uint32_t value) {
  _impl_.hash_keys_.Add(value);
}
inline void InsertRequest::add_hash_keys(uint32_t value) {
  _internal_add_hash_keys(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.InsertRequest.hash_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
InsertRequest::_internal_hash_keys() const {
  return _impl_.hash_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
InsertRequest::hash_keys() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.InsertRequest.hash_keys)
  return _internal_hash_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
InsertRequest::_internal_mutable_hash_keys() {
  return &_impl_.hash_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
InsertRequest::mutable_hash_keys() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.InsertRequest.hash_keys)
  return _internal_mutable_hash_keys();
}

// uint32 num_rows = 7;
inline void InsertRequest::clear_num_rows() {
  _impl_.num_rows_ = 0u;
}
inline uint32_t InsertRequest::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline uint32_t InsertRequest::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.InsertRequest.num_rows)
  return _internal_num_rows();
}
inline void InsertRequest::_internal_set_num_rows(uint32_t value) {
  
  _impl_.num_rows_ = value;
}
inline void InsertRequest::set_num_rows(uint32_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.InsertRequest.num_rows)
}

// -------------------------------------------------------------------

// UpsertRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool UpsertRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool UpsertRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& UpsertRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& UpsertRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UpsertRequest.base)
  return _internal_base();
}
inline void UpsertRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.UpsertRequest.base)
}
inline ::milvus::proto::common::MsgBase* UpsertRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* UpsertRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.UpsertRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* UpsertRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* UpsertRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.UpsertRequest.base)
  return _msg;
}
inline void UpsertRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.UpsertRequest.base)
}

// string db_name = 2;
inline void UpsertRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& UpsertRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UpsertRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpsertRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.UpsertRequest.db_name)
}
inline std::string* UpsertRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.UpsertRequest.db_name)
  return _s;
}
inline const std::string& UpsertRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void UpsertRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UpsertRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UpsertRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.UpsertRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void UpsertRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.UpsertRequest.db_name)
}

// string collection_name = 3;
inline void UpsertRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& UpsertRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UpsertRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpsertRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.UpsertRequest.collection_name)
}
inline std::string* UpsertRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.UpsertRequest.collection_name)
  return _s;
}
inline const std::string& UpsertRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void UpsertRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UpsertRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UpsertRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.UpsertRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void UpsertRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.UpsertRequest.collection_name)
}

// string partition_name = 4;
inline void UpsertRequest::clear_partition_name() {
  _impl_.partition_name_.ClearToEmpty();
}
inline const std::string& UpsertRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UpsertRequest.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpsertRequest::set_partition_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.partition_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.UpsertRequest.partition_name)
}
inline std::string* UpsertRequest::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.UpsertRequest.partition_name)
  return _s;
}
inline const std::string& UpsertRequest::_internal_partition_name() const {
  return _impl_.partition_name_.Get();
}
inline void UpsertRequest::_internal_set_partition_name(const std::string& value) {
  
  _impl_.partition_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UpsertRequest::_internal_mutable_partition_name() {
  
  return _impl_.partition_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UpsertRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.UpsertRequest.partition_name)
  return _impl_.partition_name_.Release();
}
inline void UpsertRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  _impl_.partition_name_.SetAllocated(partition_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partition_name_.IsDefault()) {
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.UpsertRequest.partition_name)
}

// repeated .milvus.proto.schema.FieldData fields_data = 5;
inline int UpsertRequest::_internal_fields_data_size() const {
  return _impl_.fields_data_.size();
}
inline int UpsertRequest::fields_data_size() const {
  return _internal_fields_data_size();
}
inline ::milvus::proto::schema::FieldData* UpsertRequest::mutable_fields_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.UpsertRequest.fields_data)
  return _impl_.fields_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
UpsertRequest::mutable_fields_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.UpsertRequest.fields_data)
  return &_impl_.fields_data_;
}
inline const ::milvus::proto::schema::FieldData& UpsertRequest::_internal_fields_data(int index) const {
  return _impl_.fields_data_.Get(index);
}
inline const ::milvus::proto::schema::FieldData& UpsertRequest::fields_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UpsertRequest.fields_data)
  return _internal_fields_data(index);
}
inline ::milvus::proto::schema::FieldData* UpsertRequest::_internal_add_fields_data() {
  return _impl_.fields_data_.Add();
}
inline ::milvus::proto::schema::FieldData* UpsertRequest::add_fields_data() {
  ::milvus::proto::schema::FieldData* _add = _internal_add_fields_data();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.UpsertRequest.fields_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
UpsertRequest::fields_data() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.UpsertRequest.fields_data)
  return _impl_.fields_data_;
}

// repeated uint32 hash_keys = 6;
inline int UpsertRequest::_internal_hash_keys_size() const {
  return _impl_.hash_keys_.size();
}
inline int UpsertRequest::hash_keys_size() const {
  return _internal_hash_keys_size();
}
inline void UpsertRequest::clear_hash_keys() {
  _impl_.hash_keys_.Clear();
}
inline uint32_t UpsertRequest::_internal_hash_keys(int index) const {
  return _impl_.hash_keys_.Get(index);
}
inline uint32_t UpsertRequest::hash_keys(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UpsertRequest.hash_keys)
  return _internal_hash_keys(index);
}
inline void UpsertRequest::set_hash_keys(int index, uint32_t value) {
  _impl_.hash_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.UpsertRequest.hash_keys)
}
inline void UpsertRequest::_internal_add_hash_keys(uint32_t value) {
  _impl_.hash_keys_.Add(value);
}
inline void UpsertRequest::add_hash_keys(uint32_t value) {
  _internal_add_hash_keys(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.UpsertRequest.hash_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UpsertRequest::_internal_hash_keys() const {
  return _impl_.hash_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UpsertRequest::hash_keys() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.UpsertRequest.hash_keys)
  return _internal_hash_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UpsertRequest::_internal_mutable_hash_keys() {
  return &_impl_.hash_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UpsertRequest::mutable_hash_keys() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.UpsertRequest.hash_keys)
  return _internal_mutable_hash_keys();
}

// uint32 num_rows = 7;
inline void UpsertRequest::clear_num_rows() {
  _impl_.num_rows_ = 0u;
}
inline uint32_t UpsertRequest::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline uint32_t UpsertRequest::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UpsertRequest.num_rows)
  return _internal_num_rows();
}
inline void UpsertRequest::_internal_set_num_rows(uint32_t value) {
  
  _impl_.num_rows_ = value;
}
inline void UpsertRequest::set_num_rows(uint32_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.UpsertRequest.num_rows)
}

// -------------------------------------------------------------------

// MutationResult

// .milvus.proto.common.Status status = 1;
inline bool MutationResult::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool MutationResult::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& MutationResult::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& MutationResult::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.status)
  return _internal_status();
}
inline void MutationResult::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.MutationResult.status)
}
inline ::milvus::proto::common::Status* MutationResult::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* MutationResult::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.MutationResult.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* MutationResult::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* MutationResult::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.MutationResult.status)
  return _msg;
}
inline void MutationResult::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.MutationResult.status)
}

// .milvus.proto.schema.IDs IDs = 2;
inline bool MutationResult::_internal_has_ids() const {
  return this != internal_default_instance() && _impl_.ids_ != nullptr;
}
inline bool MutationResult::has_ids() const {
  return _internal_has_ids();
}
inline const ::milvus::proto::schema::IDs& MutationResult::_internal_ids() const {
  const ::milvus::proto::schema::IDs* p = _impl_.ids_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::schema::IDs&>(
      ::milvus::proto::schema::_IDs_default_instance_);
}
inline const ::milvus::proto::schema::IDs& MutationResult::ids() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.IDs)
  return _internal_ids();
}
inline void MutationResult::unsafe_arena_set_allocated_ids(
    ::milvus::proto::schema::IDs* ids) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ids_);
  }
  _impl_.ids_ = ids;
  if (ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.MutationResult.IDs)
}
inline ::milvus::proto::schema::IDs* MutationResult::release_ids() {
  
  ::milvus::proto::schema::IDs* temp = _impl_.ids_;
  _impl_.ids_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::schema::IDs* MutationResult::unsafe_arena_release_ids() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.MutationResult.IDs)
  
  ::milvus::proto::schema::IDs* temp = _impl_.ids_;
  _impl_.ids_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::IDs* MutationResult::_internal_mutable_ids() {
  
  if (_impl_.ids_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::IDs>(GetArenaForAllocation());
    _impl_.ids_ = p;
  }
  return _impl_.ids_;
}
inline ::milvus::proto::schema::IDs* MutationResult::mutable_ids() {
  ::milvus::proto::schema::IDs* _msg = _internal_mutable_ids();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.MutationResult.IDs)
  return _msg;
}
inline void MutationResult::set_allocated_ids(::milvus::proto::schema::IDs* ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ids_);
  }
  if (ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ids));
    if (message_arena != submessage_arena) {
      ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ids, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ids_ = ids;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.MutationResult.IDs)
}

// repeated uint32 succ_index = 3;
inline int MutationResult::_internal_succ_index_size() const {
  return _impl_.succ_index_.size();
}
inline int MutationResult::succ_index_size() const {
  return _internal_succ_index_size();
}
inline void MutationResult::clear_succ_index() {
  _impl_.succ_index_.Clear();
}
inline uint32_t MutationResult::_internal_succ_index(int index) const {
  return _impl_.succ_index_.Get(index);
}
inline uint32_t MutationResult::succ_index(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.succ_index)
  return _internal_succ_index(index);
}
inline void MutationResult::set_succ_index(int index, uint32_t value) {
  _impl_.succ_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MutationResult.succ_index)
}
inline void MutationResult::_internal_add_succ_index(uint32_t value) {
  _impl_.succ_index_.Add(value);
}
inline void MutationResult::add_succ_index(uint32_t value) {
  _internal_add_succ_index(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.MutationResult.succ_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
MutationResult::_internal_succ_index() const {
  return _impl_.succ_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
MutationResult::succ_index() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.MutationResult.succ_index)
  return _internal_succ_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
MutationResult::_internal_mutable_succ_index() {
  return &_impl_.succ_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
MutationResult::mutable_succ_index() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.MutationResult.succ_index)
  return _internal_mutable_succ_index();
}

// repeated uint32 err_index = 4;
inline int MutationResult::_internal_err_index_size() const {
  return _impl_.err_index_.size();
}
inline int MutationResult::err_index_size() const {
  return _internal_err_index_size();
}
inline void MutationResult::clear_err_index() {
  _impl_.err_index_.Clear();
}
inline uint32_t MutationResult::_internal_err_index(int index) const {
  return _impl_.err_index_.Get(index);
}
inline uint32_t MutationResult::err_index(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.err_index)
  return _internal_err_index(index);
}
inline void MutationResult::set_err_index(int index, uint32_t value) {
  _impl_.err_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MutationResult.err_index)
}
inline void MutationResult::_internal_add_err_index(uint32_t value) {
  _impl_.err_index_.Add(value);
}
inline void MutationResult::add_err_index(uint32_t value) {
  _internal_add_err_index(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.MutationResult.err_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
MutationResult::_internal_err_index() const {
  return _impl_.err_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
MutationResult::err_index() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.MutationResult.err_index)
  return _internal_err_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
MutationResult::_internal_mutable_err_index() {
  return &_impl_.err_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
MutationResult::mutable_err_index() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.MutationResult.err_index)
  return _internal_mutable_err_index();
}

// bool acknowledged = 5;
inline void MutationResult::clear_acknowledged() {
  _impl_.acknowledged_ = false;
}
inline bool MutationResult::_internal_acknowledged() const {
  return _impl_.acknowledged_;
}
inline bool MutationResult::acknowledged() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.acknowledged)
  return _internal_acknowledged();
}
inline void MutationResult::_internal_set_acknowledged(bool value) {
  
  _impl_.acknowledged_ = value;
}
inline void MutationResult::set_acknowledged(bool value) {
  _internal_set_acknowledged(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MutationResult.acknowledged)
}

// int64 insert_cnt = 6;
inline void MutationResult::clear_insert_cnt() {
  _impl_.insert_cnt_ = int64_t{0};
}
inline int64_t MutationResult::_internal_insert_cnt() const {
  return _impl_.insert_cnt_;
}
inline int64_t MutationResult::insert_cnt() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.insert_cnt)
  return _internal_insert_cnt();
}
inline void MutationResult::_internal_set_insert_cnt(int64_t value) {
  
  _impl_.insert_cnt_ = value;
}
inline void MutationResult::set_insert_cnt(int64_t value) {
  _internal_set_insert_cnt(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MutationResult.insert_cnt)
}

// int64 delete_cnt = 7;
inline void MutationResult::clear_delete_cnt() {
  _impl_.delete_cnt_ = int64_t{0};
}
inline int64_t MutationResult::_internal_delete_cnt() const {
  return _impl_.delete_cnt_;
}
inline int64_t MutationResult::delete_cnt() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.delete_cnt)
  return _internal_delete_cnt();
}
inline void MutationResult::_internal_set_delete_cnt(int64_t value) {
  
  _impl_.delete_cnt_ = value;
}
inline void MutationResult::set_delete_cnt(int64_t value) {
  _internal_set_delete_cnt(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MutationResult.delete_cnt)
}

// int64 upsert_cnt = 8;
inline void MutationResult::clear_upsert_cnt() {
  _impl_.upsert_cnt_ = int64_t{0};
}
inline int64_t MutationResult::_internal_upsert_cnt() const {
  return _impl_.upsert_cnt_;
}
inline int64_t MutationResult::upsert_cnt() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.upsert_cnt)
  return _internal_upsert_cnt();
}
inline void MutationResult::_internal_set_upsert_cnt(int64_t value) {
  
  _impl_.upsert_cnt_ = value;
}
inline void MutationResult::set_upsert_cnt(int64_t value) {
  _internal_set_upsert_cnt(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MutationResult.upsert_cnt)
}

// uint64 timestamp = 9;
inline void MutationResult::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t MutationResult::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t MutationResult::timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MutationResult.timestamp)
  return _internal_timestamp();
}
inline void MutationResult::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void MutationResult::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MutationResult.timestamp)
}

// -------------------------------------------------------------------

// DeleteRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DeleteRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DeleteRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DeleteRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DeleteRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DeleteRequest.base)
  return _internal_base();
}
inline void DeleteRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DeleteRequest.base)
}
inline ::milvus::proto::common::MsgBase* DeleteRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DeleteRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DeleteRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DeleteRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DeleteRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DeleteRequest.base)
  return _msg;
}
inline void DeleteRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DeleteRequest.base)
}

// string db_name = 2;
inline void DeleteRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DeleteRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DeleteRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DeleteRequest.db_name)
}
inline std::string* DeleteRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DeleteRequest.db_name)
  return _s;
}
inline const std::string& DeleteRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DeleteRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DeleteRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void DeleteRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DeleteRequest.db_name)
}

// string collection_name = 3;
inline void DeleteRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& DeleteRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DeleteRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DeleteRequest.collection_name)
}
inline std::string* DeleteRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DeleteRequest.collection_name)
  return _s;
}
inline const std::string& DeleteRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void DeleteRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DeleteRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void DeleteRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DeleteRequest.collection_name)
}

// string partition_name = 4;
inline void DeleteRequest::clear_partition_name() {
  _impl_.partition_name_.ClearToEmpty();
}
inline const std::string& DeleteRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DeleteRequest.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRequest::set_partition_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.partition_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DeleteRequest.partition_name)
}
inline std::string* DeleteRequest::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DeleteRequest.partition_name)
  return _s;
}
inline const std::string& DeleteRequest::_internal_partition_name() const {
  return _impl_.partition_name_.Get();
}
inline void DeleteRequest::_internal_set_partition_name(const std::string& value) {
  
  _impl_.partition_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRequest::_internal_mutable_partition_name() {
  
  return _impl_.partition_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DeleteRequest.partition_name)
  return _impl_.partition_name_.Release();
}
inline void DeleteRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  _impl_.partition_name_.SetAllocated(partition_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partition_name_.IsDefault()) {
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DeleteRequest.partition_name)
}

// string expr = 5;
inline void DeleteRequest::clear_expr() {
  _impl_.expr_.ClearToEmpty();
}
inline const std::string& DeleteRequest::expr() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DeleteRequest.expr)
  return _internal_expr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRequest::set_expr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.expr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DeleteRequest.expr)
}
inline std::string* DeleteRequest::mutable_expr() {
  std::string* _s = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DeleteRequest.expr)
  return _s;
}
inline const std::string& DeleteRequest::_internal_expr() const {
  return _impl_.expr_.Get();
}
inline void DeleteRequest::_internal_set_expr(const std::string& value) {
  
  _impl_.expr_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRequest::_internal_mutable_expr() {
  
  return _impl_.expr_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRequest::release_expr() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DeleteRequest.expr)
  return _impl_.expr_.Release();
}
inline void DeleteRequest::set_allocated_expr(std::string* expr) {
  if (expr != nullptr) {
    
  } else {
    
  }
  _impl_.expr_.SetAllocated(expr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.expr_.IsDefault()) {
    _impl_.expr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DeleteRequest.expr)
}

// repeated uint32 hash_keys = 6;
inline int DeleteRequest::_internal_hash_keys_size() const {
  return _impl_.hash_keys_.size();
}
inline int DeleteRequest::hash_keys_size() const {
  return _internal_hash_keys_size();
}
inline void DeleteRequest::clear_hash_keys() {
  _impl_.hash_keys_.Clear();
}
inline uint32_t DeleteRequest::_internal_hash_keys(int index) const {
  return _impl_.hash_keys_.Get(index);
}
inline uint32_t DeleteRequest::hash_keys(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DeleteRequest.hash_keys)
  return _internal_hash_keys(index);
}
inline void DeleteRequest::set_hash_keys(int index, uint32_t value) {
  _impl_.hash_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DeleteRequest.hash_keys)
}
inline void DeleteRequest::_internal_add_hash_keys(uint32_t value) {
  _impl_.hash_keys_.Add(value);
}
inline void DeleteRequest::add_hash_keys(uint32_t value) {
  _internal_add_hash_keys(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.DeleteRequest.hash_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DeleteRequest::_internal_hash_keys() const {
  return _impl_.hash_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DeleteRequest::hash_keys() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.DeleteRequest.hash_keys)
  return _internal_hash_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DeleteRequest::_internal_mutable_hash_keys() {
  return &_impl_.hash_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DeleteRequest::mutable_hash_keys() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.DeleteRequest.hash_keys)
  return _internal_mutable_hash_keys();
}

// -------------------------------------------------------------------

// SearchRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool SearchRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SearchRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& SearchRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& SearchRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.base)
  return _internal_base();
}
inline void SearchRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.SearchRequest.base)
}
inline ::milvus::proto::common::MsgBase* SearchRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* SearchRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* SearchRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* SearchRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.base)
  return _msg;
}
inline void SearchRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchRequest.base)
}

// string db_name = 2;
inline void SearchRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& SearchRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.db_name)
}
inline std::string* SearchRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.db_name)
  return _s;
}
inline const std::string& SearchRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void SearchRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void SearchRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchRequest.db_name)
}

// string collection_name = 3;
inline void SearchRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& SearchRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.collection_name)
}
inline std::string* SearchRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.collection_name)
  return _s;
}
inline const std::string& SearchRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void SearchRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void SearchRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchRequest.collection_name)
}

// repeated string partition_names = 4;
inline int SearchRequest::_internal_partition_names_size() const {
  return _impl_.partition_names_.size();
}
inline int SearchRequest::partition_names_size() const {
  return _internal_partition_names_size();
}
inline void SearchRequest::clear_partition_names() {
  _impl_.partition_names_.Clear();
}
inline std::string* SearchRequest::add_partition_names() {
  std::string* _s = _internal_add_partition_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.SearchRequest.partition_names)
  return _s;
}
inline const std::string& SearchRequest::_internal_partition_names(int index) const {
  return _impl_.partition_names_.Get(index);
}
inline const std::string& SearchRequest::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.partition_names)
  return _internal_partition_names(index);
}
inline std::string* SearchRequest::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.partition_names)
  return _impl_.partition_names_.Mutable(index);
}
inline void SearchRequest::set_partition_names(int index, const std::string& value) {
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.partition_names)
}
inline void SearchRequest::set_partition_names(int index, std::string&& value) {
  _impl_.partition_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.partition_names)
}
inline void SearchRequest::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.SearchRequest.partition_names)
}
inline void SearchRequest::set_partition_names(int index, const char* value, size_t size) {
  _impl_.partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.SearchRequest.partition_names)
}
inline std::string* SearchRequest::_internal_add_partition_names() {
  return _impl_.partition_names_.Add();
}
inline void SearchRequest::add_partition_names(const std::string& value) {
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.SearchRequest.partition_names)
}
inline void SearchRequest::add_partition_names(std::string&& value) {
  _impl_.partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.SearchRequest.partition_names)
}
inline void SearchRequest::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.SearchRequest.partition_names)
}
inline void SearchRequest::add_partition_names(const char* value, size_t size) {
  _impl_.partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.SearchRequest.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchRequest::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.SearchRequest.partition_names)
  return _impl_.partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchRequest::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.SearchRequest.partition_names)
  return &_impl_.partition_names_;
}

// string dsl = 5;
inline void SearchRequest::clear_dsl() {
  _impl_.dsl_.ClearToEmpty();
}
inline const std::string& SearchRequest::dsl() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.dsl)
  return _internal_dsl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_dsl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dsl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.dsl)
}
inline std::string* SearchRequest::mutable_dsl() {
  std::string* _s = _internal_mutable_dsl();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.dsl)
  return _s;
}
inline const std::string& SearchRequest::_internal_dsl() const {
  return _impl_.dsl_.Get();
}
inline void SearchRequest::_internal_set_dsl(const std::string& value) {
  
  _impl_.dsl_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_dsl() {
  
  return _impl_.dsl_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchRequest::release_dsl() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchRequest.dsl)
  return _impl_.dsl_.Release();
}
inline void SearchRequest::set_allocated_dsl(std::string* dsl) {
  if (dsl != nullptr) {
    
  } else {
    
  }
  _impl_.dsl_.SetAllocated(dsl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dsl_.IsDefault()) {
    _impl_.dsl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchRequest.dsl)
}

// bytes placeholder_group = 6;
inline void SearchRequest::clear_placeholder_group() {
  _impl_.placeholder_group_.ClearToEmpty();
}
inline const std::string& SearchRequest::placeholder_group() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.placeholder_group)
  return _internal_placeholder_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_placeholder_group(ArgT0&& arg0, ArgT... args) {
 
 _impl_.placeholder_group_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.placeholder_group)
}
inline std::string* SearchRequest::mutable_placeholder_group() {
  std::string* _s = _internal_mutable_placeholder_group();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.placeholder_group)
  return _s;
}
inline const std::string& SearchRequest::_internal_placeholder_group() const {
  return _impl_.placeholder_group_.Get();
}
inline void SearchRequest::_internal_set_placeholder_group(const std::string& value) {
  
  _impl_.placeholder_group_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_placeholder_group() {
  
  return _impl_.placeholder_group_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchRequest::release_placeholder_group() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchRequest.placeholder_group)
  return _impl_.placeholder_group_.Release();
}
inline void SearchRequest::set_allocated_placeholder_group(std::string* placeholder_group) {
  if (placeholder_group != nullptr) {
    
  } else {
    
  }
  _impl_.placeholder_group_.SetAllocated(placeholder_group, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.placeholder_group_.IsDefault()) {
    _impl_.placeholder_group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchRequest.placeholder_group)
}

// .milvus.proto.common.DslType dsl_type = 7;
inline void SearchRequest::clear_dsl_type() {
  _impl_.dsl_type_ = 0;
}
inline ::milvus::proto::common::DslType SearchRequest::_internal_dsl_type() const {
  return static_cast< ::milvus::proto::common::DslType >(_impl_.dsl_type_);
}
inline ::milvus::proto::common::DslType SearchRequest::dsl_type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.dsl_type)
  return _internal_dsl_type();
}
inline void SearchRequest::_internal_set_dsl_type(::milvus::proto::common::DslType value) {
  
  _impl_.dsl_type_ = value;
}
inline void SearchRequest::set_dsl_type(::milvus::proto::common::DslType value) {
  _internal_set_dsl_type(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.dsl_type)
}

// repeated string output_fields = 8;
inline int SearchRequest::_internal_output_fields_size() const {
  return _impl_.output_fields_.size();
}
inline int SearchRequest::output_fields_size() const {
  return _internal_output_fields_size();
}
inline void SearchRequest::clear_output_fields() {
  _impl_.output_fields_.Clear();
}
inline std::string* SearchRequest::add_output_fields() {
  std::string* _s = _internal_add_output_fields();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.SearchRequest.output_fields)
  return _s;
}
inline const std::string& SearchRequest::_internal_output_fields(int index) const {
  return _impl_.output_fields_.Get(index);
}
inline const std::string& SearchRequest::output_fields(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.output_fields)
  return _internal_output_fields(index);
}
inline std::string* SearchRequest::mutable_output_fields(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.output_fields)
  return _impl_.output_fields_.Mutable(index);
}
inline void SearchRequest::set_output_fields(int index, const std::string& value) {
  _impl_.output_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.output_fields)
}
inline void SearchRequest::set_output_fields(int index, std::string&& value) {
  _impl_.output_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.output_fields)
}
inline void SearchRequest::set_output_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.output_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.SearchRequest.output_fields)
}
inline void SearchRequest::set_output_fields(int index, const char* value, size_t size) {
  _impl_.output_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.SearchRequest.output_fields)
}
inline std::string* SearchRequest::_internal_add_output_fields() {
  return _impl_.output_fields_.Add();
}
inline void SearchRequest::add_output_fields(const std::string& value) {
  _impl_.output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.SearchRequest.output_fields)
}
inline void SearchRequest::add_output_fields(std::string&& value) {
  _impl_.output_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.SearchRequest.output_fields)
}
inline void SearchRequest::add_output_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.SearchRequest.output_fields)
}
inline void SearchRequest::add_output_fields(const char* value, size_t size) {
  _impl_.output_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.SearchRequest.output_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchRequest::output_fields() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.SearchRequest.output_fields)
  return _impl_.output_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchRequest::mutable_output_fields() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.SearchRequest.output_fields)
  return &_impl_.output_fields_;
}

// repeated .milvus.proto.common.KeyValuePair search_params = 9;
inline int SearchRequest::_internal_search_params_size() const {
  return _impl_.search_params_.size();
}
inline int SearchRequest::search_params_size() const {
  return _internal_search_params_size();
}
inline ::milvus::proto::common::KeyValuePair* SearchRequest::mutable_search_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchRequest.search_params)
  return _impl_.search_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
SearchRequest::mutable_search_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.SearchRequest.search_params)
  return &_impl_.search_params_;
}
inline const ::milvus::proto::common::KeyValuePair& SearchRequest::_internal_search_params(int index) const {
  return _impl_.search_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& SearchRequest::search_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.search_params)
  return _internal_search_params(index);
}
inline ::milvus::proto::common::KeyValuePair* SearchRequest::_internal_add_search_params() {
  return _impl_.search_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* SearchRequest::add_search_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_search_params();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.SearchRequest.search_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
SearchRequest::search_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.SearchRequest.search_params)
  return _impl_.search_params_;
}

// uint64 travel_timestamp = 10;
inline void SearchRequest::clear_travel_timestamp() {
  _impl_.travel_timestamp_ = uint64_t{0u};
}
inline uint64_t SearchRequest::_internal_travel_timestamp() const {
  return _impl_.travel_timestamp_;
}
inline uint64_t SearchRequest::travel_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.travel_timestamp)
  return _internal_travel_timestamp();
}
inline void SearchRequest::_internal_set_travel_timestamp(uint64_t value) {
  
  _impl_.travel_timestamp_ = value;
}
inline void SearchRequest::set_travel_timestamp(uint64_t value) {
  _internal_set_travel_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.travel_timestamp)
}

// uint64 guarantee_timestamp = 11;
inline void SearchRequest::clear_guarantee_timestamp() {
  _impl_.guarantee_timestamp_ = uint64_t{0u};
}
inline uint64_t SearchRequest::_internal_guarantee_timestamp() const {
  return _impl_.guarantee_timestamp_;
}
inline uint64_t SearchRequest::guarantee_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.guarantee_timestamp)
  return _internal_guarantee_timestamp();
}
inline void SearchRequest::_internal_set_guarantee_timestamp(uint64_t value) {
  
  _impl_.guarantee_timestamp_ = value;
}
inline void SearchRequest::set_guarantee_timestamp(uint64_t value) {
  _internal_set_guarantee_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.guarantee_timestamp)
}

// int64 nq = 12;
inline void SearchRequest::clear_nq() {
  _impl_.nq_ = int64_t{0};
}
inline int64_t SearchRequest::_internal_nq() const {
  return _impl_.nq_;
}
inline int64_t SearchRequest::nq() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.nq)
  return _internal_nq();
}
inline void SearchRequest::_internal_set_nq(int64_t value) {
  
  _impl_.nq_ = value;
}
inline void SearchRequest::set_nq(int64_t value) {
  _internal_set_nq(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.nq)
}

// bool not_return_all_meta = 13;
inline void SearchRequest::clear_not_return_all_meta() {
  _impl_.not_return_all_meta_ = false;
}
inline bool SearchRequest::_internal_not_return_all_meta() const {
  return _impl_.not_return_all_meta_;
}
inline bool SearchRequest::not_return_all_meta() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.not_return_all_meta)
  return _internal_not_return_all_meta();
}
inline void SearchRequest::_internal_set_not_return_all_meta(bool value) {
  
  _impl_.not_return_all_meta_ = value;
}
inline void SearchRequest::set_not_return_all_meta(bool value) {
  _internal_set_not_return_all_meta(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.not_return_all_meta)
}

// .milvus.proto.common.ConsistencyLevel consistency_level = 14;
inline void SearchRequest::clear_consistency_level() {
  _impl_.consistency_level_ = 0;
}
inline ::milvus::proto::common::ConsistencyLevel SearchRequest::_internal_consistency_level() const {
  return static_cast< ::milvus::proto::common::ConsistencyLevel >(_impl_.consistency_level_);
}
inline ::milvus::proto::common::ConsistencyLevel SearchRequest::consistency_level() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.consistency_level)
  return _internal_consistency_level();
}
inline void SearchRequest::_internal_set_consistency_level(::milvus::proto::common::ConsistencyLevel value) {
  
  _impl_.consistency_level_ = value;
}
inline void SearchRequest::set_consistency_level(::milvus::proto::common::ConsistencyLevel value) {
  _internal_set_consistency_level(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.consistency_level)
}

// bool use_default_consistency = 15;
inline void SearchRequest::clear_use_default_consistency() {
  _impl_.use_default_consistency_ = false;
}
inline bool SearchRequest::_internal_use_default_consistency() const {
  return _impl_.use_default_consistency_;
}
inline bool SearchRequest::use_default_consistency() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchRequest.use_default_consistency)
  return _internal_use_default_consistency();
}
inline void SearchRequest::_internal_set_use_default_consistency(bool value) {
  
  _impl_.use_default_consistency_ = value;
}
inline void SearchRequest::set_use_default_consistency(bool value) {
  _internal_set_use_default_consistency(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchRequest.use_default_consistency)
}

// -------------------------------------------------------------------

// Hits

// repeated int64 IDs = 1;
inline int Hits::_internal_ids_size() const {
  return _impl_.ids_.size();
}
inline int Hits::ids_size() const {
  return _internal_ids_size();
}
inline void Hits::clear_ids() {
  _impl_.ids_.Clear();
}
inline int64_t Hits::_internal_ids(int index) const {
  return _impl_.ids_.Get(index);
}
inline int64_t Hits::ids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.Hits.IDs)
  return _internal_ids(index);
}
inline void Hits::set_ids(int index, int64_t value) {
  _impl_.ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.Hits.IDs)
}
inline void Hits::_internal_add_ids(int64_t value) {
  _impl_.ids_.Add(value);
}
inline void Hits::add_ids(int64_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.Hits.IDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Hits::_internal_ids() const {
  return _impl_.ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Hits::ids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.Hits.IDs)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Hits::_internal_mutable_ids() {
  return &_impl_.ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Hits::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.Hits.IDs)
  return _internal_mutable_ids();
}

// repeated bytes row_data = 2;
inline int Hits::_internal_row_data_size() const {
  return _impl_.row_data_.size();
}
inline int Hits::row_data_size() const {
  return _internal_row_data_size();
}
inline void Hits::clear_row_data() {
  _impl_.row_data_.Clear();
}
inline std::string* Hits::add_row_data() {
  std::string* _s = _internal_add_row_data();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.Hits.row_data)
  return _s;
}
inline const std::string& Hits::_internal_row_data(int index) const {
  return _impl_.row_data_.Get(index);
}
inline const std::string& Hits::row_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.Hits.row_data)
  return _internal_row_data(index);
}
inline std::string* Hits::mutable_row_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.Hits.row_data)
  return _impl_.row_data_.Mutable(index);
}
inline void Hits::set_row_data(int index, const std::string& value) {
  _impl_.row_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.Hits.row_data)
}
inline void Hits::set_row_data(int index, std::string&& value) {
  _impl_.row_data_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.Hits.row_data)
}
inline void Hits::set_row_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.row_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.Hits.row_data)
}
inline void Hits::set_row_data(int index, const void* value, size_t size) {
  _impl_.row_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.Hits.row_data)
}
inline std::string* Hits::_internal_add_row_data() {
  return _impl_.row_data_.Add();
}
inline void Hits::add_row_data(const std::string& value) {
  _impl_.row_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.Hits.row_data)
}
inline void Hits::add_row_data(std::string&& value) {
  _impl_.row_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.Hits.row_data)
}
inline void Hits::add_row_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.row_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.Hits.row_data)
}
inline void Hits::add_row_data(const void* value, size_t size) {
  _impl_.row_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.Hits.row_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Hits::row_data() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.Hits.row_data)
  return _impl_.row_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Hits::mutable_row_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.Hits.row_data)
  return &_impl_.row_data_;
}

// repeated float scores = 3;
inline int Hits::_internal_scores_size() const {
  return _impl_.scores_.size();
}
inline int Hits::scores_size() const {
  return _internal_scores_size();
}
inline void Hits::clear_scores() {
  _impl_.scores_.Clear();
}
inline float Hits::_internal_scores(int index) const {
  return _impl_.scores_.Get(index);
}
inline float Hits::scores(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.Hits.scores)
  return _internal_scores(index);
}
inline void Hits::set_scores(int index, float value) {
  _impl_.scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.Hits.scores)
}
inline void Hits::_internal_add_scores(float value) {
  _impl_.scores_.Add(value);
}
inline void Hits::add_scores(float value) {
  _internal_add_scores(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.Hits.scores)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Hits::_internal_scores() const {
  return _impl_.scores_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Hits::scores() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.Hits.scores)
  return _internal_scores();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Hits::_internal_mutable_scores() {
  return &_impl_.scores_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Hits::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.Hits.scores)
  return _internal_mutable_scores();
}

// -------------------------------------------------------------------

// SearchResults

// .milvus.proto.common.Status status = 1;
inline bool SearchResults::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool SearchResults::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& SearchResults::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& SearchResults::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchResults.status)
  return _internal_status();
}
inline void SearchResults::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.SearchResults.status)
}
inline ::milvus::proto::common::Status* SearchResults::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* SearchResults::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchResults.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* SearchResults::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* SearchResults::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchResults.status)
  return _msg;
}
inline void SearchResults::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchResults.status)
}

// .milvus.proto.schema.SearchResultData results = 2;
inline bool SearchResults::_internal_has_results() const {
  return this != internal_default_instance() && _impl_.results_ != nullptr;
}
inline bool SearchResults::has_results() const {
  return _internal_has_results();
}
inline const ::milvus::proto::schema::SearchResultData& SearchResults::_internal_results() const {
  const ::milvus::proto::schema::SearchResultData* p = _impl_.results_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::schema::SearchResultData&>(
      ::milvus::proto::schema::_SearchResultData_default_instance_);
}
inline const ::milvus::proto::schema::SearchResultData& SearchResults::results() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchResults.results)
  return _internal_results();
}
inline void SearchResults::unsafe_arena_set_allocated_results(
    ::milvus::proto::schema::SearchResultData* results) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.results_);
  }
  _impl_.results_ = results;
  if (results) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.SearchResults.results)
}
inline ::milvus::proto::schema::SearchResultData* SearchResults::release_results() {
  
  ::milvus::proto::schema::SearchResultData* temp = _impl_.results_;
  _impl_.results_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::schema::SearchResultData* SearchResults::unsafe_arena_release_results() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchResults.results)
  
  ::milvus::proto::schema::SearchResultData* temp = _impl_.results_;
  _impl_.results_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::SearchResultData* SearchResults::_internal_mutable_results() {
  
  if (_impl_.results_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::SearchResultData>(GetArenaForAllocation());
    _impl_.results_ = p;
  }
  return _impl_.results_;
}
inline ::milvus::proto::schema::SearchResultData* SearchResults::mutable_results() {
  ::milvus::proto::schema::SearchResultData* _msg = _internal_mutable_results();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchResults.results)
  return _msg;
}
inline void SearchResults::set_allocated_results(::milvus::proto::schema::SearchResultData* results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.results_);
  }
  if (results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results));
    if (message_arena != submessage_arena) {
      results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, results, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.results_ = results;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchResults.results)
}

// string collection_name = 3;
inline void SearchResults::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& SearchResults::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SearchResults.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResults::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SearchResults.collection_name)
}
inline std::string* SearchResults::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SearchResults.collection_name)
  return _s;
}
inline const std::string& SearchResults::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void SearchResults::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchResults::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchResults::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SearchResults.collection_name)
  return _impl_.collection_name_.Release();
}
inline void SearchResults::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SearchResults.collection_name)
}

// -------------------------------------------------------------------

// FlushRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool FlushRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool FlushRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& FlushRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& FlushRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.FlushRequest.base)
  return _internal_base();
}
inline void FlushRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.FlushRequest.base)
}
inline ::milvus::proto::common::MsgBase* FlushRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* FlushRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.FlushRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* FlushRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* FlushRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.FlushRequest.base)
  return _msg;
}
inline void FlushRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.FlushRequest.base)
}

// string db_name = 2;
inline void FlushRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& FlushRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.FlushRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlushRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.FlushRequest.db_name)
}
inline std::string* FlushRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.FlushRequest.db_name)
  return _s;
}
inline const std::string& FlushRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void FlushRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FlushRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FlushRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.FlushRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void FlushRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.FlushRequest.db_name)
}

// repeated string collection_names = 3;
inline int FlushRequest::_internal_collection_names_size() const {
  return _impl_.collection_names_.size();
}
inline int FlushRequest::collection_names_size() const {
  return _internal_collection_names_size();
}
inline void FlushRequest::clear_collection_names() {
  _impl_.collection_names_.Clear();
}
inline std::string* FlushRequest::add_collection_names() {
  std::string* _s = _internal_add_collection_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.FlushRequest.collection_names)
  return _s;
}
inline const std::string& FlushRequest::_internal_collection_names(int index) const {
  return _impl_.collection_names_.Get(index);
}
inline const std::string& FlushRequest::collection_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.FlushRequest.collection_names)
  return _internal_collection_names(index);
}
inline std::string* FlushRequest::mutable_collection_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.FlushRequest.collection_names)
  return _impl_.collection_names_.Mutable(index);
}
inline void FlushRequest::set_collection_names(int index, const std::string& value) {
  _impl_.collection_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.FlushRequest.collection_names)
}
inline void FlushRequest::set_collection_names(int index, std::string&& value) {
  _impl_.collection_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.FlushRequest.collection_names)
}
inline void FlushRequest::set_collection_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.collection_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.FlushRequest.collection_names)
}
inline void FlushRequest::set_collection_names(int index, const char* value, size_t size) {
  _impl_.collection_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.FlushRequest.collection_names)
}
inline std::string* FlushRequest::_internal_add_collection_names() {
  return _impl_.collection_names_.Add();
}
inline void FlushRequest::add_collection_names(const std::string& value) {
  _impl_.collection_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.FlushRequest.collection_names)
}
inline void FlushRequest::add_collection_names(std::string&& value) {
  _impl_.collection_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.FlushRequest.collection_names)
}
inline void FlushRequest::add_collection_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.collection_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.FlushRequest.collection_names)
}
inline void FlushRequest::add_collection_names(const char* value, size_t size) {
  _impl_.collection_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.FlushRequest.collection_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FlushRequest::collection_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.FlushRequest.collection_names)
  return _impl_.collection_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FlushRequest::mutable_collection_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.FlushRequest.collection_names)
  return &_impl_.collection_names_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FlushResponse

// .milvus.proto.common.Status status = 1;
inline bool FlushResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool FlushResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& FlushResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& FlushResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.FlushResponse.status)
  return _internal_status();
}
inline void FlushResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.FlushResponse.status)
}
inline ::milvus::proto::common::Status* FlushResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* FlushResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.FlushResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* FlushResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* FlushResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.FlushResponse.status)
  return _msg;
}
inline void FlushResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.FlushResponse.status)
}

// string db_name = 2;
inline void FlushResponse::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& FlushResponse::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.FlushResponse.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlushResponse::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.FlushResponse.db_name)
}
inline std::string* FlushResponse::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.FlushResponse.db_name)
  return _s;
}
inline const std::string& FlushResponse::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void FlushResponse::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FlushResponse::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FlushResponse::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.FlushResponse.db_name)
  return _impl_.db_name_.Release();
}
inline void FlushResponse::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.FlushResponse.db_name)
}

// map<string, .milvus.proto.schema.LongArray> coll_segIDs = 3;
inline int FlushResponse::_internal_coll_segids_size() const {
  return _impl_.coll_segids_.size();
}
inline int FlushResponse::coll_segids_size() const {
  return _internal_coll_segids_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >&
FlushResponse::_internal_coll_segids() const {
  return _impl_.coll_segids_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >&
FlushResponse::coll_segids() const {
  // @@protoc_insertion_point(field_map:milvus.proto.milvus.FlushResponse.coll_segIDs)
  return _internal_coll_segids();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >*
FlushResponse::_internal_mutable_coll_segids() {
  return _impl_.coll_segids_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >*
FlushResponse::mutable_coll_segids() {
  // @@protoc_insertion_point(field_mutable_map:milvus.proto.milvus.FlushResponse.coll_segIDs)
  return _internal_mutable_coll_segids();
}

// map<string, .milvus.proto.schema.LongArray> flush_coll_segIDs = 4;
inline int FlushResponse::_internal_flush_coll_segids_size() const {
  return _impl_.flush_coll_segids_.size();
}
inline int FlushResponse::flush_coll_segids_size() const {
  return _internal_flush_coll_segids_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >&
FlushResponse::_internal_flush_coll_segids() const {
  return _impl_.flush_coll_segids_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >&
FlushResponse::flush_coll_segids() const {
  // @@protoc_insertion_point(field_map:milvus.proto.milvus.FlushResponse.flush_coll_segIDs)
  return _internal_flush_coll_segids();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >*
FlushResponse::_internal_mutable_flush_coll_segids() {
  return _impl_.flush_coll_segids_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >*
FlushResponse::mutable_flush_coll_segids() {
  // @@protoc_insertion_point(field_mutable_map:milvus.proto.milvus.FlushResponse.flush_coll_segIDs)
  return _internal_mutable_flush_coll_segids();
}

// map<string, int64> coll_seal_times = 5;
inline int FlushResponse::_internal_coll_seal_times_size() const {
  return _impl_.coll_seal_times_.size();
}
inline int FlushResponse::coll_seal_times_size() const {
  return _internal_coll_seal_times_size();
}
inline void FlushResponse::clear_coll_seal_times() {
  _impl_.coll_seal_times_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
FlushResponse::_internal_coll_seal_times() const {
  return _impl_.coll_seal_times_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
FlushResponse::coll_seal_times() const {
  // @@protoc_insertion_point(field_map:milvus.proto.milvus.FlushResponse.coll_seal_times)
  return _internal_coll_seal_times();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
FlushResponse::_internal_mutable_coll_seal_times() {
  return _impl_.coll_seal_times_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
FlushResponse::mutable_coll_seal_times() {
  // @@protoc_insertion_point(field_mutable_map:milvus.proto.milvus.FlushResponse.coll_seal_times)
  return _internal_mutable_coll_seal_times();
}

// -------------------------------------------------------------------

// QueryRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool QueryRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool QueryRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& QueryRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& QueryRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.base)
  return _internal_base();
}
inline void QueryRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.QueryRequest.base)
}
inline ::milvus::proto::common::MsgBase* QueryRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* QueryRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.QueryRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* QueryRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* QueryRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryRequest.base)
  return _msg;
}
inline void QueryRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.QueryRequest.base)
}

// string db_name = 2;
inline void QueryRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& QueryRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.db_name)
}
inline std::string* QueryRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryRequest.db_name)
  return _s;
}
inline const std::string& QueryRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void QueryRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.QueryRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void QueryRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.QueryRequest.db_name)
}

// string collection_name = 3;
inline void QueryRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& QueryRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.collection_name)
}
inline std::string* QueryRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryRequest.collection_name)
  return _s;
}
inline const std::string& QueryRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void QueryRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.QueryRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void QueryRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.QueryRequest.collection_name)
}

// string expr = 4;
inline void QueryRequest::clear_expr() {
  _impl_.expr_.ClearToEmpty();
}
inline const std::string& QueryRequest::expr() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.expr)
  return _internal_expr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryRequest::set_expr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.expr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.expr)
}
inline std::string* QueryRequest::mutable_expr() {
  std::string* _s = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryRequest.expr)
  return _s;
}
inline const std::string& QueryRequest::_internal_expr() const {
  return _impl_.expr_.Get();
}
inline void QueryRequest::_internal_set_expr(const std::string& value) {
  
  _impl_.expr_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryRequest::_internal_mutable_expr() {
  
  return _impl_.expr_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryRequest::release_expr() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.QueryRequest.expr)
  return _impl_.expr_.Release();
}
inline void QueryRequest::set_allocated_expr(std::string* expr) {
  if (expr != nullptr) {
    
  } else {
    
  }
  _impl_.expr_.SetAllocated(expr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.expr_.IsDefault()) {
    _impl_.expr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.QueryRequest.expr)
}

// repeated string output_fields = 5;
inline int QueryRequest::_internal_output_fields_size() const {
  return _impl_.output_fields_.size();
}
inline int QueryRequest::output_fields_size() const {
  return _internal_output_fields_size();
}
inline void QueryRequest::clear_output_fields() {
  _impl_.output_fields_.Clear();
}
inline std::string* QueryRequest::add_output_fields() {
  std::string* _s = _internal_add_output_fields();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.QueryRequest.output_fields)
  return _s;
}
inline const std::string& QueryRequest::_internal_output_fields(int index) const {
  return _impl_.output_fields_.Get(index);
}
inline const std::string& QueryRequest::output_fields(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.output_fields)
  return _internal_output_fields(index);
}
inline std::string* QueryRequest::mutable_output_fields(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryRequest.output_fields)
  return _impl_.output_fields_.Mutable(index);
}
inline void QueryRequest::set_output_fields(int index, const std::string& value) {
  _impl_.output_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.output_fields)
}
inline void QueryRequest::set_output_fields(int index, std::string&& value) {
  _impl_.output_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.output_fields)
}
inline void QueryRequest::set_output_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.output_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.QueryRequest.output_fields)
}
inline void QueryRequest::set_output_fields(int index, const char* value, size_t size) {
  _impl_.output_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.QueryRequest.output_fields)
}
inline std::string* QueryRequest::_internal_add_output_fields() {
  return _impl_.output_fields_.Add();
}
inline void QueryRequest::add_output_fields(const std::string& value) {
  _impl_.output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.QueryRequest.output_fields)
}
inline void QueryRequest::add_output_fields(std::string&& value) {
  _impl_.output_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.QueryRequest.output_fields)
}
inline void QueryRequest::add_output_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.QueryRequest.output_fields)
}
inline void QueryRequest::add_output_fields(const char* value, size_t size) {
  _impl_.output_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.QueryRequest.output_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryRequest::output_fields() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.QueryRequest.output_fields)
  return _impl_.output_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryRequest::mutable_output_fields() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.QueryRequest.output_fields)
  return &_impl_.output_fields_;
}

// repeated string partition_names = 6;
inline int QueryRequest::_internal_partition_names_size() const {
  return _impl_.partition_names_.size();
}
inline int QueryRequest::partition_names_size() const {
  return _internal_partition_names_size();
}
inline void QueryRequest::clear_partition_names() {
  _impl_.partition_names_.Clear();
}
inline std::string* QueryRequest::add_partition_names() {
  std::string* _s = _internal_add_partition_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.QueryRequest.partition_names)
  return _s;
}
inline const std::string& QueryRequest::_internal_partition_names(int index) const {
  return _impl_.partition_names_.Get(index);
}
inline const std::string& QueryRequest::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.partition_names)
  return _internal_partition_names(index);
}
inline std::string* QueryRequest::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryRequest.partition_names)
  return _impl_.partition_names_.Mutable(index);
}
inline void QueryRequest::set_partition_names(int index, const std::string& value) {
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.partition_names)
}
inline void QueryRequest::set_partition_names(int index, std::string&& value) {
  _impl_.partition_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.partition_names)
}
inline void QueryRequest::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.QueryRequest.partition_names)
}
inline void QueryRequest::set_partition_names(int index, const char* value, size_t size) {
  _impl_.partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.QueryRequest.partition_names)
}
inline std::string* QueryRequest::_internal_add_partition_names() {
  return _impl_.partition_names_.Add();
}
inline void QueryRequest::add_partition_names(const std::string& value) {
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.QueryRequest.partition_names)
}
inline void QueryRequest::add_partition_names(std::string&& value) {
  _impl_.partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.QueryRequest.partition_names)
}
inline void QueryRequest::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.QueryRequest.partition_names)
}
inline void QueryRequest::add_partition_names(const char* value, size_t size) {
  _impl_.partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.QueryRequest.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryRequest::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.QueryRequest.partition_names)
  return _impl_.partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryRequest::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.QueryRequest.partition_names)
  return &_impl_.partition_names_;
}

// uint64 travel_timestamp = 7;
inline void QueryRequest::clear_travel_timestamp() {
  _impl_.travel_timestamp_ = uint64_t{0u};
}
inline uint64_t QueryRequest::_internal_travel_timestamp() const {
  return _impl_.travel_timestamp_;
}
inline uint64_t QueryRequest::travel_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.travel_timestamp)
  return _internal_travel_timestamp();
}
inline void QueryRequest::_internal_set_travel_timestamp(uint64_t value) {
  
  _impl_.travel_timestamp_ = value;
}
inline void QueryRequest::set_travel_timestamp(uint64_t value) {
  _internal_set_travel_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.travel_timestamp)
}

// uint64 guarantee_timestamp = 8;
inline void QueryRequest::clear_guarantee_timestamp() {
  _impl_.guarantee_timestamp_ = uint64_t{0u};
}
inline uint64_t QueryRequest::_internal_guarantee_timestamp() const {
  return _impl_.guarantee_timestamp_;
}
inline uint64_t QueryRequest::guarantee_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.guarantee_timestamp)
  return _internal_guarantee_timestamp();
}
inline void QueryRequest::_internal_set_guarantee_timestamp(uint64_t value) {
  
  _impl_.guarantee_timestamp_ = value;
}
inline void QueryRequest::set_guarantee_timestamp(uint64_t value) {
  _internal_set_guarantee_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.guarantee_timestamp)
}

// repeated .milvus.proto.common.KeyValuePair query_params = 9;
inline int QueryRequest::_internal_query_params_size() const {
  return _impl_.query_params_.size();
}
inline int QueryRequest::query_params_size() const {
  return _internal_query_params_size();
}
inline ::milvus::proto::common::KeyValuePair* QueryRequest::mutable_query_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryRequest.query_params)
  return _impl_.query_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
QueryRequest::mutable_query_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.QueryRequest.query_params)
  return &_impl_.query_params_;
}
inline const ::milvus::proto::common::KeyValuePair& QueryRequest::_internal_query_params(int index) const {
  return _impl_.query_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& QueryRequest::query_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.query_params)
  return _internal_query_params(index);
}
inline ::milvus::proto::common::KeyValuePair* QueryRequest::_internal_add_query_params() {
  return _impl_.query_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* QueryRequest::add_query_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_query_params();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.QueryRequest.query_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
QueryRequest::query_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.QueryRequest.query_params)
  return _impl_.query_params_;
}

// bool not_return_all_meta = 10;
inline void QueryRequest::clear_not_return_all_meta() {
  _impl_.not_return_all_meta_ = false;
}
inline bool QueryRequest::_internal_not_return_all_meta() const {
  return _impl_.not_return_all_meta_;
}
inline bool QueryRequest::not_return_all_meta() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.not_return_all_meta)
  return _internal_not_return_all_meta();
}
inline void QueryRequest::_internal_set_not_return_all_meta(bool value) {
  
  _impl_.not_return_all_meta_ = value;
}
inline void QueryRequest::set_not_return_all_meta(bool value) {
  _internal_set_not_return_all_meta(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.not_return_all_meta)
}

// .milvus.proto.common.ConsistencyLevel consistency_level = 11;
inline void QueryRequest::clear_consistency_level() {
  _impl_.consistency_level_ = 0;
}
inline ::milvus::proto::common::ConsistencyLevel QueryRequest::_internal_consistency_level() const {
  return static_cast< ::milvus::proto::common::ConsistencyLevel >(_impl_.consistency_level_);
}
inline ::milvus::proto::common::ConsistencyLevel QueryRequest::consistency_level() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.consistency_level)
  return _internal_consistency_level();
}
inline void QueryRequest::_internal_set_consistency_level(::milvus::proto::common::ConsistencyLevel value) {
  
  _impl_.consistency_level_ = value;
}
inline void QueryRequest::set_consistency_level(::milvus::proto::common::ConsistencyLevel value) {
  _internal_set_consistency_level(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.consistency_level)
}

// bool use_default_consistency = 12;
inline void QueryRequest::clear_use_default_consistency() {
  _impl_.use_default_consistency_ = false;
}
inline bool QueryRequest::_internal_use_default_consistency() const {
  return _impl_.use_default_consistency_;
}
inline bool QueryRequest::use_default_consistency() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryRequest.use_default_consistency)
  return _internal_use_default_consistency();
}
inline void QueryRequest::_internal_set_use_default_consistency(bool value) {
  
  _impl_.use_default_consistency_ = value;
}
inline void QueryRequest::set_use_default_consistency(bool value) {
  _internal_set_use_default_consistency(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryRequest.use_default_consistency)
}

// -------------------------------------------------------------------

// QueryResults

// .milvus.proto.common.Status status = 1;
inline bool QueryResults::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool QueryResults::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& QueryResults::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& QueryResults::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryResults.status)
  return _internal_status();
}
inline void QueryResults::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.QueryResults.status)
}
inline ::milvus::proto::common::Status* QueryResults::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* QueryResults::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.QueryResults.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* QueryResults::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* QueryResults::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryResults.status)
  return _msg;
}
inline void QueryResults::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.QueryResults.status)
}

// repeated .milvus.proto.schema.FieldData fields_data = 2;
inline int QueryResults::_internal_fields_data_size() const {
  return _impl_.fields_data_.size();
}
inline int QueryResults::fields_data_size() const {
  return _internal_fields_data_size();
}
inline ::milvus::proto::schema::FieldData* QueryResults::mutable_fields_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryResults.fields_data)
  return _impl_.fields_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
QueryResults::mutable_fields_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.QueryResults.fields_data)
  return &_impl_.fields_data_;
}
inline const ::milvus::proto::schema::FieldData& QueryResults::_internal_fields_data(int index) const {
  return _impl_.fields_data_.Get(index);
}
inline const ::milvus::proto::schema::FieldData& QueryResults::fields_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryResults.fields_data)
  return _internal_fields_data(index);
}
inline ::milvus::proto::schema::FieldData* QueryResults::_internal_add_fields_data() {
  return _impl_.fields_data_.Add();
}
inline ::milvus::proto::schema::FieldData* QueryResults::add_fields_data() {
  ::milvus::proto::schema::FieldData* _add = _internal_add_fields_data();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.QueryResults.fields_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
QueryResults::fields_data() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.QueryResults.fields_data)
  return _impl_.fields_data_;
}

// string collection_name = 3;
inline void QueryResults::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& QueryResults::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryResults.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryResults::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryResults.collection_name)
}
inline std::string* QueryResults::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryResults.collection_name)
  return _s;
}
inline const std::string& QueryResults::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void QueryResults::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryResults::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryResults::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.QueryResults.collection_name)
  return _impl_.collection_name_.Release();
}
inline void QueryResults::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.QueryResults.collection_name)
}

// repeated string output_fields = 4;
inline int QueryResults::_internal_output_fields_size() const {
  return _impl_.output_fields_.size();
}
inline int QueryResults::output_fields_size() const {
  return _internal_output_fields_size();
}
inline void QueryResults::clear_output_fields() {
  _impl_.output_fields_.Clear();
}
inline std::string* QueryResults::add_output_fields() {
  std::string* _s = _internal_add_output_fields();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.QueryResults.output_fields)
  return _s;
}
inline const std::string& QueryResults::_internal_output_fields(int index) const {
  return _impl_.output_fields_.Get(index);
}
inline const std::string& QueryResults::output_fields(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QueryResults.output_fields)
  return _internal_output_fields(index);
}
inline std::string* QueryResults::mutable_output_fields(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QueryResults.output_fields)
  return _impl_.output_fields_.Mutable(index);
}
inline void QueryResults::set_output_fields(int index, const std::string& value) {
  _impl_.output_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryResults.output_fields)
}
inline void QueryResults::set_output_fields(int index, std::string&& value) {
  _impl_.output_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QueryResults.output_fields)
}
inline void QueryResults::set_output_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.output_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.QueryResults.output_fields)
}
inline void QueryResults::set_output_fields(int index, const char* value, size_t size) {
  _impl_.output_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.QueryResults.output_fields)
}
inline std::string* QueryResults::_internal_add_output_fields() {
  return _impl_.output_fields_.Add();
}
inline void QueryResults::add_output_fields(const std::string& value) {
  _impl_.output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.QueryResults.output_fields)
}
inline void QueryResults::add_output_fields(std::string&& value) {
  _impl_.output_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.QueryResults.output_fields)
}
inline void QueryResults::add_output_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.QueryResults.output_fields)
}
inline void QueryResults::add_output_fields(const char* value, size_t size) {
  _impl_.output_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.QueryResults.output_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryResults::output_fields() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.QueryResults.output_fields)
  return _impl_.output_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryResults::mutable_output_fields() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.QueryResults.output_fields)
  return &_impl_.output_fields_;
}

// -------------------------------------------------------------------

// VectorIDs

// string collection_name = 1;
inline void VectorIDs::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& VectorIDs::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.VectorIDs.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VectorIDs::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.VectorIDs.collection_name)
}
inline std::string* VectorIDs::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.VectorIDs.collection_name)
  return _s;
}
inline const std::string& VectorIDs::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void VectorIDs::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* VectorIDs::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* VectorIDs::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.VectorIDs.collection_name)
  return _impl_.collection_name_.Release();
}
inline void VectorIDs::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.VectorIDs.collection_name)
}

// string field_name = 2;
inline void VectorIDs::clear_field_name() {
  _impl_.field_name_.ClearToEmpty();
}
inline const std::string& VectorIDs::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.VectorIDs.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VectorIDs::set_field_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.VectorIDs.field_name)
}
inline std::string* VectorIDs::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.VectorIDs.field_name)
  return _s;
}
inline const std::string& VectorIDs::_internal_field_name() const {
  return _impl_.field_name_.Get();
}
inline void VectorIDs::_internal_set_field_name(const std::string& value) {
  
  _impl_.field_name_.Set(value, GetArenaForAllocation());
}
inline std::string* VectorIDs::_internal_mutable_field_name() {
  
  return _impl_.field_name_.Mutable(GetArenaForAllocation());
}
inline std::string* VectorIDs::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.VectorIDs.field_name)
  return _impl_.field_name_.Release();
}
inline void VectorIDs::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  _impl_.field_name_.SetAllocated(field_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_name_.IsDefault()) {
    _impl_.field_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.VectorIDs.field_name)
}

// .milvus.proto.schema.IDs id_array = 3;
inline bool VectorIDs::_internal_has_id_array() const {
  return this != internal_default_instance() && _impl_.id_array_ != nullptr;
}
inline bool VectorIDs::has_id_array() const {
  return _internal_has_id_array();
}
inline const ::milvus::proto::schema::IDs& VectorIDs::_internal_id_array() const {
  const ::milvus::proto::schema::IDs* p = _impl_.id_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::schema::IDs&>(
      ::milvus::proto::schema::_IDs_default_instance_);
}
inline const ::milvus::proto::schema::IDs& VectorIDs::id_array() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.VectorIDs.id_array)
  return _internal_id_array();
}
inline void VectorIDs::unsafe_arena_set_allocated_id_array(
    ::milvus::proto::schema::IDs* id_array) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_array_);
  }
  _impl_.id_array_ = id_array;
  if (id_array) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.VectorIDs.id_array)
}
inline ::milvus::proto::schema::IDs* VectorIDs::release_id_array() {
  
  ::milvus::proto::schema::IDs* temp = _impl_.id_array_;
  _impl_.id_array_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::schema::IDs* VectorIDs::unsafe_arena_release_id_array() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.VectorIDs.id_array)
  
  ::milvus::proto::schema::IDs* temp = _impl_.id_array_;
  _impl_.id_array_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::IDs* VectorIDs::_internal_mutable_id_array() {
  
  if (_impl_.id_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::IDs>(GetArenaForAllocation());
    _impl_.id_array_ = p;
  }
  return _impl_.id_array_;
}
inline ::milvus::proto::schema::IDs* VectorIDs::mutable_id_array() {
  ::milvus::proto::schema::IDs* _msg = _internal_mutable_id_array();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.VectorIDs.id_array)
  return _msg;
}
inline void VectorIDs::set_allocated_id_array(::milvus::proto::schema::IDs* id_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_array_);
  }
  if (id_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_array));
    if (message_arena != submessage_arena) {
      id_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_array, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.id_array_ = id_array;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.VectorIDs.id_array)
}

// repeated string partition_names = 4;
inline int VectorIDs::_internal_partition_names_size() const {
  return _impl_.partition_names_.size();
}
inline int VectorIDs::partition_names_size() const {
  return _internal_partition_names_size();
}
inline void VectorIDs::clear_partition_names() {
  _impl_.partition_names_.Clear();
}
inline std::string* VectorIDs::add_partition_names() {
  std::string* _s = _internal_add_partition_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.VectorIDs.partition_names)
  return _s;
}
inline const std::string& VectorIDs::_internal_partition_names(int index) const {
  return _impl_.partition_names_.Get(index);
}
inline const std::string& VectorIDs::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.VectorIDs.partition_names)
  return _internal_partition_names(index);
}
inline std::string* VectorIDs::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.VectorIDs.partition_names)
  return _impl_.partition_names_.Mutable(index);
}
inline void VectorIDs::set_partition_names(int index, const std::string& value) {
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.VectorIDs.partition_names)
}
inline void VectorIDs::set_partition_names(int index, std::string&& value) {
  _impl_.partition_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.VectorIDs.partition_names)
}
inline void VectorIDs::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.VectorIDs.partition_names)
}
inline void VectorIDs::set_partition_names(int index, const char* value, size_t size) {
  _impl_.partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.VectorIDs.partition_names)
}
inline std::string* VectorIDs::_internal_add_partition_names() {
  return _impl_.partition_names_.Add();
}
inline void VectorIDs::add_partition_names(const std::string& value) {
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.VectorIDs.partition_names)
}
inline void VectorIDs::add_partition_names(std::string&& value) {
  _impl_.partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.VectorIDs.partition_names)
}
inline void VectorIDs::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.VectorIDs.partition_names)
}
inline void VectorIDs::add_partition_names(const char* value, size_t size) {
  _impl_.partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.VectorIDs.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VectorIDs::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.VectorIDs.partition_names)
  return _impl_.partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VectorIDs::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.VectorIDs.partition_names)
  return &_impl_.partition_names_;
}

// -------------------------------------------------------------------

// VectorsArray

// .milvus.proto.milvus.VectorIDs id_array = 1;
inline bool VectorsArray::_internal_has_id_array() const {
  return array_case() == kIdArray;
}
inline bool VectorsArray::has_id_array() const {
  return _internal_has_id_array();
}
inline void VectorsArray::set_has_id_array() {
  _impl_._oneof_case_[0] = kIdArray;
}
inline void VectorsArray::clear_id_array() {
  if (_internal_has_id_array()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.array_.id_array_;
    }
    clear_has_array();
  }
}
inline ::milvus::proto::milvus::VectorIDs* VectorsArray::release_id_array() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.VectorsArray.id_array)
  if (_internal_has_id_array()) {
    clear_has_array();
    ::milvus::proto::milvus::VectorIDs* temp = _impl_.array_.id_array_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.array_.id_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::milvus::proto::milvus::VectorIDs& VectorsArray::_internal_id_array() const {
  return _internal_has_id_array()
      ? *_impl_.array_.id_array_
      : reinterpret_cast< ::milvus::proto::milvus::VectorIDs&>(::milvus::proto::milvus::_VectorIDs_default_instance_);
}
inline const ::milvus::proto::milvus::VectorIDs& VectorsArray::id_array() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.VectorsArray.id_array)
  return _internal_id_array();
}
inline ::milvus::proto::milvus::VectorIDs* VectorsArray::unsafe_arena_release_id_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.milvus.VectorsArray.id_array)
  if (_internal_has_id_array()) {
    clear_has_array();
    ::milvus::proto::milvus::VectorIDs* temp = _impl_.array_.id_array_;
    _impl_.array_.id_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorsArray::unsafe_arena_set_allocated_id_array(::milvus::proto::milvus::VectorIDs* id_array) {
  clear_array();
  if (id_array) {
    set_has_id_array();
    _impl_.array_.id_array_ = id_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.VectorsArray.id_array)
}
inline ::milvus::proto::milvus::VectorIDs* VectorsArray::_internal_mutable_id_array() {
  if (!_internal_has_id_array()) {
    clear_array();
    set_has_id_array();
    _impl_.array_.id_array_ = CreateMaybeMessage< ::milvus::proto::milvus::VectorIDs >(GetArenaForAllocation());
  }
  return _impl_.array_.id_array_;
}
inline ::milvus::proto::milvus::VectorIDs* VectorsArray::mutable_id_array() {
  ::milvus::proto::milvus::VectorIDs* _msg = _internal_mutable_id_array();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.VectorsArray.id_array)
  return _msg;
}

// .milvus.proto.schema.VectorField data_array = 2;
inline bool VectorsArray::_internal_has_data_array() const {
  return array_case() == kDataArray;
}
inline bool VectorsArray::has_data_array() const {
  return _internal_has_data_array();
}
inline void VectorsArray::set_has_data_array() {
  _impl_._oneof_case_[0] = kDataArray;
}
inline ::milvus::proto::schema::VectorField* VectorsArray::release_data_array() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.VectorsArray.data_array)
  if (_internal_has_data_array()) {
    clear_has_array();
    ::milvus::proto::schema::VectorField* temp = _impl_.array_.data_array_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.array_.data_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::milvus::proto::schema::VectorField& VectorsArray::_internal_data_array() const {
  return _internal_has_data_array()
      ? *_impl_.array_.data_array_
      : reinterpret_cast< ::milvus::proto::schema::VectorField&>(::milvus::proto::schema::_VectorField_default_instance_);
}
inline const ::milvus::proto::schema::VectorField& VectorsArray::data_array() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.VectorsArray.data_array)
  return _internal_data_array();
}
inline ::milvus::proto::schema::VectorField* VectorsArray::unsafe_arena_release_data_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.milvus.VectorsArray.data_array)
  if (_internal_has_data_array()) {
    clear_has_array();
    ::milvus::proto::schema::VectorField* temp = _impl_.array_.data_array_;
    _impl_.array_.data_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorsArray::unsafe_arena_set_allocated_data_array(::milvus::proto::schema::VectorField* data_array) {
  clear_array();
  if (data_array) {
    set_has_data_array();
    _impl_.array_.data_array_ = data_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.VectorsArray.data_array)
}
inline ::milvus::proto::schema::VectorField* VectorsArray::_internal_mutable_data_array() {
  if (!_internal_has_data_array()) {
    clear_array();
    set_has_data_array();
    _impl_.array_.data_array_ = CreateMaybeMessage< ::milvus::proto::schema::VectorField >(GetArenaForAllocation());
  }
  return _impl_.array_.data_array_;
}
inline ::milvus::proto::schema::VectorField* VectorsArray::mutable_data_array() {
  ::milvus::proto::schema::VectorField* _msg = _internal_mutable_data_array();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.VectorsArray.data_array)
  return _msg;
}

inline bool VectorsArray::has_array() const {
  return array_case() != ARRAY_NOT_SET;
}
inline void VectorsArray::clear_has_array() {
  _impl_._oneof_case_[0] = ARRAY_NOT_SET;
}
inline VectorsArray::ArrayCase VectorsArray::array_case() const {
  return VectorsArray::ArrayCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CalcDistanceRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CalcDistanceRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool CalcDistanceRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CalcDistanceRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CalcDistanceRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CalcDistanceRequest.base)
  return _internal_base();
}
inline void CalcDistanceRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CalcDistanceRequest.base)
}
inline ::milvus::proto::common::MsgBase* CalcDistanceRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* CalcDistanceRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CalcDistanceRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CalcDistanceRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* CalcDistanceRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CalcDistanceRequest.base)
  return _msg;
}
inline void CalcDistanceRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CalcDistanceRequest.base)
}

// .milvus.proto.milvus.VectorsArray op_left = 2;
inline bool CalcDistanceRequest::_internal_has_op_left() const {
  return this != internal_default_instance() && _impl_.op_left_ != nullptr;
}
inline bool CalcDistanceRequest::has_op_left() const {
  return _internal_has_op_left();
}
inline void CalcDistanceRequest::clear_op_left() {
  if (GetArenaForAllocation() == nullptr && _impl_.op_left_ != nullptr) {
    delete _impl_.op_left_;
  }
  _impl_.op_left_ = nullptr;
}
inline const ::milvus::proto::milvus::VectorsArray& CalcDistanceRequest::_internal_op_left() const {
  const ::milvus::proto::milvus::VectorsArray* p = _impl_.op_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::VectorsArray&>(
      ::milvus::proto::milvus::_VectorsArray_default_instance_);
}
inline const ::milvus::proto::milvus::VectorsArray& CalcDistanceRequest::op_left() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CalcDistanceRequest.op_left)
  return _internal_op_left();
}
inline void CalcDistanceRequest::unsafe_arena_set_allocated_op_left(
    ::milvus::proto::milvus::VectorsArray* op_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.op_left_);
  }
  _impl_.op_left_ = op_left;
  if (op_left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CalcDistanceRequest.op_left)
}
inline ::milvus::proto::milvus::VectorsArray* CalcDistanceRequest::release_op_left() {
  
  ::milvus::proto::milvus::VectorsArray* temp = _impl_.op_left_;
  _impl_.op_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::VectorsArray* CalcDistanceRequest::unsafe_arena_release_op_left() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CalcDistanceRequest.op_left)
  
  ::milvus::proto::milvus::VectorsArray* temp = _impl_.op_left_;
  _impl_.op_left_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::VectorsArray* CalcDistanceRequest::_internal_mutable_op_left() {
  
  if (_impl_.op_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::VectorsArray>(GetArenaForAllocation());
    _impl_.op_left_ = p;
  }
  return _impl_.op_left_;
}
inline ::milvus::proto::milvus::VectorsArray* CalcDistanceRequest::mutable_op_left() {
  ::milvus::proto::milvus::VectorsArray* _msg = _internal_mutable_op_left();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CalcDistanceRequest.op_left)
  return _msg;
}
inline void CalcDistanceRequest::set_allocated_op_left(::milvus::proto::milvus::VectorsArray* op_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.op_left_;
  }
  if (op_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(op_left);
    if (message_arena != submessage_arena) {
      op_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_left, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.op_left_ = op_left;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CalcDistanceRequest.op_left)
}

// .milvus.proto.milvus.VectorsArray op_right = 3;
inline bool CalcDistanceRequest::_internal_has_op_right() const {
  return this != internal_default_instance() && _impl_.op_right_ != nullptr;
}
inline bool CalcDistanceRequest::has_op_right() const {
  return _internal_has_op_right();
}
inline void CalcDistanceRequest::clear_op_right() {
  if (GetArenaForAllocation() == nullptr && _impl_.op_right_ != nullptr) {
    delete _impl_.op_right_;
  }
  _impl_.op_right_ = nullptr;
}
inline const ::milvus::proto::milvus::VectorsArray& CalcDistanceRequest::_internal_op_right() const {
  const ::milvus::proto::milvus::VectorsArray* p = _impl_.op_right_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::VectorsArray&>(
      ::milvus::proto::milvus::_VectorsArray_default_instance_);
}
inline const ::milvus::proto::milvus::VectorsArray& CalcDistanceRequest::op_right() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CalcDistanceRequest.op_right)
  return _internal_op_right();
}
inline void CalcDistanceRequest::unsafe_arena_set_allocated_op_right(
    ::milvus::proto::milvus::VectorsArray* op_right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.op_right_);
  }
  _impl_.op_right_ = op_right;
  if (op_right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CalcDistanceRequest.op_right)
}
inline ::milvus::proto::milvus::VectorsArray* CalcDistanceRequest::release_op_right() {
  
  ::milvus::proto::milvus::VectorsArray* temp = _impl_.op_right_;
  _impl_.op_right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::VectorsArray* CalcDistanceRequest::unsafe_arena_release_op_right() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CalcDistanceRequest.op_right)
  
  ::milvus::proto::milvus::VectorsArray* temp = _impl_.op_right_;
  _impl_.op_right_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::VectorsArray* CalcDistanceRequest::_internal_mutable_op_right() {
  
  if (_impl_.op_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::VectorsArray>(GetArenaForAllocation());
    _impl_.op_right_ = p;
  }
  return _impl_.op_right_;
}
inline ::milvus::proto::milvus::VectorsArray* CalcDistanceRequest::mutable_op_right() {
  ::milvus::proto::milvus::VectorsArray* _msg = _internal_mutable_op_right();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CalcDistanceRequest.op_right)
  return _msg;
}
inline void CalcDistanceRequest::set_allocated_op_right(::milvus::proto::milvus::VectorsArray* op_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.op_right_;
  }
  if (op_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(op_right);
    if (message_arena != submessage_arena) {
      op_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_right, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.op_right_ = op_right;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CalcDistanceRequest.op_right)
}

// repeated .milvus.proto.common.KeyValuePair params = 4;
inline int CalcDistanceRequest::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int CalcDistanceRequest::params_size() const {
  return _internal_params_size();
}
inline ::milvus::proto::common::KeyValuePair* CalcDistanceRequest::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CalcDistanceRequest.params)
  return _impl_.params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
CalcDistanceRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.CalcDistanceRequest.params)
  return &_impl_.params_;
}
inline const ::milvus::proto::common::KeyValuePair& CalcDistanceRequest::_internal_params(int index) const {
  return _impl_.params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& CalcDistanceRequest::params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CalcDistanceRequest.params)
  return _internal_params(index);
}
inline ::milvus::proto::common::KeyValuePair* CalcDistanceRequest::_internal_add_params() {
  return _impl_.params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* CalcDistanceRequest::add_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.CalcDistanceRequest.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
CalcDistanceRequest::params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.CalcDistanceRequest.params)
  return _impl_.params_;
}

// -------------------------------------------------------------------

// CalcDistanceResults

// .milvus.proto.common.Status status = 1;
inline bool CalcDistanceResults::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool CalcDistanceResults::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& CalcDistanceResults::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& CalcDistanceResults::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CalcDistanceResults.status)
  return _internal_status();
}
inline void CalcDistanceResults::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CalcDistanceResults.status)
}
inline ::milvus::proto::common::Status* CalcDistanceResults::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* CalcDistanceResults::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CalcDistanceResults.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* CalcDistanceResults::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* CalcDistanceResults::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CalcDistanceResults.status)
  return _msg;
}
inline void CalcDistanceResults::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CalcDistanceResults.status)
}

// .milvus.proto.schema.IntArray int_dist = 2;
inline bool CalcDistanceResults::_internal_has_int_dist() const {
  return array_case() == kIntDist;
}
inline bool CalcDistanceResults::has_int_dist() const {
  return _internal_has_int_dist();
}
inline void CalcDistanceResults::set_has_int_dist() {
  _impl_._oneof_case_[0] = kIntDist;
}
inline ::milvus::proto::schema::IntArray* CalcDistanceResults::release_int_dist() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CalcDistanceResults.int_dist)
  if (_internal_has_int_dist()) {
    clear_has_array();
    ::milvus::proto::schema::IntArray* temp = _impl_.array_.int_dist_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.array_.int_dist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::milvus::proto::schema::IntArray& CalcDistanceResults::_internal_int_dist() const {
  return _internal_has_int_dist()
      ? *_impl_.array_.int_dist_
      : reinterpret_cast< ::milvus::proto::schema::IntArray&>(::milvus::proto::schema::_IntArray_default_instance_);
}
inline const ::milvus::proto::schema::IntArray& CalcDistanceResults::int_dist() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CalcDistanceResults.int_dist)
  return _internal_int_dist();
}
inline ::milvus::proto::schema::IntArray* CalcDistanceResults::unsafe_arena_release_int_dist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.milvus.CalcDistanceResults.int_dist)
  if (_internal_has_int_dist()) {
    clear_has_array();
    ::milvus::proto::schema::IntArray* temp = _impl_.array_.int_dist_;
    _impl_.array_.int_dist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CalcDistanceResults::unsafe_arena_set_allocated_int_dist(::milvus::proto::schema::IntArray* int_dist) {
  clear_array();
  if (int_dist) {
    set_has_int_dist();
    _impl_.array_.int_dist_ = int_dist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CalcDistanceResults.int_dist)
}
inline ::milvus::proto::schema::IntArray* CalcDistanceResults::_internal_mutable_int_dist() {
  if (!_internal_has_int_dist()) {
    clear_array();
    set_has_int_dist();
    _impl_.array_.int_dist_ = CreateMaybeMessage< ::milvus::proto::schema::IntArray >(GetArenaForAllocation());
  }
  return _impl_.array_.int_dist_;
}
inline ::milvus::proto::schema::IntArray* CalcDistanceResults::mutable_int_dist() {
  ::milvus::proto::schema::IntArray* _msg = _internal_mutable_int_dist();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CalcDistanceResults.int_dist)
  return _msg;
}

// .milvus.proto.schema.FloatArray float_dist = 3;
inline bool CalcDistanceResults::_internal_has_float_dist() const {
  return array_case() == kFloatDist;
}
inline bool CalcDistanceResults::has_float_dist() const {
  return _internal_has_float_dist();
}
inline void CalcDistanceResults::set_has_float_dist() {
  _impl_._oneof_case_[0] = kFloatDist;
}
inline ::milvus::proto::schema::FloatArray* CalcDistanceResults::release_float_dist() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CalcDistanceResults.float_dist)
  if (_internal_has_float_dist()) {
    clear_has_array();
    ::milvus::proto::schema::FloatArray* temp = _impl_.array_.float_dist_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.array_.float_dist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::milvus::proto::schema::FloatArray& CalcDistanceResults::_internal_float_dist() const {
  return _internal_has_float_dist()
      ? *_impl_.array_.float_dist_
      : reinterpret_cast< ::milvus::proto::schema::FloatArray&>(::milvus::proto::schema::_FloatArray_default_instance_);
}
inline const ::milvus::proto::schema::FloatArray& CalcDistanceResults::float_dist() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CalcDistanceResults.float_dist)
  return _internal_float_dist();
}
inline ::milvus::proto::schema::FloatArray* CalcDistanceResults::unsafe_arena_release_float_dist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.milvus.CalcDistanceResults.float_dist)
  if (_internal_has_float_dist()) {
    clear_has_array();
    ::milvus::proto::schema::FloatArray* temp = _impl_.array_.float_dist_;
    _impl_.array_.float_dist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CalcDistanceResults::unsafe_arena_set_allocated_float_dist(::milvus::proto::schema::FloatArray* float_dist) {
  clear_array();
  if (float_dist) {
    set_has_float_dist();
    _impl_.array_.float_dist_ = float_dist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CalcDistanceResults.float_dist)
}
inline ::milvus::proto::schema::FloatArray* CalcDistanceResults::_internal_mutable_float_dist() {
  if (!_internal_has_float_dist()) {
    clear_array();
    set_has_float_dist();
    _impl_.array_.float_dist_ = CreateMaybeMessage< ::milvus::proto::schema::FloatArray >(GetArenaForAllocation());
  }
  return _impl_.array_.float_dist_;
}
inline ::milvus::proto::schema::FloatArray* CalcDistanceResults::mutable_float_dist() {
  ::milvus::proto::schema::FloatArray* _msg = _internal_mutable_float_dist();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CalcDistanceResults.float_dist)
  return _msg;
}

inline bool CalcDistanceResults::has_array() const {
  return array_case() != ARRAY_NOT_SET;
}
inline void CalcDistanceResults::clear_has_array() {
  _impl_._oneof_case_[0] = ARRAY_NOT_SET;
}
inline CalcDistanceResults::ArrayCase CalcDistanceResults::array_case() const {
  return CalcDistanceResults::ArrayCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FlushAllRequest

// -------------------------------------------------------------------

// FlushAllResponse

// .milvus.proto.common.Status status = 1;
inline bool FlushAllResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool FlushAllResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& FlushAllResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& FlushAllResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.FlushAllResponse.status)
  return _internal_status();
}
inline void FlushAllResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.FlushAllResponse.status)
}
inline ::milvus::proto::common::Status* FlushAllResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* FlushAllResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.FlushAllResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* FlushAllResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* FlushAllResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.FlushAllResponse.status)
  return _msg;
}
inline void FlushAllResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.FlushAllResponse.status)
}

// uint64 flush_all_ts = 2;
inline void FlushAllResponse::clear_flush_all_ts() {
  _impl_.flush_all_ts_ = uint64_t{0u};
}
inline uint64_t FlushAllResponse::_internal_flush_all_ts() const {
  return _impl_.flush_all_ts_;
}
inline uint64_t FlushAllResponse::flush_all_ts() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.FlushAllResponse.flush_all_ts)
  return _internal_flush_all_ts();
}
inline void FlushAllResponse::_internal_set_flush_all_ts(uint64_t value) {
  
  _impl_.flush_all_ts_ = value;
}
inline void FlushAllResponse::set_flush_all_ts(uint64_t value) {
  _internal_set_flush_all_ts(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.FlushAllResponse.flush_all_ts)
}

// -------------------------------------------------------------------

// PersistentSegmentInfo

// int64 segmentID = 1;
inline void PersistentSegmentInfo::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t PersistentSegmentInfo::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t PersistentSegmentInfo::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PersistentSegmentInfo.segmentID)
  return _internal_segmentid();
}
inline void PersistentSegmentInfo::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void PersistentSegmentInfo::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PersistentSegmentInfo.segmentID)
}

// int64 collectionID = 2;
inline void PersistentSegmentInfo::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t PersistentSegmentInfo::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t PersistentSegmentInfo::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PersistentSegmentInfo.collectionID)
  return _internal_collectionid();
}
inline void PersistentSegmentInfo::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void PersistentSegmentInfo::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PersistentSegmentInfo.collectionID)
}

// int64 partitionID = 3;
inline void PersistentSegmentInfo::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t PersistentSegmentInfo::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t PersistentSegmentInfo::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PersistentSegmentInfo.partitionID)
  return _internal_partitionid();
}
inline void PersistentSegmentInfo::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void PersistentSegmentInfo::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PersistentSegmentInfo.partitionID)
}

// int64 num_rows = 4;
inline void PersistentSegmentInfo::clear_num_rows() {
  _impl_.num_rows_ = int64_t{0};
}
inline int64_t PersistentSegmentInfo::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline int64_t PersistentSegmentInfo::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PersistentSegmentInfo.num_rows)
  return _internal_num_rows();
}
inline void PersistentSegmentInfo::_internal_set_num_rows(int64_t value) {
  
  _impl_.num_rows_ = value;
}
inline void PersistentSegmentInfo::set_num_rows(int64_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PersistentSegmentInfo.num_rows)
}

// .milvus.proto.common.SegmentState state = 5;
inline void PersistentSegmentInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::SegmentState PersistentSegmentInfo::_internal_state() const {
  return static_cast< ::milvus::proto::common::SegmentState >(_impl_.state_);
}
inline ::milvus::proto::common::SegmentState PersistentSegmentInfo::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PersistentSegmentInfo.state)
  return _internal_state();
}
inline void PersistentSegmentInfo::_internal_set_state(::milvus::proto::common::SegmentState value) {
  
  _impl_.state_ = value;
}
inline void PersistentSegmentInfo::set_state(::milvus::proto::common::SegmentState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PersistentSegmentInfo.state)
}

// -------------------------------------------------------------------

// GetPersistentSegmentInfoRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetPersistentSegmentInfoRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetPersistentSegmentInfoRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetPersistentSegmentInfoRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetPersistentSegmentInfoRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPersistentSegmentInfoRequest.base)
  return _internal_base();
}
inline void GetPersistentSegmentInfoRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetPersistentSegmentInfoRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetPersistentSegmentInfoRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetPersistentSegmentInfoRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPersistentSegmentInfoRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetPersistentSegmentInfoRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetPersistentSegmentInfoRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPersistentSegmentInfoRequest.base)
  return _msg;
}
inline void GetPersistentSegmentInfoRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPersistentSegmentInfoRequest.base)
}

// string dbName = 2;
inline void GetPersistentSegmentInfoRequest::clear_dbname() {
  _impl_.dbname_.ClearToEmpty();
}
inline const std::string& GetPersistentSegmentInfoRequest::dbname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName)
  return _internal_dbname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPersistentSegmentInfoRequest::set_dbname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dbname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName)
}
inline std::string* GetPersistentSegmentInfoRequest::mutable_dbname() {
  std::string* _s = _internal_mutable_dbname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName)
  return _s;
}
inline const std::string& GetPersistentSegmentInfoRequest::_internal_dbname() const {
  return _impl_.dbname_.Get();
}
inline void GetPersistentSegmentInfoRequest::_internal_set_dbname(const std::string& value) {
  
  _impl_.dbname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPersistentSegmentInfoRequest::_internal_mutable_dbname() {
  
  return _impl_.dbname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPersistentSegmentInfoRequest::release_dbname() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName)
  return _impl_.dbname_.Release();
}
inline void GetPersistentSegmentInfoRequest::set_allocated_dbname(std::string* dbname) {
  if (dbname != nullptr) {
    
  } else {
    
  }
  _impl_.dbname_.SetAllocated(dbname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dbname_.IsDefault()) {
    _impl_.dbname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName)
}

// string collectionName = 3;
inline void GetPersistentSegmentInfoRequest::clear_collectionname() {
  _impl_.collectionname_.ClearToEmpty();
}
inline const std::string& GetPersistentSegmentInfoRequest::collectionname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName)
  return _internal_collectionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPersistentSegmentInfoRequest::set_collectionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collectionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName)
}
inline std::string* GetPersistentSegmentInfoRequest::mutable_collectionname() {
  std::string* _s = _internal_mutable_collectionname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName)
  return _s;
}
inline const std::string& GetPersistentSegmentInfoRequest::_internal_collectionname() const {
  return _impl_.collectionname_.Get();
}
inline void GetPersistentSegmentInfoRequest::_internal_set_collectionname(const std::string& value) {
  
  _impl_.collectionname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPersistentSegmentInfoRequest::_internal_mutable_collectionname() {
  
  return _impl_.collectionname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPersistentSegmentInfoRequest::release_collectionname() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName)
  return _impl_.collectionname_.Release();
}
inline void GetPersistentSegmentInfoRequest::set_allocated_collectionname(std::string* collectionname) {
  if (collectionname != nullptr) {
    
  } else {
    
  }
  _impl_.collectionname_.SetAllocated(collectionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collectionname_.IsDefault()) {
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName)
}

// -------------------------------------------------------------------

// GetPersistentSegmentInfoResponse

// .milvus.proto.common.Status status = 1;
inline bool GetPersistentSegmentInfoResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetPersistentSegmentInfoResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetPersistentSegmentInfoResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetPersistentSegmentInfoResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPersistentSegmentInfoResponse.status)
  return _internal_status();
}
inline void GetPersistentSegmentInfoResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetPersistentSegmentInfoResponse.status)
}
inline ::milvus::proto::common::Status* GetPersistentSegmentInfoResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetPersistentSegmentInfoResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetPersistentSegmentInfoResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetPersistentSegmentInfoResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetPersistentSegmentInfoResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPersistentSegmentInfoResponse.status)
  return _msg;
}
inline void GetPersistentSegmentInfoResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetPersistentSegmentInfoResponse.status)
}

// repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
inline int GetPersistentSegmentInfoResponse::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int GetPersistentSegmentInfoResponse::infos_size() const {
  return _internal_infos_size();
}
inline void GetPersistentSegmentInfoResponse::clear_infos() {
  _impl_.infos_.Clear();
}
inline ::milvus::proto::milvus::PersistentSegmentInfo* GetPersistentSegmentInfoResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetPersistentSegmentInfoResponse.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PersistentSegmentInfo >*
GetPersistentSegmentInfoResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetPersistentSegmentInfoResponse.infos)
  return &_impl_.infos_;
}
inline const ::milvus::proto::milvus::PersistentSegmentInfo& GetPersistentSegmentInfoResponse::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::milvus::proto::milvus::PersistentSegmentInfo& GetPersistentSegmentInfoResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetPersistentSegmentInfoResponse.infos)
  return _internal_infos(index);
}
inline ::milvus::proto::milvus::PersistentSegmentInfo* GetPersistentSegmentInfoResponse::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::milvus::proto::milvus::PersistentSegmentInfo* GetPersistentSegmentInfoResponse::add_infos() {
  ::milvus::proto::milvus::PersistentSegmentInfo* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetPersistentSegmentInfoResponse.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::PersistentSegmentInfo >&
GetPersistentSegmentInfoResponse::infos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetPersistentSegmentInfoResponse.infos)
  return _impl_.infos_;
}

// -------------------------------------------------------------------

// QuerySegmentInfo

// int64 segmentID = 1;
inline void QuerySegmentInfo::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t QuerySegmentInfo::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t QuerySegmentInfo::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.segmentID)
  return _internal_segmentid();
}
inline void QuerySegmentInfo::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void QuerySegmentInfo::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.segmentID)
}

// int64 collectionID = 2;
inline void QuerySegmentInfo::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t QuerySegmentInfo::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t QuerySegmentInfo::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.collectionID)
  return _internal_collectionid();
}
inline void QuerySegmentInfo::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void QuerySegmentInfo::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.collectionID)
}

// int64 partitionID = 3;
inline void QuerySegmentInfo::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t QuerySegmentInfo::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t QuerySegmentInfo::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.partitionID)
  return _internal_partitionid();
}
inline void QuerySegmentInfo::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void QuerySegmentInfo::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.partitionID)
}

// int64 mem_size = 4;
inline void QuerySegmentInfo::clear_mem_size() {
  _impl_.mem_size_ = int64_t{0};
}
inline int64_t QuerySegmentInfo::_internal_mem_size() const {
  return _impl_.mem_size_;
}
inline int64_t QuerySegmentInfo::mem_size() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.mem_size)
  return _internal_mem_size();
}
inline void QuerySegmentInfo::_internal_set_mem_size(int64_t value) {
  
  _impl_.mem_size_ = value;
}
inline void QuerySegmentInfo::set_mem_size(int64_t value) {
  _internal_set_mem_size(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.mem_size)
}

// int64 num_rows = 5;
inline void QuerySegmentInfo::clear_num_rows() {
  _impl_.num_rows_ = int64_t{0};
}
inline int64_t QuerySegmentInfo::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline int64_t QuerySegmentInfo::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.num_rows)
  return _internal_num_rows();
}
inline void QuerySegmentInfo::_internal_set_num_rows(int64_t value) {
  
  _impl_.num_rows_ = value;
}
inline void QuerySegmentInfo::set_num_rows(int64_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.num_rows)
}

// string index_name = 6;
inline void QuerySegmentInfo::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& QuerySegmentInfo::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuerySegmentInfo::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.index_name)
}
inline std::string* QuerySegmentInfo::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.QuerySegmentInfo.index_name)
  return _s;
}
inline const std::string& QuerySegmentInfo::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void QuerySegmentInfo::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* QuerySegmentInfo::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* QuerySegmentInfo::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.QuerySegmentInfo.index_name)
  return _impl_.index_name_.Release();
}
inline void QuerySegmentInfo::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.QuerySegmentInfo.index_name)
}

// int64 indexID = 7;
inline void QuerySegmentInfo::clear_indexid() {
  _impl_.indexid_ = int64_t{0};
}
inline int64_t QuerySegmentInfo::_internal_indexid() const {
  return _impl_.indexid_;
}
inline int64_t QuerySegmentInfo::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.indexID)
  return _internal_indexid();
}
inline void QuerySegmentInfo::_internal_set_indexid(int64_t value) {
  
  _impl_.indexid_ = value;
}
inline void QuerySegmentInfo::set_indexid(int64_t value) {
  _internal_set_indexid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.indexID)
}

// int64 nodeID = 8;
inline void QuerySegmentInfo::clear_nodeid() {
  _impl_.nodeid_ = int64_t{0};
}
inline int64_t QuerySegmentInfo::_internal_nodeid() const {
  return _impl_.nodeid_;
}
inline int64_t QuerySegmentInfo::nodeid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.nodeID)
  return _internal_nodeid();
}
inline void QuerySegmentInfo::_internal_set_nodeid(int64_t value) {
  
  _impl_.nodeid_ = value;
}
inline void QuerySegmentInfo::set_nodeid(int64_t value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.nodeID)
}

// .milvus.proto.common.SegmentState state = 9;
inline void QuerySegmentInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::SegmentState QuerySegmentInfo::_internal_state() const {
  return static_cast< ::milvus::proto::common::SegmentState >(_impl_.state_);
}
inline ::milvus::proto::common::SegmentState QuerySegmentInfo::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.state)
  return _internal_state();
}
inline void QuerySegmentInfo::_internal_set_state(::milvus::proto::common::SegmentState value) {
  
  _impl_.state_ = value;
}
inline void QuerySegmentInfo::set_state(::milvus::proto::common::SegmentState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.state)
}

// repeated int64 nodeIds = 10;
inline int QuerySegmentInfo::_internal_nodeids_size() const {
  return _impl_.nodeids_.size();
}
inline int QuerySegmentInfo::nodeids_size() const {
  return _internal_nodeids_size();
}
inline void QuerySegmentInfo::clear_nodeids() {
  _impl_.nodeids_.Clear();
}
inline int64_t QuerySegmentInfo::_internal_nodeids(int index) const {
  return _impl_.nodeids_.Get(index);
}
inline int64_t QuerySegmentInfo::nodeids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.QuerySegmentInfo.nodeIds)
  return _internal_nodeids(index);
}
inline void QuerySegmentInfo::set_nodeids(int index, int64_t value) {
  _impl_.nodeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.QuerySegmentInfo.nodeIds)
}
inline void QuerySegmentInfo::_internal_add_nodeids(int64_t value) {
  _impl_.nodeids_.Add(value);
}
inline void QuerySegmentInfo::add_nodeids(int64_t value) {
  _internal_add_nodeids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.QuerySegmentInfo.nodeIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
QuerySegmentInfo::_internal_nodeids() const {
  return _impl_.nodeids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
QuerySegmentInfo::nodeids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.QuerySegmentInfo.nodeIds)
  return _internal_nodeids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
QuerySegmentInfo::_internal_mutable_nodeids() {
  return &_impl_.nodeids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
QuerySegmentInfo::mutable_nodeids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.QuerySegmentInfo.nodeIds)
  return _internal_mutable_nodeids();
}

// -------------------------------------------------------------------

// GetQuerySegmentInfoRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetQuerySegmentInfoRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetQuerySegmentInfoRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetQuerySegmentInfoRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetQuerySegmentInfoRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetQuerySegmentInfoRequest.base)
  return _internal_base();
}
inline void GetQuerySegmentInfoRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetQuerySegmentInfoRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetQuerySegmentInfoRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetQuerySegmentInfoRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetQuerySegmentInfoRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetQuerySegmentInfoRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetQuerySegmentInfoRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetQuerySegmentInfoRequest.base)
  return _msg;
}
inline void GetQuerySegmentInfoRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetQuerySegmentInfoRequest.base)
}

// string dbName = 2;
inline void GetQuerySegmentInfoRequest::clear_dbname() {
  _impl_.dbname_.ClearToEmpty();
}
inline const std::string& GetQuerySegmentInfoRequest::dbname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName)
  return _internal_dbname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetQuerySegmentInfoRequest::set_dbname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dbname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName)
}
inline std::string* GetQuerySegmentInfoRequest::mutable_dbname() {
  std::string* _s = _internal_mutable_dbname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName)
  return _s;
}
inline const std::string& GetQuerySegmentInfoRequest::_internal_dbname() const {
  return _impl_.dbname_.Get();
}
inline void GetQuerySegmentInfoRequest::_internal_set_dbname(const std::string& value) {
  
  _impl_.dbname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetQuerySegmentInfoRequest::_internal_mutable_dbname() {
  
  return _impl_.dbname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetQuerySegmentInfoRequest::release_dbname() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName)
  return _impl_.dbname_.Release();
}
inline void GetQuerySegmentInfoRequest::set_allocated_dbname(std::string* dbname) {
  if (dbname != nullptr) {
    
  } else {
    
  }
  _impl_.dbname_.SetAllocated(dbname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dbname_.IsDefault()) {
    _impl_.dbname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName)
}

// string collectionName = 3;
inline void GetQuerySegmentInfoRequest::clear_collectionname() {
  _impl_.collectionname_.ClearToEmpty();
}
inline const std::string& GetQuerySegmentInfoRequest::collectionname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName)
  return _internal_collectionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetQuerySegmentInfoRequest::set_collectionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collectionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName)
}
inline std::string* GetQuerySegmentInfoRequest::mutable_collectionname() {
  std::string* _s = _internal_mutable_collectionname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName)
  return _s;
}
inline const std::string& GetQuerySegmentInfoRequest::_internal_collectionname() const {
  return _impl_.collectionname_.Get();
}
inline void GetQuerySegmentInfoRequest::_internal_set_collectionname(const std::string& value) {
  
  _impl_.collectionname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetQuerySegmentInfoRequest::_internal_mutable_collectionname() {
  
  return _impl_.collectionname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetQuerySegmentInfoRequest::release_collectionname() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName)
  return _impl_.collectionname_.Release();
}
inline void GetQuerySegmentInfoRequest::set_allocated_collectionname(std::string* collectionname) {
  if (collectionname != nullptr) {
    
  } else {
    
  }
  _impl_.collectionname_.SetAllocated(collectionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collectionname_.IsDefault()) {
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName)
}

// -------------------------------------------------------------------

// GetQuerySegmentInfoResponse

// .milvus.proto.common.Status status = 1;
inline bool GetQuerySegmentInfoResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetQuerySegmentInfoResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetQuerySegmentInfoResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetQuerySegmentInfoResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetQuerySegmentInfoResponse.status)
  return _internal_status();
}
inline void GetQuerySegmentInfoResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetQuerySegmentInfoResponse.status)
}
inline ::milvus::proto::common::Status* GetQuerySegmentInfoResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetQuerySegmentInfoResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetQuerySegmentInfoResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetQuerySegmentInfoResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetQuerySegmentInfoResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetQuerySegmentInfoResponse.status)
  return _msg;
}
inline void GetQuerySegmentInfoResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetQuerySegmentInfoResponse.status)
}

// repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
inline int GetQuerySegmentInfoResponse::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int GetQuerySegmentInfoResponse::infos_size() const {
  return _internal_infos_size();
}
inline void GetQuerySegmentInfoResponse::clear_infos() {
  _impl_.infos_.Clear();
}
inline ::milvus::proto::milvus::QuerySegmentInfo* GetQuerySegmentInfoResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetQuerySegmentInfoResponse.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::QuerySegmentInfo >*
GetQuerySegmentInfoResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetQuerySegmentInfoResponse.infos)
  return &_impl_.infos_;
}
inline const ::milvus::proto::milvus::QuerySegmentInfo& GetQuerySegmentInfoResponse::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::milvus::proto::milvus::QuerySegmentInfo& GetQuerySegmentInfoResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetQuerySegmentInfoResponse.infos)
  return _internal_infos(index);
}
inline ::milvus::proto::milvus::QuerySegmentInfo* GetQuerySegmentInfoResponse::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::milvus::proto::milvus::QuerySegmentInfo* GetQuerySegmentInfoResponse::add_infos() {
  ::milvus::proto::milvus::QuerySegmentInfo* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetQuerySegmentInfoResponse.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::QuerySegmentInfo >&
GetQuerySegmentInfoResponse::infos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetQuerySegmentInfoResponse.infos)
  return _impl_.infos_;
}

// -------------------------------------------------------------------

// DummyRequest

// string request_type = 1;
inline void DummyRequest::clear_request_type() {
  _impl_.request_type_.ClearToEmpty();
}
inline const std::string& DummyRequest::request_type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DummyRequest.request_type)
  return _internal_request_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DummyRequest::set_request_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DummyRequest.request_type)
}
inline std::string* DummyRequest::mutable_request_type() {
  std::string* _s = _internal_mutable_request_type();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DummyRequest.request_type)
  return _s;
}
inline const std::string& DummyRequest::_internal_request_type() const {
  return _impl_.request_type_.Get();
}
inline void DummyRequest::_internal_set_request_type(const std::string& value) {
  
  _impl_.request_type_.Set(value, GetArenaForAllocation());
}
inline std::string* DummyRequest::_internal_mutable_request_type() {
  
  return _impl_.request_type_.Mutable(GetArenaForAllocation());
}
inline std::string* DummyRequest::release_request_type() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DummyRequest.request_type)
  return _impl_.request_type_.Release();
}
inline void DummyRequest::set_allocated_request_type(std::string* request_type) {
  if (request_type != nullptr) {
    
  } else {
    
  }
  _impl_.request_type_.SetAllocated(request_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_type_.IsDefault()) {
    _impl_.request_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DummyRequest.request_type)
}

// -------------------------------------------------------------------

// DummyResponse

// string response = 1;
inline void DummyResponse::clear_response() {
  _impl_.response_.ClearToEmpty();
}
inline const std::string& DummyResponse::response() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DummyResponse.response)
  return _internal_response();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DummyResponse::set_response(ArgT0&& arg0, ArgT... args) {
 
 _impl_.response_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DummyResponse.response)
}
inline std::string* DummyResponse::mutable_response() {
  std::string* _s = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DummyResponse.response)
  return _s;
}
inline const std::string& DummyResponse::_internal_response() const {
  return _impl_.response_.Get();
}
inline void DummyResponse::_internal_set_response(const std::string& value) {
  
  _impl_.response_.Set(value, GetArenaForAllocation());
}
inline std::string* DummyResponse::_internal_mutable_response() {
  
  return _impl_.response_.Mutable(GetArenaForAllocation());
}
inline std::string* DummyResponse::release_response() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DummyResponse.response)
  return _impl_.response_.Release();
}
inline void DummyResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  _impl_.response_.SetAllocated(response, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.response_.IsDefault()) {
    _impl_.response_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DummyResponse.response)
}

// -------------------------------------------------------------------

// RegisterLinkRequest

// -------------------------------------------------------------------

// RegisterLinkResponse

// .milvus.proto.common.Address address = 1;
inline bool RegisterLinkResponse::_internal_has_address() const {
  return this != internal_default_instance() && _impl_.address_ != nullptr;
}
inline bool RegisterLinkResponse::has_address() const {
  return _internal_has_address();
}
inline const ::milvus::proto::common::Address& RegisterLinkResponse::_internal_address() const {
  const ::milvus::proto::common::Address* p = _impl_.address_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Address&>(
      ::milvus::proto::common::_Address_default_instance_);
}
inline const ::milvus::proto::common::Address& RegisterLinkResponse::address() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.RegisterLinkResponse.address)
  return _internal_address();
}
inline void RegisterLinkResponse::unsafe_arena_set_allocated_address(
    ::milvus::proto::common::Address* address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.address_);
  }
  _impl_.address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.RegisterLinkResponse.address)
}
inline ::milvus::proto::common::Address* RegisterLinkResponse::release_address() {
  
  ::milvus::proto::common::Address* temp = _impl_.address_;
  _impl_.address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Address* RegisterLinkResponse::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.RegisterLinkResponse.address)
  
  ::milvus::proto::common::Address* temp = _impl_.address_;
  _impl_.address_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Address* RegisterLinkResponse::_internal_mutable_address() {
  
  if (_impl_.address_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Address>(GetArenaForAllocation());
    _impl_.address_ = p;
  }
  return _impl_.address_;
}
inline ::milvus::proto::common::Address* RegisterLinkResponse::mutable_address() {
  ::milvus::proto::common::Address* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.RegisterLinkResponse.address)
  return _msg;
}
inline void RegisterLinkResponse::set_allocated_address(::milvus::proto::common::Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address));
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.address_ = address;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.RegisterLinkResponse.address)
}

// .milvus.proto.common.Status status = 2;
inline bool RegisterLinkResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool RegisterLinkResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& RegisterLinkResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& RegisterLinkResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.RegisterLinkResponse.status)
  return _internal_status();
}
inline void RegisterLinkResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.RegisterLinkResponse.status)
}
inline ::milvus::proto::common::Status* RegisterLinkResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* RegisterLinkResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.RegisterLinkResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* RegisterLinkResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* RegisterLinkResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.RegisterLinkResponse.status)
  return _msg;
}
inline void RegisterLinkResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.RegisterLinkResponse.status)
}

// -------------------------------------------------------------------

// GetMetricsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetMetricsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetMetricsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetMetricsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetMetricsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetMetricsRequest.base)
  return _internal_base();
}
inline void GetMetricsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetMetricsRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetMetricsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetMetricsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetMetricsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetMetricsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetMetricsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetMetricsRequest.base)
  return _msg;
}
inline void GetMetricsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetMetricsRequest.base)
}

// string request = 2;
inline void GetMetricsRequest::clear_request() {
  _impl_.request_.ClearToEmpty();
}
inline const std::string& GetMetricsRequest::request() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetMetricsRequest.request)
  return _internal_request();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMetricsRequest::set_request(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetMetricsRequest.request)
}
inline std::string* GetMetricsRequest::mutable_request() {
  std::string* _s = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetMetricsRequest.request)
  return _s;
}
inline const std::string& GetMetricsRequest::_internal_request() const {
  return _impl_.request_.Get();
}
inline void GetMetricsRequest::_internal_set_request(const std::string& value) {
  
  _impl_.request_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMetricsRequest::_internal_mutable_request() {
  
  return _impl_.request_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMetricsRequest::release_request() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetMetricsRequest.request)
  return _impl_.request_.Release();
}
inline void GetMetricsRequest::set_allocated_request(std::string* request) {
  if (request != nullptr) {
    
  } else {
    
  }
  _impl_.request_.SetAllocated(request, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_.IsDefault()) {
    _impl_.request_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetMetricsRequest.request)
}

// -------------------------------------------------------------------

// GetMetricsResponse

// .milvus.proto.common.Status status = 1;
inline bool GetMetricsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetMetricsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetMetricsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetMetricsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetMetricsResponse.status)
  return _internal_status();
}
inline void GetMetricsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetMetricsResponse.status)
}
inline ::milvus::proto::common::Status* GetMetricsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetMetricsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetMetricsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetMetricsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetMetricsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetMetricsResponse.status)
  return _msg;
}
inline void GetMetricsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetMetricsResponse.status)
}

// string response = 2;
inline void GetMetricsResponse::clear_response() {
  _impl_.response_.ClearToEmpty();
}
inline const std::string& GetMetricsResponse::response() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetMetricsResponse.response)
  return _internal_response();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMetricsResponse::set_response(ArgT0&& arg0, ArgT... args) {
 
 _impl_.response_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetMetricsResponse.response)
}
inline std::string* GetMetricsResponse::mutable_response() {
  std::string* _s = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetMetricsResponse.response)
  return _s;
}
inline const std::string& GetMetricsResponse::_internal_response() const {
  return _impl_.response_.Get();
}
inline void GetMetricsResponse::_internal_set_response(const std::string& value) {
  
  _impl_.response_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMetricsResponse::_internal_mutable_response() {
  
  return _impl_.response_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMetricsResponse::release_response() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetMetricsResponse.response)
  return _impl_.response_.Release();
}
inline void GetMetricsResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  _impl_.response_.SetAllocated(response, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.response_.IsDefault()) {
    _impl_.response_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetMetricsResponse.response)
}

// string component_name = 3;
inline void GetMetricsResponse::clear_component_name() {
  _impl_.component_name_.ClearToEmpty();
}
inline const std::string& GetMetricsResponse::component_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetMetricsResponse.component_name)
  return _internal_component_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMetricsResponse::set_component_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.component_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetMetricsResponse.component_name)
}
inline std::string* GetMetricsResponse::mutable_component_name() {
  std::string* _s = _internal_mutable_component_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetMetricsResponse.component_name)
  return _s;
}
inline const std::string& GetMetricsResponse::_internal_component_name() const {
  return _impl_.component_name_.Get();
}
inline void GetMetricsResponse::_internal_set_component_name(const std::string& value) {
  
  _impl_.component_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMetricsResponse::_internal_mutable_component_name() {
  
  return _impl_.component_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMetricsResponse::release_component_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetMetricsResponse.component_name)
  return _impl_.component_name_.Release();
}
inline void GetMetricsResponse::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  _impl_.component_name_.SetAllocated(component_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.component_name_.IsDefault()) {
    _impl_.component_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetMetricsResponse.component_name)
}

// -------------------------------------------------------------------

// ComponentInfo

// int64 nodeID = 1;
inline void ComponentInfo::clear_nodeid() {
  _impl_.nodeid_ = int64_t{0};
}
inline int64_t ComponentInfo::_internal_nodeid() const {
  return _impl_.nodeid_;
}
inline int64_t ComponentInfo::nodeid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ComponentInfo.nodeID)
  return _internal_nodeid();
}
inline void ComponentInfo::_internal_set_nodeid(int64_t value) {
  
  _impl_.nodeid_ = value;
}
inline void ComponentInfo::set_nodeid(int64_t value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ComponentInfo.nodeID)
}

// string role = 2;
inline void ComponentInfo::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& ComponentInfo::role() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ComponentInfo.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentInfo::set_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ComponentInfo.role)
}
inline std::string* ComponentInfo::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ComponentInfo.role)
  return _s;
}
inline const std::string& ComponentInfo::_internal_role() const {
  return _impl_.role_.Get();
}
inline void ComponentInfo::_internal_set_role(const std::string& value) {
  
  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentInfo::_internal_mutable_role() {
  
  return _impl_.role_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentInfo::release_role() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ComponentInfo.role)
  return _impl_.role_.Release();
}
inline void ComponentInfo::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  _impl_.role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ComponentInfo.role)
}

// .milvus.proto.common.StateCode state_code = 3;
inline void ComponentInfo::clear_state_code() {
  _impl_.state_code_ = 0;
}
inline ::milvus::proto::common::StateCode ComponentInfo::_internal_state_code() const {
  return static_cast< ::milvus::proto::common::StateCode >(_impl_.state_code_);
}
inline ::milvus::proto::common::StateCode ComponentInfo::state_code() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ComponentInfo.state_code)
  return _internal_state_code();
}
inline void ComponentInfo::_internal_set_state_code(::milvus::proto::common::StateCode value) {
  
  _impl_.state_code_ = value;
}
inline void ComponentInfo::set_state_code(::milvus::proto::common::StateCode value) {
  _internal_set_state_code(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ComponentInfo.state_code)
}

// repeated .milvus.proto.common.KeyValuePair extra_info = 4;
inline int ComponentInfo::_internal_extra_info_size() const {
  return _impl_.extra_info_.size();
}
inline int ComponentInfo::extra_info_size() const {
  return _internal_extra_info_size();
}
inline ::milvus::proto::common::KeyValuePair* ComponentInfo::mutable_extra_info(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ComponentInfo.extra_info)
  return _impl_.extra_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
ComponentInfo::mutable_extra_info() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ComponentInfo.extra_info)
  return &_impl_.extra_info_;
}
inline const ::milvus::proto::common::KeyValuePair& ComponentInfo::_internal_extra_info(int index) const {
  return _impl_.extra_info_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& ComponentInfo::extra_info(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ComponentInfo.extra_info)
  return _internal_extra_info(index);
}
inline ::milvus::proto::common::KeyValuePair* ComponentInfo::_internal_add_extra_info() {
  return _impl_.extra_info_.Add();
}
inline ::milvus::proto::common::KeyValuePair* ComponentInfo::add_extra_info() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_extra_info();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ComponentInfo.extra_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
ComponentInfo::extra_info() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ComponentInfo.extra_info)
  return _impl_.extra_info_;
}

// -------------------------------------------------------------------

// ComponentStates

// .milvus.proto.milvus.ComponentInfo state = 1;
inline bool ComponentStates::_internal_has_state() const {
  return this != internal_default_instance() && _impl_.state_ != nullptr;
}
inline bool ComponentStates::has_state() const {
  return _internal_has_state();
}
inline void ComponentStates::clear_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
}
inline const ::milvus::proto::milvus::ComponentInfo& ComponentStates::_internal_state() const {
  const ::milvus::proto::milvus::ComponentInfo* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::ComponentInfo&>(
      ::milvus::proto::milvus::_ComponentInfo_default_instance_);
}
inline const ::milvus::proto::milvus::ComponentInfo& ComponentStates::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ComponentStates.state)
  return _internal_state();
}
inline void ComponentStates::unsafe_arena_set_allocated_state(
    ::milvus::proto::milvus::ComponentInfo* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ComponentStates.state)
}
inline ::milvus::proto::milvus::ComponentInfo* ComponentStates::release_state() {
  
  ::milvus::proto::milvus::ComponentInfo* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::ComponentInfo* ComponentStates::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ComponentStates.state)
  
  ::milvus::proto::milvus::ComponentInfo* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::ComponentInfo* ComponentStates::_internal_mutable_state() {
  
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::ComponentInfo>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::milvus::proto::milvus::ComponentInfo* ComponentStates::mutable_state() {
  ::milvus::proto::milvus::ComponentInfo* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ComponentStates.state)
  return _msg;
}
inline void ComponentStates::set_allocated_state(::milvus::proto::milvus::ComponentInfo* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ComponentStates.state)
}

// repeated .milvus.proto.milvus.ComponentInfo subcomponent_states = 2;
inline int ComponentStates::_internal_subcomponent_states_size() const {
  return _impl_.subcomponent_states_.size();
}
inline int ComponentStates::subcomponent_states_size() const {
  return _internal_subcomponent_states_size();
}
inline void ComponentStates::clear_subcomponent_states() {
  _impl_.subcomponent_states_.Clear();
}
inline ::milvus::proto::milvus::ComponentInfo* ComponentStates::mutable_subcomponent_states(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ComponentStates.subcomponent_states)
  return _impl_.subcomponent_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ComponentInfo >*
ComponentStates::mutable_subcomponent_states() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ComponentStates.subcomponent_states)
  return &_impl_.subcomponent_states_;
}
inline const ::milvus::proto::milvus::ComponentInfo& ComponentStates::_internal_subcomponent_states(int index) const {
  return _impl_.subcomponent_states_.Get(index);
}
inline const ::milvus::proto::milvus::ComponentInfo& ComponentStates::subcomponent_states(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ComponentStates.subcomponent_states)
  return _internal_subcomponent_states(index);
}
inline ::milvus::proto::milvus::ComponentInfo* ComponentStates::_internal_add_subcomponent_states() {
  return _impl_.subcomponent_states_.Add();
}
inline ::milvus::proto::milvus::ComponentInfo* ComponentStates::add_subcomponent_states() {
  ::milvus::proto::milvus::ComponentInfo* _add = _internal_add_subcomponent_states();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ComponentStates.subcomponent_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ComponentInfo >&
ComponentStates::subcomponent_states() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ComponentStates.subcomponent_states)
  return _impl_.subcomponent_states_;
}

// .milvus.proto.common.Status status = 3;
inline bool ComponentStates::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ComponentStates::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ComponentStates::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ComponentStates::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ComponentStates.status)
  return _internal_status();
}
inline void ComponentStates::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ComponentStates.status)
}
inline ::milvus::proto::common::Status* ComponentStates::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ComponentStates::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ComponentStates.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ComponentStates::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ComponentStates::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ComponentStates.status)
  return _msg;
}
inline void ComponentStates::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ComponentStates.status)
}

// -------------------------------------------------------------------

// GetComponentStatesRequest

// -------------------------------------------------------------------

// LoadBalanceRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool LoadBalanceRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool LoadBalanceRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& LoadBalanceRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& LoadBalanceRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadBalanceRequest.base)
  return _internal_base();
}
inline void LoadBalanceRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.LoadBalanceRequest.base)
}
inline ::milvus::proto::common::MsgBase* LoadBalanceRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* LoadBalanceRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadBalanceRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* LoadBalanceRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* LoadBalanceRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadBalanceRequest.base)
  return _msg;
}
inline void LoadBalanceRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadBalanceRequest.base)
}

// int64 src_nodeID = 2;
inline void LoadBalanceRequest::clear_src_nodeid() {
  _impl_.src_nodeid_ = int64_t{0};
}
inline int64_t LoadBalanceRequest::_internal_src_nodeid() const {
  return _impl_.src_nodeid_;
}
inline int64_t LoadBalanceRequest::src_nodeid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadBalanceRequest.src_nodeID)
  return _internal_src_nodeid();
}
inline void LoadBalanceRequest::_internal_set_src_nodeid(int64_t value) {
  
  _impl_.src_nodeid_ = value;
}
inline void LoadBalanceRequest::set_src_nodeid(int64_t value) {
  _internal_set_src_nodeid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadBalanceRequest.src_nodeID)
}

// repeated int64 dst_nodeIDs = 3;
inline int LoadBalanceRequest::_internal_dst_nodeids_size() const {
  return _impl_.dst_nodeids_.size();
}
inline int LoadBalanceRequest::dst_nodeids_size() const {
  return _internal_dst_nodeids_size();
}
inline void LoadBalanceRequest::clear_dst_nodeids() {
  _impl_.dst_nodeids_.Clear();
}
inline int64_t LoadBalanceRequest::_internal_dst_nodeids(int index) const {
  return _impl_.dst_nodeids_.Get(index);
}
inline int64_t LoadBalanceRequest::dst_nodeids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadBalanceRequest.dst_nodeIDs)
  return _internal_dst_nodeids(index);
}
inline void LoadBalanceRequest::set_dst_nodeids(int index, int64_t value) {
  _impl_.dst_nodeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadBalanceRequest.dst_nodeIDs)
}
inline void LoadBalanceRequest::_internal_add_dst_nodeids(int64_t value) {
  _impl_.dst_nodeids_.Add(value);
}
inline void LoadBalanceRequest::add_dst_nodeids(int64_t value) {
  _internal_add_dst_nodeids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.LoadBalanceRequest.dst_nodeIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
LoadBalanceRequest::_internal_dst_nodeids() const {
  return _impl_.dst_nodeids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
LoadBalanceRequest::dst_nodeids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.LoadBalanceRequest.dst_nodeIDs)
  return _internal_dst_nodeids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
LoadBalanceRequest::_internal_mutable_dst_nodeids() {
  return &_impl_.dst_nodeids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
LoadBalanceRequest::mutable_dst_nodeids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.LoadBalanceRequest.dst_nodeIDs)
  return _internal_mutable_dst_nodeids();
}

// repeated int64 sealed_segmentIDs = 4;
inline int LoadBalanceRequest::_internal_sealed_segmentids_size() const {
  return _impl_.sealed_segmentids_.size();
}
inline int LoadBalanceRequest::sealed_segmentids_size() const {
  return _internal_sealed_segmentids_size();
}
inline void LoadBalanceRequest::clear_sealed_segmentids() {
  _impl_.sealed_segmentids_.Clear();
}
inline int64_t LoadBalanceRequest::_internal_sealed_segmentids(int index) const {
  return _impl_.sealed_segmentids_.Get(index);
}
inline int64_t LoadBalanceRequest::sealed_segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadBalanceRequest.sealed_segmentIDs)
  return _internal_sealed_segmentids(index);
}
inline void LoadBalanceRequest::set_sealed_segmentids(int index, int64_t value) {
  _impl_.sealed_segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadBalanceRequest.sealed_segmentIDs)
}
inline void LoadBalanceRequest::_internal_add_sealed_segmentids(int64_t value) {
  _impl_.sealed_segmentids_.Add(value);
}
inline void LoadBalanceRequest::add_sealed_segmentids(int64_t value) {
  _internal_add_sealed_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.LoadBalanceRequest.sealed_segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
LoadBalanceRequest::_internal_sealed_segmentids() const {
  return _impl_.sealed_segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
LoadBalanceRequest::sealed_segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.LoadBalanceRequest.sealed_segmentIDs)
  return _internal_sealed_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
LoadBalanceRequest::_internal_mutable_sealed_segmentids() {
  return &_impl_.sealed_segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
LoadBalanceRequest::mutable_sealed_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.LoadBalanceRequest.sealed_segmentIDs)
  return _internal_mutable_sealed_segmentids();
}

// string collectionName = 5;
inline void LoadBalanceRequest::clear_collectionname() {
  _impl_.collectionname_.ClearToEmpty();
}
inline const std::string& LoadBalanceRequest::collectionname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadBalanceRequest.collectionName)
  return _internal_collectionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadBalanceRequest::set_collectionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collectionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadBalanceRequest.collectionName)
}
inline std::string* LoadBalanceRequest::mutable_collectionname() {
  std::string* _s = _internal_mutable_collectionname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadBalanceRequest.collectionName)
  return _s;
}
inline const std::string& LoadBalanceRequest::_internal_collectionname() const {
  return _impl_.collectionname_.Get();
}
inline void LoadBalanceRequest::_internal_set_collectionname(const std::string& value) {
  
  _impl_.collectionname_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadBalanceRequest::_internal_mutable_collectionname() {
  
  return _impl_.collectionname_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadBalanceRequest::release_collectionname() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadBalanceRequest.collectionName)
  return _impl_.collectionname_.Release();
}
inline void LoadBalanceRequest::set_allocated_collectionname(std::string* collectionname) {
  if (collectionname != nullptr) {
    
  } else {
    
  }
  _impl_.collectionname_.SetAllocated(collectionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collectionname_.IsDefault()) {
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadBalanceRequest.collectionName)
}

// string db_name = 6;
inline void LoadBalanceRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& LoadBalanceRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.LoadBalanceRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadBalanceRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.LoadBalanceRequest.db_name)
}
inline std::string* LoadBalanceRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.LoadBalanceRequest.db_name)
  return _s;
}
inline const std::string& LoadBalanceRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void LoadBalanceRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadBalanceRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadBalanceRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.LoadBalanceRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void LoadBalanceRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.LoadBalanceRequest.db_name)
}

// -------------------------------------------------------------------

// ManualCompactionRequest

// int64 collectionID = 1;
inline void ManualCompactionRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t ManualCompactionRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t ManualCompactionRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ManualCompactionRequest.collectionID)
  return _internal_collectionid();
}
inline void ManualCompactionRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void ManualCompactionRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ManualCompactionRequest.collectionID)
}

// uint64 timetravel = 2;
inline void ManualCompactionRequest::clear_timetravel() {
  _impl_.timetravel_ = uint64_t{0u};
}
inline uint64_t ManualCompactionRequest::_internal_timetravel() const {
  return _impl_.timetravel_;
}
inline uint64_t ManualCompactionRequest::timetravel() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ManualCompactionRequest.timetravel)
  return _internal_timetravel();
}
inline void ManualCompactionRequest::_internal_set_timetravel(uint64_t value) {
  
  _impl_.timetravel_ = value;
}
inline void ManualCompactionRequest::set_timetravel(uint64_t value) {
  _internal_set_timetravel(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ManualCompactionRequest.timetravel)
}

// -------------------------------------------------------------------

// ManualCompactionResponse

// .milvus.proto.common.Status status = 1;
inline bool ManualCompactionResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ManualCompactionResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ManualCompactionResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ManualCompactionResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ManualCompactionResponse.status)
  return _internal_status();
}
inline void ManualCompactionResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ManualCompactionResponse.status)
}
inline ::milvus::proto::common::Status* ManualCompactionResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ManualCompactionResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ManualCompactionResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ManualCompactionResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ManualCompactionResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ManualCompactionResponse.status)
  return _msg;
}
inline void ManualCompactionResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ManualCompactionResponse.status)
}

// int64 compactionID = 2;
inline void ManualCompactionResponse::clear_compactionid() {
  _impl_.compactionid_ = int64_t{0};
}
inline int64_t ManualCompactionResponse::_internal_compactionid() const {
  return _impl_.compactionid_;
}
inline int64_t ManualCompactionResponse::compactionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ManualCompactionResponse.compactionID)
  return _internal_compactionid();
}
inline void ManualCompactionResponse::_internal_set_compactionid(int64_t value) {
  
  _impl_.compactionid_ = value;
}
inline void ManualCompactionResponse::set_compactionid(int64_t value) {
  _internal_set_compactionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ManualCompactionResponse.compactionID)
}

// int32 compactionPlanCount = 3;
inline void ManualCompactionResponse::clear_compactionplancount() {
  _impl_.compactionplancount_ = 0;
}
inline int32_t ManualCompactionResponse::_internal_compactionplancount() const {
  return _impl_.compactionplancount_;
}
inline int32_t ManualCompactionResponse::compactionplancount() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ManualCompactionResponse.compactionPlanCount)
  return _internal_compactionplancount();
}
inline void ManualCompactionResponse::_internal_set_compactionplancount(int32_t value) {
  
  _impl_.compactionplancount_ = value;
}
inline void ManualCompactionResponse::set_compactionplancount(int32_t value) {
  _internal_set_compactionplancount(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ManualCompactionResponse.compactionPlanCount)
}

// -------------------------------------------------------------------

// GetCompactionStateRequest

// int64 compactionID = 1;
inline void GetCompactionStateRequest::clear_compactionid() {
  _impl_.compactionid_ = int64_t{0};
}
inline int64_t GetCompactionStateRequest::_internal_compactionid() const {
  return _impl_.compactionid_;
}
inline int64_t GetCompactionStateRequest::compactionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionStateRequest.compactionID)
  return _internal_compactionid();
}
inline void GetCompactionStateRequest::_internal_set_compactionid(int64_t value) {
  
  _impl_.compactionid_ = value;
}
inline void GetCompactionStateRequest::set_compactionid(int64_t value) {
  _internal_set_compactionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionStateRequest.compactionID)
}

// -------------------------------------------------------------------

// GetCompactionStateResponse

// .milvus.proto.common.Status status = 1;
inline bool GetCompactionStateResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetCompactionStateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetCompactionStateResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetCompactionStateResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionStateResponse.status)
  return _internal_status();
}
inline void GetCompactionStateResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetCompactionStateResponse.status)
}
inline ::milvus::proto::common::Status* GetCompactionStateResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetCompactionStateResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetCompactionStateResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetCompactionStateResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetCompactionStateResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCompactionStateResponse.status)
  return _msg;
}
inline void GetCompactionStateResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetCompactionStateResponse.status)
}

// .milvus.proto.common.CompactionState state = 2;
inline void GetCompactionStateResponse::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::CompactionState GetCompactionStateResponse::_internal_state() const {
  return static_cast< ::milvus::proto::common::CompactionState >(_impl_.state_);
}
inline ::milvus::proto::common::CompactionState GetCompactionStateResponse::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionStateResponse.state)
  return _internal_state();
}
inline void GetCompactionStateResponse::_internal_set_state(::milvus::proto::common::CompactionState value) {
  
  _impl_.state_ = value;
}
inline void GetCompactionStateResponse::set_state(::milvus::proto::common::CompactionState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionStateResponse.state)
}

// int64 executingPlanNo = 3;
inline void GetCompactionStateResponse::clear_executingplanno() {
  _impl_.executingplanno_ = int64_t{0};
}
inline int64_t GetCompactionStateResponse::_internal_executingplanno() const {
  return _impl_.executingplanno_;
}
inline int64_t GetCompactionStateResponse::executingplanno() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionStateResponse.executingPlanNo)
  return _internal_executingplanno();
}
inline void GetCompactionStateResponse::_internal_set_executingplanno(int64_t value) {
  
  _impl_.executingplanno_ = value;
}
inline void GetCompactionStateResponse::set_executingplanno(int64_t value) {
  _internal_set_executingplanno(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionStateResponse.executingPlanNo)
}

// int64 timeoutPlanNo = 4;
inline void GetCompactionStateResponse::clear_timeoutplanno() {
  _impl_.timeoutplanno_ = int64_t{0};
}
inline int64_t GetCompactionStateResponse::_internal_timeoutplanno() const {
  return _impl_.timeoutplanno_;
}
inline int64_t GetCompactionStateResponse::timeoutplanno() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionStateResponse.timeoutPlanNo)
  return _internal_timeoutplanno();
}
inline void GetCompactionStateResponse::_internal_set_timeoutplanno(int64_t value) {
  
  _impl_.timeoutplanno_ = value;
}
inline void GetCompactionStateResponse::set_timeoutplanno(int64_t value) {
  _internal_set_timeoutplanno(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionStateResponse.timeoutPlanNo)
}

// int64 completedPlanNo = 5;
inline void GetCompactionStateResponse::clear_completedplanno() {
  _impl_.completedplanno_ = int64_t{0};
}
inline int64_t GetCompactionStateResponse::_internal_completedplanno() const {
  return _impl_.completedplanno_;
}
inline int64_t GetCompactionStateResponse::completedplanno() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionStateResponse.completedPlanNo)
  return _internal_completedplanno();
}
inline void GetCompactionStateResponse::_internal_set_completedplanno(int64_t value) {
  
  _impl_.completedplanno_ = value;
}
inline void GetCompactionStateResponse::set_completedplanno(int64_t value) {
  _internal_set_completedplanno(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionStateResponse.completedPlanNo)
}

// int64 failedPlanNo = 6;
inline void GetCompactionStateResponse::clear_failedplanno() {
  _impl_.failedplanno_ = int64_t{0};
}
inline int64_t GetCompactionStateResponse::_internal_failedplanno() const {
  return _impl_.failedplanno_;
}
inline int64_t GetCompactionStateResponse::failedplanno() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionStateResponse.failedPlanNo)
  return _internal_failedplanno();
}
inline void GetCompactionStateResponse::_internal_set_failedplanno(int64_t value) {
  
  _impl_.failedplanno_ = value;
}
inline void GetCompactionStateResponse::set_failedplanno(int64_t value) {
  _internal_set_failedplanno(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionStateResponse.failedPlanNo)
}

// -------------------------------------------------------------------

// GetCompactionPlansRequest

// int64 compactionID = 1;
inline void GetCompactionPlansRequest::clear_compactionid() {
  _impl_.compactionid_ = int64_t{0};
}
inline int64_t GetCompactionPlansRequest::_internal_compactionid() const {
  return _impl_.compactionid_;
}
inline int64_t GetCompactionPlansRequest::compactionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionPlansRequest.compactionID)
  return _internal_compactionid();
}
inline void GetCompactionPlansRequest::_internal_set_compactionid(int64_t value) {
  
  _impl_.compactionid_ = value;
}
inline void GetCompactionPlansRequest::set_compactionid(int64_t value) {
  _internal_set_compactionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionPlansRequest.compactionID)
}

// -------------------------------------------------------------------

// GetCompactionPlansResponse

// .milvus.proto.common.Status status = 1;
inline bool GetCompactionPlansResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetCompactionPlansResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetCompactionPlansResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetCompactionPlansResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionPlansResponse.status)
  return _internal_status();
}
inline void GetCompactionPlansResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetCompactionPlansResponse.status)
}
inline ::milvus::proto::common::Status* GetCompactionPlansResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetCompactionPlansResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetCompactionPlansResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetCompactionPlansResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetCompactionPlansResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCompactionPlansResponse.status)
  return _msg;
}
inline void GetCompactionPlansResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetCompactionPlansResponse.status)
}

// .milvus.proto.common.CompactionState state = 2;
inline void GetCompactionPlansResponse::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::CompactionState GetCompactionPlansResponse::_internal_state() const {
  return static_cast< ::milvus::proto::common::CompactionState >(_impl_.state_);
}
inline ::milvus::proto::common::CompactionState GetCompactionPlansResponse::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionPlansResponse.state)
  return _internal_state();
}
inline void GetCompactionPlansResponse::_internal_set_state(::milvus::proto::common::CompactionState value) {
  
  _impl_.state_ = value;
}
inline void GetCompactionPlansResponse::set_state(::milvus::proto::common::CompactionState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetCompactionPlansResponse.state)
}

// repeated .milvus.proto.milvus.CompactionMergeInfo mergeInfos = 3;
inline int GetCompactionPlansResponse::_internal_mergeinfos_size() const {
  return _impl_.mergeinfos_.size();
}
inline int GetCompactionPlansResponse::mergeinfos_size() const {
  return _internal_mergeinfos_size();
}
inline void GetCompactionPlansResponse::clear_mergeinfos() {
  _impl_.mergeinfos_.Clear();
}
inline ::milvus::proto::milvus::CompactionMergeInfo* GetCompactionPlansResponse::mutable_mergeinfos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetCompactionPlansResponse.mergeInfos)
  return _impl_.mergeinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::CompactionMergeInfo >*
GetCompactionPlansResponse::mutable_mergeinfos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetCompactionPlansResponse.mergeInfos)
  return &_impl_.mergeinfos_;
}
inline const ::milvus::proto::milvus::CompactionMergeInfo& GetCompactionPlansResponse::_internal_mergeinfos(int index) const {
  return _impl_.mergeinfos_.Get(index);
}
inline const ::milvus::proto::milvus::CompactionMergeInfo& GetCompactionPlansResponse::mergeinfos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetCompactionPlansResponse.mergeInfos)
  return _internal_mergeinfos(index);
}
inline ::milvus::proto::milvus::CompactionMergeInfo* GetCompactionPlansResponse::_internal_add_mergeinfos() {
  return _impl_.mergeinfos_.Add();
}
inline ::milvus::proto::milvus::CompactionMergeInfo* GetCompactionPlansResponse::add_mergeinfos() {
  ::milvus::proto::milvus::CompactionMergeInfo* _add = _internal_add_mergeinfos();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetCompactionPlansResponse.mergeInfos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::CompactionMergeInfo >&
GetCompactionPlansResponse::mergeinfos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetCompactionPlansResponse.mergeInfos)
  return _impl_.mergeinfos_;
}

// -------------------------------------------------------------------

// CompactionMergeInfo

// repeated int64 sources = 1;
inline int CompactionMergeInfo::_internal_sources_size() const {
  return _impl_.sources_.size();
}
inline int CompactionMergeInfo::sources_size() const {
  return _internal_sources_size();
}
inline void CompactionMergeInfo::clear_sources() {
  _impl_.sources_.Clear();
}
inline int64_t CompactionMergeInfo::_internal_sources(int index) const {
  return _impl_.sources_.Get(index);
}
inline int64_t CompactionMergeInfo::sources(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CompactionMergeInfo.sources)
  return _internal_sources(index);
}
inline void CompactionMergeInfo::set_sources(int index, int64_t value) {
  _impl_.sources_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CompactionMergeInfo.sources)
}
inline void CompactionMergeInfo::_internal_add_sources(int64_t value) {
  _impl_.sources_.Add(value);
}
inline void CompactionMergeInfo::add_sources(int64_t value) {
  _internal_add_sources(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.CompactionMergeInfo.sources)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
CompactionMergeInfo::_internal_sources() const {
  return _impl_.sources_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
CompactionMergeInfo::sources() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.CompactionMergeInfo.sources)
  return _internal_sources();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
CompactionMergeInfo::_internal_mutable_sources() {
  return &_impl_.sources_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
CompactionMergeInfo::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.CompactionMergeInfo.sources)
  return _internal_mutable_sources();
}

// int64 target = 2;
inline void CompactionMergeInfo::clear_target() {
  _impl_.target_ = int64_t{0};
}
inline int64_t CompactionMergeInfo::_internal_target() const {
  return _impl_.target_;
}
inline int64_t CompactionMergeInfo::target() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CompactionMergeInfo.target)
  return _internal_target();
}
inline void CompactionMergeInfo::_internal_set_target(int64_t value) {
  
  _impl_.target_ = value;
}
inline void CompactionMergeInfo::set_target(int64_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CompactionMergeInfo.target)
}

// -------------------------------------------------------------------

// GetFlushStateRequest

// repeated int64 segmentIDs = 1;
inline int GetFlushStateRequest::_internal_segmentids_size() const {
  return _impl_.segmentids_.size();
}
inline int GetFlushStateRequest::segmentids_size() const {
  return _internal_segmentids_size();
}
inline void GetFlushStateRequest::clear_segmentids() {
  _impl_.segmentids_.Clear();
}
inline int64_t GetFlushStateRequest::_internal_segmentids(int index) const {
  return _impl_.segmentids_.Get(index);
}
inline int64_t GetFlushStateRequest::segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetFlushStateRequest.segmentIDs)
  return _internal_segmentids(index);
}
inline void GetFlushStateRequest::set_segmentids(int index, int64_t value) {
  _impl_.segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetFlushStateRequest.segmentIDs)
}
inline void GetFlushStateRequest::_internal_add_segmentids(int64_t value) {
  _impl_.segmentids_.Add(value);
}
inline void GetFlushStateRequest::add_segmentids(int64_t value) {
  _internal_add_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetFlushStateRequest.segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetFlushStateRequest::_internal_segmentids() const {
  return _impl_.segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetFlushStateRequest::segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetFlushStateRequest.segmentIDs)
  return _internal_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetFlushStateRequest::_internal_mutable_segmentids() {
  return &_impl_.segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetFlushStateRequest::mutable_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetFlushStateRequest.segmentIDs)
  return _internal_mutable_segmentids();
}

// -------------------------------------------------------------------

// GetFlushStateResponse

// .milvus.proto.common.Status status = 1;
inline bool GetFlushStateResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetFlushStateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetFlushStateResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetFlushStateResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetFlushStateResponse.status)
  return _internal_status();
}
inline void GetFlushStateResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetFlushStateResponse.status)
}
inline ::milvus::proto::common::Status* GetFlushStateResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetFlushStateResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetFlushStateResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetFlushStateResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetFlushStateResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetFlushStateResponse.status)
  return _msg;
}
inline void GetFlushStateResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetFlushStateResponse.status)
}

// bool flushed = 2;
inline void GetFlushStateResponse::clear_flushed() {
  _impl_.flushed_ = false;
}
inline bool GetFlushStateResponse::_internal_flushed() const {
  return _impl_.flushed_;
}
inline bool GetFlushStateResponse::flushed() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetFlushStateResponse.flushed)
  return _internal_flushed();
}
inline void GetFlushStateResponse::_internal_set_flushed(bool value) {
  
  _impl_.flushed_ = value;
}
inline void GetFlushStateResponse::set_flushed(bool value) {
  _internal_set_flushed(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetFlushStateResponse.flushed)
}

// -------------------------------------------------------------------

// GetFlushAllStateRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetFlushAllStateRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetFlushAllStateRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetFlushAllStateRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetFlushAllStateRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetFlushAllStateRequest.base)
  return _internal_base();
}
inline void GetFlushAllStateRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetFlushAllStateRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetFlushAllStateRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetFlushAllStateRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetFlushAllStateRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetFlushAllStateRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetFlushAllStateRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetFlushAllStateRequest.base)
  return _msg;
}
inline void GetFlushAllStateRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetFlushAllStateRequest.base)
}

// uint64 flush_all_ts = 2;
inline void GetFlushAllStateRequest::clear_flush_all_ts() {
  _impl_.flush_all_ts_ = uint64_t{0u};
}
inline uint64_t GetFlushAllStateRequest::_internal_flush_all_ts() const {
  return _impl_.flush_all_ts_;
}
inline uint64_t GetFlushAllStateRequest::flush_all_ts() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetFlushAllStateRequest.flush_all_ts)
  return _internal_flush_all_ts();
}
inline void GetFlushAllStateRequest::_internal_set_flush_all_ts(uint64_t value) {
  
  _impl_.flush_all_ts_ = value;
}
inline void GetFlushAllStateRequest::set_flush_all_ts(uint64_t value) {
  _internal_set_flush_all_ts(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetFlushAllStateRequest.flush_all_ts)
}

// -------------------------------------------------------------------

// GetFlushAllStateResponse

// .milvus.proto.common.Status status = 1;
inline bool GetFlushAllStateResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetFlushAllStateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetFlushAllStateResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetFlushAllStateResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetFlushAllStateResponse.status)
  return _internal_status();
}
inline void GetFlushAllStateResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetFlushAllStateResponse.status)
}
inline ::milvus::proto::common::Status* GetFlushAllStateResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetFlushAllStateResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetFlushAllStateResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetFlushAllStateResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetFlushAllStateResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetFlushAllStateResponse.status)
  return _msg;
}
inline void GetFlushAllStateResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetFlushAllStateResponse.status)
}

// bool flushed = 2;
inline void GetFlushAllStateResponse::clear_flushed() {
  _impl_.flushed_ = false;
}
inline bool GetFlushAllStateResponse::_internal_flushed() const {
  return _impl_.flushed_;
}
inline bool GetFlushAllStateResponse::flushed() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetFlushAllStateResponse.flushed)
  return _internal_flushed();
}
inline void GetFlushAllStateResponse::_internal_set_flushed(bool value) {
  
  _impl_.flushed_ = value;
}
inline void GetFlushAllStateResponse::set_flushed(bool value) {
  _internal_set_flushed(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetFlushAllStateResponse.flushed)
}

// -------------------------------------------------------------------

// ImportRequest

// string collection_name = 1;
inline void ImportRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& ImportRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ImportRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ImportRequest.collection_name)
}
inline std::string* ImportRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ImportRequest.collection_name)
  return _s;
}
inline const std::string& ImportRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void ImportRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ImportRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void ImportRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ImportRequest.collection_name)
}

// string partition_name = 2;
inline void ImportRequest::clear_partition_name() {
  _impl_.partition_name_.ClearToEmpty();
}
inline const std::string& ImportRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ImportRequest.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportRequest::set_partition_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.partition_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ImportRequest.partition_name)
}
inline std::string* ImportRequest::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ImportRequest.partition_name)
  return _s;
}
inline const std::string& ImportRequest::_internal_partition_name() const {
  return _impl_.partition_name_.Get();
}
inline void ImportRequest::_internal_set_partition_name(const std::string& value) {
  
  _impl_.partition_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportRequest::_internal_mutable_partition_name() {
  
  return _impl_.partition_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ImportRequest.partition_name)
  return _impl_.partition_name_.Release();
}
inline void ImportRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  _impl_.partition_name_.SetAllocated(partition_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partition_name_.IsDefault()) {
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ImportRequest.partition_name)
}

// repeated string channel_names = 3;
inline int ImportRequest::_internal_channel_names_size() const {
  return _impl_.channel_names_.size();
}
inline int ImportRequest::channel_names_size() const {
  return _internal_channel_names_size();
}
inline void ImportRequest::clear_channel_names() {
  _impl_.channel_names_.Clear();
}
inline std::string* ImportRequest::add_channel_names() {
  std::string* _s = _internal_add_channel_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ImportRequest.channel_names)
  return _s;
}
inline const std::string& ImportRequest::_internal_channel_names(int index) const {
  return _impl_.channel_names_.Get(index);
}
inline const std::string& ImportRequest::channel_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ImportRequest.channel_names)
  return _internal_channel_names(index);
}
inline std::string* ImportRequest::mutable_channel_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ImportRequest.channel_names)
  return _impl_.channel_names_.Mutable(index);
}
inline void ImportRequest::set_channel_names(int index, const std::string& value) {
  _impl_.channel_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ImportRequest.channel_names)
}
inline void ImportRequest::set_channel_names(int index, std::string&& value) {
  _impl_.channel_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ImportRequest.channel_names)
}
inline void ImportRequest::set_channel_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channel_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ImportRequest.channel_names)
}
inline void ImportRequest::set_channel_names(int index, const char* value, size_t size) {
  _impl_.channel_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ImportRequest.channel_names)
}
inline std::string* ImportRequest::_internal_add_channel_names() {
  return _impl_.channel_names_.Add();
}
inline void ImportRequest::add_channel_names(const std::string& value) {
  _impl_.channel_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ImportRequest.channel_names)
}
inline void ImportRequest::add_channel_names(std::string&& value) {
  _impl_.channel_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ImportRequest.channel_names)
}
inline void ImportRequest::add_channel_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channel_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ImportRequest.channel_names)
}
inline void ImportRequest::add_channel_names(const char* value, size_t size) {
  _impl_.channel_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ImportRequest.channel_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ImportRequest::channel_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ImportRequest.channel_names)
  return _impl_.channel_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ImportRequest::mutable_channel_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ImportRequest.channel_names)
  return &_impl_.channel_names_;
}

// bool row_based = 4;
inline void ImportRequest::clear_row_based() {
  _impl_.row_based_ = false;
}
inline bool ImportRequest::_internal_row_based() const {
  return _impl_.row_based_;
}
inline bool ImportRequest::row_based() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ImportRequest.row_based)
  return _internal_row_based();
}
inline void ImportRequest::_internal_set_row_based(bool value) {
  
  _impl_.row_based_ = value;
}
inline void ImportRequest::set_row_based(bool value) {
  _internal_set_row_based(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ImportRequest.row_based)
}

// repeated string files = 5;
inline int ImportRequest::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int ImportRequest::files_size() const {
  return _internal_files_size();
}
inline void ImportRequest::clear_files() {
  _impl_.files_.Clear();
}
inline std::string* ImportRequest::add_files() {
  std::string* _s = _internal_add_files();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ImportRequest.files)
  return _s;
}
inline const std::string& ImportRequest::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline const std::string& ImportRequest::files(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ImportRequest.files)
  return _internal_files(index);
}
inline std::string* ImportRequest::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ImportRequest.files)
  return _impl_.files_.Mutable(index);
}
inline void ImportRequest::set_files(int index, const std::string& value) {
  _impl_.files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ImportRequest.files)
}
inline void ImportRequest::set_files(int index, std::string&& value) {
  _impl_.files_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ImportRequest.files)
}
inline void ImportRequest::set_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ImportRequest.files)
}
inline void ImportRequest::set_files(int index, const char* value, size_t size) {
  _impl_.files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ImportRequest.files)
}
inline std::string* ImportRequest::_internal_add_files() {
  return _impl_.files_.Add();
}
inline void ImportRequest::add_files(const std::string& value) {
  _impl_.files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ImportRequest.files)
}
inline void ImportRequest::add_files(std::string&& value) {
  _impl_.files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ImportRequest.files)
}
inline void ImportRequest::add_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ImportRequest.files)
}
inline void ImportRequest::add_files(const char* value, size_t size) {
  _impl_.files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ImportRequest.files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ImportRequest::files() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ImportRequest.files)
  return _impl_.files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ImportRequest::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ImportRequest.files)
  return &_impl_.files_;
}

// repeated .milvus.proto.common.KeyValuePair options = 6;
inline int ImportRequest::_internal_options_size() const {
  return _impl_.options_.size();
}
inline int ImportRequest::options_size() const {
  return _internal_options_size();
}
inline ::milvus::proto::common::KeyValuePair* ImportRequest::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ImportRequest.options)
  return _impl_.options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
ImportRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ImportRequest.options)
  return &_impl_.options_;
}
inline const ::milvus::proto::common::KeyValuePair& ImportRequest::_internal_options(int index) const {
  return _impl_.options_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& ImportRequest::options(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ImportRequest.options)
  return _internal_options(index);
}
inline ::milvus::proto::common::KeyValuePair* ImportRequest::_internal_add_options() {
  return _impl_.options_.Add();
}
inline ::milvus::proto::common::KeyValuePair* ImportRequest::add_options() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_options();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ImportRequest.options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
ImportRequest::options() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ImportRequest.options)
  return _impl_.options_;
}

// string db_name = 7;
inline void ImportRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& ImportRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ImportRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ImportRequest.db_name)
}
inline std::string* ImportRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ImportRequest.db_name)
  return _s;
}
inline const std::string& ImportRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void ImportRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ImportRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void ImportRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ImportRequest.db_name)
}

// -------------------------------------------------------------------

// ImportResponse

// .milvus.proto.common.Status status = 1;
inline bool ImportResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ImportResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ImportResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ImportResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ImportResponse.status)
  return _internal_status();
}
inline void ImportResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ImportResponse.status)
}
inline ::milvus::proto::common::Status* ImportResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ImportResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ImportResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ImportResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ImportResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ImportResponse.status)
  return _msg;
}
inline void ImportResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ImportResponse.status)
}

// repeated int64 tasks = 2;
inline int ImportResponse::_internal_tasks_size() const {
  return _impl_.tasks_.size();
}
inline int ImportResponse::tasks_size() const {
  return _internal_tasks_size();
}
inline void ImportResponse::clear_tasks() {
  _impl_.tasks_.Clear();
}
inline int64_t ImportResponse::_internal_tasks(int index) const {
  return _impl_.tasks_.Get(index);
}
inline int64_t ImportResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ImportResponse.tasks)
  return _internal_tasks(index);
}
inline void ImportResponse::set_tasks(int index, int64_t value) {
  _impl_.tasks_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ImportResponse.tasks)
}
inline void ImportResponse::_internal_add_tasks(int64_t value) {
  _impl_.tasks_.Add(value);
}
inline void ImportResponse::add_tasks(int64_t value) {
  _internal_add_tasks(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ImportResponse.tasks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ImportResponse::_internal_tasks() const {
  return _impl_.tasks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ImportResponse::tasks() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ImportResponse.tasks)
  return _internal_tasks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ImportResponse::_internal_mutable_tasks() {
  return &_impl_.tasks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ImportResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ImportResponse.tasks)
  return _internal_mutable_tasks();
}

// -------------------------------------------------------------------

// GetImportStateRequest

// int64 task = 1;
inline void GetImportStateRequest::clear_task() {
  _impl_.task_ = int64_t{0};
}
inline int64_t GetImportStateRequest::_internal_task() const {
  return _impl_.task_;
}
inline int64_t GetImportStateRequest::task() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetImportStateRequest.task)
  return _internal_task();
}
inline void GetImportStateRequest::_internal_set_task(int64_t value) {
  
  _impl_.task_ = value;
}
inline void GetImportStateRequest::set_task(int64_t value) {
  _internal_set_task(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetImportStateRequest.task)
}

// -------------------------------------------------------------------

// GetImportStateResponse

// .milvus.proto.common.Status status = 1;
inline bool GetImportStateResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetImportStateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetImportStateResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetImportStateResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetImportStateResponse.status)
  return _internal_status();
}
inline void GetImportStateResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetImportStateResponse.status)
}
inline ::milvus::proto::common::Status* GetImportStateResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetImportStateResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetImportStateResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetImportStateResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetImportStateResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetImportStateResponse.status)
  return _msg;
}
inline void GetImportStateResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetImportStateResponse.status)
}

// .milvus.proto.common.ImportState state = 2;
inline void GetImportStateResponse::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::ImportState GetImportStateResponse::_internal_state() const {
  return static_cast< ::milvus::proto::common::ImportState >(_impl_.state_);
}
inline ::milvus::proto::common::ImportState GetImportStateResponse::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetImportStateResponse.state)
  return _internal_state();
}
inline void GetImportStateResponse::_internal_set_state(::milvus::proto::common::ImportState value) {
  
  _impl_.state_ = value;
}
inline void GetImportStateResponse::set_state(::milvus::proto::common::ImportState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetImportStateResponse.state)
}

// int64 row_count = 3;
inline void GetImportStateResponse::clear_row_count() {
  _impl_.row_count_ = int64_t{0};
}
inline int64_t GetImportStateResponse::_internal_row_count() const {
  return _impl_.row_count_;
}
inline int64_t GetImportStateResponse::row_count() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetImportStateResponse.row_count)
  return _internal_row_count();
}
inline void GetImportStateResponse::_internal_set_row_count(int64_t value) {
  
  _impl_.row_count_ = value;
}
inline void GetImportStateResponse::set_row_count(int64_t value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetImportStateResponse.row_count)
}

// repeated int64 id_list = 4;
inline int GetImportStateResponse::_internal_id_list_size() const {
  return _impl_.id_list_.size();
}
inline int GetImportStateResponse::id_list_size() const {
  return _internal_id_list_size();
}
inline void GetImportStateResponse::clear_id_list() {
  _impl_.id_list_.Clear();
}
inline int64_t GetImportStateResponse::_internal_id_list(int index) const {
  return _impl_.id_list_.Get(index);
}
inline int64_t GetImportStateResponse::id_list(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetImportStateResponse.id_list)
  return _internal_id_list(index);
}
inline void GetImportStateResponse::set_id_list(int index, int64_t value) {
  _impl_.id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetImportStateResponse.id_list)
}
inline void GetImportStateResponse::_internal_add_id_list(int64_t value) {
  _impl_.id_list_.Add(value);
}
inline void GetImportStateResponse::add_id_list(int64_t value) {
  _internal_add_id_list(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetImportStateResponse.id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetImportStateResponse::_internal_id_list() const {
  return _impl_.id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetImportStateResponse::id_list() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetImportStateResponse.id_list)
  return _internal_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetImportStateResponse::_internal_mutable_id_list() {
  return &_impl_.id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetImportStateResponse::mutable_id_list() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetImportStateResponse.id_list)
  return _internal_mutable_id_list();
}

// repeated .milvus.proto.common.KeyValuePair infos = 5;
inline int GetImportStateResponse::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int GetImportStateResponse::infos_size() const {
  return _internal_infos_size();
}
inline ::milvus::proto::common::KeyValuePair* GetImportStateResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetImportStateResponse.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
GetImportStateResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetImportStateResponse.infos)
  return &_impl_.infos_;
}
inline const ::milvus::proto::common::KeyValuePair& GetImportStateResponse::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& GetImportStateResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetImportStateResponse.infos)
  return _internal_infos(index);
}
inline ::milvus::proto::common::KeyValuePair* GetImportStateResponse::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::milvus::proto::common::KeyValuePair* GetImportStateResponse::add_infos() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetImportStateResponse.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
GetImportStateResponse::infos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetImportStateResponse.infos)
  return _impl_.infos_;
}

// int64 id = 6;
inline void GetImportStateResponse::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t GetImportStateResponse::_internal_id() const {
  return _impl_.id_;
}
inline int64_t GetImportStateResponse::id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetImportStateResponse.id)
  return _internal_id();
}
inline void GetImportStateResponse::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void GetImportStateResponse::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetImportStateResponse.id)
}

// int64 collection_id = 7;
inline void GetImportStateResponse::clear_collection_id() {
  _impl_.collection_id_ = int64_t{0};
}
inline int64_t GetImportStateResponse::_internal_collection_id() const {
  return _impl_.collection_id_;
}
inline int64_t GetImportStateResponse::collection_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetImportStateResponse.collection_id)
  return _internal_collection_id();
}
inline void GetImportStateResponse::_internal_set_collection_id(int64_t value) {
  
  _impl_.collection_id_ = value;
}
inline void GetImportStateResponse::set_collection_id(int64_t value) {
  _internal_set_collection_id(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetImportStateResponse.collection_id)
}

// repeated int64 segment_ids = 8;
inline int GetImportStateResponse::_internal_segment_ids_size() const {
  return _impl_.segment_ids_.size();
}
inline int GetImportStateResponse::segment_ids_size() const {
  return _internal_segment_ids_size();
}
inline void GetImportStateResponse::clear_segment_ids() {
  _impl_.segment_ids_.Clear();
}
inline int64_t GetImportStateResponse::_internal_segment_ids(int index) const {
  return _impl_.segment_ids_.Get(index);
}
inline int64_t GetImportStateResponse::segment_ids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetImportStateResponse.segment_ids)
  return _internal_segment_ids(index);
}
inline void GetImportStateResponse::set_segment_ids(int index, int64_t value) {
  _impl_.segment_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetImportStateResponse.segment_ids)
}
inline void GetImportStateResponse::_internal_add_segment_ids(int64_t value) {
  _impl_.segment_ids_.Add(value);
}
inline void GetImportStateResponse::add_segment_ids(int64_t value) {
  _internal_add_segment_ids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetImportStateResponse.segment_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetImportStateResponse::_internal_segment_ids() const {
  return _impl_.segment_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetImportStateResponse::segment_ids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetImportStateResponse.segment_ids)
  return _internal_segment_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetImportStateResponse::_internal_mutable_segment_ids() {
  return &_impl_.segment_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetImportStateResponse::mutable_segment_ids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetImportStateResponse.segment_ids)
  return _internal_mutable_segment_ids();
}

// int64 create_ts = 9;
inline void GetImportStateResponse::clear_create_ts() {
  _impl_.create_ts_ = int64_t{0};
}
inline int64_t GetImportStateResponse::_internal_create_ts() const {
  return _impl_.create_ts_;
}
inline int64_t GetImportStateResponse::create_ts() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetImportStateResponse.create_ts)
  return _internal_create_ts();
}
inline void GetImportStateResponse::_internal_set_create_ts(int64_t value) {
  
  _impl_.create_ts_ = value;
}
inline void GetImportStateResponse::set_create_ts(int64_t value) {
  _internal_set_create_ts(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetImportStateResponse.create_ts)
}

// -------------------------------------------------------------------

// ListImportTasksRequest

// string collection_name = 1;
inline void ListImportTasksRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& ListImportTasksRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListImportTasksRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListImportTasksRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListImportTasksRequest.collection_name)
}
inline std::string* ListImportTasksRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListImportTasksRequest.collection_name)
  return _s;
}
inline const std::string& ListImportTasksRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void ListImportTasksRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListImportTasksRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListImportTasksRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListImportTasksRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void ListImportTasksRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListImportTasksRequest.collection_name)
}

// int64 limit = 2;
inline void ListImportTasksRequest::clear_limit() {
  _impl_.limit_ = int64_t{0};
}
inline int64_t ListImportTasksRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int64_t ListImportTasksRequest::limit() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListImportTasksRequest.limit)
  return _internal_limit();
}
inline void ListImportTasksRequest::_internal_set_limit(int64_t value) {
  
  _impl_.limit_ = value;
}
inline void ListImportTasksRequest::set_limit(int64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListImportTasksRequest.limit)
}

// string db_name = 3;
inline void ListImportTasksRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& ListImportTasksRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListImportTasksRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListImportTasksRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListImportTasksRequest.db_name)
}
inline std::string* ListImportTasksRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListImportTasksRequest.db_name)
  return _s;
}
inline const std::string& ListImportTasksRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void ListImportTasksRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListImportTasksRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListImportTasksRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListImportTasksRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void ListImportTasksRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListImportTasksRequest.db_name)
}

// -------------------------------------------------------------------

// ListImportTasksResponse

// .milvus.proto.common.Status status = 1;
inline bool ListImportTasksResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ListImportTasksResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ListImportTasksResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ListImportTasksResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListImportTasksResponse.status)
  return _internal_status();
}
inline void ListImportTasksResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ListImportTasksResponse.status)
}
inline ::milvus::proto::common::Status* ListImportTasksResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ListImportTasksResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListImportTasksResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ListImportTasksResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ListImportTasksResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListImportTasksResponse.status)
  return _msg;
}
inline void ListImportTasksResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListImportTasksResponse.status)
}

// repeated .milvus.proto.milvus.GetImportStateResponse tasks = 2;
inline int ListImportTasksResponse::_internal_tasks_size() const {
  return _impl_.tasks_.size();
}
inline int ListImportTasksResponse::tasks_size() const {
  return _internal_tasks_size();
}
inline void ListImportTasksResponse::clear_tasks() {
  _impl_.tasks_.Clear();
}
inline ::milvus::proto::milvus::GetImportStateResponse* ListImportTasksResponse::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListImportTasksResponse.tasks)
  return _impl_.tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GetImportStateResponse >*
ListImportTasksResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ListImportTasksResponse.tasks)
  return &_impl_.tasks_;
}
inline const ::milvus::proto::milvus::GetImportStateResponse& ListImportTasksResponse::_internal_tasks(int index) const {
  return _impl_.tasks_.Get(index);
}
inline const ::milvus::proto::milvus::GetImportStateResponse& ListImportTasksResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListImportTasksResponse.tasks)
  return _internal_tasks(index);
}
inline ::milvus::proto::milvus::GetImportStateResponse* ListImportTasksResponse::_internal_add_tasks() {
  return _impl_.tasks_.Add();
}
inline ::milvus::proto::milvus::GetImportStateResponse* ListImportTasksResponse::add_tasks() {
  ::milvus::proto::milvus::GetImportStateResponse* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ListImportTasksResponse.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GetImportStateResponse >&
ListImportTasksResponse::tasks() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ListImportTasksResponse.tasks)
  return _impl_.tasks_;
}

// -------------------------------------------------------------------

// GetReplicasRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetReplicasRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetReplicasRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetReplicasRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetReplicasRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetReplicasRequest.base)
  return _internal_base();
}
inline void GetReplicasRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetReplicasRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetReplicasRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetReplicasRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetReplicasRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetReplicasRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetReplicasRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetReplicasRequest.base)
  return _msg;
}
inline void GetReplicasRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetReplicasRequest.base)
}

// int64 collectionID = 2;
inline void GetReplicasRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t GetReplicasRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t GetReplicasRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetReplicasRequest.collectionID)
  return _internal_collectionid();
}
inline void GetReplicasRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void GetReplicasRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetReplicasRequest.collectionID)
}

// bool with_shard_nodes = 3;
inline void GetReplicasRequest::clear_with_shard_nodes() {
  _impl_.with_shard_nodes_ = false;
}
inline bool GetReplicasRequest::_internal_with_shard_nodes() const {
  return _impl_.with_shard_nodes_;
}
inline bool GetReplicasRequest::with_shard_nodes() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetReplicasRequest.with_shard_nodes)
  return _internal_with_shard_nodes();
}
inline void GetReplicasRequest::_internal_set_with_shard_nodes(bool value) {
  
  _impl_.with_shard_nodes_ = value;
}
inline void GetReplicasRequest::set_with_shard_nodes(bool value) {
  _internal_set_with_shard_nodes(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetReplicasRequest.with_shard_nodes)
}

// string collection_name = 4;
inline void GetReplicasRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& GetReplicasRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetReplicasRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetReplicasRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetReplicasRequest.collection_name)
}
inline std::string* GetReplicasRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetReplicasRequest.collection_name)
  return _s;
}
inline const std::string& GetReplicasRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void GetReplicasRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetReplicasRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetReplicasRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetReplicasRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void GetReplicasRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetReplicasRequest.collection_name)
}

// string db_name = 5;
inline void GetReplicasRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& GetReplicasRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetReplicasRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetReplicasRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetReplicasRequest.db_name)
}
inline std::string* GetReplicasRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetReplicasRequest.db_name)
  return _s;
}
inline const std::string& GetReplicasRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void GetReplicasRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetReplicasRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetReplicasRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetReplicasRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void GetReplicasRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetReplicasRequest.db_name)
}

// -------------------------------------------------------------------

// GetReplicasResponse

// .milvus.proto.common.Status status = 1;
inline bool GetReplicasResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetReplicasResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetReplicasResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetReplicasResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetReplicasResponse.status)
  return _internal_status();
}
inline void GetReplicasResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetReplicasResponse.status)
}
inline ::milvus::proto::common::Status* GetReplicasResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetReplicasResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetReplicasResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetReplicasResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetReplicasResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetReplicasResponse.status)
  return _msg;
}
inline void GetReplicasResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetReplicasResponse.status)
}

// repeated .milvus.proto.milvus.ReplicaInfo replicas = 2;
inline int GetReplicasResponse::_internal_replicas_size() const {
  return _impl_.replicas_.size();
}
inline int GetReplicasResponse::replicas_size() const {
  return _internal_replicas_size();
}
inline void GetReplicasResponse::clear_replicas() {
  _impl_.replicas_.Clear();
}
inline ::milvus::proto::milvus::ReplicaInfo* GetReplicasResponse::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetReplicasResponse.replicas)
  return _impl_.replicas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ReplicaInfo >*
GetReplicasResponse::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetReplicasResponse.replicas)
  return &_impl_.replicas_;
}
inline const ::milvus::proto::milvus::ReplicaInfo& GetReplicasResponse::_internal_replicas(int index) const {
  return _impl_.replicas_.Get(index);
}
inline const ::milvus::proto::milvus::ReplicaInfo& GetReplicasResponse::replicas(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetReplicasResponse.replicas)
  return _internal_replicas(index);
}
inline ::milvus::proto::milvus::ReplicaInfo* GetReplicasResponse::_internal_add_replicas() {
  return _impl_.replicas_.Add();
}
inline ::milvus::proto::milvus::ReplicaInfo* GetReplicasResponse::add_replicas() {
  ::milvus::proto::milvus::ReplicaInfo* _add = _internal_add_replicas();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetReplicasResponse.replicas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ReplicaInfo >&
GetReplicasResponse::replicas() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetReplicasResponse.replicas)
  return _impl_.replicas_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ReplicaInfo

// int64 replicaID = 1;
inline void ReplicaInfo::clear_replicaid() {
  _impl_.replicaid_ = int64_t{0};
}
inline int64_t ReplicaInfo::_internal_replicaid() const {
  return _impl_.replicaid_;
}
inline int64_t ReplicaInfo::replicaid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReplicaInfo.replicaID)
  return _internal_replicaid();
}
inline void ReplicaInfo::_internal_set_replicaid(int64_t value) {
  
  _impl_.replicaid_ = value;
}
inline void ReplicaInfo::set_replicaid(int64_t value) {
  _internal_set_replicaid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReplicaInfo.replicaID)
}

// int64 collectionID = 2;
inline void ReplicaInfo::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t ReplicaInfo::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t ReplicaInfo::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReplicaInfo.collectionID)
  return _internal_collectionid();
}
inline void ReplicaInfo::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void ReplicaInfo::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReplicaInfo.collectionID)
}

// repeated int64 partition_ids = 3;
inline int ReplicaInfo::_internal_partition_ids_size() const {
  return _impl_.partition_ids_.size();
}
inline int ReplicaInfo::partition_ids_size() const {
  return _internal_partition_ids_size();
}
inline void ReplicaInfo::clear_partition_ids() {
  _impl_.partition_ids_.Clear();
}
inline int64_t ReplicaInfo::_internal_partition_ids(int index) const {
  return _impl_.partition_ids_.Get(index);
}
inline int64_t ReplicaInfo::partition_ids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReplicaInfo.partition_ids)
  return _internal_partition_ids(index);
}
inline void ReplicaInfo::set_partition_ids(int index, int64_t value) {
  _impl_.partition_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReplicaInfo.partition_ids)
}
inline void ReplicaInfo::_internal_add_partition_ids(int64_t value) {
  _impl_.partition_ids_.Add(value);
}
inline void ReplicaInfo::add_partition_ids(int64_t value) {
  _internal_add_partition_ids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ReplicaInfo.partition_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ReplicaInfo::_internal_partition_ids() const {
  return _impl_.partition_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ReplicaInfo::partition_ids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ReplicaInfo.partition_ids)
  return _internal_partition_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ReplicaInfo::_internal_mutable_partition_ids() {
  return &_impl_.partition_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ReplicaInfo::mutable_partition_ids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ReplicaInfo.partition_ids)
  return _internal_mutable_partition_ids();
}

// repeated .milvus.proto.milvus.ShardReplica shard_replicas = 4;
inline int ReplicaInfo::_internal_shard_replicas_size() const {
  return _impl_.shard_replicas_.size();
}
inline int ReplicaInfo::shard_replicas_size() const {
  return _internal_shard_replicas_size();
}
inline void ReplicaInfo::clear_shard_replicas() {
  _impl_.shard_replicas_.Clear();
}
inline ::milvus::proto::milvus::ShardReplica* ReplicaInfo::mutable_shard_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReplicaInfo.shard_replicas)
  return _impl_.shard_replicas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ShardReplica >*
ReplicaInfo::mutable_shard_replicas() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ReplicaInfo.shard_replicas)
  return &_impl_.shard_replicas_;
}
inline const ::milvus::proto::milvus::ShardReplica& ReplicaInfo::_internal_shard_replicas(int index) const {
  return _impl_.shard_replicas_.Get(index);
}
inline const ::milvus::proto::milvus::ShardReplica& ReplicaInfo::shard_replicas(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReplicaInfo.shard_replicas)
  return _internal_shard_replicas(index);
}
inline ::milvus::proto::milvus::ShardReplica* ReplicaInfo::_internal_add_shard_replicas() {
  return _impl_.shard_replicas_.Add();
}
inline ::milvus::proto::milvus::ShardReplica* ReplicaInfo::add_shard_replicas() {
  ::milvus::proto::milvus::ShardReplica* _add = _internal_add_shard_replicas();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ReplicaInfo.shard_replicas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::ShardReplica >&
ReplicaInfo::shard_replicas() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ReplicaInfo.shard_replicas)
  return _impl_.shard_replicas_;
}

// repeated int64 node_ids = 5;
inline int ReplicaInfo::_internal_node_ids_size() const {
  return _impl_.node_ids_.size();
}
inline int ReplicaInfo::node_ids_size() const {
  return _internal_node_ids_size();
}
inline void ReplicaInfo::clear_node_ids() {
  _impl_.node_ids_.Clear();
}
inline int64_t ReplicaInfo::_internal_node_ids(int index) const {
  return _impl_.node_ids_.Get(index);
}
inline int64_t ReplicaInfo::node_ids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReplicaInfo.node_ids)
  return _internal_node_ids(index);
}
inline void ReplicaInfo::set_node_ids(int index, int64_t value) {
  _impl_.node_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReplicaInfo.node_ids)
}
inline void ReplicaInfo::_internal_add_node_ids(int64_t value) {
  _impl_.node_ids_.Add(value);
}
inline void ReplicaInfo::add_node_ids(int64_t value) {
  _internal_add_node_ids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ReplicaInfo.node_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ReplicaInfo::_internal_node_ids() const {
  return _impl_.node_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ReplicaInfo::node_ids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ReplicaInfo.node_ids)
  return _internal_node_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ReplicaInfo::_internal_mutable_node_ids() {
  return &_impl_.node_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ReplicaInfo::mutable_node_ids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ReplicaInfo.node_ids)
  return _internal_mutable_node_ids();
}

// string resource_group_name = 6;
inline void ReplicaInfo::clear_resource_group_name() {
  _impl_.resource_group_name_.ClearToEmpty();
}
inline const std::string& ReplicaInfo::resource_group_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ReplicaInfo.resource_group_name)
  return _internal_resource_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplicaInfo::set_resource_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resource_group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ReplicaInfo.resource_group_name)
}
inline std::string* ReplicaInfo::mutable_resource_group_name() {
  std::string* _s = _internal_mutable_resource_group_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ReplicaInfo.resource_group_name)
  return _s;
}
inline const std::string& ReplicaInfo::_internal_resource_group_name() const {
  return _impl_.resource_group_name_.Get();
}
inline void ReplicaInfo::_internal_set_resource_group_name(const std::string& value) {
  
  _impl_.resource_group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplicaInfo::_internal_mutable_resource_group_name() {
  
  return _impl_.resource_group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplicaInfo::release_resource_group_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ReplicaInfo.resource_group_name)
  return _impl_.resource_group_name_.Release();
}
inline void ReplicaInfo::set_allocated_resource_group_name(std::string* resource_group_name) {
  if (resource_group_name != nullptr) {
    
  } else {
    
  }
  _impl_.resource_group_name_.SetAllocated(resource_group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_group_name_.IsDefault()) {
    _impl_.resource_group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ReplicaInfo.resource_group_name)
}

// map<string, int32> num_outbound_node = 7;
inline int ReplicaInfo::_internal_num_outbound_node_size() const {
  return _impl_.num_outbound_node_.size();
}
inline int ReplicaInfo::num_outbound_node_size() const {
  return _internal_num_outbound_node_size();
}
inline void ReplicaInfo::clear_num_outbound_node() {
  _impl_.num_outbound_node_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
ReplicaInfo::_internal_num_outbound_node() const {
  return _impl_.num_outbound_node_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
ReplicaInfo::num_outbound_node() const {
  // @@protoc_insertion_point(field_map:milvus.proto.milvus.ReplicaInfo.num_outbound_node)
  return _internal_num_outbound_node();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
ReplicaInfo::_internal_mutable_num_outbound_node() {
  return _impl_.num_outbound_node_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
ReplicaInfo::mutable_num_outbound_node() {
  // @@protoc_insertion_point(field_mutable_map:milvus.proto.milvus.ReplicaInfo.num_outbound_node)
  return _internal_mutable_num_outbound_node();
}

// -------------------------------------------------------------------

// ShardReplica

// int64 leaderID = 1;
inline void ShardReplica::clear_leaderid() {
  _impl_.leaderid_ = int64_t{0};
}
inline int64_t ShardReplica::_internal_leaderid() const {
  return _impl_.leaderid_;
}
inline int64_t ShardReplica::leaderid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShardReplica.leaderID)
  return _internal_leaderid();
}
inline void ShardReplica::_internal_set_leaderid(int64_t value) {
  
  _impl_.leaderid_ = value;
}
inline void ShardReplica::set_leaderid(int64_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShardReplica.leaderID)
}

// string leader_addr = 2;
inline void ShardReplica::clear_leader_addr() {
  _impl_.leader_addr_.ClearToEmpty();
}
inline const std::string& ShardReplica::leader_addr() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShardReplica.leader_addr)
  return _internal_leader_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShardReplica::set_leader_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.leader_addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShardReplica.leader_addr)
}
inline std::string* ShardReplica::mutable_leader_addr() {
  std::string* _s = _internal_mutable_leader_addr();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShardReplica.leader_addr)
  return _s;
}
inline const std::string& ShardReplica::_internal_leader_addr() const {
  return _impl_.leader_addr_.Get();
}
inline void ShardReplica::_internal_set_leader_addr(const std::string& value) {
  
  _impl_.leader_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* ShardReplica::_internal_mutable_leader_addr() {
  
  return _impl_.leader_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* ShardReplica::release_leader_addr() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShardReplica.leader_addr)
  return _impl_.leader_addr_.Release();
}
inline void ShardReplica::set_allocated_leader_addr(std::string* leader_addr) {
  if (leader_addr != nullptr) {
    
  } else {
    
  }
  _impl_.leader_addr_.SetAllocated(leader_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_addr_.IsDefault()) {
    _impl_.leader_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShardReplica.leader_addr)
}

// string dm_channel_name = 3;
inline void ShardReplica::clear_dm_channel_name() {
  _impl_.dm_channel_name_.ClearToEmpty();
}
inline const std::string& ShardReplica::dm_channel_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShardReplica.dm_channel_name)
  return _internal_dm_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShardReplica::set_dm_channel_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dm_channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShardReplica.dm_channel_name)
}
inline std::string* ShardReplica::mutable_dm_channel_name() {
  std::string* _s = _internal_mutable_dm_channel_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ShardReplica.dm_channel_name)
  return _s;
}
inline const std::string& ShardReplica::_internal_dm_channel_name() const {
  return _impl_.dm_channel_name_.Get();
}
inline void ShardReplica::_internal_set_dm_channel_name(const std::string& value) {
  
  _impl_.dm_channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ShardReplica::_internal_mutable_dm_channel_name() {
  
  return _impl_.dm_channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ShardReplica::release_dm_channel_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ShardReplica.dm_channel_name)
  return _impl_.dm_channel_name_.Release();
}
inline void ShardReplica::set_allocated_dm_channel_name(std::string* dm_channel_name) {
  if (dm_channel_name != nullptr) {
    
  } else {
    
  }
  _impl_.dm_channel_name_.SetAllocated(dm_channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dm_channel_name_.IsDefault()) {
    _impl_.dm_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ShardReplica.dm_channel_name)
}

// repeated int64 node_ids = 4;
inline int ShardReplica::_internal_node_ids_size() const {
  return _impl_.node_ids_.size();
}
inline int ShardReplica::node_ids_size() const {
  return _internal_node_ids_size();
}
inline void ShardReplica::clear_node_ids() {
  _impl_.node_ids_.Clear();
}
inline int64_t ShardReplica::_internal_node_ids(int index) const {
  return _impl_.node_ids_.Get(index);
}
inline int64_t ShardReplica::node_ids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ShardReplica.node_ids)
  return _internal_node_ids(index);
}
inline void ShardReplica::set_node_ids(int index, int64_t value) {
  _impl_.node_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ShardReplica.node_ids)
}
inline void ShardReplica::_internal_add_node_ids(int64_t value) {
  _impl_.node_ids_.Add(value);
}
inline void ShardReplica::add_node_ids(int64_t value) {
  _internal_add_node_ids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ShardReplica.node_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ShardReplica::_internal_node_ids() const {
  return _impl_.node_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ShardReplica::node_ids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ShardReplica.node_ids)
  return _internal_node_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ShardReplica::_internal_mutable_node_ids() {
  return &_impl_.node_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ShardReplica::mutable_node_ids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ShardReplica.node_ids)
  return _internal_mutable_node_ids();
}

// -------------------------------------------------------------------

// CreateCredentialRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreateCredentialRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool CreateCredentialRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CreateCredentialRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CreateCredentialRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCredentialRequest.base)
  return _internal_base();
}
inline void CreateCredentialRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CreateCredentialRequest.base)
}
inline ::milvus::proto::common::MsgBase* CreateCredentialRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateCredentialRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateCredentialRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateCredentialRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* CreateCredentialRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateCredentialRequest.base)
  return _msg;
}
inline void CreateCredentialRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateCredentialRequest.base)
}

// string username = 2;
inline void CreateCredentialRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& CreateCredentialRequest::username() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCredentialRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCredentialRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCredentialRequest.username)
}
inline std::string* CreateCredentialRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateCredentialRequest.username)
  return _s;
}
inline const std::string& CreateCredentialRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void CreateCredentialRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCredentialRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCredentialRequest::release_username() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateCredentialRequest.username)
  return _impl_.username_.Release();
}
inline void CreateCredentialRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateCredentialRequest.username)
}

// string password = 3;
inline void CreateCredentialRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& CreateCredentialRequest::password() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCredentialRequest.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCredentialRequest::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCredentialRequest.password)
}
inline std::string* CreateCredentialRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateCredentialRequest.password)
  return _s;
}
inline const std::string& CreateCredentialRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void CreateCredentialRequest::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCredentialRequest::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCredentialRequest::release_password() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateCredentialRequest.password)
  return _impl_.password_.Release();
}
inline void CreateCredentialRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateCredentialRequest.password)
}

// uint64 created_utc_timestamps = 4;
inline void CreateCredentialRequest::clear_created_utc_timestamps() {
  _impl_.created_utc_timestamps_ = uint64_t{0u};
}
inline uint64_t CreateCredentialRequest::_internal_created_utc_timestamps() const {
  return _impl_.created_utc_timestamps_;
}
inline uint64_t CreateCredentialRequest::created_utc_timestamps() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCredentialRequest.created_utc_timestamps)
  return _internal_created_utc_timestamps();
}
inline void CreateCredentialRequest::_internal_set_created_utc_timestamps(uint64_t value) {
  
  _impl_.created_utc_timestamps_ = value;
}
inline void CreateCredentialRequest::set_created_utc_timestamps(uint64_t value) {
  _internal_set_created_utc_timestamps(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCredentialRequest.created_utc_timestamps)
}

// uint64 modified_utc_timestamps = 5;
inline void CreateCredentialRequest::clear_modified_utc_timestamps() {
  _impl_.modified_utc_timestamps_ = uint64_t{0u};
}
inline uint64_t CreateCredentialRequest::_internal_modified_utc_timestamps() const {
  return _impl_.modified_utc_timestamps_;
}
inline uint64_t CreateCredentialRequest::modified_utc_timestamps() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateCredentialRequest.modified_utc_timestamps)
  return _internal_modified_utc_timestamps();
}
inline void CreateCredentialRequest::_internal_set_modified_utc_timestamps(uint64_t value) {
  
  _impl_.modified_utc_timestamps_ = value;
}
inline void CreateCredentialRequest::set_modified_utc_timestamps(uint64_t value) {
  _internal_set_modified_utc_timestamps(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateCredentialRequest.modified_utc_timestamps)
}

// -------------------------------------------------------------------

// UpdateCredentialRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool UpdateCredentialRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool UpdateCredentialRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& UpdateCredentialRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& UpdateCredentialRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UpdateCredentialRequest.base)
  return _internal_base();
}
inline void UpdateCredentialRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.UpdateCredentialRequest.base)
}
inline ::milvus::proto::common::MsgBase* UpdateCredentialRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* UpdateCredentialRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.UpdateCredentialRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* UpdateCredentialRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* UpdateCredentialRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.UpdateCredentialRequest.base)
  return _msg;
}
inline void UpdateCredentialRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.UpdateCredentialRequest.base)
}

// string username = 2;
inline void UpdateCredentialRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UpdateCredentialRequest::username() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UpdateCredentialRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCredentialRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.UpdateCredentialRequest.username)
}
inline std::string* UpdateCredentialRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.UpdateCredentialRequest.username)
  return _s;
}
inline const std::string& UpdateCredentialRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UpdateCredentialRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateCredentialRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateCredentialRequest::release_username() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.UpdateCredentialRequest.username)
  return _impl_.username_.Release();
}
inline void UpdateCredentialRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.UpdateCredentialRequest.username)
}

// string oldPassword = 3;
inline void UpdateCredentialRequest::clear_oldpassword() {
  _impl_.oldpassword_.ClearToEmpty();
}
inline const std::string& UpdateCredentialRequest::oldpassword() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UpdateCredentialRequest.oldPassword)
  return _internal_oldpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCredentialRequest::set_oldpassword(ArgT0&& arg0, ArgT... args) {
 
 _impl_.oldpassword_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.UpdateCredentialRequest.oldPassword)
}
inline std::string* UpdateCredentialRequest::mutable_oldpassword() {
  std::string* _s = _internal_mutable_oldpassword();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.UpdateCredentialRequest.oldPassword)
  return _s;
}
inline const std::string& UpdateCredentialRequest::_internal_oldpassword() const {
  return _impl_.oldpassword_.Get();
}
inline void UpdateCredentialRequest::_internal_set_oldpassword(const std::string& value) {
  
  _impl_.oldpassword_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateCredentialRequest::_internal_mutable_oldpassword() {
  
  return _impl_.oldpassword_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateCredentialRequest::release_oldpassword() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.UpdateCredentialRequest.oldPassword)
  return _impl_.oldpassword_.Release();
}
inline void UpdateCredentialRequest::set_allocated_oldpassword(std::string* oldpassword) {
  if (oldpassword != nullptr) {
    
  } else {
    
  }
  _impl_.oldpassword_.SetAllocated(oldpassword, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oldpassword_.IsDefault()) {
    _impl_.oldpassword_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.UpdateCredentialRequest.oldPassword)
}

// string newPassword = 4;
inline void UpdateCredentialRequest::clear_newpassword() {
  _impl_.newpassword_.ClearToEmpty();
}
inline const std::string& UpdateCredentialRequest::newpassword() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UpdateCredentialRequest.newPassword)
  return _internal_newpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCredentialRequest::set_newpassword(ArgT0&& arg0, ArgT... args) {
 
 _impl_.newpassword_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.UpdateCredentialRequest.newPassword)
}
inline std::string* UpdateCredentialRequest::mutable_newpassword() {
  std::string* _s = _internal_mutable_newpassword();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.UpdateCredentialRequest.newPassword)
  return _s;
}
inline const std::string& UpdateCredentialRequest::_internal_newpassword() const {
  return _impl_.newpassword_.Get();
}
inline void UpdateCredentialRequest::_internal_set_newpassword(const std::string& value) {
  
  _impl_.newpassword_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateCredentialRequest::_internal_mutable_newpassword() {
  
  return _impl_.newpassword_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateCredentialRequest::release_newpassword() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.UpdateCredentialRequest.newPassword)
  return _impl_.newpassword_.Release();
}
inline void UpdateCredentialRequest::set_allocated_newpassword(std::string* newpassword) {
  if (newpassword != nullptr) {
    
  } else {
    
  }
  _impl_.newpassword_.SetAllocated(newpassword, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newpassword_.IsDefault()) {
    _impl_.newpassword_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.UpdateCredentialRequest.newPassword)
}

// uint64 created_utc_timestamps = 5;
inline void UpdateCredentialRequest::clear_created_utc_timestamps() {
  _impl_.created_utc_timestamps_ = uint64_t{0u};
}
inline uint64_t UpdateCredentialRequest::_internal_created_utc_timestamps() const {
  return _impl_.created_utc_timestamps_;
}
inline uint64_t UpdateCredentialRequest::created_utc_timestamps() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UpdateCredentialRequest.created_utc_timestamps)
  return _internal_created_utc_timestamps();
}
inline void UpdateCredentialRequest::_internal_set_created_utc_timestamps(uint64_t value) {
  
  _impl_.created_utc_timestamps_ = value;
}
inline void UpdateCredentialRequest::set_created_utc_timestamps(uint64_t value) {
  _internal_set_created_utc_timestamps(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.UpdateCredentialRequest.created_utc_timestamps)
}

// uint64 modified_utc_timestamps = 6;
inline void UpdateCredentialRequest::clear_modified_utc_timestamps() {
  _impl_.modified_utc_timestamps_ = uint64_t{0u};
}
inline uint64_t UpdateCredentialRequest::_internal_modified_utc_timestamps() const {
  return _impl_.modified_utc_timestamps_;
}
inline uint64_t UpdateCredentialRequest::modified_utc_timestamps() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UpdateCredentialRequest.modified_utc_timestamps)
  return _internal_modified_utc_timestamps();
}
inline void UpdateCredentialRequest::_internal_set_modified_utc_timestamps(uint64_t value) {
  
  _impl_.modified_utc_timestamps_ = value;
}
inline void UpdateCredentialRequest::set_modified_utc_timestamps(uint64_t value) {
  _internal_set_modified_utc_timestamps(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.UpdateCredentialRequest.modified_utc_timestamps)
}

// -------------------------------------------------------------------

// DeleteCredentialRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DeleteCredentialRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DeleteCredentialRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DeleteCredentialRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DeleteCredentialRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DeleteCredentialRequest.base)
  return _internal_base();
}
inline void DeleteCredentialRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DeleteCredentialRequest.base)
}
inline ::milvus::proto::common::MsgBase* DeleteCredentialRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DeleteCredentialRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DeleteCredentialRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DeleteCredentialRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DeleteCredentialRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DeleteCredentialRequest.base)
  return _msg;
}
inline void DeleteCredentialRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DeleteCredentialRequest.base)
}

// string username = 2;
inline void DeleteCredentialRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& DeleteCredentialRequest::username() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DeleteCredentialRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteCredentialRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DeleteCredentialRequest.username)
}
inline std::string* DeleteCredentialRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DeleteCredentialRequest.username)
  return _s;
}
inline const std::string& DeleteCredentialRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void DeleteCredentialRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteCredentialRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteCredentialRequest::release_username() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DeleteCredentialRequest.username)
  return _impl_.username_.Release();
}
inline void DeleteCredentialRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DeleteCredentialRequest.username)
}

// -------------------------------------------------------------------

// ListCredUsersResponse

// .milvus.proto.common.Status status = 1;
inline bool ListCredUsersResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ListCredUsersResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ListCredUsersResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ListCredUsersResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListCredUsersResponse.status)
  return _internal_status();
}
inline void ListCredUsersResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ListCredUsersResponse.status)
}
inline ::milvus::proto::common::Status* ListCredUsersResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ListCredUsersResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListCredUsersResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ListCredUsersResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ListCredUsersResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListCredUsersResponse.status)
  return _msg;
}
inline void ListCredUsersResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListCredUsersResponse.status)
}

// repeated string usernames = 2;
inline int ListCredUsersResponse::_internal_usernames_size() const {
  return _impl_.usernames_.size();
}
inline int ListCredUsersResponse::usernames_size() const {
  return _internal_usernames_size();
}
inline void ListCredUsersResponse::clear_usernames() {
  _impl_.usernames_.Clear();
}
inline std::string* ListCredUsersResponse::add_usernames() {
  std::string* _s = _internal_add_usernames();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ListCredUsersResponse.usernames)
  return _s;
}
inline const std::string& ListCredUsersResponse::_internal_usernames(int index) const {
  return _impl_.usernames_.Get(index);
}
inline const std::string& ListCredUsersResponse::usernames(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListCredUsersResponse.usernames)
  return _internal_usernames(index);
}
inline std::string* ListCredUsersResponse::mutable_usernames(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListCredUsersResponse.usernames)
  return _impl_.usernames_.Mutable(index);
}
inline void ListCredUsersResponse::set_usernames(int index, const std::string& value) {
  _impl_.usernames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListCredUsersResponse.usernames)
}
inline void ListCredUsersResponse::set_usernames(int index, std::string&& value) {
  _impl_.usernames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListCredUsersResponse.usernames)
}
inline void ListCredUsersResponse::set_usernames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.usernames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ListCredUsersResponse.usernames)
}
inline void ListCredUsersResponse::set_usernames(int index, const char* value, size_t size) {
  _impl_.usernames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ListCredUsersResponse.usernames)
}
inline std::string* ListCredUsersResponse::_internal_add_usernames() {
  return _impl_.usernames_.Add();
}
inline void ListCredUsersResponse::add_usernames(const std::string& value) {
  _impl_.usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ListCredUsersResponse.usernames)
}
inline void ListCredUsersResponse::add_usernames(std::string&& value) {
  _impl_.usernames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ListCredUsersResponse.usernames)
}
inline void ListCredUsersResponse::add_usernames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ListCredUsersResponse.usernames)
}
inline void ListCredUsersResponse::add_usernames(const char* value, size_t size) {
  _impl_.usernames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ListCredUsersResponse.usernames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListCredUsersResponse::usernames() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ListCredUsersResponse.usernames)
  return _impl_.usernames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListCredUsersResponse::mutable_usernames() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ListCredUsersResponse.usernames)
  return &_impl_.usernames_;
}

// -------------------------------------------------------------------

// ListCredUsersRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ListCredUsersRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ListCredUsersRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ListCredUsersRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ListCredUsersRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListCredUsersRequest.base)
  return _internal_base();
}
inline void ListCredUsersRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ListCredUsersRequest.base)
}
inline ::milvus::proto::common::MsgBase* ListCredUsersRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ListCredUsersRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListCredUsersRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ListCredUsersRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ListCredUsersRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListCredUsersRequest.base)
  return _msg;
}
inline void ListCredUsersRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListCredUsersRequest.base)
}

// -------------------------------------------------------------------

// RoleEntity

// string name = 1;
inline void RoleEntity::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RoleEntity::name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.RoleEntity.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleEntity::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.RoleEntity.name)
}
inline std::string* RoleEntity::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.RoleEntity.name)
  return _s;
}
inline const std::string& RoleEntity::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RoleEntity::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleEntity::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleEntity::release_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.RoleEntity.name)
  return _impl_.name_.Release();
}
inline void RoleEntity::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.RoleEntity.name)
}

// -------------------------------------------------------------------

// UserEntity

// string name = 1;
inline void UserEntity::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserEntity::name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UserEntity.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEntity::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.UserEntity.name)
}
inline std::string* UserEntity::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.UserEntity.name)
  return _s;
}
inline const std::string& UserEntity::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UserEntity::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEntity::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEntity::release_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.UserEntity.name)
  return _impl_.name_.Release();
}
inline void UserEntity::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.UserEntity.name)
}

// -------------------------------------------------------------------

// CreateRoleRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreateRoleRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool CreateRoleRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CreateRoleRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CreateRoleRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateRoleRequest.base)
  return _internal_base();
}
inline void CreateRoleRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CreateRoleRequest.base)
}
inline ::milvus::proto::common::MsgBase* CreateRoleRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateRoleRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateRoleRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateRoleRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* CreateRoleRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateRoleRequest.base)
  return _msg;
}
inline void CreateRoleRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateRoleRequest.base)
}

// .milvus.proto.milvus.RoleEntity entity = 2;
inline bool CreateRoleRequest::_internal_has_entity() const {
  return this != internal_default_instance() && _impl_.entity_ != nullptr;
}
inline bool CreateRoleRequest::has_entity() const {
  return _internal_has_entity();
}
inline void CreateRoleRequest::clear_entity() {
  if (GetArenaForAllocation() == nullptr && _impl_.entity_ != nullptr) {
    delete _impl_.entity_;
  }
  _impl_.entity_ = nullptr;
}
inline const ::milvus::proto::milvus::RoleEntity& CreateRoleRequest::_internal_entity() const {
  const ::milvus::proto::milvus::RoleEntity* p = _impl_.entity_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::RoleEntity&>(
      ::milvus::proto::milvus::_RoleEntity_default_instance_);
}
inline const ::milvus::proto::milvus::RoleEntity& CreateRoleRequest::entity() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateRoleRequest.entity)
  return _internal_entity();
}
inline void CreateRoleRequest::unsafe_arena_set_allocated_entity(
    ::milvus::proto::milvus::RoleEntity* entity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_);
  }
  _impl_.entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CreateRoleRequest.entity)
}
inline ::milvus::proto::milvus::RoleEntity* CreateRoleRequest::release_entity() {
  
  ::milvus::proto::milvus::RoleEntity* temp = _impl_.entity_;
  _impl_.entity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::RoleEntity* CreateRoleRequest::unsafe_arena_release_entity() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateRoleRequest.entity)
  
  ::milvus::proto::milvus::RoleEntity* temp = _impl_.entity_;
  _impl_.entity_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::RoleEntity* CreateRoleRequest::_internal_mutable_entity() {
  
  if (_impl_.entity_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::RoleEntity>(GetArenaForAllocation());
    _impl_.entity_ = p;
  }
  return _impl_.entity_;
}
inline ::milvus::proto::milvus::RoleEntity* CreateRoleRequest::mutable_entity() {
  ::milvus::proto::milvus::RoleEntity* _msg = _internal_mutable_entity();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateRoleRequest.entity)
  return _msg;
}
inline void CreateRoleRequest::set_allocated_entity(::milvus::proto::milvus::RoleEntity* entity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.entity_;
  }
  if (entity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(entity);
    if (message_arena != submessage_arena) {
      entity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateRoleRequest.entity)
}

// -------------------------------------------------------------------

// DropRoleRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropRoleRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DropRoleRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DropRoleRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DropRoleRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropRoleRequest.base)
  return _internal_base();
}
inline void DropRoleRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DropRoleRequest.base)
}
inline ::milvus::proto::common::MsgBase* DropRoleRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropRoleRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropRoleRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropRoleRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DropRoleRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropRoleRequest.base)
  return _msg;
}
inline void DropRoleRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropRoleRequest.base)
}

// string role_name = 2;
inline void DropRoleRequest::clear_role_name() {
  _impl_.role_name_.ClearToEmpty();
}
inline const std::string& DropRoleRequest::role_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropRoleRequest.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropRoleRequest::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropRoleRequest.role_name)
}
inline std::string* DropRoleRequest::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropRoleRequest.role_name)
  return _s;
}
inline const std::string& DropRoleRequest::_internal_role_name() const {
  return _impl_.role_name_.Get();
}
inline void DropRoleRequest::_internal_set_role_name(const std::string& value) {
  
  _impl_.role_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropRoleRequest::_internal_mutable_role_name() {
  
  return _impl_.role_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropRoleRequest::release_role_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropRoleRequest.role_name)
  return _impl_.role_name_.Release();
}
inline void DropRoleRequest::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  _impl_.role_name_.SetAllocated(role_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_name_.IsDefault()) {
    _impl_.role_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropRoleRequest.role_name)
}

// -------------------------------------------------------------------

// OperateUserRoleRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool OperateUserRoleRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool OperateUserRoleRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& OperateUserRoleRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& OperateUserRoleRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.OperateUserRoleRequest.base)
  return _internal_base();
}
inline void OperateUserRoleRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.OperateUserRoleRequest.base)
}
inline ::milvus::proto::common::MsgBase* OperateUserRoleRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* OperateUserRoleRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.OperateUserRoleRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* OperateUserRoleRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* OperateUserRoleRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.OperateUserRoleRequest.base)
  return _msg;
}
inline void OperateUserRoleRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.OperateUserRoleRequest.base)
}

// string username = 2;
inline void OperateUserRoleRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& OperateUserRoleRequest::username() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.OperateUserRoleRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperateUserRoleRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.OperateUserRoleRequest.username)
}
inline std::string* OperateUserRoleRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.OperateUserRoleRequest.username)
  return _s;
}
inline const std::string& OperateUserRoleRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void OperateUserRoleRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* OperateUserRoleRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* OperateUserRoleRequest::release_username() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.OperateUserRoleRequest.username)
  return _impl_.username_.Release();
}
inline void OperateUserRoleRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.OperateUserRoleRequest.username)
}

// string role_name = 3;
inline void OperateUserRoleRequest::clear_role_name() {
  _impl_.role_name_.ClearToEmpty();
}
inline const std::string& OperateUserRoleRequest::role_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.OperateUserRoleRequest.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperateUserRoleRequest::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.OperateUserRoleRequest.role_name)
}
inline std::string* OperateUserRoleRequest::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.OperateUserRoleRequest.role_name)
  return _s;
}
inline const std::string& OperateUserRoleRequest::_internal_role_name() const {
  return _impl_.role_name_.Get();
}
inline void OperateUserRoleRequest::_internal_set_role_name(const std::string& value) {
  
  _impl_.role_name_.Set(value, GetArenaForAllocation());
}
inline std::string* OperateUserRoleRequest::_internal_mutable_role_name() {
  
  return _impl_.role_name_.Mutable(GetArenaForAllocation());
}
inline std::string* OperateUserRoleRequest::release_role_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.OperateUserRoleRequest.role_name)
  return _impl_.role_name_.Release();
}
inline void OperateUserRoleRequest::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  _impl_.role_name_.SetAllocated(role_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_name_.IsDefault()) {
    _impl_.role_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.OperateUserRoleRequest.role_name)
}

// .milvus.proto.milvus.OperateUserRoleType type = 4;
inline void OperateUserRoleRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::milvus::proto::milvus::OperateUserRoleType OperateUserRoleRequest::_internal_type() const {
  return static_cast< ::milvus::proto::milvus::OperateUserRoleType >(_impl_.type_);
}
inline ::milvus::proto::milvus::OperateUserRoleType OperateUserRoleRequest::type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.OperateUserRoleRequest.type)
  return _internal_type();
}
inline void OperateUserRoleRequest::_internal_set_type(::milvus::proto::milvus::OperateUserRoleType value) {
  
  _impl_.type_ = value;
}
inline void OperateUserRoleRequest::set_type(::milvus::proto::milvus::OperateUserRoleType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.OperateUserRoleRequest.type)
}

// -------------------------------------------------------------------

// SelectRoleRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool SelectRoleRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SelectRoleRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& SelectRoleRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& SelectRoleRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SelectRoleRequest.base)
  return _internal_base();
}
inline void SelectRoleRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.SelectRoleRequest.base)
}
inline ::milvus::proto::common::MsgBase* SelectRoleRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* SelectRoleRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SelectRoleRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* SelectRoleRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* SelectRoleRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SelectRoleRequest.base)
  return _msg;
}
inline void SelectRoleRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SelectRoleRequest.base)
}

// .milvus.proto.milvus.RoleEntity role = 2;
inline bool SelectRoleRequest::_internal_has_role() const {
  return this != internal_default_instance() && _impl_.role_ != nullptr;
}
inline bool SelectRoleRequest::has_role() const {
  return _internal_has_role();
}
inline void SelectRoleRequest::clear_role() {
  if (GetArenaForAllocation() == nullptr && _impl_.role_ != nullptr) {
    delete _impl_.role_;
  }
  _impl_.role_ = nullptr;
}
inline const ::milvus::proto::milvus::RoleEntity& SelectRoleRequest::_internal_role() const {
  const ::milvus::proto::milvus::RoleEntity* p = _impl_.role_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::RoleEntity&>(
      ::milvus::proto::milvus::_RoleEntity_default_instance_);
}
inline const ::milvus::proto::milvus::RoleEntity& SelectRoleRequest::role() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SelectRoleRequest.role)
  return _internal_role();
}
inline void SelectRoleRequest::unsafe_arena_set_allocated_role(
    ::milvus::proto::milvus::RoleEntity* role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.role_);
  }
  _impl_.role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.SelectRoleRequest.role)
}
inline ::milvus::proto::milvus::RoleEntity* SelectRoleRequest::release_role() {
  
  ::milvus::proto::milvus::RoleEntity* temp = _impl_.role_;
  _impl_.role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::RoleEntity* SelectRoleRequest::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SelectRoleRequest.role)
  
  ::milvus::proto::milvus::RoleEntity* temp = _impl_.role_;
  _impl_.role_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::RoleEntity* SelectRoleRequest::_internal_mutable_role() {
  
  if (_impl_.role_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::RoleEntity>(GetArenaForAllocation());
    _impl_.role_ = p;
  }
  return _impl_.role_;
}
inline ::milvus::proto::milvus::RoleEntity* SelectRoleRequest::mutable_role() {
  ::milvus::proto::milvus::RoleEntity* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SelectRoleRequest.role)
  return _msg;
}
inline void SelectRoleRequest::set_allocated_role(::milvus::proto::milvus::RoleEntity* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(role);
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.role_ = role;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SelectRoleRequest.role)
}

// bool include_user_info = 3;
inline void SelectRoleRequest::clear_include_user_info() {
  _impl_.include_user_info_ = false;
}
inline bool SelectRoleRequest::_internal_include_user_info() const {
  return _impl_.include_user_info_;
}
inline bool SelectRoleRequest::include_user_info() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SelectRoleRequest.include_user_info)
  return _internal_include_user_info();
}
inline void SelectRoleRequest::_internal_set_include_user_info(bool value) {
  
  _impl_.include_user_info_ = value;
}
inline void SelectRoleRequest::set_include_user_info(bool value) {
  _internal_set_include_user_info(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SelectRoleRequest.include_user_info)
}

// -------------------------------------------------------------------

// RoleResult

// .milvus.proto.milvus.RoleEntity role = 1;
inline bool RoleResult::_internal_has_role() const {
  return this != internal_default_instance() && _impl_.role_ != nullptr;
}
inline bool RoleResult::has_role() const {
  return _internal_has_role();
}
inline void RoleResult::clear_role() {
  if (GetArenaForAllocation() == nullptr && _impl_.role_ != nullptr) {
    delete _impl_.role_;
  }
  _impl_.role_ = nullptr;
}
inline const ::milvus::proto::milvus::RoleEntity& RoleResult::_internal_role() const {
  const ::milvus::proto::milvus::RoleEntity* p = _impl_.role_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::RoleEntity&>(
      ::milvus::proto::milvus::_RoleEntity_default_instance_);
}
inline const ::milvus::proto::milvus::RoleEntity& RoleResult::role() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.RoleResult.role)
  return _internal_role();
}
inline void RoleResult::unsafe_arena_set_allocated_role(
    ::milvus::proto::milvus::RoleEntity* role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.role_);
  }
  _impl_.role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.RoleResult.role)
}
inline ::milvus::proto::milvus::RoleEntity* RoleResult::release_role() {
  
  ::milvus::proto::milvus::RoleEntity* temp = _impl_.role_;
  _impl_.role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::RoleEntity* RoleResult::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.RoleResult.role)
  
  ::milvus::proto::milvus::RoleEntity* temp = _impl_.role_;
  _impl_.role_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::RoleEntity* RoleResult::_internal_mutable_role() {
  
  if (_impl_.role_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::RoleEntity>(GetArenaForAllocation());
    _impl_.role_ = p;
  }
  return _impl_.role_;
}
inline ::milvus::proto::milvus::RoleEntity* RoleResult::mutable_role() {
  ::milvus::proto::milvus::RoleEntity* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.RoleResult.role)
  return _msg;
}
inline void RoleResult::set_allocated_role(::milvus::proto::milvus::RoleEntity* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(role);
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.role_ = role;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.RoleResult.role)
}

// repeated .milvus.proto.milvus.UserEntity users = 2;
inline int RoleResult::_internal_users_size() const {
  return _impl_.users_.size();
}
inline int RoleResult::users_size() const {
  return _internal_users_size();
}
inline void RoleResult::clear_users() {
  _impl_.users_.Clear();
}
inline ::milvus::proto::milvus::UserEntity* RoleResult::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.RoleResult.users)
  return _impl_.users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::UserEntity >*
RoleResult::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.RoleResult.users)
  return &_impl_.users_;
}
inline const ::milvus::proto::milvus::UserEntity& RoleResult::_internal_users(int index) const {
  return _impl_.users_.Get(index);
}
inline const ::milvus::proto::milvus::UserEntity& RoleResult::users(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.RoleResult.users)
  return _internal_users(index);
}
inline ::milvus::proto::milvus::UserEntity* RoleResult::_internal_add_users() {
  return _impl_.users_.Add();
}
inline ::milvus::proto::milvus::UserEntity* RoleResult::add_users() {
  ::milvus::proto::milvus::UserEntity* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.RoleResult.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::UserEntity >&
RoleResult::users() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.RoleResult.users)
  return _impl_.users_;
}

// -------------------------------------------------------------------

// SelectRoleResponse

// .milvus.proto.common.Status status = 1;
inline bool SelectRoleResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool SelectRoleResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& SelectRoleResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& SelectRoleResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SelectRoleResponse.status)
  return _internal_status();
}
inline void SelectRoleResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.SelectRoleResponse.status)
}
inline ::milvus::proto::common::Status* SelectRoleResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* SelectRoleResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SelectRoleResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* SelectRoleResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* SelectRoleResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SelectRoleResponse.status)
  return _msg;
}
inline void SelectRoleResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SelectRoleResponse.status)
}

// repeated .milvus.proto.milvus.RoleResult results = 2;
inline int SelectRoleResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int SelectRoleResponse::results_size() const {
  return _internal_results_size();
}
inline void SelectRoleResponse::clear_results() {
  _impl_.results_.Clear();
}
inline ::milvus::proto::milvus::RoleResult* SelectRoleResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SelectRoleResponse.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::RoleResult >*
SelectRoleResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.SelectRoleResponse.results)
  return &_impl_.results_;
}
inline const ::milvus::proto::milvus::RoleResult& SelectRoleResponse::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::milvus::proto::milvus::RoleResult& SelectRoleResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SelectRoleResponse.results)
  return _internal_results(index);
}
inline ::milvus::proto::milvus::RoleResult* SelectRoleResponse::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::milvus::proto::milvus::RoleResult* SelectRoleResponse::add_results() {
  ::milvus::proto::milvus::RoleResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.SelectRoleResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::RoleResult >&
SelectRoleResponse::results() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.SelectRoleResponse.results)
  return _impl_.results_;
}

// -------------------------------------------------------------------

// SelectUserRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool SelectUserRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SelectUserRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& SelectUserRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& SelectUserRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SelectUserRequest.base)
  return _internal_base();
}
inline void SelectUserRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.SelectUserRequest.base)
}
inline ::milvus::proto::common::MsgBase* SelectUserRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* SelectUserRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SelectUserRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* SelectUserRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* SelectUserRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SelectUserRequest.base)
  return _msg;
}
inline void SelectUserRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SelectUserRequest.base)
}

// .milvus.proto.milvus.UserEntity user = 2;
inline bool SelectUserRequest::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool SelectUserRequest::has_user() const {
  return _internal_has_user();
}
inline void SelectUserRequest::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
inline const ::milvus::proto::milvus::UserEntity& SelectUserRequest::_internal_user() const {
  const ::milvus::proto::milvus::UserEntity* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::UserEntity&>(
      ::milvus::proto::milvus::_UserEntity_default_instance_);
}
inline const ::milvus::proto::milvus::UserEntity& SelectUserRequest::user() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SelectUserRequest.user)
  return _internal_user();
}
inline void SelectUserRequest::unsafe_arena_set_allocated_user(
    ::milvus::proto::milvus::UserEntity* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.SelectUserRequest.user)
}
inline ::milvus::proto::milvus::UserEntity* SelectUserRequest::release_user() {
  
  ::milvus::proto::milvus::UserEntity* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::UserEntity* SelectUserRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SelectUserRequest.user)
  
  ::milvus::proto::milvus::UserEntity* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::UserEntity* SelectUserRequest::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::UserEntity>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::milvus::proto::milvus::UserEntity* SelectUserRequest::mutable_user() {
  ::milvus::proto::milvus::UserEntity* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SelectUserRequest.user)
  return _msg;
}
inline void SelectUserRequest::set_allocated_user(::milvus::proto::milvus::UserEntity* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SelectUserRequest.user)
}

// bool include_role_info = 3;
inline void SelectUserRequest::clear_include_role_info() {
  _impl_.include_role_info_ = false;
}
inline bool SelectUserRequest::_internal_include_role_info() const {
  return _impl_.include_role_info_;
}
inline bool SelectUserRequest::include_role_info() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SelectUserRequest.include_role_info)
  return _internal_include_role_info();
}
inline void SelectUserRequest::_internal_set_include_role_info(bool value) {
  
  _impl_.include_role_info_ = value;
}
inline void SelectUserRequest::set_include_role_info(bool value) {
  _internal_set_include_role_info(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.SelectUserRequest.include_role_info)
}

// -------------------------------------------------------------------

// UserResult

// .milvus.proto.milvus.UserEntity user = 1;
inline bool UserResult::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool UserResult::has_user() const {
  return _internal_has_user();
}
inline void UserResult::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
inline const ::milvus::proto::milvus::UserEntity& UserResult::_internal_user() const {
  const ::milvus::proto::milvus::UserEntity* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::UserEntity&>(
      ::milvus::proto::milvus::_UserEntity_default_instance_);
}
inline const ::milvus::proto::milvus::UserEntity& UserResult::user() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UserResult.user)
  return _internal_user();
}
inline void UserResult::unsafe_arena_set_allocated_user(
    ::milvus::proto::milvus::UserEntity* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.UserResult.user)
}
inline ::milvus::proto::milvus::UserEntity* UserResult::release_user() {
  
  ::milvus::proto::milvus::UserEntity* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::UserEntity* UserResult::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.UserResult.user)
  
  ::milvus::proto::milvus::UserEntity* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::UserEntity* UserResult::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::UserEntity>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::milvus::proto::milvus::UserEntity* UserResult::mutable_user() {
  ::milvus::proto::milvus::UserEntity* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.UserResult.user)
  return _msg;
}
inline void UserResult::set_allocated_user(::milvus::proto::milvus::UserEntity* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.UserResult.user)
}

// repeated .milvus.proto.milvus.RoleEntity roles = 2;
inline int UserResult::_internal_roles_size() const {
  return _impl_.roles_.size();
}
inline int UserResult::roles_size() const {
  return _internal_roles_size();
}
inline void UserResult::clear_roles() {
  _impl_.roles_.Clear();
}
inline ::milvus::proto::milvus::RoleEntity* UserResult::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.UserResult.roles)
  return _impl_.roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::RoleEntity >*
UserResult::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.UserResult.roles)
  return &_impl_.roles_;
}
inline const ::milvus::proto::milvus::RoleEntity& UserResult::_internal_roles(int index) const {
  return _impl_.roles_.Get(index);
}
inline const ::milvus::proto::milvus::RoleEntity& UserResult::roles(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.UserResult.roles)
  return _internal_roles(index);
}
inline ::milvus::proto::milvus::RoleEntity* UserResult::_internal_add_roles() {
  return _impl_.roles_.Add();
}
inline ::milvus::proto::milvus::RoleEntity* UserResult::add_roles() {
  ::milvus::proto::milvus::RoleEntity* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.UserResult.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::RoleEntity >&
UserResult::roles() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.UserResult.roles)
  return _impl_.roles_;
}

// -------------------------------------------------------------------

// SelectUserResponse

// .milvus.proto.common.Status status = 1;
inline bool SelectUserResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool SelectUserResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& SelectUserResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& SelectUserResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SelectUserResponse.status)
  return _internal_status();
}
inline void SelectUserResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.SelectUserResponse.status)
}
inline ::milvus::proto::common::Status* SelectUserResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* SelectUserResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SelectUserResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* SelectUserResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* SelectUserResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SelectUserResponse.status)
  return _msg;
}
inline void SelectUserResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SelectUserResponse.status)
}

// repeated .milvus.proto.milvus.UserResult results = 2;
inline int SelectUserResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int SelectUserResponse::results_size() const {
  return _internal_results_size();
}
inline void SelectUserResponse::clear_results() {
  _impl_.results_.Clear();
}
inline ::milvus::proto::milvus::UserResult* SelectUserResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SelectUserResponse.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::UserResult >*
SelectUserResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.SelectUserResponse.results)
  return &_impl_.results_;
}
inline const ::milvus::proto::milvus::UserResult& SelectUserResponse::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::milvus::proto::milvus::UserResult& SelectUserResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SelectUserResponse.results)
  return _internal_results(index);
}
inline ::milvus::proto::milvus::UserResult* SelectUserResponse::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::milvus::proto::milvus::UserResult* SelectUserResponse::add_results() {
  ::milvus::proto::milvus::UserResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.SelectUserResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::UserResult >&
SelectUserResponse::results() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.SelectUserResponse.results)
  return _impl_.results_;
}

// -------------------------------------------------------------------

// ObjectEntity

// string name = 1;
inline void ObjectEntity::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ObjectEntity::name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ObjectEntity.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectEntity::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ObjectEntity.name)
}
inline std::string* ObjectEntity::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ObjectEntity.name)
  return _s;
}
inline const std::string& ObjectEntity::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ObjectEntity::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectEntity::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectEntity::release_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ObjectEntity.name)
  return _impl_.name_.Release();
}
inline void ObjectEntity::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ObjectEntity.name)
}

// -------------------------------------------------------------------

// PrivilegeEntity

// string name = 1;
inline void PrivilegeEntity::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PrivilegeEntity::name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.PrivilegeEntity.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrivilegeEntity::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.PrivilegeEntity.name)
}
inline std::string* PrivilegeEntity::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.PrivilegeEntity.name)
  return _s;
}
inline const std::string& PrivilegeEntity::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PrivilegeEntity::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PrivilegeEntity::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PrivilegeEntity::release_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.PrivilegeEntity.name)
  return _impl_.name_.Release();
}
inline void PrivilegeEntity::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.PrivilegeEntity.name)
}

// -------------------------------------------------------------------

// GrantorEntity

// .milvus.proto.milvus.UserEntity user = 1;
inline bool GrantorEntity::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool GrantorEntity::has_user() const {
  return _internal_has_user();
}
inline void GrantorEntity::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
inline const ::milvus::proto::milvus::UserEntity& GrantorEntity::_internal_user() const {
  const ::milvus::proto::milvus::UserEntity* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::UserEntity&>(
      ::milvus::proto::milvus::_UserEntity_default_instance_);
}
inline const ::milvus::proto::milvus::UserEntity& GrantorEntity::user() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GrantorEntity.user)
  return _internal_user();
}
inline void GrantorEntity::unsafe_arena_set_allocated_user(
    ::milvus::proto::milvus::UserEntity* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GrantorEntity.user)
}
inline ::milvus::proto::milvus::UserEntity* GrantorEntity::release_user() {
  
  ::milvus::proto::milvus::UserEntity* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::UserEntity* GrantorEntity::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GrantorEntity.user)
  
  ::milvus::proto::milvus::UserEntity* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::UserEntity* GrantorEntity::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::UserEntity>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::milvus::proto::milvus::UserEntity* GrantorEntity::mutable_user() {
  ::milvus::proto::milvus::UserEntity* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GrantorEntity.user)
  return _msg;
}
inline void GrantorEntity::set_allocated_user(::milvus::proto::milvus::UserEntity* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GrantorEntity.user)
}

// .milvus.proto.milvus.PrivilegeEntity privilege = 2;
inline bool GrantorEntity::_internal_has_privilege() const {
  return this != internal_default_instance() && _impl_.privilege_ != nullptr;
}
inline bool GrantorEntity::has_privilege() const {
  return _internal_has_privilege();
}
inline void GrantorEntity::clear_privilege() {
  if (GetArenaForAllocation() == nullptr && _impl_.privilege_ != nullptr) {
    delete _impl_.privilege_;
  }
  _impl_.privilege_ = nullptr;
}
inline const ::milvus::proto::milvus::PrivilegeEntity& GrantorEntity::_internal_privilege() const {
  const ::milvus::proto::milvus::PrivilegeEntity* p = _impl_.privilege_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::PrivilegeEntity&>(
      ::milvus::proto::milvus::_PrivilegeEntity_default_instance_);
}
inline const ::milvus::proto::milvus::PrivilegeEntity& GrantorEntity::privilege() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GrantorEntity.privilege)
  return _internal_privilege();
}
inline void GrantorEntity::unsafe_arena_set_allocated_privilege(
    ::milvus::proto::milvus::PrivilegeEntity* privilege) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.privilege_);
  }
  _impl_.privilege_ = privilege;
  if (privilege) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GrantorEntity.privilege)
}
inline ::milvus::proto::milvus::PrivilegeEntity* GrantorEntity::release_privilege() {
  
  ::milvus::proto::milvus::PrivilegeEntity* temp = _impl_.privilege_;
  _impl_.privilege_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::PrivilegeEntity* GrantorEntity::unsafe_arena_release_privilege() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GrantorEntity.privilege)
  
  ::milvus::proto::milvus::PrivilegeEntity* temp = _impl_.privilege_;
  _impl_.privilege_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::PrivilegeEntity* GrantorEntity::_internal_mutable_privilege() {
  
  if (_impl_.privilege_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::PrivilegeEntity>(GetArenaForAllocation());
    _impl_.privilege_ = p;
  }
  return _impl_.privilege_;
}
inline ::milvus::proto::milvus::PrivilegeEntity* GrantorEntity::mutable_privilege() {
  ::milvus::proto::milvus::PrivilegeEntity* _msg = _internal_mutable_privilege();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GrantorEntity.privilege)
  return _msg;
}
inline void GrantorEntity::set_allocated_privilege(::milvus::proto::milvus::PrivilegeEntity* privilege) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.privilege_;
  }
  if (privilege) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(privilege);
    if (message_arena != submessage_arena) {
      privilege = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, privilege, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.privilege_ = privilege;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GrantorEntity.privilege)
}

// -------------------------------------------------------------------

// GrantPrivilegeEntity

// repeated .milvus.proto.milvus.GrantorEntity entities = 1;
inline int GrantPrivilegeEntity::_internal_entities_size() const {
  return _impl_.entities_.size();
}
inline int GrantPrivilegeEntity::entities_size() const {
  return _internal_entities_size();
}
inline void GrantPrivilegeEntity::clear_entities() {
  _impl_.entities_.Clear();
}
inline ::milvus::proto::milvus::GrantorEntity* GrantPrivilegeEntity::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GrantPrivilegeEntity.entities)
  return _impl_.entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GrantorEntity >*
GrantPrivilegeEntity::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GrantPrivilegeEntity.entities)
  return &_impl_.entities_;
}
inline const ::milvus::proto::milvus::GrantorEntity& GrantPrivilegeEntity::_internal_entities(int index) const {
  return _impl_.entities_.Get(index);
}
inline const ::milvus::proto::milvus::GrantorEntity& GrantPrivilegeEntity::entities(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GrantPrivilegeEntity.entities)
  return _internal_entities(index);
}
inline ::milvus::proto::milvus::GrantorEntity* GrantPrivilegeEntity::_internal_add_entities() {
  return _impl_.entities_.Add();
}
inline ::milvus::proto::milvus::GrantorEntity* GrantPrivilegeEntity::add_entities() {
  ::milvus::proto::milvus::GrantorEntity* _add = _internal_add_entities();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GrantPrivilegeEntity.entities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GrantorEntity >&
GrantPrivilegeEntity::entities() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GrantPrivilegeEntity.entities)
  return _impl_.entities_;
}

// -------------------------------------------------------------------

// GrantEntity

// .milvus.proto.milvus.RoleEntity role = 1;
inline bool GrantEntity::_internal_has_role() const {
  return this != internal_default_instance() && _impl_.role_ != nullptr;
}
inline bool GrantEntity::has_role() const {
  return _internal_has_role();
}
inline void GrantEntity::clear_role() {
  if (GetArenaForAllocation() == nullptr && _impl_.role_ != nullptr) {
    delete _impl_.role_;
  }
  _impl_.role_ = nullptr;
}
inline const ::milvus::proto::milvus::RoleEntity& GrantEntity::_internal_role() const {
  const ::milvus::proto::milvus::RoleEntity* p = _impl_.role_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::RoleEntity&>(
      ::milvus::proto::milvus::_RoleEntity_default_instance_);
}
inline const ::milvus::proto::milvus::RoleEntity& GrantEntity::role() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GrantEntity.role)
  return _internal_role();
}
inline void GrantEntity::unsafe_arena_set_allocated_role(
    ::milvus::proto::milvus::RoleEntity* role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.role_);
  }
  _impl_.role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GrantEntity.role)
}
inline ::milvus::proto::milvus::RoleEntity* GrantEntity::release_role() {
  
  ::milvus::proto::milvus::RoleEntity* temp = _impl_.role_;
  _impl_.role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::RoleEntity* GrantEntity::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GrantEntity.role)
  
  ::milvus::proto::milvus::RoleEntity* temp = _impl_.role_;
  _impl_.role_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::RoleEntity* GrantEntity::_internal_mutable_role() {
  
  if (_impl_.role_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::RoleEntity>(GetArenaForAllocation());
    _impl_.role_ = p;
  }
  return _impl_.role_;
}
inline ::milvus::proto::milvus::RoleEntity* GrantEntity::mutable_role() {
  ::milvus::proto::milvus::RoleEntity* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GrantEntity.role)
  return _msg;
}
inline void GrantEntity::set_allocated_role(::milvus::proto::milvus::RoleEntity* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(role);
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.role_ = role;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GrantEntity.role)
}

// .milvus.proto.milvus.ObjectEntity object = 2;
inline bool GrantEntity::_internal_has_object() const {
  return this != internal_default_instance() && _impl_.object_ != nullptr;
}
inline bool GrantEntity::has_object() const {
  return _internal_has_object();
}
inline void GrantEntity::clear_object() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
}
inline const ::milvus::proto::milvus::ObjectEntity& GrantEntity::_internal_object() const {
  const ::milvus::proto::milvus::ObjectEntity* p = _impl_.object_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::ObjectEntity&>(
      ::milvus::proto::milvus::_ObjectEntity_default_instance_);
}
inline const ::milvus::proto::milvus::ObjectEntity& GrantEntity::object() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GrantEntity.object)
  return _internal_object();
}
inline void GrantEntity::unsafe_arena_set_allocated_object(
    ::milvus::proto::milvus::ObjectEntity* object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_);
  }
  _impl_.object_ = object;
  if (object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GrantEntity.object)
}
inline ::milvus::proto::milvus::ObjectEntity* GrantEntity::release_object() {
  
  ::milvus::proto::milvus::ObjectEntity* temp = _impl_.object_;
  _impl_.object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::ObjectEntity* GrantEntity::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GrantEntity.object)
  
  ::milvus::proto::milvus::ObjectEntity* temp = _impl_.object_;
  _impl_.object_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::ObjectEntity* GrantEntity::_internal_mutable_object() {
  
  if (_impl_.object_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::ObjectEntity>(GetArenaForAllocation());
    _impl_.object_ = p;
  }
  return _impl_.object_;
}
inline ::milvus::proto::milvus::ObjectEntity* GrantEntity::mutable_object() {
  ::milvus::proto::milvus::ObjectEntity* _msg = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GrantEntity.object)
  return _msg;
}
inline void GrantEntity::set_allocated_object(::milvus::proto::milvus::ObjectEntity* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_;
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object);
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.object_ = object;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GrantEntity.object)
}

// string object_name = 3;
inline void GrantEntity::clear_object_name() {
  _impl_.object_name_.ClearToEmpty();
}
inline const std::string& GrantEntity::object_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GrantEntity.object_name)
  return _internal_object_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GrantEntity::set_object_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.object_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GrantEntity.object_name)
}
inline std::string* GrantEntity::mutable_object_name() {
  std::string* _s = _internal_mutable_object_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GrantEntity.object_name)
  return _s;
}
inline const std::string& GrantEntity::_internal_object_name() const {
  return _impl_.object_name_.Get();
}
inline void GrantEntity::_internal_set_object_name(const std::string& value) {
  
  _impl_.object_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GrantEntity::_internal_mutable_object_name() {
  
  return _impl_.object_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GrantEntity::release_object_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GrantEntity.object_name)
  return _impl_.object_name_.Release();
}
inline void GrantEntity::set_allocated_object_name(std::string* object_name) {
  if (object_name != nullptr) {
    
  } else {
    
  }
  _impl_.object_name_.SetAllocated(object_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.object_name_.IsDefault()) {
    _impl_.object_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GrantEntity.object_name)
}

// .milvus.proto.milvus.GrantorEntity grantor = 4;
inline bool GrantEntity::_internal_has_grantor() const {
  return this != internal_default_instance() && _impl_.grantor_ != nullptr;
}
inline bool GrantEntity::has_grantor() const {
  return _internal_has_grantor();
}
inline void GrantEntity::clear_grantor() {
  if (GetArenaForAllocation() == nullptr && _impl_.grantor_ != nullptr) {
    delete _impl_.grantor_;
  }
  _impl_.grantor_ = nullptr;
}
inline const ::milvus::proto::milvus::GrantorEntity& GrantEntity::_internal_grantor() const {
  const ::milvus::proto::milvus::GrantorEntity* p = _impl_.grantor_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::GrantorEntity&>(
      ::milvus::proto::milvus::_GrantorEntity_default_instance_);
}
inline const ::milvus::proto::milvus::GrantorEntity& GrantEntity::grantor() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GrantEntity.grantor)
  return _internal_grantor();
}
inline void GrantEntity::unsafe_arena_set_allocated_grantor(
    ::milvus::proto::milvus::GrantorEntity* grantor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grantor_);
  }
  _impl_.grantor_ = grantor;
  if (grantor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GrantEntity.grantor)
}
inline ::milvus::proto::milvus::GrantorEntity* GrantEntity::release_grantor() {
  
  ::milvus::proto::milvus::GrantorEntity* temp = _impl_.grantor_;
  _impl_.grantor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::GrantorEntity* GrantEntity::unsafe_arena_release_grantor() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GrantEntity.grantor)
  
  ::milvus::proto::milvus::GrantorEntity* temp = _impl_.grantor_;
  _impl_.grantor_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::GrantorEntity* GrantEntity::_internal_mutable_grantor() {
  
  if (_impl_.grantor_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::GrantorEntity>(GetArenaForAllocation());
    _impl_.grantor_ = p;
  }
  return _impl_.grantor_;
}
inline ::milvus::proto::milvus::GrantorEntity* GrantEntity::mutable_grantor() {
  ::milvus::proto::milvus::GrantorEntity* _msg = _internal_mutable_grantor();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GrantEntity.grantor)
  return _msg;
}
inline void GrantEntity::set_allocated_grantor(::milvus::proto::milvus::GrantorEntity* grantor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.grantor_;
  }
  if (grantor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(grantor);
    if (message_arena != submessage_arena) {
      grantor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grantor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.grantor_ = grantor;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GrantEntity.grantor)
}

// string db_name = 5;
inline void GrantEntity::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& GrantEntity::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GrantEntity.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GrantEntity::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GrantEntity.db_name)
}
inline std::string* GrantEntity::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GrantEntity.db_name)
  return _s;
}
inline const std::string& GrantEntity::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void GrantEntity::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GrantEntity::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GrantEntity::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GrantEntity.db_name)
  return _impl_.db_name_.Release();
}
inline void GrantEntity::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GrantEntity.db_name)
}

// -------------------------------------------------------------------

// SelectGrantRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool SelectGrantRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SelectGrantRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& SelectGrantRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& SelectGrantRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SelectGrantRequest.base)
  return _internal_base();
}
inline void SelectGrantRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.SelectGrantRequest.base)
}
inline ::milvus::proto::common::MsgBase* SelectGrantRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* SelectGrantRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SelectGrantRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* SelectGrantRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* SelectGrantRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SelectGrantRequest.base)
  return _msg;
}
inline void SelectGrantRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SelectGrantRequest.base)
}

// .milvus.proto.milvus.GrantEntity entity = 2;
inline bool SelectGrantRequest::_internal_has_entity() const {
  return this != internal_default_instance() && _impl_.entity_ != nullptr;
}
inline bool SelectGrantRequest::has_entity() const {
  return _internal_has_entity();
}
inline void SelectGrantRequest::clear_entity() {
  if (GetArenaForAllocation() == nullptr && _impl_.entity_ != nullptr) {
    delete _impl_.entity_;
  }
  _impl_.entity_ = nullptr;
}
inline const ::milvus::proto::milvus::GrantEntity& SelectGrantRequest::_internal_entity() const {
  const ::milvus::proto::milvus::GrantEntity* p = _impl_.entity_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::GrantEntity&>(
      ::milvus::proto::milvus::_GrantEntity_default_instance_);
}
inline const ::milvus::proto::milvus::GrantEntity& SelectGrantRequest::entity() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SelectGrantRequest.entity)
  return _internal_entity();
}
inline void SelectGrantRequest::unsafe_arena_set_allocated_entity(
    ::milvus::proto::milvus::GrantEntity* entity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_);
  }
  _impl_.entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.SelectGrantRequest.entity)
}
inline ::milvus::proto::milvus::GrantEntity* SelectGrantRequest::release_entity() {
  
  ::milvus::proto::milvus::GrantEntity* temp = _impl_.entity_;
  _impl_.entity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::GrantEntity* SelectGrantRequest::unsafe_arena_release_entity() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SelectGrantRequest.entity)
  
  ::milvus::proto::milvus::GrantEntity* temp = _impl_.entity_;
  _impl_.entity_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::GrantEntity* SelectGrantRequest::_internal_mutable_entity() {
  
  if (_impl_.entity_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::GrantEntity>(GetArenaForAllocation());
    _impl_.entity_ = p;
  }
  return _impl_.entity_;
}
inline ::milvus::proto::milvus::GrantEntity* SelectGrantRequest::mutable_entity() {
  ::milvus::proto::milvus::GrantEntity* _msg = _internal_mutable_entity();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SelectGrantRequest.entity)
  return _msg;
}
inline void SelectGrantRequest::set_allocated_entity(::milvus::proto::milvus::GrantEntity* entity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.entity_;
  }
  if (entity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(entity);
    if (message_arena != submessage_arena) {
      entity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SelectGrantRequest.entity)
}

// -------------------------------------------------------------------

// SelectGrantResponse

// .milvus.proto.common.Status status = 1;
inline bool SelectGrantResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool SelectGrantResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& SelectGrantResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& SelectGrantResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SelectGrantResponse.status)
  return _internal_status();
}
inline void SelectGrantResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.SelectGrantResponse.status)
}
inline ::milvus::proto::common::Status* SelectGrantResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* SelectGrantResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.SelectGrantResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* SelectGrantResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* SelectGrantResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SelectGrantResponse.status)
  return _msg;
}
inline void SelectGrantResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.SelectGrantResponse.status)
}

// repeated .milvus.proto.milvus.GrantEntity entities = 2;
inline int SelectGrantResponse::_internal_entities_size() const {
  return _impl_.entities_.size();
}
inline int SelectGrantResponse::entities_size() const {
  return _internal_entities_size();
}
inline void SelectGrantResponse::clear_entities() {
  _impl_.entities_.Clear();
}
inline ::milvus::proto::milvus::GrantEntity* SelectGrantResponse::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.SelectGrantResponse.entities)
  return _impl_.entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GrantEntity >*
SelectGrantResponse::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.SelectGrantResponse.entities)
  return &_impl_.entities_;
}
inline const ::milvus::proto::milvus::GrantEntity& SelectGrantResponse::_internal_entities(int index) const {
  return _impl_.entities_.Get(index);
}
inline const ::milvus::proto::milvus::GrantEntity& SelectGrantResponse::entities(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.SelectGrantResponse.entities)
  return _internal_entities(index);
}
inline ::milvus::proto::milvus::GrantEntity* SelectGrantResponse::_internal_add_entities() {
  return _impl_.entities_.Add();
}
inline ::milvus::proto::milvus::GrantEntity* SelectGrantResponse::add_entities() {
  ::milvus::proto::milvus::GrantEntity* _add = _internal_add_entities();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.SelectGrantResponse.entities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::GrantEntity >&
SelectGrantResponse::entities() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.SelectGrantResponse.entities)
  return _impl_.entities_;
}

// -------------------------------------------------------------------

// OperatePrivilegeRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool OperatePrivilegeRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool OperatePrivilegeRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& OperatePrivilegeRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& OperatePrivilegeRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.OperatePrivilegeRequest.base)
  return _internal_base();
}
inline void OperatePrivilegeRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.OperatePrivilegeRequest.base)
}
inline ::milvus::proto::common::MsgBase* OperatePrivilegeRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* OperatePrivilegeRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.OperatePrivilegeRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* OperatePrivilegeRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* OperatePrivilegeRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.OperatePrivilegeRequest.base)
  return _msg;
}
inline void OperatePrivilegeRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.OperatePrivilegeRequest.base)
}

// .milvus.proto.milvus.GrantEntity entity = 2;
inline bool OperatePrivilegeRequest::_internal_has_entity() const {
  return this != internal_default_instance() && _impl_.entity_ != nullptr;
}
inline bool OperatePrivilegeRequest::has_entity() const {
  return _internal_has_entity();
}
inline void OperatePrivilegeRequest::clear_entity() {
  if (GetArenaForAllocation() == nullptr && _impl_.entity_ != nullptr) {
    delete _impl_.entity_;
  }
  _impl_.entity_ = nullptr;
}
inline const ::milvus::proto::milvus::GrantEntity& OperatePrivilegeRequest::_internal_entity() const {
  const ::milvus::proto::milvus::GrantEntity* p = _impl_.entity_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::GrantEntity&>(
      ::milvus::proto::milvus::_GrantEntity_default_instance_);
}
inline const ::milvus::proto::milvus::GrantEntity& OperatePrivilegeRequest::entity() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.OperatePrivilegeRequest.entity)
  return _internal_entity();
}
inline void OperatePrivilegeRequest::unsafe_arena_set_allocated_entity(
    ::milvus::proto::milvus::GrantEntity* entity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_);
  }
  _impl_.entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.OperatePrivilegeRequest.entity)
}
inline ::milvus::proto::milvus::GrantEntity* OperatePrivilegeRequest::release_entity() {
  
  ::milvus::proto::milvus::GrantEntity* temp = _impl_.entity_;
  _impl_.entity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::GrantEntity* OperatePrivilegeRequest::unsafe_arena_release_entity() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.OperatePrivilegeRequest.entity)
  
  ::milvus::proto::milvus::GrantEntity* temp = _impl_.entity_;
  _impl_.entity_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::GrantEntity* OperatePrivilegeRequest::_internal_mutable_entity() {
  
  if (_impl_.entity_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::GrantEntity>(GetArenaForAllocation());
    _impl_.entity_ = p;
  }
  return _impl_.entity_;
}
inline ::milvus::proto::milvus::GrantEntity* OperatePrivilegeRequest::mutable_entity() {
  ::milvus::proto::milvus::GrantEntity* _msg = _internal_mutable_entity();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.OperatePrivilegeRequest.entity)
  return _msg;
}
inline void OperatePrivilegeRequest::set_allocated_entity(::milvus::proto::milvus::GrantEntity* entity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.entity_;
  }
  if (entity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(entity);
    if (message_arena != submessage_arena) {
      entity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.OperatePrivilegeRequest.entity)
}

// .milvus.proto.milvus.OperatePrivilegeType type = 3;
inline void OperatePrivilegeRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::milvus::proto::milvus::OperatePrivilegeType OperatePrivilegeRequest::_internal_type() const {
  return static_cast< ::milvus::proto::milvus::OperatePrivilegeType >(_impl_.type_);
}
inline ::milvus::proto::milvus::OperatePrivilegeType OperatePrivilegeRequest::type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.OperatePrivilegeRequest.type)
  return _internal_type();
}
inline void OperatePrivilegeRequest::_internal_set_type(::milvus::proto::milvus::OperatePrivilegeType value) {
  
  _impl_.type_ = value;
}
inline void OperatePrivilegeRequest::set_type(::milvus::proto::milvus::OperatePrivilegeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.OperatePrivilegeRequest.type)
}

// -------------------------------------------------------------------

// GetLoadingProgressRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetLoadingProgressRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetLoadingProgressRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetLoadingProgressRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetLoadingProgressRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetLoadingProgressRequest.base)
  return _internal_base();
}
inline void GetLoadingProgressRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetLoadingProgressRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetLoadingProgressRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetLoadingProgressRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetLoadingProgressRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetLoadingProgressRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetLoadingProgressRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetLoadingProgressRequest.base)
  return _msg;
}
inline void GetLoadingProgressRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetLoadingProgressRequest.base)
}

// string collection_name = 2;
inline void GetLoadingProgressRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& GetLoadingProgressRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetLoadingProgressRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLoadingProgressRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetLoadingProgressRequest.collection_name)
}
inline std::string* GetLoadingProgressRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetLoadingProgressRequest.collection_name)
  return _s;
}
inline const std::string& GetLoadingProgressRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void GetLoadingProgressRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLoadingProgressRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLoadingProgressRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetLoadingProgressRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void GetLoadingProgressRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetLoadingProgressRequest.collection_name)
}

// repeated string partition_names = 3;
inline int GetLoadingProgressRequest::_internal_partition_names_size() const {
  return _impl_.partition_names_.size();
}
inline int GetLoadingProgressRequest::partition_names_size() const {
  return _internal_partition_names_size();
}
inline void GetLoadingProgressRequest::clear_partition_names() {
  _impl_.partition_names_.Clear();
}
inline std::string* GetLoadingProgressRequest::add_partition_names() {
  std::string* _s = _internal_add_partition_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.GetLoadingProgressRequest.partition_names)
  return _s;
}
inline const std::string& GetLoadingProgressRequest::_internal_partition_names(int index) const {
  return _impl_.partition_names_.Get(index);
}
inline const std::string& GetLoadingProgressRequest::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetLoadingProgressRequest.partition_names)
  return _internal_partition_names(index);
}
inline std::string* GetLoadingProgressRequest::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetLoadingProgressRequest.partition_names)
  return _impl_.partition_names_.Mutable(index);
}
inline void GetLoadingProgressRequest::set_partition_names(int index, const std::string& value) {
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetLoadingProgressRequest.partition_names)
}
inline void GetLoadingProgressRequest::set_partition_names(int index, std::string&& value) {
  _impl_.partition_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetLoadingProgressRequest.partition_names)
}
inline void GetLoadingProgressRequest::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetLoadingProgressRequest.partition_names)
}
inline void GetLoadingProgressRequest::set_partition_names(int index, const char* value, size_t size) {
  _impl_.partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetLoadingProgressRequest.partition_names)
}
inline std::string* GetLoadingProgressRequest::_internal_add_partition_names() {
  return _impl_.partition_names_.Add();
}
inline void GetLoadingProgressRequest::add_partition_names(const std::string& value) {
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetLoadingProgressRequest.partition_names)
}
inline void GetLoadingProgressRequest::add_partition_names(std::string&& value) {
  _impl_.partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetLoadingProgressRequest.partition_names)
}
inline void GetLoadingProgressRequest::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.GetLoadingProgressRequest.partition_names)
}
inline void GetLoadingProgressRequest::add_partition_names(const char* value, size_t size) {
  _impl_.partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.GetLoadingProgressRequest.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetLoadingProgressRequest::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetLoadingProgressRequest.partition_names)
  return _impl_.partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetLoadingProgressRequest::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetLoadingProgressRequest.partition_names)
  return &_impl_.partition_names_;
}

// string db_name = 4;
inline void GetLoadingProgressRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& GetLoadingProgressRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetLoadingProgressRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLoadingProgressRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetLoadingProgressRequest.db_name)
}
inline std::string* GetLoadingProgressRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetLoadingProgressRequest.db_name)
  return _s;
}
inline const std::string& GetLoadingProgressRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void GetLoadingProgressRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLoadingProgressRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLoadingProgressRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetLoadingProgressRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void GetLoadingProgressRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetLoadingProgressRequest.db_name)
}

// -------------------------------------------------------------------

// GetLoadingProgressResponse

// .milvus.proto.common.Status status = 1;
inline bool GetLoadingProgressResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetLoadingProgressResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetLoadingProgressResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetLoadingProgressResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetLoadingProgressResponse.status)
  return _internal_status();
}
inline void GetLoadingProgressResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetLoadingProgressResponse.status)
}
inline ::milvus::proto::common::Status* GetLoadingProgressResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetLoadingProgressResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetLoadingProgressResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetLoadingProgressResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetLoadingProgressResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetLoadingProgressResponse.status)
  return _msg;
}
inline void GetLoadingProgressResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetLoadingProgressResponse.status)
}

// int64 progress = 2;
inline void GetLoadingProgressResponse::clear_progress() {
  _impl_.progress_ = int64_t{0};
}
inline int64_t GetLoadingProgressResponse::_internal_progress() const {
  return _impl_.progress_;
}
inline int64_t GetLoadingProgressResponse::progress() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetLoadingProgressResponse.progress)
  return _internal_progress();
}
inline void GetLoadingProgressResponse::_internal_set_progress(int64_t value) {
  
  _impl_.progress_ = value;
}
inline void GetLoadingProgressResponse::set_progress(int64_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetLoadingProgressResponse.progress)
}

// int64 refresh_progress = 3;
inline void GetLoadingProgressResponse::clear_refresh_progress() {
  _impl_.refresh_progress_ = int64_t{0};
}
inline int64_t GetLoadingProgressResponse::_internal_refresh_progress() const {
  return _impl_.refresh_progress_;
}
inline int64_t GetLoadingProgressResponse::refresh_progress() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetLoadingProgressResponse.refresh_progress)
  return _internal_refresh_progress();
}
inline void GetLoadingProgressResponse::_internal_set_refresh_progress(int64_t value) {
  
  _impl_.refresh_progress_ = value;
}
inline void GetLoadingProgressResponse::set_refresh_progress(int64_t value) {
  _internal_set_refresh_progress(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetLoadingProgressResponse.refresh_progress)
}

// -------------------------------------------------------------------

// GetLoadStateRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetLoadStateRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetLoadStateRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetLoadStateRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetLoadStateRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetLoadStateRequest.base)
  return _internal_base();
}
inline void GetLoadStateRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetLoadStateRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetLoadStateRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetLoadStateRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetLoadStateRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetLoadStateRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetLoadStateRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetLoadStateRequest.base)
  return _msg;
}
inline void GetLoadStateRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetLoadStateRequest.base)
}

// string collection_name = 2;
inline void GetLoadStateRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& GetLoadStateRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetLoadStateRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLoadStateRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetLoadStateRequest.collection_name)
}
inline std::string* GetLoadStateRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetLoadStateRequest.collection_name)
  return _s;
}
inline const std::string& GetLoadStateRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void GetLoadStateRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLoadStateRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLoadStateRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetLoadStateRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void GetLoadStateRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetLoadStateRequest.collection_name)
}

// repeated string partition_names = 3;
inline int GetLoadStateRequest::_internal_partition_names_size() const {
  return _impl_.partition_names_.size();
}
inline int GetLoadStateRequest::partition_names_size() const {
  return _internal_partition_names_size();
}
inline void GetLoadStateRequest::clear_partition_names() {
  _impl_.partition_names_.Clear();
}
inline std::string* GetLoadStateRequest::add_partition_names() {
  std::string* _s = _internal_add_partition_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.GetLoadStateRequest.partition_names)
  return _s;
}
inline const std::string& GetLoadStateRequest::_internal_partition_names(int index) const {
  return _impl_.partition_names_.Get(index);
}
inline const std::string& GetLoadStateRequest::partition_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetLoadStateRequest.partition_names)
  return _internal_partition_names(index);
}
inline std::string* GetLoadStateRequest::mutable_partition_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetLoadStateRequest.partition_names)
  return _impl_.partition_names_.Mutable(index);
}
inline void GetLoadStateRequest::set_partition_names(int index, const std::string& value) {
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetLoadStateRequest.partition_names)
}
inline void GetLoadStateRequest::set_partition_names(int index, std::string&& value) {
  _impl_.partition_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetLoadStateRequest.partition_names)
}
inline void GetLoadStateRequest::set_partition_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.GetLoadStateRequest.partition_names)
}
inline void GetLoadStateRequest::set_partition_names(int index, const char* value, size_t size) {
  _impl_.partition_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.GetLoadStateRequest.partition_names)
}
inline std::string* GetLoadStateRequest::_internal_add_partition_names() {
  return _impl_.partition_names_.Add();
}
inline void GetLoadStateRequest::add_partition_names(const std::string& value) {
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetLoadStateRequest.partition_names)
}
inline void GetLoadStateRequest::add_partition_names(std::string&& value) {
  _impl_.partition_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetLoadStateRequest.partition_names)
}
inline void GetLoadStateRequest::add_partition_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.partition_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.GetLoadStateRequest.partition_names)
}
inline void GetLoadStateRequest::add_partition_names(const char* value, size_t size) {
  _impl_.partition_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.GetLoadStateRequest.partition_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetLoadStateRequest::partition_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetLoadStateRequest.partition_names)
  return _impl_.partition_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetLoadStateRequest::mutable_partition_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetLoadStateRequest.partition_names)
  return &_impl_.partition_names_;
}

// string db_name = 4;
inline void GetLoadStateRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& GetLoadStateRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetLoadStateRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLoadStateRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetLoadStateRequest.db_name)
}
inline std::string* GetLoadStateRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetLoadStateRequest.db_name)
  return _s;
}
inline const std::string& GetLoadStateRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void GetLoadStateRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLoadStateRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLoadStateRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetLoadStateRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void GetLoadStateRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetLoadStateRequest.db_name)
}

// -------------------------------------------------------------------

// GetLoadStateResponse

// .milvus.proto.common.Status status = 1;
inline bool GetLoadStateResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetLoadStateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetLoadStateResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetLoadStateResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetLoadStateResponse.status)
  return _internal_status();
}
inline void GetLoadStateResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetLoadStateResponse.status)
}
inline ::milvus::proto::common::Status* GetLoadStateResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetLoadStateResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetLoadStateResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetLoadStateResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetLoadStateResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetLoadStateResponse.status)
  return _msg;
}
inline void GetLoadStateResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetLoadStateResponse.status)
}

// .milvus.proto.common.LoadState state = 2;
inline void GetLoadStateResponse::clear_state() {
  _impl_.state_ = 0;
}
inline ::milvus::proto::common::LoadState GetLoadStateResponse::_internal_state() const {
  return static_cast< ::milvus::proto::common::LoadState >(_impl_.state_);
}
inline ::milvus::proto::common::LoadState GetLoadStateResponse::state() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetLoadStateResponse.state)
  return _internal_state();
}
inline void GetLoadStateResponse::_internal_set_state(::milvus::proto::common::LoadState value) {
  
  _impl_.state_ = value;
}
inline void GetLoadStateResponse::set_state(::milvus::proto::common::LoadState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetLoadStateResponse.state)
}

// -------------------------------------------------------------------

// MilvusExt

// string version = 1;
inline void MilvusExt::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& MilvusExt::version() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.MilvusExt.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MilvusExt::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.MilvusExt.version)
}
inline std::string* MilvusExt::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.MilvusExt.version)
  return _s;
}
inline const std::string& MilvusExt::_internal_version() const {
  return _impl_.version_.Get();
}
inline void MilvusExt::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* MilvusExt::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* MilvusExt::release_version() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.MilvusExt.version)
  return _impl_.version_.Release();
}
inline void MilvusExt::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.MilvusExt.version)
}

// -------------------------------------------------------------------

// GetVersionRequest

// -------------------------------------------------------------------

// GetVersionResponse

// .milvus.proto.common.Status status = 1;
inline bool GetVersionResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetVersionResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetVersionResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetVersionResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetVersionResponse.status)
  return _internal_status();
}
inline void GetVersionResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetVersionResponse.status)
}
inline ::milvus::proto::common::Status* GetVersionResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetVersionResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetVersionResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetVersionResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetVersionResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetVersionResponse.status)
  return _msg;
}
inline void GetVersionResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetVersionResponse.status)
}

// string version = 2;
inline void GetVersionResponse::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& GetVersionResponse::version() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetVersionResponse.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionResponse::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetVersionResponse.version)
}
inline std::string* GetVersionResponse::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetVersionResponse.version)
  return _s;
}
inline const std::string& GetVersionResponse::_internal_version() const {
  return _impl_.version_.Get();
}
inline void GetVersionResponse::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionResponse::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionResponse::release_version() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetVersionResponse.version)
  return _impl_.version_.Release();
}
inline void GetVersionResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetVersionResponse.version)
}

// -------------------------------------------------------------------

// CheckHealthRequest

// -------------------------------------------------------------------

// CheckHealthResponse

// .milvus.proto.common.Status status = 1;
inline bool CheckHealthResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool CheckHealthResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& CheckHealthResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& CheckHealthResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CheckHealthResponse.status)
  return _internal_status();
}
inline void CheckHealthResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CheckHealthResponse.status)
}
inline ::milvus::proto::common::Status* CheckHealthResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* CheckHealthResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CheckHealthResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* CheckHealthResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* CheckHealthResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CheckHealthResponse.status)
  return _msg;
}
inline void CheckHealthResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CheckHealthResponse.status)
}

// bool isHealthy = 2;
inline void CheckHealthResponse::clear_ishealthy() {
  _impl_.ishealthy_ = false;
}
inline bool CheckHealthResponse::_internal_ishealthy() const {
  return _impl_.ishealthy_;
}
inline bool CheckHealthResponse::ishealthy() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CheckHealthResponse.isHealthy)
  return _internal_ishealthy();
}
inline void CheckHealthResponse::_internal_set_ishealthy(bool value) {
  
  _impl_.ishealthy_ = value;
}
inline void CheckHealthResponse::set_ishealthy(bool value) {
  _internal_set_ishealthy(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CheckHealthResponse.isHealthy)
}

// repeated string reasons = 3;
inline int CheckHealthResponse::_internal_reasons_size() const {
  return _impl_.reasons_.size();
}
inline int CheckHealthResponse::reasons_size() const {
  return _internal_reasons_size();
}
inline void CheckHealthResponse::clear_reasons() {
  _impl_.reasons_.Clear();
}
inline std::string* CheckHealthResponse::add_reasons() {
  std::string* _s = _internal_add_reasons();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.CheckHealthResponse.reasons)
  return _s;
}
inline const std::string& CheckHealthResponse::_internal_reasons(int index) const {
  return _impl_.reasons_.Get(index);
}
inline const std::string& CheckHealthResponse::reasons(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CheckHealthResponse.reasons)
  return _internal_reasons(index);
}
inline std::string* CheckHealthResponse::mutable_reasons(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CheckHealthResponse.reasons)
  return _impl_.reasons_.Mutable(index);
}
inline void CheckHealthResponse::set_reasons(int index, const std::string& value) {
  _impl_.reasons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CheckHealthResponse.reasons)
}
inline void CheckHealthResponse::set_reasons(int index, std::string&& value) {
  _impl_.reasons_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CheckHealthResponse.reasons)
}
inline void CheckHealthResponse::set_reasons(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.reasons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.CheckHealthResponse.reasons)
}
inline void CheckHealthResponse::set_reasons(int index, const char* value, size_t size) {
  _impl_.reasons_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.CheckHealthResponse.reasons)
}
inline std::string* CheckHealthResponse::_internal_add_reasons() {
  return _impl_.reasons_.Add();
}
inline void CheckHealthResponse::add_reasons(const std::string& value) {
  _impl_.reasons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.CheckHealthResponse.reasons)
}
inline void CheckHealthResponse::add_reasons(std::string&& value) {
  _impl_.reasons_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.CheckHealthResponse.reasons)
}
inline void CheckHealthResponse::add_reasons(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.reasons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.CheckHealthResponse.reasons)
}
inline void CheckHealthResponse::add_reasons(const char* value, size_t size) {
  _impl_.reasons_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.CheckHealthResponse.reasons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CheckHealthResponse::reasons() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.CheckHealthResponse.reasons)
  return _impl_.reasons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CheckHealthResponse::mutable_reasons() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.CheckHealthResponse.reasons)
  return &_impl_.reasons_;
}

// repeated .milvus.proto.milvus.QuotaState quota_states = 4;
inline int CheckHealthResponse::_internal_quota_states_size() const {
  return _impl_.quota_states_.size();
}
inline int CheckHealthResponse::quota_states_size() const {
  return _internal_quota_states_size();
}
inline void CheckHealthResponse::clear_quota_states() {
  _impl_.quota_states_.Clear();
}
inline ::milvus::proto::milvus::QuotaState CheckHealthResponse::_internal_quota_states(int index) const {
  return static_cast< ::milvus::proto::milvus::QuotaState >(_impl_.quota_states_.Get(index));
}
inline ::milvus::proto::milvus::QuotaState CheckHealthResponse::quota_states(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CheckHealthResponse.quota_states)
  return _internal_quota_states(index);
}
inline void CheckHealthResponse::set_quota_states(int index, ::milvus::proto::milvus::QuotaState value) {
  _impl_.quota_states_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CheckHealthResponse.quota_states)
}
inline void CheckHealthResponse::_internal_add_quota_states(::milvus::proto::milvus::QuotaState value) {
  _impl_.quota_states_.Add(value);
}
inline void CheckHealthResponse::add_quota_states(::milvus::proto::milvus::QuotaState value) {
  _internal_add_quota_states(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.CheckHealthResponse.quota_states)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CheckHealthResponse::quota_states() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.CheckHealthResponse.quota_states)
  return _impl_.quota_states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CheckHealthResponse::_internal_mutable_quota_states() {
  return &_impl_.quota_states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CheckHealthResponse::mutable_quota_states() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.CheckHealthResponse.quota_states)
  return _internal_mutable_quota_states();
}

// -------------------------------------------------------------------

// CreateResourceGroupRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreateResourceGroupRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool CreateResourceGroupRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CreateResourceGroupRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CreateResourceGroupRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateResourceGroupRequest.base)
  return _internal_base();
}
inline void CreateResourceGroupRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CreateResourceGroupRequest.base)
}
inline ::milvus::proto::common::MsgBase* CreateResourceGroupRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateResourceGroupRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateResourceGroupRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateResourceGroupRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* CreateResourceGroupRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateResourceGroupRequest.base)
  return _msg;
}
inline void CreateResourceGroupRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateResourceGroupRequest.base)
}

// string resource_group = 2;
inline void CreateResourceGroupRequest::clear_resource_group() {
  _impl_.resource_group_.ClearToEmpty();
}
inline const std::string& CreateResourceGroupRequest::resource_group() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateResourceGroupRequest.resource_group)
  return _internal_resource_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateResourceGroupRequest::set_resource_group(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resource_group_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateResourceGroupRequest.resource_group)
}
inline std::string* CreateResourceGroupRequest::mutable_resource_group() {
  std::string* _s = _internal_mutable_resource_group();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateResourceGroupRequest.resource_group)
  return _s;
}
inline const std::string& CreateResourceGroupRequest::_internal_resource_group() const {
  return _impl_.resource_group_.Get();
}
inline void CreateResourceGroupRequest::_internal_set_resource_group(const std::string& value) {
  
  _impl_.resource_group_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateResourceGroupRequest::_internal_mutable_resource_group() {
  
  return _impl_.resource_group_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateResourceGroupRequest::release_resource_group() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateResourceGroupRequest.resource_group)
  return _impl_.resource_group_.Release();
}
inline void CreateResourceGroupRequest::set_allocated_resource_group(std::string* resource_group) {
  if (resource_group != nullptr) {
    
  } else {
    
  }
  _impl_.resource_group_.SetAllocated(resource_group, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_group_.IsDefault()) {
    _impl_.resource_group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateResourceGroupRequest.resource_group)
}

// -------------------------------------------------------------------

// DropResourceGroupRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropResourceGroupRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DropResourceGroupRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DropResourceGroupRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DropResourceGroupRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropResourceGroupRequest.base)
  return _internal_base();
}
inline void DropResourceGroupRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DropResourceGroupRequest.base)
}
inline ::milvus::proto::common::MsgBase* DropResourceGroupRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropResourceGroupRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropResourceGroupRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropResourceGroupRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DropResourceGroupRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropResourceGroupRequest.base)
  return _msg;
}
inline void DropResourceGroupRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropResourceGroupRequest.base)
}

// string resource_group = 2;
inline void DropResourceGroupRequest::clear_resource_group() {
  _impl_.resource_group_.ClearToEmpty();
}
inline const std::string& DropResourceGroupRequest::resource_group() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropResourceGroupRequest.resource_group)
  return _internal_resource_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropResourceGroupRequest::set_resource_group(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resource_group_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropResourceGroupRequest.resource_group)
}
inline std::string* DropResourceGroupRequest::mutable_resource_group() {
  std::string* _s = _internal_mutable_resource_group();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropResourceGroupRequest.resource_group)
  return _s;
}
inline const std::string& DropResourceGroupRequest::_internal_resource_group() const {
  return _impl_.resource_group_.Get();
}
inline void DropResourceGroupRequest::_internal_set_resource_group(const std::string& value) {
  
  _impl_.resource_group_.Set(value, GetArenaForAllocation());
}
inline std::string* DropResourceGroupRequest::_internal_mutable_resource_group() {
  
  return _impl_.resource_group_.Mutable(GetArenaForAllocation());
}
inline std::string* DropResourceGroupRequest::release_resource_group() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropResourceGroupRequest.resource_group)
  return _impl_.resource_group_.Release();
}
inline void DropResourceGroupRequest::set_allocated_resource_group(std::string* resource_group) {
  if (resource_group != nullptr) {
    
  } else {
    
  }
  _impl_.resource_group_.SetAllocated(resource_group, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_group_.IsDefault()) {
    _impl_.resource_group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropResourceGroupRequest.resource_group)
}

// -------------------------------------------------------------------

// TransferNodeRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool TransferNodeRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool TransferNodeRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& TransferNodeRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& TransferNodeRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.TransferNodeRequest.base)
  return _internal_base();
}
inline void TransferNodeRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.TransferNodeRequest.base)
}
inline ::milvus::proto::common::MsgBase* TransferNodeRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* TransferNodeRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.TransferNodeRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* TransferNodeRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* TransferNodeRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.TransferNodeRequest.base)
  return _msg;
}
inline void TransferNodeRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.TransferNodeRequest.base)
}

// string source_resource_group = 2;
inline void TransferNodeRequest::clear_source_resource_group() {
  _impl_.source_resource_group_.ClearToEmpty();
}
inline const std::string& TransferNodeRequest::source_resource_group() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.TransferNodeRequest.source_resource_group)
  return _internal_source_resource_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferNodeRequest::set_source_resource_group(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_resource_group_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.TransferNodeRequest.source_resource_group)
}
inline std::string* TransferNodeRequest::mutable_source_resource_group() {
  std::string* _s = _internal_mutable_source_resource_group();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.TransferNodeRequest.source_resource_group)
  return _s;
}
inline const std::string& TransferNodeRequest::_internal_source_resource_group() const {
  return _impl_.source_resource_group_.Get();
}
inline void TransferNodeRequest::_internal_set_source_resource_group(const std::string& value) {
  
  _impl_.source_resource_group_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferNodeRequest::_internal_mutable_source_resource_group() {
  
  return _impl_.source_resource_group_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferNodeRequest::release_source_resource_group() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.TransferNodeRequest.source_resource_group)
  return _impl_.source_resource_group_.Release();
}
inline void TransferNodeRequest::set_allocated_source_resource_group(std::string* source_resource_group) {
  if (source_resource_group != nullptr) {
    
  } else {
    
  }
  _impl_.source_resource_group_.SetAllocated(source_resource_group, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_resource_group_.IsDefault()) {
    _impl_.source_resource_group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.TransferNodeRequest.source_resource_group)
}

// string target_resource_group = 3;
inline void TransferNodeRequest::clear_target_resource_group() {
  _impl_.target_resource_group_.ClearToEmpty();
}
inline const std::string& TransferNodeRequest::target_resource_group() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.TransferNodeRequest.target_resource_group)
  return _internal_target_resource_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferNodeRequest::set_target_resource_group(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_resource_group_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.TransferNodeRequest.target_resource_group)
}
inline std::string* TransferNodeRequest::mutable_target_resource_group() {
  std::string* _s = _internal_mutable_target_resource_group();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.TransferNodeRequest.target_resource_group)
  return _s;
}
inline const std::string& TransferNodeRequest::_internal_target_resource_group() const {
  return _impl_.target_resource_group_.Get();
}
inline void TransferNodeRequest::_internal_set_target_resource_group(const std::string& value) {
  
  _impl_.target_resource_group_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferNodeRequest::_internal_mutable_target_resource_group() {
  
  return _impl_.target_resource_group_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferNodeRequest::release_target_resource_group() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.TransferNodeRequest.target_resource_group)
  return _impl_.target_resource_group_.Release();
}
inline void TransferNodeRequest::set_allocated_target_resource_group(std::string* target_resource_group) {
  if (target_resource_group != nullptr) {
    
  } else {
    
  }
  _impl_.target_resource_group_.SetAllocated(target_resource_group, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_resource_group_.IsDefault()) {
    _impl_.target_resource_group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.TransferNodeRequest.target_resource_group)
}

// int32 num_node = 4;
inline void TransferNodeRequest::clear_num_node() {
  _impl_.num_node_ = 0;
}
inline int32_t TransferNodeRequest::_internal_num_node() const {
  return _impl_.num_node_;
}
inline int32_t TransferNodeRequest::num_node() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.TransferNodeRequest.num_node)
  return _internal_num_node();
}
inline void TransferNodeRequest::_internal_set_num_node(int32_t value) {
  
  _impl_.num_node_ = value;
}
inline void TransferNodeRequest::set_num_node(int32_t value) {
  _internal_set_num_node(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.TransferNodeRequest.num_node)
}

// -------------------------------------------------------------------

// TransferReplicaRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool TransferReplicaRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool TransferReplicaRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& TransferReplicaRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& TransferReplicaRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.TransferReplicaRequest.base)
  return _internal_base();
}
inline void TransferReplicaRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.TransferReplicaRequest.base)
}
inline ::milvus::proto::common::MsgBase* TransferReplicaRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* TransferReplicaRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.TransferReplicaRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* TransferReplicaRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* TransferReplicaRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.TransferReplicaRequest.base)
  return _msg;
}
inline void TransferReplicaRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.TransferReplicaRequest.base)
}

// string source_resource_group = 2;
inline void TransferReplicaRequest::clear_source_resource_group() {
  _impl_.source_resource_group_.ClearToEmpty();
}
inline const std::string& TransferReplicaRequest::source_resource_group() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.TransferReplicaRequest.source_resource_group)
  return _internal_source_resource_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferReplicaRequest::set_source_resource_group(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_resource_group_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.TransferReplicaRequest.source_resource_group)
}
inline std::string* TransferReplicaRequest::mutable_source_resource_group() {
  std::string* _s = _internal_mutable_source_resource_group();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.TransferReplicaRequest.source_resource_group)
  return _s;
}
inline const std::string& TransferReplicaRequest::_internal_source_resource_group() const {
  return _impl_.source_resource_group_.Get();
}
inline void TransferReplicaRequest::_internal_set_source_resource_group(const std::string& value) {
  
  _impl_.source_resource_group_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferReplicaRequest::_internal_mutable_source_resource_group() {
  
  return _impl_.source_resource_group_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferReplicaRequest::release_source_resource_group() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.TransferReplicaRequest.source_resource_group)
  return _impl_.source_resource_group_.Release();
}
inline void TransferReplicaRequest::set_allocated_source_resource_group(std::string* source_resource_group) {
  if (source_resource_group != nullptr) {
    
  } else {
    
  }
  _impl_.source_resource_group_.SetAllocated(source_resource_group, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_resource_group_.IsDefault()) {
    _impl_.source_resource_group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.TransferReplicaRequest.source_resource_group)
}

// string target_resource_group = 3;
inline void TransferReplicaRequest::clear_target_resource_group() {
  _impl_.target_resource_group_.ClearToEmpty();
}
inline const std::string& TransferReplicaRequest::target_resource_group() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.TransferReplicaRequest.target_resource_group)
  return _internal_target_resource_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferReplicaRequest::set_target_resource_group(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_resource_group_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.TransferReplicaRequest.target_resource_group)
}
inline std::string* TransferReplicaRequest::mutable_target_resource_group() {
  std::string* _s = _internal_mutable_target_resource_group();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.TransferReplicaRequest.target_resource_group)
  return _s;
}
inline const std::string& TransferReplicaRequest::_internal_target_resource_group() const {
  return _impl_.target_resource_group_.Get();
}
inline void TransferReplicaRequest::_internal_set_target_resource_group(const std::string& value) {
  
  _impl_.target_resource_group_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferReplicaRequest::_internal_mutable_target_resource_group() {
  
  return _impl_.target_resource_group_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferReplicaRequest::release_target_resource_group() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.TransferReplicaRequest.target_resource_group)
  return _impl_.target_resource_group_.Release();
}
inline void TransferReplicaRequest::set_allocated_target_resource_group(std::string* target_resource_group) {
  if (target_resource_group != nullptr) {
    
  } else {
    
  }
  _impl_.target_resource_group_.SetAllocated(target_resource_group, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_resource_group_.IsDefault()) {
    _impl_.target_resource_group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.TransferReplicaRequest.target_resource_group)
}

// string collection_name = 4;
inline void TransferReplicaRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& TransferReplicaRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.TransferReplicaRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferReplicaRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.TransferReplicaRequest.collection_name)
}
inline std::string* TransferReplicaRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.TransferReplicaRequest.collection_name)
  return _s;
}
inline const std::string& TransferReplicaRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void TransferReplicaRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferReplicaRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferReplicaRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.TransferReplicaRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void TransferReplicaRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.TransferReplicaRequest.collection_name)
}

// int64 num_replica = 5;
inline void TransferReplicaRequest::clear_num_replica() {
  _impl_.num_replica_ = int64_t{0};
}
inline int64_t TransferReplicaRequest::_internal_num_replica() const {
  return _impl_.num_replica_;
}
inline int64_t TransferReplicaRequest::num_replica() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.TransferReplicaRequest.num_replica)
  return _internal_num_replica();
}
inline void TransferReplicaRequest::_internal_set_num_replica(int64_t value) {
  
  _impl_.num_replica_ = value;
}
inline void TransferReplicaRequest::set_num_replica(int64_t value) {
  _internal_set_num_replica(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.TransferReplicaRequest.num_replica)
}

// string db_name = 6;
inline void TransferReplicaRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& TransferReplicaRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.TransferReplicaRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferReplicaRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.TransferReplicaRequest.db_name)
}
inline std::string* TransferReplicaRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.TransferReplicaRequest.db_name)
  return _s;
}
inline const std::string& TransferReplicaRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void TransferReplicaRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferReplicaRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferReplicaRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.TransferReplicaRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void TransferReplicaRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.TransferReplicaRequest.db_name)
}

// -------------------------------------------------------------------

// ListResourceGroupsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ListResourceGroupsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ListResourceGroupsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ListResourceGroupsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ListResourceGroupsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListResourceGroupsRequest.base)
  return _internal_base();
}
inline void ListResourceGroupsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ListResourceGroupsRequest.base)
}
inline ::milvus::proto::common::MsgBase* ListResourceGroupsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ListResourceGroupsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListResourceGroupsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ListResourceGroupsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ListResourceGroupsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListResourceGroupsRequest.base)
  return _msg;
}
inline void ListResourceGroupsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListResourceGroupsRequest.base)
}

// -------------------------------------------------------------------

// ListResourceGroupsResponse

// .milvus.proto.common.Status status = 1;
inline bool ListResourceGroupsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ListResourceGroupsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ListResourceGroupsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ListResourceGroupsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListResourceGroupsResponse.status)
  return _internal_status();
}
inline void ListResourceGroupsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ListResourceGroupsResponse.status)
}
inline ::milvus::proto::common::Status* ListResourceGroupsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ListResourceGroupsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListResourceGroupsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ListResourceGroupsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ListResourceGroupsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListResourceGroupsResponse.status)
  return _msg;
}
inline void ListResourceGroupsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListResourceGroupsResponse.status)
}

// repeated string resource_groups = 2;
inline int ListResourceGroupsResponse::_internal_resource_groups_size() const {
  return _impl_.resource_groups_.size();
}
inline int ListResourceGroupsResponse::resource_groups_size() const {
  return _internal_resource_groups_size();
}
inline void ListResourceGroupsResponse::clear_resource_groups() {
  _impl_.resource_groups_.Clear();
}
inline std::string* ListResourceGroupsResponse::add_resource_groups() {
  std::string* _s = _internal_add_resource_groups();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ListResourceGroupsResponse.resource_groups)
  return _s;
}
inline const std::string& ListResourceGroupsResponse::_internal_resource_groups(int index) const {
  return _impl_.resource_groups_.Get(index);
}
inline const std::string& ListResourceGroupsResponse::resource_groups(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListResourceGroupsResponse.resource_groups)
  return _internal_resource_groups(index);
}
inline std::string* ListResourceGroupsResponse::mutable_resource_groups(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListResourceGroupsResponse.resource_groups)
  return _impl_.resource_groups_.Mutable(index);
}
inline void ListResourceGroupsResponse::set_resource_groups(int index, const std::string& value) {
  _impl_.resource_groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListResourceGroupsResponse.resource_groups)
}
inline void ListResourceGroupsResponse::set_resource_groups(int index, std::string&& value) {
  _impl_.resource_groups_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListResourceGroupsResponse.resource_groups)
}
inline void ListResourceGroupsResponse::set_resource_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.resource_groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ListResourceGroupsResponse.resource_groups)
}
inline void ListResourceGroupsResponse::set_resource_groups(int index, const char* value, size_t size) {
  _impl_.resource_groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ListResourceGroupsResponse.resource_groups)
}
inline std::string* ListResourceGroupsResponse::_internal_add_resource_groups() {
  return _impl_.resource_groups_.Add();
}
inline void ListResourceGroupsResponse::add_resource_groups(const std::string& value) {
  _impl_.resource_groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ListResourceGroupsResponse.resource_groups)
}
inline void ListResourceGroupsResponse::add_resource_groups(std::string&& value) {
  _impl_.resource_groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ListResourceGroupsResponse.resource_groups)
}
inline void ListResourceGroupsResponse::add_resource_groups(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.resource_groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ListResourceGroupsResponse.resource_groups)
}
inline void ListResourceGroupsResponse::add_resource_groups(const char* value, size_t size) {
  _impl_.resource_groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ListResourceGroupsResponse.resource_groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListResourceGroupsResponse::resource_groups() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ListResourceGroupsResponse.resource_groups)
  return _impl_.resource_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListResourceGroupsResponse::mutable_resource_groups() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ListResourceGroupsResponse.resource_groups)
  return &_impl_.resource_groups_;
}

// -------------------------------------------------------------------

// DescribeResourceGroupRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DescribeResourceGroupRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DescribeResourceGroupRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DescribeResourceGroupRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DescribeResourceGroupRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeResourceGroupRequest.base)
  return _internal_base();
}
inline void DescribeResourceGroupRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DescribeResourceGroupRequest.base)
}
inline ::milvus::proto::common::MsgBase* DescribeResourceGroupRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeResourceGroupRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeResourceGroupRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeResourceGroupRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DescribeResourceGroupRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeResourceGroupRequest.base)
  return _msg;
}
inline void DescribeResourceGroupRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeResourceGroupRequest.base)
}

// string resource_group = 2;
inline void DescribeResourceGroupRequest::clear_resource_group() {
  _impl_.resource_group_.ClearToEmpty();
}
inline const std::string& DescribeResourceGroupRequest::resource_group() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeResourceGroupRequest.resource_group)
  return _internal_resource_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DescribeResourceGroupRequest::set_resource_group(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resource_group_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DescribeResourceGroupRequest.resource_group)
}
inline std::string* DescribeResourceGroupRequest::mutable_resource_group() {
  std::string* _s = _internal_mutable_resource_group();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeResourceGroupRequest.resource_group)
  return _s;
}
inline const std::string& DescribeResourceGroupRequest::_internal_resource_group() const {
  return _impl_.resource_group_.Get();
}
inline void DescribeResourceGroupRequest::_internal_set_resource_group(const std::string& value) {
  
  _impl_.resource_group_.Set(value, GetArenaForAllocation());
}
inline std::string* DescribeResourceGroupRequest::_internal_mutable_resource_group() {
  
  return _impl_.resource_group_.Mutable(GetArenaForAllocation());
}
inline std::string* DescribeResourceGroupRequest::release_resource_group() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeResourceGroupRequest.resource_group)
  return _impl_.resource_group_.Release();
}
inline void DescribeResourceGroupRequest::set_allocated_resource_group(std::string* resource_group) {
  if (resource_group != nullptr) {
    
  } else {
    
  }
  _impl_.resource_group_.SetAllocated(resource_group, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_group_.IsDefault()) {
    _impl_.resource_group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeResourceGroupRequest.resource_group)
}

// -------------------------------------------------------------------

// DescribeResourceGroupResponse

// .milvus.proto.common.Status status = 1;
inline bool DescribeResourceGroupResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool DescribeResourceGroupResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& DescribeResourceGroupResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& DescribeResourceGroupResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeResourceGroupResponse.status)
  return _internal_status();
}
inline void DescribeResourceGroupResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DescribeResourceGroupResponse.status)
}
inline ::milvus::proto::common::Status* DescribeResourceGroupResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* DescribeResourceGroupResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeResourceGroupResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* DescribeResourceGroupResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* DescribeResourceGroupResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeResourceGroupResponse.status)
  return _msg;
}
inline void DescribeResourceGroupResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeResourceGroupResponse.status)
}

// .milvus.proto.milvus.ResourceGroup resource_group = 2;
inline bool DescribeResourceGroupResponse::_internal_has_resource_group() const {
  return this != internal_default_instance() && _impl_.resource_group_ != nullptr;
}
inline bool DescribeResourceGroupResponse::has_resource_group() const {
  return _internal_has_resource_group();
}
inline void DescribeResourceGroupResponse::clear_resource_group() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_group_ != nullptr) {
    delete _impl_.resource_group_;
  }
  _impl_.resource_group_ = nullptr;
}
inline const ::milvus::proto::milvus::ResourceGroup& DescribeResourceGroupResponse::_internal_resource_group() const {
  const ::milvus::proto::milvus::ResourceGroup* p = _impl_.resource_group_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::milvus::ResourceGroup&>(
      ::milvus::proto::milvus::_ResourceGroup_default_instance_);
}
inline const ::milvus::proto::milvus::ResourceGroup& DescribeResourceGroupResponse::resource_group() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DescribeResourceGroupResponse.resource_group)
  return _internal_resource_group();
}
inline void DescribeResourceGroupResponse::unsafe_arena_set_allocated_resource_group(
    ::milvus::proto::milvus::ResourceGroup* resource_group) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_group_);
  }
  _impl_.resource_group_ = resource_group;
  if (resource_group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DescribeResourceGroupResponse.resource_group)
}
inline ::milvus::proto::milvus::ResourceGroup* DescribeResourceGroupResponse::release_resource_group() {
  
  ::milvus::proto::milvus::ResourceGroup* temp = _impl_.resource_group_;
  _impl_.resource_group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::milvus::ResourceGroup* DescribeResourceGroupResponse::unsafe_arena_release_resource_group() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DescribeResourceGroupResponse.resource_group)
  
  ::milvus::proto::milvus::ResourceGroup* temp = _impl_.resource_group_;
  _impl_.resource_group_ = nullptr;
  return temp;
}
inline ::milvus::proto::milvus::ResourceGroup* DescribeResourceGroupResponse::_internal_mutable_resource_group() {
  
  if (_impl_.resource_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::milvus::ResourceGroup>(GetArenaForAllocation());
    _impl_.resource_group_ = p;
  }
  return _impl_.resource_group_;
}
inline ::milvus::proto::milvus::ResourceGroup* DescribeResourceGroupResponse::mutable_resource_group() {
  ::milvus::proto::milvus::ResourceGroup* _msg = _internal_mutable_resource_group();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DescribeResourceGroupResponse.resource_group)
  return _msg;
}
inline void DescribeResourceGroupResponse::set_allocated_resource_group(::milvus::proto::milvus::ResourceGroup* resource_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_group_;
  }
  if (resource_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource_group);
    if (message_arena != submessage_arena) {
      resource_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_group, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_group_ = resource_group;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DescribeResourceGroupResponse.resource_group)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ResourceGroup

// string name = 1;
inline void ResourceGroup::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ResourceGroup::name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ResourceGroup.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceGroup::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ResourceGroup.name)
}
inline std::string* ResourceGroup::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ResourceGroup.name)
  return _s;
}
inline const std::string& ResourceGroup::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ResourceGroup::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceGroup::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceGroup::release_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ResourceGroup.name)
  return _impl_.name_.Release();
}
inline void ResourceGroup::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ResourceGroup.name)
}

// int32 capacity = 2;
inline void ResourceGroup::clear_capacity() {
  _impl_.capacity_ = 0;
}
inline int32_t ResourceGroup::_internal_capacity() const {
  return _impl_.capacity_;
}
inline int32_t ResourceGroup::capacity() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ResourceGroup.capacity)
  return _internal_capacity();
}
inline void ResourceGroup::_internal_set_capacity(int32_t value) {
  
  _impl_.capacity_ = value;
}
inline void ResourceGroup::set_capacity(int32_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ResourceGroup.capacity)
}

// int32 num_available_node = 3;
inline void ResourceGroup::clear_num_available_node() {
  _impl_.num_available_node_ = 0;
}
inline int32_t ResourceGroup::_internal_num_available_node() const {
  return _impl_.num_available_node_;
}
inline int32_t ResourceGroup::num_available_node() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ResourceGroup.num_available_node)
  return _internal_num_available_node();
}
inline void ResourceGroup::_internal_set_num_available_node(int32_t value) {
  
  _impl_.num_available_node_ = value;
}
inline void ResourceGroup::set_num_available_node(int32_t value) {
  _internal_set_num_available_node(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ResourceGroup.num_available_node)
}

// map<string, int32> num_loaded_replica = 4;
inline int ResourceGroup::_internal_num_loaded_replica_size() const {
  return _impl_.num_loaded_replica_.size();
}
inline int ResourceGroup::num_loaded_replica_size() const {
  return _internal_num_loaded_replica_size();
}
inline void ResourceGroup::clear_num_loaded_replica() {
  _impl_.num_loaded_replica_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
ResourceGroup::_internal_num_loaded_replica() const {
  return _impl_.num_loaded_replica_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
ResourceGroup::num_loaded_replica() const {
  // @@protoc_insertion_point(field_map:milvus.proto.milvus.ResourceGroup.num_loaded_replica)
  return _internal_num_loaded_replica();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
ResourceGroup::_internal_mutable_num_loaded_replica() {
  return _impl_.num_loaded_replica_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
ResourceGroup::mutable_num_loaded_replica() {
  // @@protoc_insertion_point(field_mutable_map:milvus.proto.milvus.ResourceGroup.num_loaded_replica)
  return _internal_mutable_num_loaded_replica();
}

// map<string, int32> num_outgoing_node = 5;
inline int ResourceGroup::_internal_num_outgoing_node_size() const {
  return _impl_.num_outgoing_node_.size();
}
inline int ResourceGroup::num_outgoing_node_size() const {
  return _internal_num_outgoing_node_size();
}
inline void ResourceGroup::clear_num_outgoing_node() {
  _impl_.num_outgoing_node_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
ResourceGroup::_internal_num_outgoing_node() const {
  return _impl_.num_outgoing_node_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
ResourceGroup::num_outgoing_node() const {
  // @@protoc_insertion_point(field_map:milvus.proto.milvus.ResourceGroup.num_outgoing_node)
  return _internal_num_outgoing_node();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
ResourceGroup::_internal_mutable_num_outgoing_node() {
  return _impl_.num_outgoing_node_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
ResourceGroup::mutable_num_outgoing_node() {
  // @@protoc_insertion_point(field_mutable_map:milvus.proto.milvus.ResourceGroup.num_outgoing_node)
  return _internal_mutable_num_outgoing_node();
}

// map<string, int32> num_incoming_node = 6;
inline int ResourceGroup::_internal_num_incoming_node_size() const {
  return _impl_.num_incoming_node_.size();
}
inline int ResourceGroup::num_incoming_node_size() const {
  return _internal_num_incoming_node_size();
}
inline void ResourceGroup::clear_num_incoming_node() {
  _impl_.num_incoming_node_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
ResourceGroup::_internal_num_incoming_node() const {
  return _impl_.num_incoming_node_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
ResourceGroup::num_incoming_node() const {
  // @@protoc_insertion_point(field_map:milvus.proto.milvus.ResourceGroup.num_incoming_node)
  return _internal_num_incoming_node();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
ResourceGroup::_internal_mutable_num_incoming_node() {
  return _impl_.num_incoming_node_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
ResourceGroup::mutable_num_incoming_node() {
  // @@protoc_insertion_point(field_mutable_map:milvus.proto.milvus.ResourceGroup.num_incoming_node)
  return _internal_mutable_num_incoming_node();
}

// -------------------------------------------------------------------

// RenameCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool RenameCollectionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool RenameCollectionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& RenameCollectionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& RenameCollectionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.RenameCollectionRequest.base)
  return _internal_base();
}
inline void RenameCollectionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.RenameCollectionRequest.base)
}
inline ::milvus::proto::common::MsgBase* RenameCollectionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* RenameCollectionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.RenameCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* RenameCollectionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* RenameCollectionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.RenameCollectionRequest.base)
  return _msg;
}
inline void RenameCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.RenameCollectionRequest.base)
}

// string db_name = 2;
inline void RenameCollectionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& RenameCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.RenameCollectionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenameCollectionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.RenameCollectionRequest.db_name)
}
inline std::string* RenameCollectionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.RenameCollectionRequest.db_name)
  return _s;
}
inline const std::string& RenameCollectionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void RenameCollectionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RenameCollectionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RenameCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.RenameCollectionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void RenameCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.RenameCollectionRequest.db_name)
}

// string oldName = 3;
inline void RenameCollectionRequest::clear_oldname() {
  _impl_.oldname_.ClearToEmpty();
}
inline const std::string& RenameCollectionRequest::oldname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.RenameCollectionRequest.oldName)
  return _internal_oldname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenameCollectionRequest::set_oldname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.oldname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.RenameCollectionRequest.oldName)
}
inline std::string* RenameCollectionRequest::mutable_oldname() {
  std::string* _s = _internal_mutable_oldname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.RenameCollectionRequest.oldName)
  return _s;
}
inline const std::string& RenameCollectionRequest::_internal_oldname() const {
  return _impl_.oldname_.Get();
}
inline void RenameCollectionRequest::_internal_set_oldname(const std::string& value) {
  
  _impl_.oldname_.Set(value, GetArenaForAllocation());
}
inline std::string* RenameCollectionRequest::_internal_mutable_oldname() {
  
  return _impl_.oldname_.Mutable(GetArenaForAllocation());
}
inline std::string* RenameCollectionRequest::release_oldname() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.RenameCollectionRequest.oldName)
  return _impl_.oldname_.Release();
}
inline void RenameCollectionRequest::set_allocated_oldname(std::string* oldname) {
  if (oldname != nullptr) {
    
  } else {
    
  }
  _impl_.oldname_.SetAllocated(oldname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oldname_.IsDefault()) {
    _impl_.oldname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.RenameCollectionRequest.oldName)
}

// string newName = 4;
inline void RenameCollectionRequest::clear_newname() {
  _impl_.newname_.ClearToEmpty();
}
inline const std::string& RenameCollectionRequest::newname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.RenameCollectionRequest.newName)
  return _internal_newname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenameCollectionRequest::set_newname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.newname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.RenameCollectionRequest.newName)
}
inline std::string* RenameCollectionRequest::mutable_newname() {
  std::string* _s = _internal_mutable_newname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.RenameCollectionRequest.newName)
  return _s;
}
inline const std::string& RenameCollectionRequest::_internal_newname() const {
  return _impl_.newname_.Get();
}
inline void RenameCollectionRequest::_internal_set_newname(const std::string& value) {
  
  _impl_.newname_.Set(value, GetArenaForAllocation());
}
inline std::string* RenameCollectionRequest::_internal_mutable_newname() {
  
  return _impl_.newname_.Mutable(GetArenaForAllocation());
}
inline std::string* RenameCollectionRequest::release_newname() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.RenameCollectionRequest.newName)
  return _impl_.newname_.Release();
}
inline void RenameCollectionRequest::set_allocated_newname(std::string* newname) {
  if (newname != nullptr) {
    
  } else {
    
  }
  _impl_.newname_.SetAllocated(newname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newname_.IsDefault()) {
    _impl_.newname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.RenameCollectionRequest.newName)
}

// -------------------------------------------------------------------

// GetIndexStatisticsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetIndexStatisticsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetIndexStatisticsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetIndexStatisticsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetIndexStatisticsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStatisticsRequest.base)
  return _internal_base();
}
inline void GetIndexStatisticsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetIndexStatisticsRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetIndexStatisticsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetIndexStatisticsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStatisticsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetIndexStatisticsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetIndexStatisticsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStatisticsRequest.base)
  return _msg;
}
inline void GetIndexStatisticsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStatisticsRequest.base)
}

// string db_name = 2;
inline void GetIndexStatisticsRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& GetIndexStatisticsRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStatisticsRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexStatisticsRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStatisticsRequest.db_name)
}
inline std::string* GetIndexStatisticsRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStatisticsRequest.db_name)
  return _s;
}
inline const std::string& GetIndexStatisticsRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void GetIndexStatisticsRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexStatisticsRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexStatisticsRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStatisticsRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void GetIndexStatisticsRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStatisticsRequest.db_name)
}

// string collection_name = 3;
inline void GetIndexStatisticsRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& GetIndexStatisticsRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStatisticsRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexStatisticsRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStatisticsRequest.collection_name)
}
inline std::string* GetIndexStatisticsRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStatisticsRequest.collection_name)
  return _s;
}
inline const std::string& GetIndexStatisticsRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void GetIndexStatisticsRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexStatisticsRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexStatisticsRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStatisticsRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void GetIndexStatisticsRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStatisticsRequest.collection_name)
}

// string index_name = 4;
inline void GetIndexStatisticsRequest::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& GetIndexStatisticsRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStatisticsRequest.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIndexStatisticsRequest::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.GetIndexStatisticsRequest.index_name)
}
inline std::string* GetIndexStatisticsRequest::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStatisticsRequest.index_name)
  return _s;
}
inline const std::string& GetIndexStatisticsRequest::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void GetIndexStatisticsRequest::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIndexStatisticsRequest::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIndexStatisticsRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStatisticsRequest.index_name)
  return _impl_.index_name_.Release();
}
inline void GetIndexStatisticsRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStatisticsRequest.index_name)
}

// -------------------------------------------------------------------

// GetIndexStatisticsResponse

// .milvus.proto.common.Status status = 1;
inline bool GetIndexStatisticsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetIndexStatisticsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetIndexStatisticsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetIndexStatisticsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStatisticsResponse.status)
  return _internal_status();
}
inline void GetIndexStatisticsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.GetIndexStatisticsResponse.status)
}
inline ::milvus::proto::common::Status* GetIndexStatisticsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexStatisticsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.GetIndexStatisticsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexStatisticsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetIndexStatisticsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStatisticsResponse.status)
  return _msg;
}
inline void GetIndexStatisticsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.GetIndexStatisticsResponse.status)
}

// repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
inline int GetIndexStatisticsResponse::_internal_index_descriptions_size() const {
  return _impl_.index_descriptions_.size();
}
inline int GetIndexStatisticsResponse::index_descriptions_size() const {
  return _internal_index_descriptions_size();
}
inline void GetIndexStatisticsResponse::clear_index_descriptions() {
  _impl_.index_descriptions_.Clear();
}
inline ::milvus::proto::milvus::IndexDescription* GetIndexStatisticsResponse::mutable_index_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.GetIndexStatisticsResponse.index_descriptions)
  return _impl_.index_descriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription >*
GetIndexStatisticsResponse::mutable_index_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.GetIndexStatisticsResponse.index_descriptions)
  return &_impl_.index_descriptions_;
}
inline const ::milvus::proto::milvus::IndexDescription& GetIndexStatisticsResponse::_internal_index_descriptions(int index) const {
  return _impl_.index_descriptions_.Get(index);
}
inline const ::milvus::proto::milvus::IndexDescription& GetIndexStatisticsResponse::index_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.GetIndexStatisticsResponse.index_descriptions)
  return _internal_index_descriptions(index);
}
inline ::milvus::proto::milvus::IndexDescription* GetIndexStatisticsResponse::_internal_add_index_descriptions() {
  return _impl_.index_descriptions_.Add();
}
inline ::milvus::proto::milvus::IndexDescription* GetIndexStatisticsResponse::add_index_descriptions() {
  ::milvus::proto::milvus::IndexDescription* _add = _internal_add_index_descriptions();
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.GetIndexStatisticsResponse.index_descriptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::milvus::IndexDescription >&
GetIndexStatisticsResponse::index_descriptions() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.GetIndexStatisticsResponse.index_descriptions)
  return _impl_.index_descriptions_;
}

// -------------------------------------------------------------------

// ConnectRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ConnectRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ConnectRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ConnectRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ConnectRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ConnectRequest.base)
  return _internal_base();
}
inline void ConnectRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ConnectRequest.base)
}
inline ::milvus::proto::common::MsgBase* ConnectRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ConnectRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ConnectRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ConnectRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ConnectRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ConnectRequest.base)
  return _msg;
}
inline void ConnectRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ConnectRequest.base)
}

// .milvus.proto.common.ClientInfo client_info = 2;
inline bool ConnectRequest::_internal_has_client_info() const {
  return this != internal_default_instance() && _impl_.client_info_ != nullptr;
}
inline bool ConnectRequest::has_client_info() const {
  return _internal_has_client_info();
}
inline const ::milvus::proto::common::ClientInfo& ConnectRequest::_internal_client_info() const {
  const ::milvus::proto::common::ClientInfo* p = _impl_.client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::ClientInfo&>(
      ::milvus::proto::common::_ClientInfo_default_instance_);
}
inline const ::milvus::proto::common::ClientInfo& ConnectRequest::client_info() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ConnectRequest.client_info)
  return _internal_client_info();
}
inline void ConnectRequest::unsafe_arena_set_allocated_client_info(
    ::milvus::proto::common::ClientInfo* client_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_info_);
  }
  _impl_.client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ConnectRequest.client_info)
}
inline ::milvus::proto::common::ClientInfo* ConnectRequest::release_client_info() {
  
  ::milvus::proto::common::ClientInfo* temp = _impl_.client_info_;
  _impl_.client_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::ClientInfo* ConnectRequest::unsafe_arena_release_client_info() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ConnectRequest.client_info)
  
  ::milvus::proto::common::ClientInfo* temp = _impl_.client_info_;
  _impl_.client_info_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::ClientInfo* ConnectRequest::_internal_mutable_client_info() {
  
  if (_impl_.client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::ClientInfo>(GetArenaForAllocation());
    _impl_.client_info_ = p;
  }
  return _impl_.client_info_;
}
inline ::milvus::proto::common::ClientInfo* ConnectRequest::mutable_client_info() {
  ::milvus::proto::common::ClientInfo* _msg = _internal_mutable_client_info();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ConnectRequest.client_info)
  return _msg;
}
inline void ConnectRequest::set_allocated_client_info(::milvus::proto::common::ClientInfo* client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_info_);
  }
  if (client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info));
    if (message_arena != submessage_arena) {
      client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_info_ = client_info;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ConnectRequest.client_info)
}

// -------------------------------------------------------------------

// ConnectResponse

// .milvus.proto.common.Status status = 1;
inline bool ConnectResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ConnectResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ConnectResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ConnectResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ConnectResponse.status)
  return _internal_status();
}
inline void ConnectResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ConnectResponse.status)
}
inline ::milvus::proto::common::Status* ConnectResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ConnectResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ConnectResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ConnectResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ConnectResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ConnectResponse.status)
  return _msg;
}
inline void ConnectResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ConnectResponse.status)
}

// .milvus.proto.common.ServerInfo server_info = 2;
inline bool ConnectResponse::_internal_has_server_info() const {
  return this != internal_default_instance() && _impl_.server_info_ != nullptr;
}
inline bool ConnectResponse::has_server_info() const {
  return _internal_has_server_info();
}
inline const ::milvus::proto::common::ServerInfo& ConnectResponse::_internal_server_info() const {
  const ::milvus::proto::common::ServerInfo* p = _impl_.server_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::ServerInfo&>(
      ::milvus::proto::common::_ServerInfo_default_instance_);
}
inline const ::milvus::proto::common::ServerInfo& ConnectResponse::server_info() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ConnectResponse.server_info)
  return _internal_server_info();
}
inline void ConnectResponse::unsafe_arena_set_allocated_server_info(
    ::milvus::proto::common::ServerInfo* server_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.server_info_);
  }
  _impl_.server_info_ = server_info;
  if (server_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ConnectResponse.server_info)
}
inline ::milvus::proto::common::ServerInfo* ConnectResponse::release_server_info() {
  
  ::milvus::proto::common::ServerInfo* temp = _impl_.server_info_;
  _impl_.server_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::ServerInfo* ConnectResponse::unsafe_arena_release_server_info() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ConnectResponse.server_info)
  
  ::milvus::proto::common::ServerInfo* temp = _impl_.server_info_;
  _impl_.server_info_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::ServerInfo* ConnectResponse::_internal_mutable_server_info() {
  
  if (_impl_.server_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::ServerInfo>(GetArenaForAllocation());
    _impl_.server_info_ = p;
  }
  return _impl_.server_info_;
}
inline ::milvus::proto::common::ServerInfo* ConnectResponse::mutable_server_info() {
  ::milvus::proto::common::ServerInfo* _msg = _internal_mutable_server_info();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ConnectResponse.server_info)
  return _msg;
}
inline void ConnectResponse::set_allocated_server_info(::milvus::proto::common::ServerInfo* server_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.server_info_);
  }
  if (server_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_info));
    if (message_arena != submessage_arena) {
      server_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.server_info_ = server_info;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ConnectResponse.server_info)
}

// int64 identifier = 3;
inline void ConnectResponse::clear_identifier() {
  _impl_.identifier_ = int64_t{0};
}
inline int64_t ConnectResponse::_internal_identifier() const {
  return _impl_.identifier_;
}
inline int64_t ConnectResponse::identifier() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ConnectResponse.identifier)
  return _internal_identifier();
}
inline void ConnectResponse::_internal_set_identifier(int64_t value) {
  
  _impl_.identifier_ = value;
}
inline void ConnectResponse::set_identifier(int64_t value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ConnectResponse.identifier)
}

// -------------------------------------------------------------------

// CreateDatabaseRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreateDatabaseRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool CreateDatabaseRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CreateDatabaseRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CreateDatabaseRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateDatabaseRequest.base)
  return _internal_base();
}
inline void CreateDatabaseRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.CreateDatabaseRequest.base)
}
inline ::milvus::proto::common::MsgBase* CreateDatabaseRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateDatabaseRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateDatabaseRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateDatabaseRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* CreateDatabaseRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateDatabaseRequest.base)
  return _msg;
}
inline void CreateDatabaseRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateDatabaseRequest.base)
}

// string db_name = 2;
inline void CreateDatabaseRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& CreateDatabaseRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.CreateDatabaseRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDatabaseRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.CreateDatabaseRequest.db_name)
}
inline std::string* CreateDatabaseRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.CreateDatabaseRequest.db_name)
  return _s;
}
inline const std::string& CreateDatabaseRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void CreateDatabaseRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDatabaseRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateDatabaseRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.CreateDatabaseRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void CreateDatabaseRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CreateDatabaseRequest.db_name)
}

// -------------------------------------------------------------------

// DropDatabaseRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropDatabaseRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DropDatabaseRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DropDatabaseRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DropDatabaseRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropDatabaseRequest.base)
  return _internal_base();
}
inline void DropDatabaseRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.DropDatabaseRequest.base)
}
inline ::milvus::proto::common::MsgBase* DropDatabaseRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropDatabaseRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropDatabaseRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropDatabaseRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DropDatabaseRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropDatabaseRequest.base)
  return _msg;
}
inline void DropDatabaseRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropDatabaseRequest.base)
}

// string db_name = 2;
inline void DropDatabaseRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DropDatabaseRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.DropDatabaseRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropDatabaseRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.DropDatabaseRequest.db_name)
}
inline std::string* DropDatabaseRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.DropDatabaseRequest.db_name)
  return _s;
}
inline const std::string& DropDatabaseRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DropDatabaseRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropDatabaseRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropDatabaseRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.DropDatabaseRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void DropDatabaseRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.DropDatabaseRequest.db_name)
}

// -------------------------------------------------------------------

// ListDatabasesRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ListDatabasesRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ListDatabasesRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ListDatabasesRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ListDatabasesRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListDatabasesRequest.base)
  return _internal_base();
}
inline void ListDatabasesRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ListDatabasesRequest.base)
}
inline ::milvus::proto::common::MsgBase* ListDatabasesRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ListDatabasesRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListDatabasesRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ListDatabasesRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ListDatabasesRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListDatabasesRequest.base)
  return _msg;
}
inline void ListDatabasesRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListDatabasesRequest.base)
}

// -------------------------------------------------------------------

// ListDatabasesResponse

// .milvus.proto.common.Status status = 1;
inline bool ListDatabasesResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ListDatabasesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ListDatabasesResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ListDatabasesResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListDatabasesResponse.status)
  return _internal_status();
}
inline void ListDatabasesResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.milvus.ListDatabasesResponse.status)
}
inline ::milvus::proto::common::Status* ListDatabasesResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ListDatabasesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.milvus.ListDatabasesResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ListDatabasesResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ListDatabasesResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListDatabasesResponse.status)
  return _msg;
}
inline void ListDatabasesResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.ListDatabasesResponse.status)
}

// repeated string db_names = 2;
inline int ListDatabasesResponse::_internal_db_names_size() const {
  return _impl_.db_names_.size();
}
inline int ListDatabasesResponse::db_names_size() const {
  return _internal_db_names_size();
}
inline void ListDatabasesResponse::clear_db_names() {
  _impl_.db_names_.Clear();
}
inline std::string* ListDatabasesResponse::add_db_names() {
  std::string* _s = _internal_add_db_names();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.milvus.ListDatabasesResponse.db_names)
  return _s;
}
inline const std::string& ListDatabasesResponse::_internal_db_names(int index) const {
  return _impl_.db_names_.Get(index);
}
inline const std::string& ListDatabasesResponse::db_names(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.milvus.ListDatabasesResponse.db_names)
  return _internal_db_names(index);
}
inline std::string* ListDatabasesResponse::mutable_db_names(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.milvus.ListDatabasesResponse.db_names)
  return _impl_.db_names_.Mutable(index);
}
inline void ListDatabasesResponse::set_db_names(int index, const std::string& value) {
  _impl_.db_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListDatabasesResponse.db_names)
}
inline void ListDatabasesResponse::set_db_names(int index, std::string&& value) {
  _impl_.db_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.milvus.ListDatabasesResponse.db_names)
}
inline void ListDatabasesResponse::set_db_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.db_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.milvus.ListDatabasesResponse.db_names)
}
inline void ListDatabasesResponse::set_db_names(int index, const char* value, size_t size) {
  _impl_.db_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.milvus.ListDatabasesResponse.db_names)
}
inline std::string* ListDatabasesResponse::_internal_add_db_names() {
  return _impl_.db_names_.Add();
}
inline void ListDatabasesResponse::add_db_names(const std::string& value) {
  _impl_.db_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ListDatabasesResponse.db_names)
}
inline void ListDatabasesResponse::add_db_names(std::string&& value) {
  _impl_.db_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.milvus.ListDatabasesResponse.db_names)
}
inline void ListDatabasesResponse::add_db_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.db_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.milvus.ListDatabasesResponse.db_names)
}
inline void ListDatabasesResponse::add_db_names(const char* value, size_t size) {
  _impl_.db_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.milvus.ListDatabasesResponse.db_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListDatabasesResponse::db_names() const {
  // @@protoc_insertion_point(field_list:milvus.proto.milvus.ListDatabasesResponse.db_names)
  return _impl_.db_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListDatabasesResponse::mutable_db_names() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.milvus.ListDatabasesResponse.db_names)
  return &_impl_.db_names_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace milvus
}  // namespace proto
}  // namespace milvus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::milvus::proto::milvus::ShowType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::milvus::ShowType>() {
  return ::milvus::proto::milvus::ShowType_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::milvus::OperateUserRoleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::milvus::OperateUserRoleType>() {
  return ::milvus::proto::milvus::OperateUserRoleType_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::milvus::OperatePrivilegeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::milvus::OperatePrivilegeType>() {
  return ::milvus::proto::milvus::OperatePrivilegeType_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::milvus::QuotaState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::milvus::QuotaState>() {
  return ::milvus::proto::milvus::QuotaState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_milvus_2eproto
