// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_internal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_internal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "schema.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_internal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_internal_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_internal_2eproto;
namespace milvus {
namespace proto {
namespace internal {
class AlterAliasRequest;
struct AlterAliasRequestDefaultTypeInternal;
extern AlterAliasRequestDefaultTypeInternal _AlterAliasRequest_default_instance_;
class ChannelTimeTickMsg;
struct ChannelTimeTickMsgDefaultTypeInternal;
extern ChannelTimeTickMsgDefaultTypeInternal _ChannelTimeTickMsg_default_instance_;
class CostAggregation;
struct CostAggregationDefaultTypeInternal;
extern CostAggregationDefaultTypeInternal _CostAggregation_default_instance_;
class CreateAliasRequest;
struct CreateAliasRequestDefaultTypeInternal;
extern CreateAliasRequestDefaultTypeInternal _CreateAliasRequest_default_instance_;
class CreateIndexRequest;
struct CreateIndexRequestDefaultTypeInternal;
extern CreateIndexRequestDefaultTypeInternal _CreateIndexRequest_default_instance_;
class CredentialInfo;
struct CredentialInfoDefaultTypeInternal;
extern CredentialInfoDefaultTypeInternal _CredentialInfo_default_instance_;
class DropAliasRequest;
struct DropAliasRequestDefaultTypeInternal;
extern DropAliasRequestDefaultTypeInternal _DropAliasRequest_default_instance_;
class FieldStats;
struct FieldStatsDefaultTypeInternal;
extern FieldStatsDefaultTypeInternal _FieldStats_default_instance_;
class GetDdChannelRequest;
struct GetDdChannelRequestDefaultTypeInternal;
extern GetDdChannelRequestDefaultTypeInternal _GetDdChannelRequest_default_instance_;
class GetStatisticsChannelRequest;
struct GetStatisticsChannelRequestDefaultTypeInternal;
extern GetStatisticsChannelRequestDefaultTypeInternal _GetStatisticsChannelRequest_default_instance_;
class GetStatisticsRequest;
struct GetStatisticsRequestDefaultTypeInternal;
extern GetStatisticsRequestDefaultTypeInternal _GetStatisticsRequest_default_instance_;
class GetStatisticsResponse;
struct GetStatisticsResponseDefaultTypeInternal;
extern GetStatisticsResponseDefaultTypeInternal _GetStatisticsResponse_default_instance_;
class GetTimeTickChannelRequest;
struct GetTimeTickChannelRequestDefaultTypeInternal;
extern GetTimeTickChannelRequestDefaultTypeInternal _GetTimeTickChannelRequest_default_instance_;
class IndexStats;
struct IndexStatsDefaultTypeInternal;
extern IndexStatsDefaultTypeInternal _IndexStats_default_instance_;
class InitParams;
struct InitParamsDefaultTypeInternal;
extern InitParamsDefaultTypeInternal _InitParams_default_instance_;
class ListPolicyRequest;
struct ListPolicyRequestDefaultTypeInternal;
extern ListPolicyRequestDefaultTypeInternal _ListPolicyRequest_default_instance_;
class ListPolicyResponse;
struct ListPolicyResponseDefaultTypeInternal;
extern ListPolicyResponseDefaultTypeInternal _ListPolicyResponse_default_instance_;
class LoadIndex;
struct LoadIndexDefaultTypeInternal;
extern LoadIndexDefaultTypeInternal _LoadIndex_default_instance_;
class NodeInfo;
struct NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class Rate;
struct RateDefaultTypeInternal;
extern RateDefaultTypeInternal _Rate_default_instance_;
class RetrieveRequest;
struct RetrieveRequestDefaultTypeInternal;
extern RetrieveRequestDefaultTypeInternal _RetrieveRequest_default_instance_;
class RetrieveResults;
struct RetrieveResultsDefaultTypeInternal;
extern RetrieveResultsDefaultTypeInternal _RetrieveResults_default_instance_;
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResults;
struct SearchResultsDefaultTypeInternal;
extern SearchResultsDefaultTypeInternal _SearchResults_default_instance_;
class SegmentStats;
struct SegmentStatsDefaultTypeInternal;
extern SegmentStatsDefaultTypeInternal _SegmentStats_default_instance_;
class ShowConfigurationsRequest;
struct ShowConfigurationsRequestDefaultTypeInternal;
extern ShowConfigurationsRequestDefaultTypeInternal _ShowConfigurationsRequest_default_instance_;
class ShowConfigurationsResponse;
struct ShowConfigurationsResponseDefaultTypeInternal;
extern ShowConfigurationsResponseDefaultTypeInternal _ShowConfigurationsResponse_default_instance_;
class StringList;
struct StringListDefaultTypeInternal;
extern StringListDefaultTypeInternal _StringList_default_instance_;
}  // namespace internal
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> ::milvus::proto::internal::AlterAliasRequest* Arena::CreateMaybeMessage<::milvus::proto::internal::AlterAliasRequest>(Arena*);
template<> ::milvus::proto::internal::ChannelTimeTickMsg* Arena::CreateMaybeMessage<::milvus::proto::internal::ChannelTimeTickMsg>(Arena*);
template<> ::milvus::proto::internal::CostAggregation* Arena::CreateMaybeMessage<::milvus::proto::internal::CostAggregation>(Arena*);
template<> ::milvus::proto::internal::CreateAliasRequest* Arena::CreateMaybeMessage<::milvus::proto::internal::CreateAliasRequest>(Arena*);
template<> ::milvus::proto::internal::CreateIndexRequest* Arena::CreateMaybeMessage<::milvus::proto::internal::CreateIndexRequest>(Arena*);
template<> ::milvus::proto::internal::CredentialInfo* Arena::CreateMaybeMessage<::milvus::proto::internal::CredentialInfo>(Arena*);
template<> ::milvus::proto::internal::DropAliasRequest* Arena::CreateMaybeMessage<::milvus::proto::internal::DropAliasRequest>(Arena*);
template<> ::milvus::proto::internal::FieldStats* Arena::CreateMaybeMessage<::milvus::proto::internal::FieldStats>(Arena*);
template<> ::milvus::proto::internal::GetDdChannelRequest* Arena::CreateMaybeMessage<::milvus::proto::internal::GetDdChannelRequest>(Arena*);
template<> ::milvus::proto::internal::GetStatisticsChannelRequest* Arena::CreateMaybeMessage<::milvus::proto::internal::GetStatisticsChannelRequest>(Arena*);
template<> ::milvus::proto::internal::GetStatisticsRequest* Arena::CreateMaybeMessage<::milvus::proto::internal::GetStatisticsRequest>(Arena*);
template<> ::milvus::proto::internal::GetStatisticsResponse* Arena::CreateMaybeMessage<::milvus::proto::internal::GetStatisticsResponse>(Arena*);
template<> ::milvus::proto::internal::GetTimeTickChannelRequest* Arena::CreateMaybeMessage<::milvus::proto::internal::GetTimeTickChannelRequest>(Arena*);
template<> ::milvus::proto::internal::IndexStats* Arena::CreateMaybeMessage<::milvus::proto::internal::IndexStats>(Arena*);
template<> ::milvus::proto::internal::InitParams* Arena::CreateMaybeMessage<::milvus::proto::internal::InitParams>(Arena*);
template<> ::milvus::proto::internal::ListPolicyRequest* Arena::CreateMaybeMessage<::milvus::proto::internal::ListPolicyRequest>(Arena*);
template<> ::milvus::proto::internal::ListPolicyResponse* Arena::CreateMaybeMessage<::milvus::proto::internal::ListPolicyResponse>(Arena*);
template<> ::milvus::proto::internal::LoadIndex* Arena::CreateMaybeMessage<::milvus::proto::internal::LoadIndex>(Arena*);
template<> ::milvus::proto::internal::NodeInfo* Arena::CreateMaybeMessage<::milvus::proto::internal::NodeInfo>(Arena*);
template<> ::milvus::proto::internal::Rate* Arena::CreateMaybeMessage<::milvus::proto::internal::Rate>(Arena*);
template<> ::milvus::proto::internal::RetrieveRequest* Arena::CreateMaybeMessage<::milvus::proto::internal::RetrieveRequest>(Arena*);
template<> ::milvus::proto::internal::RetrieveResults* Arena::CreateMaybeMessage<::milvus::proto::internal::RetrieveResults>(Arena*);
template<> ::milvus::proto::internal::SearchRequest* Arena::CreateMaybeMessage<::milvus::proto::internal::SearchRequest>(Arena*);
template<> ::milvus::proto::internal::SearchResults* Arena::CreateMaybeMessage<::milvus::proto::internal::SearchResults>(Arena*);
template<> ::milvus::proto::internal::SegmentStats* Arena::CreateMaybeMessage<::milvus::proto::internal::SegmentStats>(Arena*);
template<> ::milvus::proto::internal::ShowConfigurationsRequest* Arena::CreateMaybeMessage<::milvus::proto::internal::ShowConfigurationsRequest>(Arena*);
template<> ::milvus::proto::internal::ShowConfigurationsResponse* Arena::CreateMaybeMessage<::milvus::proto::internal::ShowConfigurationsResponse>(Arena*);
template<> ::milvus::proto::internal::StringList* Arena::CreateMaybeMessage<::milvus::proto::internal::StringList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace milvus {
namespace proto {
namespace internal {

enum RateType : int {
  DDLCollection = 0,
  DDLPartition = 1,
  DDLIndex = 2,
  DDLFlush = 3,
  DDLCompaction = 4,
  DMLInsert = 5,
  DMLDelete = 6,
  DMLBulkLoad = 7,
  DQLSearch = 8,
  DQLQuery = 9,
  DMLUpsert = 10,
  RateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RateType_IsValid(int value);
constexpr RateType RateType_MIN = DDLCollection;
constexpr RateType RateType_MAX = DMLUpsert;
constexpr int RateType_ARRAYSIZE = RateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RateType_descriptor();
template<typename T>
inline const std::string& RateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RateType_descriptor(), enum_t_value);
}
inline bool RateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RateType>(
    RateType_descriptor(), name, value);
}
// ===================================================================

class GetTimeTickChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:milvus.proto.internal.GetTimeTickChannelRequest) */ {
 public:
  inline GetTimeTickChannelRequest() : GetTimeTickChannelRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetTimeTickChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTimeTickChannelRequest(const GetTimeTickChannelRequest& from);
  GetTimeTickChannelRequest(GetTimeTickChannelRequest&& from) noexcept
    : GetTimeTickChannelRequest() {
    *this = ::std::move(from);
  }

  inline GetTimeTickChannelRequest& operator=(const GetTimeTickChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTimeTickChannelRequest& operator=(GetTimeTickChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTimeTickChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTimeTickChannelRequest* internal_default_instance() {
    return reinterpret_cast<const GetTimeTickChannelRequest*>(
               &_GetTimeTickChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetTimeTickChannelRequest& a, GetTimeTickChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTimeTickChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTimeTickChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTimeTickChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTimeTickChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetTimeTickChannelRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetTimeTickChannelRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.GetTimeTickChannelRequest";
  }
  protected:
  explicit GetTimeTickChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.GetTimeTickChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class GetStatisticsChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:milvus.proto.internal.GetStatisticsChannelRequest) */ {
 public:
  inline GetStatisticsChannelRequest() : GetStatisticsChannelRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetStatisticsChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatisticsChannelRequest(const GetStatisticsChannelRequest& from);
  GetStatisticsChannelRequest(GetStatisticsChannelRequest&& from) noexcept
    : GetStatisticsChannelRequest() {
    *this = ::std::move(from);
  }

  inline GetStatisticsChannelRequest& operator=(const GetStatisticsChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatisticsChannelRequest& operator=(GetStatisticsChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatisticsChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatisticsChannelRequest* internal_default_instance() {
    return reinterpret_cast<const GetStatisticsChannelRequest*>(
               &_GetStatisticsChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetStatisticsChannelRequest& a, GetStatisticsChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatisticsChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatisticsChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatisticsChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatisticsChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetStatisticsChannelRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetStatisticsChannelRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.GetStatisticsChannelRequest";
  }
  protected:
  explicit GetStatisticsChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.GetStatisticsChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class GetDdChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:milvus.proto.internal.GetDdChannelRequest) */ {
 public:
  inline GetDdChannelRequest() : GetDdChannelRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetDdChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDdChannelRequest(const GetDdChannelRequest& from);
  GetDdChannelRequest(GetDdChannelRequest&& from) noexcept
    : GetDdChannelRequest() {
    *this = ::std::move(from);
  }

  inline GetDdChannelRequest& operator=(const GetDdChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDdChannelRequest& operator=(GetDdChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDdChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDdChannelRequest* internal_default_instance() {
    return reinterpret_cast<const GetDdChannelRequest*>(
               &_GetDdChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetDdChannelRequest& a, GetDdChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDdChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDdChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDdChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDdChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetDdChannelRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetDdChannelRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.GetDdChannelRequest";
  }
  protected:
  explicit GetDdChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.GetDdChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.NodeInfo) */ {
 public:
  inline NodeInfo() : NodeInfo(nullptr) {}
  ~NodeInfo() override;
  explicit PROTOBUF_CONSTEXPR NodeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeInfo(const NodeInfo& from);
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeInfo& from) {
    NodeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.NodeInfo";
  }
  protected:
  explicit NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // string role = 2;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // .milvus.proto.common.Address address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::milvus::proto::common::Address& address() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Address* release_address();
  ::milvus::proto::common::Address* mutable_address();
  void set_allocated_address(::milvus::proto::common::Address* address);
  private:
  const ::milvus::proto::common::Address& _internal_address() const;
  ::milvus::proto::common::Address* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::milvus::proto::common::Address* address);
  ::milvus::proto::common::Address* unsafe_arena_release_address();

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.NodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    ::milvus::proto::common::Address* address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class InitParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.InitParams) */ {
 public:
  inline InitParams() : InitParams(nullptr) {}
  ~InitParams() override;
  explicit PROTOBUF_CONSTEXPR InitParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitParams(const InitParams& from);
  InitParams(InitParams&& from) noexcept
    : InitParams() {
    *this = ::std::move(from);
  }

  inline InitParams& operator=(const InitParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitParams& operator=(InitParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitParams* internal_default_instance() {
    return reinterpret_cast<const InitParams*>(
               &_InitParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InitParams& a, InitParams& b) {
    a.Swap(&b);
  }
  inline void Swap(InitParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InitParams& from) {
    InitParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.InitParams";
  }
  protected:
  explicit InitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartParamsFieldNumber = 2,
    kNodeIDFieldNumber = 1,
  };
  // repeated .milvus.proto.common.KeyValuePair start_params = 2;
  int start_params_size() const;
  private:
  int _internal_start_params_size() const;
  public:
  void clear_start_params();
  ::milvus::proto::common::KeyValuePair* mutable_start_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_start_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_start_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_start_params();
  public:
  const ::milvus::proto::common::KeyValuePair& start_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_start_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      start_params() const;

  // int64 nodeID = 1;
  void clear_nodeid();
  int64_t nodeid() const;
  void set_nodeid(int64_t value);
  private:
  int64_t _internal_nodeid() const;
  void _internal_set_nodeid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.InitParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > start_params_;
    int64_t nodeid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class StringList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.StringList) */ {
 public:
  inline StringList() : StringList(nullptr) {}
  ~StringList() override;
  explicit PROTOBUF_CONSTEXPR StringList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringList(const StringList& from);
  StringList(StringList&& from) noexcept
    : StringList() {
    *this = ::std::move(from);
  }

  inline StringList& operator=(const StringList& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringList& operator=(StringList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringList& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringList* internal_default_instance() {
    return reinterpret_cast<const StringList*>(
               &_StringList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StringList& a, StringList& b) {
    a.Swap(&b);
  }
  inline void Swap(StringList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringList& from) {
    StringList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.StringList";
  }
  protected:
  explicit StringList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated string values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // .milvus.proto.common.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.StringList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class GetStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.GetStatisticsRequest) */ {
 public:
  inline GetStatisticsRequest() : GetStatisticsRequest(nullptr) {}
  ~GetStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatisticsRequest(const GetStatisticsRequest& from);
  GetStatisticsRequest(GetStatisticsRequest&& from) noexcept
    : GetStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetStatisticsRequest& operator=(const GetStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatisticsRequest& operator=(GetStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetStatisticsRequest*>(
               &_GetStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetStatisticsRequest& a, GetStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStatisticsRequest& from) {
    GetStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.GetStatisticsRequest";
  }
  protected:
  explicit GetStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionIDsFieldNumber = 4,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 2,
    kCollectionIDFieldNumber = 3,
    kTravelTimestampFieldNumber = 5,
    kGuaranteeTimestampFieldNumber = 6,
    kTimeoutTimestampFieldNumber = 7,
  };
  // repeated int64 partitionIDs = 4;
  int partitionids_size() const;
  private:
  int _internal_partitionids_size() const;
  public:
  void clear_partitionids();
  private:
  int64_t _internal_partitionids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_partitionids() const;
  void _internal_add_partitionids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_partitionids();
  public:
  int64_t partitionids(int index) const;
  void set_partitionids(int index, int64_t value);
  void add_partitionids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      partitionids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_partitionids();

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 2;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 3;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // uint64 travel_timestamp = 5;
  void clear_travel_timestamp();
  uint64_t travel_timestamp() const;
  void set_travel_timestamp(uint64_t value);
  private:
  uint64_t _internal_travel_timestamp() const;
  void _internal_set_travel_timestamp(uint64_t value);
  public:

  // uint64 guarantee_timestamp = 6;
  void clear_guarantee_timestamp();
  uint64_t guarantee_timestamp() const;
  void set_guarantee_timestamp(uint64_t value);
  private:
  uint64_t _internal_guarantee_timestamp() const;
  void _internal_set_guarantee_timestamp(uint64_t value);
  public:

  // uint64 timeout_timestamp = 7;
  void clear_timeout_timestamp();
  uint64_t timeout_timestamp() const;
  void set_timeout_timestamp(uint64_t value);
  private:
  uint64_t _internal_timeout_timestamp() const;
  void _internal_set_timeout_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.GetStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > partitionids_;
    mutable std::atomic<int> _partitionids_cached_byte_size_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t dbid_;
    int64_t collectionid_;
    uint64_t travel_timestamp_;
    uint64_t guarantee_timestamp_;
    uint64_t timeout_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class GetStatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.GetStatisticsResponse) */ {
 public:
  inline GetStatisticsResponse() : GetStatisticsResponse(nullptr) {}
  ~GetStatisticsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetStatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatisticsResponse(const GetStatisticsResponse& from);
  GetStatisticsResponse(GetStatisticsResponse&& from) noexcept
    : GetStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline GetStatisticsResponse& operator=(const GetStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatisticsResponse& operator=(GetStatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const GetStatisticsResponse*>(
               &_GetStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetStatisticsResponse& a, GetStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatisticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStatisticsResponse& from) {
    GetStatisticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatisticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.GetStatisticsResponse";
  }
  protected:
  explicit GetStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 3,
    kBaseFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .milvus.proto.common.KeyValuePair stats = 3;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::milvus::proto::common::KeyValuePair* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_stats();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_stats(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_stats();
  public:
  const ::milvus::proto::common::KeyValuePair& stats(int index) const;
  ::milvus::proto::common::KeyValuePair* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      stats() const;

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.common.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.GetStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > stats_;
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class CreateAliasRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.CreateAliasRequest) */ {
 public:
  inline CreateAliasRequest() : CreateAliasRequest(nullptr) {}
  ~CreateAliasRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateAliasRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAliasRequest(const CreateAliasRequest& from);
  CreateAliasRequest(CreateAliasRequest&& from) noexcept
    : CreateAliasRequest() {
    *this = ::std::move(from);
  }

  inline CreateAliasRequest& operator=(const CreateAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAliasRequest& operator=(CreateAliasRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAliasRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAliasRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAliasRequest*>(
               &_CreateAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateAliasRequest& a, CreateAliasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAliasRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAliasRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAliasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateAliasRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAliasRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateAliasRequest& from) {
    CreateAliasRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAliasRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.CreateAliasRequest";
  }
  protected:
  explicit CreateAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kAliasFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string alias = 4;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.CreateAliasRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class DropAliasRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.DropAliasRequest) */ {
 public:
  inline DropAliasRequest() : DropAliasRequest(nullptr) {}
  ~DropAliasRequest() override;
  explicit PROTOBUF_CONSTEXPR DropAliasRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropAliasRequest(const DropAliasRequest& from);
  DropAliasRequest(DropAliasRequest&& from) noexcept
    : DropAliasRequest() {
    *this = ::std::move(from);
  }

  inline DropAliasRequest& operator=(const DropAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropAliasRequest& operator=(DropAliasRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropAliasRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropAliasRequest* internal_default_instance() {
    return reinterpret_cast<const DropAliasRequest*>(
               &_DropAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DropAliasRequest& a, DropAliasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropAliasRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropAliasRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropAliasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropAliasRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropAliasRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropAliasRequest& from) {
    DropAliasRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropAliasRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.DropAliasRequest";
  }
  protected:
  explicit DropAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kAliasFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string alias = 3;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.DropAliasRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class AlterAliasRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.AlterAliasRequest) */ {
 public:
  inline AlterAliasRequest() : AlterAliasRequest(nullptr) {}
  ~AlterAliasRequest() override;
  explicit PROTOBUF_CONSTEXPR AlterAliasRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlterAliasRequest(const AlterAliasRequest& from);
  AlterAliasRequest(AlterAliasRequest&& from) noexcept
    : AlterAliasRequest() {
    *this = ::std::move(from);
  }

  inline AlterAliasRequest& operator=(const AlterAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlterAliasRequest& operator=(AlterAliasRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlterAliasRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlterAliasRequest* internal_default_instance() {
    return reinterpret_cast<const AlterAliasRequest*>(
               &_AlterAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AlterAliasRequest& a, AlterAliasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlterAliasRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlterAliasRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlterAliasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlterAliasRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlterAliasRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlterAliasRequest& from) {
    AlterAliasRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlterAliasRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.AlterAliasRequest";
  }
  protected:
  explicit AlterAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kAliasFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string alias = 4;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.AlterAliasRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class CreateIndexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.CreateIndexRequest) */ {
 public:
  inline CreateIndexRequest() : CreateIndexRequest(nullptr) {}
  ~CreateIndexRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateIndexRequest(const CreateIndexRequest& from);
  CreateIndexRequest(CreateIndexRequest&& from) noexcept
    : CreateIndexRequest() {
    *this = ::std::move(from);
  }

  inline CreateIndexRequest& operator=(const CreateIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIndexRequest& operator=(CreateIndexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateIndexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateIndexRequest* internal_default_instance() {
    return reinterpret_cast<const CreateIndexRequest*>(
               &_CreateIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CreateIndexRequest& a, CreateIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateIndexRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateIndexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateIndexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateIndexRequest& from) {
    CreateIndexRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateIndexRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.CreateIndexRequest";
  }
  protected:
  explicit CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraParamsFieldNumber = 8,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kFieldNameFieldNumber = 4,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 5,
    kCollectionIDFieldNumber = 6,
    kFieldIDFieldNumber = 7,
  };
  // repeated .milvus.proto.common.KeyValuePair extra_params = 8;
  int extra_params_size() const;
  private:
  int _internal_extra_params_size() const;
  public:
  void clear_extra_params();
  ::milvus::proto::common::KeyValuePair* mutable_extra_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_extra_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_extra_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_extra_params();
  public:
  const ::milvus::proto::common::KeyValuePair& extra_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_extra_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      extra_params() const;

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string field_name = 4;
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 5;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 6;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 fieldID = 7;
  void clear_fieldid();
  int64_t fieldid() const;
  void set_fieldid(int64_t value);
  private:
  int64_t _internal_fieldid() const;
  void _internal_set_fieldid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.CreateIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > extra_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t dbid_;
    int64_t collectionid_;
    int64_t fieldid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchRequest& from) {
    SearchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionIDsFieldNumber = 5,
    kOutputFieldsIdFieldNumber = 10,
    kDslFieldNumber = 6,
    kPlaceholderGroupFieldNumber = 7,
    kSerializedExprPlanFieldNumber = 9,
    kMetricTypeFieldNumber = 16,
    kUsernameFieldNumber = 18,
    kBaseFieldNumber = 1,
    kReqIDFieldNumber = 2,
    kDbIDFieldNumber = 3,
    kCollectionIDFieldNumber = 4,
    kTravelTimestampFieldNumber = 11,
    kGuaranteeTimestampFieldNumber = 12,
    kDslTypeFieldNumber = 8,
    kIgnoreGrowingFieldNumber = 17,
    kTimeoutTimestampFieldNumber = 13,
    kNqFieldNumber = 14,
    kTopkFieldNumber = 15,
  };
  // repeated int64 partitionIDs = 5;
  int partitionids_size() const;
  private:
  int _internal_partitionids_size() const;
  public:
  void clear_partitionids();
  private:
  int64_t _internal_partitionids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_partitionids() const;
  void _internal_add_partitionids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_partitionids();
  public:
  int64_t partitionids(int index) const;
  void set_partitionids(int index, int64_t value);
  void add_partitionids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      partitionids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_partitionids();

  // repeated int64 output_fields_id = 10;
  int output_fields_id_size() const;
  private:
  int _internal_output_fields_id_size() const;
  public:
  void clear_output_fields_id();
  private:
  int64_t _internal_output_fields_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_output_fields_id() const;
  void _internal_add_output_fields_id(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_output_fields_id();
  public:
  int64_t output_fields_id(int index) const;
  void set_output_fields_id(int index, int64_t value);
  void add_output_fields_id(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      output_fields_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_output_fields_id();

  // string dsl = 6;
  void clear_dsl();
  const std::string& dsl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dsl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dsl();
  PROTOBUF_NODISCARD std::string* release_dsl();
  void set_allocated_dsl(std::string* dsl);
  private:
  const std::string& _internal_dsl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dsl(const std::string& value);
  std::string* _internal_mutable_dsl();
  public:

  // bytes placeholder_group = 7;
  void clear_placeholder_group();
  const std::string& placeholder_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_placeholder_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_placeholder_group();
  PROTOBUF_NODISCARD std::string* release_placeholder_group();
  void set_allocated_placeholder_group(std::string* placeholder_group);
  private:
  const std::string& _internal_placeholder_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_placeholder_group(const std::string& value);
  std::string* _internal_mutable_placeholder_group();
  public:

  // bytes serialized_expr_plan = 9;
  void clear_serialized_expr_plan();
  const std::string& serialized_expr_plan() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialized_expr_plan(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialized_expr_plan();
  PROTOBUF_NODISCARD std::string* release_serialized_expr_plan();
  void set_allocated_serialized_expr_plan(std::string* serialized_expr_plan);
  private:
  const std::string& _internal_serialized_expr_plan() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialized_expr_plan(const std::string& value);
  std::string* _internal_mutable_serialized_expr_plan();
  public:

  // string metricType = 16;
  void clear_metrictype();
  const std::string& metrictype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metrictype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metrictype();
  PROTOBUF_NODISCARD std::string* release_metrictype();
  void set_allocated_metrictype(std::string* metrictype);
  private:
  const std::string& _internal_metrictype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metrictype(const std::string& value);
  std::string* _internal_mutable_metrictype();
  public:

  // string username = 18;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 reqID = 2;
  void clear_reqid();
  int64_t reqid() const;
  void set_reqid(int64_t value);
  private:
  int64_t _internal_reqid() const;
  void _internal_set_reqid(int64_t value);
  public:

  // int64 dbID = 3;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 4;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // uint64 travel_timestamp = 11;
  void clear_travel_timestamp();
  uint64_t travel_timestamp() const;
  void set_travel_timestamp(uint64_t value);
  private:
  uint64_t _internal_travel_timestamp() const;
  void _internal_set_travel_timestamp(uint64_t value);
  public:

  // uint64 guarantee_timestamp = 12;
  void clear_guarantee_timestamp();
  uint64_t guarantee_timestamp() const;
  void set_guarantee_timestamp(uint64_t value);
  private:
  uint64_t _internal_guarantee_timestamp() const;
  void _internal_set_guarantee_timestamp(uint64_t value);
  public:

  // .milvus.proto.common.DslType dsl_type = 8;
  void clear_dsl_type();
  ::milvus::proto::common::DslType dsl_type() const;
  void set_dsl_type(::milvus::proto::common::DslType value);
  private:
  ::milvus::proto::common::DslType _internal_dsl_type() const;
  void _internal_set_dsl_type(::milvus::proto::common::DslType value);
  public:

  // bool ignoreGrowing = 17;
  void clear_ignoregrowing();
  bool ignoregrowing() const;
  void set_ignoregrowing(bool value);
  private:
  bool _internal_ignoregrowing() const;
  void _internal_set_ignoregrowing(bool value);
  public:

  // uint64 timeout_timestamp = 13;
  void clear_timeout_timestamp();
  uint64_t timeout_timestamp() const;
  void set_timeout_timestamp(uint64_t value);
  private:
  uint64_t _internal_timeout_timestamp() const;
  void _internal_set_timeout_timestamp(uint64_t value);
  public:

  // int64 nq = 14;
  void clear_nq();
  int64_t nq() const;
  void set_nq(int64_t value);
  private:
  int64_t _internal_nq() const;
  void _internal_set_nq(int64_t value);
  public:

  // int64 topk = 15;
  void clear_topk();
  int64_t topk() const;
  void set_topk(int64_t value);
  private:
  int64_t _internal_topk() const;
  void _internal_set_topk(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > partitionids_;
    mutable std::atomic<int> _partitionids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > output_fields_id_;
    mutable std::atomic<int> _output_fields_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dsl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placeholder_group_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_expr_plan_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metrictype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t reqid_;
    int64_t dbid_;
    int64_t collectionid_;
    uint64_t travel_timestamp_;
    uint64_t guarantee_timestamp_;
    int dsl_type_;
    bool ignoregrowing_;
    uint64_t timeout_timestamp_;
    int64_t nq_;
    int64_t topk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class SearchResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.SearchResults) */ {
 public:
  inline SearchResults() : SearchResults(nullptr) {}
  ~SearchResults() override;
  explicit PROTOBUF_CONSTEXPR SearchResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResults(const SearchResults& from);
  SearchResults(SearchResults&& from) noexcept
    : SearchResults() {
    *this = ::std::move(from);
  }

  inline SearchResults& operator=(const SearchResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResults& operator=(SearchResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResults* internal_default_instance() {
    return reinterpret_cast<const SearchResults*>(
               &_SearchResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SearchResults& a, SearchResults& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchResults& from) {
    SearchResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.SearchResults";
  }
  protected:
  explicit SearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSealedSegmentIDsSearchedFieldNumber = 7,
    kChannelIDsSearchedFieldNumber = 8,
    kGlobalSealedSegmentIDsFieldNumber = 9,
    kMetricTypeFieldNumber = 4,
    kSlicedBlobFieldNumber = 10,
    kBaseFieldNumber = 1,
    kStatusFieldNumber = 2,
    kCostAggregationFieldNumber = 13,
    kReqIDFieldNumber = 3,
    kNumQueriesFieldNumber = 5,
    kTopKFieldNumber = 6,
    kSlicedNumCountFieldNumber = 11,
    kSlicedOffsetFieldNumber = 12,
  };
  // repeated int64 sealed_segmentIDs_searched = 7;
  int sealed_segmentids_searched_size() const;
  private:
  int _internal_sealed_segmentids_searched_size() const;
  public:
  void clear_sealed_segmentids_searched();
  private:
  int64_t _internal_sealed_segmentids_searched(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sealed_segmentids_searched() const;
  void _internal_add_sealed_segmentids_searched(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sealed_segmentids_searched();
  public:
  int64_t sealed_segmentids_searched(int index) const;
  void set_sealed_segmentids_searched(int index, int64_t value);
  void add_sealed_segmentids_searched(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sealed_segmentids_searched() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sealed_segmentids_searched();

  // repeated string channelIDs_searched = 8;
  int channelids_searched_size() const;
  private:
  int _internal_channelids_searched_size() const;
  public:
  void clear_channelids_searched();
  const std::string& channelids_searched(int index) const;
  std::string* mutable_channelids_searched(int index);
  void set_channelids_searched(int index, const std::string& value);
  void set_channelids_searched(int index, std::string&& value);
  void set_channelids_searched(int index, const char* value);
  void set_channelids_searched(int index, const char* value, size_t size);
  std::string* add_channelids_searched();
  void add_channelids_searched(const std::string& value);
  void add_channelids_searched(std::string&& value);
  void add_channelids_searched(const char* value);
  void add_channelids_searched(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channelids_searched() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channelids_searched();
  private:
  const std::string& _internal_channelids_searched(int index) const;
  std::string* _internal_add_channelids_searched();
  public:

  // repeated int64 global_sealed_segmentIDs = 9;
  int global_sealed_segmentids_size() const;
  private:
  int _internal_global_sealed_segmentids_size() const;
  public:
  void clear_global_sealed_segmentids();
  private:
  int64_t _internal_global_sealed_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_global_sealed_segmentids() const;
  void _internal_add_global_sealed_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_global_sealed_segmentids();
  public:
  int64_t global_sealed_segmentids(int index) const;
  void set_global_sealed_segmentids(int index, int64_t value);
  void add_global_sealed_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      global_sealed_segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_global_sealed_segmentids();

  // string metric_type = 4;
  void clear_metric_type();
  const std::string& metric_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric_type();
  PROTOBUF_NODISCARD std::string* release_metric_type();
  void set_allocated_metric_type(std::string* metric_type);
  private:
  const std::string& _internal_metric_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric_type(const std::string& value);
  std::string* _internal_mutable_metric_type();
  public:

  // bytes sliced_blob = 10;
  void clear_sliced_blob();
  const std::string& sliced_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sliced_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sliced_blob();
  PROTOBUF_NODISCARD std::string* release_sliced_blob();
  void set_allocated_sliced_blob(std::string* sliced_blob);
  private:
  const std::string& _internal_sliced_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sliced_blob(const std::string& value);
  std::string* _internal_mutable_sliced_blob();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.common.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // .milvus.proto.internal.CostAggregation costAggregation = 13;
  bool has_costaggregation() const;
  private:
  bool _internal_has_costaggregation() const;
  public:
  void clear_costaggregation();
  const ::milvus::proto::internal::CostAggregation& costaggregation() const;
  PROTOBUF_NODISCARD ::milvus::proto::internal::CostAggregation* release_costaggregation();
  ::milvus::proto::internal::CostAggregation* mutable_costaggregation();
  void set_allocated_costaggregation(::milvus::proto::internal::CostAggregation* costaggregation);
  private:
  const ::milvus::proto::internal::CostAggregation& _internal_costaggregation() const;
  ::milvus::proto::internal::CostAggregation* _internal_mutable_costaggregation();
  public:
  void unsafe_arena_set_allocated_costaggregation(
      ::milvus::proto::internal::CostAggregation* costaggregation);
  ::milvus::proto::internal::CostAggregation* unsafe_arena_release_costaggregation();

  // int64 reqID = 3;
  void clear_reqid();
  int64_t reqid() const;
  void set_reqid(int64_t value);
  private:
  int64_t _internal_reqid() const;
  void _internal_set_reqid(int64_t value);
  public:

  // int64 num_queries = 5;
  void clear_num_queries();
  int64_t num_queries() const;
  void set_num_queries(int64_t value);
  private:
  int64_t _internal_num_queries() const;
  void _internal_set_num_queries(int64_t value);
  public:

  // int64 top_k = 6;
  void clear_top_k();
  int64_t top_k() const;
  void set_top_k(int64_t value);
  private:
  int64_t _internal_top_k() const;
  void _internal_set_top_k(int64_t value);
  public:

  // int64 sliced_num_count = 11;
  void clear_sliced_num_count();
  int64_t sliced_num_count() const;
  void set_sliced_num_count(int64_t value);
  private:
  int64_t _internal_sliced_num_count() const;
  void _internal_set_sliced_num_count(int64_t value);
  public:

  // int64 sliced_offset = 12;
  void clear_sliced_offset();
  int64_t sliced_offset() const;
  void set_sliced_offset(int64_t value);
  private:
  int64_t _internal_sliced_offset() const;
  void _internal_set_sliced_offset(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.SearchResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sealed_segmentids_searched_;
    mutable std::atomic<int> _sealed_segmentids_searched_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channelids_searched_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > global_sealed_segmentids_;
    mutable std::atomic<int> _global_sealed_segmentids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sliced_blob_;
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::common::Status* status_;
    ::milvus::proto::internal::CostAggregation* costaggregation_;
    int64_t reqid_;
    int64_t num_queries_;
    int64_t top_k_;
    int64_t sliced_num_count_;
    int64_t sliced_offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class CostAggregation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.CostAggregation) */ {
 public:
  inline CostAggregation() : CostAggregation(nullptr) {}
  ~CostAggregation() override;
  explicit PROTOBUF_CONSTEXPR CostAggregation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CostAggregation(const CostAggregation& from);
  CostAggregation(CostAggregation&& from) noexcept
    : CostAggregation() {
    *this = ::std::move(from);
  }

  inline CostAggregation& operator=(const CostAggregation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CostAggregation& operator=(CostAggregation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CostAggregation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CostAggregation* internal_default_instance() {
    return reinterpret_cast<const CostAggregation*>(
               &_CostAggregation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CostAggregation& a, CostAggregation& b) {
    a.Swap(&b);
  }
  inline void Swap(CostAggregation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CostAggregation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CostAggregation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CostAggregation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CostAggregation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CostAggregation& from) {
    CostAggregation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CostAggregation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.CostAggregation";
  }
  protected:
  explicit CostAggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseTimeFieldNumber = 1,
    kServiceTimeFieldNumber = 2,
    kTotalNQFieldNumber = 3,
  };
  // int64 responseTime = 1;
  void clear_responsetime();
  int64_t responsetime() const;
  void set_responsetime(int64_t value);
  private:
  int64_t _internal_responsetime() const;
  void _internal_set_responsetime(int64_t value);
  public:

  // int64 serviceTime = 2;
  void clear_servicetime();
  int64_t servicetime() const;
  void set_servicetime(int64_t value);
  private:
  int64_t _internal_servicetime() const;
  void _internal_set_servicetime(int64_t value);
  public:

  // int64 totalNQ = 3;
  void clear_totalnq();
  int64_t totalnq() const;
  void set_totalnq(int64_t value);
  private:
  int64_t _internal_totalnq() const;
  void _internal_set_totalnq(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.CostAggregation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t responsetime_;
    int64_t servicetime_;
    int64_t totalnq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class RetrieveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.RetrieveRequest) */ {
 public:
  inline RetrieveRequest() : RetrieveRequest(nullptr) {}
  ~RetrieveRequest() override;
  explicit PROTOBUF_CONSTEXPR RetrieveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RetrieveRequest(const RetrieveRequest& from);
  RetrieveRequest(RetrieveRequest&& from) noexcept
    : RetrieveRequest() {
    *this = ::std::move(from);
  }

  inline RetrieveRequest& operator=(const RetrieveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveRequest& operator=(RetrieveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetrieveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetrieveRequest* internal_default_instance() {
    return reinterpret_cast<const RetrieveRequest*>(
               &_RetrieveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RetrieveRequest& a, RetrieveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RetrieveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetrieveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetrieveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RetrieveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RetrieveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RetrieveRequest& from) {
    RetrieveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetrieveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.RetrieveRequest";
  }
  protected:
  explicit RetrieveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionIDsFieldNumber = 5,
    kOutputFieldsIdFieldNumber = 7,
    kSerializedExprPlanFieldNumber = 6,
    kUsernameFieldNumber = 15,
    kBaseFieldNumber = 1,
    kReqIDFieldNumber = 2,
    kDbIDFieldNumber = 3,
    kCollectionIDFieldNumber = 4,
    kTravelTimestampFieldNumber = 8,
    kGuaranteeTimestampFieldNumber = 9,
    kTimeoutTimestampFieldNumber = 10,
    kLimitFieldNumber = 11,
    kIterationExtensionReduceRateFieldNumber = 14,
    kIgnoreGrowingFieldNumber = 12,
    kIsCountFieldNumber = 13,
  };
  // repeated int64 partitionIDs = 5;
  int partitionids_size() const;
  private:
  int _internal_partitionids_size() const;
  public:
  void clear_partitionids();
  private:
  int64_t _internal_partitionids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_partitionids() const;
  void _internal_add_partitionids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_partitionids();
  public:
  int64_t partitionids(int index) const;
  void set_partitionids(int index, int64_t value);
  void add_partitionids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      partitionids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_partitionids();

  // repeated int64 output_fields_id = 7;
  int output_fields_id_size() const;
  private:
  int _internal_output_fields_id_size() const;
  public:
  void clear_output_fields_id();
  private:
  int64_t _internal_output_fields_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_output_fields_id() const;
  void _internal_add_output_fields_id(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_output_fields_id();
  public:
  int64_t output_fields_id(int index) const;
  void set_output_fields_id(int index, int64_t value);
  void add_output_fields_id(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      output_fields_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_output_fields_id();

  // bytes serialized_expr_plan = 6;
  void clear_serialized_expr_plan();
  const std::string& serialized_expr_plan() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialized_expr_plan(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialized_expr_plan();
  PROTOBUF_NODISCARD std::string* release_serialized_expr_plan();
  void set_allocated_serialized_expr_plan(std::string* serialized_expr_plan);
  private:
  const std::string& _internal_serialized_expr_plan() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialized_expr_plan(const std::string& value);
  std::string* _internal_mutable_serialized_expr_plan();
  public:

  // string username = 15;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 reqID = 2;
  void clear_reqid();
  int64_t reqid() const;
  void set_reqid(int64_t value);
  private:
  int64_t _internal_reqid() const;
  void _internal_set_reqid(int64_t value);
  public:

  // int64 dbID = 3;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 4;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // uint64 travel_timestamp = 8;
  void clear_travel_timestamp();
  uint64_t travel_timestamp() const;
  void set_travel_timestamp(uint64_t value);
  private:
  uint64_t _internal_travel_timestamp() const;
  void _internal_set_travel_timestamp(uint64_t value);
  public:

  // uint64 guarantee_timestamp = 9;
  void clear_guarantee_timestamp();
  uint64_t guarantee_timestamp() const;
  void set_guarantee_timestamp(uint64_t value);
  private:
  uint64_t _internal_guarantee_timestamp() const;
  void _internal_set_guarantee_timestamp(uint64_t value);
  public:

  // uint64 timeout_timestamp = 10;
  void clear_timeout_timestamp();
  uint64_t timeout_timestamp() const;
  void set_timeout_timestamp(uint64_t value);
  private:
  uint64_t _internal_timeout_timestamp() const;
  void _internal_set_timeout_timestamp(uint64_t value);
  public:

  // int64 limit = 11;
  void clear_limit();
  int64_t limit() const;
  void set_limit(int64_t value);
  private:
  int64_t _internal_limit() const;
  void _internal_set_limit(int64_t value);
  public:

  // int64 iteration_extension_reduce_rate = 14;
  void clear_iteration_extension_reduce_rate();
  int64_t iteration_extension_reduce_rate() const;
  void set_iteration_extension_reduce_rate(int64_t value);
  private:
  int64_t _internal_iteration_extension_reduce_rate() const;
  void _internal_set_iteration_extension_reduce_rate(int64_t value);
  public:

  // bool ignoreGrowing = 12;
  void clear_ignoregrowing();
  bool ignoregrowing() const;
  void set_ignoregrowing(bool value);
  private:
  bool _internal_ignoregrowing() const;
  void _internal_set_ignoregrowing(bool value);
  public:

  // bool is_count = 13;
  void clear_is_count();
  bool is_count() const;
  void set_is_count(bool value);
  private:
  bool _internal_is_count() const;
  void _internal_set_is_count(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.RetrieveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > partitionids_;
    mutable std::atomic<int> _partitionids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > output_fields_id_;
    mutable std::atomic<int> _output_fields_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_expr_plan_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t reqid_;
    int64_t dbid_;
    int64_t collectionid_;
    uint64_t travel_timestamp_;
    uint64_t guarantee_timestamp_;
    uint64_t timeout_timestamp_;
    int64_t limit_;
    int64_t iteration_extension_reduce_rate_;
    bool ignoregrowing_;
    bool is_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class RetrieveResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.RetrieveResults) */ {
 public:
  inline RetrieveResults() : RetrieveResults(nullptr) {}
  ~RetrieveResults() override;
  explicit PROTOBUF_CONSTEXPR RetrieveResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RetrieveResults(const RetrieveResults& from);
  RetrieveResults(RetrieveResults&& from) noexcept
    : RetrieveResults() {
    *this = ::std::move(from);
  }

  inline RetrieveResults& operator=(const RetrieveResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveResults& operator=(RetrieveResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetrieveResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetrieveResults* internal_default_instance() {
    return reinterpret_cast<const RetrieveResults*>(
               &_RetrieveResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RetrieveResults& a, RetrieveResults& b) {
    a.Swap(&b);
  }
  inline void Swap(RetrieveResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetrieveResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetrieveResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RetrieveResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RetrieveResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RetrieveResults& from) {
    RetrieveResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetrieveResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.RetrieveResults";
  }
  protected:
  explicit RetrieveResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsDataFieldNumber = 5,
    kSealedSegmentIDsRetrievedFieldNumber = 6,
    kChannelIDsRetrievedFieldNumber = 7,
    kGlobalSealedSegmentIDsFieldNumber = 8,
    kBaseFieldNumber = 1,
    kStatusFieldNumber = 2,
    kIdsFieldNumber = 4,
    kCostAggregationFieldNumber = 13,
    kReqIDFieldNumber = 3,
  };
  // repeated .milvus.proto.schema.FieldData fields_data = 5;
  int fields_data_size() const;
  private:
  int _internal_fields_data_size() const;
  public:
  void clear_fields_data();
  ::milvus::proto::schema::FieldData* mutable_fields_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
      mutable_fields_data();
  private:
  const ::milvus::proto::schema::FieldData& _internal_fields_data(int index) const;
  ::milvus::proto::schema::FieldData* _internal_add_fields_data();
  public:
  const ::milvus::proto::schema::FieldData& fields_data(int index) const;
  ::milvus::proto::schema::FieldData* add_fields_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
      fields_data() const;

  // repeated int64 sealed_segmentIDs_retrieved = 6;
  int sealed_segmentids_retrieved_size() const;
  private:
  int _internal_sealed_segmentids_retrieved_size() const;
  public:
  void clear_sealed_segmentids_retrieved();
  private:
  int64_t _internal_sealed_segmentids_retrieved(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sealed_segmentids_retrieved() const;
  void _internal_add_sealed_segmentids_retrieved(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sealed_segmentids_retrieved();
  public:
  int64_t sealed_segmentids_retrieved(int index) const;
  void set_sealed_segmentids_retrieved(int index, int64_t value);
  void add_sealed_segmentids_retrieved(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sealed_segmentids_retrieved() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sealed_segmentids_retrieved();

  // repeated string channelIDs_retrieved = 7;
  int channelids_retrieved_size() const;
  private:
  int _internal_channelids_retrieved_size() const;
  public:
  void clear_channelids_retrieved();
  const std::string& channelids_retrieved(int index) const;
  std::string* mutable_channelids_retrieved(int index);
  void set_channelids_retrieved(int index, const std::string& value);
  void set_channelids_retrieved(int index, std::string&& value);
  void set_channelids_retrieved(int index, const char* value);
  void set_channelids_retrieved(int index, const char* value, size_t size);
  std::string* add_channelids_retrieved();
  void add_channelids_retrieved(const std::string& value);
  void add_channelids_retrieved(std::string&& value);
  void add_channelids_retrieved(const char* value);
  void add_channelids_retrieved(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channelids_retrieved() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channelids_retrieved();
  private:
  const std::string& _internal_channelids_retrieved(int index) const;
  std::string* _internal_add_channelids_retrieved();
  public:

  // repeated int64 global_sealed_segmentIDs = 8;
  int global_sealed_segmentids_size() const;
  private:
  int _internal_global_sealed_segmentids_size() const;
  public:
  void clear_global_sealed_segmentids();
  private:
  int64_t _internal_global_sealed_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_global_sealed_segmentids() const;
  void _internal_add_global_sealed_segmentids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_global_sealed_segmentids();
  public:
  int64_t global_sealed_segmentids(int index) const;
  void set_global_sealed_segmentids(int index, int64_t value);
  void add_global_sealed_segmentids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      global_sealed_segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_global_sealed_segmentids();

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.common.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // .milvus.proto.schema.IDs ids = 4;
  bool has_ids() const;
  private:
  bool _internal_has_ids() const;
  public:
  void clear_ids();
  const ::milvus::proto::schema::IDs& ids() const;
  PROTOBUF_NODISCARD ::milvus::proto::schema::IDs* release_ids();
  ::milvus::proto::schema::IDs* mutable_ids();
  void set_allocated_ids(::milvus::proto::schema::IDs* ids);
  private:
  const ::milvus::proto::schema::IDs& _internal_ids() const;
  ::milvus::proto::schema::IDs* _internal_mutable_ids();
  public:
  void unsafe_arena_set_allocated_ids(
      ::milvus::proto::schema::IDs* ids);
  ::milvus::proto::schema::IDs* unsafe_arena_release_ids();

  // .milvus.proto.internal.CostAggregation costAggregation = 13;
  bool has_costaggregation() const;
  private:
  bool _internal_has_costaggregation() const;
  public:
  void clear_costaggregation();
  const ::milvus::proto::internal::CostAggregation& costaggregation() const;
  PROTOBUF_NODISCARD ::milvus::proto::internal::CostAggregation* release_costaggregation();
  ::milvus::proto::internal::CostAggregation* mutable_costaggregation();
  void set_allocated_costaggregation(::milvus::proto::internal::CostAggregation* costaggregation);
  private:
  const ::milvus::proto::internal::CostAggregation& _internal_costaggregation() const;
  ::milvus::proto::internal::CostAggregation* _internal_mutable_costaggregation();
  public:
  void unsafe_arena_set_allocated_costaggregation(
      ::milvus::proto::internal::CostAggregation* costaggregation);
  ::milvus::proto::internal::CostAggregation* unsafe_arena_release_costaggregation();

  // int64 reqID = 3;
  void clear_reqid();
  int64_t reqid() const;
  void set_reqid(int64_t value);
  private:
  int64_t _internal_reqid() const;
  void _internal_set_reqid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.RetrieveResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData > fields_data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sealed_segmentids_retrieved_;
    mutable std::atomic<int> _sealed_segmentids_retrieved_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channelids_retrieved_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > global_sealed_segmentids_;
    mutable std::atomic<int> _global_sealed_segmentids_cached_byte_size_;
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::common::Status* status_;
    ::milvus::proto::schema::IDs* ids_;
    ::milvus::proto::internal::CostAggregation* costaggregation_;
    int64_t reqid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class LoadIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.LoadIndex) */ {
 public:
  inline LoadIndex() : LoadIndex(nullptr) {}
  ~LoadIndex() override;
  explicit PROTOBUF_CONSTEXPR LoadIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadIndex(const LoadIndex& from);
  LoadIndex(LoadIndex&& from) noexcept
    : LoadIndex() {
    *this = ::std::move(from);
  }

  inline LoadIndex& operator=(const LoadIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadIndex& operator=(LoadIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadIndex* internal_default_instance() {
    return reinterpret_cast<const LoadIndex*>(
               &_LoadIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LoadIndex& a, LoadIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadIndex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadIndex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadIndex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadIndex& from) {
    LoadIndex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadIndex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.LoadIndex";
  }
  protected:
  explicit LoadIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexPathsFieldNumber = 5,
    kIndexParamsFieldNumber = 6,
    kFieldNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kSegmentIDFieldNumber = 2,
    kFieldIDFieldNumber = 4,
  };
  // repeated string index_paths = 5;
  int index_paths_size() const;
  private:
  int _internal_index_paths_size() const;
  public:
  void clear_index_paths();
  const std::string& index_paths(int index) const;
  std::string* mutable_index_paths(int index);
  void set_index_paths(int index, const std::string& value);
  void set_index_paths(int index, std::string&& value);
  void set_index_paths(int index, const char* value);
  void set_index_paths(int index, const char* value, size_t size);
  std::string* add_index_paths();
  void add_index_paths(const std::string& value);
  void add_index_paths(std::string&& value);
  void add_index_paths(const char* value);
  void add_index_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& index_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_index_paths();
  private:
  const std::string& _internal_index_paths(int index) const;
  std::string* _internal_add_index_paths();
  public:

  // repeated .milvus.proto.common.KeyValuePair index_params = 6;
  int index_params_size() const;
  private:
  int _internal_index_params_size() const;
  public:
  void clear_index_params();
  ::milvus::proto::common::KeyValuePair* mutable_index_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_index_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_index_params();
  public:
  const ::milvus::proto::common::KeyValuePair& index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_index_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      index_params() const;

  // string fieldName = 3;
  void clear_fieldname();
  const std::string& fieldname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fieldname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fieldname();
  PROTOBUF_NODISCARD std::string* release_fieldname();
  void set_allocated_fieldname(std::string* fieldname);
  private:
  const std::string& _internal_fieldname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fieldname(const std::string& value);
  std::string* _internal_mutable_fieldname();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 segmentID = 2;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // int64 fieldID = 4;
  void clear_fieldid();
  int64_t fieldid() const;
  void set_fieldid(int64_t value);
  private:
  int64_t _internal_fieldid() const;
  void _internal_set_fieldid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.LoadIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> index_paths_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > index_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fieldname_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t segmentid_;
    int64_t fieldid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class IndexStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.IndexStats) */ {
 public:
  inline IndexStats() : IndexStats(nullptr) {}
  ~IndexStats() override;
  explicit PROTOBUF_CONSTEXPR IndexStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexStats(const IndexStats& from);
  IndexStats(IndexStats&& from) noexcept
    : IndexStats() {
    *this = ::std::move(from);
  }

  inline IndexStats& operator=(const IndexStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexStats& operator=(IndexStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexStats* internal_default_instance() {
    return reinterpret_cast<const IndexStats*>(
               &_IndexStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(IndexStats& a, IndexStats& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexStats& from) {
    IndexStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.IndexStats";
  }
  protected:
  explicit IndexStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexParamsFieldNumber = 1,
    kNumRelatedSegmentsFieldNumber = 2,
  };
  // repeated .milvus.proto.common.KeyValuePair index_params = 1;
  int index_params_size() const;
  private:
  int _internal_index_params_size() const;
  public:
  void clear_index_params();
  ::milvus::proto::common::KeyValuePair* mutable_index_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_index_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_index_params();
  public:
  const ::milvus::proto::common::KeyValuePair& index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_index_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      index_params() const;

  // int64 num_related_segments = 2;
  void clear_num_related_segments();
  int64_t num_related_segments() const;
  void set_num_related_segments(int64_t value);
  private:
  int64_t _internal_num_related_segments() const;
  void _internal_set_num_related_segments(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.IndexStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > index_params_;
    int64_t num_related_segments_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class FieldStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.FieldStats) */ {
 public:
  inline FieldStats() : FieldStats(nullptr) {}
  ~FieldStats() override;
  explicit PROTOBUF_CONSTEXPR FieldStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldStats(const FieldStats& from);
  FieldStats(FieldStats&& from) noexcept
    : FieldStats() {
    *this = ::std::move(from);
  }

  inline FieldStats& operator=(const FieldStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldStats& operator=(FieldStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldStats* internal_default_instance() {
    return reinterpret_cast<const FieldStats*>(
               &_FieldStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FieldStats& a, FieldStats& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldStats& from) {
    FieldStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.FieldStats";
  }
  protected:
  explicit FieldStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexStatsFieldNumber = 3,
    kCollectionIDFieldNumber = 1,
    kFieldIDFieldNumber = 2,
  };
  // repeated .milvus.proto.internal.IndexStats index_stats = 3;
  int index_stats_size() const;
  private:
  int _internal_index_stats_size() const;
  public:
  void clear_index_stats();
  ::milvus::proto::internal::IndexStats* mutable_index_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::internal::IndexStats >*
      mutable_index_stats();
  private:
  const ::milvus::proto::internal::IndexStats& _internal_index_stats(int index) const;
  ::milvus::proto::internal::IndexStats* _internal_add_index_stats();
  public:
  const ::milvus::proto::internal::IndexStats& index_stats(int index) const;
  ::milvus::proto::internal::IndexStats* add_index_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::internal::IndexStats >&
      index_stats() const;

  // int64 collectionID = 1;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 fieldID = 2;
  void clear_fieldid();
  int64_t fieldid() const;
  void set_fieldid(int64_t value);
  private:
  int64_t _internal_fieldid() const;
  void _internal_set_fieldid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.FieldStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::internal::IndexStats > index_stats_;
    int64_t collectionid_;
    int64_t fieldid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class SegmentStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.SegmentStats) */ {
 public:
  inline SegmentStats() : SegmentStats(nullptr) {}
  ~SegmentStats() override;
  explicit PROTOBUF_CONSTEXPR SegmentStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentStats(const SegmentStats& from);
  SegmentStats(SegmentStats&& from) noexcept
    : SegmentStats() {
    *this = ::std::move(from);
  }

  inline SegmentStats& operator=(const SegmentStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentStats& operator=(SegmentStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentStats* internal_default_instance() {
    return reinterpret_cast<const SegmentStats*>(
               &_SegmentStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SegmentStats& a, SegmentStats& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentStats& from) {
    SegmentStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.SegmentStats";
  }
  protected:
  explicit SegmentStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDFieldNumber = 1,
    kMemorySizeFieldNumber = 2,
    kNumRowsFieldNumber = 3,
    kRecentlyModifiedFieldNumber = 4,
  };
  // int64 segmentID = 1;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // int64 memory_size = 2;
  void clear_memory_size();
  int64_t memory_size() const;
  void set_memory_size(int64_t value);
  private:
  int64_t _internal_memory_size() const;
  void _internal_set_memory_size(int64_t value);
  public:

  // int64 num_rows = 3;
  void clear_num_rows();
  int64_t num_rows() const;
  void set_num_rows(int64_t value);
  private:
  int64_t _internal_num_rows() const;
  void _internal_set_num_rows(int64_t value);
  public:

  // bool recently_modified = 4;
  void clear_recently_modified();
  bool recently_modified() const;
  void set_recently_modified(bool value);
  private:
  bool _internal_recently_modified() const;
  void _internal_set_recently_modified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.SegmentStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t segmentid_;
    int64_t memory_size_;
    int64_t num_rows_;
    bool recently_modified_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class ChannelTimeTickMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.ChannelTimeTickMsg) */ {
 public:
  inline ChannelTimeTickMsg() : ChannelTimeTickMsg(nullptr) {}
  ~ChannelTimeTickMsg() override;
  explicit PROTOBUF_CONSTEXPR ChannelTimeTickMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelTimeTickMsg(const ChannelTimeTickMsg& from);
  ChannelTimeTickMsg(ChannelTimeTickMsg&& from) noexcept
    : ChannelTimeTickMsg() {
    *this = ::std::move(from);
  }

  inline ChannelTimeTickMsg& operator=(const ChannelTimeTickMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelTimeTickMsg& operator=(ChannelTimeTickMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelTimeTickMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelTimeTickMsg* internal_default_instance() {
    return reinterpret_cast<const ChannelTimeTickMsg*>(
               &_ChannelTimeTickMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ChannelTimeTickMsg& a, ChannelTimeTickMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelTimeTickMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelTimeTickMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelTimeTickMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelTimeTickMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelTimeTickMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChannelTimeTickMsg& from) {
    ChannelTimeTickMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelTimeTickMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.ChannelTimeTickMsg";
  }
  protected:
  explicit ChannelTimeTickMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNamesFieldNumber = 2,
    kTimestampsFieldNumber = 3,
    kBaseFieldNumber = 1,
    kDefaultTimestampFieldNumber = 4,
  };
  // repeated string channelNames = 2;
  int channelnames_size() const;
  private:
  int _internal_channelnames_size() const;
  public:
  void clear_channelnames();
  const std::string& channelnames(int index) const;
  std::string* mutable_channelnames(int index);
  void set_channelnames(int index, const std::string& value);
  void set_channelnames(int index, std::string&& value);
  void set_channelnames(int index, const char* value);
  void set_channelnames(int index, const char* value, size_t size);
  std::string* add_channelnames();
  void add_channelnames(const std::string& value);
  void add_channelnames(std::string&& value);
  void add_channelnames(const char* value);
  void add_channelnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channelnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channelnames();
  private:
  const std::string& _internal_channelnames(int index) const;
  std::string* _internal_add_channelnames();
  public:

  // repeated uint64 timestamps = 3;
  int timestamps_size() const;
  private:
  int _internal_timestamps_size() const;
  public:
  void clear_timestamps();
  private:
  uint64_t _internal_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_timestamps() const;
  void _internal_add_timestamps(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_timestamps();
  public:
  uint64_t timestamps(int index) const;
  void set_timestamps(int index, uint64_t value);
  void add_timestamps(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_timestamps();

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // uint64 default_timestamp = 4;
  void clear_default_timestamp();
  uint64_t default_timestamp() const;
  void set_default_timestamp(uint64_t value);
  private:
  uint64_t _internal_default_timestamp() const;
  void _internal_set_default_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.ChannelTimeTickMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channelnames_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > timestamps_;
    mutable std::atomic<int> _timestamps_cached_byte_size_;
    ::milvus::proto::common::MsgBase* base_;
    uint64_t default_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class CredentialInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.CredentialInfo) */ {
 public:
  inline CredentialInfo() : CredentialInfo(nullptr) {}
  ~CredentialInfo() override;
  explicit PROTOBUF_CONSTEXPR CredentialInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CredentialInfo(const CredentialInfo& from);
  CredentialInfo(CredentialInfo&& from) noexcept
    : CredentialInfo() {
    *this = ::std::move(from);
  }

  inline CredentialInfo& operator=(const CredentialInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CredentialInfo& operator=(CredentialInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CredentialInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CredentialInfo* internal_default_instance() {
    return reinterpret_cast<const CredentialInfo*>(
               &_CredentialInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CredentialInfo& a, CredentialInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CredentialInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CredentialInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CredentialInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CredentialInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CredentialInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CredentialInfo& from) {
    CredentialInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CredentialInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.CredentialInfo";
  }
  protected:
  explicit CredentialInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kEncryptedPasswordFieldNumber = 2,
    kTenantFieldNumber = 3,
    kSha256PasswordFieldNumber = 5,
    kIsSuperFieldNumber = 4,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string encrypted_password = 2;
  void clear_encrypted_password();
  const std::string& encrypted_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_password();
  PROTOBUF_NODISCARD std::string* release_encrypted_password();
  void set_allocated_encrypted_password(std::string* encrypted_password);
  private:
  const std::string& _internal_encrypted_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_password(const std::string& value);
  std::string* _internal_mutable_encrypted_password();
  public:

  // string tenant = 3;
  void clear_tenant();
  const std::string& tenant() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tenant(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tenant();
  PROTOBUF_NODISCARD std::string* release_tenant();
  void set_allocated_tenant(std::string* tenant);
  private:
  const std::string& _internal_tenant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tenant(const std::string& value);
  std::string* _internal_mutable_tenant();
  public:

  // string sha256_password = 5;
  void clear_sha256_password();
  const std::string& sha256_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha256_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha256_password();
  PROTOBUF_NODISCARD std::string* release_sha256_password();
  void set_allocated_sha256_password(std::string* sha256_password);
  private:
  const std::string& _internal_sha256_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha256_password(const std::string& value);
  std::string* _internal_mutable_sha256_password();
  public:

  // bool is_super = 4;
  void clear_is_super();
  bool is_super() const;
  void set_is_super(bool value);
  private:
  bool _internal_is_super() const;
  void _internal_set_is_super(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.CredentialInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tenant_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha256_password_;
    bool is_super_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class ListPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.ListPolicyRequest) */ {
 public:
  inline ListPolicyRequest() : ListPolicyRequest(nullptr) {}
  ~ListPolicyRequest() override;
  explicit PROTOBUF_CONSTEXPR ListPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPolicyRequest(const ListPolicyRequest& from);
  ListPolicyRequest(ListPolicyRequest&& from) noexcept
    : ListPolicyRequest() {
    *this = ::std::move(from);
  }

  inline ListPolicyRequest& operator=(const ListPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPolicyRequest& operator=(ListPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const ListPolicyRequest*>(
               &_ListPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ListPolicyRequest& a, ListPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListPolicyRequest& from) {
    ListPolicyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.ListPolicyRequest";
  }
  protected:
  explicit ListPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.ListPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class ListPolicyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.ListPolicyResponse) */ {
 public:
  inline ListPolicyResponse() : ListPolicyResponse(nullptr) {}
  ~ListPolicyResponse() override;
  explicit PROTOBUF_CONSTEXPR ListPolicyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPolicyResponse(const ListPolicyResponse& from);
  ListPolicyResponse(ListPolicyResponse&& from) noexcept
    : ListPolicyResponse() {
    *this = ::std::move(from);
  }

  inline ListPolicyResponse& operator=(const ListPolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPolicyResponse& operator=(ListPolicyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPolicyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPolicyResponse* internal_default_instance() {
    return reinterpret_cast<const ListPolicyResponse*>(
               &_ListPolicyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ListPolicyResponse& a, ListPolicyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPolicyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPolicyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPolicyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPolicyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPolicyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListPolicyResponse& from) {
    ListPolicyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPolicyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.ListPolicyResponse";
  }
  protected:
  explicit ListPolicyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyInfosFieldNumber = 2,
    kUserRolesFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated string policy_infos = 2;
  int policy_infos_size() const;
  private:
  int _internal_policy_infos_size() const;
  public:
  void clear_policy_infos();
  const std::string& policy_infos(int index) const;
  std::string* mutable_policy_infos(int index);
  void set_policy_infos(int index, const std::string& value);
  void set_policy_infos(int index, std::string&& value);
  void set_policy_infos(int index, const char* value);
  void set_policy_infos(int index, const char* value, size_t size);
  std::string* add_policy_infos();
  void add_policy_infos(const std::string& value);
  void add_policy_infos(std::string&& value);
  void add_policy_infos(const char* value);
  void add_policy_infos(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& policy_infos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_policy_infos();
  private:
  const std::string& _internal_policy_infos(int index) const;
  std::string* _internal_add_policy_infos();
  public:

  // repeated string user_roles = 3;
  int user_roles_size() const;
  private:
  int _internal_user_roles_size() const;
  public:
  void clear_user_roles();
  const std::string& user_roles(int index) const;
  std::string* mutable_user_roles(int index);
  void set_user_roles(int index, const std::string& value);
  void set_user_roles(int index, std::string&& value);
  void set_user_roles(int index, const char* value);
  void set_user_roles(int index, const char* value, size_t size);
  std::string* add_user_roles();
  void add_user_roles(const std::string& value);
  void add_user_roles(std::string&& value);
  void add_user_roles(const char* value);
  void add_user_roles(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_roles();
  private:
  const std::string& _internal_user_roles(int index) const;
  std::string* _internal_add_user_roles();
  public:

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.ListPolicyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> policy_infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_roles_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class ShowConfigurationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.ShowConfigurationsRequest) */ {
 public:
  inline ShowConfigurationsRequest() : ShowConfigurationsRequest(nullptr) {}
  ~ShowConfigurationsRequest() override;
  explicit PROTOBUF_CONSTEXPR ShowConfigurationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowConfigurationsRequest(const ShowConfigurationsRequest& from);
  ShowConfigurationsRequest(ShowConfigurationsRequest&& from) noexcept
    : ShowConfigurationsRequest() {
    *this = ::std::move(from);
  }

  inline ShowConfigurationsRequest& operator=(const ShowConfigurationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowConfigurationsRequest& operator=(ShowConfigurationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowConfigurationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowConfigurationsRequest* internal_default_instance() {
    return reinterpret_cast<const ShowConfigurationsRequest*>(
               &_ShowConfigurationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ShowConfigurationsRequest& a, ShowConfigurationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowConfigurationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowConfigurationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowConfigurationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowConfigurationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShowConfigurationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShowConfigurationsRequest& from) {
    ShowConfigurationsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowConfigurationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.ShowConfigurationsRequest";
  }
  protected:
  explicit ShowConfigurationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatternFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // string pattern = 2;
  void clear_pattern();
  const std::string& pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pattern();
  PROTOBUF_NODISCARD std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);
  private:
  const std::string& _internal_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pattern(const std::string& value);
  std::string* _internal_mutable_pattern();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.ShowConfigurationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class ShowConfigurationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.ShowConfigurationsResponse) */ {
 public:
  inline ShowConfigurationsResponse() : ShowConfigurationsResponse(nullptr) {}
  ~ShowConfigurationsResponse() override;
  explicit PROTOBUF_CONSTEXPR ShowConfigurationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowConfigurationsResponse(const ShowConfigurationsResponse& from);
  ShowConfigurationsResponse(ShowConfigurationsResponse&& from) noexcept
    : ShowConfigurationsResponse() {
    *this = ::std::move(from);
  }

  inline ShowConfigurationsResponse& operator=(const ShowConfigurationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowConfigurationsResponse& operator=(ShowConfigurationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowConfigurationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowConfigurationsResponse* internal_default_instance() {
    return reinterpret_cast<const ShowConfigurationsResponse*>(
               &_ShowConfigurationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ShowConfigurationsResponse& a, ShowConfigurationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowConfigurationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowConfigurationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowConfigurationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowConfigurationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShowConfigurationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShowConfigurationsResponse& from) {
    ShowConfigurationsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowConfigurationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.ShowConfigurationsResponse";
  }
  protected:
  explicit ShowConfigurationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfiguationsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .milvus.proto.common.KeyValuePair configuations = 2;
  int configuations_size() const;
  private:
  int _internal_configuations_size() const;
  public:
  void clear_configuations();
  ::milvus::proto::common::KeyValuePair* mutable_configuations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_configuations();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_configuations(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_configuations();
  public:
  const ::milvus::proto::common::KeyValuePair& configuations(int index) const;
  ::milvus::proto::common::KeyValuePair* add_configuations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      configuations() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.ShowConfigurationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > configuations_;
    ::milvus::proto::common::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// -------------------------------------------------------------------

class Rate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.internal.Rate) */ {
 public:
  inline Rate() : Rate(nullptr) {}
  ~Rate() override;
  explicit PROTOBUF_CONSTEXPR Rate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rate(const Rate& from);
  Rate(Rate&& from) noexcept
    : Rate() {
    *this = ::std::move(from);
  }

  inline Rate& operator=(const Rate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rate& operator=(Rate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rate& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rate* internal_default_instance() {
    return reinterpret_cast<const Rate*>(
               &_Rate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Rate& a, Rate& b) {
    a.Swap(&b);
  }
  inline void Swap(Rate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rate& from) {
    Rate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.internal.Rate";
  }
  protected:
  explicit Rate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 2,
    kRtFieldNumber = 1,
  };
  // double r = 2;
  void clear_r();
  double r() const;
  void set_r(double value);
  private:
  double _internal_r() const;
  void _internal_set_r(double value);
  public:

  // .milvus.proto.internal.RateType rt = 1;
  void clear_rt();
  ::milvus::proto::internal::RateType rt() const;
  void set_rt(::milvus::proto::internal::RateType value);
  private:
  ::milvus::proto::internal::RateType _internal_rt() const;
  void _internal_set_rt(::milvus::proto::internal::RateType value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.internal.Rate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double r_;
    int rt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetTimeTickChannelRequest

// -------------------------------------------------------------------

// GetStatisticsChannelRequest

// -------------------------------------------------------------------

// GetDdChannelRequest

// -------------------------------------------------------------------

// NodeInfo

// .milvus.proto.common.Address address = 1;
inline bool NodeInfo::_internal_has_address() const {
  return this != internal_default_instance() && _impl_.address_ != nullptr;
}
inline bool NodeInfo::has_address() const {
  return _internal_has_address();
}
inline const ::milvus::proto::common::Address& NodeInfo::_internal_address() const {
  const ::milvus::proto::common::Address* p = _impl_.address_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Address&>(
      ::milvus::proto::common::_Address_default_instance_);
}
inline const ::milvus::proto::common::Address& NodeInfo::address() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.NodeInfo.address)
  return _internal_address();
}
inline void NodeInfo::unsafe_arena_set_allocated_address(
    ::milvus::proto::common::Address* address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.address_);
  }
  _impl_.address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.NodeInfo.address)
}
inline ::milvus::proto::common::Address* NodeInfo::release_address() {
  
  ::milvus::proto::common::Address* temp = _impl_.address_;
  _impl_.address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Address* NodeInfo::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.NodeInfo.address)
  
  ::milvus::proto::common::Address* temp = _impl_.address_;
  _impl_.address_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Address* NodeInfo::_internal_mutable_address() {
  
  if (_impl_.address_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Address>(GetArenaForAllocation());
    _impl_.address_ = p;
  }
  return _impl_.address_;
}
inline ::milvus::proto::common::Address* NodeInfo::mutable_address() {
  ::milvus::proto::common::Address* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.NodeInfo.address)
  return _msg;
}
inline void NodeInfo::set_allocated_address(::milvus::proto::common::Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address));
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.address_ = address;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.NodeInfo.address)
}

// string role = 2;
inline void NodeInfo::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& NodeInfo::role() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.NodeInfo.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfo::set_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.NodeInfo.role)
}
inline std::string* NodeInfo::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.NodeInfo.role)
  return _s;
}
inline const std::string& NodeInfo::_internal_role() const {
  return _impl_.role_.Get();
}
inline void NodeInfo::_internal_set_role(const std::string& value) {
  
  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeInfo::_internal_mutable_role() {
  
  return _impl_.role_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeInfo::release_role() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.NodeInfo.role)
  return _impl_.role_.Release();
}
inline void NodeInfo::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  _impl_.role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.NodeInfo.role)
}

// -------------------------------------------------------------------

// InitParams

// int64 nodeID = 1;
inline void InitParams::clear_nodeid() {
  _impl_.nodeid_ = int64_t{0};
}
inline int64_t InitParams::_internal_nodeid() const {
  return _impl_.nodeid_;
}
inline int64_t InitParams::nodeid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.InitParams.nodeID)
  return _internal_nodeid();
}
inline void InitParams::_internal_set_nodeid(int64_t value) {
  
  _impl_.nodeid_ = value;
}
inline void InitParams::set_nodeid(int64_t value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.InitParams.nodeID)
}

// repeated .milvus.proto.common.KeyValuePair start_params = 2;
inline int InitParams::_internal_start_params_size() const {
  return _impl_.start_params_.size();
}
inline int InitParams::start_params_size() const {
  return _internal_start_params_size();
}
inline ::milvus::proto::common::KeyValuePair* InitParams::mutable_start_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.InitParams.start_params)
  return _impl_.start_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
InitParams::mutable_start_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.InitParams.start_params)
  return &_impl_.start_params_;
}
inline const ::milvus::proto::common::KeyValuePair& InitParams::_internal_start_params(int index) const {
  return _impl_.start_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& InitParams::start_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.InitParams.start_params)
  return _internal_start_params(index);
}
inline ::milvus::proto::common::KeyValuePair* InitParams::_internal_add_start_params() {
  return _impl_.start_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* InitParams::add_start_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_start_params();
  // @@protoc_insertion_point(field_add:milvus.proto.internal.InitParams.start_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
InitParams::start_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.InitParams.start_params)
  return _impl_.start_params_;
}

// -------------------------------------------------------------------

// StringList

// repeated string values = 1;
inline int StringList::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int StringList::values_size() const {
  return _internal_values_size();
}
inline void StringList::clear_values() {
  _impl_.values_.Clear();
}
inline std::string* StringList::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.internal.StringList.values)
  return _s;
}
inline const std::string& StringList::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const std::string& StringList::values(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.StringList.values)
  return _internal_values(index);
}
inline std::string* StringList::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.StringList.values)
  return _impl_.values_.Mutable(index);
}
inline void StringList::set_values(int index, const std::string& value) {
  _impl_.values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.StringList.values)
}
inline void StringList::set_values(int index, std::string&& value) {
  _impl_.values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.internal.StringList.values)
}
inline void StringList::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.internal.StringList.values)
}
inline void StringList::set_values(int index, const char* value, size_t size) {
  _impl_.values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.internal.StringList.values)
}
inline std::string* StringList::_internal_add_values() {
  return _impl_.values_.Add();
}
inline void StringList::add_values(const std::string& value) {
  _impl_.values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.StringList.values)
}
inline void StringList::add_values(std::string&& value) {
  _impl_.values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.internal.StringList.values)
}
inline void StringList::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.internal.StringList.values)
}
inline void StringList::add_values(const char* value, size_t size) {
  _impl_.values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.internal.StringList.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringList::values() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.StringList.values)
  return _impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringList::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.StringList.values)
  return &_impl_.values_;
}

// .milvus.proto.common.Status status = 2;
inline bool StringList::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool StringList::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& StringList::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& StringList::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.StringList.status)
  return _internal_status();
}
inline void StringList::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.StringList.status)
}
inline ::milvus::proto::common::Status* StringList::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* StringList::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.StringList.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* StringList::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* StringList::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.StringList.status)
  return _msg;
}
inline void StringList::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.StringList.status)
}

// -------------------------------------------------------------------

// GetStatisticsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool GetStatisticsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetStatisticsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetStatisticsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetStatisticsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.GetStatisticsRequest.base)
  return _internal_base();
}
inline void GetStatisticsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.GetStatisticsRequest.base)
}
inline ::milvus::proto::common::MsgBase* GetStatisticsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetStatisticsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.GetStatisticsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetStatisticsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetStatisticsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.GetStatisticsRequest.base)
  return _msg;
}
inline void GetStatisticsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.GetStatisticsRequest.base)
}

// int64 dbID = 2;
inline void GetStatisticsRequest::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t GetStatisticsRequest::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t GetStatisticsRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.GetStatisticsRequest.dbID)
  return _internal_dbid();
}
inline void GetStatisticsRequest::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void GetStatisticsRequest::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.GetStatisticsRequest.dbID)
}

// int64 collectionID = 3;
inline void GetStatisticsRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t GetStatisticsRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t GetStatisticsRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.GetStatisticsRequest.collectionID)
  return _internal_collectionid();
}
inline void GetStatisticsRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void GetStatisticsRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.GetStatisticsRequest.collectionID)
}

// repeated int64 partitionIDs = 4;
inline int GetStatisticsRequest::_internal_partitionids_size() const {
  return _impl_.partitionids_.size();
}
inline int GetStatisticsRequest::partitionids_size() const {
  return _internal_partitionids_size();
}
inline void GetStatisticsRequest::clear_partitionids() {
  _impl_.partitionids_.Clear();
}
inline int64_t GetStatisticsRequest::_internal_partitionids(int index) const {
  return _impl_.partitionids_.Get(index);
}
inline int64_t GetStatisticsRequest::partitionids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.GetStatisticsRequest.partitionIDs)
  return _internal_partitionids(index);
}
inline void GetStatisticsRequest::set_partitionids(int index, int64_t value) {
  _impl_.partitionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.GetStatisticsRequest.partitionIDs)
}
inline void GetStatisticsRequest::_internal_add_partitionids(int64_t value) {
  _impl_.partitionids_.Add(value);
}
inline void GetStatisticsRequest::add_partitionids(int64_t value) {
  _internal_add_partitionids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.GetStatisticsRequest.partitionIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetStatisticsRequest::_internal_partitionids() const {
  return _impl_.partitionids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GetStatisticsRequest::partitionids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.GetStatisticsRequest.partitionIDs)
  return _internal_partitionids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetStatisticsRequest::_internal_mutable_partitionids() {
  return &_impl_.partitionids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GetStatisticsRequest::mutable_partitionids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.GetStatisticsRequest.partitionIDs)
  return _internal_mutable_partitionids();
}

// uint64 travel_timestamp = 5;
inline void GetStatisticsRequest::clear_travel_timestamp() {
  _impl_.travel_timestamp_ = uint64_t{0u};
}
inline uint64_t GetStatisticsRequest::_internal_travel_timestamp() const {
  return _impl_.travel_timestamp_;
}
inline uint64_t GetStatisticsRequest::travel_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.GetStatisticsRequest.travel_timestamp)
  return _internal_travel_timestamp();
}
inline void GetStatisticsRequest::_internal_set_travel_timestamp(uint64_t value) {
  
  _impl_.travel_timestamp_ = value;
}
inline void GetStatisticsRequest::set_travel_timestamp(uint64_t value) {
  _internal_set_travel_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.GetStatisticsRequest.travel_timestamp)
}

// uint64 guarantee_timestamp = 6;
inline void GetStatisticsRequest::clear_guarantee_timestamp() {
  _impl_.guarantee_timestamp_ = uint64_t{0u};
}
inline uint64_t GetStatisticsRequest::_internal_guarantee_timestamp() const {
  return _impl_.guarantee_timestamp_;
}
inline uint64_t GetStatisticsRequest::guarantee_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.GetStatisticsRequest.guarantee_timestamp)
  return _internal_guarantee_timestamp();
}
inline void GetStatisticsRequest::_internal_set_guarantee_timestamp(uint64_t value) {
  
  _impl_.guarantee_timestamp_ = value;
}
inline void GetStatisticsRequest::set_guarantee_timestamp(uint64_t value) {
  _internal_set_guarantee_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.GetStatisticsRequest.guarantee_timestamp)
}

// uint64 timeout_timestamp = 7;
inline void GetStatisticsRequest::clear_timeout_timestamp() {
  _impl_.timeout_timestamp_ = uint64_t{0u};
}
inline uint64_t GetStatisticsRequest::_internal_timeout_timestamp() const {
  return _impl_.timeout_timestamp_;
}
inline uint64_t GetStatisticsRequest::timeout_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.GetStatisticsRequest.timeout_timestamp)
  return _internal_timeout_timestamp();
}
inline void GetStatisticsRequest::_internal_set_timeout_timestamp(uint64_t value) {
  
  _impl_.timeout_timestamp_ = value;
}
inline void GetStatisticsRequest::set_timeout_timestamp(uint64_t value) {
  _internal_set_timeout_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.GetStatisticsRequest.timeout_timestamp)
}

// -------------------------------------------------------------------

// GetStatisticsResponse

// .milvus.proto.common.MsgBase base = 1;
inline bool GetStatisticsResponse::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool GetStatisticsResponse::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& GetStatisticsResponse::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& GetStatisticsResponse::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.GetStatisticsResponse.base)
  return _internal_base();
}
inline void GetStatisticsResponse::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.GetStatisticsResponse.base)
}
inline ::milvus::proto::common::MsgBase* GetStatisticsResponse::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetStatisticsResponse::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.GetStatisticsResponse.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* GetStatisticsResponse::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* GetStatisticsResponse::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.GetStatisticsResponse.base)
  return _msg;
}
inline void GetStatisticsResponse::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.GetStatisticsResponse.base)
}

// .milvus.proto.common.Status status = 2;
inline bool GetStatisticsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetStatisticsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& GetStatisticsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& GetStatisticsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.GetStatisticsResponse.status)
  return _internal_status();
}
inline void GetStatisticsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.GetStatisticsResponse.status)
}
inline ::milvus::proto::common::Status* GetStatisticsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* GetStatisticsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.GetStatisticsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetStatisticsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* GetStatisticsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.GetStatisticsResponse.status)
  return _msg;
}
inline void GetStatisticsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.GetStatisticsResponse.status)
}

// repeated .milvus.proto.common.KeyValuePair stats = 3;
inline int GetStatisticsResponse::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int GetStatisticsResponse::stats_size() const {
  return _internal_stats_size();
}
inline ::milvus::proto::common::KeyValuePair* GetStatisticsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.GetStatisticsResponse.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
GetStatisticsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.GetStatisticsResponse.stats)
  return &_impl_.stats_;
}
inline const ::milvus::proto::common::KeyValuePair& GetStatisticsResponse::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& GetStatisticsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.GetStatisticsResponse.stats)
  return _internal_stats(index);
}
inline ::milvus::proto::common::KeyValuePair* GetStatisticsResponse::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::milvus::proto::common::KeyValuePair* GetStatisticsResponse::add_stats() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:milvus.proto.internal.GetStatisticsResponse.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
GetStatisticsResponse::stats() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.GetStatisticsResponse.stats)
  return _impl_.stats_;
}

// -------------------------------------------------------------------

// CreateAliasRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreateAliasRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool CreateAliasRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CreateAliasRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CreateAliasRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CreateAliasRequest.base)
  return _internal_base();
}
inline void CreateAliasRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.CreateAliasRequest.base)
}
inline ::milvus::proto::common::MsgBase* CreateAliasRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateAliasRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.CreateAliasRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateAliasRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* CreateAliasRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.CreateAliasRequest.base)
  return _msg;
}
inline void CreateAliasRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.CreateAliasRequest.base)
}

// string db_name = 2;
inline void CreateAliasRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& CreateAliasRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CreateAliasRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAliasRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CreateAliasRequest.db_name)
}
inline std::string* CreateAliasRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.CreateAliasRequest.db_name)
  return _s;
}
inline const std::string& CreateAliasRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void CreateAliasRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAliasRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAliasRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.CreateAliasRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void CreateAliasRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.CreateAliasRequest.db_name)
}

// string collection_name = 3;
inline void CreateAliasRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& CreateAliasRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CreateAliasRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAliasRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CreateAliasRequest.collection_name)
}
inline std::string* CreateAliasRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.CreateAliasRequest.collection_name)
  return _s;
}
inline const std::string& CreateAliasRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void CreateAliasRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAliasRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAliasRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.CreateAliasRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void CreateAliasRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.CreateAliasRequest.collection_name)
}

// string alias = 4;
inline void CreateAliasRequest::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& CreateAliasRequest::alias() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CreateAliasRequest.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAliasRequest::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CreateAliasRequest.alias)
}
inline std::string* CreateAliasRequest::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.CreateAliasRequest.alias)
  return _s;
}
inline const std::string& CreateAliasRequest::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void CreateAliasRequest::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAliasRequest::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.CreateAliasRequest.alias)
  return _impl_.alias_.Release();
}
inline void CreateAliasRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.CreateAliasRequest.alias)
}

// -------------------------------------------------------------------

// DropAliasRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropAliasRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DropAliasRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DropAliasRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DropAliasRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.DropAliasRequest.base)
  return _internal_base();
}
inline void DropAliasRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.DropAliasRequest.base)
}
inline ::milvus::proto::common::MsgBase* DropAliasRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropAliasRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.DropAliasRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropAliasRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DropAliasRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.DropAliasRequest.base)
  return _msg;
}
inline void DropAliasRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.DropAliasRequest.base)
}

// string db_name = 2;
inline void DropAliasRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DropAliasRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.DropAliasRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropAliasRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.DropAliasRequest.db_name)
}
inline std::string* DropAliasRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.DropAliasRequest.db_name)
  return _s;
}
inline const std::string& DropAliasRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DropAliasRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropAliasRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropAliasRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.DropAliasRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void DropAliasRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.DropAliasRequest.db_name)
}

// string alias = 3;
inline void DropAliasRequest::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& DropAliasRequest::alias() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.DropAliasRequest.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropAliasRequest::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.DropAliasRequest.alias)
}
inline std::string* DropAliasRequest::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.DropAliasRequest.alias)
  return _s;
}
inline const std::string& DropAliasRequest::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void DropAliasRequest::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* DropAliasRequest::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* DropAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.DropAliasRequest.alias)
  return _impl_.alias_.Release();
}
inline void DropAliasRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.DropAliasRequest.alias)
}

// -------------------------------------------------------------------

// AlterAliasRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool AlterAliasRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool AlterAliasRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& AlterAliasRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& AlterAliasRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.AlterAliasRequest.base)
  return _internal_base();
}
inline void AlterAliasRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.AlterAliasRequest.base)
}
inline ::milvus::proto::common::MsgBase* AlterAliasRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* AlterAliasRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.AlterAliasRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* AlterAliasRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* AlterAliasRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.AlterAliasRequest.base)
  return _msg;
}
inline void AlterAliasRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.AlterAliasRequest.base)
}

// string db_name = 2;
inline void AlterAliasRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& AlterAliasRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.AlterAliasRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlterAliasRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.AlterAliasRequest.db_name)
}
inline std::string* AlterAliasRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.AlterAliasRequest.db_name)
  return _s;
}
inline const std::string& AlterAliasRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void AlterAliasRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AlterAliasRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AlterAliasRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.AlterAliasRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void AlterAliasRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.AlterAliasRequest.db_name)
}

// string collection_name = 3;
inline void AlterAliasRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& AlterAliasRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.AlterAliasRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlterAliasRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.AlterAliasRequest.collection_name)
}
inline std::string* AlterAliasRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.AlterAliasRequest.collection_name)
  return _s;
}
inline const std::string& AlterAliasRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void AlterAliasRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AlterAliasRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AlterAliasRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.AlterAliasRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void AlterAliasRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.AlterAliasRequest.collection_name)
}

// string alias = 4;
inline void AlterAliasRequest::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& AlterAliasRequest::alias() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.AlterAliasRequest.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlterAliasRequest::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.AlterAliasRequest.alias)
}
inline std::string* AlterAliasRequest::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.AlterAliasRequest.alias)
  return _s;
}
inline const std::string& AlterAliasRequest::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void AlterAliasRequest::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* AlterAliasRequest::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* AlterAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.AlterAliasRequest.alias)
  return _impl_.alias_.Release();
}
inline void AlterAliasRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.AlterAliasRequest.alias)
}

// -------------------------------------------------------------------

// CreateIndexRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreateIndexRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool CreateIndexRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CreateIndexRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CreateIndexRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CreateIndexRequest.base)
  return _internal_base();
}
inline void CreateIndexRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.CreateIndexRequest.base)
}
inline ::milvus::proto::common::MsgBase* CreateIndexRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateIndexRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.CreateIndexRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateIndexRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* CreateIndexRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.CreateIndexRequest.base)
  return _msg;
}
inline void CreateIndexRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.CreateIndexRequest.base)
}

// string db_name = 2;
inline void CreateIndexRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& CreateIndexRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CreateIndexRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateIndexRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CreateIndexRequest.db_name)
}
inline std::string* CreateIndexRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.CreateIndexRequest.db_name)
  return _s;
}
inline const std::string& CreateIndexRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void CreateIndexRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.CreateIndexRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void CreateIndexRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.CreateIndexRequest.db_name)
}

// string collection_name = 3;
inline void CreateIndexRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& CreateIndexRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CreateIndexRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateIndexRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CreateIndexRequest.collection_name)
}
inline std::string* CreateIndexRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.CreateIndexRequest.collection_name)
  return _s;
}
inline const std::string& CreateIndexRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void CreateIndexRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.CreateIndexRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void CreateIndexRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.CreateIndexRequest.collection_name)
}

// string field_name = 4;
inline void CreateIndexRequest::clear_field_name() {
  _impl_.field_name_.ClearToEmpty();
}
inline const std::string& CreateIndexRequest::field_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CreateIndexRequest.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateIndexRequest::set_field_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CreateIndexRequest.field_name)
}
inline std::string* CreateIndexRequest::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.CreateIndexRequest.field_name)
  return _s;
}
inline const std::string& CreateIndexRequest::_internal_field_name() const {
  return _impl_.field_name_.Get();
}
inline void CreateIndexRequest::_internal_set_field_name(const std::string& value) {
  
  _impl_.field_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::_internal_mutable_field_name() {
  
  return _impl_.field_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::release_field_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.CreateIndexRequest.field_name)
  return _impl_.field_name_.Release();
}
inline void CreateIndexRequest::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  _impl_.field_name_.SetAllocated(field_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_name_.IsDefault()) {
    _impl_.field_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.CreateIndexRequest.field_name)
}

// int64 dbID = 5;
inline void CreateIndexRequest::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t CreateIndexRequest::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t CreateIndexRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CreateIndexRequest.dbID)
  return _internal_dbid();
}
inline void CreateIndexRequest::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void CreateIndexRequest::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CreateIndexRequest.dbID)
}

// int64 collectionID = 6;
inline void CreateIndexRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t CreateIndexRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t CreateIndexRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CreateIndexRequest.collectionID)
  return _internal_collectionid();
}
inline void CreateIndexRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void CreateIndexRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CreateIndexRequest.collectionID)
}

// int64 fieldID = 7;
inline void CreateIndexRequest::clear_fieldid() {
  _impl_.fieldid_ = int64_t{0};
}
inline int64_t CreateIndexRequest::_internal_fieldid() const {
  return _impl_.fieldid_;
}
inline int64_t CreateIndexRequest::fieldid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CreateIndexRequest.fieldID)
  return _internal_fieldid();
}
inline void CreateIndexRequest::_internal_set_fieldid(int64_t value) {
  
  _impl_.fieldid_ = value;
}
inline void CreateIndexRequest::set_fieldid(int64_t value) {
  _internal_set_fieldid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CreateIndexRequest.fieldID)
}

// repeated .milvus.proto.common.KeyValuePair extra_params = 8;
inline int CreateIndexRequest::_internal_extra_params_size() const {
  return _impl_.extra_params_.size();
}
inline int CreateIndexRequest::extra_params_size() const {
  return _internal_extra_params_size();
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.CreateIndexRequest.extra_params)
  return _impl_.extra_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
CreateIndexRequest::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.CreateIndexRequest.extra_params)
  return &_impl_.extra_params_;
}
inline const ::milvus::proto::common::KeyValuePair& CreateIndexRequest::_internal_extra_params(int index) const {
  return _impl_.extra_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& CreateIndexRequest::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CreateIndexRequest.extra_params)
  return _internal_extra_params(index);
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::_internal_add_extra_params() {
  return _impl_.extra_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* CreateIndexRequest::add_extra_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_extra_params();
  // @@protoc_insertion_point(field_add:milvus.proto.internal.CreateIndexRequest.extra_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
CreateIndexRequest::extra_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.CreateIndexRequest.extra_params)
  return _impl_.extra_params_;
}

// -------------------------------------------------------------------

// SearchRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool SearchRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SearchRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& SearchRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& SearchRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.base)
  return _internal_base();
}
inline void SearchRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.SearchRequest.base)
}
inline ::milvus::proto::common::MsgBase* SearchRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* SearchRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.SearchRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* SearchRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* SearchRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.SearchRequest.base)
  return _msg;
}
inline void SearchRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.SearchRequest.base)
}

// int64 reqID = 2;
inline void SearchRequest::clear_reqid() {
  _impl_.reqid_ = int64_t{0};
}
inline int64_t SearchRequest::_internal_reqid() const {
  return _impl_.reqid_;
}
inline int64_t SearchRequest::reqid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.reqID)
  return _internal_reqid();
}
inline void SearchRequest::_internal_set_reqid(int64_t value) {
  
  _impl_.reqid_ = value;
}
inline void SearchRequest::set_reqid(int64_t value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.reqID)
}

// int64 dbID = 3;
inline void SearchRequest::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t SearchRequest::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t SearchRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.dbID)
  return _internal_dbid();
}
inline void SearchRequest::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void SearchRequest::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.dbID)
}

// int64 collectionID = 4;
inline void SearchRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t SearchRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t SearchRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.collectionID)
  return _internal_collectionid();
}
inline void SearchRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void SearchRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.collectionID)
}

// repeated int64 partitionIDs = 5;
inline int SearchRequest::_internal_partitionids_size() const {
  return _impl_.partitionids_.size();
}
inline int SearchRequest::partitionids_size() const {
  return _internal_partitionids_size();
}
inline void SearchRequest::clear_partitionids() {
  _impl_.partitionids_.Clear();
}
inline int64_t SearchRequest::_internal_partitionids(int index) const {
  return _impl_.partitionids_.Get(index);
}
inline int64_t SearchRequest::partitionids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.partitionIDs)
  return _internal_partitionids(index);
}
inline void SearchRequest::set_partitionids(int index, int64_t value) {
  _impl_.partitionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.partitionIDs)
}
inline void SearchRequest::_internal_add_partitionids(int64_t value) {
  _impl_.partitionids_.Add(value);
}
inline void SearchRequest::add_partitionids(int64_t value) {
  _internal_add_partitionids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.SearchRequest.partitionIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SearchRequest::_internal_partitionids() const {
  return _impl_.partitionids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SearchRequest::partitionids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.SearchRequest.partitionIDs)
  return _internal_partitionids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SearchRequest::_internal_mutable_partitionids() {
  return &_impl_.partitionids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SearchRequest::mutable_partitionids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.SearchRequest.partitionIDs)
  return _internal_mutable_partitionids();
}

// string dsl = 6;
inline void SearchRequest::clear_dsl() {
  _impl_.dsl_.ClearToEmpty();
}
inline const std::string& SearchRequest::dsl() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.dsl)
  return _internal_dsl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_dsl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dsl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.dsl)
}
inline std::string* SearchRequest::mutable_dsl() {
  std::string* _s = _internal_mutable_dsl();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.SearchRequest.dsl)
  return _s;
}
inline const std::string& SearchRequest::_internal_dsl() const {
  return _impl_.dsl_.Get();
}
inline void SearchRequest::_internal_set_dsl(const std::string& value) {
  
  _impl_.dsl_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_dsl() {
  
  return _impl_.dsl_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchRequest::release_dsl() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.SearchRequest.dsl)
  return _impl_.dsl_.Release();
}
inline void SearchRequest::set_allocated_dsl(std::string* dsl) {
  if (dsl != nullptr) {
    
  } else {
    
  }
  _impl_.dsl_.SetAllocated(dsl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dsl_.IsDefault()) {
    _impl_.dsl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.SearchRequest.dsl)
}

// bytes placeholder_group = 7;
inline void SearchRequest::clear_placeholder_group() {
  _impl_.placeholder_group_.ClearToEmpty();
}
inline const std::string& SearchRequest::placeholder_group() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.placeholder_group)
  return _internal_placeholder_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_placeholder_group(ArgT0&& arg0, ArgT... args) {
 
 _impl_.placeholder_group_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.placeholder_group)
}
inline std::string* SearchRequest::mutable_placeholder_group() {
  std::string* _s = _internal_mutable_placeholder_group();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.SearchRequest.placeholder_group)
  return _s;
}
inline const std::string& SearchRequest::_internal_placeholder_group() const {
  return _impl_.placeholder_group_.Get();
}
inline void SearchRequest::_internal_set_placeholder_group(const std::string& value) {
  
  _impl_.placeholder_group_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_placeholder_group() {
  
  return _impl_.placeholder_group_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchRequest::release_placeholder_group() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.SearchRequest.placeholder_group)
  return _impl_.placeholder_group_.Release();
}
inline void SearchRequest::set_allocated_placeholder_group(std::string* placeholder_group) {
  if (placeholder_group != nullptr) {
    
  } else {
    
  }
  _impl_.placeholder_group_.SetAllocated(placeholder_group, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.placeholder_group_.IsDefault()) {
    _impl_.placeholder_group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.SearchRequest.placeholder_group)
}

// .milvus.proto.common.DslType dsl_type = 8;
inline void SearchRequest::clear_dsl_type() {
  _impl_.dsl_type_ = 0;
}
inline ::milvus::proto::common::DslType SearchRequest::_internal_dsl_type() const {
  return static_cast< ::milvus::proto::common::DslType >(_impl_.dsl_type_);
}
inline ::milvus::proto::common::DslType SearchRequest::dsl_type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.dsl_type)
  return _internal_dsl_type();
}
inline void SearchRequest::_internal_set_dsl_type(::milvus::proto::common::DslType value) {
  
  _impl_.dsl_type_ = value;
}
inline void SearchRequest::set_dsl_type(::milvus::proto::common::DslType value) {
  _internal_set_dsl_type(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.dsl_type)
}

// bytes serialized_expr_plan = 9;
inline void SearchRequest::clear_serialized_expr_plan() {
  _impl_.serialized_expr_plan_.ClearToEmpty();
}
inline const std::string& SearchRequest::serialized_expr_plan() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.serialized_expr_plan)
  return _internal_serialized_expr_plan();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_serialized_expr_plan(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serialized_expr_plan_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.serialized_expr_plan)
}
inline std::string* SearchRequest::mutable_serialized_expr_plan() {
  std::string* _s = _internal_mutable_serialized_expr_plan();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.SearchRequest.serialized_expr_plan)
  return _s;
}
inline const std::string& SearchRequest::_internal_serialized_expr_plan() const {
  return _impl_.serialized_expr_plan_.Get();
}
inline void SearchRequest::_internal_set_serialized_expr_plan(const std::string& value) {
  
  _impl_.serialized_expr_plan_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_serialized_expr_plan() {
  
  return _impl_.serialized_expr_plan_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchRequest::release_serialized_expr_plan() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.SearchRequest.serialized_expr_plan)
  return _impl_.serialized_expr_plan_.Release();
}
inline void SearchRequest::set_allocated_serialized_expr_plan(std::string* serialized_expr_plan) {
  if (serialized_expr_plan != nullptr) {
    
  } else {
    
  }
  _impl_.serialized_expr_plan_.SetAllocated(serialized_expr_plan, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serialized_expr_plan_.IsDefault()) {
    _impl_.serialized_expr_plan_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.SearchRequest.serialized_expr_plan)
}

// repeated int64 output_fields_id = 10;
inline int SearchRequest::_internal_output_fields_id_size() const {
  return _impl_.output_fields_id_.size();
}
inline int SearchRequest::output_fields_id_size() const {
  return _internal_output_fields_id_size();
}
inline void SearchRequest::clear_output_fields_id() {
  _impl_.output_fields_id_.Clear();
}
inline int64_t SearchRequest::_internal_output_fields_id(int index) const {
  return _impl_.output_fields_id_.Get(index);
}
inline int64_t SearchRequest::output_fields_id(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.output_fields_id)
  return _internal_output_fields_id(index);
}
inline void SearchRequest::set_output_fields_id(int index, int64_t value) {
  _impl_.output_fields_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.output_fields_id)
}
inline void SearchRequest::_internal_add_output_fields_id(int64_t value) {
  _impl_.output_fields_id_.Add(value);
}
inline void SearchRequest::add_output_fields_id(int64_t value) {
  _internal_add_output_fields_id(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.SearchRequest.output_fields_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SearchRequest::_internal_output_fields_id() const {
  return _impl_.output_fields_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SearchRequest::output_fields_id() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.SearchRequest.output_fields_id)
  return _internal_output_fields_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SearchRequest::_internal_mutable_output_fields_id() {
  return &_impl_.output_fields_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SearchRequest::mutable_output_fields_id() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.SearchRequest.output_fields_id)
  return _internal_mutable_output_fields_id();
}

// uint64 travel_timestamp = 11;
inline void SearchRequest::clear_travel_timestamp() {
  _impl_.travel_timestamp_ = uint64_t{0u};
}
inline uint64_t SearchRequest::_internal_travel_timestamp() const {
  return _impl_.travel_timestamp_;
}
inline uint64_t SearchRequest::travel_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.travel_timestamp)
  return _internal_travel_timestamp();
}
inline void SearchRequest::_internal_set_travel_timestamp(uint64_t value) {
  
  _impl_.travel_timestamp_ = value;
}
inline void SearchRequest::set_travel_timestamp(uint64_t value) {
  _internal_set_travel_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.travel_timestamp)
}

// uint64 guarantee_timestamp = 12;
inline void SearchRequest::clear_guarantee_timestamp() {
  _impl_.guarantee_timestamp_ = uint64_t{0u};
}
inline uint64_t SearchRequest::_internal_guarantee_timestamp() const {
  return _impl_.guarantee_timestamp_;
}
inline uint64_t SearchRequest::guarantee_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.guarantee_timestamp)
  return _internal_guarantee_timestamp();
}
inline void SearchRequest::_internal_set_guarantee_timestamp(uint64_t value) {
  
  _impl_.guarantee_timestamp_ = value;
}
inline void SearchRequest::set_guarantee_timestamp(uint64_t value) {
  _internal_set_guarantee_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.guarantee_timestamp)
}

// uint64 timeout_timestamp = 13;
inline void SearchRequest::clear_timeout_timestamp() {
  _impl_.timeout_timestamp_ = uint64_t{0u};
}
inline uint64_t SearchRequest::_internal_timeout_timestamp() const {
  return _impl_.timeout_timestamp_;
}
inline uint64_t SearchRequest::timeout_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.timeout_timestamp)
  return _internal_timeout_timestamp();
}
inline void SearchRequest::_internal_set_timeout_timestamp(uint64_t value) {
  
  _impl_.timeout_timestamp_ = value;
}
inline void SearchRequest::set_timeout_timestamp(uint64_t value) {
  _internal_set_timeout_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.timeout_timestamp)
}

// int64 nq = 14;
inline void SearchRequest::clear_nq() {
  _impl_.nq_ = int64_t{0};
}
inline int64_t SearchRequest::_internal_nq() const {
  return _impl_.nq_;
}
inline int64_t SearchRequest::nq() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.nq)
  return _internal_nq();
}
inline void SearchRequest::_internal_set_nq(int64_t value) {
  
  _impl_.nq_ = value;
}
inline void SearchRequest::set_nq(int64_t value) {
  _internal_set_nq(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.nq)
}

// int64 topk = 15;
inline void SearchRequest::clear_topk() {
  _impl_.topk_ = int64_t{0};
}
inline int64_t SearchRequest::_internal_topk() const {
  return _impl_.topk_;
}
inline int64_t SearchRequest::topk() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.topk)
  return _internal_topk();
}
inline void SearchRequest::_internal_set_topk(int64_t value) {
  
  _impl_.topk_ = value;
}
inline void SearchRequest::set_topk(int64_t value) {
  _internal_set_topk(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.topk)
}

// string metricType = 16;
inline void SearchRequest::clear_metrictype() {
  _impl_.metrictype_.ClearToEmpty();
}
inline const std::string& SearchRequest::metrictype() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.metricType)
  return _internal_metrictype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_metrictype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metrictype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.metricType)
}
inline std::string* SearchRequest::mutable_metrictype() {
  std::string* _s = _internal_mutable_metrictype();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.SearchRequest.metricType)
  return _s;
}
inline const std::string& SearchRequest::_internal_metrictype() const {
  return _impl_.metrictype_.Get();
}
inline void SearchRequest::_internal_set_metrictype(const std::string& value) {
  
  _impl_.metrictype_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_metrictype() {
  
  return _impl_.metrictype_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchRequest::release_metrictype() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.SearchRequest.metricType)
  return _impl_.metrictype_.Release();
}
inline void SearchRequest::set_allocated_metrictype(std::string* metrictype) {
  if (metrictype != nullptr) {
    
  } else {
    
  }
  _impl_.metrictype_.SetAllocated(metrictype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metrictype_.IsDefault()) {
    _impl_.metrictype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.SearchRequest.metricType)
}

// bool ignoreGrowing = 17;
inline void SearchRequest::clear_ignoregrowing() {
  _impl_.ignoregrowing_ = false;
}
inline bool SearchRequest::_internal_ignoregrowing() const {
  return _impl_.ignoregrowing_;
}
inline bool SearchRequest::ignoregrowing() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.ignoreGrowing)
  return _internal_ignoregrowing();
}
inline void SearchRequest::_internal_set_ignoregrowing(bool value) {
  
  _impl_.ignoregrowing_ = value;
}
inline void SearchRequest::set_ignoregrowing(bool value) {
  _internal_set_ignoregrowing(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.ignoreGrowing)
}

// string username = 18;
inline void SearchRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& SearchRequest::username() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchRequest.username)
}
inline std::string* SearchRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.SearchRequest.username)
  return _s;
}
inline const std::string& SearchRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void SearchRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchRequest::release_username() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.SearchRequest.username)
  return _impl_.username_.Release();
}
inline void SearchRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.SearchRequest.username)
}

// -------------------------------------------------------------------

// SearchResults

// .milvus.proto.common.MsgBase base = 1;
inline bool SearchResults::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SearchResults::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& SearchResults::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& SearchResults::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchResults.base)
  return _internal_base();
}
inline void SearchResults::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.SearchResults.base)
}
inline ::milvus::proto::common::MsgBase* SearchResults::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* SearchResults::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.SearchResults.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* SearchResults::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* SearchResults::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.SearchResults.base)
  return _msg;
}
inline void SearchResults::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.SearchResults.base)
}

// .milvus.proto.common.Status status = 2;
inline bool SearchResults::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool SearchResults::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& SearchResults::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& SearchResults::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchResults.status)
  return _internal_status();
}
inline void SearchResults::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.SearchResults.status)
}
inline ::milvus::proto::common::Status* SearchResults::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* SearchResults::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.SearchResults.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* SearchResults::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* SearchResults::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.SearchResults.status)
  return _msg;
}
inline void SearchResults::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.SearchResults.status)
}

// int64 reqID = 3;
inline void SearchResults::clear_reqid() {
  _impl_.reqid_ = int64_t{0};
}
inline int64_t SearchResults::_internal_reqid() const {
  return _impl_.reqid_;
}
inline int64_t SearchResults::reqid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchResults.reqID)
  return _internal_reqid();
}
inline void SearchResults::_internal_set_reqid(int64_t value) {
  
  _impl_.reqid_ = value;
}
inline void SearchResults::set_reqid(int64_t value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchResults.reqID)
}

// string metric_type = 4;
inline void SearchResults::clear_metric_type() {
  _impl_.metric_type_.ClearToEmpty();
}
inline const std::string& SearchResults::metric_type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchResults.metric_type)
  return _internal_metric_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResults::set_metric_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metric_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchResults.metric_type)
}
inline std::string* SearchResults::mutable_metric_type() {
  std::string* _s = _internal_mutable_metric_type();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.SearchResults.metric_type)
  return _s;
}
inline const std::string& SearchResults::_internal_metric_type() const {
  return _impl_.metric_type_.Get();
}
inline void SearchResults::_internal_set_metric_type(const std::string& value) {
  
  _impl_.metric_type_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchResults::_internal_mutable_metric_type() {
  
  return _impl_.metric_type_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchResults::release_metric_type() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.SearchResults.metric_type)
  return _impl_.metric_type_.Release();
}
inline void SearchResults::set_allocated_metric_type(std::string* metric_type) {
  if (metric_type != nullptr) {
    
  } else {
    
  }
  _impl_.metric_type_.SetAllocated(metric_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metric_type_.IsDefault()) {
    _impl_.metric_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.SearchResults.metric_type)
}

// int64 num_queries = 5;
inline void SearchResults::clear_num_queries() {
  _impl_.num_queries_ = int64_t{0};
}
inline int64_t SearchResults::_internal_num_queries() const {
  return _impl_.num_queries_;
}
inline int64_t SearchResults::num_queries() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchResults.num_queries)
  return _internal_num_queries();
}
inline void SearchResults::_internal_set_num_queries(int64_t value) {
  
  _impl_.num_queries_ = value;
}
inline void SearchResults::set_num_queries(int64_t value) {
  _internal_set_num_queries(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchResults.num_queries)
}

// int64 top_k = 6;
inline void SearchResults::clear_top_k() {
  _impl_.top_k_ = int64_t{0};
}
inline int64_t SearchResults::_internal_top_k() const {
  return _impl_.top_k_;
}
inline int64_t SearchResults::top_k() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchResults.top_k)
  return _internal_top_k();
}
inline void SearchResults::_internal_set_top_k(int64_t value) {
  
  _impl_.top_k_ = value;
}
inline void SearchResults::set_top_k(int64_t value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchResults.top_k)
}

// repeated int64 sealed_segmentIDs_searched = 7;
inline int SearchResults::_internal_sealed_segmentids_searched_size() const {
  return _impl_.sealed_segmentids_searched_.size();
}
inline int SearchResults::sealed_segmentids_searched_size() const {
  return _internal_sealed_segmentids_searched_size();
}
inline void SearchResults::clear_sealed_segmentids_searched() {
  _impl_.sealed_segmentids_searched_.Clear();
}
inline int64_t SearchResults::_internal_sealed_segmentids_searched(int index) const {
  return _impl_.sealed_segmentids_searched_.Get(index);
}
inline int64_t SearchResults::sealed_segmentids_searched(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchResults.sealed_segmentIDs_searched)
  return _internal_sealed_segmentids_searched(index);
}
inline void SearchResults::set_sealed_segmentids_searched(int index, int64_t value) {
  _impl_.sealed_segmentids_searched_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchResults.sealed_segmentIDs_searched)
}
inline void SearchResults::_internal_add_sealed_segmentids_searched(int64_t value) {
  _impl_.sealed_segmentids_searched_.Add(value);
}
inline void SearchResults::add_sealed_segmentids_searched(int64_t value) {
  _internal_add_sealed_segmentids_searched(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.SearchResults.sealed_segmentIDs_searched)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SearchResults::_internal_sealed_segmentids_searched() const {
  return _impl_.sealed_segmentids_searched_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SearchResults::sealed_segmentids_searched() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.SearchResults.sealed_segmentIDs_searched)
  return _internal_sealed_segmentids_searched();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SearchResults::_internal_mutable_sealed_segmentids_searched() {
  return &_impl_.sealed_segmentids_searched_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SearchResults::mutable_sealed_segmentids_searched() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.SearchResults.sealed_segmentIDs_searched)
  return _internal_mutable_sealed_segmentids_searched();
}

// repeated string channelIDs_searched = 8;
inline int SearchResults::_internal_channelids_searched_size() const {
  return _impl_.channelids_searched_.size();
}
inline int SearchResults::channelids_searched_size() const {
  return _internal_channelids_searched_size();
}
inline void SearchResults::clear_channelids_searched() {
  _impl_.channelids_searched_.Clear();
}
inline std::string* SearchResults::add_channelids_searched() {
  std::string* _s = _internal_add_channelids_searched();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.internal.SearchResults.channelIDs_searched)
  return _s;
}
inline const std::string& SearchResults::_internal_channelids_searched(int index) const {
  return _impl_.channelids_searched_.Get(index);
}
inline const std::string& SearchResults::channelids_searched(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchResults.channelIDs_searched)
  return _internal_channelids_searched(index);
}
inline std::string* SearchResults::mutable_channelids_searched(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.SearchResults.channelIDs_searched)
  return _impl_.channelids_searched_.Mutable(index);
}
inline void SearchResults::set_channelids_searched(int index, const std::string& value) {
  _impl_.channelids_searched_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchResults.channelIDs_searched)
}
inline void SearchResults::set_channelids_searched(int index, std::string&& value) {
  _impl_.channelids_searched_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchResults.channelIDs_searched)
}
inline void SearchResults::set_channelids_searched(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channelids_searched_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.internal.SearchResults.channelIDs_searched)
}
inline void SearchResults::set_channelids_searched(int index, const char* value, size_t size) {
  _impl_.channelids_searched_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.internal.SearchResults.channelIDs_searched)
}
inline std::string* SearchResults::_internal_add_channelids_searched() {
  return _impl_.channelids_searched_.Add();
}
inline void SearchResults::add_channelids_searched(const std::string& value) {
  _impl_.channelids_searched_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.SearchResults.channelIDs_searched)
}
inline void SearchResults::add_channelids_searched(std::string&& value) {
  _impl_.channelids_searched_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.internal.SearchResults.channelIDs_searched)
}
inline void SearchResults::add_channelids_searched(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channelids_searched_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.internal.SearchResults.channelIDs_searched)
}
inline void SearchResults::add_channelids_searched(const char* value, size_t size) {
  _impl_.channelids_searched_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.internal.SearchResults.channelIDs_searched)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchResults::channelids_searched() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.SearchResults.channelIDs_searched)
  return _impl_.channelids_searched_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchResults::mutable_channelids_searched() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.SearchResults.channelIDs_searched)
  return &_impl_.channelids_searched_;
}

// repeated int64 global_sealed_segmentIDs = 9;
inline int SearchResults::_internal_global_sealed_segmentids_size() const {
  return _impl_.global_sealed_segmentids_.size();
}
inline int SearchResults::global_sealed_segmentids_size() const {
  return _internal_global_sealed_segmentids_size();
}
inline void SearchResults::clear_global_sealed_segmentids() {
  _impl_.global_sealed_segmentids_.Clear();
}
inline int64_t SearchResults::_internal_global_sealed_segmentids(int index) const {
  return _impl_.global_sealed_segmentids_.Get(index);
}
inline int64_t SearchResults::global_sealed_segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchResults.global_sealed_segmentIDs)
  return _internal_global_sealed_segmentids(index);
}
inline void SearchResults::set_global_sealed_segmentids(int index, int64_t value) {
  _impl_.global_sealed_segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchResults.global_sealed_segmentIDs)
}
inline void SearchResults::_internal_add_global_sealed_segmentids(int64_t value) {
  _impl_.global_sealed_segmentids_.Add(value);
}
inline void SearchResults::add_global_sealed_segmentids(int64_t value) {
  _internal_add_global_sealed_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.SearchResults.global_sealed_segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SearchResults::_internal_global_sealed_segmentids() const {
  return _impl_.global_sealed_segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SearchResults::global_sealed_segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.SearchResults.global_sealed_segmentIDs)
  return _internal_global_sealed_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SearchResults::_internal_mutable_global_sealed_segmentids() {
  return &_impl_.global_sealed_segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SearchResults::mutable_global_sealed_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.SearchResults.global_sealed_segmentIDs)
  return _internal_mutable_global_sealed_segmentids();
}

// bytes sliced_blob = 10;
inline void SearchResults::clear_sliced_blob() {
  _impl_.sliced_blob_.ClearToEmpty();
}
inline const std::string& SearchResults::sliced_blob() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchResults.sliced_blob)
  return _internal_sliced_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResults::set_sliced_blob(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sliced_blob_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchResults.sliced_blob)
}
inline std::string* SearchResults::mutable_sliced_blob() {
  std::string* _s = _internal_mutable_sliced_blob();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.SearchResults.sliced_blob)
  return _s;
}
inline const std::string& SearchResults::_internal_sliced_blob() const {
  return _impl_.sliced_blob_.Get();
}
inline void SearchResults::_internal_set_sliced_blob(const std::string& value) {
  
  _impl_.sliced_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchResults::_internal_mutable_sliced_blob() {
  
  return _impl_.sliced_blob_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchResults::release_sliced_blob() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.SearchResults.sliced_blob)
  return _impl_.sliced_blob_.Release();
}
inline void SearchResults::set_allocated_sliced_blob(std::string* sliced_blob) {
  if (sliced_blob != nullptr) {
    
  } else {
    
  }
  _impl_.sliced_blob_.SetAllocated(sliced_blob, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sliced_blob_.IsDefault()) {
    _impl_.sliced_blob_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.SearchResults.sliced_blob)
}

// int64 sliced_num_count = 11;
inline void SearchResults::clear_sliced_num_count() {
  _impl_.sliced_num_count_ = int64_t{0};
}
inline int64_t SearchResults::_internal_sliced_num_count() const {
  return _impl_.sliced_num_count_;
}
inline int64_t SearchResults::sliced_num_count() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchResults.sliced_num_count)
  return _internal_sliced_num_count();
}
inline void SearchResults::_internal_set_sliced_num_count(int64_t value) {
  
  _impl_.sliced_num_count_ = value;
}
inline void SearchResults::set_sliced_num_count(int64_t value) {
  _internal_set_sliced_num_count(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchResults.sliced_num_count)
}

// int64 sliced_offset = 12;
inline void SearchResults::clear_sliced_offset() {
  _impl_.sliced_offset_ = int64_t{0};
}
inline int64_t SearchResults::_internal_sliced_offset() const {
  return _impl_.sliced_offset_;
}
inline int64_t SearchResults::sliced_offset() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchResults.sliced_offset)
  return _internal_sliced_offset();
}
inline void SearchResults::_internal_set_sliced_offset(int64_t value) {
  
  _impl_.sliced_offset_ = value;
}
inline void SearchResults::set_sliced_offset(int64_t value) {
  _internal_set_sliced_offset(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SearchResults.sliced_offset)
}

// .milvus.proto.internal.CostAggregation costAggregation = 13;
inline bool SearchResults::_internal_has_costaggregation() const {
  return this != internal_default_instance() && _impl_.costaggregation_ != nullptr;
}
inline bool SearchResults::has_costaggregation() const {
  return _internal_has_costaggregation();
}
inline void SearchResults::clear_costaggregation() {
  if (GetArenaForAllocation() == nullptr && _impl_.costaggregation_ != nullptr) {
    delete _impl_.costaggregation_;
  }
  _impl_.costaggregation_ = nullptr;
}
inline const ::milvus::proto::internal::CostAggregation& SearchResults::_internal_costaggregation() const {
  const ::milvus::proto::internal::CostAggregation* p = _impl_.costaggregation_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::internal::CostAggregation&>(
      ::milvus::proto::internal::_CostAggregation_default_instance_);
}
inline const ::milvus::proto::internal::CostAggregation& SearchResults::costaggregation() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SearchResults.costAggregation)
  return _internal_costaggregation();
}
inline void SearchResults::unsafe_arena_set_allocated_costaggregation(
    ::milvus::proto::internal::CostAggregation* costaggregation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.costaggregation_);
  }
  _impl_.costaggregation_ = costaggregation;
  if (costaggregation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.SearchResults.costAggregation)
}
inline ::milvus::proto::internal::CostAggregation* SearchResults::release_costaggregation() {
  
  ::milvus::proto::internal::CostAggregation* temp = _impl_.costaggregation_;
  _impl_.costaggregation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::internal::CostAggregation* SearchResults::unsafe_arena_release_costaggregation() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.SearchResults.costAggregation)
  
  ::milvus::proto::internal::CostAggregation* temp = _impl_.costaggregation_;
  _impl_.costaggregation_ = nullptr;
  return temp;
}
inline ::milvus::proto::internal::CostAggregation* SearchResults::_internal_mutable_costaggregation() {
  
  if (_impl_.costaggregation_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::internal::CostAggregation>(GetArenaForAllocation());
    _impl_.costaggregation_ = p;
  }
  return _impl_.costaggregation_;
}
inline ::milvus::proto::internal::CostAggregation* SearchResults::mutable_costaggregation() {
  ::milvus::proto::internal::CostAggregation* _msg = _internal_mutable_costaggregation();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.SearchResults.costAggregation)
  return _msg;
}
inline void SearchResults::set_allocated_costaggregation(::milvus::proto::internal::CostAggregation* costaggregation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.costaggregation_;
  }
  if (costaggregation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(costaggregation);
    if (message_arena != submessage_arena) {
      costaggregation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, costaggregation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.costaggregation_ = costaggregation;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.SearchResults.costAggregation)
}

// -------------------------------------------------------------------

// CostAggregation

// int64 responseTime = 1;
inline void CostAggregation::clear_responsetime() {
  _impl_.responsetime_ = int64_t{0};
}
inline int64_t CostAggregation::_internal_responsetime() const {
  return _impl_.responsetime_;
}
inline int64_t CostAggregation::responsetime() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CostAggregation.responseTime)
  return _internal_responsetime();
}
inline void CostAggregation::_internal_set_responsetime(int64_t value) {
  
  _impl_.responsetime_ = value;
}
inline void CostAggregation::set_responsetime(int64_t value) {
  _internal_set_responsetime(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CostAggregation.responseTime)
}

// int64 serviceTime = 2;
inline void CostAggregation::clear_servicetime() {
  _impl_.servicetime_ = int64_t{0};
}
inline int64_t CostAggregation::_internal_servicetime() const {
  return _impl_.servicetime_;
}
inline int64_t CostAggregation::servicetime() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CostAggregation.serviceTime)
  return _internal_servicetime();
}
inline void CostAggregation::_internal_set_servicetime(int64_t value) {
  
  _impl_.servicetime_ = value;
}
inline void CostAggregation::set_servicetime(int64_t value) {
  _internal_set_servicetime(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CostAggregation.serviceTime)
}

// int64 totalNQ = 3;
inline void CostAggregation::clear_totalnq() {
  _impl_.totalnq_ = int64_t{0};
}
inline int64_t CostAggregation::_internal_totalnq() const {
  return _impl_.totalnq_;
}
inline int64_t CostAggregation::totalnq() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CostAggregation.totalNQ)
  return _internal_totalnq();
}
inline void CostAggregation::_internal_set_totalnq(int64_t value) {
  
  _impl_.totalnq_ = value;
}
inline void CostAggregation::set_totalnq(int64_t value) {
  _internal_set_totalnq(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CostAggregation.totalNQ)
}

// -------------------------------------------------------------------

// RetrieveRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool RetrieveRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool RetrieveRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& RetrieveRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& RetrieveRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.base)
  return _internal_base();
}
inline void RetrieveRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.RetrieveRequest.base)
}
inline ::milvus::proto::common::MsgBase* RetrieveRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* RetrieveRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.RetrieveRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* RetrieveRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* RetrieveRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.RetrieveRequest.base)
  return _msg;
}
inline void RetrieveRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.RetrieveRequest.base)
}

// int64 reqID = 2;
inline void RetrieveRequest::clear_reqid() {
  _impl_.reqid_ = int64_t{0};
}
inline int64_t RetrieveRequest::_internal_reqid() const {
  return _impl_.reqid_;
}
inline int64_t RetrieveRequest::reqid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.reqID)
  return _internal_reqid();
}
inline void RetrieveRequest::_internal_set_reqid(int64_t value) {
  
  _impl_.reqid_ = value;
}
inline void RetrieveRequest::set_reqid(int64_t value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveRequest.reqID)
}

// int64 dbID = 3;
inline void RetrieveRequest::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t RetrieveRequest::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t RetrieveRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.dbID)
  return _internal_dbid();
}
inline void RetrieveRequest::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void RetrieveRequest::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveRequest.dbID)
}

// int64 collectionID = 4;
inline void RetrieveRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t RetrieveRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t RetrieveRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.collectionID)
  return _internal_collectionid();
}
inline void RetrieveRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void RetrieveRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveRequest.collectionID)
}

// repeated int64 partitionIDs = 5;
inline int RetrieveRequest::_internal_partitionids_size() const {
  return _impl_.partitionids_.size();
}
inline int RetrieveRequest::partitionids_size() const {
  return _internal_partitionids_size();
}
inline void RetrieveRequest::clear_partitionids() {
  _impl_.partitionids_.Clear();
}
inline int64_t RetrieveRequest::_internal_partitionids(int index) const {
  return _impl_.partitionids_.Get(index);
}
inline int64_t RetrieveRequest::partitionids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.partitionIDs)
  return _internal_partitionids(index);
}
inline void RetrieveRequest::set_partitionids(int index, int64_t value) {
  _impl_.partitionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveRequest.partitionIDs)
}
inline void RetrieveRequest::_internal_add_partitionids(int64_t value) {
  _impl_.partitionids_.Add(value);
}
inline void RetrieveRequest::add_partitionids(int64_t value) {
  _internal_add_partitionids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.RetrieveRequest.partitionIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RetrieveRequest::_internal_partitionids() const {
  return _impl_.partitionids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RetrieveRequest::partitionids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.RetrieveRequest.partitionIDs)
  return _internal_partitionids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RetrieveRequest::_internal_mutable_partitionids() {
  return &_impl_.partitionids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RetrieveRequest::mutable_partitionids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.RetrieveRequest.partitionIDs)
  return _internal_mutable_partitionids();
}

// bytes serialized_expr_plan = 6;
inline void RetrieveRequest::clear_serialized_expr_plan() {
  _impl_.serialized_expr_plan_.ClearToEmpty();
}
inline const std::string& RetrieveRequest::serialized_expr_plan() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.serialized_expr_plan)
  return _internal_serialized_expr_plan();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RetrieveRequest::set_serialized_expr_plan(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serialized_expr_plan_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveRequest.serialized_expr_plan)
}
inline std::string* RetrieveRequest::mutable_serialized_expr_plan() {
  std::string* _s = _internal_mutable_serialized_expr_plan();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.RetrieveRequest.serialized_expr_plan)
  return _s;
}
inline const std::string& RetrieveRequest::_internal_serialized_expr_plan() const {
  return _impl_.serialized_expr_plan_.Get();
}
inline void RetrieveRequest::_internal_set_serialized_expr_plan(const std::string& value) {
  
  _impl_.serialized_expr_plan_.Set(value, GetArenaForAllocation());
}
inline std::string* RetrieveRequest::_internal_mutable_serialized_expr_plan() {
  
  return _impl_.serialized_expr_plan_.Mutable(GetArenaForAllocation());
}
inline std::string* RetrieveRequest::release_serialized_expr_plan() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.RetrieveRequest.serialized_expr_plan)
  return _impl_.serialized_expr_plan_.Release();
}
inline void RetrieveRequest::set_allocated_serialized_expr_plan(std::string* serialized_expr_plan) {
  if (serialized_expr_plan != nullptr) {
    
  } else {
    
  }
  _impl_.serialized_expr_plan_.SetAllocated(serialized_expr_plan, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serialized_expr_plan_.IsDefault()) {
    _impl_.serialized_expr_plan_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.RetrieveRequest.serialized_expr_plan)
}

// repeated int64 output_fields_id = 7;
inline int RetrieveRequest::_internal_output_fields_id_size() const {
  return _impl_.output_fields_id_.size();
}
inline int RetrieveRequest::output_fields_id_size() const {
  return _internal_output_fields_id_size();
}
inline void RetrieveRequest::clear_output_fields_id() {
  _impl_.output_fields_id_.Clear();
}
inline int64_t RetrieveRequest::_internal_output_fields_id(int index) const {
  return _impl_.output_fields_id_.Get(index);
}
inline int64_t RetrieveRequest::output_fields_id(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.output_fields_id)
  return _internal_output_fields_id(index);
}
inline void RetrieveRequest::set_output_fields_id(int index, int64_t value) {
  _impl_.output_fields_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveRequest.output_fields_id)
}
inline void RetrieveRequest::_internal_add_output_fields_id(int64_t value) {
  _impl_.output_fields_id_.Add(value);
}
inline void RetrieveRequest::add_output_fields_id(int64_t value) {
  _internal_add_output_fields_id(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.RetrieveRequest.output_fields_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RetrieveRequest::_internal_output_fields_id() const {
  return _impl_.output_fields_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RetrieveRequest::output_fields_id() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.RetrieveRequest.output_fields_id)
  return _internal_output_fields_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RetrieveRequest::_internal_mutable_output_fields_id() {
  return &_impl_.output_fields_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RetrieveRequest::mutable_output_fields_id() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.RetrieveRequest.output_fields_id)
  return _internal_mutable_output_fields_id();
}

// uint64 travel_timestamp = 8;
inline void RetrieveRequest::clear_travel_timestamp() {
  _impl_.travel_timestamp_ = uint64_t{0u};
}
inline uint64_t RetrieveRequest::_internal_travel_timestamp() const {
  return _impl_.travel_timestamp_;
}
inline uint64_t RetrieveRequest::travel_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.travel_timestamp)
  return _internal_travel_timestamp();
}
inline void RetrieveRequest::_internal_set_travel_timestamp(uint64_t value) {
  
  _impl_.travel_timestamp_ = value;
}
inline void RetrieveRequest::set_travel_timestamp(uint64_t value) {
  _internal_set_travel_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveRequest.travel_timestamp)
}

// uint64 guarantee_timestamp = 9;
inline void RetrieveRequest::clear_guarantee_timestamp() {
  _impl_.guarantee_timestamp_ = uint64_t{0u};
}
inline uint64_t RetrieveRequest::_internal_guarantee_timestamp() const {
  return _impl_.guarantee_timestamp_;
}
inline uint64_t RetrieveRequest::guarantee_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.guarantee_timestamp)
  return _internal_guarantee_timestamp();
}
inline void RetrieveRequest::_internal_set_guarantee_timestamp(uint64_t value) {
  
  _impl_.guarantee_timestamp_ = value;
}
inline void RetrieveRequest::set_guarantee_timestamp(uint64_t value) {
  _internal_set_guarantee_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveRequest.guarantee_timestamp)
}

// uint64 timeout_timestamp = 10;
inline void RetrieveRequest::clear_timeout_timestamp() {
  _impl_.timeout_timestamp_ = uint64_t{0u};
}
inline uint64_t RetrieveRequest::_internal_timeout_timestamp() const {
  return _impl_.timeout_timestamp_;
}
inline uint64_t RetrieveRequest::timeout_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.timeout_timestamp)
  return _internal_timeout_timestamp();
}
inline void RetrieveRequest::_internal_set_timeout_timestamp(uint64_t value) {
  
  _impl_.timeout_timestamp_ = value;
}
inline void RetrieveRequest::set_timeout_timestamp(uint64_t value) {
  _internal_set_timeout_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveRequest.timeout_timestamp)
}

// int64 limit = 11;
inline void RetrieveRequest::clear_limit() {
  _impl_.limit_ = int64_t{0};
}
inline int64_t RetrieveRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int64_t RetrieveRequest::limit() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.limit)
  return _internal_limit();
}
inline void RetrieveRequest::_internal_set_limit(int64_t value) {
  
  _impl_.limit_ = value;
}
inline void RetrieveRequest::set_limit(int64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveRequest.limit)
}

// bool ignoreGrowing = 12;
inline void RetrieveRequest::clear_ignoregrowing() {
  _impl_.ignoregrowing_ = false;
}
inline bool RetrieveRequest::_internal_ignoregrowing() const {
  return _impl_.ignoregrowing_;
}
inline bool RetrieveRequest::ignoregrowing() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.ignoreGrowing)
  return _internal_ignoregrowing();
}
inline void RetrieveRequest::_internal_set_ignoregrowing(bool value) {
  
  _impl_.ignoregrowing_ = value;
}
inline void RetrieveRequest::set_ignoregrowing(bool value) {
  _internal_set_ignoregrowing(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveRequest.ignoreGrowing)
}

// bool is_count = 13;
inline void RetrieveRequest::clear_is_count() {
  _impl_.is_count_ = false;
}
inline bool RetrieveRequest::_internal_is_count() const {
  return _impl_.is_count_;
}
inline bool RetrieveRequest::is_count() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.is_count)
  return _internal_is_count();
}
inline void RetrieveRequest::_internal_set_is_count(bool value) {
  
  _impl_.is_count_ = value;
}
inline void RetrieveRequest::set_is_count(bool value) {
  _internal_set_is_count(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveRequest.is_count)
}

// int64 iteration_extension_reduce_rate = 14;
inline void RetrieveRequest::clear_iteration_extension_reduce_rate() {
  _impl_.iteration_extension_reduce_rate_ = int64_t{0};
}
inline int64_t RetrieveRequest::_internal_iteration_extension_reduce_rate() const {
  return _impl_.iteration_extension_reduce_rate_;
}
inline int64_t RetrieveRequest::iteration_extension_reduce_rate() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.iteration_extension_reduce_rate)
  return _internal_iteration_extension_reduce_rate();
}
inline void RetrieveRequest::_internal_set_iteration_extension_reduce_rate(int64_t value) {
  
  _impl_.iteration_extension_reduce_rate_ = value;
}
inline void RetrieveRequest::set_iteration_extension_reduce_rate(int64_t value) {
  _internal_set_iteration_extension_reduce_rate(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveRequest.iteration_extension_reduce_rate)
}

// string username = 15;
inline void RetrieveRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& RetrieveRequest::username() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RetrieveRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveRequest.username)
}
inline std::string* RetrieveRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.RetrieveRequest.username)
  return _s;
}
inline const std::string& RetrieveRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void RetrieveRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* RetrieveRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* RetrieveRequest::release_username() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.RetrieveRequest.username)
  return _impl_.username_.Release();
}
inline void RetrieveRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.RetrieveRequest.username)
}

// -------------------------------------------------------------------

// RetrieveResults

// .milvus.proto.common.MsgBase base = 1;
inline bool RetrieveResults::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool RetrieveResults::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& RetrieveResults::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& RetrieveResults::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveResults.base)
  return _internal_base();
}
inline void RetrieveResults::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.RetrieveResults.base)
}
inline ::milvus::proto::common::MsgBase* RetrieveResults::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* RetrieveResults::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.RetrieveResults.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* RetrieveResults::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* RetrieveResults::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.RetrieveResults.base)
  return _msg;
}
inline void RetrieveResults::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.RetrieveResults.base)
}

// .milvus.proto.common.Status status = 2;
inline bool RetrieveResults::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool RetrieveResults::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& RetrieveResults::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& RetrieveResults::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveResults.status)
  return _internal_status();
}
inline void RetrieveResults::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.RetrieveResults.status)
}
inline ::milvus::proto::common::Status* RetrieveResults::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* RetrieveResults::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.RetrieveResults.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* RetrieveResults::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* RetrieveResults::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.RetrieveResults.status)
  return _msg;
}
inline void RetrieveResults::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.RetrieveResults.status)
}

// int64 reqID = 3;
inline void RetrieveResults::clear_reqid() {
  _impl_.reqid_ = int64_t{0};
}
inline int64_t RetrieveResults::_internal_reqid() const {
  return _impl_.reqid_;
}
inline int64_t RetrieveResults::reqid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveResults.reqID)
  return _internal_reqid();
}
inline void RetrieveResults::_internal_set_reqid(int64_t value) {
  
  _impl_.reqid_ = value;
}
inline void RetrieveResults::set_reqid(int64_t value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveResults.reqID)
}

// .milvus.proto.schema.IDs ids = 4;
inline bool RetrieveResults::_internal_has_ids() const {
  return this != internal_default_instance() && _impl_.ids_ != nullptr;
}
inline bool RetrieveResults::has_ids() const {
  return _internal_has_ids();
}
inline const ::milvus::proto::schema::IDs& RetrieveResults::_internal_ids() const {
  const ::milvus::proto::schema::IDs* p = _impl_.ids_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::schema::IDs&>(
      ::milvus::proto::schema::_IDs_default_instance_);
}
inline const ::milvus::proto::schema::IDs& RetrieveResults::ids() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveResults.ids)
  return _internal_ids();
}
inline void RetrieveResults::unsafe_arena_set_allocated_ids(
    ::milvus::proto::schema::IDs* ids) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ids_);
  }
  _impl_.ids_ = ids;
  if (ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.RetrieveResults.ids)
}
inline ::milvus::proto::schema::IDs* RetrieveResults::release_ids() {
  
  ::milvus::proto::schema::IDs* temp = _impl_.ids_;
  _impl_.ids_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::schema::IDs* RetrieveResults::unsafe_arena_release_ids() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.RetrieveResults.ids)
  
  ::milvus::proto::schema::IDs* temp = _impl_.ids_;
  _impl_.ids_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::IDs* RetrieveResults::_internal_mutable_ids() {
  
  if (_impl_.ids_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::IDs>(GetArenaForAllocation());
    _impl_.ids_ = p;
  }
  return _impl_.ids_;
}
inline ::milvus::proto::schema::IDs* RetrieveResults::mutable_ids() {
  ::milvus::proto::schema::IDs* _msg = _internal_mutable_ids();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.RetrieveResults.ids)
  return _msg;
}
inline void RetrieveResults::set_allocated_ids(::milvus::proto::schema::IDs* ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ids_);
  }
  if (ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ids));
    if (message_arena != submessage_arena) {
      ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ids, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ids_ = ids;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.RetrieveResults.ids)
}

// repeated .milvus.proto.schema.FieldData fields_data = 5;
inline int RetrieveResults::_internal_fields_data_size() const {
  return _impl_.fields_data_.size();
}
inline int RetrieveResults::fields_data_size() const {
  return _internal_fields_data_size();
}
inline ::milvus::proto::schema::FieldData* RetrieveResults::mutable_fields_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.RetrieveResults.fields_data)
  return _impl_.fields_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
RetrieveResults::mutable_fields_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.RetrieveResults.fields_data)
  return &_impl_.fields_data_;
}
inline const ::milvus::proto::schema::FieldData& RetrieveResults::_internal_fields_data(int index) const {
  return _impl_.fields_data_.Get(index);
}
inline const ::milvus::proto::schema::FieldData& RetrieveResults::fields_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveResults.fields_data)
  return _internal_fields_data(index);
}
inline ::milvus::proto::schema::FieldData* RetrieveResults::_internal_add_fields_data() {
  return _impl_.fields_data_.Add();
}
inline ::milvus::proto::schema::FieldData* RetrieveResults::add_fields_data() {
  ::milvus::proto::schema::FieldData* _add = _internal_add_fields_data();
  // @@protoc_insertion_point(field_add:milvus.proto.internal.RetrieveResults.fields_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
RetrieveResults::fields_data() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.RetrieveResults.fields_data)
  return _impl_.fields_data_;
}

// repeated int64 sealed_segmentIDs_retrieved = 6;
inline int RetrieveResults::_internal_sealed_segmentids_retrieved_size() const {
  return _impl_.sealed_segmentids_retrieved_.size();
}
inline int RetrieveResults::sealed_segmentids_retrieved_size() const {
  return _internal_sealed_segmentids_retrieved_size();
}
inline void RetrieveResults::clear_sealed_segmentids_retrieved() {
  _impl_.sealed_segmentids_retrieved_.Clear();
}
inline int64_t RetrieveResults::_internal_sealed_segmentids_retrieved(int index) const {
  return _impl_.sealed_segmentids_retrieved_.Get(index);
}
inline int64_t RetrieveResults::sealed_segmentids_retrieved(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveResults.sealed_segmentIDs_retrieved)
  return _internal_sealed_segmentids_retrieved(index);
}
inline void RetrieveResults::set_sealed_segmentids_retrieved(int index, int64_t value) {
  _impl_.sealed_segmentids_retrieved_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveResults.sealed_segmentIDs_retrieved)
}
inline void RetrieveResults::_internal_add_sealed_segmentids_retrieved(int64_t value) {
  _impl_.sealed_segmentids_retrieved_.Add(value);
}
inline void RetrieveResults::add_sealed_segmentids_retrieved(int64_t value) {
  _internal_add_sealed_segmentids_retrieved(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.RetrieveResults.sealed_segmentIDs_retrieved)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RetrieveResults::_internal_sealed_segmentids_retrieved() const {
  return _impl_.sealed_segmentids_retrieved_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RetrieveResults::sealed_segmentids_retrieved() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.RetrieveResults.sealed_segmentIDs_retrieved)
  return _internal_sealed_segmentids_retrieved();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RetrieveResults::_internal_mutable_sealed_segmentids_retrieved() {
  return &_impl_.sealed_segmentids_retrieved_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RetrieveResults::mutable_sealed_segmentids_retrieved() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.RetrieveResults.sealed_segmentIDs_retrieved)
  return _internal_mutable_sealed_segmentids_retrieved();
}

// repeated string channelIDs_retrieved = 7;
inline int RetrieveResults::_internal_channelids_retrieved_size() const {
  return _impl_.channelids_retrieved_.size();
}
inline int RetrieveResults::channelids_retrieved_size() const {
  return _internal_channelids_retrieved_size();
}
inline void RetrieveResults::clear_channelids_retrieved() {
  _impl_.channelids_retrieved_.Clear();
}
inline std::string* RetrieveResults::add_channelids_retrieved() {
  std::string* _s = _internal_add_channelids_retrieved();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.internal.RetrieveResults.channelIDs_retrieved)
  return _s;
}
inline const std::string& RetrieveResults::_internal_channelids_retrieved(int index) const {
  return _impl_.channelids_retrieved_.Get(index);
}
inline const std::string& RetrieveResults::channelids_retrieved(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveResults.channelIDs_retrieved)
  return _internal_channelids_retrieved(index);
}
inline std::string* RetrieveResults::mutable_channelids_retrieved(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.RetrieveResults.channelIDs_retrieved)
  return _impl_.channelids_retrieved_.Mutable(index);
}
inline void RetrieveResults::set_channelids_retrieved(int index, const std::string& value) {
  _impl_.channelids_retrieved_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveResults.channelIDs_retrieved)
}
inline void RetrieveResults::set_channelids_retrieved(int index, std::string&& value) {
  _impl_.channelids_retrieved_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveResults.channelIDs_retrieved)
}
inline void RetrieveResults::set_channelids_retrieved(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channelids_retrieved_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.internal.RetrieveResults.channelIDs_retrieved)
}
inline void RetrieveResults::set_channelids_retrieved(int index, const char* value, size_t size) {
  _impl_.channelids_retrieved_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.internal.RetrieveResults.channelIDs_retrieved)
}
inline std::string* RetrieveResults::_internal_add_channelids_retrieved() {
  return _impl_.channelids_retrieved_.Add();
}
inline void RetrieveResults::add_channelids_retrieved(const std::string& value) {
  _impl_.channelids_retrieved_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.RetrieveResults.channelIDs_retrieved)
}
inline void RetrieveResults::add_channelids_retrieved(std::string&& value) {
  _impl_.channelids_retrieved_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.internal.RetrieveResults.channelIDs_retrieved)
}
inline void RetrieveResults::add_channelids_retrieved(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channelids_retrieved_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.internal.RetrieveResults.channelIDs_retrieved)
}
inline void RetrieveResults::add_channelids_retrieved(const char* value, size_t size) {
  _impl_.channelids_retrieved_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.internal.RetrieveResults.channelIDs_retrieved)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RetrieveResults::channelids_retrieved() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.RetrieveResults.channelIDs_retrieved)
  return _impl_.channelids_retrieved_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RetrieveResults::mutable_channelids_retrieved() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.RetrieveResults.channelIDs_retrieved)
  return &_impl_.channelids_retrieved_;
}

// repeated int64 global_sealed_segmentIDs = 8;
inline int RetrieveResults::_internal_global_sealed_segmentids_size() const {
  return _impl_.global_sealed_segmentids_.size();
}
inline int RetrieveResults::global_sealed_segmentids_size() const {
  return _internal_global_sealed_segmentids_size();
}
inline void RetrieveResults::clear_global_sealed_segmentids() {
  _impl_.global_sealed_segmentids_.Clear();
}
inline int64_t RetrieveResults::_internal_global_sealed_segmentids(int index) const {
  return _impl_.global_sealed_segmentids_.Get(index);
}
inline int64_t RetrieveResults::global_sealed_segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveResults.global_sealed_segmentIDs)
  return _internal_global_sealed_segmentids(index);
}
inline void RetrieveResults::set_global_sealed_segmentids(int index, int64_t value) {
  _impl_.global_sealed_segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.RetrieveResults.global_sealed_segmentIDs)
}
inline void RetrieveResults::_internal_add_global_sealed_segmentids(int64_t value) {
  _impl_.global_sealed_segmentids_.Add(value);
}
inline void RetrieveResults::add_global_sealed_segmentids(int64_t value) {
  _internal_add_global_sealed_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.RetrieveResults.global_sealed_segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RetrieveResults::_internal_global_sealed_segmentids() const {
  return _impl_.global_sealed_segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RetrieveResults::global_sealed_segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.RetrieveResults.global_sealed_segmentIDs)
  return _internal_global_sealed_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RetrieveResults::_internal_mutable_global_sealed_segmentids() {
  return &_impl_.global_sealed_segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RetrieveResults::mutable_global_sealed_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.RetrieveResults.global_sealed_segmentIDs)
  return _internal_mutable_global_sealed_segmentids();
}

// .milvus.proto.internal.CostAggregation costAggregation = 13;
inline bool RetrieveResults::_internal_has_costaggregation() const {
  return this != internal_default_instance() && _impl_.costaggregation_ != nullptr;
}
inline bool RetrieveResults::has_costaggregation() const {
  return _internal_has_costaggregation();
}
inline void RetrieveResults::clear_costaggregation() {
  if (GetArenaForAllocation() == nullptr && _impl_.costaggregation_ != nullptr) {
    delete _impl_.costaggregation_;
  }
  _impl_.costaggregation_ = nullptr;
}
inline const ::milvus::proto::internal::CostAggregation& RetrieveResults::_internal_costaggregation() const {
  const ::milvus::proto::internal::CostAggregation* p = _impl_.costaggregation_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::internal::CostAggregation&>(
      ::milvus::proto::internal::_CostAggregation_default_instance_);
}
inline const ::milvus::proto::internal::CostAggregation& RetrieveResults::costaggregation() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.RetrieveResults.costAggregation)
  return _internal_costaggregation();
}
inline void RetrieveResults::unsafe_arena_set_allocated_costaggregation(
    ::milvus::proto::internal::CostAggregation* costaggregation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.costaggregation_);
  }
  _impl_.costaggregation_ = costaggregation;
  if (costaggregation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.RetrieveResults.costAggregation)
}
inline ::milvus::proto::internal::CostAggregation* RetrieveResults::release_costaggregation() {
  
  ::milvus::proto::internal::CostAggregation* temp = _impl_.costaggregation_;
  _impl_.costaggregation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::internal::CostAggregation* RetrieveResults::unsafe_arena_release_costaggregation() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.RetrieveResults.costAggregation)
  
  ::milvus::proto::internal::CostAggregation* temp = _impl_.costaggregation_;
  _impl_.costaggregation_ = nullptr;
  return temp;
}
inline ::milvus::proto::internal::CostAggregation* RetrieveResults::_internal_mutable_costaggregation() {
  
  if (_impl_.costaggregation_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::internal::CostAggregation>(GetArenaForAllocation());
    _impl_.costaggregation_ = p;
  }
  return _impl_.costaggregation_;
}
inline ::milvus::proto::internal::CostAggregation* RetrieveResults::mutable_costaggregation() {
  ::milvus::proto::internal::CostAggregation* _msg = _internal_mutable_costaggregation();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.RetrieveResults.costAggregation)
  return _msg;
}
inline void RetrieveResults::set_allocated_costaggregation(::milvus::proto::internal::CostAggregation* costaggregation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.costaggregation_;
  }
  if (costaggregation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(costaggregation);
    if (message_arena != submessage_arena) {
      costaggregation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, costaggregation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.costaggregation_ = costaggregation;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.RetrieveResults.costAggregation)
}

// -------------------------------------------------------------------

// LoadIndex

// .milvus.proto.common.MsgBase base = 1;
inline bool LoadIndex::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool LoadIndex::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& LoadIndex::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& LoadIndex::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.LoadIndex.base)
  return _internal_base();
}
inline void LoadIndex::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.LoadIndex.base)
}
inline ::milvus::proto::common::MsgBase* LoadIndex::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* LoadIndex::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.LoadIndex.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* LoadIndex::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* LoadIndex::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.LoadIndex.base)
  return _msg;
}
inline void LoadIndex::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.LoadIndex.base)
}

// int64 segmentID = 2;
inline void LoadIndex::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t LoadIndex::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t LoadIndex::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.LoadIndex.segmentID)
  return _internal_segmentid();
}
inline void LoadIndex::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void LoadIndex::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.LoadIndex.segmentID)
}

// string fieldName = 3;
inline void LoadIndex::clear_fieldname() {
  _impl_.fieldname_.ClearToEmpty();
}
inline const std::string& LoadIndex::fieldname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.LoadIndex.fieldName)
  return _internal_fieldname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadIndex::set_fieldname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fieldname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.LoadIndex.fieldName)
}
inline std::string* LoadIndex::mutable_fieldname() {
  std::string* _s = _internal_mutable_fieldname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.LoadIndex.fieldName)
  return _s;
}
inline const std::string& LoadIndex::_internal_fieldname() const {
  return _impl_.fieldname_.Get();
}
inline void LoadIndex::_internal_set_fieldname(const std::string& value) {
  
  _impl_.fieldname_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadIndex::_internal_mutable_fieldname() {
  
  return _impl_.fieldname_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadIndex::release_fieldname() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.LoadIndex.fieldName)
  return _impl_.fieldname_.Release();
}
inline void LoadIndex::set_allocated_fieldname(std::string* fieldname) {
  if (fieldname != nullptr) {
    
  } else {
    
  }
  _impl_.fieldname_.SetAllocated(fieldname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fieldname_.IsDefault()) {
    _impl_.fieldname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.LoadIndex.fieldName)
}

// int64 fieldID = 4;
inline void LoadIndex::clear_fieldid() {
  _impl_.fieldid_ = int64_t{0};
}
inline int64_t LoadIndex::_internal_fieldid() const {
  return _impl_.fieldid_;
}
inline int64_t LoadIndex::fieldid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.LoadIndex.fieldID)
  return _internal_fieldid();
}
inline void LoadIndex::_internal_set_fieldid(int64_t value) {
  
  _impl_.fieldid_ = value;
}
inline void LoadIndex::set_fieldid(int64_t value) {
  _internal_set_fieldid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.LoadIndex.fieldID)
}

// repeated string index_paths = 5;
inline int LoadIndex::_internal_index_paths_size() const {
  return _impl_.index_paths_.size();
}
inline int LoadIndex::index_paths_size() const {
  return _internal_index_paths_size();
}
inline void LoadIndex::clear_index_paths() {
  _impl_.index_paths_.Clear();
}
inline std::string* LoadIndex::add_index_paths() {
  std::string* _s = _internal_add_index_paths();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.internal.LoadIndex.index_paths)
  return _s;
}
inline const std::string& LoadIndex::_internal_index_paths(int index) const {
  return _impl_.index_paths_.Get(index);
}
inline const std::string& LoadIndex::index_paths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.LoadIndex.index_paths)
  return _internal_index_paths(index);
}
inline std::string* LoadIndex::mutable_index_paths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.LoadIndex.index_paths)
  return _impl_.index_paths_.Mutable(index);
}
inline void LoadIndex::set_index_paths(int index, const std::string& value) {
  _impl_.index_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.LoadIndex.index_paths)
}
inline void LoadIndex::set_index_paths(int index, std::string&& value) {
  _impl_.index_paths_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.internal.LoadIndex.index_paths)
}
inline void LoadIndex::set_index_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.index_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.internal.LoadIndex.index_paths)
}
inline void LoadIndex::set_index_paths(int index, const char* value, size_t size) {
  _impl_.index_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.internal.LoadIndex.index_paths)
}
inline std::string* LoadIndex::_internal_add_index_paths() {
  return _impl_.index_paths_.Add();
}
inline void LoadIndex::add_index_paths(const std::string& value) {
  _impl_.index_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.LoadIndex.index_paths)
}
inline void LoadIndex::add_index_paths(std::string&& value) {
  _impl_.index_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.internal.LoadIndex.index_paths)
}
inline void LoadIndex::add_index_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.index_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.internal.LoadIndex.index_paths)
}
inline void LoadIndex::add_index_paths(const char* value, size_t size) {
  _impl_.index_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.internal.LoadIndex.index_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LoadIndex::index_paths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.LoadIndex.index_paths)
  return _impl_.index_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LoadIndex::mutable_index_paths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.LoadIndex.index_paths)
  return &_impl_.index_paths_;
}

// repeated .milvus.proto.common.KeyValuePair index_params = 6;
inline int LoadIndex::_internal_index_params_size() const {
  return _impl_.index_params_.size();
}
inline int LoadIndex::index_params_size() const {
  return _internal_index_params_size();
}
inline ::milvus::proto::common::KeyValuePair* LoadIndex::mutable_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.LoadIndex.index_params)
  return _impl_.index_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
LoadIndex::mutable_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.LoadIndex.index_params)
  return &_impl_.index_params_;
}
inline const ::milvus::proto::common::KeyValuePair& LoadIndex::_internal_index_params(int index) const {
  return _impl_.index_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& LoadIndex::index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.LoadIndex.index_params)
  return _internal_index_params(index);
}
inline ::milvus::proto::common::KeyValuePair* LoadIndex::_internal_add_index_params() {
  return _impl_.index_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* LoadIndex::add_index_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_index_params();
  // @@protoc_insertion_point(field_add:milvus.proto.internal.LoadIndex.index_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
LoadIndex::index_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.LoadIndex.index_params)
  return _impl_.index_params_;
}

// -------------------------------------------------------------------

// IndexStats

// repeated .milvus.proto.common.KeyValuePair index_params = 1;
inline int IndexStats::_internal_index_params_size() const {
  return _impl_.index_params_.size();
}
inline int IndexStats::index_params_size() const {
  return _internal_index_params_size();
}
inline ::milvus::proto::common::KeyValuePair* IndexStats::mutable_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.IndexStats.index_params)
  return _impl_.index_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
IndexStats::mutable_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.IndexStats.index_params)
  return &_impl_.index_params_;
}
inline const ::milvus::proto::common::KeyValuePair& IndexStats::_internal_index_params(int index) const {
  return _impl_.index_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& IndexStats::index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.IndexStats.index_params)
  return _internal_index_params(index);
}
inline ::milvus::proto::common::KeyValuePair* IndexStats::_internal_add_index_params() {
  return _impl_.index_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* IndexStats::add_index_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_index_params();
  // @@protoc_insertion_point(field_add:milvus.proto.internal.IndexStats.index_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
IndexStats::index_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.IndexStats.index_params)
  return _impl_.index_params_;
}

// int64 num_related_segments = 2;
inline void IndexStats::clear_num_related_segments() {
  _impl_.num_related_segments_ = int64_t{0};
}
inline int64_t IndexStats::_internal_num_related_segments() const {
  return _impl_.num_related_segments_;
}
inline int64_t IndexStats::num_related_segments() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.IndexStats.num_related_segments)
  return _internal_num_related_segments();
}
inline void IndexStats::_internal_set_num_related_segments(int64_t value) {
  
  _impl_.num_related_segments_ = value;
}
inline void IndexStats::set_num_related_segments(int64_t value) {
  _internal_set_num_related_segments(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.IndexStats.num_related_segments)
}

// -------------------------------------------------------------------

// FieldStats

// int64 collectionID = 1;
inline void FieldStats::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t FieldStats::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t FieldStats::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.FieldStats.collectionID)
  return _internal_collectionid();
}
inline void FieldStats::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void FieldStats::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.FieldStats.collectionID)
}

// int64 fieldID = 2;
inline void FieldStats::clear_fieldid() {
  _impl_.fieldid_ = int64_t{0};
}
inline int64_t FieldStats::_internal_fieldid() const {
  return _impl_.fieldid_;
}
inline int64_t FieldStats::fieldid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.FieldStats.fieldID)
  return _internal_fieldid();
}
inline void FieldStats::_internal_set_fieldid(int64_t value) {
  
  _impl_.fieldid_ = value;
}
inline void FieldStats::set_fieldid(int64_t value) {
  _internal_set_fieldid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.FieldStats.fieldID)
}

// repeated .milvus.proto.internal.IndexStats index_stats = 3;
inline int FieldStats::_internal_index_stats_size() const {
  return _impl_.index_stats_.size();
}
inline int FieldStats::index_stats_size() const {
  return _internal_index_stats_size();
}
inline void FieldStats::clear_index_stats() {
  _impl_.index_stats_.Clear();
}
inline ::milvus::proto::internal::IndexStats* FieldStats::mutable_index_stats(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.FieldStats.index_stats)
  return _impl_.index_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::internal::IndexStats >*
FieldStats::mutable_index_stats() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.FieldStats.index_stats)
  return &_impl_.index_stats_;
}
inline const ::milvus::proto::internal::IndexStats& FieldStats::_internal_index_stats(int index) const {
  return _impl_.index_stats_.Get(index);
}
inline const ::milvus::proto::internal::IndexStats& FieldStats::index_stats(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.FieldStats.index_stats)
  return _internal_index_stats(index);
}
inline ::milvus::proto::internal::IndexStats* FieldStats::_internal_add_index_stats() {
  return _impl_.index_stats_.Add();
}
inline ::milvus::proto::internal::IndexStats* FieldStats::add_index_stats() {
  ::milvus::proto::internal::IndexStats* _add = _internal_add_index_stats();
  // @@protoc_insertion_point(field_add:milvus.proto.internal.FieldStats.index_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::internal::IndexStats >&
FieldStats::index_stats() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.FieldStats.index_stats)
  return _impl_.index_stats_;
}

// -------------------------------------------------------------------

// SegmentStats

// int64 segmentID = 1;
inline void SegmentStats::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t SegmentStats::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t SegmentStats::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SegmentStats.segmentID)
  return _internal_segmentid();
}
inline void SegmentStats::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void SegmentStats::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SegmentStats.segmentID)
}

// int64 memory_size = 2;
inline void SegmentStats::clear_memory_size() {
  _impl_.memory_size_ = int64_t{0};
}
inline int64_t SegmentStats::_internal_memory_size() const {
  return _impl_.memory_size_;
}
inline int64_t SegmentStats::memory_size() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SegmentStats.memory_size)
  return _internal_memory_size();
}
inline void SegmentStats::_internal_set_memory_size(int64_t value) {
  
  _impl_.memory_size_ = value;
}
inline void SegmentStats::set_memory_size(int64_t value) {
  _internal_set_memory_size(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SegmentStats.memory_size)
}

// int64 num_rows = 3;
inline void SegmentStats::clear_num_rows() {
  _impl_.num_rows_ = int64_t{0};
}
inline int64_t SegmentStats::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline int64_t SegmentStats::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SegmentStats.num_rows)
  return _internal_num_rows();
}
inline void SegmentStats::_internal_set_num_rows(int64_t value) {
  
  _impl_.num_rows_ = value;
}
inline void SegmentStats::set_num_rows(int64_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SegmentStats.num_rows)
}

// bool recently_modified = 4;
inline void SegmentStats::clear_recently_modified() {
  _impl_.recently_modified_ = false;
}
inline bool SegmentStats::_internal_recently_modified() const {
  return _impl_.recently_modified_;
}
inline bool SegmentStats::recently_modified() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.SegmentStats.recently_modified)
  return _internal_recently_modified();
}
inline void SegmentStats::_internal_set_recently_modified(bool value) {
  
  _impl_.recently_modified_ = value;
}
inline void SegmentStats::set_recently_modified(bool value) {
  _internal_set_recently_modified(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.SegmentStats.recently_modified)
}

// -------------------------------------------------------------------

// ChannelTimeTickMsg

// .milvus.proto.common.MsgBase base = 1;
inline bool ChannelTimeTickMsg::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ChannelTimeTickMsg::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ChannelTimeTickMsg::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ChannelTimeTickMsg::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.ChannelTimeTickMsg.base)
  return _internal_base();
}
inline void ChannelTimeTickMsg::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.ChannelTimeTickMsg.base)
}
inline ::milvus::proto::common::MsgBase* ChannelTimeTickMsg::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ChannelTimeTickMsg::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.ChannelTimeTickMsg.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ChannelTimeTickMsg::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ChannelTimeTickMsg::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.ChannelTimeTickMsg.base)
  return _msg;
}
inline void ChannelTimeTickMsg::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.ChannelTimeTickMsg.base)
}

// repeated string channelNames = 2;
inline int ChannelTimeTickMsg::_internal_channelnames_size() const {
  return _impl_.channelnames_.size();
}
inline int ChannelTimeTickMsg::channelnames_size() const {
  return _internal_channelnames_size();
}
inline void ChannelTimeTickMsg::clear_channelnames() {
  _impl_.channelnames_.Clear();
}
inline std::string* ChannelTimeTickMsg::add_channelnames() {
  std::string* _s = _internal_add_channelnames();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.internal.ChannelTimeTickMsg.channelNames)
  return _s;
}
inline const std::string& ChannelTimeTickMsg::_internal_channelnames(int index) const {
  return _impl_.channelnames_.Get(index);
}
inline const std::string& ChannelTimeTickMsg::channelnames(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.ChannelTimeTickMsg.channelNames)
  return _internal_channelnames(index);
}
inline std::string* ChannelTimeTickMsg::mutable_channelnames(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.ChannelTimeTickMsg.channelNames)
  return _impl_.channelnames_.Mutable(index);
}
inline void ChannelTimeTickMsg::set_channelnames(int index, const std::string& value) {
  _impl_.channelnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.ChannelTimeTickMsg.channelNames)
}
inline void ChannelTimeTickMsg::set_channelnames(int index, std::string&& value) {
  _impl_.channelnames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.internal.ChannelTimeTickMsg.channelNames)
}
inline void ChannelTimeTickMsg::set_channelnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channelnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.internal.ChannelTimeTickMsg.channelNames)
}
inline void ChannelTimeTickMsg::set_channelnames(int index, const char* value, size_t size) {
  _impl_.channelnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.internal.ChannelTimeTickMsg.channelNames)
}
inline std::string* ChannelTimeTickMsg::_internal_add_channelnames() {
  return _impl_.channelnames_.Add();
}
inline void ChannelTimeTickMsg::add_channelnames(const std::string& value) {
  _impl_.channelnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.ChannelTimeTickMsg.channelNames)
}
inline void ChannelTimeTickMsg::add_channelnames(std::string&& value) {
  _impl_.channelnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.internal.ChannelTimeTickMsg.channelNames)
}
inline void ChannelTimeTickMsg::add_channelnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channelnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.internal.ChannelTimeTickMsg.channelNames)
}
inline void ChannelTimeTickMsg::add_channelnames(const char* value, size_t size) {
  _impl_.channelnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.internal.ChannelTimeTickMsg.channelNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChannelTimeTickMsg::channelnames() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.ChannelTimeTickMsg.channelNames)
  return _impl_.channelnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChannelTimeTickMsg::mutable_channelnames() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.ChannelTimeTickMsg.channelNames)
  return &_impl_.channelnames_;
}

// repeated uint64 timestamps = 3;
inline int ChannelTimeTickMsg::_internal_timestamps_size() const {
  return _impl_.timestamps_.size();
}
inline int ChannelTimeTickMsg::timestamps_size() const {
  return _internal_timestamps_size();
}
inline void ChannelTimeTickMsg::clear_timestamps() {
  _impl_.timestamps_.Clear();
}
inline uint64_t ChannelTimeTickMsg::_internal_timestamps(int index) const {
  return _impl_.timestamps_.Get(index);
}
inline uint64_t ChannelTimeTickMsg::timestamps(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.ChannelTimeTickMsg.timestamps)
  return _internal_timestamps(index);
}
inline void ChannelTimeTickMsg::set_timestamps(int index, uint64_t value) {
  _impl_.timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.ChannelTimeTickMsg.timestamps)
}
inline void ChannelTimeTickMsg::_internal_add_timestamps(uint64_t value) {
  _impl_.timestamps_.Add(value);
}
inline void ChannelTimeTickMsg::add_timestamps(uint64_t value) {
  _internal_add_timestamps(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.ChannelTimeTickMsg.timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ChannelTimeTickMsg::_internal_timestamps() const {
  return _impl_.timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ChannelTimeTickMsg::timestamps() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.ChannelTimeTickMsg.timestamps)
  return _internal_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ChannelTimeTickMsg::_internal_mutable_timestamps() {
  return &_impl_.timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ChannelTimeTickMsg::mutable_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.ChannelTimeTickMsg.timestamps)
  return _internal_mutable_timestamps();
}

// uint64 default_timestamp = 4;
inline void ChannelTimeTickMsg::clear_default_timestamp() {
  _impl_.default_timestamp_ = uint64_t{0u};
}
inline uint64_t ChannelTimeTickMsg::_internal_default_timestamp() const {
  return _impl_.default_timestamp_;
}
inline uint64_t ChannelTimeTickMsg::default_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.ChannelTimeTickMsg.default_timestamp)
  return _internal_default_timestamp();
}
inline void ChannelTimeTickMsg::_internal_set_default_timestamp(uint64_t value) {
  
  _impl_.default_timestamp_ = value;
}
inline void ChannelTimeTickMsg::set_default_timestamp(uint64_t value) {
  _internal_set_default_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.ChannelTimeTickMsg.default_timestamp)
}

// -------------------------------------------------------------------

// CredentialInfo

// string username = 1;
inline void CredentialInfo::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& CredentialInfo::username() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CredentialInfo.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CredentialInfo::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CredentialInfo.username)
}
inline std::string* CredentialInfo::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.CredentialInfo.username)
  return _s;
}
inline const std::string& CredentialInfo::_internal_username() const {
  return _impl_.username_.Get();
}
inline void CredentialInfo::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* CredentialInfo::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* CredentialInfo::release_username() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.CredentialInfo.username)
  return _impl_.username_.Release();
}
inline void CredentialInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.CredentialInfo.username)
}

// string encrypted_password = 2;
inline void CredentialInfo::clear_encrypted_password() {
  _impl_.encrypted_password_.ClearToEmpty();
}
inline const std::string& CredentialInfo::encrypted_password() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CredentialInfo.encrypted_password)
  return _internal_encrypted_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CredentialInfo::set_encrypted_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encrypted_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CredentialInfo.encrypted_password)
}
inline std::string* CredentialInfo::mutable_encrypted_password() {
  std::string* _s = _internal_mutable_encrypted_password();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.CredentialInfo.encrypted_password)
  return _s;
}
inline const std::string& CredentialInfo::_internal_encrypted_password() const {
  return _impl_.encrypted_password_.Get();
}
inline void CredentialInfo::_internal_set_encrypted_password(const std::string& value) {
  
  _impl_.encrypted_password_.Set(value, GetArenaForAllocation());
}
inline std::string* CredentialInfo::_internal_mutable_encrypted_password() {
  
  return _impl_.encrypted_password_.Mutable(GetArenaForAllocation());
}
inline std::string* CredentialInfo::release_encrypted_password() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.CredentialInfo.encrypted_password)
  return _impl_.encrypted_password_.Release();
}
inline void CredentialInfo::set_allocated_encrypted_password(std::string* encrypted_password) {
  if (encrypted_password != nullptr) {
    
  } else {
    
  }
  _impl_.encrypted_password_.SetAllocated(encrypted_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encrypted_password_.IsDefault()) {
    _impl_.encrypted_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.CredentialInfo.encrypted_password)
}

// string tenant = 3;
inline void CredentialInfo::clear_tenant() {
  _impl_.tenant_.ClearToEmpty();
}
inline const std::string& CredentialInfo::tenant() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CredentialInfo.tenant)
  return _internal_tenant();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CredentialInfo::set_tenant(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tenant_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CredentialInfo.tenant)
}
inline std::string* CredentialInfo::mutable_tenant() {
  std::string* _s = _internal_mutable_tenant();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.CredentialInfo.tenant)
  return _s;
}
inline const std::string& CredentialInfo::_internal_tenant() const {
  return _impl_.tenant_.Get();
}
inline void CredentialInfo::_internal_set_tenant(const std::string& value) {
  
  _impl_.tenant_.Set(value, GetArenaForAllocation());
}
inline std::string* CredentialInfo::_internal_mutable_tenant() {
  
  return _impl_.tenant_.Mutable(GetArenaForAllocation());
}
inline std::string* CredentialInfo::release_tenant() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.CredentialInfo.tenant)
  return _impl_.tenant_.Release();
}
inline void CredentialInfo::set_allocated_tenant(std::string* tenant) {
  if (tenant != nullptr) {
    
  } else {
    
  }
  _impl_.tenant_.SetAllocated(tenant, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tenant_.IsDefault()) {
    _impl_.tenant_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.CredentialInfo.tenant)
}

// bool is_super = 4;
inline void CredentialInfo::clear_is_super() {
  _impl_.is_super_ = false;
}
inline bool CredentialInfo::_internal_is_super() const {
  return _impl_.is_super_;
}
inline bool CredentialInfo::is_super() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CredentialInfo.is_super)
  return _internal_is_super();
}
inline void CredentialInfo::_internal_set_is_super(bool value) {
  
  _impl_.is_super_ = value;
}
inline void CredentialInfo::set_is_super(bool value) {
  _internal_set_is_super(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CredentialInfo.is_super)
}

// string sha256_password = 5;
inline void CredentialInfo::clear_sha256_password() {
  _impl_.sha256_password_.ClearToEmpty();
}
inline const std::string& CredentialInfo::sha256_password() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.CredentialInfo.sha256_password)
  return _internal_sha256_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CredentialInfo::set_sha256_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sha256_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.CredentialInfo.sha256_password)
}
inline std::string* CredentialInfo::mutable_sha256_password() {
  std::string* _s = _internal_mutable_sha256_password();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.CredentialInfo.sha256_password)
  return _s;
}
inline const std::string& CredentialInfo::_internal_sha256_password() const {
  return _impl_.sha256_password_.Get();
}
inline void CredentialInfo::_internal_set_sha256_password(const std::string& value) {
  
  _impl_.sha256_password_.Set(value, GetArenaForAllocation());
}
inline std::string* CredentialInfo::_internal_mutable_sha256_password() {
  
  return _impl_.sha256_password_.Mutable(GetArenaForAllocation());
}
inline std::string* CredentialInfo::release_sha256_password() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.CredentialInfo.sha256_password)
  return _impl_.sha256_password_.Release();
}
inline void CredentialInfo::set_allocated_sha256_password(std::string* sha256_password) {
  if (sha256_password != nullptr) {
    
  } else {
    
  }
  _impl_.sha256_password_.SetAllocated(sha256_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sha256_password_.IsDefault()) {
    _impl_.sha256_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.CredentialInfo.sha256_password)
}

// -------------------------------------------------------------------

// ListPolicyRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ListPolicyRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ListPolicyRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ListPolicyRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ListPolicyRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.ListPolicyRequest.base)
  return _internal_base();
}
inline void ListPolicyRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.ListPolicyRequest.base)
}
inline ::milvus::proto::common::MsgBase* ListPolicyRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ListPolicyRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.ListPolicyRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ListPolicyRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ListPolicyRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.ListPolicyRequest.base)
  return _msg;
}
inline void ListPolicyRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.ListPolicyRequest.base)
}

// -------------------------------------------------------------------

// ListPolicyResponse

// .milvus.proto.common.Status status = 1;
inline bool ListPolicyResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ListPolicyResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ListPolicyResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ListPolicyResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.ListPolicyResponse.status)
  return _internal_status();
}
inline void ListPolicyResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.ListPolicyResponse.status)
}
inline ::milvus::proto::common::Status* ListPolicyResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ListPolicyResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.ListPolicyResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ListPolicyResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ListPolicyResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.ListPolicyResponse.status)
  return _msg;
}
inline void ListPolicyResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.ListPolicyResponse.status)
}

// repeated string policy_infos = 2;
inline int ListPolicyResponse::_internal_policy_infos_size() const {
  return _impl_.policy_infos_.size();
}
inline int ListPolicyResponse::policy_infos_size() const {
  return _internal_policy_infos_size();
}
inline void ListPolicyResponse::clear_policy_infos() {
  _impl_.policy_infos_.Clear();
}
inline std::string* ListPolicyResponse::add_policy_infos() {
  std::string* _s = _internal_add_policy_infos();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.internal.ListPolicyResponse.policy_infos)
  return _s;
}
inline const std::string& ListPolicyResponse::_internal_policy_infos(int index) const {
  return _impl_.policy_infos_.Get(index);
}
inline const std::string& ListPolicyResponse::policy_infos(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.ListPolicyResponse.policy_infos)
  return _internal_policy_infos(index);
}
inline std::string* ListPolicyResponse::mutable_policy_infos(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.ListPolicyResponse.policy_infos)
  return _impl_.policy_infos_.Mutable(index);
}
inline void ListPolicyResponse::set_policy_infos(int index, const std::string& value) {
  _impl_.policy_infos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.ListPolicyResponse.policy_infos)
}
inline void ListPolicyResponse::set_policy_infos(int index, std::string&& value) {
  _impl_.policy_infos_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.internal.ListPolicyResponse.policy_infos)
}
inline void ListPolicyResponse::set_policy_infos(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.policy_infos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.internal.ListPolicyResponse.policy_infos)
}
inline void ListPolicyResponse::set_policy_infos(int index, const char* value, size_t size) {
  _impl_.policy_infos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.internal.ListPolicyResponse.policy_infos)
}
inline std::string* ListPolicyResponse::_internal_add_policy_infos() {
  return _impl_.policy_infos_.Add();
}
inline void ListPolicyResponse::add_policy_infos(const std::string& value) {
  _impl_.policy_infos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.ListPolicyResponse.policy_infos)
}
inline void ListPolicyResponse::add_policy_infos(std::string&& value) {
  _impl_.policy_infos_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.internal.ListPolicyResponse.policy_infos)
}
inline void ListPolicyResponse::add_policy_infos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.policy_infos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.internal.ListPolicyResponse.policy_infos)
}
inline void ListPolicyResponse::add_policy_infos(const char* value, size_t size) {
  _impl_.policy_infos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.internal.ListPolicyResponse.policy_infos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListPolicyResponse::policy_infos() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.ListPolicyResponse.policy_infos)
  return _impl_.policy_infos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListPolicyResponse::mutable_policy_infos() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.ListPolicyResponse.policy_infos)
  return &_impl_.policy_infos_;
}

// repeated string user_roles = 3;
inline int ListPolicyResponse::_internal_user_roles_size() const {
  return _impl_.user_roles_.size();
}
inline int ListPolicyResponse::user_roles_size() const {
  return _internal_user_roles_size();
}
inline void ListPolicyResponse::clear_user_roles() {
  _impl_.user_roles_.Clear();
}
inline std::string* ListPolicyResponse::add_user_roles() {
  std::string* _s = _internal_add_user_roles();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.internal.ListPolicyResponse.user_roles)
  return _s;
}
inline const std::string& ListPolicyResponse::_internal_user_roles(int index) const {
  return _impl_.user_roles_.Get(index);
}
inline const std::string& ListPolicyResponse::user_roles(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.ListPolicyResponse.user_roles)
  return _internal_user_roles(index);
}
inline std::string* ListPolicyResponse::mutable_user_roles(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.ListPolicyResponse.user_roles)
  return _impl_.user_roles_.Mutable(index);
}
inline void ListPolicyResponse::set_user_roles(int index, const std::string& value) {
  _impl_.user_roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.ListPolicyResponse.user_roles)
}
inline void ListPolicyResponse::set_user_roles(int index, std::string&& value) {
  _impl_.user_roles_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.internal.ListPolicyResponse.user_roles)
}
inline void ListPolicyResponse::set_user_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.user_roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.internal.ListPolicyResponse.user_roles)
}
inline void ListPolicyResponse::set_user_roles(int index, const char* value, size_t size) {
  _impl_.user_roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.internal.ListPolicyResponse.user_roles)
}
inline std::string* ListPolicyResponse::_internal_add_user_roles() {
  return _impl_.user_roles_.Add();
}
inline void ListPolicyResponse::add_user_roles(const std::string& value) {
  _impl_.user_roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.internal.ListPolicyResponse.user_roles)
}
inline void ListPolicyResponse::add_user_roles(std::string&& value) {
  _impl_.user_roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.internal.ListPolicyResponse.user_roles)
}
inline void ListPolicyResponse::add_user_roles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.user_roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.internal.ListPolicyResponse.user_roles)
}
inline void ListPolicyResponse::add_user_roles(const char* value, size_t size) {
  _impl_.user_roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.internal.ListPolicyResponse.user_roles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListPolicyResponse::user_roles() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.ListPolicyResponse.user_roles)
  return _impl_.user_roles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListPolicyResponse::mutable_user_roles() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.ListPolicyResponse.user_roles)
  return &_impl_.user_roles_;
}

// -------------------------------------------------------------------

// ShowConfigurationsRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ShowConfigurationsRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ShowConfigurationsRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ShowConfigurationsRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ShowConfigurationsRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.ShowConfigurationsRequest.base)
  return _internal_base();
}
inline void ShowConfigurationsRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.ShowConfigurationsRequest.base)
}
inline ::milvus::proto::common::MsgBase* ShowConfigurationsRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* ShowConfigurationsRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.ShowConfigurationsRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ShowConfigurationsRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* ShowConfigurationsRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.ShowConfigurationsRequest.base)
  return _msg;
}
inline void ShowConfigurationsRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.ShowConfigurationsRequest.base)
}

// string pattern = 2;
inline void ShowConfigurationsRequest::clear_pattern() {
  _impl_.pattern_.ClearToEmpty();
}
inline const std::string& ShowConfigurationsRequest::pattern() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.ShowConfigurationsRequest.pattern)
  return _internal_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShowConfigurationsRequest::set_pattern(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pattern_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.internal.ShowConfigurationsRequest.pattern)
}
inline std::string* ShowConfigurationsRequest::mutable_pattern() {
  std::string* _s = _internal_mutable_pattern();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.ShowConfigurationsRequest.pattern)
  return _s;
}
inline const std::string& ShowConfigurationsRequest::_internal_pattern() const {
  return _impl_.pattern_.Get();
}
inline void ShowConfigurationsRequest::_internal_set_pattern(const std::string& value) {
  
  _impl_.pattern_.Set(value, GetArenaForAllocation());
}
inline std::string* ShowConfigurationsRequest::_internal_mutable_pattern() {
  
  return _impl_.pattern_.Mutable(GetArenaForAllocation());
}
inline std::string* ShowConfigurationsRequest::release_pattern() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.ShowConfigurationsRequest.pattern)
  return _impl_.pattern_.Release();
}
inline void ShowConfigurationsRequest::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    
  } else {
    
  }
  _impl_.pattern_.SetAllocated(pattern, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pattern_.IsDefault()) {
    _impl_.pattern_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.ShowConfigurationsRequest.pattern)
}

// -------------------------------------------------------------------

// ShowConfigurationsResponse

// .milvus.proto.common.Status status = 1;
inline bool ShowConfigurationsResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ShowConfigurationsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ShowConfigurationsResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::Status&>(
      ::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ShowConfigurationsResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.ShowConfigurationsResponse.status)
  return _internal_status();
}
inline void ShowConfigurationsResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.internal.ShowConfigurationsResponse.status)
}
inline ::milvus::proto::common::Status* ShowConfigurationsResponse::release_status() {
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::Status* ShowConfigurationsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.internal.ShowConfigurationsResponse.status)
  
  ::milvus::proto::common::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ShowConfigurationsResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::milvus::proto::common::Status* ShowConfigurationsResponse::mutable_status() {
  ::milvus::proto::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.ShowConfigurationsResponse.status)
  return _msg;
}
inline void ShowConfigurationsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.internal.ShowConfigurationsResponse.status)
}

// repeated .milvus.proto.common.KeyValuePair configuations = 2;
inline int ShowConfigurationsResponse::_internal_configuations_size() const {
  return _impl_.configuations_.size();
}
inline int ShowConfigurationsResponse::configuations_size() const {
  return _internal_configuations_size();
}
inline ::milvus::proto::common::KeyValuePair* ShowConfigurationsResponse::mutable_configuations(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.internal.ShowConfigurationsResponse.configuations)
  return _impl_.configuations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
ShowConfigurationsResponse::mutable_configuations() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.internal.ShowConfigurationsResponse.configuations)
  return &_impl_.configuations_;
}
inline const ::milvus::proto::common::KeyValuePair& ShowConfigurationsResponse::_internal_configuations(int index) const {
  return _impl_.configuations_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& ShowConfigurationsResponse::configuations(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.ShowConfigurationsResponse.configuations)
  return _internal_configuations(index);
}
inline ::milvus::proto::common::KeyValuePair* ShowConfigurationsResponse::_internal_add_configuations() {
  return _impl_.configuations_.Add();
}
inline ::milvus::proto::common::KeyValuePair* ShowConfigurationsResponse::add_configuations() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_configuations();
  // @@protoc_insertion_point(field_add:milvus.proto.internal.ShowConfigurationsResponse.configuations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
ShowConfigurationsResponse::configuations() const {
  // @@protoc_insertion_point(field_list:milvus.proto.internal.ShowConfigurationsResponse.configuations)
  return _impl_.configuations_;
}

// -------------------------------------------------------------------

// Rate

// .milvus.proto.internal.RateType rt = 1;
inline void Rate::clear_rt() {
  _impl_.rt_ = 0;
}
inline ::milvus::proto::internal::RateType Rate::_internal_rt() const {
  return static_cast< ::milvus::proto::internal::RateType >(_impl_.rt_);
}
inline ::milvus::proto::internal::RateType Rate::rt() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.Rate.rt)
  return _internal_rt();
}
inline void Rate::_internal_set_rt(::milvus::proto::internal::RateType value) {
  
  _impl_.rt_ = value;
}
inline void Rate::set_rt(::milvus::proto::internal::RateType value) {
  _internal_set_rt(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.Rate.rt)
}

// double r = 2;
inline void Rate::clear_r() {
  _impl_.r_ = 0;
}
inline double Rate::_internal_r() const {
  return _impl_.r_;
}
inline double Rate::r() const {
  // @@protoc_insertion_point(field_get:milvus.proto.internal.Rate.r)
  return _internal_r();
}
inline void Rate::_internal_set_r(double value) {
  
  _impl_.r_ = value;
}
inline void Rate::set_r(double value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:milvus.proto.internal.Rate.r)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace proto
}  // namespace milvus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::milvus::proto::internal::RateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::internal::RateType>() {
  return ::milvus::proto::internal::RateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_internal_2eproto
