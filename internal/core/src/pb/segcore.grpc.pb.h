// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: segcore.proto
#ifndef GRPC_segcore_2eproto__INCLUDED
#define GRPC_segcore_2eproto__INCLUDED

#include "segcore.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace milvus {
namespace proto {
namespace segcore {

class Segcore final {
 public:
  static constexpr char const* service_full_name() {
    return "milvus.proto.segcore.Segcore";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::milvus::proto::milvus::ComponentStates* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ComponentStates>> AsyncGetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ComponentStates>>(AsyncGetComponentStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ComponentStates>> PrepareAsyncGetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ComponentStates>>(PrepareAsyncGetComponentStatesRaw(context, request, cq));
    }
    virtual ::grpc::Status NewCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncNewCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncNewCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncNewCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncNewCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncDeleteCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncDeleteCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncDeleteCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncDeleteCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncLoadSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncLoadSegmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncLoadSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncLoadSegmentsRaw(context, request, cq));
    }
    virtual ::grpc::Status ReleaseSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncReleaseSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncReleaseSegmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncReleaseSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncReleaseSegmentsRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateSegmentIndex(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncUpdateSegmentIndex(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncUpdateSegmentIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncUpdateSegmentIndex(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncUpdateSegmentIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status SearchSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest& request, ::milvus::proto::internal::SearchResults* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::internal::SearchResults>> AsyncSearchSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::internal::SearchResults>>(AsyncSearchSegmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::internal::SearchResults>> PrepareAsyncSearchSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::internal::SearchResults>>(PrepareAsyncSearchSegmentsRaw(context, request, cq));
    }
    virtual ::grpc::Status QuerySegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest& request, ::milvus::proto::internal::RetrieveResults* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::internal::RetrieveResults>> AsyncQuerySegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::internal::RetrieveResults>>(AsyncQuerySegmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::internal::RetrieveResults>> PrepareAsyncQuerySegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::internal::RetrieveResults>>(PrepareAsyncQuerySegmentsRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncDelete(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status Insert(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncInsert(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncInsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncInsert(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncInsertRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NewCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LoadSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReleaseSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReleaseSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateSegmentIndex(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateSegmentIndex(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SearchSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest* request, ::milvus::proto::internal::SearchResults* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest* request, ::milvus::proto::internal::SearchResults* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QuerySegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest* request, ::milvus::proto::internal::RetrieveResults* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QuerySegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest* request, ::milvus::proto::internal::RetrieveResults* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Insert(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Insert(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ComponentStates>* AsyncGetComponentStatesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ComponentStates>* PrepareAsyncGetComponentStatesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncNewCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncNewCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncDeleteCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncDeleteCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncLoadSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncLoadSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncReleaseSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncReleaseSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncUpdateSegmentIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncUpdateSegmentIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::internal::SearchResults>* AsyncSearchSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::internal::SearchResults>* PrepareAsyncSearchSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::internal::RetrieveResults>* AsyncQuerySegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::internal::RetrieveResults>* PrepareAsyncQuerySegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncInsertRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncInsertRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::milvus::proto::milvus::ComponentStates* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>> AsyncGetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>>(AsyncGetComponentStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>> PrepareAsyncGetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>>(PrepareAsyncGetComponentStatesRaw(context, request, cq));
    }
    ::grpc::Status NewCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncNewCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncNewCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncNewCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncNewCollectionRaw(context, request, cq));
    }
    ::grpc::Status DeleteCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncDeleteCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncDeleteCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncDeleteCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncDeleteCollectionRaw(context, request, cq));
    }
    ::grpc::Status LoadSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncLoadSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncLoadSegmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncLoadSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncLoadSegmentsRaw(context, request, cq));
    }
    ::grpc::Status ReleaseSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncReleaseSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncReleaseSegmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncReleaseSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncReleaseSegmentsRaw(context, request, cq));
    }
    ::grpc::Status UpdateSegmentIndex(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncUpdateSegmentIndex(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncUpdateSegmentIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncUpdateSegmentIndex(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncUpdateSegmentIndexRaw(context, request, cq));
    }
    ::grpc::Status SearchSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest& request, ::milvus::proto::internal::SearchResults* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::SearchResults>> AsyncSearchSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::SearchResults>>(AsyncSearchSegmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::SearchResults>> PrepareAsyncSearchSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::SearchResults>>(PrepareAsyncSearchSegmentsRaw(context, request, cq));
    }
    ::grpc::Status QuerySegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest& request, ::milvus::proto::internal::RetrieveResults* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::RetrieveResults>> AsyncQuerySegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::RetrieveResults>>(AsyncQuerySegmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::RetrieveResults>> PrepareAsyncQuerySegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::RetrieveResults>>(PrepareAsyncQuerySegmentsRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncDelete(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status Insert(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncInsert(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncInsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncInsert(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncInsertRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response, std::function<void(::grpc::Status)>) override;
      void GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NewCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void NewCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void DeleteCollection(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LoadSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void LoadSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReleaseSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void ReleaseSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateSegmentIndex(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void UpdateSegmentIndex(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SearchSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest* request, ::milvus::proto::internal::SearchResults* response, std::function<void(::grpc::Status)>) override;
      void SearchSegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest* request, ::milvus::proto::internal::SearchResults* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QuerySegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest* request, ::milvus::proto::internal::RetrieveResults* response, std::function<void(::grpc::Status)>) override;
      void QuerySegments(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest* request, ::milvus::proto::internal::RetrieveResults* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Insert(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void Insert(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>* AsyncGetComponentStatesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>* PrepareAsyncGetComponentStatesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncNewCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncNewCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::NewCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncDeleteCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncDeleteCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncLoadSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncLoadSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncReleaseSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncReleaseSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncUpdateSegmentIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncUpdateSegmentIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::UpdateIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::SearchResults>* AsyncSearchSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::SearchResults>* PrepareAsyncSearchSegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::SearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::RetrieveResults>* AsyncQuerySegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::internal::RetrieveResults>* PrepareAsyncQuerySegmentsRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::QueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncInsertRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncInsertRaw(::grpc::ClientContext* context, const ::milvus::proto::segcore::InsertRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetComponentStates_;
    const ::grpc::internal::RpcMethod rpcmethod_NewCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadSegments_;
    const ::grpc::internal::RpcMethod rpcmethod_ReleaseSegments_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSegmentIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchSegments_;
    const ::grpc::internal::RpcMethod rpcmethod_QuerySegments_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Insert_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetComponentStates(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response);
    virtual ::grpc::Status NewCollection(::grpc::ServerContext* context, const ::milvus::proto::segcore::NewCollectionRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status DeleteCollection(::grpc::ServerContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status LoadSegments(::grpc::ServerContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status ReleaseSegments(::grpc::ServerContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status UpdateSegmentIndex(::grpc::ServerContext* context, const ::milvus::proto::segcore::UpdateIndexRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status SearchSegments(::grpc::ServerContext* context, const ::milvus::proto::segcore::SearchRequest* request, ::milvus::proto::internal::SearchResults* response);
    virtual ::grpc::Status QuerySegments(::grpc::ServerContext* context, const ::milvus::proto::segcore::QueryRequest* request, ::milvus::proto::internal::RetrieveResults* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::milvus::proto::segcore::DeleteRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status Insert(::grpc::ServerContext* context, const ::milvus::proto::segcore::InsertRequest* request, ::milvus::proto::common::Status* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetComponentStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetComponentStates() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetComponentStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponentStates(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetComponentStates(::grpc::ServerContext* context, ::milvus::proto::milvus::GetComponentStatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::ComponentStates>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewCollection() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NewCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::NewCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewCollection(::grpc::ServerContext* context, ::milvus::proto::segcore::NewCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCollection() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::DeleteCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCollection(::grpc::ServerContext* context, ::milvus::proto::segcore::DeleteCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadSegments() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LoadSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::LoadSegmentsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadSegments(::grpc::ServerContext* context, ::milvus::proto::segcore::LoadSegmentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReleaseSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReleaseSegments() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReleaseSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::ReleaseSegmentsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReleaseSegments(::grpc::ServerContext* context, ::milvus::proto::segcore::ReleaseSegmentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSegmentIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateSegmentIndex() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateSegmentIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSegmentIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::UpdateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSegmentIndex(::grpc::ServerContext* context, ::milvus::proto::segcore::UpdateIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchSegments() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SearchSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::SearchRequest* /*request*/, ::milvus::proto::internal::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchSegments(::grpc::ServerContext* context, ::milvus::proto::segcore::SearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::internal::SearchResults>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QuerySegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QuerySegments() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_QuerySegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::QueryRequest* /*request*/, ::milvus::proto::internal::RetrieveResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuerySegments(::grpc::ServerContext* context, ::milvus::proto::segcore::QueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::internal::RetrieveResults>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::DeleteRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::milvus::proto::segcore::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Insert() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::InsertRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsert(::grpc::ServerContext* context, ::milvus::proto::segcore::InsertRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetComponentStates<WithAsyncMethod_NewCollection<WithAsyncMethod_DeleteCollection<WithAsyncMethod_LoadSegments<WithAsyncMethod_ReleaseSegments<WithAsyncMethod_UpdateSegmentIndex<WithAsyncMethod_SearchSegments<WithAsyncMethod_QuerySegments<WithAsyncMethod_Delete<WithAsyncMethod_Insert<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetComponentStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetComponentStates() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetComponentStatesRequest, ::milvus::proto::milvus::ComponentStates>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response) { return this->GetComponentStates(context, request, response); }));}
    void SetMessageAllocatorFor_GetComponentStates(
        ::grpc::MessageAllocator< ::milvus::proto::milvus::GetComponentStatesRequest, ::milvus::proto::milvus::ComponentStates>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetComponentStatesRequest, ::milvus::proto::milvus::ComponentStates>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetComponentStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponentStates(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetComponentStates(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NewCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewCollection() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::NewCollectionRequest, ::milvus::proto::common::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::milvus::proto::segcore::NewCollectionRequest* request, ::milvus::proto::common::Status* response) { return this->NewCollection(context, request, response); }));}
    void SetMessageAllocatorFor_NewCollection(
        ::grpc::MessageAllocator< ::milvus::proto::segcore::NewCollectionRequest, ::milvus::proto::common::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::NewCollectionRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NewCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::NewCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::segcore::NewCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteCollection() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::DeleteCollectionRequest, ::milvus::proto::common::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::milvus::proto::segcore::DeleteCollectionRequest* request, ::milvus::proto::common::Status* response) { return this->DeleteCollection(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCollection(
        ::grpc::MessageAllocator< ::milvus::proto::segcore::DeleteCollectionRequest, ::milvus::proto::common::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::DeleteCollectionRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::DeleteCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::segcore::DeleteCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LoadSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadSegments() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::LoadSegmentsRequest, ::milvus::proto::common::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::milvus::proto::segcore::LoadSegmentsRequest* request, ::milvus::proto::common::Status* response) { return this->LoadSegments(context, request, response); }));}
    void SetMessageAllocatorFor_LoadSegments(
        ::grpc::MessageAllocator< ::milvus::proto::segcore::LoadSegmentsRequest, ::milvus::proto::common::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::LoadSegmentsRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LoadSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::LoadSegmentsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadSegments(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::segcore::LoadSegmentsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReleaseSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReleaseSegments() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::ReleaseSegmentsRequest, ::milvus::proto::common::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::milvus::proto::segcore::ReleaseSegmentsRequest* request, ::milvus::proto::common::Status* response) { return this->ReleaseSegments(context, request, response); }));}
    void SetMessageAllocatorFor_ReleaseSegments(
        ::grpc::MessageAllocator< ::milvus::proto::segcore::ReleaseSegmentsRequest, ::milvus::proto::common::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::ReleaseSegmentsRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReleaseSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::ReleaseSegmentsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReleaseSegments(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::segcore::ReleaseSegmentsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateSegmentIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateSegmentIndex() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::UpdateIndexRequest, ::milvus::proto::common::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::milvus::proto::segcore::UpdateIndexRequest* request, ::milvus::proto::common::Status* response) { return this->UpdateSegmentIndex(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateSegmentIndex(
        ::grpc::MessageAllocator< ::milvus::proto::segcore::UpdateIndexRequest, ::milvus::proto::common::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::UpdateIndexRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateSegmentIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSegmentIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::UpdateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSegmentIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::segcore::UpdateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SearchSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SearchSegments() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::SearchRequest, ::milvus::proto::internal::SearchResults>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::milvus::proto::segcore::SearchRequest* request, ::milvus::proto::internal::SearchResults* response) { return this->SearchSegments(context, request, response); }));}
    void SetMessageAllocatorFor_SearchSegments(
        ::grpc::MessageAllocator< ::milvus::proto::segcore::SearchRequest, ::milvus::proto::internal::SearchResults>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::SearchRequest, ::milvus::proto::internal::SearchResults>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SearchSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::SearchRequest* /*request*/, ::milvus::proto::internal::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchSegments(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::segcore::SearchRequest* /*request*/, ::milvus::proto::internal::SearchResults* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QuerySegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QuerySegments() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::QueryRequest, ::milvus::proto::internal::RetrieveResults>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::milvus::proto::segcore::QueryRequest* request, ::milvus::proto::internal::RetrieveResults* response) { return this->QuerySegments(context, request, response); }));}
    void SetMessageAllocatorFor_QuerySegments(
        ::grpc::MessageAllocator< ::milvus::proto::segcore::QueryRequest, ::milvus::proto::internal::RetrieveResults>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::QueryRequest, ::milvus::proto::internal::RetrieveResults>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QuerySegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::QueryRequest* /*request*/, ::milvus::proto::internal::RetrieveResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QuerySegments(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::segcore::QueryRequest* /*request*/, ::milvus::proto::internal::RetrieveResults* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::DeleteRequest, ::milvus::proto::common::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::milvus::proto::segcore::DeleteRequest* request, ::milvus::proto::common::Status* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::MessageAllocator< ::milvus::proto::segcore::DeleteRequest, ::milvus::proto::common::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::DeleteRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::DeleteRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::segcore::DeleteRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Insert() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::InsertRequest, ::milvus::proto::common::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::milvus::proto::segcore::InsertRequest* request, ::milvus::proto::common::Status* response) { return this->Insert(context, request, response); }));}
    void SetMessageAllocatorFor_Insert(
        ::grpc::MessageAllocator< ::milvus::proto::segcore::InsertRequest, ::milvus::proto::common::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::milvus::proto::segcore::InsertRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::InsertRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Insert(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::segcore::InsertRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetComponentStates<WithCallbackMethod_NewCollection<WithCallbackMethod_DeleteCollection<WithCallbackMethod_LoadSegments<WithCallbackMethod_ReleaseSegments<WithCallbackMethod_UpdateSegmentIndex<WithCallbackMethod_SearchSegments<WithCallbackMethod_QuerySegments<WithCallbackMethod_Delete<WithCallbackMethod_Insert<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetComponentStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetComponentStates() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetComponentStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponentStates(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewCollection() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NewCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::NewCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCollection() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::DeleteCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadSegments() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LoadSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::LoadSegmentsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReleaseSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReleaseSegments() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReleaseSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::ReleaseSegmentsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSegmentIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateSegmentIndex() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateSegmentIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSegmentIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::UpdateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchSegments() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SearchSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::SearchRequest* /*request*/, ::milvus::proto::internal::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QuerySegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QuerySegments() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_QuerySegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::QueryRequest* /*request*/, ::milvus::proto::internal::RetrieveResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::DeleteRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Insert() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::InsertRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetComponentStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetComponentStates() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetComponentStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponentStates(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetComponentStates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewCollection() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_NewCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::NewCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCollection() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::DeleteCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadSegments() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LoadSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::LoadSegmentsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadSegments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReleaseSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReleaseSegments() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReleaseSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::ReleaseSegmentsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReleaseSegments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSegmentIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateSegmentIndex() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdateSegmentIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSegmentIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::UpdateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSegmentIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchSegments() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SearchSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::SearchRequest* /*request*/, ::milvus::proto::internal::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchSegments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QuerySegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QuerySegments() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_QuerySegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::QueryRequest* /*request*/, ::milvus::proto::internal::RetrieveResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuerySegments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::DeleteRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Insert() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::InsertRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsert(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetComponentStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetComponentStates() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetComponentStates(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetComponentStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponentStates(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetComponentStates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewCollection() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewCollection(context, request, response); }));
    }
    ~WithRawCallbackMethod_NewCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::NewCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteCollection() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCollection(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::DeleteCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadSegments() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadSegments(context, request, response); }));
    }
    ~WithRawCallbackMethod_LoadSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::LoadSegmentsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadSegments(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReleaseSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReleaseSegments() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReleaseSegments(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReleaseSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::ReleaseSegmentsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReleaseSegments(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateSegmentIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateSegmentIndex() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateSegmentIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateSegmentIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSegmentIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::UpdateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSegmentIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SearchSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SearchSegments() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SearchSegments(context, request, response); }));
    }
    ~WithRawCallbackMethod_SearchSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::SearchRequest* /*request*/, ::milvus::proto::internal::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchSegments(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QuerySegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QuerySegments() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QuerySegments(context, request, response); }));
    }
    ~WithRawCallbackMethod_QuerySegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::QueryRequest* /*request*/, ::milvus::proto::internal::RetrieveResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QuerySegments(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::DeleteRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Insert() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Insert(context, request, response); }));
    }
    ~WithRawCallbackMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::InsertRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Insert(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetComponentStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetComponentStates() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetComponentStatesRequest, ::milvus::proto::milvus::ComponentStates>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetComponentStatesRequest, ::milvus::proto::milvus::ComponentStates>* streamer) {
                       return this->StreamedGetComponentStates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetComponentStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetComponentStates(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetComponentStates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetComponentStatesRequest,::milvus::proto::milvus::ComponentStates>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewCollection() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::segcore::NewCollectionRequest, ::milvus::proto::common::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::milvus::proto::segcore::NewCollectionRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedNewCollection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NewCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::NewCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::segcore::NewCollectionRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCollection() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::segcore::DeleteCollectionRequest, ::milvus::proto::common::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::milvus::proto::segcore::DeleteCollectionRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedDeleteCollection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::DeleteCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::segcore::DeleteCollectionRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadSegments() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::segcore::LoadSegmentsRequest, ::milvus::proto::common::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::milvus::proto::segcore::LoadSegmentsRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedLoadSegments(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::LoadSegmentsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadSegments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::segcore::LoadSegmentsRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReleaseSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReleaseSegments() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::segcore::ReleaseSegmentsRequest, ::milvus::proto::common::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::milvus::proto::segcore::ReleaseSegmentsRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedReleaseSegments(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReleaseSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReleaseSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::ReleaseSegmentsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReleaseSegments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::segcore::ReleaseSegmentsRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSegmentIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateSegmentIndex() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::segcore::UpdateIndexRequest, ::milvus::proto::common::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::milvus::proto::segcore::UpdateIndexRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedUpdateSegmentIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateSegmentIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSegmentIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::UpdateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSegmentIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::segcore::UpdateIndexRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchSegments() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::segcore::SearchRequest, ::milvus::proto::internal::SearchResults>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::milvus::proto::segcore::SearchRequest, ::milvus::proto::internal::SearchResults>* streamer) {
                       return this->StreamedSearchSegments(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SearchSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchSegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::SearchRequest* /*request*/, ::milvus::proto::internal::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchSegments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::segcore::SearchRequest,::milvus::proto::internal::SearchResults>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QuerySegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QuerySegments() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::segcore::QueryRequest, ::milvus::proto::internal::RetrieveResults>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::milvus::proto::segcore::QueryRequest, ::milvus::proto::internal::RetrieveResults>* streamer) {
                       return this->StreamedQuerySegments(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QuerySegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QuerySegments(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::QueryRequest* /*request*/, ::milvus::proto::internal::RetrieveResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuerySegments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::segcore::QueryRequest,::milvus::proto::internal::RetrieveResults>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::segcore::DeleteRequest, ::milvus::proto::common::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::milvus::proto::segcore::DeleteRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::DeleteRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::segcore::DeleteRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Insert() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::segcore::InsertRequest, ::milvus::proto::common::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::milvus::proto::segcore::InsertRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedInsert(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::milvus::proto::segcore::InsertRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsert(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::segcore::InsertRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetComponentStates<WithStreamedUnaryMethod_NewCollection<WithStreamedUnaryMethod_DeleteCollection<WithStreamedUnaryMethod_LoadSegments<WithStreamedUnaryMethod_ReleaseSegments<WithStreamedUnaryMethod_UpdateSegmentIndex<WithStreamedUnaryMethod_SearchSegments<WithStreamedUnaryMethod_QuerySegments<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Insert<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetComponentStates<WithStreamedUnaryMethod_NewCollection<WithStreamedUnaryMethod_DeleteCollection<WithStreamedUnaryMethod_LoadSegments<WithStreamedUnaryMethod_ReleaseSegments<WithStreamedUnaryMethod_UpdateSegmentIndex<WithStreamedUnaryMethod_SearchSegments<WithStreamedUnaryMethod_QuerySegments<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Insert<Service > > > > > > > > > > StreamedService;
};

}  // namespace segcore
}  // namespace proto
}  // namespace milvus


#endif  // GRPC_segcore_2eproto__INCLUDED
