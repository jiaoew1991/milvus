// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_coord.proto

#include "data_coord.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace milvus {
namespace proto {
namespace data {
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized) {}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
PROTOBUF_CONSTEXPR FlushRequest::FlushRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentids_)*/{}
  , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.isimport_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlushRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushRequestDefaultTypeInternal() {}
  union {
    FlushRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushRequestDefaultTypeInternal _FlushRequest_default_instance_;
PROTOBUF_CONSTEXPR FlushResponse::FlushResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentids_)*/{}
  , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.flushsegmentids_)*/{}
  , /*decltype(_impl_._flushsegmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.timeofseal_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlushResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushResponseDefaultTypeInternal() {}
  union {
    FlushResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushResponseDefaultTypeInternal _FlushResponse_default_instance_;
PROTOBUF_CONSTEXPR SegmentIDRequest::SegmentIDRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.isimport_)*/false
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_.importtaskid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentIDRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentIDRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentIDRequestDefaultTypeInternal() {}
  union {
    SegmentIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentIDRequestDefaultTypeInternal _SegmentIDRequest_default_instance_;
PROTOBUF_CONSTEXPR AssignSegmentIDRequest::AssignSegmentIDRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentidrequests_)*/{}
  , /*decltype(_impl_.peer_role_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nodeid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssignSegmentIDRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssignSegmentIDRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssignSegmentIDRequestDefaultTypeInternal() {}
  union {
    AssignSegmentIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssignSegmentIDRequestDefaultTypeInternal _AssignSegmentIDRequest_default_instance_;
PROTOBUF_CONSTEXPR SegmentIDAssignment::SegmentIDAssignment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.segid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_.expire_time_)*/uint64_t{0u}
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentIDAssignmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentIDAssignmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentIDAssignmentDefaultTypeInternal() {}
  union {
    SegmentIDAssignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentIDAssignmentDefaultTypeInternal _SegmentIDAssignment_default_instance_;
PROTOBUF_CONSTEXPR AssignSegmentIDResponse::AssignSegmentIDResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segidassignments_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssignSegmentIDResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssignSegmentIDResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssignSegmentIDResponseDefaultTypeInternal() {}
  union {
    AssignSegmentIDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssignSegmentIDResponseDefaultTypeInternal _AssignSegmentIDResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSegmentStatesRequest::GetSegmentStatesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentids_)*/{}
  , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSegmentStatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSegmentStatesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSegmentStatesRequestDefaultTypeInternal() {}
  union {
    GetSegmentStatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSegmentStatesRequestDefaultTypeInternal _GetSegmentStatesRequest_default_instance_;
PROTOBUF_CONSTEXPR SegmentStateInfo::SegmentStateInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_position_)*/nullptr
  , /*decltype(_impl_.end_position_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentStateInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentStateInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentStateInfoDefaultTypeInternal() {}
  union {
    SegmentStateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentStateInfoDefaultTypeInternal _SegmentStateInfo_default_instance_;
PROTOBUF_CONSTEXPR GetSegmentStatesResponse::GetSegmentStatesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.states_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSegmentStatesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSegmentStatesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSegmentStatesResponseDefaultTypeInternal() {}
  union {
    GetSegmentStatesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSegmentStatesResponseDefaultTypeInternal _GetSegmentStatesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSegmentInfoRequest::GetSegmentInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentids_)*/{}
  , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.includeunhealthy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSegmentInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSegmentInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSegmentInfoRequestDefaultTypeInternal() {}
  union {
    GetSegmentInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSegmentInfoRequestDefaultTypeInternal _GetSegmentInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse::GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUseDefaultTypeInternal _GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetSegmentInfoResponse::GetSegmentInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_.channel_checkpoint_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSegmentInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSegmentInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSegmentInfoResponseDefaultTypeInternal() {}
  union {
    GetSegmentInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSegmentInfoResponseDefaultTypeInternal _GetSegmentInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR GetInsertBinlogPathsRequest::GetInsertBinlogPathsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetInsertBinlogPathsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInsertBinlogPathsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInsertBinlogPathsRequestDefaultTypeInternal() {}
  union {
    GetInsertBinlogPathsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInsertBinlogPathsRequestDefaultTypeInternal _GetInsertBinlogPathsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetInsertBinlogPathsResponse::GetInsertBinlogPathsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fieldids_)*/{}
  , /*decltype(_impl_._fieldids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.paths_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetInsertBinlogPathsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInsertBinlogPathsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInsertBinlogPathsResponseDefaultTypeInternal() {}
  union {
    GetInsertBinlogPathsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInsertBinlogPathsResponseDefaultTypeInternal _GetInsertBinlogPathsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetCollectionStatisticsRequest::GetCollectionStatisticsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCollectionStatisticsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCollectionStatisticsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCollectionStatisticsRequestDefaultTypeInternal() {}
  union {
    GetCollectionStatisticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCollectionStatisticsRequestDefaultTypeInternal _GetCollectionStatisticsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetCollectionStatisticsResponse::GetCollectionStatisticsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCollectionStatisticsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCollectionStatisticsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCollectionStatisticsResponseDefaultTypeInternal() {}
  union {
    GetCollectionStatisticsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCollectionStatisticsResponseDefaultTypeInternal _GetCollectionStatisticsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetPartitionStatisticsRequest::GetPartitionStatisticsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partitionids_)*/{}
  , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPartitionStatisticsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPartitionStatisticsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPartitionStatisticsRequestDefaultTypeInternal() {}
  union {
    GetPartitionStatisticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPartitionStatisticsRequestDefaultTypeInternal _GetPartitionStatisticsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPartitionStatisticsResponse::GetPartitionStatisticsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPartitionStatisticsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPartitionStatisticsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPartitionStatisticsResponseDefaultTypeInternal() {}
  union {
    GetPartitionStatisticsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPartitionStatisticsResponseDefaultTypeInternal _GetPartitionStatisticsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSegmentInfoChannelRequest::GetSegmentInfoChannelRequest(
    ::_pbi::ConstantInitialized) {}
struct GetSegmentInfoChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSegmentInfoChannelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSegmentInfoChannelRequestDefaultTypeInternal() {}
  union {
    GetSegmentInfoChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSegmentInfoChannelRequestDefaultTypeInternal _GetSegmentInfoChannelRequest_default_instance_;
PROTOBUF_CONSTEXPR VchannelInfo::VchannelInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unflushedsegments_)*/{}
  , /*decltype(_impl_.flushedsegments_)*/{}
  , /*decltype(_impl_.dropped_segments_)*/{}
  , /*decltype(_impl_.unflushedsegmentids_)*/{}
  , /*decltype(_impl_._unflushedsegmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.flushedsegmentids_)*/{}
  , /*decltype(_impl_._flushedsegmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.dropped_segmentids_)*/{}
  , /*decltype(_impl_._dropped_segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.indexed_segmentids_)*/{}
  , /*decltype(_impl_._indexed_segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.indexed_segments_)*/{}
  , /*decltype(_impl_.channelname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seek_position_)*/nullptr
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VchannelInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VchannelInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VchannelInfoDefaultTypeInternal() {}
  union {
    VchannelInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VchannelInfoDefaultTypeInternal _VchannelInfo_default_instance_;
PROTOBUF_CONSTEXPR WatchDmChannelsRequest::WatchDmChannelsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vchannels_)*/{}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WatchDmChannelsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WatchDmChannelsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WatchDmChannelsRequestDefaultTypeInternal() {}
  union {
    WatchDmChannelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WatchDmChannelsRequestDefaultTypeInternal _WatchDmChannelsRequest_default_instance_;
PROTOBUF_CONSTEXPR FlushSegmentsRequest::FlushSegmentsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentids_)*/{}
  , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.dbid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlushSegmentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushSegmentsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushSegmentsRequestDefaultTypeInternal() {}
  union {
    FlushSegmentsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushSegmentsRequestDefaultTypeInternal _FlushSegmentsRequest_default_instance_;
PROTOBUF_CONSTEXPR SegmentMsg::SegmentMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.segment_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentMsgDefaultTypeInternal() {}
  union {
    SegmentMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentMsgDefaultTypeInternal _SegmentMsg_default_instance_;
PROTOBUF_CONSTEXPR SegmentInfo::SegmentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.binlogs_)*/{}
  , /*decltype(_impl_.statslogs_)*/{}
  , /*decltype(_impl_.deltalogs_)*/{}
  , /*decltype(_impl_.compactionfrom_)*/{}
  , /*decltype(_impl_._compactionfrom_cached_byte_size_)*/{0}
  , /*decltype(_impl_.insert_channel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_position_)*/nullptr
  , /*decltype(_impl_.dml_position_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_.num_of_rows_)*/int64_t{0}
  , /*decltype(_impl_.max_row_num_)*/int64_t{0}
  , /*decltype(_impl_.last_expire_time_)*/uint64_t{0u}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.createdbycompaction_)*/false
  , /*decltype(_impl_.is_importing_)*/false
  , /*decltype(_impl_.is_fake_)*/false
  , /*decltype(_impl_.dropped_at_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentInfoDefaultTypeInternal() {}
  union {
    SegmentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentInfoDefaultTypeInternal _SegmentInfo_default_instance_;
PROTOBUF_CONSTEXPR SegmentStartPosition::SegmentStartPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_position_)*/nullptr
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentStartPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentStartPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentStartPositionDefaultTypeInternal() {}
  union {
    SegmentStartPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentStartPositionDefaultTypeInternal _SegmentStartPosition_default_instance_;
PROTOBUF_CONSTEXPR SaveBinlogPathsRequest::SaveBinlogPathsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field2binlogpaths_)*/{}
  , /*decltype(_impl_.checkpoints_)*/{}
  , /*decltype(_impl_.start_positions_)*/{}
  , /*decltype(_impl_.field2statslogpaths_)*/{}
  , /*decltype(_impl_.deltalogs_)*/{}
  , /*decltype(_impl_.channel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.flushed_)*/false
  , /*decltype(_impl_.dropped_)*/false
  , /*decltype(_impl_.importing_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SaveBinlogPathsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SaveBinlogPathsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SaveBinlogPathsRequestDefaultTypeInternal() {}
  union {
    SaveBinlogPathsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SaveBinlogPathsRequestDefaultTypeInternal _SaveBinlogPathsRequest_default_instance_;
PROTOBUF_CONSTEXPR CheckPoint::CheckPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.num_of_rows_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckPointDefaultTypeInternal() {}
  union {
    CheckPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckPointDefaultTypeInternal _CheckPoint_default_instance_;
PROTOBUF_CONSTEXPR DeltaLogInfo::DeltaLogInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.delta_log_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.record_entries_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_from_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_to_)*/uint64_t{0u}
  , /*decltype(_impl_.delta_log_size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeltaLogInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeltaLogInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeltaLogInfoDefaultTypeInternal() {}
  union {
    DeltaLogInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeltaLogInfoDefaultTypeInternal _DeltaLogInfo_default_instance_;
PROTOBUF_CONSTEXPR ChannelStatus::ChannelStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelStatusDefaultTypeInternal() {}
  union {
    ChannelStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelStatusDefaultTypeInternal _ChannelStatus_default_instance_;
PROTOBUF_CONSTEXPR DataNodeInfo::DataNodeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channels_)*/{}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataNodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataNodeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataNodeInfoDefaultTypeInternal() {}
  union {
    DataNodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataNodeInfoDefaultTypeInternal _DataNodeInfo_default_instance_;
PROTOBUF_CONSTEXPR SegmentBinlogs::SegmentBinlogs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fieldbinlogs_)*/{}
  , /*decltype(_impl_.statslogs_)*/{}
  , /*decltype(_impl_.deltalogs_)*/{}
  , /*decltype(_impl_.insert_channel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.num_of_rows_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentBinlogsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentBinlogsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentBinlogsDefaultTypeInternal() {}
  union {
    SegmentBinlogs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentBinlogsDefaultTypeInternal _SegmentBinlogs_default_instance_;
PROTOBUF_CONSTEXPR FieldBinlog::FieldBinlog(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.binlogs_)*/{}
  , /*decltype(_impl_.fieldid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FieldBinlogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldBinlogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldBinlogDefaultTypeInternal() {}
  union {
    FieldBinlog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldBinlogDefaultTypeInternal _FieldBinlog_default_instance_;
PROTOBUF_CONSTEXPR Binlog::Binlog(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.log_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entries_num_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_from_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_to_)*/uint64_t{0u}
  , /*decltype(_impl_.log_size_)*/int64_t{0}
  , /*decltype(_impl_.logid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinlogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinlogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinlogDefaultTypeInternal() {}
  union {
    Binlog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinlogDefaultTypeInternal _Binlog_default_instance_;
PROTOBUF_CONSTEXPR GetRecoveryInfoResponse::GetRecoveryInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channels_)*/{}
  , /*decltype(_impl_.binlogs_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRecoveryInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRecoveryInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRecoveryInfoResponseDefaultTypeInternal() {}
  union {
    GetRecoveryInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRecoveryInfoResponseDefaultTypeInternal _GetRecoveryInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR GetRecoveryInfoRequest::GetRecoveryInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRecoveryInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRecoveryInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRecoveryInfoRequestDefaultTypeInternal() {}
  union {
    GetRecoveryInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRecoveryInfoRequestDefaultTypeInternal _GetRecoveryInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR GetRecoveryInfoResponseV2::GetRecoveryInfoResponseV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channels_)*/{}
  , /*decltype(_impl_.segments_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRecoveryInfoResponseV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRecoveryInfoResponseV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRecoveryInfoResponseV2DefaultTypeInternal() {}
  union {
    GetRecoveryInfoResponseV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRecoveryInfoResponseV2DefaultTypeInternal _GetRecoveryInfoResponseV2_default_instance_;
PROTOBUF_CONSTEXPR GetRecoveryInfoRequestV2::GetRecoveryInfoRequestV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partitionids_)*/{}
  , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRecoveryInfoRequestV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRecoveryInfoRequestV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRecoveryInfoRequestV2DefaultTypeInternal() {}
  union {
    GetRecoveryInfoRequestV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRecoveryInfoRequestV2DefaultTypeInternal _GetRecoveryInfoRequestV2_default_instance_;
PROTOBUF_CONSTEXPR GetSegmentsByStatesRequest::GetSegmentsByStatesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.states_)*/{}
  , /*decltype(_impl_._states_cached_byte_size_)*/{0}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSegmentsByStatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSegmentsByStatesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSegmentsByStatesRequestDefaultTypeInternal() {}
  union {
    GetSegmentsByStatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSegmentsByStatesRequestDefaultTypeInternal _GetSegmentsByStatesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetSegmentsByStatesResponse::GetSegmentsByStatesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segments_)*/{}
  , /*decltype(_impl_._segments_cached_byte_size_)*/{0}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSegmentsByStatesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSegmentsByStatesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSegmentsByStatesResponseDefaultTypeInternal() {}
  union {
    GetSegmentsByStatesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSegmentsByStatesResponseDefaultTypeInternal _GetSegmentsByStatesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetFlushedSegmentsRequest::GetFlushedSegmentsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_.includeunhealthy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFlushedSegmentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFlushedSegmentsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFlushedSegmentsRequestDefaultTypeInternal() {}
  union {
    GetFlushedSegmentsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFlushedSegmentsRequestDefaultTypeInternal _GetFlushedSegmentsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetFlushedSegmentsResponse::GetFlushedSegmentsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segments_)*/{}
  , /*decltype(_impl_._segments_cached_byte_size_)*/{0}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFlushedSegmentsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFlushedSegmentsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFlushedSegmentsResponseDefaultTypeInternal() {}
  union {
    GetFlushedSegmentsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFlushedSegmentsResponseDefaultTypeInternal _GetFlushedSegmentsResponse_default_instance_;
PROTOBUF_CONSTEXPR SegmentFlushCompletedMsg::SegmentFlushCompletedMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.segment_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentFlushCompletedMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentFlushCompletedMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentFlushCompletedMsgDefaultTypeInternal() {}
  union {
    SegmentFlushCompletedMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentFlushCompletedMsgDefaultTypeInternal _SegmentFlushCompletedMsg_default_instance_;
PROTOBUF_CONSTEXPR ChannelWatchInfo::ChannelWatchInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vchan_)*/nullptr
  , /*decltype(_impl_.schema_)*/nullptr
  , /*decltype(_impl_.startts_)*/int64_t{0}
  , /*decltype(_impl_.timeoutts_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.progress_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelWatchInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelWatchInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelWatchInfoDefaultTypeInternal() {}
  union {
    ChannelWatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelWatchInfoDefaultTypeInternal _ChannelWatchInfo_default_instance_;
PROTOBUF_CONSTEXPR CompactionStateRequest::CompactionStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompactionStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompactionStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompactionStateRequestDefaultTypeInternal() {}
  union {
    CompactionStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompactionStateRequestDefaultTypeInternal _CompactionStateRequest_default_instance_;
PROTOBUF_CONSTEXPR SyncSegmentsRequest::SyncSegmentsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.compacted_from_)*/{}
  , /*decltype(_impl_._compacted_from_cached_byte_size_)*/{0}
  , /*decltype(_impl_.stats_logs_)*/{}
  , /*decltype(_impl_.planid_)*/int64_t{0}
  , /*decltype(_impl_.compacted_to_)*/int64_t{0}
  , /*decltype(_impl_.num_of_rows_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SyncSegmentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncSegmentsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncSegmentsRequestDefaultTypeInternal() {}
  union {
    SyncSegmentsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncSegmentsRequestDefaultTypeInternal _SyncSegmentsRequest_default_instance_;
PROTOBUF_CONSTEXPR CompactionSegmentBinlogs::CompactionSegmentBinlogs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fieldbinlogs_)*/{}
  , /*decltype(_impl_.field2statslogpaths_)*/{}
  , /*decltype(_impl_.deltalogs_)*/{}
  , /*decltype(_impl_.insert_channel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompactionSegmentBinlogsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompactionSegmentBinlogsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompactionSegmentBinlogsDefaultTypeInternal() {}
  union {
    CompactionSegmentBinlogs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompactionSegmentBinlogsDefaultTypeInternal _CompactionSegmentBinlogs_default_instance_;
PROTOBUF_CONSTEXPR CompactionPlan::CompactionPlan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentbinlogs_)*/{}
  , /*decltype(_impl_.channel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.planid_)*/int64_t{0}
  , /*decltype(_impl_.start_time_)*/uint64_t{0u}
  , /*decltype(_impl_.timeout_in_seconds_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.timetravel_)*/uint64_t{0u}
  , /*decltype(_impl_.collection_ttl_)*/int64_t{0}
  , /*decltype(_impl_.total_rows_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompactionPlanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompactionPlanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompactionPlanDefaultTypeInternal() {}
  union {
    CompactionPlan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompactionPlanDefaultTypeInternal _CompactionPlan_default_instance_;
PROTOBUF_CONSTEXPR CompactionResult::CompactionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.insert_logs_)*/{}
  , /*decltype(_impl_.field2statslogpaths_)*/{}
  , /*decltype(_impl_.deltalogs_)*/{}
  , /*decltype(_impl_.channel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.planid_)*/int64_t{0}
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.num_of_rows_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompactionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompactionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompactionResultDefaultTypeInternal() {}
  union {
    CompactionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompactionResultDefaultTypeInternal _CompactionResult_default_instance_;
PROTOBUF_CONSTEXPR CompactionStateResult::CompactionStateResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.planid_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompactionStateResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompactionStateResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompactionStateResultDefaultTypeInternal() {}
  union {
    CompactionStateResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompactionStateResultDefaultTypeInternal _CompactionStateResult_default_instance_;
PROTOBUF_CONSTEXPR CompactionStateResponse::CompactionStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompactionStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompactionStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompactionStateResponseDefaultTypeInternal() {}
  union {
    CompactionStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompactionStateResponseDefaultTypeInternal _CompactionStateResponse_default_instance_;
PROTOBUF_CONSTEXPR SegmentFieldBinlogMeta::SegmentFieldBinlogMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.binlog_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fieldid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentFieldBinlogMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentFieldBinlogMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentFieldBinlogMetaDefaultTypeInternal() {}
  union {
    SegmentFieldBinlogMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentFieldBinlogMetaDefaultTypeInternal _SegmentFieldBinlogMeta_default_instance_;
PROTOBUF_CONSTEXPR WatchChannelsRequest::WatchChannelsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channelnames_)*/{}
  , /*decltype(_impl_.start_positions_)*/{}
  , /*decltype(_impl_.schema_)*/nullptr
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WatchChannelsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WatchChannelsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WatchChannelsRequestDefaultTypeInternal() {}
  union {
    WatchChannelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WatchChannelsRequestDefaultTypeInternal _WatchChannelsRequest_default_instance_;
PROTOBUF_CONSTEXPR WatchChannelsResponse::WatchChannelsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WatchChannelsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WatchChannelsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WatchChannelsResponseDefaultTypeInternal() {}
  union {
    WatchChannelsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WatchChannelsResponseDefaultTypeInternal _WatchChannelsResponse_default_instance_;
PROTOBUF_CONSTEXPR SetSegmentStateRequest::SetSegmentStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.segment_id_)*/int64_t{0}
  , /*decltype(_impl_.new_state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetSegmentStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetSegmentStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetSegmentStateRequestDefaultTypeInternal() {}
  union {
    SetSegmentStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetSegmentStateRequestDefaultTypeInternal _SetSegmentStateRequest_default_instance_;
PROTOBUF_CONSTEXPR SetSegmentStateResponse::SetSegmentStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetSegmentStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetSegmentStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetSegmentStateResponseDefaultTypeInternal() {}
  union {
    SetSegmentStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetSegmentStateResponseDefaultTypeInternal _SetSegmentStateResponse_default_instance_;
PROTOBUF_CONSTEXPR DropVirtualChannelRequest::DropVirtualChannelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segments_)*/{}
  , /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropVirtualChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropVirtualChannelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropVirtualChannelRequestDefaultTypeInternal() {}
  union {
    DropVirtualChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropVirtualChannelRequestDefaultTypeInternal _DropVirtualChannelRequest_default_instance_;
PROTOBUF_CONSTEXPR DropVirtualChannelSegment::DropVirtualChannelSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field2binlogpaths_)*/{}
  , /*decltype(_impl_.field2statslogpaths_)*/{}
  , /*decltype(_impl_.deltalogs_)*/{}
  , /*decltype(_impl_.startposition_)*/nullptr
  , /*decltype(_impl_.checkpoint_)*/nullptr
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.numofrows_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropVirtualChannelSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropVirtualChannelSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropVirtualChannelSegmentDefaultTypeInternal() {}
  union {
    DropVirtualChannelSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropVirtualChannelSegmentDefaultTypeInternal _DropVirtualChannelSegment_default_instance_;
PROTOBUF_CONSTEXPR DropVirtualChannelResponse::DropVirtualChannelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropVirtualChannelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropVirtualChannelResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropVirtualChannelResponseDefaultTypeInternal() {}
  union {
    DropVirtualChannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropVirtualChannelResponseDefaultTypeInternal _DropVirtualChannelResponse_default_instance_;
PROTOBUF_CONSTEXPR ImportTask::ImportTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_names_)*/{}
  , /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_.database_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.collection_id_)*/int64_t{0}
  , /*decltype(_impl_.partition_id_)*/int64_t{0}
  , /*decltype(_impl_.task_id_)*/int64_t{0}
  , /*decltype(_impl_.row_based_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImportTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportTaskDefaultTypeInternal() {}
  union {
    ImportTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportTaskDefaultTypeInternal _ImportTask_default_instance_;
PROTOBUF_CONSTEXPR ImportTaskState::ImportTaskState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segments_)*/{}
  , /*decltype(_impl_._segments_cached_byte_size_)*/{0}
  , /*decltype(_impl_.row_ids_)*/{}
  , /*decltype(_impl_._row_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.row_count_)*/int64_t{0}
  , /*decltype(_impl_.statecode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImportTaskStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportTaskStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportTaskStateDefaultTypeInternal() {}
  union {
    ImportTaskState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportTaskStateDefaultTypeInternal _ImportTaskState_default_instance_;
PROTOBUF_CONSTEXPR ImportTaskInfo::ImportTaskInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_names_)*/{}
  , /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_.bucket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.request_id_)*/int64_t{0}
  , /*decltype(_impl_.datanode_id_)*/int64_t{0}
  , /*decltype(_impl_.collection_id_)*/int64_t{0}
  , /*decltype(_impl_.partition_id_)*/int64_t{0}
  , /*decltype(_impl_.create_ts_)*/int64_t{0}
  , /*decltype(_impl_.start_ts_)*/int64_t{0}
  , /*decltype(_impl_.row_based_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImportTaskInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportTaskInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportTaskInfoDefaultTypeInternal() {}
  union {
    ImportTaskInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportTaskInfoDefaultTypeInternal _ImportTaskInfo_default_instance_;
PROTOBUF_CONSTEXPR ImportTaskResponse::ImportTaskResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.datanode_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImportTaskResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportTaskResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportTaskResponseDefaultTypeInternal() {}
  union {
    ImportTaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportTaskResponseDefaultTypeInternal _ImportTaskResponse_default_instance_;
PROTOBUF_CONSTEXPR ImportTaskRequest::ImportTaskRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.working_nodes_)*/{}
  , /*decltype(_impl_._working_nodes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.import_task_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImportTaskRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportTaskRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportTaskRequestDefaultTypeInternal() {}
  union {
    ImportTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportTaskRequestDefaultTypeInternal _ImportTaskRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateSegmentStatisticsRequest::UpdateSegmentStatisticsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateSegmentStatisticsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateSegmentStatisticsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateSegmentStatisticsRequestDefaultTypeInternal() {}
  union {
    UpdateSegmentStatisticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateSegmentStatisticsRequestDefaultTypeInternal _UpdateSegmentStatisticsRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateChannelCheckpointRequest::UpdateChannelCheckpointRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vchannel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateChannelCheckpointRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateChannelCheckpointRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateChannelCheckpointRequestDefaultTypeInternal() {}
  union {
    UpdateChannelCheckpointRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateChannelCheckpointRequestDefaultTypeInternal _UpdateChannelCheckpointRequest_default_instance_;
PROTOBUF_CONSTEXPR ResendSegmentStatsRequest::ResendSegmentStatsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResendSegmentStatsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResendSegmentStatsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResendSegmentStatsRequestDefaultTypeInternal() {}
  union {
    ResendSegmentStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResendSegmentStatsRequestDefaultTypeInternal _ResendSegmentStatsRequest_default_instance_;
PROTOBUF_CONSTEXPR ResendSegmentStatsResponse::ResendSegmentStatsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seg_resent_)*/{}
  , /*decltype(_impl_._seg_resent_cached_byte_size_)*/{0}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResendSegmentStatsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResendSegmentStatsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResendSegmentStatsResponseDefaultTypeInternal() {}
  union {
    ResendSegmentStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResendSegmentStatsResponseDefaultTypeInternal _ResendSegmentStatsResponse_default_instance_;
PROTOBUF_CONSTEXPR AddImportSegmentRequest::AddImportSegmentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_log_)*/{}
  , /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.segment_id_)*/int64_t{0}
  , /*decltype(_impl_.collection_id_)*/int64_t{0}
  , /*decltype(_impl_.partition_id_)*/int64_t{0}
  , /*decltype(_impl_.row_num_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddImportSegmentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddImportSegmentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddImportSegmentRequestDefaultTypeInternal() {}
  union {
    AddImportSegmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddImportSegmentRequestDefaultTypeInternal _AddImportSegmentRequest_default_instance_;
PROTOBUF_CONSTEXPR AddImportSegmentResponse::AddImportSegmentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_pos_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddImportSegmentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddImportSegmentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddImportSegmentResponseDefaultTypeInternal() {}
  union {
    AddImportSegmentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddImportSegmentResponseDefaultTypeInternal _AddImportSegmentResponse_default_instance_;
PROTOBUF_CONSTEXPR SaveImportSegmentRequest::SaveImportSegmentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dml_position_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.save_binlog_path_req_)*/nullptr
  , /*decltype(_impl_.segment_id_)*/int64_t{0}
  , /*decltype(_impl_.collection_id_)*/int64_t{0}
  , /*decltype(_impl_.partition_id_)*/int64_t{0}
  , /*decltype(_impl_.row_num_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SaveImportSegmentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SaveImportSegmentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SaveImportSegmentRequestDefaultTypeInternal() {}
  union {
    SaveImportSegmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SaveImportSegmentRequestDefaultTypeInternal _SaveImportSegmentRequest_default_instance_;
PROTOBUF_CONSTEXPR UnsetIsImportingStateRequest::UnsetIsImportingStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segment_ids_)*/{}
  , /*decltype(_impl_._segment_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsetIsImportingStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsetIsImportingStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsetIsImportingStateRequestDefaultTypeInternal() {}
  union {
    UnsetIsImportingStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsetIsImportingStateRequestDefaultTypeInternal _UnsetIsImportingStateRequest_default_instance_;
PROTOBUF_CONSTEXPR MarkSegmentsDroppedRequest::MarkSegmentsDroppedRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segment_ids_)*/{}
  , /*decltype(_impl_._segment_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarkSegmentsDroppedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkSegmentsDroppedRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkSegmentsDroppedRequestDefaultTypeInternal() {}
  union {
    MarkSegmentsDroppedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkSegmentsDroppedRequestDefaultTypeInternal _MarkSegmentsDroppedRequest_default_instance_;
PROTOBUF_CONSTEXPR SegmentReferenceLock::SegmentReferenceLock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentids_)*/{}
  , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.taskid_)*/int64_t{0}
  , /*decltype(_impl_.nodeid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentReferenceLockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentReferenceLockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentReferenceLockDefaultTypeInternal() {}
  union {
    SegmentReferenceLock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentReferenceLockDefaultTypeInternal _SegmentReferenceLock_default_instance_;
PROTOBUF_CONSTEXPR AlterCollectionRequest::AlterCollectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partitionids_)*/{}
  , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.start_positions_)*/{}
  , /*decltype(_impl_.properties_)*/{}
  , /*decltype(_impl_.schema_)*/nullptr
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlterCollectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlterCollectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlterCollectionRequestDefaultTypeInternal() {}
  union {
    AlterCollectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlterCollectionRequestDefaultTypeInternal _AlterCollectionRequest_default_instance_;
PROTOBUF_CONSTEXPR GcConfirmRequest::GcConfirmRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collection_id_)*/int64_t{0}
  , /*decltype(_impl_.partition_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GcConfirmRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GcConfirmRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GcConfirmRequestDefaultTypeInternal() {}
  union {
    GcConfirmRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GcConfirmRequestDefaultTypeInternal _GcConfirmRequest_default_instance_;
PROTOBUF_CONSTEXPR GcConfirmResponse::GcConfirmResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.gc_finished_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GcConfirmResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GcConfirmResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GcConfirmResponseDefaultTypeInternal() {}
  union {
    GcConfirmResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GcConfirmResponseDefaultTypeInternal _GcConfirmResponse_default_instance_;
PROTOBUF_CONSTEXPR ReportDataNodeTtMsgsRequest::ReportDataNodeTtMsgsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msgs_)*/{}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReportDataNodeTtMsgsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportDataNodeTtMsgsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportDataNodeTtMsgsRequestDefaultTypeInternal() {}
  union {
    ReportDataNodeTtMsgsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportDataNodeTtMsgsRequestDefaultTypeInternal _ReportDataNodeTtMsgsRequest_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace milvus
static ::_pb::Metadata file_level_metadata_data_5fcoord_2eproto[78];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_data_5fcoord_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_data_5fcoord_2eproto = nullptr;

const uint32_t TableStruct_data_5fcoord_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushRequest, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushRequest, _impl_.segmentids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushRequest, _impl_.isimport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushResponse, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushResponse, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushResponse, _impl_.segmentids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushResponse, _impl_.flushsegmentids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushResponse, _impl_.timeofseal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDRequest, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDRequest, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDRequest, _impl_.partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDRequest, _impl_.isimport_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDRequest, _impl_.importtaskid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AssignSegmentIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AssignSegmentIDRequest, _impl_.nodeid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AssignSegmentIDRequest, _impl_.peer_role_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AssignSegmentIDRequest, _impl_.segmentidrequests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDAssignment, _impl_.segid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDAssignment, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDAssignment, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDAssignment, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDAssignment, _impl_.partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDAssignment, _impl_.expire_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentIDAssignment, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AssignSegmentIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AssignSegmentIDResponse, _impl_.segidassignments_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AssignSegmentIDResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentStatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentStatesRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentStatesRequest, _impl_.segmentids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentStateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentStateInfo, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentStateInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentStateInfo, _impl_.start_position_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentStateInfo, _impl_.end_position_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentStateInfo, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentStatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentStatesResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentStatesResponse, _impl_.states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentInfoRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentInfoRequest, _impl_.segmentids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentInfoRequest, _impl_.includeunhealthy_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentInfoResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentInfoResponse, _impl_.infos_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentInfoResponse, _impl_.channel_checkpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetInsertBinlogPathsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetInsertBinlogPathsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetInsertBinlogPathsRequest, _impl_.segmentid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetInsertBinlogPathsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetInsertBinlogPathsResponse, _impl_.fieldids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetInsertBinlogPathsResponse, _impl_.paths_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetInsertBinlogPathsResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetCollectionStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetCollectionStatisticsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetCollectionStatisticsRequest, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetCollectionStatisticsRequest, _impl_.collectionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetCollectionStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetCollectionStatisticsResponse, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetCollectionStatisticsResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetPartitionStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetPartitionStatisticsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetPartitionStatisticsRequest, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetPartitionStatisticsRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetPartitionStatisticsRequest, _impl_.partitionids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetPartitionStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetPartitionStatisticsResponse, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetPartitionStatisticsResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentInfoChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::VchannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::VchannelInfo, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::VchannelInfo, _impl_.channelname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::VchannelInfo, _impl_.seek_position_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::VchannelInfo, _impl_.unflushedsegments_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::VchannelInfo, _impl_.flushedsegments_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::VchannelInfo, _impl_.dropped_segments_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::VchannelInfo, _impl_.unflushedsegmentids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::VchannelInfo, _impl_.flushedsegmentids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::VchannelInfo, _impl_.dropped_segmentids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::VchannelInfo, _impl_.indexed_segmentids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::VchannelInfo, _impl_.indexed_segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::WatchDmChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::WatchDmChannelsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::WatchDmChannelsRequest, _impl_.vchannels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushSegmentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushSegmentsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushSegmentsRequest, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushSegmentsRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FlushSegmentsRequest, _impl_.segmentids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentMsg, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentMsg, _impl_.segment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.insert_channel_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.num_of_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.max_row_num_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.last_expire_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.start_position_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.dml_position_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.binlogs_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.statslogs_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.deltalogs_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.createdbycompaction_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.compactionfrom_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.dropped_at_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.is_importing_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentInfo, _impl_.is_fake_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentStartPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentStartPosition, _impl_.start_position_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentStartPosition, _impl_.segmentid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveBinlogPathsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveBinlogPathsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveBinlogPathsRequest, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveBinlogPathsRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveBinlogPathsRequest, _impl_.field2binlogpaths_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveBinlogPathsRequest, _impl_.checkpoints_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveBinlogPathsRequest, _impl_.start_positions_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveBinlogPathsRequest, _impl_.flushed_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveBinlogPathsRequest, _impl_.field2statslogpaths_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveBinlogPathsRequest, _impl_.deltalogs_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveBinlogPathsRequest, _impl_.dropped_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveBinlogPathsRequest, _impl_.importing_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveBinlogPathsRequest, _impl_.channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CheckPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CheckPoint, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CheckPoint, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CheckPoint, _impl_.num_of_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DeltaLogInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DeltaLogInfo, _impl_.record_entries_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DeltaLogInfo, _impl_.timestamp_from_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DeltaLogInfo, _impl_.timestamp_to_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DeltaLogInfo, _impl_.delta_log_path_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DeltaLogInfo, _impl_.delta_log_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ChannelStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ChannelStatus, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ChannelStatus, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ChannelStatus, _impl_.collectionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DataNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DataNodeInfo, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DataNodeInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DataNodeInfo, _impl_.channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentBinlogs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentBinlogs, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentBinlogs, _impl_.fieldbinlogs_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentBinlogs, _impl_.num_of_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentBinlogs, _impl_.statslogs_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentBinlogs, _impl_.deltalogs_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentBinlogs, _impl_.insert_channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FieldBinlog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FieldBinlog, _impl_.fieldid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::FieldBinlog, _impl_.binlogs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::Binlog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::Binlog, _impl_.entries_num_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::Binlog, _impl_.timestamp_from_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::Binlog, _impl_.timestamp_to_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::Binlog, _impl_.log_path_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::Binlog, _impl_.log_size_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::Binlog, _impl_.logid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoResponse, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoResponse, _impl_.binlogs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoRequest, _impl_.partitionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoResponseV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoResponseV2, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoResponseV2, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoResponseV2, _impl_.segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoRequestV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoRequestV2, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoRequestV2, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetRecoveryInfoRequestV2, _impl_.partitionids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentsByStatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentsByStatesRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentsByStatesRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentsByStatesRequest, _impl_.partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentsByStatesRequest, _impl_.states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentsByStatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentsByStatesResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetSegmentsByStatesResponse, _impl_.segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetFlushedSegmentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetFlushedSegmentsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetFlushedSegmentsRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetFlushedSegmentsRequest, _impl_.partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetFlushedSegmentsRequest, _impl_.includeunhealthy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetFlushedSegmentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetFlushedSegmentsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GetFlushedSegmentsResponse, _impl_.segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentFlushCompletedMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentFlushCompletedMsg, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentFlushCompletedMsg, _impl_.segment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ChannelWatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ChannelWatchInfo, _impl_.vchan_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ChannelWatchInfo, _impl_.startts_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ChannelWatchInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ChannelWatchInfo, _impl_.timeoutts_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ChannelWatchInfo, _impl_.schema_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ChannelWatchInfo, _impl_.progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionStateRequest, _impl_.base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SyncSegmentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SyncSegmentsRequest, _impl_.planid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SyncSegmentsRequest, _impl_.compacted_to_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SyncSegmentsRequest, _impl_.num_of_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SyncSegmentsRequest, _impl_.compacted_from_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SyncSegmentsRequest, _impl_.stats_logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionSegmentBinlogs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionSegmentBinlogs, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionSegmentBinlogs, _impl_.fieldbinlogs_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionSegmentBinlogs, _impl_.field2statslogpaths_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionSegmentBinlogs, _impl_.deltalogs_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionSegmentBinlogs, _impl_.insert_channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionPlan, _impl_.planid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionPlan, _impl_.segmentbinlogs_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionPlan, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionPlan, _impl_.timeout_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionPlan, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionPlan, _impl_.timetravel_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionPlan, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionPlan, _impl_.collection_ttl_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionPlan, _impl_.total_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionResult, _impl_.planid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionResult, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionResult, _impl_.num_of_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionResult, _impl_.insert_logs_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionResult, _impl_.field2statslogpaths_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionResult, _impl_.deltalogs_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionResult, _impl_.channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionStateResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionStateResult, _impl_.planid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionStateResult, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionStateResult, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionStateResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::CompactionStateResponse, _impl_.results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentFieldBinlogMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentFieldBinlogMeta, _impl_.fieldid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentFieldBinlogMeta, _impl_.binlog_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::WatchChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::WatchChannelsRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::WatchChannelsRequest, _impl_.channelnames_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::WatchChannelsRequest, _impl_.start_positions_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::WatchChannelsRequest, _impl_.schema_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::WatchChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::WatchChannelsResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SetSegmentStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SetSegmentStateRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SetSegmentStateRequest, _impl_.segment_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SetSegmentStateRequest, _impl_.new_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SetSegmentStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SetSegmentStateResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelRequest, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelRequest, _impl_.segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelSegment, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelSegment, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelSegment, _impl_.field2binlogpaths_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelSegment, _impl_.field2statslogpaths_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelSegment, _impl_.deltalogs_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelSegment, _impl_.startposition_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelSegment, _impl_.checkpoint_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelSegment, _impl_.numofrows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::DropVirtualChannelResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTask, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTask, _impl_.collection_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTask, _impl_.partition_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTask, _impl_.channel_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTask, _impl_.row_based_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTask, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTask, _impl_.files_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTask, _impl_.infos_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTask, _impl_.database_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskState, _impl_.statecode_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskState, _impl_.segments_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskState, _impl_.row_ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskState, _impl_.row_count_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskState, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.datanode_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.collection_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.partition_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.channel_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.row_based_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.files_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.create_ts_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.partition_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.infos_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.start_ts_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskInfo, _impl_.database_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskResponse, _impl_.datanode_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskRequest, _impl_.import_task_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ImportTaskRequest, _impl_.working_nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::UpdateSegmentStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::UpdateSegmentStatisticsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::UpdateSegmentStatisticsRequest, _impl_.stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::UpdateChannelCheckpointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::UpdateChannelCheckpointRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::UpdateChannelCheckpointRequest, _impl_.vchannel_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::UpdateChannelCheckpointRequest, _impl_.position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ResendSegmentStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ResendSegmentStatsRequest, _impl_.base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ResendSegmentStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ResendSegmentStatsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ResendSegmentStatsResponse, _impl_.seg_resent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AddImportSegmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AddImportSegmentRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AddImportSegmentRequest, _impl_.segment_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AddImportSegmentRequest, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AddImportSegmentRequest, _impl_.collection_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AddImportSegmentRequest, _impl_.partition_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AddImportSegmentRequest, _impl_.row_num_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AddImportSegmentRequest, _impl_.stats_log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AddImportSegmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AddImportSegmentResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AddImportSegmentResponse, _impl_.channel_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveImportSegmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveImportSegmentRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveImportSegmentRequest, _impl_.segment_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveImportSegmentRequest, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveImportSegmentRequest, _impl_.collection_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveImportSegmentRequest, _impl_.partition_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveImportSegmentRequest, _impl_.row_num_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveImportSegmentRequest, _impl_.save_binlog_path_req_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SaveImportSegmentRequest, _impl_.dml_position_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::UnsetIsImportingStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::UnsetIsImportingStateRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::UnsetIsImportingStateRequest, _impl_.segment_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::MarkSegmentsDroppedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::MarkSegmentsDroppedRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::MarkSegmentsDroppedRequest, _impl_.segment_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentReferenceLock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentReferenceLock, _impl_.taskid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentReferenceLock, _impl_.nodeid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::SegmentReferenceLock, _impl_.segmentids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AlterCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AlterCollectionRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AlterCollectionRequest, _impl_.schema_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AlterCollectionRequest, _impl_.partitionids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AlterCollectionRequest, _impl_.start_positions_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::AlterCollectionRequest, _impl_.properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GcConfirmRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GcConfirmRequest, _impl_.collection_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GcConfirmRequest, _impl_.partition_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GcConfirmResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GcConfirmResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::GcConfirmResponse, _impl_.gc_finished_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ReportDataNodeTtMsgsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ReportDataNodeTtMsgsRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::data::ReportDataNodeTtMsgsRequest, _impl_.msgs_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::milvus::proto::data::Empty)},
  { 6, -1, -1, sizeof(::milvus::proto::data::FlushRequest)},
  { 17, -1, -1, sizeof(::milvus::proto::data::FlushResponse)},
  { 29, -1, -1, sizeof(::milvus::proto::data::SegmentIDRequest)},
  { 41, -1, -1, sizeof(::milvus::proto::data::AssignSegmentIDRequest)},
  { 50, -1, -1, sizeof(::milvus::proto::data::SegmentIDAssignment)},
  { 63, -1, -1, sizeof(::milvus::proto::data::AssignSegmentIDResponse)},
  { 71, -1, -1, sizeof(::milvus::proto::data::GetSegmentStatesRequest)},
  { 79, -1, -1, sizeof(::milvus::proto::data::SegmentStateInfo)},
  { 90, -1, -1, sizeof(::milvus::proto::data::GetSegmentStatesResponse)},
  { 98, -1, -1, sizeof(::milvus::proto::data::GetSegmentInfoRequest)},
  { 107, 115, -1, sizeof(::milvus::proto::data::GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse)},
  { 117, -1, -1, sizeof(::milvus::proto::data::GetSegmentInfoResponse)},
  { 126, -1, -1, sizeof(::milvus::proto::data::GetInsertBinlogPathsRequest)},
  { 134, -1, -1, sizeof(::milvus::proto::data::GetInsertBinlogPathsResponse)},
  { 143, -1, -1, sizeof(::milvus::proto::data::GetCollectionStatisticsRequest)},
  { 152, -1, -1, sizeof(::milvus::proto::data::GetCollectionStatisticsResponse)},
  { 160, -1, -1, sizeof(::milvus::proto::data::GetPartitionStatisticsRequest)},
  { 170, -1, -1, sizeof(::milvus::proto::data::GetPartitionStatisticsResponse)},
  { 178, -1, -1, sizeof(::milvus::proto::data::GetSegmentInfoChannelRequest)},
  { 184, -1, -1, sizeof(::milvus::proto::data::VchannelInfo)},
  { 201, -1, -1, sizeof(::milvus::proto::data::WatchDmChannelsRequest)},
  { 209, -1, -1, sizeof(::milvus::proto::data::FlushSegmentsRequest)},
  { 219, -1, -1, sizeof(::milvus::proto::data::SegmentMsg)},
  { 227, -1, -1, sizeof(::milvus::proto::data::SegmentInfo)},
  { 251, -1, -1, sizeof(::milvus::proto::data::SegmentStartPosition)},
  { 259, -1, -1, sizeof(::milvus::proto::data::SaveBinlogPathsRequest)},
  { 277, -1, -1, sizeof(::milvus::proto::data::CheckPoint)},
  { 286, -1, -1, sizeof(::milvus::proto::data::DeltaLogInfo)},
  { 297, -1, -1, sizeof(::milvus::proto::data::ChannelStatus)},
  { 306, -1, -1, sizeof(::milvus::proto::data::DataNodeInfo)},
  { 315, -1, -1, sizeof(::milvus::proto::data::SegmentBinlogs)},
  { 327, -1, -1, sizeof(::milvus::proto::data::FieldBinlog)},
  { 335, -1, -1, sizeof(::milvus::proto::data::Binlog)},
  { 347, -1, -1, sizeof(::milvus::proto::data::GetRecoveryInfoResponse)},
  { 356, -1, -1, sizeof(::milvus::proto::data::GetRecoveryInfoRequest)},
  { 365, -1, -1, sizeof(::milvus::proto::data::GetRecoveryInfoResponseV2)},
  { 374, -1, -1, sizeof(::milvus::proto::data::GetRecoveryInfoRequestV2)},
  { 383, -1, -1, sizeof(::milvus::proto::data::GetSegmentsByStatesRequest)},
  { 393, -1, -1, sizeof(::milvus::proto::data::GetSegmentsByStatesResponse)},
  { 401, -1, -1, sizeof(::milvus::proto::data::GetFlushedSegmentsRequest)},
  { 411, -1, -1, sizeof(::milvus::proto::data::GetFlushedSegmentsResponse)},
  { 419, -1, -1, sizeof(::milvus::proto::data::SegmentFlushCompletedMsg)},
  { 427, -1, -1, sizeof(::milvus::proto::data::ChannelWatchInfo)},
  { 439, -1, -1, sizeof(::milvus::proto::data::CompactionStateRequest)},
  { 446, -1, -1, sizeof(::milvus::proto::data::SyncSegmentsRequest)},
  { 457, -1, -1, sizeof(::milvus::proto::data::CompactionSegmentBinlogs)},
  { 468, -1, -1, sizeof(::milvus::proto::data::CompactionPlan)},
  { 483, -1, -1, sizeof(::milvus::proto::data::CompactionResult)},
  { 496, -1, -1, sizeof(::milvus::proto::data::CompactionStateResult)},
  { 505, -1, -1, sizeof(::milvus::proto::data::CompactionStateResponse)},
  { 513, -1, -1, sizeof(::milvus::proto::data::SegmentFieldBinlogMeta)},
  { 521, -1, -1, sizeof(::milvus::proto::data::WatchChannelsRequest)},
  { 531, -1, -1, sizeof(::milvus::proto::data::WatchChannelsResponse)},
  { 538, -1, -1, sizeof(::milvus::proto::data::SetSegmentStateRequest)},
  { 547, -1, -1, sizeof(::milvus::proto::data::SetSegmentStateResponse)},
  { 554, -1, -1, sizeof(::milvus::proto::data::DropVirtualChannelRequest)},
  { 563, -1, -1, sizeof(::milvus::proto::data::DropVirtualChannelSegment)},
  { 577, -1, -1, sizeof(::milvus::proto::data::DropVirtualChannelResponse)},
  { 584, -1, -1, sizeof(::milvus::proto::data::ImportTask)},
  { 599, -1, -1, sizeof(::milvus::proto::data::ImportTaskState)},
  { 610, -1, -1, sizeof(::milvus::proto::data::ImportTaskInfo)},
  { 632, -1, -1, sizeof(::milvus::proto::data::ImportTaskResponse)},
  { 640, -1, -1, sizeof(::milvus::proto::data::ImportTaskRequest)},
  { 649, -1, -1, sizeof(::milvus::proto::data::UpdateSegmentStatisticsRequest)},
  { 657, -1, -1, sizeof(::milvus::proto::data::UpdateChannelCheckpointRequest)},
  { 666, -1, -1, sizeof(::milvus::proto::data::ResendSegmentStatsRequest)},
  { 673, -1, -1, sizeof(::milvus::proto::data::ResendSegmentStatsResponse)},
  { 681, -1, -1, sizeof(::milvus::proto::data::AddImportSegmentRequest)},
  { 694, -1, -1, sizeof(::milvus::proto::data::AddImportSegmentResponse)},
  { 702, -1, -1, sizeof(::milvus::proto::data::SaveImportSegmentRequest)},
  { 716, -1, -1, sizeof(::milvus::proto::data::UnsetIsImportingStateRequest)},
  { 724, -1, -1, sizeof(::milvus::proto::data::MarkSegmentsDroppedRequest)},
  { 732, -1, -1, sizeof(::milvus::proto::data::SegmentReferenceLock)},
  { 741, -1, -1, sizeof(::milvus::proto::data::AlterCollectionRequest)},
  { 752, -1, -1, sizeof(::milvus::proto::data::GcConfirmRequest)},
  { 760, -1, -1, sizeof(::milvus::proto::data::GcConfirmResponse)},
  { 768, -1, -1, sizeof(::milvus::proto::data::ReportDataNodeTtMsgsRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::milvus::proto::data::_Empty_default_instance_._instance,
  &::milvus::proto::data::_FlushRequest_default_instance_._instance,
  &::milvus::proto::data::_FlushResponse_default_instance_._instance,
  &::milvus::proto::data::_SegmentIDRequest_default_instance_._instance,
  &::milvus::proto::data::_AssignSegmentIDRequest_default_instance_._instance,
  &::milvus::proto::data::_SegmentIDAssignment_default_instance_._instance,
  &::milvus::proto::data::_AssignSegmentIDResponse_default_instance_._instance,
  &::milvus::proto::data::_GetSegmentStatesRequest_default_instance_._instance,
  &::milvus::proto::data::_SegmentStateInfo_default_instance_._instance,
  &::milvus::proto::data::_GetSegmentStatesResponse_default_instance_._instance,
  &::milvus::proto::data::_GetSegmentInfoRequest_default_instance_._instance,
  &::milvus::proto::data::_GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse_default_instance_._instance,
  &::milvus::proto::data::_GetSegmentInfoResponse_default_instance_._instance,
  &::milvus::proto::data::_GetInsertBinlogPathsRequest_default_instance_._instance,
  &::milvus::proto::data::_GetInsertBinlogPathsResponse_default_instance_._instance,
  &::milvus::proto::data::_GetCollectionStatisticsRequest_default_instance_._instance,
  &::milvus::proto::data::_GetCollectionStatisticsResponse_default_instance_._instance,
  &::milvus::proto::data::_GetPartitionStatisticsRequest_default_instance_._instance,
  &::milvus::proto::data::_GetPartitionStatisticsResponse_default_instance_._instance,
  &::milvus::proto::data::_GetSegmentInfoChannelRequest_default_instance_._instance,
  &::milvus::proto::data::_VchannelInfo_default_instance_._instance,
  &::milvus::proto::data::_WatchDmChannelsRequest_default_instance_._instance,
  &::milvus::proto::data::_FlushSegmentsRequest_default_instance_._instance,
  &::milvus::proto::data::_SegmentMsg_default_instance_._instance,
  &::milvus::proto::data::_SegmentInfo_default_instance_._instance,
  &::milvus::proto::data::_SegmentStartPosition_default_instance_._instance,
  &::milvus::proto::data::_SaveBinlogPathsRequest_default_instance_._instance,
  &::milvus::proto::data::_CheckPoint_default_instance_._instance,
  &::milvus::proto::data::_DeltaLogInfo_default_instance_._instance,
  &::milvus::proto::data::_ChannelStatus_default_instance_._instance,
  &::milvus::proto::data::_DataNodeInfo_default_instance_._instance,
  &::milvus::proto::data::_SegmentBinlogs_default_instance_._instance,
  &::milvus::proto::data::_FieldBinlog_default_instance_._instance,
  &::milvus::proto::data::_Binlog_default_instance_._instance,
  &::milvus::proto::data::_GetRecoveryInfoResponse_default_instance_._instance,
  &::milvus::proto::data::_GetRecoveryInfoRequest_default_instance_._instance,
  &::milvus::proto::data::_GetRecoveryInfoResponseV2_default_instance_._instance,
  &::milvus::proto::data::_GetRecoveryInfoRequestV2_default_instance_._instance,
  &::milvus::proto::data::_GetSegmentsByStatesRequest_default_instance_._instance,
  &::milvus::proto::data::_GetSegmentsByStatesResponse_default_instance_._instance,
  &::milvus::proto::data::_GetFlushedSegmentsRequest_default_instance_._instance,
  &::milvus::proto::data::_GetFlushedSegmentsResponse_default_instance_._instance,
  &::milvus::proto::data::_SegmentFlushCompletedMsg_default_instance_._instance,
  &::milvus::proto::data::_ChannelWatchInfo_default_instance_._instance,
  &::milvus::proto::data::_CompactionStateRequest_default_instance_._instance,
  &::milvus::proto::data::_SyncSegmentsRequest_default_instance_._instance,
  &::milvus::proto::data::_CompactionSegmentBinlogs_default_instance_._instance,
  &::milvus::proto::data::_CompactionPlan_default_instance_._instance,
  &::milvus::proto::data::_CompactionResult_default_instance_._instance,
  &::milvus::proto::data::_CompactionStateResult_default_instance_._instance,
  &::milvus::proto::data::_CompactionStateResponse_default_instance_._instance,
  &::milvus::proto::data::_SegmentFieldBinlogMeta_default_instance_._instance,
  &::milvus::proto::data::_WatchChannelsRequest_default_instance_._instance,
  &::milvus::proto::data::_WatchChannelsResponse_default_instance_._instance,
  &::milvus::proto::data::_SetSegmentStateRequest_default_instance_._instance,
  &::milvus::proto::data::_SetSegmentStateResponse_default_instance_._instance,
  &::milvus::proto::data::_DropVirtualChannelRequest_default_instance_._instance,
  &::milvus::proto::data::_DropVirtualChannelSegment_default_instance_._instance,
  &::milvus::proto::data::_DropVirtualChannelResponse_default_instance_._instance,
  &::milvus::proto::data::_ImportTask_default_instance_._instance,
  &::milvus::proto::data::_ImportTaskState_default_instance_._instance,
  &::milvus::proto::data::_ImportTaskInfo_default_instance_._instance,
  &::milvus::proto::data::_ImportTaskResponse_default_instance_._instance,
  &::milvus::proto::data::_ImportTaskRequest_default_instance_._instance,
  &::milvus::proto::data::_UpdateSegmentStatisticsRequest_default_instance_._instance,
  &::milvus::proto::data::_UpdateChannelCheckpointRequest_default_instance_._instance,
  &::milvus::proto::data::_ResendSegmentStatsRequest_default_instance_._instance,
  &::milvus::proto::data::_ResendSegmentStatsResponse_default_instance_._instance,
  &::milvus::proto::data::_AddImportSegmentRequest_default_instance_._instance,
  &::milvus::proto::data::_AddImportSegmentResponse_default_instance_._instance,
  &::milvus::proto::data::_SaveImportSegmentRequest_default_instance_._instance,
  &::milvus::proto::data::_UnsetIsImportingStateRequest_default_instance_._instance,
  &::milvus::proto::data::_MarkSegmentsDroppedRequest_default_instance_._instance,
  &::milvus::proto::data::_SegmentReferenceLock_default_instance_._instance,
  &::milvus::proto::data::_AlterCollectionRequest_default_instance_._instance,
  &::milvus::proto::data::_GcConfirmRequest_default_instance_._instance,
  &::milvus::proto::data::_GcConfirmResponse_default_instance_._instance,
  &::milvus::proto::data::_ReportDataNodeTtMsgsRequest_default_instance_._instance,
};

const char descriptor_table_protodef_data_5fcoord_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020data_coord.proto\022\021milvus.proto.data\032\014c"
  "ommon.proto\032\016internal.proto\032\014milvus.prot"
  "o\032\014schema.proto\032\tmsg.proto\032\021index_coord."
  "proto\"\007\n\005Empty\"\204\001\n\014FlushRequest\022*\n\004base\030"
  "\001 \001(\0132\034.milvus.proto.common.MsgBase\022\014\n\004d"
  "bID\030\002 \001(\003\022\022\n\nsegmentIDs\030\003 \003(\003\022\024\n\014collect"
  "ionID\030\004 \001(\003\022\020\n\010isImport\030\005 \001(\010\"\241\001\n\rFlushR"
  "esponse\022+\n\006status\030\001 \001(\0132\033.milvus.proto.c"
  "ommon.Status\022\014\n\004dbID\030\002 \001(\003\022\024\n\014collection"
  "ID\030\003 \001(\003\022\022\n\nsegmentIDs\030\004 \003(\003\022\027\n\017flushSeg"
  "mentIDs\030\005 \003(\003\022\022\n\ntimeOfSeal\030\006 \001(\003\"\212\001\n\020Se"
  "gmentIDRequest\022\r\n\005count\030\001 \001(\r\022\024\n\014channel"
  "_name\030\002 \001(\t\022\024\n\014collectionID\030\003 \001(\003\022\023\n\013par"
  "titionID\030\004 \001(\003\022\020\n\010isImport\030\005 \001(\010\022\024\n\014impo"
  "rtTaskID\030\006 \001(\003\"{\n\026AssignSegmentIDRequest"
  "\022\016\n\006nodeID\030\001 \001(\003\022\021\n\tpeer_role\030\002 \001(\t\022>\n\021s"
  "egmentIDRequests\030\003 \003(\0132#.milvus.proto.da"
  "ta.SegmentIDRequest\"\266\001\n\023SegmentIDAssignm"
  "ent\022\r\n\005segID\030\001 \001(\003\022\024\n\014channel_name\030\002 \001(\t"
  "\022\r\n\005count\030\003 \001(\r\022\024\n\014collectionID\030\004 \001(\003\022\023\n"
  "\013partitionID\030\005 \001(\003\022\023\n\013expire_time\030\006 \001(\004\022"
  "+\n\006status\030\007 \001(\0132\033.milvus.proto.common.St"
  "atus\"\210\001\n\027AssignSegmentIDResponse\022@\n\020segI"
  "DAssignments\030\001 \003(\0132&.milvus.proto.data.S"
  "egmentIDAssignment\022+\n\006status\030\002 \001(\0132\033.mil"
  "vus.proto.common.Status\"Y\n\027GetSegmentSta"
  "tesRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto."
  "common.MsgBase\022\022\n\nsegmentIDs\030\002 \003(\003\"\360\001\n\020S"
  "egmentStateInfo\022\021\n\tsegmentID\030\001 \001(\003\0220\n\005st"
  "ate\030\002 \001(\0162!.milvus.proto.common.SegmentS"
  "tate\0225\n\016start_position\030\003 \001(\0132\035.milvus.pr"
  "oto.msg.MsgPosition\0223\n\014end_position\030\004 \001("
  "\0132\035.milvus.proto.msg.MsgPosition\022+\n\006stat"
  "us\030\005 \001(\0132\033.milvus.proto.common.Status\"|\n"
  "\030GetSegmentStatesResponse\022+\n\006status\030\001 \001("
  "\0132\033.milvus.proto.common.Status\0223\n\006states"
  "\030\002 \003(\0132#.milvus.proto.data.SegmentStateI"
  "nfo\"q\n\025GetSegmentInfoRequest\022*\n\004base\030\001 \001"
  "(\0132\034.milvus.proto.common.MsgBase\022\022\n\nsegm"
  "entIDs\030\002 \003(\003\022\030\n\020includeUnHealthy\030\003 \001(\010\"\253"
  "\002\n\026GetSegmentInfoResponse\022+\n\006status\030\001 \001("
  "\0132\033.milvus.proto.common.Status\022-\n\005infos\030"
  "\002 \003(\0132\036.milvus.proto.data.SegmentInfo\022\\\n"
  "\022channel_checkpoint\030\003 \003(\0132@.milvus.proto"
  ".data.GetSegmentInfoResponse.ChannelChec"
  "kpointEntry\032W\n\026ChannelCheckpointEntry\022\013\n"
  "\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.milvus.proto"
  ".msg.MsgPosition:\0028\001\"\\\n\033GetInsertBinlogP"
  "athsRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto"
  ".common.MsgBase\022\021\n\tsegmentID\030\002 \001(\003\"\217\001\n\034G"
  "etInsertBinlogPathsResponse\022\020\n\010fieldIDs\030"
  "\001 \003(\003\0220\n\005paths\030\002 \003(\0132!.milvus.proto.inte"
  "rnal.StringList\022+\n\006status\030\003 \001(\0132\033.milvus"
  ".proto.common.Status\"p\n\036GetCollectionSta"
  "tisticsRequest\022*\n\004base\030\001 \001(\0132\034.milvus.pr"
  "oto.common.MsgBase\022\014\n\004dbID\030\002 \001(\003\022\024\n\014coll"
  "ectionID\030\003 \001(\003\"\200\001\n\037GetCollectionStatisti"
  "csResponse\0220\n\005stats\030\001 \003(\0132!.milvus.proto"
  ".common.KeyValuePair\022+\n\006status\030\002 \001(\0132\033.m"
  "ilvus.proto.common.Status\"\205\001\n\035GetPartiti"
  "onStatisticsRequest\022*\n\004base\030\001 \001(\0132\034.milv"
  "us.proto.common.MsgBase\022\014\n\004dbID\030\002 \001(\003\022\024\n"
  "\014collectionID\030\003 \001(\003\022\024\n\014partitionIDs\030\004 \003("
  "\003\"\177\n\036GetPartitionStatisticsResponse\0220\n\005s"
  "tats\030\001 \003(\0132!.milvus.proto.common.KeyValu"
  "ePair\022+\n\006status\030\002 \001(\0132\033.milvus.proto.com"
  "mon.Status\"\036\n\034GetSegmentInfoChannelReque"
  "st\"\307\003\n\014VchannelInfo\022\024\n\014collectionID\030\001 \001("
  "\003\022\023\n\013channelName\030\002 \001(\t\0224\n\rseek_position\030"
  "\003 \001(\0132\035.milvus.proto.msg.MsgPosition\0229\n\021"
  "unflushedSegments\030\004 \003(\0132\036.milvus.proto.d"
  "ata.SegmentInfo\0227\n\017flushedSegments\030\005 \003(\013"
  "2\036.milvus.proto.data.SegmentInfo\0228\n\020drop"
  "ped_segments\030\006 \003(\0132\036.milvus.proto.data.S"
  "egmentInfo\022\033\n\023unflushedSegmentIds\030\007 \003(\003\022"
  "\031\n\021flushedSegmentIds\030\010 \003(\003\022\032\n\022dropped_se"
  "gmentIds\030\t \003(\003\022\032\n\022indexed_segmentIds\030\n \003"
  "(\003\0228\n\020indexed_segments\030\013 \003(\0132\036.milvus.pr"
  "oto.data.SegmentInfo\"x\n\026WatchDmChannelsR"
  "equest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.comm"
  "on.MsgBase\0222\n\tvchannels\030\002 \003(\0132\037.milvus.p"
  "roto.data.VchannelInfo\"z\n\024FlushSegmentsR"
  "equest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.comm"
  "on.MsgBase\022\014\n\004dbID\030\002 \001(\003\022\024\n\014collectionID"
  "\030\003 \001(\003\022\022\n\nsegmentIDs\030\004 \003(\003\"i\n\nSegmentMsg"
  "\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.Msg"
  "Base\022/\n\007segment\030\002 \001(\0132\036.milvus.proto.dat"
  "a.SegmentInfo\"\305\004\n\013SegmentInfo\022\n\n\002ID\030\001 \001("
  "\003\022\024\n\014collectionID\030\002 \001(\003\022\023\n\013partitionID\030\003"
  " \001(\003\022\026\n\016insert_channel\030\004 \001(\t\022\023\n\013num_of_r"
  "ows\030\005 \001(\003\0220\n\005state\030\006 \001(\0162!.milvus.proto."
  "common.SegmentState\022\023\n\013max_row_num\030\007 \001(\003"
  "\022\030\n\020last_expire_time\030\010 \001(\004\0225\n\016start_posi"
  "tion\030\t \001(\0132\035.milvus.proto.msg.MsgPositio"
  "n\0223\n\014dml_position\030\n \001(\0132\035.milvus.proto.m"
  "sg.MsgPosition\022/\n\007binlogs\030\013 \003(\0132\036.milvus"
  ".proto.data.FieldBinlog\0221\n\tstatslogs\030\014 \003"
  "(\0132\036.milvus.proto.data.FieldBinlog\0221\n\tde"
  "ltalogs\030\r \003(\0132\036.milvus.proto.data.FieldB"
  "inlog\022\033\n\023createdByCompaction\030\016 \001(\010\022\026\n\016co"
  "mpactionFrom\030\017 \003(\003\022\022\n\ndropped_at\030\020 \001(\004\022\024"
  "\n\014is_importing\030\021 \001(\010\022\017\n\007is_fake\030\022 \001(\010\"`\n"
  "\024SegmentStartPosition\0225\n\016start_position\030"
  "\001 \001(\0132\035.milvus.proto.msg.MsgPosition\022\021\n\t"
  "segmentID\030\002 \001(\003\"\324\003\n\026SaveBinlogPathsReque"
  "st\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.M"
  "sgBase\022\021\n\tsegmentID\030\002 \001(\003\022\024\n\014collectionI"
  "D\030\003 \001(\003\0229\n\021field2BinlogPaths\030\004 \003(\0132\036.mil"
  "vus.proto.data.FieldBinlog\0222\n\013checkPoint"
  "s\030\005 \003(\0132\035.milvus.proto.data.CheckPoint\022@"
  "\n\017start_positions\030\006 \003(\0132\'.milvus.proto.d"
  "ata.SegmentStartPosition\022\017\n\007flushed\030\007 \001("
  "\010\022;\n\023field2StatslogPaths\030\010 \003(\0132\036.milvus."
  "proto.data.FieldBinlog\0221\n\tdeltalogs\030\t \003("
  "\0132\036.milvus.proto.data.FieldBinlog\022\017\n\007dro"
  "pped\030\n \001(\010\022\021\n\timporting\030\013 \001(\010\022\017\n\007channel"
  "\030\014 \001(\t\"e\n\nCheckPoint\022\021\n\tsegmentID\030\001 \001(\003\022"
  "/\n\010position\030\002 \001(\0132\035.milvus.proto.msg.Msg"
  "Position\022\023\n\013num_of_rows\030\003 \001(\003\"\204\001\n\014DeltaL"
  "ogInfo\022\026\n\016record_entries\030\001 \001(\004\022\026\n\016timest"
  "amp_from\030\002 \001(\004\022\024\n\014timestamp_to\030\003 \001(\004\022\026\n\016"
  "delta_log_path\030\004 \001(\t\022\026\n\016delta_log_size\030\005"
  " \001(\003\"h\n\rChannelStatus\022\014\n\004name\030\001 \001(\t\0223\n\005s"
  "tate\030\002 \001(\0162$.milvus.proto.data.ChannelWa"
  "tchState\022\024\n\014collectionID\030\003 \001(\003\"d\n\014DataNo"
  "deInfo\022\017\n\007address\030\001 \001(\t\022\017\n\007version\030\002 \001(\003"
  "\0222\n\010channels\030\003 \003(\0132 .milvus.proto.data.C"
  "hannelStatus\"\354\001\n\016SegmentBinlogs\022\021\n\tsegme"
  "ntID\030\001 \001(\003\0224\n\014fieldBinlogs\030\002 \003(\0132\036.milvu"
  "s.proto.data.FieldBinlog\022\023\n\013num_of_rows\030"
  "\003 \001(\003\0221\n\tstatslogs\030\004 \003(\0132\036.milvus.proto."
  "data.FieldBinlog\0221\n\tdeltalogs\030\005 \003(\0132\036.mi"
  "lvus.proto.data.FieldBinlog\022\026\n\016insert_ch"
  "annel\030\006 \001(\t\"J\n\013FieldBinlog\022\017\n\007fieldID\030\001 "
  "\001(\003\022*\n\007binlogs\030\002 \003(\0132\031.milvus.proto.data"
  ".Binlog\"~\n\006Binlog\022\023\n\013entries_num\030\001 \001(\003\022\026"
  "\n\016timestamp_from\030\002 \001(\004\022\024\n\014timestamp_to\030\003"
  " \001(\004\022\020\n\010log_path\030\004 \001(\t\022\020\n\010log_size\030\005 \001(\003"
  "\022\r\n\005logID\030\006 \001(\003\"\255\001\n\027GetRecoveryInfoRespo"
  "nse\022+\n\006status\030\001 \001(\0132\033.milvus.proto.commo"
  "n.Status\0221\n\010channels\030\002 \003(\0132\037.milvus.prot"
  "o.data.VchannelInfo\0222\n\007binlogs\030\003 \003(\0132!.m"
  "ilvus.proto.data.SegmentBinlogs\"o\n\026GetRe"
  "coveryInfoRequest\022*\n\004base\030\001 \001(\0132\034.milvus"
  ".proto.common.MsgBase\022\024\n\014collectionID\030\002 "
  "\001(\003\022\023\n\013partitionID\030\003 \001(\003\"\255\001\n\031GetRecovery"
  "InfoResponseV2\022+\n\006status\030\001 \001(\0132\033.milvus."
  "proto.common.Status\0221\n\010channels\030\002 \003(\0132\037."
  "milvus.proto.data.VchannelInfo\0220\n\010segmen"
  "ts\030\003 \003(\0132\036.milvus.proto.data.SegmentInfo"
  "\"r\n\030GetRecoveryInfoRequestV2\022*\n\004base\030\001 \001"
  "(\0132\034.milvus.proto.common.MsgBase\022\024\n\014coll"
  "ectionID\030\002 \001(\003\022\024\n\014partitionIDs\030\003 \003(\003\"\246\001\n"
  "\032GetSegmentsByStatesRequest\022*\n\004base\030\001 \001("
  "\0132\034.milvus.proto.common.MsgBase\022\024\n\014colle"
  "ctionID\030\002 \001(\003\022\023\n\013partitionID\030\003 \001(\003\0221\n\006st"
  "ates\030\004 \003(\0162!.milvus.proto.common.Segment"
  "State\"\\\n\033GetSegmentsByStatesResponse\022+\n\006"
  "status\030\001 \001(\0132\033.milvus.proto.common.Statu"
  "s\022\020\n\010segments\030\002 \003(\003\"\214\001\n\031GetFlushedSegmen"
  "tsRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.c"
  "ommon.MsgBase\022\024\n\014collectionID\030\002 \001(\003\022\023\n\013p"
  "artitionID\030\003 \001(\003\022\030\n\020includeUnhealthy\030\004 \001"
  "(\010\"[\n\032GetFlushedSegmentsResponse\022+\n\006stat"
  "us\030\001 \001(\0132\033.milvus.proto.common.Status\022\020\n"
  "\010segments\030\002 \003(\003\"w\n\030SegmentFlushCompleted"
  "Msg\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common."
  "MsgBase\022/\n\007segment\030\002 \001(\0132\036.milvus.proto."
  "data.SegmentInfo\"\344\001\n\020ChannelWatchInfo\022.\n"
  "\005vchan\030\001 \001(\0132\037.milvus.proto.data.Vchanne"
  "lInfo\022\017\n\007startTs\030\002 \001(\003\0223\n\005state\030\003 \001(\0162$."
  "milvus.proto.data.ChannelWatchState\022\021\n\tt"
  "imeoutTs\030\004 \001(\003\0225\n\006schema\030\005 \001(\0132%.milvus."
  "proto.schema.CollectionSchema\022\020\n\010progres"
  "s\030\006 \001(\005\"D\n\026CompactionStateRequest\022*\n\004bas"
  "e\030\001 \001(\0132\034.milvus.proto.common.MsgBase\"\234\001"
  "\n\023SyncSegmentsRequest\022\016\n\006planID\030\001 \001(\003\022\024\n"
  "\014compacted_to\030\002 \001(\003\022\023\n\013num_of_rows\030\003 \001(\003"
  "\022\026\n\016compacted_from\030\004 \003(\003\0222\n\nstats_logs\030\005"
  " \003(\0132\036.milvus.proto.data.FieldBinlog\"\353\001\n"
  "\030CompactionSegmentBinlogs\022\021\n\tsegmentID\030\001"
  " \001(\003\0224\n\014fieldBinlogs\030\002 \003(\0132\036.milvus.prot"
  "o.data.FieldBinlog\022;\n\023field2StatslogPath"
  "s\030\003 \003(\0132\036.milvus.proto.data.FieldBinlog\022"
  "1\n\tdeltalogs\030\004 \003(\0132\036.milvus.proto.data.F"
  "ieldBinlog\022\026\n\016insert_channel\030\005 \001(\t\"\227\002\n\016C"
  "ompactionPlan\022\016\n\006planID\030\001 \001(\003\022C\n\016segment"
  "Binlogs\030\002 \003(\0132+.milvus.proto.data.Compac"
  "tionSegmentBinlogs\022\022\n\nstart_time\030\003 \001(\004\022\032"
  "\n\022timeout_in_seconds\030\004 \001(\005\022/\n\004type\030\005 \001(\016"
  "2!.milvus.proto.data.CompactionType\022\022\n\nt"
  "imetravel\030\006 \001(\004\022\017\n\007channel\030\007 \001(\t\022\026\n\016coll"
  "ection_ttl\030\010 \001(\003\022\022\n\ntotal_rows\030\t \001(\003\"\200\002\n"
  "\020CompactionResult\022\016\n\006planID\030\001 \001(\003\022\021\n\tseg"
  "mentID\030\002 \001(\003\022\023\n\013num_of_rows\030\003 \001(\003\0223\n\013ins"
  "ert_logs\030\004 \003(\0132\036.milvus.proto.data.Field"
  "Binlog\022;\n\023field2StatslogPaths\030\005 \003(\0132\036.mi"
  "lvus.proto.data.FieldBinlog\0221\n\tdeltalogs"
  "\030\006 \003(\0132\036.milvus.proto.data.FieldBinlog\022\017"
  "\n\007channel\030\007 \001(\t\"\221\001\n\025CompactionStateResul"
  "t\022\016\n\006planID\030\001 \001(\003\0223\n\005state\030\002 \001(\0162$.milvu"
  "s.proto.common.CompactionState\0223\n\006result"
  "\030\003 \001(\0132#.milvus.proto.data.CompactionRes"
  "ult\"\201\001\n\027CompactionStateResponse\022+\n\006statu"
  "s\030\001 \001(\0132\033.milvus.proto.common.Status\0229\n\007"
  "results\030\002 \003(\0132(.milvus.proto.data.Compac"
  "tionStateResult\">\n\026SegmentFieldBinlogMet"
  "a\022\017\n\007fieldID\030\001 \001(\003\022\023\n\013binlog_path\030\002 \001(\t\""
  "\264\001\n\024WatchChannelsRequest\022\024\n\014collectionID"
  "\030\001 \001(\003\022\024\n\014channelNames\030\002 \003(\t\0229\n\017start_po"
  "sitions\030\003 \003(\0132 .milvus.proto.common.KeyD"
  "ataPair\0225\n\006schema\030\004 \001(\0132%.milvus.proto.s"
  "chema.CollectionSchema\"D\n\025WatchChannelsR"
  "esponse\022+\n\006status\030\001 \001(\0132\033.milvus.proto.c"
  "ommon.Status\"\216\001\n\026SetSegmentStateRequest\022"
  "*\n\004base\030\001 \001(\0132\034.milvus.proto.common.MsgB"
  "ase\022\022\n\nsegment_id\030\002 \001(\003\0224\n\tnew_state\030\003 \001"
  "(\0162!.milvus.proto.common.SegmentState\"F\n"
  "\027SetSegmentStateResponse\022+\n\006status\030\001 \001(\013"
  "2\033.milvus.proto.common.Status\"\235\001\n\031DropVi"
  "rtualChannelRequest\022*\n\004base\030\001 \001(\0132\034.milv"
  "us.proto.common.MsgBase\022\024\n\014channel_name\030"
  "\002 \001(\t\022>\n\010segments\030\003 \003(\0132,.milvus.proto.d"
  "ata.DropVirtualChannelSegment\"\353\002\n\031DropVi"
  "rtualChannelSegment\022\021\n\tsegmentID\030\001 \001(\003\022\024"
  "\n\014collectionID\030\002 \001(\003\0229\n\021field2BinlogPath"
  "s\030\003 \003(\0132\036.milvus.proto.data.FieldBinlog\022"
  ";\n\023field2StatslogPaths\030\004 \003(\0132\036.milvus.pr"
  "oto.data.FieldBinlog\0221\n\tdeltalogs\030\005 \003(\0132"
  "\036.milvus.proto.data.FieldBinlog\0224\n\rstart"
  "Position\030\006 \001(\0132\035.milvus.proto.msg.MsgPos"
  "ition\0221\n\ncheckPoint\030\007 \001(\0132\035.milvus.proto"
  ".msg.MsgPosition\022\021\n\tnumOfRows\030\010 \001(\003\"I\n\032D"
  "ropVirtualChannelResponse\022+\n\006status\030\001 \001("
  "\0132\033.milvus.proto.common.Status\"\371\001\n\nImpor"
  "tTask\022+\n\006status\030\001 \001(\0132\033.milvus.proto.com"
  "mon.Status\022\025\n\rcollection_id\030\002 \001(\003\022\024\n\014par"
  "tition_id\030\003 \001(\003\022\025\n\rchannel_names\030\004 \003(\t\022\021"
  "\n\trow_based\030\005 \001(\010\022\017\n\007task_id\030\006 \001(\003\022\r\n\005fi"
  "les\030\007 \003(\t\0220\n\005infos\030\010 \003(\0132!.milvus.proto."
  "common.KeyValuePair\022\025\n\rdatabase_name\030\020 \001"
  "(\t\"\223\001\n\017ImportTaskState\0223\n\tstateCode\030\001 \001("
  "\0162 .milvus.proto.common.ImportState\022\020\n\010s"
  "egments\030\002 \003(\003\022\017\n\007row_ids\030\003 \003(\003\022\021\n\trow_co"
  "unt\030\004 \001(\003\022\025\n\rerror_message\030\005 \001(\t\"\221\003\n\016Imp"
  "ortTaskInfo\022\n\n\002id\030\001 \001(\003\022\026\n\nrequest_id\030\002 "
  "\001(\003B\002\030\001\022\023\n\013datanode_id\030\003 \001(\003\022\025\n\rcollecti"
  "on_id\030\004 \001(\003\022\024\n\014partition_id\030\005 \001(\003\022\025\n\rcha"
  "nnel_names\030\006 \003(\t\022\016\n\006bucket\030\007 \001(\t\022\021\n\trow_"
  "based\030\010 \001(\010\022\r\n\005files\030\t \003(\t\022\021\n\tcreate_ts\030"
  "\n \001(\003\0221\n\005state\030\013 \001(\0132\".milvus.proto.data"
  ".ImportTaskState\022\027\n\017collection_name\030\014 \001("
  "\t\022\026\n\016partition_name\030\r \001(\t\0220\n\005infos\030\016 \003(\013"
  "2!.milvus.proto.common.KeyValuePair\022\020\n\010s"
  "tart_ts\030\017 \001(\003\022\025\n\rdatabase_name\030\020 \001(\t\"V\n\022"
  "ImportTaskResponse\022+\n\006status\030\001 \001(\0132\033.mil"
  "vus.proto.common.Status\022\023\n\013datanode_id\030\002"
  " \001(\003\"\212\001\n\021ImportTaskRequest\022*\n\004base\030\001 \001(\013"
  "2\034.milvus.proto.common.MsgBase\0222\n\013import"
  "_task\030\002 \001(\0132\035.milvus.proto.data.ImportTa"
  "sk\022\025\n\rworking_nodes\030\003 \003(\003\"~\n\036UpdateSegme"
  "ntStatisticsRequest\022*\n\004base\030\001 \001(\0132\034.milv"
  "us.proto.common.MsgBase\0220\n\005stats\030\002 \003(\0132!"
  ".milvus.proto.common.SegmentStats\"\217\001\n\036Up"
  "dateChannelCheckpointRequest\022*\n\004base\030\001 \001"
  "(\0132\034.milvus.proto.common.MsgBase\022\020\n\010vCha"
  "nnel\030\002 \001(\t\022/\n\010position\030\003 \001(\0132\035.milvus.pr"
  "oto.msg.MsgPosition\"G\n\031ResendSegmentStat"
  "sRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.co"
  "mmon.MsgBase\"]\n\032ResendSegmentStatsRespon"
  "se\022+\n\006status\030\001 \001(\0132\033.milvus.proto.common"
  ".Status\022\022\n\nseg_resent\030\002 \003(\003\"\340\001\n\027AddImpor"
  "tSegmentRequest\022*\n\004base\030\001 \001(\0132\034.milvus.p"
  "roto.common.MsgBase\022\022\n\nsegment_id\030\002 \001(\003\022"
  "\024\n\014channel_name\030\003 \001(\t\022\025\n\rcollection_id\030\004"
  " \001(\003\022\024\n\014partition_id\030\005 \001(\003\022\017\n\007row_num\030\006 "
  "\001(\003\0221\n\tstats_log\030\007 \003(\0132\036.milvus.proto.da"
  "ta.FieldBinlog\"\\\n\030AddImportSegmentRespon"
  "se\022+\n\006status\030\001 \001(\0132\033.milvus.proto.common"
  ".Status\022\023\n\013channel_pos\030\002 \001(\014\"\220\002\n\030SaveImp"
  "ortSegmentRequest\022*\n\004base\030\001 \001(\0132\034.milvus"
  ".proto.common.MsgBase\022\022\n\nsegment_id\030\002 \001("
  "\003\022\024\n\014channel_name\030\003 \001(\t\022\025\n\rcollection_id"
  "\030\004 \001(\003\022\024\n\014partition_id\030\005 \001(\003\022\017\n\007row_num\030"
  "\006 \001(\003\022G\n\024save_binlog_path_req\030\007 \001(\0132).mi"
  "lvus.proto.data.SaveBinlogPathsRequest\022\027"
  "\n\017dml_position_id\030\010 \001(\014\"_\n\034UnsetIsImport"
  "ingStateRequest\022*\n\004base\030\001 \001(\0132\034.milvus.p"
  "roto.common.MsgBase\022\023\n\013segment_ids\030\002 \003(\003"
  "\"]\n\032MarkSegmentsDroppedRequest\022*\n\004base\030\001"
  " \001(\0132\034.milvus.proto.common.MsgBase\022\023\n\013se"
  "gment_ids\030\002 \003(\003\"J\n\024SegmentReferenceLock\022"
  "\016\n\006taskID\030\001 \001(\003\022\016\n\006nodeID\030\002 \001(\003\022\022\n\nsegme"
  "ntIDs\030\003 \003(\003\"\355\001\n\026AlterCollectionRequest\022\024"
  "\n\014collectionID\030\001 \001(\003\0225\n\006schema\030\002 \001(\0132%.m"
  "ilvus.proto.schema.CollectionSchema\022\024\n\014p"
  "artitionIDs\030\003 \003(\003\0229\n\017start_positions\030\004 \003"
  "(\0132 .milvus.proto.common.KeyDataPair\0225\n\n"
  "properties\030\005 \003(\0132!.milvus.proto.common.K"
  "eyValuePair\"\?\n\020GcConfirmRequest\022\025\n\rcolle"
  "ction_id\030\001 \001(\003\022\024\n\014partition_id\030\002 \001(\003\"U\n\021"
  "GcConfirmResponse\022+\n\006status\030\001 \001(\0132\033.milv"
  "us.proto.common.Status\022\023\n\013gc_finished\030\002 "
  "\001(\010\"x\n\033ReportDataNodeTtMsgsRequest\022*\n\004ba"
  "se\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022-"
  "\n\004msgs\030\002 \003(\0132\037.milvus.proto.msg.DataNode"
  "TtMsg*>\n\013SegmentType\022\007\n\003New\020\000\022\n\n\006Normal\020"
  "\001\022\013\n\007Flushed\020\002\022\r\n\tCompacted\020\003*\231\001\n\021Channe"
  "lWatchState\022\016\n\nUncomplete\020\000\022\014\n\010Complete\020"
  "\001\022\013\n\007ToWatch\020\002\022\020\n\014WatchSuccess\020\003\022\020\n\014Watc"
  "hFailure\020\004\022\r\n\tToRelease\020\005\022\022\n\016ReleaseSucc"
  "ess\020\006\022\022\n\016ReleaseFailure\020\007*W\n\016CompactionT"
  "ype\022\027\n\023UndefinedCompaction\020\000\022\023\n\017MergeCom"
  "paction\020\002\022\021\n\rMixCompaction\020\003\"\004\010\001\020\0012\271%\n\tD"
  "ataCoord\022l\n\022GetComponentStates\022..milvus."
  "proto.milvus.GetComponentStatesRequest\032$"
  ".milvus.proto.milvus.ComponentStates\"\000\022m"
  "\n\022GetTimeTickChannel\0220.milvus.proto.inte"
  "rnal.GetTimeTickChannelRequest\032#.milvus."
  "proto.milvus.StringResponse\"\000\022q\n\024GetStat"
  "isticsChannel\0222.milvus.proto.internal.Ge"
  "tStatisticsChannelRequest\032#.milvus.proto"
  ".milvus.StringResponse\"\000\022L\n\005Flush\022\037.milv"
  "us.proto.data.FlushRequest\032 .milvus.prot"
  "o.data.FlushResponse\"\000\022j\n\017AssignSegmentI"
  "D\022).milvus.proto.data.AssignSegmentIDReq"
  "uest\032*.milvus.proto.data.AssignSegmentID"
  "Response\"\000\022g\n\016GetSegmentInfo\022(.milvus.pr"
  "oto.data.GetSegmentInfoRequest\032).milvus."
  "proto.data.GetSegmentInfoResponse\"\000\022m\n\020G"
  "etSegmentStates\022*.milvus.proto.data.GetS"
  "egmentStatesRequest\032+.milvus.proto.data."
  "GetSegmentStatesResponse\"\000\022y\n\024GetInsertB"
  "inlogPaths\022..milvus.proto.data.GetInsert"
  "BinlogPathsRequest\032/.milvus.proto.data.G"
  "etInsertBinlogPathsResponse\"\000\022\202\001\n\027GetCol"
  "lectionStatistics\0221.milvus.proto.data.Ge"
  "tCollectionStatisticsRequest\0322.milvus.pr"
  "oto.data.GetCollectionStatisticsResponse"
  "\"\000\022\177\n\026GetPartitionStatistics\0220.milvus.pr"
  "oto.data.GetPartitionStatisticsRequest\0321"
  ".milvus.proto.data.GetPartitionStatistic"
  "sResponse\"\000\022o\n\025GetSegmentInfoChannel\022/.m"
  "ilvus.proto.data.GetSegmentInfoChannelRe"
  "quest\032#.milvus.proto.milvus.StringRespon"
  "se\"\000\022[\n\017SaveBinlogPaths\022).milvus.proto.d"
  "ata.SaveBinlogPathsRequest\032\033.milvus.prot"
  "o.common.Status\"\000\022j\n\017GetRecoveryInfo\022).m"
  "ilvus.proto.data.GetRecoveryInfoRequest\032"
  "*.milvus.proto.data.GetRecoveryInfoRespo"
  "nse\"\000\022p\n\021GetRecoveryInfoV2\022+.milvus.prot"
  "o.data.GetRecoveryInfoRequestV2\032,.milvus"
  ".proto.data.GetRecoveryInfoResponseV2\"\000\022"
  "s\n\022GetFlushedSegments\022,.milvus.proto.dat"
  "a.GetFlushedSegmentsRequest\032-.milvus.pro"
  "to.data.GetFlushedSegmentsResponse\"\000\022v\n\023"
  "GetSegmentsByStates\022-.milvus.proto.data."
  "GetSegmentsByStatesRequest\032..milvus.prot"
  "o.data.GetSegmentsByStatesResponse\"\000\022q\n\020"
  "GetFlushAllState\022,.milvus.proto.milvus.G"
  "etFlushAllStateRequest\032-.milvus.proto.mi"
  "lvus.GetFlushAllStateResponse\"\000\022{\n\022ShowC"
  "onfigurations\0220.milvus.proto.internal.Sh"
  "owConfigurationsRequest\0321.milvus.proto.i"
  "nternal.ShowConfigurationsResponse\"\000\022_\n\n"
  "GetMetrics\022&.milvus.proto.milvus.GetMetr"
  "icsRequest\032\'.milvus.proto.milvus.GetMetr"
  "icsResponse\"\000\022q\n\020ManualCompaction\022,.milv"
  "us.proto.milvus.ManualCompactionRequest\032"
  "-.milvus.proto.milvus.ManualCompactionRe"
  "sponse\"\000\022w\n\022GetCompactionState\022..milvus."
  "proto.milvus.GetCompactionStateRequest\032/"
  ".milvus.proto.milvus.GetCompactionStateR"
  "esponse\"\000\022\200\001\n\033GetCompactionStateWithPlan"
  "s\022..milvus.proto.milvus.GetCompactionPla"
  "nsRequest\032/.milvus.proto.milvus.GetCompa"
  "ctionPlansResponse\"\000\022d\n\rWatchChannels\022\'."
  "milvus.proto.data.WatchChannelsRequest\032("
  ".milvus.proto.data.WatchChannelsResponse"
  "\"\000\022h\n\rGetFlushState\022).milvus.proto.milvu"
  "s.GetFlushStateRequest\032*.milvus.proto.mi"
  "lvus.GetFlushStateResponse\"\000\022s\n\022DropVirt"
  "ualChannel\022,.milvus.proto.data.DropVirtu"
  "alChannelRequest\032-.milvus.proto.data.Dro"
  "pVirtualChannelResponse\"\000\022j\n\017SetSegmentS"
  "tate\022).milvus.proto.data.SetSegmentState"
  "Request\032*.milvus.proto.data.SetSegmentSt"
  "ateResponse\"\000\022W\n\006Import\022$.milvus.proto.d"
  "ata.ImportTaskRequest\032%.milvus.proto.dat"
  "a.ImportTaskResponse\"\000\022k\n\027UpdateSegmentS"
  "tatistics\0221.milvus.proto.data.UpdateSegm"
  "entStatisticsRequest\032\033.milvus.proto.comm"
  "on.Status\"\000\022k\n\027UpdateChannelCheckpoint\0221"
  ".milvus.proto.data.UpdateChannelCheckpoi"
  "ntRequest\032\033.milvus.proto.common.Status\"\000"
  "\022_\n\021SaveImportSegment\022+.milvus.proto.dat"
  "a.SaveImportSegmentRequest\032\033.milvus.prot"
  "o.common.Status\"\000\022g\n\025UnsetIsImportingSta"
  "te\022/.milvus.proto.data.UnsetIsImportingS"
  "tateRequest\032\033.milvus.proto.common.Status"
  "\"\000\022c\n\023MarkSegmentsDropped\022-.milvus.proto"
  ".data.MarkSegmentsDroppedRequest\032\033.milvu"
  "s.proto.common.Status\"\000\022f\n\032BroadcastAlte"
  "redCollection\022).milvus.proto.data.AlterC"
  "ollectionRequest\032\033.milvus.proto.common.S"
  "tatus\"\000\022b\n\013CheckHealth\022\'.milvus.proto.mi"
  "lvus.CheckHealthRequest\032(.milvus.proto.m"
  "ilvus.CheckHealthResponse\"\000\022T\n\013CreateInd"
  "ex\022&.milvus.proto.index.CreateIndexReque"
  "st\032\033.milvus.proto.common.Status\"\000\022f\n\rGet"
  "IndexState\022(.milvus.proto.index.GetIndex"
  "StateRequest\032).milvus.proto.index.GetInd"
  "exStateResponse\"\000\022{\n\024GetSegmentIndexStat"
  "e\022/.milvus.proto.index.GetSegmentIndexSt"
  "ateRequest\0320.milvus.proto.index.GetSegme"
  "ntIndexStateResponse\"\000\022d\n\rGetIndexInfos\022"
  "\'.milvus.proto.index.GetIndexInfoRequest"
  "\032(.milvus.proto.index.GetIndexInfoRespon"
  "se\"\000\022P\n\tDropIndex\022$.milvus.proto.index.D"
  "ropIndexRequest\032\033.milvus.proto.common.St"
  "atus\"\000\022f\n\rDescribeIndex\022(.milvus.proto.i"
  "ndex.DescribeIndexRequest\032).milvus.proto"
  ".index.DescribeIndexResponse\"\000\022u\n\022GetInd"
  "exStatistics\022-.milvus.proto.index.GetInd"
  "exStatisticsRequest\032..milvus.proto.index"
  ".GetIndexStatisticsResponse\"\000\022~\n\025GetInde"
  "xBuildProgress\0220.milvus.proto.index.GetI"
  "ndexBuildProgressRequest\0321.milvus.proto."
  "index.GetIndexBuildProgressResponse\"\000\022X\n"
  "\tGcConfirm\022#.milvus.proto.data.GcConfirm"
  "Request\032$.milvus.proto.data.GcConfirmRes"
  "ponse\"\000\022e\n\024ReportDataNodeTtMsgs\022..milvus"
  ".proto.data.ReportDataNodeTtMsgsRequest\032"
  "\033.milvus.proto.common.Status\"\0002\310\t\n\010DataN"
  "ode\022l\n\022GetComponentStates\022..milvus.proto"
  ".milvus.GetComponentStatesRequest\032$.milv"
  "us.proto.milvus.ComponentStates\"\000\022q\n\024Get"
  "StatisticsChannel\0222.milvus.proto.interna"
  "l.GetStatisticsChannelRequest\032#.milvus.p"
  "roto.milvus.StringResponse\"\000\022[\n\017WatchDmC"
  "hannels\022).milvus.proto.data.WatchDmChann"
  "elsRequest\032\033.milvus.proto.common.Status\""
  "\000\022W\n\rFlushSegments\022\'.milvus.proto.data.F"
  "lushSegmentsRequest\032\033.milvus.proto.commo"
  "n.Status\"\000\022{\n\022ShowConfigurations\0220.milvu"
  "s.proto.internal.ShowConfigurationsReque"
  "st\0321.milvus.proto.internal.ShowConfigura"
  "tionsResponse\"\000\022_\n\nGetMetrics\022&.milvus.p"
  "roto.milvus.GetMetricsRequest\032\'.milvus.p"
  "roto.milvus.GetMetricsResponse\"\000\022N\n\nComp"
  "action\022!.milvus.proto.data.CompactionPla"
  "n\032\033.milvus.proto.common.Status\"\000\022m\n\022GetC"
  "ompactionState\022).milvus.proto.data.Compa"
  "ctionStateRequest\032*.milvus.proto.data.Co"
  "mpactionStateResponse\"\000\022U\n\014SyncSegments\022"
  "&.milvus.proto.data.SyncSegmentsRequest\032"
  "\033.milvus.proto.common.Status\"\000\022M\n\006Import"
  "\022$.milvus.proto.data.ImportTaskRequest\032\033"
  ".milvus.proto.common.Status\"\000\022s\n\022ResendS"
  "egmentStats\022,.milvus.proto.data.ResendSe"
  "gmentStatsRequest\032-.milvus.proto.data.Re"
  "sendSegmentStatsResponse\"\000\022m\n\020AddImportS"
  "egment\022*.milvus.proto.data.AddImportSegm"
  "entRequest\032+.milvus.proto.data.AddImport"
  "SegmentResponse\"\000B3Z1github.com/milvus-i"
  "o/milvus/internal/proto/datapbb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_data_5fcoord_2eproto_deps[6] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_index_5fcoord_2eproto,
  &::descriptor_table_internal_2eproto,
  &::descriptor_table_milvus_2eproto,
  &::descriptor_table_msg_2eproto,
  &::descriptor_table_schema_2eproto,
};
static ::_pbi::once_flag descriptor_table_data_5fcoord_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_data_5fcoord_2eproto = {
    false, false, 18638, descriptor_table_protodef_data_5fcoord_2eproto,
    "data_coord.proto",
    &descriptor_table_data_5fcoord_2eproto_once, descriptor_table_data_5fcoord_2eproto_deps, 6, 78,
    schemas, file_default_instances, TableStruct_data_5fcoord_2eproto::offsets,
    file_level_metadata_data_5fcoord_2eproto, file_level_enum_descriptors_data_5fcoord_2eproto,
    file_level_service_descriptors_data_5fcoord_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_data_5fcoord_2eproto_getter() {
  return &descriptor_table_data_5fcoord_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_data_5fcoord_2eproto(&descriptor_table_data_5fcoord_2eproto);
namespace milvus {
namespace proto {
namespace data {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SegmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fcoord_2eproto);
  return file_level_enum_descriptors_data_5fcoord_2eproto[0];
}
bool SegmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelWatchState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fcoord_2eproto);
  return file_level_enum_descriptors_data_5fcoord_2eproto[1];
}
bool ChannelWatchState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompactionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fcoord_2eproto);
  return file_level_enum_descriptors_data_5fcoord_2eproto[2];
}
bool CompactionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[0]);
}

// ===================================================================

class FlushRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const FlushRequest* msg);
};

const ::milvus::proto::common::MsgBase&
FlushRequest::_Internal::base(const FlushRequest* msg) {
  return *msg->_impl_.base_;
}
void FlushRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
FlushRequest::FlushRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.FlushRequest)
}
FlushRequest::FlushRequest(const FlushRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlushRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){from._impl_.segmentids_}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.isimport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.dbid_, &from._impl_.dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isimport_) -
    reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.isimport_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.FlushRequest)
}

inline void FlushRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){arena}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.isimport_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlushRequest::~FlushRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.FlushRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlushRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void FlushRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlushRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.FlushRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segmentids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isimport_) -
      reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.isimport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segmentIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isImport = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.isimport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlushRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.FlushRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 dbID = 2;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_dbid(), target);
  }

  // repeated int64 segmentIDs = 3;
  {
    int byte_size = _impl_._segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_segmentids(), byte_size, target);
    }
  }

  // int64 collectionID = 4;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_collectionid(), target);
  }

  // bool isImport = 5;
  if (this->_internal_isimport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_isimport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.FlushRequest)
  return target;
}

size_t FlushRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.FlushRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 dbID = 2;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 4;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // bool isImport = 5;
  if (this->_internal_isimport() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlushRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushRequest::GetClassData() const { return &_class_data_; }


void FlushRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlushRequest*>(&to_msg);
  auto& from = static_cast<const FlushRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.FlushRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segmentids_.MergeFrom(from._impl_.segmentids_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_isimport() != 0) {
    _this->_internal_set_isimport(from._internal_isimport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlushRequest::CopyFrom(const FlushRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.FlushRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushRequest::IsInitialized() const {
  return true;
}

void FlushRequest::InternalSwap(FlushRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentids_.InternalSwap(&other->_impl_.segmentids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlushRequest, _impl_.isimport_)
      + sizeof(FlushRequest::_impl_.isimport_)
      - PROTOBUF_FIELD_OFFSET(FlushRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[1]);
}

// ===================================================================

class FlushResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const FlushResponse* msg);
};

const ::milvus::proto::common::Status&
FlushResponse::_Internal::status(const FlushResponse* msg) {
  return *msg->_impl_.status_;
}
void FlushResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
FlushResponse::FlushResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.FlushResponse)
}
FlushResponse::FlushResponse(const FlushResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlushResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){from._impl_.segmentids_}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.flushsegmentids_){from._impl_.flushsegmentids_}
    , /*decltype(_impl_._flushsegmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.timeofseal_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.dbid_, &from._impl_.dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeofseal_) -
    reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.timeofseal_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.FlushResponse)
}

inline void FlushResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){arena}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.flushsegmentids_){arena}
    , /*decltype(_impl_._flushsegmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.timeofseal_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlushResponse::~FlushResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.FlushResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlushResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentids_.~RepeatedField();
  _impl_.flushsegmentids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void FlushResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlushResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.FlushResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segmentids_.Clear();
  _impl_.flushsegmentids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeofseal_) -
      reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.timeofseal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segmentIDs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 flushSegmentIDs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_flushsegmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_flushsegmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timeOfSeal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.timeofseal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlushResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.FlushResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int64 dbID = 2;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_dbid(), target);
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_collectionid(), target);
  }

  // repeated int64 segmentIDs = 4;
  {
    int byte_size = _impl_._segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_segmentids(), byte_size, target);
    }
  }

  // repeated int64 flushSegmentIDs = 5;
  {
    int byte_size = _impl_._flushsegmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_flushsegmentids(), byte_size, target);
    }
  }

  // int64 timeOfSeal = 6;
  if (this->_internal_timeofseal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_timeofseal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.FlushResponse)
  return target;
}

size_t FlushResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.FlushResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 flushSegmentIDs = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.flushsegmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._flushsegmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 dbID = 2;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 timeOfSeal = 6;
  if (this->_internal_timeofseal() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timeofseal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlushResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushResponse::GetClassData() const { return &_class_data_; }


void FlushResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlushResponse*>(&to_msg);
  auto& from = static_cast<const FlushResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.FlushResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segmentids_.MergeFrom(from._impl_.segmentids_);
  _this->_impl_.flushsegmentids_.MergeFrom(from._impl_.flushsegmentids_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_timeofseal() != 0) {
    _this->_internal_set_timeofseal(from._internal_timeofseal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlushResponse::CopyFrom(const FlushResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.FlushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushResponse::IsInitialized() const {
  return true;
}

void FlushResponse::InternalSwap(FlushResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentids_.InternalSwap(&other->_impl_.segmentids_);
  _impl_.flushsegmentids_.InternalSwap(&other->_impl_.flushsegmentids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlushResponse, _impl_.timeofseal_)
      + sizeof(FlushResponse::_impl_.timeofseal_)
      - PROTOBUF_FIELD_OFFSET(FlushResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[2]);
}

// ===================================================================

class SegmentIDRequest::_Internal {
 public:
};

SegmentIDRequest::SegmentIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SegmentIDRequest)
}
SegmentIDRequest::SegmentIDRequest(const SegmentIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentIDRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_name_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.isimport_){}
    , decltype(_impl_.partitionid_){}
    , decltype(_impl_.importtaskid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_name().empty()) {
    _this->_impl_.channel_name_.Set(from._internal_channel_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.importtaskid_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.importtaskid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SegmentIDRequest)
}

inline void SegmentIDRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_name_){}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.isimport_){false}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , decltype(_impl_.importtaskid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SegmentIDRequest::~SegmentIDRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SegmentIDRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_name_.Destroy();
}

void SegmentIDRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SegmentIDRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_name_.ClearToEmpty();
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.importtaskid_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.importtaskid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentIDRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string channel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.SegmentIDRequest.channel_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isImport = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.isimport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 importTaskID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.importtaskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentIDRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SegmentIDRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // string channel_name = 2;
  if (!this->_internal_channel_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.SegmentIDRequest.channel_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel_name(), target);
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 4;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_partitionid(), target);
  }

  // bool isImport = 5;
  if (this->_internal_isimport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_isimport(), target);
  }

  // int64 importTaskID = 6;
  if (this->_internal_importtaskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_importtaskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SegmentIDRequest)
  return target;
}

size_t SegmentIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SegmentIDRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_name = 2;
  if (!this->_internal_channel_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_name());
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // uint32 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  // bool isImport = 5;
  if (this->_internal_isimport() != 0) {
    total_size += 1 + 1;
  }

  // int64 partitionID = 4;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  // int64 importTaskID = 6;
  if (this->_internal_importtaskid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_importtaskid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentIDRequest::GetClassData() const { return &_class_data_; }


void SegmentIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentIDRequest*>(&to_msg);
  auto& from = static_cast<const SegmentIDRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SegmentIDRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_name().empty()) {
    _this->_internal_set_channel_name(from._internal_channel_name());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_isimport() != 0) {
    _this->_internal_set_isimport(from._internal_isimport());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  if (from._internal_importtaskid() != 0) {
    _this->_internal_set_importtaskid(from._internal_importtaskid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentIDRequest::CopyFrom(const SegmentIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SegmentIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentIDRequest::IsInitialized() const {
  return true;
}

void SegmentIDRequest::InternalSwap(SegmentIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentIDRequest, _impl_.importtaskid_)
      + sizeof(SegmentIDRequest::_impl_.importtaskid_)
      - PROTOBUF_FIELD_OFFSET(SegmentIDRequest, _impl_.collectionid_)>(
          reinterpret_cast<char*>(&_impl_.collectionid_),
          reinterpret_cast<char*>(&other->_impl_.collectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentIDRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[3]);
}

// ===================================================================

class AssignSegmentIDRequest::_Internal {
 public:
};

AssignSegmentIDRequest::AssignSegmentIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.AssignSegmentIDRequest)
}
AssignSegmentIDRequest::AssignSegmentIDRequest(const AssignSegmentIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssignSegmentIDRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentidrequests_){from._impl_.segmentidrequests_}
    , decltype(_impl_.peer_role_){}
    , decltype(_impl_.nodeid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.peer_role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.peer_role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_peer_role().empty()) {
    _this->_impl_.peer_role_.Set(from._internal_peer_role(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.nodeid_ = from._impl_.nodeid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.AssignSegmentIDRequest)
}

inline void AssignSegmentIDRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentidrequests_){arena}
    , decltype(_impl_.peer_role_){}
    , decltype(_impl_.nodeid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.peer_role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.peer_role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AssignSegmentIDRequest::~AssignSegmentIDRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.AssignSegmentIDRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssignSegmentIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentidrequests_.~RepeatedPtrField();
  _impl_.peer_role_.Destroy();
}

void AssignSegmentIDRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssignSegmentIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.AssignSegmentIDRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segmentidrequests_.Clear();
  _impl_.peer_role_.ClearToEmpty();
  _impl_.nodeid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignSegmentIDRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 nodeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string peer_role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_peer_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.AssignSegmentIDRequest.peer_role"));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.SegmentIDRequest segmentIDRequests = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segmentidrequests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssignSegmentIDRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.AssignSegmentIDRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 nodeID = 1;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_nodeid(), target);
  }

  // string peer_role = 2;
  if (!this->_internal_peer_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_role().data(), static_cast<int>(this->_internal_peer_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.AssignSegmentIDRequest.peer_role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_peer_role(), target);
  }

  // repeated .milvus.proto.data.SegmentIDRequest segmentIDRequests = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segmentidrequests_size()); i < n; i++) {
    const auto& repfield = this->_internal_segmentidrequests(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.AssignSegmentIDRequest)
  return target;
}

size_t AssignSegmentIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.AssignSegmentIDRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.SegmentIDRequest segmentIDRequests = 3;
  total_size += 1UL * this->_internal_segmentidrequests_size();
  for (const auto& msg : this->_impl_.segmentidrequests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string peer_role = 2;
  if (!this->_internal_peer_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_role());
  }

  // int64 nodeID = 1;
  if (this->_internal_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nodeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssignSegmentIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssignSegmentIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssignSegmentIDRequest::GetClassData() const { return &_class_data_; }


void AssignSegmentIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssignSegmentIDRequest*>(&to_msg);
  auto& from = static_cast<const AssignSegmentIDRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.AssignSegmentIDRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segmentidrequests_.MergeFrom(from._impl_.segmentidrequests_);
  if (!from._internal_peer_role().empty()) {
    _this->_internal_set_peer_role(from._internal_peer_role());
  }
  if (from._internal_nodeid() != 0) {
    _this->_internal_set_nodeid(from._internal_nodeid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssignSegmentIDRequest::CopyFrom(const AssignSegmentIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.AssignSegmentIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignSegmentIDRequest::IsInitialized() const {
  return true;
}

void AssignSegmentIDRequest::InternalSwap(AssignSegmentIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentidrequests_.InternalSwap(&other->_impl_.segmentidrequests_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.peer_role_, lhs_arena,
      &other->_impl_.peer_role_, rhs_arena
  );
  swap(_impl_.nodeid_, other->_impl_.nodeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignSegmentIDRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[4]);
}

// ===================================================================

class SegmentIDAssignment::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const SegmentIDAssignment* msg);
};

const ::milvus::proto::common::Status&
SegmentIDAssignment::_Internal::status(const SegmentIDAssignment* msg) {
  return *msg->_impl_.status_;
}
void SegmentIDAssignment::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
SegmentIDAssignment::SegmentIDAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SegmentIDAssignment)
}
SegmentIDAssignment::SegmentIDAssignment(const SegmentIDAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentIDAssignment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_name_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.segid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.partitionid_){}
    , decltype(_impl_.expire_time_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_name().empty()) {
    _this->_impl_.channel_name_.Set(from._internal_channel_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.segid_, &from._impl_.segid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.segid_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SegmentIDAssignment)
}

inline void SegmentIDAssignment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_name_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.segid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , decltype(_impl_.expire_time_){uint64_t{0u}}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SegmentIDAssignment::~SegmentIDAssignment() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SegmentIDAssignment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentIDAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SegmentIDAssignment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentIDAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SegmentIDAssignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.segid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.segid_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentIDAssignment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 segID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.segid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string channel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.SegmentIDAssignment.channel_name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 expire_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentIDAssignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SegmentIDAssignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segID = 1;
  if (this->_internal_segid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_segid(), target);
  }

  // string channel_name = 2;
  if (!this->_internal_channel_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.SegmentIDAssignment.channel_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel_name(), target);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  // int64 collectionID = 4;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 5;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_partitionid(), target);
  }

  // uint64 expire_time = 6;
  if (this->_internal_expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_expire_time(), target);
  }

  // .milvus.proto.common.Status status = 7;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SegmentIDAssignment)
  return target;
}

size_t SegmentIDAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SegmentIDAssignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_name = 2;
  if (!this->_internal_channel_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_name());
  }

  // .milvus.proto.common.Status status = 7;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 segID = 1;
  if (this->_internal_segid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segid());
  }

  // int64 collectionID = 4;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 partitionID = 5;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  // uint64 expire_time = 6;
  if (this->_internal_expire_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_expire_time());
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentIDAssignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentIDAssignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentIDAssignment::GetClassData() const { return &_class_data_; }


void SegmentIDAssignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentIDAssignment*>(&to_msg);
  auto& from = static_cast<const SegmentIDAssignment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SegmentIDAssignment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_name().empty()) {
    _this->_internal_set_channel_name(from._internal_channel_name());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_segid() != 0) {
    _this->_internal_set_segid(from._internal_segid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  if (from._internal_expire_time() != 0) {
    _this->_internal_set_expire_time(from._internal_expire_time());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentIDAssignment::CopyFrom(const SegmentIDAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SegmentIDAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentIDAssignment::IsInitialized() const {
  return true;
}

void SegmentIDAssignment::InternalSwap(SegmentIDAssignment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentIDAssignment, _impl_.count_)
      + sizeof(SegmentIDAssignment::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(SegmentIDAssignment, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentIDAssignment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[5]);
}

// ===================================================================

class AssignSegmentIDResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const AssignSegmentIDResponse* msg);
};

const ::milvus::proto::common::Status&
AssignSegmentIDResponse::_Internal::status(const AssignSegmentIDResponse* msg) {
  return *msg->_impl_.status_;
}
void AssignSegmentIDResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
AssignSegmentIDResponse::AssignSegmentIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.AssignSegmentIDResponse)
}
AssignSegmentIDResponse::AssignSegmentIDResponse(const AssignSegmentIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssignSegmentIDResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segidassignments_){from._impl_.segidassignments_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.AssignSegmentIDResponse)
}

inline void AssignSegmentIDResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segidassignments_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AssignSegmentIDResponse::~AssignSegmentIDResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.AssignSegmentIDResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssignSegmentIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segidassignments_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void AssignSegmentIDResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssignSegmentIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.AssignSegmentIDResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segidassignments_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignSegmentIDResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .milvus.proto.data.SegmentIDAssignment segIDAssignments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segidassignments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssignSegmentIDResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.AssignSegmentIDResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .milvus.proto.data.SegmentIDAssignment segIDAssignments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segidassignments_size()); i < n; i++) {
    const auto& repfield = this->_internal_segidassignments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.AssignSegmentIDResponse)
  return target;
}

size_t AssignSegmentIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.AssignSegmentIDResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.SegmentIDAssignment segIDAssignments = 1;
  total_size += 1UL * this->_internal_segidassignments_size();
  for (const auto& msg : this->_impl_.segidassignments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssignSegmentIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssignSegmentIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssignSegmentIDResponse::GetClassData() const { return &_class_data_; }


void AssignSegmentIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssignSegmentIDResponse*>(&to_msg);
  auto& from = static_cast<const AssignSegmentIDResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.AssignSegmentIDResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segidassignments_.MergeFrom(from._impl_.segidassignments_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssignSegmentIDResponse::CopyFrom(const AssignSegmentIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.AssignSegmentIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignSegmentIDResponse::IsInitialized() const {
  return true;
}

void AssignSegmentIDResponse::InternalSwap(AssignSegmentIDResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segidassignments_.InternalSwap(&other->_impl_.segidassignments_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignSegmentIDResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[6]);
}

// ===================================================================

class GetSegmentStatesRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetSegmentStatesRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetSegmentStatesRequest::_Internal::base(const GetSegmentStatesRequest* msg) {
  return *msg->_impl_.base_;
}
void GetSegmentStatesRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetSegmentStatesRequest::GetSegmentStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetSegmentStatesRequest)
}
GetSegmentStatesRequest::GetSegmentStatesRequest(const GetSegmentStatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSegmentStatesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){from._impl_.segmentids_}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetSegmentStatesRequest)
}

inline void GetSegmentStatesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){arena}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSegmentStatesRequest::~GetSegmentStatesRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetSegmentStatesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSegmentStatesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetSegmentStatesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSegmentStatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetSegmentStatesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segmentids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSegmentStatesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segmentIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSegmentStatesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetSegmentStatesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // repeated int64 segmentIDs = 2;
  {
    int byte_size = _impl_._segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_segmentids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetSegmentStatesRequest)
  return target;
}

size_t GetSegmentStatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetSegmentStatesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSegmentStatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSegmentStatesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSegmentStatesRequest::GetClassData() const { return &_class_data_; }


void GetSegmentStatesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSegmentStatesRequest*>(&to_msg);
  auto& from = static_cast<const GetSegmentStatesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetSegmentStatesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segmentids_.MergeFrom(from._impl_.segmentids_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSegmentStatesRequest::CopyFrom(const GetSegmentStatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetSegmentStatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentStatesRequest::IsInitialized() const {
  return true;
}

void GetSegmentStatesRequest::InternalSwap(GetSegmentStatesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentids_.InternalSwap(&other->_impl_.segmentids_);
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSegmentStatesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[7]);
}

// ===================================================================

class SegmentStateInfo::_Internal {
 public:
  static const ::milvus::proto::msg::MsgPosition& start_position(const SegmentStateInfo* msg);
  static const ::milvus::proto::msg::MsgPosition& end_position(const SegmentStateInfo* msg);
  static const ::milvus::proto::common::Status& status(const SegmentStateInfo* msg);
};

const ::milvus::proto::msg::MsgPosition&
SegmentStateInfo::_Internal::start_position(const SegmentStateInfo* msg) {
  return *msg->_impl_.start_position_;
}
const ::milvus::proto::msg::MsgPosition&
SegmentStateInfo::_Internal::end_position(const SegmentStateInfo* msg) {
  return *msg->_impl_.end_position_;
}
const ::milvus::proto::common::Status&
SegmentStateInfo::_Internal::status(const SegmentStateInfo* msg) {
  return *msg->_impl_.status_;
}
void SegmentStateInfo::clear_start_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_position_ != nullptr) {
    delete _impl_.start_position_;
  }
  _impl_.start_position_ = nullptr;
}
void SegmentStateInfo::clear_end_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_position_ != nullptr) {
    delete _impl_.end_position_;
  }
  _impl_.end_position_ = nullptr;
}
void SegmentStateInfo::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
SegmentStateInfo::SegmentStateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SegmentStateInfo)
}
SegmentStateInfo::SegmentStateInfo(const SegmentStateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentStateInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_position_){nullptr}
    , decltype(_impl_.end_position_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.segmentid_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_position()) {
    _this->_impl_.start_position_ = new ::milvus::proto::msg::MsgPosition(*from._impl_.start_position_);
  }
  if (from._internal_has_end_position()) {
    _this->_impl_.end_position_ = new ::milvus::proto::msg::MsgPosition(*from._impl_.end_position_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.segmentid_, &from._impl_.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SegmentStateInfo)
}

inline void SegmentStateInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_position_){nullptr}
    , decltype(_impl_.end_position_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SegmentStateInfo::~SegmentStateInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SegmentStateInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentStateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_position_;
  if (this != internal_default_instance()) delete _impl_.end_position_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SegmentStateInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SegmentStateInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.start_position_ != nullptr) {
    delete _impl_.start_position_;
  }
  _impl_.start_position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_position_ != nullptr) {
    delete _impl_.end_position_;
  }
  _impl_.end_position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentStateInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.SegmentState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::SegmentState>(val));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.msg.MsgPosition start_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.msg.MsgPosition end_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentStateInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SegmentStateInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // .milvus.proto.common.SegmentState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .milvus.proto.msg.MsgPosition start_position = 3;
  if (this->_internal_has_start_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::start_position(this),
        _Internal::start_position(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.msg.MsgPosition end_position = 4;
  if (this->_internal_has_end_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::end_position(this),
        _Internal::end_position(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.Status status = 5;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SegmentStateInfo)
  return target;
}

size_t SegmentStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SegmentStateInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.msg.MsgPosition start_position = 3;
  if (this->_internal_has_start_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_position_);
  }

  // .milvus.proto.msg.MsgPosition end_position = 4;
  if (this->_internal_has_end_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_position_);
  }

  // .milvus.proto.common.Status status = 5;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // .milvus.proto.common.SegmentState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentStateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentStateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentStateInfo::GetClassData() const { return &_class_data_; }


void SegmentStateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentStateInfo*>(&to_msg);
  auto& from = static_cast<const SegmentStateInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SegmentStateInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start_position()) {
    _this->_internal_mutable_start_position()->::milvus::proto::msg::MsgPosition::MergeFrom(
        from._internal_start_position());
  }
  if (from._internal_has_end_position()) {
    _this->_internal_mutable_end_position()->::milvus::proto::msg::MsgPosition::MergeFrom(
        from._internal_end_position());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentStateInfo::CopyFrom(const SegmentStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SegmentStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentStateInfo::IsInitialized() const {
  return true;
}

void SegmentStateInfo::InternalSwap(SegmentStateInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentStateInfo, _impl_.state_)
      + sizeof(SegmentStateInfo::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(SegmentStateInfo, _impl_.start_position_)>(
          reinterpret_cast<char*>(&_impl_.start_position_),
          reinterpret_cast<char*>(&other->_impl_.start_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentStateInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[8]);
}

// ===================================================================

class GetSegmentStatesResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetSegmentStatesResponse* msg);
};

const ::milvus::proto::common::Status&
GetSegmentStatesResponse::_Internal::status(const GetSegmentStatesResponse* msg) {
  return *msg->_impl_.status_;
}
void GetSegmentStatesResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetSegmentStatesResponse::GetSegmentStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetSegmentStatesResponse)
}
GetSegmentStatesResponse::GetSegmentStatesResponse(const GetSegmentStatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSegmentStatesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){from._impl_.states_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetSegmentStatesResponse)
}

inline void GetSegmentStatesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSegmentStatesResponse::~GetSegmentStatesResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetSegmentStatesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSegmentStatesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.states_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetSegmentStatesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSegmentStatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetSegmentStatesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.states_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSegmentStatesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.SegmentStateInfo states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSegmentStatesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetSegmentStatesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.SegmentStateInfo states = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetSegmentStatesResponse)
  return target;
}

size_t GetSegmentStatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetSegmentStatesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.SegmentStateInfo states = 2;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->_impl_.states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSegmentStatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSegmentStatesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSegmentStatesResponse::GetClassData() const { return &_class_data_; }


void GetSegmentStatesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSegmentStatesResponse*>(&to_msg);
  auto& from = static_cast<const GetSegmentStatesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetSegmentStatesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.states_.MergeFrom(from._impl_.states_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSegmentStatesResponse::CopyFrom(const GetSegmentStatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetSegmentStatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentStatesResponse::IsInitialized() const {
  return true;
}

void GetSegmentStatesResponse::InternalSwap(GetSegmentStatesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSegmentStatesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[9]);
}

// ===================================================================

class GetSegmentInfoRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetSegmentInfoRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetSegmentInfoRequest::_Internal::base(const GetSegmentInfoRequest* msg) {
  return *msg->_impl_.base_;
}
void GetSegmentInfoRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetSegmentInfoRequest::GetSegmentInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetSegmentInfoRequest)
}
GetSegmentInfoRequest::GetSegmentInfoRequest(const GetSegmentInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSegmentInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){from._impl_.segmentids_}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.includeunhealthy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.includeunhealthy_ = from._impl_.includeunhealthy_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetSegmentInfoRequest)
}

inline void GetSegmentInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){arena}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.includeunhealthy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSegmentInfoRequest::~GetSegmentInfoRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetSegmentInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSegmentInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetSegmentInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSegmentInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetSegmentInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segmentids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.includeunhealthy_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSegmentInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segmentIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool includeUnHealthy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.includeunhealthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSegmentInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetSegmentInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // repeated int64 segmentIDs = 2;
  {
    int byte_size = _impl_._segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_segmentids(), byte_size, target);
    }
  }

  // bool includeUnHealthy = 3;
  if (this->_internal_includeunhealthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_includeunhealthy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetSegmentInfoRequest)
  return target;
}

size_t GetSegmentInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetSegmentInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // bool includeUnHealthy = 3;
  if (this->_internal_includeunhealthy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSegmentInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSegmentInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSegmentInfoRequest::GetClassData() const { return &_class_data_; }


void GetSegmentInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSegmentInfoRequest*>(&to_msg);
  auto& from = static_cast<const GetSegmentInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetSegmentInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segmentids_.MergeFrom(from._impl_.segmentids_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_includeunhealthy() != 0) {
    _this->_internal_set_includeunhealthy(from._internal_includeunhealthy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSegmentInfoRequest::CopyFrom(const GetSegmentInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetSegmentInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentInfoRequest::IsInitialized() const {
  return true;
}

void GetSegmentInfoRequest::InternalSwap(GetSegmentInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentids_.InternalSwap(&other->_impl_.segmentids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSegmentInfoRequest, _impl_.includeunhealthy_)
      + sizeof(GetSegmentInfoRequest::_impl_.includeunhealthy_)
      - PROTOBUF_FIELD_OFFSET(GetSegmentInfoRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSegmentInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[10]);
}

// ===================================================================

GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse::GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse() {}
GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse::GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse::MergeFrom(const GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[11]);
}

// ===================================================================

class GetSegmentInfoResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetSegmentInfoResponse* msg);
};

const ::milvus::proto::common::Status&
GetSegmentInfoResponse::_Internal::status(const GetSegmentInfoResponse* msg) {
  return *msg->_impl_.status_;
}
void GetSegmentInfoResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void GetSegmentInfoResponse::clear_channel_checkpoint() {
  _impl_.channel_checkpoint_.Clear();
}
GetSegmentInfoResponse::GetSegmentInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GetSegmentInfoResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetSegmentInfoResponse)
}
GetSegmentInfoResponse::GetSegmentInfoResponse(const GetSegmentInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSegmentInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){from._impl_.infos_}
    , /*decltype(_impl_.channel_checkpoint_)*/{}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.channel_checkpoint_.MergeFrom(from._impl_.channel_checkpoint_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetSegmentInfoResponse)
}

inline void GetSegmentInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){arena}
    , /*decltype(_impl_.channel_checkpoint_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSegmentInfoResponse::~GetSegmentInfoResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetSegmentInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GetSegmentInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.infos_.~RepeatedPtrField();
  _impl_.channel_checkpoint_.Destruct();
  _impl_.channel_checkpoint_.~MapField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetSegmentInfoResponse::ArenaDtor(void* object) {
  GetSegmentInfoResponse* _this = reinterpret_cast< GetSegmentInfoResponse* >(object);
  _this->_impl_.channel_checkpoint_.Destruct();
}
void GetSegmentInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSegmentInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetSegmentInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.infos_.Clear();
  _impl_.channel_checkpoint_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSegmentInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.SegmentInfo infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .milvus.proto.msg.MsgPosition> channel_checkpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.channel_checkpoint_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSegmentInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetSegmentInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.SegmentInfo infos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .milvus.proto.msg.MsgPosition> channel_checkpoint = 3;
  if (!this->_internal_channel_checkpoint().empty()) {
    using MapType = ::_pb::Map<std::string, ::milvus::proto::msg::MsgPosition>;
    using WireHelper = GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_channel_checkpoint();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "milvus.proto.data.GetSegmentInfoResponse.ChannelCheckpointEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetSegmentInfoResponse)
  return target;
}

size_t GetSegmentInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetSegmentInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.SegmentInfo infos = 2;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_impl_.infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .milvus.proto.msg.MsgPosition> channel_checkpoint = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_channel_checkpoint_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::msg::MsgPosition >::const_iterator
      it = this->_internal_channel_checkpoint().begin();
      it != this->_internal_channel_checkpoint().end(); ++it) {
    total_size += GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSegmentInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSegmentInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSegmentInfoResponse::GetClassData() const { return &_class_data_; }


void GetSegmentInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSegmentInfoResponse*>(&to_msg);
  auto& from = static_cast<const GetSegmentInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetSegmentInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.infos_.MergeFrom(from._impl_.infos_);
  _this->_impl_.channel_checkpoint_.MergeFrom(from._impl_.channel_checkpoint_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSegmentInfoResponse::CopyFrom(const GetSegmentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetSegmentInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentInfoResponse::IsInitialized() const {
  return true;
}

void GetSegmentInfoResponse::InternalSwap(GetSegmentInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
  _impl_.channel_checkpoint_.InternalSwap(&other->_impl_.channel_checkpoint_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSegmentInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[12]);
}

// ===================================================================

class GetInsertBinlogPathsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetInsertBinlogPathsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetInsertBinlogPathsRequest::_Internal::base(const GetInsertBinlogPathsRequest* msg) {
  return *msg->_impl_.base_;
}
void GetInsertBinlogPathsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetInsertBinlogPathsRequest::GetInsertBinlogPathsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetInsertBinlogPathsRequest)
}
GetInsertBinlogPathsRequest::GetInsertBinlogPathsRequest(const GetInsertBinlogPathsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInsertBinlogPathsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.segmentid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.segmentid_ = from._impl_.segmentid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetInsertBinlogPathsRequest)
}

inline void GetInsertBinlogPathsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetInsertBinlogPathsRequest::~GetInsertBinlogPathsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetInsertBinlogPathsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInsertBinlogPathsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetInsertBinlogPathsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInsertBinlogPathsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetInsertBinlogPathsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.segmentid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInsertBinlogPathsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segmentID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInsertBinlogPathsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetInsertBinlogPathsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 segmentID = 2;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_segmentid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetInsertBinlogPathsRequest)
  return target;
}

size_t GetInsertBinlogPathsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetInsertBinlogPathsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 segmentID = 2;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInsertBinlogPathsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInsertBinlogPathsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInsertBinlogPathsRequest::GetClassData() const { return &_class_data_; }


void GetInsertBinlogPathsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInsertBinlogPathsRequest*>(&to_msg);
  auto& from = static_cast<const GetInsertBinlogPathsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetInsertBinlogPathsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInsertBinlogPathsRequest::CopyFrom(const GetInsertBinlogPathsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetInsertBinlogPathsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInsertBinlogPathsRequest::IsInitialized() const {
  return true;
}

void GetInsertBinlogPathsRequest::InternalSwap(GetInsertBinlogPathsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetInsertBinlogPathsRequest, _impl_.segmentid_)
      + sizeof(GetInsertBinlogPathsRequest::_impl_.segmentid_)
      - PROTOBUF_FIELD_OFFSET(GetInsertBinlogPathsRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInsertBinlogPathsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[13]);
}

// ===================================================================

class GetInsertBinlogPathsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetInsertBinlogPathsResponse* msg);
};

const ::milvus::proto::common::Status&
GetInsertBinlogPathsResponse::_Internal::status(const GetInsertBinlogPathsResponse* msg) {
  return *msg->_impl_.status_;
}
void GetInsertBinlogPathsResponse::clear_paths() {
  _impl_.paths_.Clear();
}
void GetInsertBinlogPathsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetInsertBinlogPathsResponse::GetInsertBinlogPathsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetInsertBinlogPathsResponse)
}
GetInsertBinlogPathsResponse::GetInsertBinlogPathsResponse(const GetInsertBinlogPathsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInsertBinlogPathsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fieldids_){from._impl_.fieldids_}
    , /*decltype(_impl_._fieldids_cached_byte_size_)*/{0}
    , decltype(_impl_.paths_){from._impl_.paths_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetInsertBinlogPathsResponse)
}

inline void GetInsertBinlogPathsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fieldids_){arena}
    , /*decltype(_impl_._fieldids_cached_byte_size_)*/{0}
    , decltype(_impl_.paths_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetInsertBinlogPathsResponse::~GetInsertBinlogPathsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetInsertBinlogPathsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInsertBinlogPathsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fieldids_.~RepeatedField();
  _impl_.paths_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetInsertBinlogPathsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInsertBinlogPathsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetInsertBinlogPathsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fieldids_.Clear();
  _impl_.paths_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInsertBinlogPathsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 fieldIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_fieldids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_fieldids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.internal.StringList paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInsertBinlogPathsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetInsertBinlogPathsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 fieldIDs = 1;
  {
    int byte_size = _impl_._fieldids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_fieldids(), byte_size, target);
    }
  }

  // repeated .milvus.proto.internal.StringList paths = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paths_size()); i < n; i++) {
    const auto& repfield = this->_internal_paths(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.Status status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetInsertBinlogPathsResponse)
  return target;
}

size_t GetInsertBinlogPathsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetInsertBinlogPathsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 fieldIDs = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.fieldids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._fieldids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .milvus.proto.internal.StringList paths = 2;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->_impl_.paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInsertBinlogPathsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInsertBinlogPathsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInsertBinlogPathsResponse::GetClassData() const { return &_class_data_; }


void GetInsertBinlogPathsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInsertBinlogPathsResponse*>(&to_msg);
  auto& from = static_cast<const GetInsertBinlogPathsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetInsertBinlogPathsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fieldids_.MergeFrom(from._impl_.fieldids_);
  _this->_impl_.paths_.MergeFrom(from._impl_.paths_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInsertBinlogPathsResponse::CopyFrom(const GetInsertBinlogPathsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetInsertBinlogPathsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInsertBinlogPathsResponse::IsInitialized() const {
  return true;
}

void GetInsertBinlogPathsResponse::InternalSwap(GetInsertBinlogPathsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fieldids_.InternalSwap(&other->_impl_.fieldids_);
  _impl_.paths_.InternalSwap(&other->_impl_.paths_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInsertBinlogPathsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[14]);
}

// ===================================================================

class GetCollectionStatisticsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetCollectionStatisticsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetCollectionStatisticsRequest::_Internal::base(const GetCollectionStatisticsRequest* msg) {
  return *msg->_impl_.base_;
}
void GetCollectionStatisticsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetCollectionStatisticsRequest::GetCollectionStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetCollectionStatisticsRequest)
}
GetCollectionStatisticsRequest::GetCollectionStatisticsRequest(const GetCollectionStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCollectionStatisticsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.dbid_, &from._impl_.dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.collectionid_) -
    reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.collectionid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetCollectionStatisticsRequest)
}

inline void GetCollectionStatisticsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetCollectionStatisticsRequest::~GetCollectionStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetCollectionStatisticsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCollectionStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetCollectionStatisticsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCollectionStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetCollectionStatisticsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.collectionid_) -
      reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.collectionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCollectionStatisticsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCollectionStatisticsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetCollectionStatisticsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 dbID = 2;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_dbid(), target);
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_collectionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetCollectionStatisticsRequest)
  return target;
}

size_t GetCollectionStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetCollectionStatisticsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 dbID = 2;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCollectionStatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCollectionStatisticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCollectionStatisticsRequest::GetClassData() const { return &_class_data_; }


void GetCollectionStatisticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCollectionStatisticsRequest*>(&to_msg);
  auto& from = static_cast<const GetCollectionStatisticsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetCollectionStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCollectionStatisticsRequest::CopyFrom(const GetCollectionStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetCollectionStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectionStatisticsRequest::IsInitialized() const {
  return true;
}

void GetCollectionStatisticsRequest::InternalSwap(GetCollectionStatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCollectionStatisticsRequest, _impl_.collectionid_)
      + sizeof(GetCollectionStatisticsRequest::_impl_.collectionid_)
      - PROTOBUF_FIELD_OFFSET(GetCollectionStatisticsRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollectionStatisticsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[15]);
}

// ===================================================================

class GetCollectionStatisticsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetCollectionStatisticsResponse* msg);
};

const ::milvus::proto::common::Status&
GetCollectionStatisticsResponse::_Internal::status(const GetCollectionStatisticsResponse* msg) {
  return *msg->_impl_.status_;
}
void GetCollectionStatisticsResponse::clear_stats() {
  _impl_.stats_.Clear();
}
void GetCollectionStatisticsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetCollectionStatisticsResponse::GetCollectionStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetCollectionStatisticsResponse)
}
GetCollectionStatisticsResponse::GetCollectionStatisticsResponse(const GetCollectionStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCollectionStatisticsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetCollectionStatisticsResponse)
}

inline void GetCollectionStatisticsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetCollectionStatisticsResponse::~GetCollectionStatisticsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetCollectionStatisticsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCollectionStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetCollectionStatisticsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCollectionStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetCollectionStatisticsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCollectionStatisticsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .milvus.proto.common.KeyValuePair stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCollectionStatisticsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetCollectionStatisticsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair stats = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetCollectionStatisticsResponse)
  return target;
}

size_t GetCollectionStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetCollectionStatisticsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair stats = 1;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCollectionStatisticsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCollectionStatisticsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCollectionStatisticsResponse::GetClassData() const { return &_class_data_; }


void GetCollectionStatisticsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCollectionStatisticsResponse*>(&to_msg);
  auto& from = static_cast<const GetCollectionStatisticsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetCollectionStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCollectionStatisticsResponse::CopyFrom(const GetCollectionStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetCollectionStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectionStatisticsResponse::IsInitialized() const {
  return true;
}

void GetCollectionStatisticsResponse::InternalSwap(GetCollectionStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollectionStatisticsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[16]);
}

// ===================================================================

class GetPartitionStatisticsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetPartitionStatisticsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetPartitionStatisticsRequest::_Internal::base(const GetPartitionStatisticsRequest* msg) {
  return *msg->_impl_.base_;
}
void GetPartitionStatisticsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetPartitionStatisticsRequest::GetPartitionStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetPartitionStatisticsRequest)
}
GetPartitionStatisticsRequest::GetPartitionStatisticsRequest(const GetPartitionStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPartitionStatisticsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partitionids_){from._impl_.partitionids_}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.dbid_, &from._impl_.dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.collectionid_) -
    reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.collectionid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetPartitionStatisticsRequest)
}

inline void GetPartitionStatisticsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partitionids_){arena}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetPartitionStatisticsRequest::~GetPartitionStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetPartitionStatisticsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPartitionStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partitionids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetPartitionStatisticsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPartitionStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetPartitionStatisticsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partitionids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.collectionid_) -
      reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.collectionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPartitionStatisticsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 partitionIDs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_partitionids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_partitionids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPartitionStatisticsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetPartitionStatisticsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 dbID = 2;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_dbid(), target);
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_collectionid(), target);
  }

  // repeated int64 partitionIDs = 4;
  {
    int byte_size = _impl_._partitionids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_partitionids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetPartitionStatisticsRequest)
  return target;
}

size_t GetPartitionStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetPartitionStatisticsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 partitionIDs = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.partitionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._partitionids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 dbID = 2;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPartitionStatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPartitionStatisticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPartitionStatisticsRequest::GetClassData() const { return &_class_data_; }


void GetPartitionStatisticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPartitionStatisticsRequest*>(&to_msg);
  auto& from = static_cast<const GetPartitionStatisticsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetPartitionStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partitionids_.MergeFrom(from._impl_.partitionids_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPartitionStatisticsRequest::CopyFrom(const GetPartitionStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetPartitionStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPartitionStatisticsRequest::IsInitialized() const {
  return true;
}

void GetPartitionStatisticsRequest::InternalSwap(GetPartitionStatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partitionids_.InternalSwap(&other->_impl_.partitionids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPartitionStatisticsRequest, _impl_.collectionid_)
      + sizeof(GetPartitionStatisticsRequest::_impl_.collectionid_)
      - PROTOBUF_FIELD_OFFSET(GetPartitionStatisticsRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPartitionStatisticsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[17]);
}

// ===================================================================

class GetPartitionStatisticsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetPartitionStatisticsResponse* msg);
};

const ::milvus::proto::common::Status&
GetPartitionStatisticsResponse::_Internal::status(const GetPartitionStatisticsResponse* msg) {
  return *msg->_impl_.status_;
}
void GetPartitionStatisticsResponse::clear_stats() {
  _impl_.stats_.Clear();
}
void GetPartitionStatisticsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetPartitionStatisticsResponse::GetPartitionStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetPartitionStatisticsResponse)
}
GetPartitionStatisticsResponse::GetPartitionStatisticsResponse(const GetPartitionStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPartitionStatisticsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetPartitionStatisticsResponse)
}

inline void GetPartitionStatisticsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetPartitionStatisticsResponse::~GetPartitionStatisticsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetPartitionStatisticsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPartitionStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetPartitionStatisticsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPartitionStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetPartitionStatisticsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPartitionStatisticsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .milvus.proto.common.KeyValuePair stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPartitionStatisticsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetPartitionStatisticsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair stats = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetPartitionStatisticsResponse)
  return target;
}

size_t GetPartitionStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetPartitionStatisticsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair stats = 1;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPartitionStatisticsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPartitionStatisticsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPartitionStatisticsResponse::GetClassData() const { return &_class_data_; }


void GetPartitionStatisticsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPartitionStatisticsResponse*>(&to_msg);
  auto& from = static_cast<const GetPartitionStatisticsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetPartitionStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPartitionStatisticsResponse::CopyFrom(const GetPartitionStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetPartitionStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPartitionStatisticsResponse::IsInitialized() const {
  return true;
}

void GetPartitionStatisticsResponse::InternalSwap(GetPartitionStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPartitionStatisticsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[18]);
}

// ===================================================================

class GetSegmentInfoChannelRequest::_Internal {
 public:
};

GetSegmentInfoChannelRequest::GetSegmentInfoChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetSegmentInfoChannelRequest)
}
GetSegmentInfoChannelRequest::GetSegmentInfoChannelRequest(const GetSegmentInfoChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetSegmentInfoChannelRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetSegmentInfoChannelRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSegmentInfoChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSegmentInfoChannelRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetSegmentInfoChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[19]);
}

// ===================================================================

class VchannelInfo::_Internal {
 public:
  static const ::milvus::proto::msg::MsgPosition& seek_position(const VchannelInfo* msg);
};

const ::milvus::proto::msg::MsgPosition&
VchannelInfo::_Internal::seek_position(const VchannelInfo* msg) {
  return *msg->_impl_.seek_position_;
}
void VchannelInfo::clear_seek_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.seek_position_ != nullptr) {
    delete _impl_.seek_position_;
  }
  _impl_.seek_position_ = nullptr;
}
VchannelInfo::VchannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.VchannelInfo)
}
VchannelInfo::VchannelInfo(const VchannelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VchannelInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unflushedsegments_){from._impl_.unflushedsegments_}
    , decltype(_impl_.flushedsegments_){from._impl_.flushedsegments_}
    , decltype(_impl_.dropped_segments_){from._impl_.dropped_segments_}
    , decltype(_impl_.unflushedsegmentids_){from._impl_.unflushedsegmentids_}
    , /*decltype(_impl_._unflushedsegmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.flushedsegmentids_){from._impl_.flushedsegmentids_}
    , /*decltype(_impl_._flushedsegmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.dropped_segmentids_){from._impl_.dropped_segmentids_}
    , /*decltype(_impl_._dropped_segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.indexed_segmentids_){from._impl_.indexed_segmentids_}
    , /*decltype(_impl_._indexed_segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.indexed_segments_){from._impl_.indexed_segments_}
    , decltype(_impl_.channelname_){}
    , decltype(_impl_.seek_position_){nullptr}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channelname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelname().empty()) {
    _this->_impl_.channelname_.Set(from._internal_channelname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_seek_position()) {
    _this->_impl_.seek_position_ = new ::milvus::proto::msg::MsgPosition(*from._impl_.seek_position_);
  }
  _this->_impl_.collectionid_ = from._impl_.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.VchannelInfo)
}

inline void VchannelInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unflushedsegments_){arena}
    , decltype(_impl_.flushedsegments_){arena}
    , decltype(_impl_.dropped_segments_){arena}
    , decltype(_impl_.unflushedsegmentids_){arena}
    , /*decltype(_impl_._unflushedsegmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.flushedsegmentids_){arena}
    , /*decltype(_impl_._flushedsegmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.dropped_segmentids_){arena}
    , /*decltype(_impl_._dropped_segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.indexed_segmentids_){arena}
    , /*decltype(_impl_._indexed_segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.indexed_segments_){arena}
    , decltype(_impl_.channelname_){}
    , decltype(_impl_.seek_position_){nullptr}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channelname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VchannelInfo::~VchannelInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.VchannelInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VchannelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unflushedsegments_.~RepeatedPtrField();
  _impl_.flushedsegments_.~RepeatedPtrField();
  _impl_.dropped_segments_.~RepeatedPtrField();
  _impl_.unflushedsegmentids_.~RepeatedField();
  _impl_.flushedsegmentids_.~RepeatedField();
  _impl_.dropped_segmentids_.~RepeatedField();
  _impl_.indexed_segmentids_.~RepeatedField();
  _impl_.indexed_segments_.~RepeatedPtrField();
  _impl_.channelname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.seek_position_;
}

void VchannelInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VchannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.VchannelInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unflushedsegments_.Clear();
  _impl_.flushedsegments_.Clear();
  _impl_.dropped_segments_.Clear();
  _impl_.unflushedsegmentids_.Clear();
  _impl_.flushedsegmentids_.Clear();
  _impl_.dropped_segmentids_.Clear();
  _impl_.indexed_segmentids_.Clear();
  _impl_.indexed_segments_.Clear();
  _impl_.channelname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.seek_position_ != nullptr) {
    delete _impl_.seek_position_;
  }
  _impl_.seek_position_ = nullptr;
  _impl_.collectionid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VchannelInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string channelName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channelname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.VchannelInfo.channelName"));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.msg.MsgPosition seek_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_seek_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.SegmentInfo unflushedSegments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unflushedsegments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.SegmentInfo flushedSegments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_flushedsegments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.SegmentInfo dropped_segments = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dropped_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 unflushedSegmentIds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_unflushedsegmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_unflushedsegmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 flushedSegmentIds = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_flushedsegmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_flushedsegmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 dropped_segmentIds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dropped_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_dropped_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 indexed_segmentIds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_indexed_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_indexed_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.SegmentInfo indexed_segments = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_indexed_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VchannelInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.VchannelInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // string channelName = 2;
  if (!this->_internal_channelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelname().data(), static_cast<int>(this->_internal_channelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.VchannelInfo.channelName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channelname(), target);
  }

  // .milvus.proto.msg.MsgPosition seek_position = 3;
  if (this->_internal_has_seek_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::seek_position(this),
        _Internal::seek_position(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.SegmentInfo unflushedSegments = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unflushedsegments_size()); i < n; i++) {
    const auto& repfield = this->_internal_unflushedsegments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.SegmentInfo flushedSegments = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_flushedsegments_size()); i < n; i++) {
    const auto& repfield = this->_internal_flushedsegments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.SegmentInfo dropped_segments = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dropped_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_dropped_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 unflushedSegmentIds = 7;
  {
    int byte_size = _impl_._unflushedsegmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_unflushedsegmentids(), byte_size, target);
    }
  }

  // repeated int64 flushedSegmentIds = 8;
  {
    int byte_size = _impl_._flushedsegmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_flushedsegmentids(), byte_size, target);
    }
  }

  // repeated int64 dropped_segmentIds = 9;
  {
    int byte_size = _impl_._dropped_segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          9, _internal_dropped_segmentids(), byte_size, target);
    }
  }

  // repeated int64 indexed_segmentIds = 10;
  {
    int byte_size = _impl_._indexed_segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          10, _internal_indexed_segmentids(), byte_size, target);
    }
  }

  // repeated .milvus.proto.data.SegmentInfo indexed_segments = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_indexed_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_indexed_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.VchannelInfo)
  return target;
}

size_t VchannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.VchannelInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.SegmentInfo unflushedSegments = 4;
  total_size += 1UL * this->_internal_unflushedsegments_size();
  for (const auto& msg : this->_impl_.unflushedsegments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.SegmentInfo flushedSegments = 5;
  total_size += 1UL * this->_internal_flushedsegments_size();
  for (const auto& msg : this->_impl_.flushedsegments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.SegmentInfo dropped_segments = 6;
  total_size += 1UL * this->_internal_dropped_segments_size();
  for (const auto& msg : this->_impl_.dropped_segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 unflushedSegmentIds = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.unflushedsegmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._unflushedsegmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 flushedSegmentIds = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.flushedsegmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._flushedsegmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 dropped_segmentIds = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.dropped_segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dropped_segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 indexed_segmentIds = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.indexed_segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._indexed_segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .milvus.proto.data.SegmentInfo indexed_segments = 11;
  total_size += 1UL * this->_internal_indexed_segments_size();
  for (const auto& msg : this->_impl_.indexed_segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string channelName = 2;
  if (!this->_internal_channelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelname());
  }

  // .milvus.proto.msg.MsgPosition seek_position = 3;
  if (this->_internal_has_seek_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.seek_position_);
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VchannelInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VchannelInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VchannelInfo::GetClassData() const { return &_class_data_; }


void VchannelInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VchannelInfo*>(&to_msg);
  auto& from = static_cast<const VchannelInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.VchannelInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unflushedsegments_.MergeFrom(from._impl_.unflushedsegments_);
  _this->_impl_.flushedsegments_.MergeFrom(from._impl_.flushedsegments_);
  _this->_impl_.dropped_segments_.MergeFrom(from._impl_.dropped_segments_);
  _this->_impl_.unflushedsegmentids_.MergeFrom(from._impl_.unflushedsegmentids_);
  _this->_impl_.flushedsegmentids_.MergeFrom(from._impl_.flushedsegmentids_);
  _this->_impl_.dropped_segmentids_.MergeFrom(from._impl_.dropped_segmentids_);
  _this->_impl_.indexed_segmentids_.MergeFrom(from._impl_.indexed_segmentids_);
  _this->_impl_.indexed_segments_.MergeFrom(from._impl_.indexed_segments_);
  if (!from._internal_channelname().empty()) {
    _this->_internal_set_channelname(from._internal_channelname());
  }
  if (from._internal_has_seek_position()) {
    _this->_internal_mutable_seek_position()->::milvus::proto::msg::MsgPosition::MergeFrom(
        from._internal_seek_position());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VchannelInfo::CopyFrom(const VchannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.VchannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VchannelInfo::IsInitialized() const {
  return true;
}

void VchannelInfo::InternalSwap(VchannelInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.unflushedsegments_.InternalSwap(&other->_impl_.unflushedsegments_);
  _impl_.flushedsegments_.InternalSwap(&other->_impl_.flushedsegments_);
  _impl_.dropped_segments_.InternalSwap(&other->_impl_.dropped_segments_);
  _impl_.unflushedsegmentids_.InternalSwap(&other->_impl_.unflushedsegmentids_);
  _impl_.flushedsegmentids_.InternalSwap(&other->_impl_.flushedsegmentids_);
  _impl_.dropped_segmentids_.InternalSwap(&other->_impl_.dropped_segmentids_);
  _impl_.indexed_segmentids_.InternalSwap(&other->_impl_.indexed_segmentids_);
  _impl_.indexed_segments_.InternalSwap(&other->_impl_.indexed_segments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelname_, lhs_arena,
      &other->_impl_.channelname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VchannelInfo, _impl_.collectionid_)
      + sizeof(VchannelInfo::_impl_.collectionid_)
      - PROTOBUF_FIELD_OFFSET(VchannelInfo, _impl_.seek_position_)>(
          reinterpret_cast<char*>(&_impl_.seek_position_),
          reinterpret_cast<char*>(&other->_impl_.seek_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VchannelInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[20]);
}

// ===================================================================

class WatchDmChannelsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const WatchDmChannelsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
WatchDmChannelsRequest::_Internal::base(const WatchDmChannelsRequest* msg) {
  return *msg->_impl_.base_;
}
void WatchDmChannelsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
WatchDmChannelsRequest::WatchDmChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.WatchDmChannelsRequest)
}
WatchDmChannelsRequest::WatchDmChannelsRequest(const WatchDmChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WatchDmChannelsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vchannels_){from._impl_.vchannels_}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.WatchDmChannelsRequest)
}

inline void WatchDmChannelsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vchannels_){arena}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WatchDmChannelsRequest::~WatchDmChannelsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.WatchDmChannelsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WatchDmChannelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vchannels_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void WatchDmChannelsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WatchDmChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.WatchDmChannelsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vchannels_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchDmChannelsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.VchannelInfo vchannels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vchannels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WatchDmChannelsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.WatchDmChannelsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.VchannelInfo vchannels = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vchannels_size()); i < n; i++) {
    const auto& repfield = this->_internal_vchannels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.WatchDmChannelsRequest)
  return target;
}

size_t WatchDmChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.WatchDmChannelsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.VchannelInfo vchannels = 2;
  total_size += 1UL * this->_internal_vchannels_size();
  for (const auto& msg : this->_impl_.vchannels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchDmChannelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WatchDmChannelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchDmChannelsRequest::GetClassData() const { return &_class_data_; }


void WatchDmChannelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WatchDmChannelsRequest*>(&to_msg);
  auto& from = static_cast<const WatchDmChannelsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.WatchDmChannelsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vchannels_.MergeFrom(from._impl_.vchannels_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchDmChannelsRequest::CopyFrom(const WatchDmChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.WatchDmChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchDmChannelsRequest::IsInitialized() const {
  return true;
}

void WatchDmChannelsRequest::InternalSwap(WatchDmChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vchannels_.InternalSwap(&other->_impl_.vchannels_);
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchDmChannelsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[21]);
}

// ===================================================================

class FlushSegmentsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const FlushSegmentsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
FlushSegmentsRequest::_Internal::base(const FlushSegmentsRequest* msg) {
  return *msg->_impl_.base_;
}
void FlushSegmentsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
FlushSegmentsRequest::FlushSegmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.FlushSegmentsRequest)
}
FlushSegmentsRequest::FlushSegmentsRequest(const FlushSegmentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlushSegmentsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){from._impl_.segmentids_}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.dbid_, &from._impl_.dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.collectionid_) -
    reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.collectionid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.FlushSegmentsRequest)
}

inline void FlushSegmentsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){arena}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.dbid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlushSegmentsRequest::~FlushSegmentsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.FlushSegmentsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlushSegmentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void FlushSegmentsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlushSegmentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.FlushSegmentsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segmentids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.collectionid_) -
      reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.collectionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushSegmentsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dbID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segmentIDs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlushSegmentsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.FlushSegmentsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 dbID = 2;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_dbid(), target);
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_collectionid(), target);
  }

  // repeated int64 segmentIDs = 4;
  {
    int byte_size = _impl_._segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_segmentids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.FlushSegmentsRequest)
  return target;
}

size_t FlushSegmentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.FlushSegmentsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 dbID = 2;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dbid());
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushSegmentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlushSegmentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushSegmentsRequest::GetClassData() const { return &_class_data_; }


void FlushSegmentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlushSegmentsRequest*>(&to_msg);
  auto& from = static_cast<const FlushSegmentsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.FlushSegmentsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segmentids_.MergeFrom(from._impl_.segmentids_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlushSegmentsRequest::CopyFrom(const FlushSegmentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.FlushSegmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushSegmentsRequest::IsInitialized() const {
  return true;
}

void FlushSegmentsRequest::InternalSwap(FlushSegmentsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentids_.InternalSwap(&other->_impl_.segmentids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlushSegmentsRequest, _impl_.collectionid_)
      + sizeof(FlushSegmentsRequest::_impl_.collectionid_)
      - PROTOBUF_FIELD_OFFSET(FlushSegmentsRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushSegmentsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[22]);
}

// ===================================================================

class SegmentMsg::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SegmentMsg* msg);
  static const ::milvus::proto::data::SegmentInfo& segment(const SegmentMsg* msg);
};

const ::milvus::proto::common::MsgBase&
SegmentMsg::_Internal::base(const SegmentMsg* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::data::SegmentInfo&
SegmentMsg::_Internal::segment(const SegmentMsg* msg) {
  return *msg->_impl_.segment_;
}
void SegmentMsg::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
SegmentMsg::SegmentMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SegmentMsg)
}
SegmentMsg::SegmentMsg(const SegmentMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.segment_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_segment()) {
    _this->_impl_.segment_ = new ::milvus::proto::data::SegmentInfo(*from._impl_.segment_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SegmentMsg)
}

inline void SegmentMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.segment_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SegmentMsg::~SegmentMsg() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SegmentMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.segment_;
}

void SegmentMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SegmentMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.segment_ != nullptr) {
    delete _impl_.segment_;
  }
  _impl_.segment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.data.SegmentInfo segment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SegmentMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.data.SegmentInfo segment = 2;
  if (this->_internal_has_segment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::segment(this),
        _Internal::segment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SegmentMsg)
  return target;
}

size_t SegmentMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SegmentMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.data.SegmentInfo segment = 2;
  if (this->_internal_has_segment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.segment_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentMsg::GetClassData() const { return &_class_data_; }


void SegmentMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentMsg*>(&to_msg);
  auto& from = static_cast<const SegmentMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SegmentMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_segment()) {
    _this->_internal_mutable_segment()->::milvus::proto::data::SegmentInfo::MergeFrom(
        from._internal_segment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentMsg::CopyFrom(const SegmentMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SegmentMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentMsg::IsInitialized() const {
  return true;
}

void SegmentMsg::InternalSwap(SegmentMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentMsg, _impl_.segment_)
      + sizeof(SegmentMsg::_impl_.segment_)
      - PROTOBUF_FIELD_OFFSET(SegmentMsg, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[23]);
}

// ===================================================================

class SegmentInfo::_Internal {
 public:
  static const ::milvus::proto::msg::MsgPosition& start_position(const SegmentInfo* msg);
  static const ::milvus::proto::msg::MsgPosition& dml_position(const SegmentInfo* msg);
};

const ::milvus::proto::msg::MsgPosition&
SegmentInfo::_Internal::start_position(const SegmentInfo* msg) {
  return *msg->_impl_.start_position_;
}
const ::milvus::proto::msg::MsgPosition&
SegmentInfo::_Internal::dml_position(const SegmentInfo* msg) {
  return *msg->_impl_.dml_position_;
}
void SegmentInfo::clear_start_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_position_ != nullptr) {
    delete _impl_.start_position_;
  }
  _impl_.start_position_ = nullptr;
}
void SegmentInfo::clear_dml_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.dml_position_ != nullptr) {
    delete _impl_.dml_position_;
  }
  _impl_.dml_position_ = nullptr;
}
SegmentInfo::SegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SegmentInfo)
}
SegmentInfo::SegmentInfo(const SegmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.binlogs_){from._impl_.binlogs_}
    , decltype(_impl_.statslogs_){from._impl_.statslogs_}
    , decltype(_impl_.deltalogs_){from._impl_.deltalogs_}
    , decltype(_impl_.compactionfrom_){from._impl_.compactionfrom_}
    , /*decltype(_impl_._compactionfrom_cached_byte_size_)*/{0}
    , decltype(_impl_.insert_channel_){}
    , decltype(_impl_.start_position_){nullptr}
    , decltype(_impl_.dml_position_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.partitionid_){}
    , decltype(_impl_.num_of_rows_){}
    , decltype(_impl_.max_row_num_){}
    , decltype(_impl_.last_expire_time_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.createdbycompaction_){}
    , decltype(_impl_.is_importing_){}
    , decltype(_impl_.is_fake_){}
    , decltype(_impl_.dropped_at_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.insert_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.insert_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_insert_channel().empty()) {
    _this->_impl_.insert_channel_.Set(from._internal_insert_channel(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_start_position()) {
    _this->_impl_.start_position_ = new ::milvus::proto::msg::MsgPosition(*from._impl_.start_position_);
  }
  if (from._internal_has_dml_position()) {
    _this->_impl_.dml_position_ = new ::milvus::proto::msg::MsgPosition(*from._impl_.dml_position_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dropped_at_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.dropped_at_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SegmentInfo)
}

inline void SegmentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.binlogs_){arena}
    , decltype(_impl_.statslogs_){arena}
    , decltype(_impl_.deltalogs_){arena}
    , decltype(_impl_.compactionfrom_){arena}
    , /*decltype(_impl_._compactionfrom_cached_byte_size_)*/{0}
    , decltype(_impl_.insert_channel_){}
    , decltype(_impl_.start_position_){nullptr}
    , decltype(_impl_.dml_position_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , decltype(_impl_.num_of_rows_){int64_t{0}}
    , decltype(_impl_.max_row_num_){int64_t{0}}
    , decltype(_impl_.last_expire_time_){uint64_t{0u}}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.createdbycompaction_){false}
    , decltype(_impl_.is_importing_){false}
    , decltype(_impl_.is_fake_){false}
    , decltype(_impl_.dropped_at_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.insert_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.insert_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SegmentInfo::~SegmentInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SegmentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.binlogs_.~RepeatedPtrField();
  _impl_.statslogs_.~RepeatedPtrField();
  _impl_.deltalogs_.~RepeatedPtrField();
  _impl_.compactionfrom_.~RepeatedField();
  _impl_.insert_channel_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_position_;
  if (this != internal_default_instance()) delete _impl_.dml_position_;
}

void SegmentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SegmentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.binlogs_.Clear();
  _impl_.statslogs_.Clear();
  _impl_.deltalogs_.Clear();
  _impl_.compactionfrom_.Clear();
  _impl_.insert_channel_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.start_position_ != nullptr) {
    delete _impl_.start_position_;
  }
  _impl_.start_position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dml_position_ != nullptr) {
    delete _impl_.dml_position_;
  }
  _impl_.dml_position_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dropped_at_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.dropped_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string insert_channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_insert_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.SegmentInfo.insert_channel"));
        } else
          goto handle_unusual;
        continue;
      // int64 num_of_rows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.num_of_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.SegmentState state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::SegmentState>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 max_row_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.max_row_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_expire_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.last_expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.msg.MsgPosition start_position = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.msg.MsgPosition dml_position = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dml_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog binlogs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_binlogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog statslogs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statslogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog deltalogs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deltalogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool createdByCompaction = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.createdbycompaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 compactionFrom = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_compactionfrom(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 120) {
          _internal_add_compactionfrom(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 dropped_at = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.dropped_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_importing = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.is_importing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_fake = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.is_fake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SegmentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 3;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_partitionid(), target);
  }

  // string insert_channel = 4;
  if (!this->_internal_insert_channel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insert_channel().data(), static_cast<int>(this->_internal_insert_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.SegmentInfo.insert_channel");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_insert_channel(), target);
  }

  // int64 num_of_rows = 5;
  if (this->_internal_num_of_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_of_rows(), target);
  }

  // .milvus.proto.common.SegmentState state = 6;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_state(), target);
  }

  // int64 max_row_num = 7;
  if (this->_internal_max_row_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_max_row_num(), target);
  }

  // uint64 last_expire_time = 8;
  if (this->_internal_last_expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_last_expire_time(), target);
  }

  // .milvus.proto.msg.MsgPosition start_position = 9;
  if (this->_internal_has_start_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::start_position(this),
        _Internal::start_position(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.msg.MsgPosition dml_position = 10;
  if (this->_internal_has_dml_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::dml_position(this),
        _Internal::dml_position(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.FieldBinlog binlogs = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_binlogs_size()); i < n; i++) {
    const auto& repfield = this->_internal_binlogs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.FieldBinlog statslogs = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statslogs_size()); i < n; i++) {
    const auto& repfield = this->_internal_statslogs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deltalogs_size()); i < n; i++) {
    const auto& repfield = this->_internal_deltalogs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool createdByCompaction = 14;
  if (this->_internal_createdbycompaction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_createdbycompaction(), target);
  }

  // repeated int64 compactionFrom = 15;
  {
    int byte_size = _impl_._compactionfrom_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          15, _internal_compactionfrom(), byte_size, target);
    }
  }

  // uint64 dropped_at = 16;
  if (this->_internal_dropped_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_dropped_at(), target);
  }

  // bool is_importing = 17;
  if (this->_internal_is_importing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_is_importing(), target);
  }

  // bool is_fake = 18;
  if (this->_internal_is_fake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_is_fake(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SegmentInfo)
  return target;
}

size_t SegmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SegmentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.FieldBinlog binlogs = 11;
  total_size += 1UL * this->_internal_binlogs_size();
  for (const auto& msg : this->_impl_.binlogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.FieldBinlog statslogs = 12;
  total_size += 1UL * this->_internal_statslogs_size();
  for (const auto& msg : this->_impl_.statslogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 13;
  total_size += 1UL * this->_internal_deltalogs_size();
  for (const auto& msg : this->_impl_.deltalogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 compactionFrom = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.compactionfrom_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._compactionfrom_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string insert_channel = 4;
  if (!this->_internal_insert_channel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insert_channel());
  }

  // .milvus.proto.msg.MsgPosition start_position = 9;
  if (this->_internal_has_start_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_position_);
  }

  // .milvus.proto.msg.MsgPosition dml_position = 10;
  if (this->_internal_has_dml_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dml_position_);
  }

  // int64 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 partitionID = 3;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  // int64 num_of_rows = 5;
  if (this->_internal_num_of_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_of_rows());
  }

  // int64 max_row_num = 7;
  if (this->_internal_max_row_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_row_num());
  }

  // uint64 last_expire_time = 8;
  if (this->_internal_last_expire_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_expire_time());
  }

  // .milvus.proto.common.SegmentState state = 6;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // bool createdByCompaction = 14;
  if (this->_internal_createdbycompaction() != 0) {
    total_size += 1 + 1;
  }

  // bool is_importing = 17;
  if (this->_internal_is_importing() != 0) {
    total_size += 2 + 1;
  }

  // bool is_fake = 18;
  if (this->_internal_is_fake() != 0) {
    total_size += 2 + 1;
  }

  // uint64 dropped_at = 16;
  if (this->_internal_dropped_at() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_dropped_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentInfo::GetClassData() const { return &_class_data_; }


void SegmentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentInfo*>(&to_msg);
  auto& from = static_cast<const SegmentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SegmentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.binlogs_.MergeFrom(from._impl_.binlogs_);
  _this->_impl_.statslogs_.MergeFrom(from._impl_.statslogs_);
  _this->_impl_.deltalogs_.MergeFrom(from._impl_.deltalogs_);
  _this->_impl_.compactionfrom_.MergeFrom(from._impl_.compactionfrom_);
  if (!from._internal_insert_channel().empty()) {
    _this->_internal_set_insert_channel(from._internal_insert_channel());
  }
  if (from._internal_has_start_position()) {
    _this->_internal_mutable_start_position()->::milvus::proto::msg::MsgPosition::MergeFrom(
        from._internal_start_position());
  }
  if (from._internal_has_dml_position()) {
    _this->_internal_mutable_dml_position()->::milvus::proto::msg::MsgPosition::MergeFrom(
        from._internal_dml_position());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  if (from._internal_num_of_rows() != 0) {
    _this->_internal_set_num_of_rows(from._internal_num_of_rows());
  }
  if (from._internal_max_row_num() != 0) {
    _this->_internal_set_max_row_num(from._internal_max_row_num());
  }
  if (from._internal_last_expire_time() != 0) {
    _this->_internal_set_last_expire_time(from._internal_last_expire_time());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_createdbycompaction() != 0) {
    _this->_internal_set_createdbycompaction(from._internal_createdbycompaction());
  }
  if (from._internal_is_importing() != 0) {
    _this->_internal_set_is_importing(from._internal_is_importing());
  }
  if (from._internal_is_fake() != 0) {
    _this->_internal_set_is_fake(from._internal_is_fake());
  }
  if (from._internal_dropped_at() != 0) {
    _this->_internal_set_dropped_at(from._internal_dropped_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentInfo::CopyFrom(const SegmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentInfo::IsInitialized() const {
  return true;
}

void SegmentInfo::InternalSwap(SegmentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.binlogs_.InternalSwap(&other->_impl_.binlogs_);
  _impl_.statslogs_.InternalSwap(&other->_impl_.statslogs_);
  _impl_.deltalogs_.InternalSwap(&other->_impl_.deltalogs_);
  _impl_.compactionfrom_.InternalSwap(&other->_impl_.compactionfrom_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.insert_channel_, lhs_arena,
      &other->_impl_.insert_channel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentInfo, _impl_.dropped_at_)
      + sizeof(SegmentInfo::_impl_.dropped_at_)
      - PROTOBUF_FIELD_OFFSET(SegmentInfo, _impl_.start_position_)>(
          reinterpret_cast<char*>(&_impl_.start_position_),
          reinterpret_cast<char*>(&other->_impl_.start_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[24]);
}

// ===================================================================

class SegmentStartPosition::_Internal {
 public:
  static const ::milvus::proto::msg::MsgPosition& start_position(const SegmentStartPosition* msg);
};

const ::milvus::proto::msg::MsgPosition&
SegmentStartPosition::_Internal::start_position(const SegmentStartPosition* msg) {
  return *msg->_impl_.start_position_;
}
void SegmentStartPosition::clear_start_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_position_ != nullptr) {
    delete _impl_.start_position_;
  }
  _impl_.start_position_ = nullptr;
}
SegmentStartPosition::SegmentStartPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SegmentStartPosition)
}
SegmentStartPosition::SegmentStartPosition(const SegmentStartPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentStartPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_position_){nullptr}
    , decltype(_impl_.segmentid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_position()) {
    _this->_impl_.start_position_ = new ::milvus::proto::msg::MsgPosition(*from._impl_.start_position_);
  }
  _this->_impl_.segmentid_ = from._impl_.segmentid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SegmentStartPosition)
}

inline void SegmentStartPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_position_){nullptr}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SegmentStartPosition::~SegmentStartPosition() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SegmentStartPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentStartPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_position_;
}

void SegmentStartPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentStartPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SegmentStartPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.start_position_ != nullptr) {
    delete _impl_.start_position_;
  }
  _impl_.start_position_ = nullptr;
  _impl_.segmentid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentStartPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.msg.MsgPosition start_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segmentID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentStartPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SegmentStartPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.msg.MsgPosition start_position = 1;
  if (this->_internal_has_start_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_position(this),
        _Internal::start_position(this).GetCachedSize(), target, stream);
  }

  // int64 segmentID = 2;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_segmentid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SegmentStartPosition)
  return target;
}

size_t SegmentStartPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SegmentStartPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.msg.MsgPosition start_position = 1;
  if (this->_internal_has_start_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_position_);
  }

  // int64 segmentID = 2;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentStartPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentStartPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentStartPosition::GetClassData() const { return &_class_data_; }


void SegmentStartPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentStartPosition*>(&to_msg);
  auto& from = static_cast<const SegmentStartPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SegmentStartPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start_position()) {
    _this->_internal_mutable_start_position()->::milvus::proto::msg::MsgPosition::MergeFrom(
        from._internal_start_position());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentStartPosition::CopyFrom(const SegmentStartPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SegmentStartPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentStartPosition::IsInitialized() const {
  return true;
}

void SegmentStartPosition::InternalSwap(SegmentStartPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentStartPosition, _impl_.segmentid_)
      + sizeof(SegmentStartPosition::_impl_.segmentid_)
      - PROTOBUF_FIELD_OFFSET(SegmentStartPosition, _impl_.start_position_)>(
          reinterpret_cast<char*>(&_impl_.start_position_),
          reinterpret_cast<char*>(&other->_impl_.start_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentStartPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[25]);
}

// ===================================================================

class SaveBinlogPathsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SaveBinlogPathsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
SaveBinlogPathsRequest::_Internal::base(const SaveBinlogPathsRequest* msg) {
  return *msg->_impl_.base_;
}
void SaveBinlogPathsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
SaveBinlogPathsRequest::SaveBinlogPathsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SaveBinlogPathsRequest)
}
SaveBinlogPathsRequest::SaveBinlogPathsRequest(const SaveBinlogPathsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SaveBinlogPathsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field2binlogpaths_){from._impl_.field2binlogpaths_}
    , decltype(_impl_.checkpoints_){from._impl_.checkpoints_}
    , decltype(_impl_.start_positions_){from._impl_.start_positions_}
    , decltype(_impl_.field2statslogpaths_){from._impl_.field2statslogpaths_}
    , decltype(_impl_.deltalogs_){from._impl_.deltalogs_}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.segmentid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.flushed_){}
    , decltype(_impl_.dropped_){}
    , decltype(_impl_.importing_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel().empty()) {
    _this->_impl_.channel_.Set(from._internal_channel(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.segmentid_, &from._impl_.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.importing_) -
    reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.importing_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SaveBinlogPathsRequest)
}

inline void SaveBinlogPathsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field2binlogpaths_){arena}
    , decltype(_impl_.checkpoints_){arena}
    , decltype(_impl_.start_positions_){arena}
    , decltype(_impl_.field2statslogpaths_){arena}
    , decltype(_impl_.deltalogs_){arena}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.flushed_){false}
    , decltype(_impl_.dropped_){false}
    , decltype(_impl_.importing_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SaveBinlogPathsRequest::~SaveBinlogPathsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SaveBinlogPathsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SaveBinlogPathsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field2binlogpaths_.~RepeatedPtrField();
  _impl_.checkpoints_.~RepeatedPtrField();
  _impl_.start_positions_.~RepeatedPtrField();
  _impl_.field2statslogpaths_.~RepeatedPtrField();
  _impl_.deltalogs_.~RepeatedPtrField();
  _impl_.channel_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void SaveBinlogPathsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SaveBinlogPathsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SaveBinlogPathsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field2binlogpaths_.Clear();
  _impl_.checkpoints_.Clear();
  _impl_.start_positions_.Clear();
  _impl_.field2statslogpaths_.Clear();
  _impl_.deltalogs_.Clear();
  _impl_.channel_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.importing_) -
      reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.importing_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveBinlogPathsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segmentID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog field2BinlogPaths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field2binlogpaths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.CheckPoint checkPoints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_checkpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.SegmentStartPosition start_positions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_start_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool flushed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.flushed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field2statslogpaths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog deltalogs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deltalogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool dropped = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool importing = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.importing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string channel = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.SaveBinlogPathsRequest.channel"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaveBinlogPathsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SaveBinlogPathsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 segmentID = 2;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_segmentid(), target);
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_collectionid(), target);
  }

  // repeated .milvus.proto.data.FieldBinlog field2BinlogPaths = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field2binlogpaths_size()); i < n; i++) {
    const auto& repfield = this->_internal_field2binlogpaths(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.CheckPoint checkPoints = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_checkpoints_size()); i < n; i++) {
    const auto& repfield = this->_internal_checkpoints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.SegmentStartPosition start_positions = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_start_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_start_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool flushed = 7;
  if (this->_internal_flushed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_flushed(), target);
  }

  // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field2statslogpaths_size()); i < n; i++) {
    const auto& repfield = this->_internal_field2statslogpaths(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deltalogs_size()); i < n; i++) {
    const auto& repfield = this->_internal_deltalogs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool dropped = 10;
  if (this->_internal_dropped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_dropped(), target);
  }

  // bool importing = 11;
  if (this->_internal_importing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_importing(), target);
  }

  // string channel = 12;
  if (!this->_internal_channel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel().data(), static_cast<int>(this->_internal_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.SaveBinlogPathsRequest.channel");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SaveBinlogPathsRequest)
  return target;
}

size_t SaveBinlogPathsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SaveBinlogPathsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.FieldBinlog field2BinlogPaths = 4;
  total_size += 1UL * this->_internal_field2binlogpaths_size();
  for (const auto& msg : this->_impl_.field2binlogpaths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.CheckPoint checkPoints = 5;
  total_size += 1UL * this->_internal_checkpoints_size();
  for (const auto& msg : this->_impl_.checkpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.SegmentStartPosition start_positions = 6;
  total_size += 1UL * this->_internal_start_positions_size();
  for (const auto& msg : this->_impl_.start_positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 8;
  total_size += 1UL * this->_internal_field2statslogpaths_size();
  for (const auto& msg : this->_impl_.field2statslogpaths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 9;
  total_size += 1UL * this->_internal_deltalogs_size();
  for (const auto& msg : this->_impl_.deltalogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string channel = 12;
  if (!this->_internal_channel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 segmentID = 2;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // bool flushed = 7;
  if (this->_internal_flushed() != 0) {
    total_size += 1 + 1;
  }

  // bool dropped = 10;
  if (this->_internal_dropped() != 0) {
    total_size += 1 + 1;
  }

  // bool importing = 11;
  if (this->_internal_importing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveBinlogPathsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SaveBinlogPathsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveBinlogPathsRequest::GetClassData() const { return &_class_data_; }


void SaveBinlogPathsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SaveBinlogPathsRequest*>(&to_msg);
  auto& from = static_cast<const SaveBinlogPathsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SaveBinlogPathsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.field2binlogpaths_.MergeFrom(from._impl_.field2binlogpaths_);
  _this->_impl_.checkpoints_.MergeFrom(from._impl_.checkpoints_);
  _this->_impl_.start_positions_.MergeFrom(from._impl_.start_positions_);
  _this->_impl_.field2statslogpaths_.MergeFrom(from._impl_.field2statslogpaths_);
  _this->_impl_.deltalogs_.MergeFrom(from._impl_.deltalogs_);
  if (!from._internal_channel().empty()) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_flushed() != 0) {
    _this->_internal_set_flushed(from._internal_flushed());
  }
  if (from._internal_dropped() != 0) {
    _this->_internal_set_dropped(from._internal_dropped());
  }
  if (from._internal_importing() != 0) {
    _this->_internal_set_importing(from._internal_importing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveBinlogPathsRequest::CopyFrom(const SaveBinlogPathsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SaveBinlogPathsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveBinlogPathsRequest::IsInitialized() const {
  return true;
}

void SaveBinlogPathsRequest::InternalSwap(SaveBinlogPathsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.field2binlogpaths_.InternalSwap(&other->_impl_.field2binlogpaths_);
  _impl_.checkpoints_.InternalSwap(&other->_impl_.checkpoints_);
  _impl_.start_positions_.InternalSwap(&other->_impl_.start_positions_);
  _impl_.field2statslogpaths_.InternalSwap(&other->_impl_.field2statslogpaths_);
  _impl_.deltalogs_.InternalSwap(&other->_impl_.deltalogs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_, lhs_arena,
      &other->_impl_.channel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaveBinlogPathsRequest, _impl_.importing_)
      + sizeof(SaveBinlogPathsRequest::_impl_.importing_)
      - PROTOBUF_FIELD_OFFSET(SaveBinlogPathsRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveBinlogPathsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[26]);
}

// ===================================================================

class CheckPoint::_Internal {
 public:
  static const ::milvus::proto::msg::MsgPosition& position(const CheckPoint* msg);
};

const ::milvus::proto::msg::MsgPosition&
CheckPoint::_Internal::position(const CheckPoint* msg) {
  return *msg->_impl_.position_;
}
void CheckPoint::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
CheckPoint::CheckPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.CheckPoint)
}
CheckPoint::CheckPoint(const CheckPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.segmentid_){}
    , decltype(_impl_.num_of_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::milvus::proto::msg::MsgPosition(*from._impl_.position_);
  }
  ::memcpy(&_impl_.segmentid_, &from._impl_.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_of_rows_) -
    reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.num_of_rows_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.CheckPoint)
}

inline void CheckPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.num_of_rows_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CheckPoint::~CheckPoint() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.CheckPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void CheckPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.CheckPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  ::memset(&_impl_.segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_of_rows_) -
      reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.num_of_rows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.msg.MsgPosition position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_of_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_of_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.CheckPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // .milvus.proto.msg.MsgPosition position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // int64 num_of_rows = 3;
  if (this->_internal_num_of_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_num_of_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.CheckPoint)
  return target;
}

size_t CheckPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.CheckPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.msg.MsgPosition position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // int64 num_of_rows = 3;
  if (this->_internal_num_of_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_of_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckPoint::GetClassData() const { return &_class_data_; }


void CheckPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckPoint*>(&to_msg);
  auto& from = static_cast<const CheckPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.CheckPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::milvus::proto::msg::MsgPosition::MergeFrom(
        from._internal_position());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_num_of_rows() != 0) {
    _this->_internal_set_num_of_rows(from._internal_num_of_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckPoint::CopyFrom(const CheckPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.CheckPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPoint::IsInitialized() const {
  return true;
}

void CheckPoint::InternalSwap(CheckPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckPoint, _impl_.num_of_rows_)
      + sizeof(CheckPoint::_impl_.num_of_rows_)
      - PROTOBUF_FIELD_OFFSET(CheckPoint, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[27]);
}

// ===================================================================

class DeltaLogInfo::_Internal {
 public:
};

DeltaLogInfo::DeltaLogInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.DeltaLogInfo)
}
DeltaLogInfo::DeltaLogInfo(const DeltaLogInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeltaLogInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.delta_log_path_){}
    , decltype(_impl_.record_entries_){}
    , decltype(_impl_.timestamp_from_){}
    , decltype(_impl_.timestamp_to_){}
    , decltype(_impl_.delta_log_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.delta_log_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delta_log_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delta_log_path().empty()) {
    _this->_impl_.delta_log_path_.Set(from._internal_delta_log_path(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.record_entries_, &from._impl_.record_entries_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.delta_log_size_) -
    reinterpret_cast<char*>(&_impl_.record_entries_)) + sizeof(_impl_.delta_log_size_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.DeltaLogInfo)
}

inline void DeltaLogInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.delta_log_path_){}
    , decltype(_impl_.record_entries_){uint64_t{0u}}
    , decltype(_impl_.timestamp_from_){uint64_t{0u}}
    , decltype(_impl_.timestamp_to_){uint64_t{0u}}
    , decltype(_impl_.delta_log_size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.delta_log_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delta_log_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeltaLogInfo::~DeltaLogInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.DeltaLogInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeltaLogInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.delta_log_path_.Destroy();
}

void DeltaLogInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeltaLogInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.DeltaLogInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.delta_log_path_.ClearToEmpty();
  ::memset(&_impl_.record_entries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.delta_log_size_) -
      reinterpret_cast<char*>(&_impl_.record_entries_)) + sizeof(_impl_.delta_log_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeltaLogInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 record_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.record_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp_from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp_to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string delta_log_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_delta_log_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.DeltaLogInfo.delta_log_path"));
        } else
          goto handle_unusual;
        continue;
      // int64 delta_log_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.delta_log_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeltaLogInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.DeltaLogInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 record_entries = 1;
  if (this->_internal_record_entries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_record_entries(), target);
  }

  // uint64 timestamp_from = 2;
  if (this->_internal_timestamp_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp_from(), target);
  }

  // uint64 timestamp_to = 3;
  if (this->_internal_timestamp_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp_to(), target);
  }

  // string delta_log_path = 4;
  if (!this->_internal_delta_log_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delta_log_path().data(), static_cast<int>(this->_internal_delta_log_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.DeltaLogInfo.delta_log_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_delta_log_path(), target);
  }

  // int64 delta_log_size = 5;
  if (this->_internal_delta_log_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_delta_log_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.DeltaLogInfo)
  return target;
}

size_t DeltaLogInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.DeltaLogInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delta_log_path = 4;
  if (!this->_internal_delta_log_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delta_log_path());
  }

  // uint64 record_entries = 1;
  if (this->_internal_record_entries() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_record_entries());
  }

  // uint64 timestamp_from = 2;
  if (this->_internal_timestamp_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp_from());
  }

  // uint64 timestamp_to = 3;
  if (this->_internal_timestamp_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp_to());
  }

  // int64 delta_log_size = 5;
  if (this->_internal_delta_log_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_delta_log_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeltaLogInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeltaLogInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeltaLogInfo::GetClassData() const { return &_class_data_; }


void DeltaLogInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeltaLogInfo*>(&to_msg);
  auto& from = static_cast<const DeltaLogInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.DeltaLogInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_delta_log_path().empty()) {
    _this->_internal_set_delta_log_path(from._internal_delta_log_path());
  }
  if (from._internal_record_entries() != 0) {
    _this->_internal_set_record_entries(from._internal_record_entries());
  }
  if (from._internal_timestamp_from() != 0) {
    _this->_internal_set_timestamp_from(from._internal_timestamp_from());
  }
  if (from._internal_timestamp_to() != 0) {
    _this->_internal_set_timestamp_to(from._internal_timestamp_to());
  }
  if (from._internal_delta_log_size() != 0) {
    _this->_internal_set_delta_log_size(from._internal_delta_log_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeltaLogInfo::CopyFrom(const DeltaLogInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.DeltaLogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaLogInfo::IsInitialized() const {
  return true;
}

void DeltaLogInfo::InternalSwap(DeltaLogInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.delta_log_path_, lhs_arena,
      &other->_impl_.delta_log_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeltaLogInfo, _impl_.delta_log_size_)
      + sizeof(DeltaLogInfo::_impl_.delta_log_size_)
      - PROTOBUF_FIELD_OFFSET(DeltaLogInfo, _impl_.record_entries_)>(
          reinterpret_cast<char*>(&_impl_.record_entries_),
          reinterpret_cast<char*>(&other->_impl_.record_entries_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeltaLogInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[28]);
}

// ===================================================================

class ChannelStatus::_Internal {
 public:
};

ChannelStatus::ChannelStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.ChannelStatus)
}
ChannelStatus::ChannelStatus(const ChannelStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.ChannelStatus)
}

inline void ChannelStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChannelStatus::~ChannelStatus() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.ChannelStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ChannelStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.ChannelStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.ChannelStatus.name"));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.data.ChannelWatchState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::data::ChannelWatchState>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.ChannelStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.ChannelStatus.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .milvus.proto.data.ChannelWatchState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_collectionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.ChannelStatus)
  return target;
}

size_t ChannelStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.ChannelStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 collectionID = 3;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // .milvus.proto.data.ChannelWatchState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelStatus::GetClassData() const { return &_class_data_; }


void ChannelStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelStatus*>(&to_msg);
  auto& from = static_cast<const ChannelStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.ChannelStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelStatus::CopyFrom(const ChannelStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.ChannelStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelStatus::IsInitialized() const {
  return true;
}

void ChannelStatus::InternalSwap(ChannelStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelStatus, _impl_.state_)
      + sizeof(ChannelStatus::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(ChannelStatus, _impl_.collectionid_)>(
          reinterpret_cast<char*>(&_impl_.collectionid_),
          reinterpret_cast<char*>(&other->_impl_.collectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[29]);
}

// ===================================================================

class DataNodeInfo::_Internal {
 public:
};

DataNodeInfo::DataNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.DataNodeInfo)
}
DataNodeInfo::DataNodeInfo(const DataNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataNodeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){from._impl_.channels_}
    , decltype(_impl_.address_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.DataNodeInfo)
}

inline void DataNodeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){arena}
    , decltype(_impl_.address_){}
    , decltype(_impl_.version_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataNodeInfo::~DataNodeInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.DataNodeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channels_.~RepeatedPtrField();
  _impl_.address_.Destroy();
}

void DataNodeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.DataNodeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channels_.Clear();
  _impl_.address_.ClearToEmpty();
  _impl_.version_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataNodeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.DataNodeInfo.address"));
        } else
          goto handle_unusual;
        continue;
      // int64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.ChannelStatus channels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataNodeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.DataNodeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.DataNodeInfo.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // int64 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_version(), target);
  }

  // repeated .milvus.proto.data.ChannelStatus channels = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.DataNodeInfo)
  return target;
}

size_t DataNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.DataNodeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.ChannelStatus channels = 3;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->_impl_.channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // int64 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataNodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataNodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataNodeInfo::GetClassData() const { return &_class_data_; }


void DataNodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataNodeInfo*>(&to_msg);
  auto& from = static_cast<const DataNodeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.DataNodeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channels_.MergeFrom(from._impl_.channels_);
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataNodeInfo::CopyFrom(const DataNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.DataNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataNodeInfo::IsInitialized() const {
  return true;
}

void DataNodeInfo::InternalSwap(DataNodeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channels_.InternalSwap(&other->_impl_.channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataNodeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[30]);
}

// ===================================================================

class SegmentBinlogs::_Internal {
 public:
};

SegmentBinlogs::SegmentBinlogs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SegmentBinlogs)
}
SegmentBinlogs::SegmentBinlogs(const SegmentBinlogs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentBinlogs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fieldbinlogs_){from._impl_.fieldbinlogs_}
    , decltype(_impl_.statslogs_){from._impl_.statslogs_}
    , decltype(_impl_.deltalogs_){from._impl_.deltalogs_}
    , decltype(_impl_.insert_channel_){}
    , decltype(_impl_.segmentid_){}
    , decltype(_impl_.num_of_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.insert_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.insert_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_insert_channel().empty()) {
    _this->_impl_.insert_channel_.Set(from._internal_insert_channel(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.segmentid_, &from._impl_.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_of_rows_) -
    reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.num_of_rows_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SegmentBinlogs)
}

inline void SegmentBinlogs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fieldbinlogs_){arena}
    , decltype(_impl_.statslogs_){arena}
    , decltype(_impl_.deltalogs_){arena}
    , decltype(_impl_.insert_channel_){}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.num_of_rows_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.insert_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.insert_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SegmentBinlogs::~SegmentBinlogs() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SegmentBinlogs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentBinlogs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fieldbinlogs_.~RepeatedPtrField();
  _impl_.statslogs_.~RepeatedPtrField();
  _impl_.deltalogs_.~RepeatedPtrField();
  _impl_.insert_channel_.Destroy();
}

void SegmentBinlogs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentBinlogs::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SegmentBinlogs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fieldbinlogs_.Clear();
  _impl_.statslogs_.Clear();
  _impl_.deltalogs_.Clear();
  _impl_.insert_channel_.ClearToEmpty();
  ::memset(&_impl_.segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_of_rows_) -
      reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.num_of_rows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentBinlogs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog fieldBinlogs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldbinlogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 num_of_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_of_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog statslogs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statslogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog deltalogs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deltalogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string insert_channel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_insert_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.SegmentBinlogs.insert_channel"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentBinlogs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SegmentBinlogs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // repeated .milvus.proto.data.FieldBinlog fieldBinlogs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fieldbinlogs_size()); i < n; i++) {
    const auto& repfield = this->_internal_fieldbinlogs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 num_of_rows = 3;
  if (this->_internal_num_of_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_num_of_rows(), target);
  }

  // repeated .milvus.proto.data.FieldBinlog statslogs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statslogs_size()); i < n; i++) {
    const auto& repfield = this->_internal_statslogs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deltalogs_size()); i < n; i++) {
    const auto& repfield = this->_internal_deltalogs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string insert_channel = 6;
  if (!this->_internal_insert_channel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insert_channel().data(), static_cast<int>(this->_internal_insert_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.SegmentBinlogs.insert_channel");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_insert_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SegmentBinlogs)
  return target;
}

size_t SegmentBinlogs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SegmentBinlogs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.FieldBinlog fieldBinlogs = 2;
  total_size += 1UL * this->_internal_fieldbinlogs_size();
  for (const auto& msg : this->_impl_.fieldbinlogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.FieldBinlog statslogs = 4;
  total_size += 1UL * this->_internal_statslogs_size();
  for (const auto& msg : this->_impl_.statslogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 5;
  total_size += 1UL * this->_internal_deltalogs_size();
  for (const auto& msg : this->_impl_.deltalogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string insert_channel = 6;
  if (!this->_internal_insert_channel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insert_channel());
  }

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // int64 num_of_rows = 3;
  if (this->_internal_num_of_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_of_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentBinlogs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentBinlogs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentBinlogs::GetClassData() const { return &_class_data_; }


void SegmentBinlogs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentBinlogs*>(&to_msg);
  auto& from = static_cast<const SegmentBinlogs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SegmentBinlogs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fieldbinlogs_.MergeFrom(from._impl_.fieldbinlogs_);
  _this->_impl_.statslogs_.MergeFrom(from._impl_.statslogs_);
  _this->_impl_.deltalogs_.MergeFrom(from._impl_.deltalogs_);
  if (!from._internal_insert_channel().empty()) {
    _this->_internal_set_insert_channel(from._internal_insert_channel());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_num_of_rows() != 0) {
    _this->_internal_set_num_of_rows(from._internal_num_of_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentBinlogs::CopyFrom(const SegmentBinlogs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SegmentBinlogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentBinlogs::IsInitialized() const {
  return true;
}

void SegmentBinlogs::InternalSwap(SegmentBinlogs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fieldbinlogs_.InternalSwap(&other->_impl_.fieldbinlogs_);
  _impl_.statslogs_.InternalSwap(&other->_impl_.statslogs_);
  _impl_.deltalogs_.InternalSwap(&other->_impl_.deltalogs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.insert_channel_, lhs_arena,
      &other->_impl_.insert_channel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentBinlogs, _impl_.num_of_rows_)
      + sizeof(SegmentBinlogs::_impl_.num_of_rows_)
      - PROTOBUF_FIELD_OFFSET(SegmentBinlogs, _impl_.segmentid_)>(
          reinterpret_cast<char*>(&_impl_.segmentid_),
          reinterpret_cast<char*>(&other->_impl_.segmentid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentBinlogs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[31]);
}

// ===================================================================

class FieldBinlog::_Internal {
 public:
};

FieldBinlog::FieldBinlog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.FieldBinlog)
}
FieldBinlog::FieldBinlog(const FieldBinlog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FieldBinlog* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.binlogs_){from._impl_.binlogs_}
    , decltype(_impl_.fieldid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.fieldid_ = from._impl_.fieldid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.FieldBinlog)
}

inline void FieldBinlog::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.binlogs_){arena}
    , decltype(_impl_.fieldid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FieldBinlog::~FieldBinlog() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.FieldBinlog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldBinlog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.binlogs_.~RepeatedPtrField();
}

void FieldBinlog::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FieldBinlog::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.FieldBinlog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.binlogs_.Clear();
  _impl_.fieldid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldBinlog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 fieldID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fieldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.Binlog binlogs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_binlogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldBinlog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.FieldBinlog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fieldID = 1;
  if (this->_internal_fieldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_fieldid(), target);
  }

  // repeated .milvus.proto.data.Binlog binlogs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_binlogs_size()); i < n; i++) {
    const auto& repfield = this->_internal_binlogs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.FieldBinlog)
  return target;
}

size_t FieldBinlog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.FieldBinlog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.Binlog binlogs = 2;
  total_size += 1UL * this->_internal_binlogs_size();
  for (const auto& msg : this->_impl_.binlogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 fieldID = 1;
  if (this->_internal_fieldid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fieldid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldBinlog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FieldBinlog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldBinlog::GetClassData() const { return &_class_data_; }


void FieldBinlog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FieldBinlog*>(&to_msg);
  auto& from = static_cast<const FieldBinlog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.FieldBinlog)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.binlogs_.MergeFrom(from._impl_.binlogs_);
  if (from._internal_fieldid() != 0) {
    _this->_internal_set_fieldid(from._internal_fieldid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldBinlog::CopyFrom(const FieldBinlog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.FieldBinlog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldBinlog::IsInitialized() const {
  return true;
}

void FieldBinlog::InternalSwap(FieldBinlog* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.binlogs_.InternalSwap(&other->_impl_.binlogs_);
  swap(_impl_.fieldid_, other->_impl_.fieldid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldBinlog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[32]);
}

// ===================================================================

class Binlog::_Internal {
 public:
};

Binlog::Binlog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.Binlog)
}
Binlog::Binlog(const Binlog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Binlog* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.log_path_){}
    , decltype(_impl_.entries_num_){}
    , decltype(_impl_.timestamp_from_){}
    , decltype(_impl_.timestamp_to_){}
    , decltype(_impl_.log_size_){}
    , decltype(_impl_.logid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.log_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log_path().empty()) {
    _this->_impl_.log_path_.Set(from._internal_log_path(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.entries_num_, &from._impl_.entries_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.logid_) -
    reinterpret_cast<char*>(&_impl_.entries_num_)) + sizeof(_impl_.logid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.Binlog)
}

inline void Binlog::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.log_path_){}
    , decltype(_impl_.entries_num_){int64_t{0}}
    , decltype(_impl_.timestamp_from_){uint64_t{0u}}
    , decltype(_impl_.timestamp_to_){uint64_t{0u}}
    , decltype(_impl_.log_size_){int64_t{0}}
    , decltype(_impl_.logid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.log_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Binlog::~Binlog() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.Binlog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Binlog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.log_path_.Destroy();
}

void Binlog::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Binlog::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.Binlog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.log_path_.ClearToEmpty();
  ::memset(&_impl_.entries_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.logid_) -
      reinterpret_cast<char*>(&_impl_.entries_num_)) + sizeof(_impl_.logid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Binlog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 entries_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.entries_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp_from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp_to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string log_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_log_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.Binlog.log_path"));
        } else
          goto handle_unusual;
        continue;
      // int64 log_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.log_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 logID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.logid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Binlog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.Binlog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 entries_num = 1;
  if (this->_internal_entries_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_entries_num(), target);
  }

  // uint64 timestamp_from = 2;
  if (this->_internal_timestamp_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp_from(), target);
  }

  // uint64 timestamp_to = 3;
  if (this->_internal_timestamp_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp_to(), target);
  }

  // string log_path = 4;
  if (!this->_internal_log_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_path().data(), static_cast<int>(this->_internal_log_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.Binlog.log_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_log_path(), target);
  }

  // int64 log_size = 5;
  if (this->_internal_log_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_log_size(), target);
  }

  // int64 logID = 6;
  if (this->_internal_logid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_logid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.Binlog)
  return target;
}

size_t Binlog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.Binlog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log_path = 4;
  if (!this->_internal_log_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_path());
  }

  // int64 entries_num = 1;
  if (this->_internal_entries_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_entries_num());
  }

  // uint64 timestamp_from = 2;
  if (this->_internal_timestamp_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp_from());
  }

  // uint64 timestamp_to = 3;
  if (this->_internal_timestamp_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp_to());
  }

  // int64 log_size = 5;
  if (this->_internal_log_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_log_size());
  }

  // int64 logID = 6;
  if (this->_internal_logid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_logid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Binlog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Binlog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Binlog::GetClassData() const { return &_class_data_; }


void Binlog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Binlog*>(&to_msg);
  auto& from = static_cast<const Binlog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.Binlog)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_log_path().empty()) {
    _this->_internal_set_log_path(from._internal_log_path());
  }
  if (from._internal_entries_num() != 0) {
    _this->_internal_set_entries_num(from._internal_entries_num());
  }
  if (from._internal_timestamp_from() != 0) {
    _this->_internal_set_timestamp_from(from._internal_timestamp_from());
  }
  if (from._internal_timestamp_to() != 0) {
    _this->_internal_set_timestamp_to(from._internal_timestamp_to());
  }
  if (from._internal_log_size() != 0) {
    _this->_internal_set_log_size(from._internal_log_size());
  }
  if (from._internal_logid() != 0) {
    _this->_internal_set_logid(from._internal_logid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Binlog::CopyFrom(const Binlog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.Binlog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Binlog::IsInitialized() const {
  return true;
}

void Binlog::InternalSwap(Binlog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_path_, lhs_arena,
      &other->_impl_.log_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Binlog, _impl_.logid_)
      + sizeof(Binlog::_impl_.logid_)
      - PROTOBUF_FIELD_OFFSET(Binlog, _impl_.entries_num_)>(
          reinterpret_cast<char*>(&_impl_.entries_num_),
          reinterpret_cast<char*>(&other->_impl_.entries_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Binlog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[33]);
}

// ===================================================================

class GetRecoveryInfoResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetRecoveryInfoResponse* msg);
};

const ::milvus::proto::common::Status&
GetRecoveryInfoResponse::_Internal::status(const GetRecoveryInfoResponse* msg) {
  return *msg->_impl_.status_;
}
void GetRecoveryInfoResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetRecoveryInfoResponse::GetRecoveryInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetRecoveryInfoResponse)
}
GetRecoveryInfoResponse::GetRecoveryInfoResponse(const GetRecoveryInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRecoveryInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){from._impl_.channels_}
    , decltype(_impl_.binlogs_){from._impl_.binlogs_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetRecoveryInfoResponse)
}

inline void GetRecoveryInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){arena}
    , decltype(_impl_.binlogs_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRecoveryInfoResponse::~GetRecoveryInfoResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetRecoveryInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRecoveryInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channels_.~RepeatedPtrField();
  _impl_.binlogs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetRecoveryInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRecoveryInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetRecoveryInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channels_.Clear();
  _impl_.binlogs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecoveryInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.VchannelInfo channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.SegmentBinlogs binlogs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_binlogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRecoveryInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetRecoveryInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.VchannelInfo channels = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.SegmentBinlogs binlogs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_binlogs_size()); i < n; i++) {
    const auto& repfield = this->_internal_binlogs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetRecoveryInfoResponse)
  return target;
}

size_t GetRecoveryInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetRecoveryInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.VchannelInfo channels = 2;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->_impl_.channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.SegmentBinlogs binlogs = 3;
  total_size += 1UL * this->_internal_binlogs_size();
  for (const auto& msg : this->_impl_.binlogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRecoveryInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRecoveryInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRecoveryInfoResponse::GetClassData() const { return &_class_data_; }


void GetRecoveryInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRecoveryInfoResponse*>(&to_msg);
  auto& from = static_cast<const GetRecoveryInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetRecoveryInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channels_.MergeFrom(from._impl_.channels_);
  _this->_impl_.binlogs_.MergeFrom(from._impl_.binlogs_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRecoveryInfoResponse::CopyFrom(const GetRecoveryInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetRecoveryInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecoveryInfoResponse::IsInitialized() const {
  return true;
}

void GetRecoveryInfoResponse::InternalSwap(GetRecoveryInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channels_.InternalSwap(&other->_impl_.channels_);
  _impl_.binlogs_.InternalSwap(&other->_impl_.binlogs_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecoveryInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[34]);
}

// ===================================================================

class GetRecoveryInfoRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetRecoveryInfoRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetRecoveryInfoRequest::_Internal::base(const GetRecoveryInfoRequest* msg) {
  return *msg->_impl_.base_;
}
void GetRecoveryInfoRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetRecoveryInfoRequest::GetRecoveryInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetRecoveryInfoRequest)
}
GetRecoveryInfoRequest::GetRecoveryInfoRequest(const GetRecoveryInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRecoveryInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.partitionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.partitionid_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.partitionid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetRecoveryInfoRequest)
}

inline void GetRecoveryInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRecoveryInfoRequest::~GetRecoveryInfoRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetRecoveryInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRecoveryInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetRecoveryInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRecoveryInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetRecoveryInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.partitionid_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.partitionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecoveryInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRecoveryInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetRecoveryInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 3;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_partitionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetRecoveryInfoRequest)
  return target;
}

size_t GetRecoveryInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetRecoveryInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 partitionID = 3;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRecoveryInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRecoveryInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRecoveryInfoRequest::GetClassData() const { return &_class_data_; }


void GetRecoveryInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRecoveryInfoRequest*>(&to_msg);
  auto& from = static_cast<const GetRecoveryInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetRecoveryInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRecoveryInfoRequest::CopyFrom(const GetRecoveryInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetRecoveryInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecoveryInfoRequest::IsInitialized() const {
  return true;
}

void GetRecoveryInfoRequest::InternalSwap(GetRecoveryInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRecoveryInfoRequest, _impl_.partitionid_)
      + sizeof(GetRecoveryInfoRequest::_impl_.partitionid_)
      - PROTOBUF_FIELD_OFFSET(GetRecoveryInfoRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecoveryInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[35]);
}

// ===================================================================

class GetRecoveryInfoResponseV2::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetRecoveryInfoResponseV2* msg);
};

const ::milvus::proto::common::Status&
GetRecoveryInfoResponseV2::_Internal::status(const GetRecoveryInfoResponseV2* msg) {
  return *msg->_impl_.status_;
}
void GetRecoveryInfoResponseV2::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetRecoveryInfoResponseV2::GetRecoveryInfoResponseV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetRecoveryInfoResponseV2)
}
GetRecoveryInfoResponseV2::GetRecoveryInfoResponseV2(const GetRecoveryInfoResponseV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRecoveryInfoResponseV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){from._impl_.channels_}
    , decltype(_impl_.segments_){from._impl_.segments_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetRecoveryInfoResponseV2)
}

inline void GetRecoveryInfoResponseV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){arena}
    , decltype(_impl_.segments_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRecoveryInfoResponseV2::~GetRecoveryInfoResponseV2() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetRecoveryInfoResponseV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRecoveryInfoResponseV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channels_.~RepeatedPtrField();
  _impl_.segments_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetRecoveryInfoResponseV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRecoveryInfoResponseV2::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetRecoveryInfoResponseV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channels_.Clear();
  _impl_.segments_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecoveryInfoResponseV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.VchannelInfo channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.SegmentInfo segments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRecoveryInfoResponseV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetRecoveryInfoResponseV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.VchannelInfo channels = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.SegmentInfo segments = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetRecoveryInfoResponseV2)
  return target;
}

size_t GetRecoveryInfoResponseV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetRecoveryInfoResponseV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.VchannelInfo channels = 2;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->_impl_.channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.SegmentInfo segments = 3;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->_impl_.segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRecoveryInfoResponseV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRecoveryInfoResponseV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRecoveryInfoResponseV2::GetClassData() const { return &_class_data_; }


void GetRecoveryInfoResponseV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRecoveryInfoResponseV2*>(&to_msg);
  auto& from = static_cast<const GetRecoveryInfoResponseV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetRecoveryInfoResponseV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channels_.MergeFrom(from._impl_.channels_);
  _this->_impl_.segments_.MergeFrom(from._impl_.segments_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRecoveryInfoResponseV2::CopyFrom(const GetRecoveryInfoResponseV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetRecoveryInfoResponseV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecoveryInfoResponseV2::IsInitialized() const {
  return true;
}

void GetRecoveryInfoResponseV2::InternalSwap(GetRecoveryInfoResponseV2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channels_.InternalSwap(&other->_impl_.channels_);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecoveryInfoResponseV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[36]);
}

// ===================================================================

class GetRecoveryInfoRequestV2::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetRecoveryInfoRequestV2* msg);
};

const ::milvus::proto::common::MsgBase&
GetRecoveryInfoRequestV2::_Internal::base(const GetRecoveryInfoRequestV2* msg) {
  return *msg->_impl_.base_;
}
void GetRecoveryInfoRequestV2::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetRecoveryInfoRequestV2::GetRecoveryInfoRequestV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetRecoveryInfoRequestV2)
}
GetRecoveryInfoRequestV2::GetRecoveryInfoRequestV2(const GetRecoveryInfoRequestV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRecoveryInfoRequestV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partitionids_){from._impl_.partitionids_}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  _this->_impl_.collectionid_ = from._impl_.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetRecoveryInfoRequestV2)
}

inline void GetRecoveryInfoRequestV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partitionids_){arena}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRecoveryInfoRequestV2::~GetRecoveryInfoRequestV2() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetRecoveryInfoRequestV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRecoveryInfoRequestV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partitionids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetRecoveryInfoRequestV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRecoveryInfoRequestV2::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetRecoveryInfoRequestV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partitionids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _impl_.collectionid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecoveryInfoRequestV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 partitionIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_partitionids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_partitionids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRecoveryInfoRequestV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetRecoveryInfoRequestV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // repeated int64 partitionIDs = 3;
  {
    int byte_size = _impl_._partitionids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_partitionids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetRecoveryInfoRequestV2)
  return target;
}

size_t GetRecoveryInfoRequestV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetRecoveryInfoRequestV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 partitionIDs = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.partitionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._partitionids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRecoveryInfoRequestV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRecoveryInfoRequestV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRecoveryInfoRequestV2::GetClassData() const { return &_class_data_; }


void GetRecoveryInfoRequestV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRecoveryInfoRequestV2*>(&to_msg);
  auto& from = static_cast<const GetRecoveryInfoRequestV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetRecoveryInfoRequestV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partitionids_.MergeFrom(from._impl_.partitionids_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRecoveryInfoRequestV2::CopyFrom(const GetRecoveryInfoRequestV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetRecoveryInfoRequestV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecoveryInfoRequestV2::IsInitialized() const {
  return true;
}

void GetRecoveryInfoRequestV2::InternalSwap(GetRecoveryInfoRequestV2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partitionids_.InternalSwap(&other->_impl_.partitionids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRecoveryInfoRequestV2, _impl_.collectionid_)
      + sizeof(GetRecoveryInfoRequestV2::_impl_.collectionid_)
      - PROTOBUF_FIELD_OFFSET(GetRecoveryInfoRequestV2, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecoveryInfoRequestV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[37]);
}

// ===================================================================

class GetSegmentsByStatesRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetSegmentsByStatesRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetSegmentsByStatesRequest::_Internal::base(const GetSegmentsByStatesRequest* msg) {
  return *msg->_impl_.base_;
}
void GetSegmentsByStatesRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetSegmentsByStatesRequest::GetSegmentsByStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetSegmentsByStatesRequest)
}
GetSegmentsByStatesRequest::GetSegmentsByStatesRequest(const GetSegmentsByStatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSegmentsByStatesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){from._impl_.states_}
    , /*decltype(_impl_._states_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.partitionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.partitionid_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.partitionid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetSegmentsByStatesRequest)
}

inline void GetSegmentsByStatesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){arena}
    , /*decltype(_impl_._states_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSegmentsByStatesRequest::~GetSegmentsByStatesRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetSegmentsByStatesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSegmentsByStatesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.states_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetSegmentsByStatesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSegmentsByStatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetSegmentsByStatesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.states_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.partitionid_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.partitionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSegmentsByStatesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.SegmentState states = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_states(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_states(static_cast<::milvus::proto::common::SegmentState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSegmentsByStatesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetSegmentsByStatesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 3;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_partitionid(), target);
  }

  // repeated .milvus.proto.common.SegmentState states = 4;
  {
    int byte_size = _impl_._states_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, _impl_.states_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetSegmentsByStatesRequest)
  return target;
}

size_t GetSegmentsByStatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetSegmentsByStatesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.SegmentState states = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_states_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_states(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._states_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 partitionID = 3;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSegmentsByStatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSegmentsByStatesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSegmentsByStatesRequest::GetClassData() const { return &_class_data_; }


void GetSegmentsByStatesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSegmentsByStatesRequest*>(&to_msg);
  auto& from = static_cast<const GetSegmentsByStatesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetSegmentsByStatesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.states_.MergeFrom(from._impl_.states_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSegmentsByStatesRequest::CopyFrom(const GetSegmentsByStatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetSegmentsByStatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentsByStatesRequest::IsInitialized() const {
  return true;
}

void GetSegmentsByStatesRequest::InternalSwap(GetSegmentsByStatesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSegmentsByStatesRequest, _impl_.partitionid_)
      + sizeof(GetSegmentsByStatesRequest::_impl_.partitionid_)
      - PROTOBUF_FIELD_OFFSET(GetSegmentsByStatesRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSegmentsByStatesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[38]);
}

// ===================================================================

class GetSegmentsByStatesResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetSegmentsByStatesResponse* msg);
};

const ::milvus::proto::common::Status&
GetSegmentsByStatesResponse::_Internal::status(const GetSegmentsByStatesResponse* msg) {
  return *msg->_impl_.status_;
}
void GetSegmentsByStatesResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetSegmentsByStatesResponse::GetSegmentsByStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetSegmentsByStatesResponse)
}
GetSegmentsByStatesResponse::GetSegmentsByStatesResponse(const GetSegmentsByStatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSegmentsByStatesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){from._impl_.segments_}
    , /*decltype(_impl_._segments_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetSegmentsByStatesResponse)
}

inline void GetSegmentsByStatesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){arena}
    , /*decltype(_impl_._segments_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSegmentsByStatesResponse::~GetSegmentsByStatesResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetSegmentsByStatesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSegmentsByStatesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segments_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetSegmentsByStatesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSegmentsByStatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetSegmentsByStatesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segments_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSegmentsByStatesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segments(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_segments(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSegmentsByStatesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetSegmentsByStatesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated int64 segments = 2;
  {
    int byte_size = _impl_._segments_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_segments(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetSegmentsByStatesResponse)
  return target;
}

size_t GetSegmentsByStatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetSegmentsByStatesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segments = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segments_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segments_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSegmentsByStatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSegmentsByStatesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSegmentsByStatesResponse::GetClassData() const { return &_class_data_; }


void GetSegmentsByStatesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSegmentsByStatesResponse*>(&to_msg);
  auto& from = static_cast<const GetSegmentsByStatesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetSegmentsByStatesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segments_.MergeFrom(from._impl_.segments_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSegmentsByStatesResponse::CopyFrom(const GetSegmentsByStatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetSegmentsByStatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentsByStatesResponse::IsInitialized() const {
  return true;
}

void GetSegmentsByStatesResponse::InternalSwap(GetSegmentsByStatesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSegmentsByStatesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[39]);
}

// ===================================================================

class GetFlushedSegmentsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetFlushedSegmentsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetFlushedSegmentsRequest::_Internal::base(const GetFlushedSegmentsRequest* msg) {
  return *msg->_impl_.base_;
}
void GetFlushedSegmentsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
GetFlushedSegmentsRequest::GetFlushedSegmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetFlushedSegmentsRequest)
}
GetFlushedSegmentsRequest::GetFlushedSegmentsRequest(const GetFlushedSegmentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFlushedSegmentsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.partitionid_){}
    , decltype(_impl_.includeunhealthy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.includeunhealthy_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.includeunhealthy_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetFlushedSegmentsRequest)
}

inline void GetFlushedSegmentsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , decltype(_impl_.includeunhealthy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFlushedSegmentsRequest::~GetFlushedSegmentsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetFlushedSegmentsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFlushedSegmentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void GetFlushedSegmentsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFlushedSegmentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetFlushedSegmentsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.includeunhealthy_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.includeunhealthy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushedSegmentsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool includeUnhealthy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.includeunhealthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFlushedSegmentsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetFlushedSegmentsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 3;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_partitionid(), target);
  }

  // bool includeUnhealthy = 4;
  if (this->_internal_includeunhealthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_includeunhealthy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetFlushedSegmentsRequest)
  return target;
}

size_t GetFlushedSegmentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetFlushedSegmentsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 partitionID = 3;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  // bool includeUnhealthy = 4;
  if (this->_internal_includeunhealthy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlushedSegmentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFlushedSegmentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlushedSegmentsRequest::GetClassData() const { return &_class_data_; }


void GetFlushedSegmentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFlushedSegmentsRequest*>(&to_msg);
  auto& from = static_cast<const GetFlushedSegmentsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetFlushedSegmentsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  if (from._internal_includeunhealthy() != 0) {
    _this->_internal_set_includeunhealthy(from._internal_includeunhealthy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlushedSegmentsRequest::CopyFrom(const GetFlushedSegmentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetFlushedSegmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushedSegmentsRequest::IsInitialized() const {
  return true;
}

void GetFlushedSegmentsRequest::InternalSwap(GetFlushedSegmentsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlushedSegmentsRequest, _impl_.includeunhealthy_)
      + sizeof(GetFlushedSegmentsRequest::_impl_.includeunhealthy_)
      - PROTOBUF_FIELD_OFFSET(GetFlushedSegmentsRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushedSegmentsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[40]);
}

// ===================================================================

class GetFlushedSegmentsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetFlushedSegmentsResponse* msg);
};

const ::milvus::proto::common::Status&
GetFlushedSegmentsResponse::_Internal::status(const GetFlushedSegmentsResponse* msg) {
  return *msg->_impl_.status_;
}
void GetFlushedSegmentsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetFlushedSegmentsResponse::GetFlushedSegmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GetFlushedSegmentsResponse)
}
GetFlushedSegmentsResponse::GetFlushedSegmentsResponse(const GetFlushedSegmentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFlushedSegmentsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){from._impl_.segments_}
    , /*decltype(_impl_._segments_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GetFlushedSegmentsResponse)
}

inline void GetFlushedSegmentsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){arena}
    , /*decltype(_impl_._segments_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFlushedSegmentsResponse::~GetFlushedSegmentsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GetFlushedSegmentsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFlushedSegmentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segments_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetFlushedSegmentsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFlushedSegmentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GetFlushedSegmentsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segments_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushedSegmentsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segments(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_segments(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFlushedSegmentsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GetFlushedSegmentsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated int64 segments = 2;
  {
    int byte_size = _impl_._segments_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_segments(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GetFlushedSegmentsResponse)
  return target;
}

size_t GetFlushedSegmentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GetFlushedSegmentsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segments = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segments_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segments_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlushedSegmentsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFlushedSegmentsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlushedSegmentsResponse::GetClassData() const { return &_class_data_; }


void GetFlushedSegmentsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFlushedSegmentsResponse*>(&to_msg);
  auto& from = static_cast<const GetFlushedSegmentsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GetFlushedSegmentsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segments_.MergeFrom(from._impl_.segments_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlushedSegmentsResponse::CopyFrom(const GetFlushedSegmentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GetFlushedSegmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushedSegmentsResponse::IsInitialized() const {
  return true;
}

void GetFlushedSegmentsResponse::InternalSwap(GetFlushedSegmentsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushedSegmentsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[41]);
}

// ===================================================================

class SegmentFlushCompletedMsg::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SegmentFlushCompletedMsg* msg);
  static const ::milvus::proto::data::SegmentInfo& segment(const SegmentFlushCompletedMsg* msg);
};

const ::milvus::proto::common::MsgBase&
SegmentFlushCompletedMsg::_Internal::base(const SegmentFlushCompletedMsg* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::data::SegmentInfo&
SegmentFlushCompletedMsg::_Internal::segment(const SegmentFlushCompletedMsg* msg) {
  return *msg->_impl_.segment_;
}
void SegmentFlushCompletedMsg::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
SegmentFlushCompletedMsg::SegmentFlushCompletedMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SegmentFlushCompletedMsg)
}
SegmentFlushCompletedMsg::SegmentFlushCompletedMsg(const SegmentFlushCompletedMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentFlushCompletedMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.segment_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_segment()) {
    _this->_impl_.segment_ = new ::milvus::proto::data::SegmentInfo(*from._impl_.segment_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SegmentFlushCompletedMsg)
}

inline void SegmentFlushCompletedMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.segment_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SegmentFlushCompletedMsg::~SegmentFlushCompletedMsg() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SegmentFlushCompletedMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentFlushCompletedMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.segment_;
}

void SegmentFlushCompletedMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentFlushCompletedMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SegmentFlushCompletedMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.segment_ != nullptr) {
    delete _impl_.segment_;
  }
  _impl_.segment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentFlushCompletedMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.data.SegmentInfo segment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentFlushCompletedMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SegmentFlushCompletedMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.data.SegmentInfo segment = 2;
  if (this->_internal_has_segment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::segment(this),
        _Internal::segment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SegmentFlushCompletedMsg)
  return target;
}

size_t SegmentFlushCompletedMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SegmentFlushCompletedMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.data.SegmentInfo segment = 2;
  if (this->_internal_has_segment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.segment_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentFlushCompletedMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentFlushCompletedMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentFlushCompletedMsg::GetClassData() const { return &_class_data_; }


void SegmentFlushCompletedMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentFlushCompletedMsg*>(&to_msg);
  auto& from = static_cast<const SegmentFlushCompletedMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SegmentFlushCompletedMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_segment()) {
    _this->_internal_mutable_segment()->::milvus::proto::data::SegmentInfo::MergeFrom(
        from._internal_segment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentFlushCompletedMsg::CopyFrom(const SegmentFlushCompletedMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SegmentFlushCompletedMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentFlushCompletedMsg::IsInitialized() const {
  return true;
}

void SegmentFlushCompletedMsg::InternalSwap(SegmentFlushCompletedMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentFlushCompletedMsg, _impl_.segment_)
      + sizeof(SegmentFlushCompletedMsg::_impl_.segment_)
      - PROTOBUF_FIELD_OFFSET(SegmentFlushCompletedMsg, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentFlushCompletedMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[42]);
}

// ===================================================================

class ChannelWatchInfo::_Internal {
 public:
  static const ::milvus::proto::data::VchannelInfo& vchan(const ChannelWatchInfo* msg);
  static const ::milvus::proto::schema::CollectionSchema& schema(const ChannelWatchInfo* msg);
};

const ::milvus::proto::data::VchannelInfo&
ChannelWatchInfo::_Internal::vchan(const ChannelWatchInfo* msg) {
  return *msg->_impl_.vchan_;
}
const ::milvus::proto::schema::CollectionSchema&
ChannelWatchInfo::_Internal::schema(const ChannelWatchInfo* msg) {
  return *msg->_impl_.schema_;
}
void ChannelWatchInfo::clear_schema() {
  if (GetArenaForAllocation() == nullptr && _impl_.schema_ != nullptr) {
    delete _impl_.schema_;
  }
  _impl_.schema_ = nullptr;
}
ChannelWatchInfo::ChannelWatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.ChannelWatchInfo)
}
ChannelWatchInfo::ChannelWatchInfo(const ChannelWatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelWatchInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vchan_){nullptr}
    , decltype(_impl_.schema_){nullptr}
    , decltype(_impl_.startts_){}
    , decltype(_impl_.timeoutts_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.progress_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vchan()) {
    _this->_impl_.vchan_ = new ::milvus::proto::data::VchannelInfo(*from._impl_.vchan_);
  }
  if (from._internal_has_schema()) {
    _this->_impl_.schema_ = new ::milvus::proto::schema::CollectionSchema(*from._impl_.schema_);
  }
  ::memcpy(&_impl_.startts_, &from._impl_.startts_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) -
    reinterpret_cast<char*>(&_impl_.startts_)) + sizeof(_impl_.progress_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.ChannelWatchInfo)
}

inline void ChannelWatchInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vchan_){nullptr}
    , decltype(_impl_.schema_){nullptr}
    , decltype(_impl_.startts_){int64_t{0}}
    , decltype(_impl_.timeoutts_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.progress_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChannelWatchInfo::~ChannelWatchInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.ChannelWatchInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelWatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vchan_;
  if (this != internal_default_instance()) delete _impl_.schema_;
}

void ChannelWatchInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelWatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.ChannelWatchInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.vchan_ != nullptr) {
    delete _impl_.vchan_;
  }
  _impl_.vchan_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.schema_ != nullptr) {
    delete _impl_.schema_;
  }
  _impl_.schema_ = nullptr;
  ::memset(&_impl_.startts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.progress_) -
      reinterpret_cast<char*>(&_impl_.startts_)) + sizeof(_impl_.progress_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelWatchInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.data.VchannelInfo vchan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vchan(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 startTs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.startts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.data.ChannelWatchState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::data::ChannelWatchState>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 timeoutTs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timeoutts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.schema.CollectionSchema schema = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 progress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelWatchInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.ChannelWatchInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.data.VchannelInfo vchan = 1;
  if (this->_internal_has_vchan()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vchan(this),
        _Internal::vchan(this).GetCachedSize(), target, stream);
  }

  // int64 startTs = 2;
  if (this->_internal_startts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_startts(), target);
  }

  // .milvus.proto.data.ChannelWatchState state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // int64 timeoutTs = 4;
  if (this->_internal_timeoutts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_timeoutts(), target);
  }

  // .milvus.proto.schema.CollectionSchema schema = 5;
  if (this->_internal_has_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::schema(this),
        _Internal::schema(this).GetCachedSize(), target, stream);
  }

  // int32 progress = 6;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.ChannelWatchInfo)
  return target;
}

size_t ChannelWatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.ChannelWatchInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.data.VchannelInfo vchan = 1;
  if (this->_internal_has_vchan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vchan_);
  }

  // .milvus.proto.schema.CollectionSchema schema = 5;
  if (this->_internal_has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schema_);
  }

  // int64 startTs = 2;
  if (this->_internal_startts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_startts());
  }

  // int64 timeoutTs = 4;
  if (this->_internal_timeoutts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timeoutts());
  }

  // .milvus.proto.data.ChannelWatchState state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int32 progress = 6;
  if (this->_internal_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelWatchInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelWatchInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelWatchInfo::GetClassData() const { return &_class_data_; }


void ChannelWatchInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelWatchInfo*>(&to_msg);
  auto& from = static_cast<const ChannelWatchInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.ChannelWatchInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vchan()) {
    _this->_internal_mutable_vchan()->::milvus::proto::data::VchannelInfo::MergeFrom(
        from._internal_vchan());
  }
  if (from._internal_has_schema()) {
    _this->_internal_mutable_schema()->::milvus::proto::schema::CollectionSchema::MergeFrom(
        from._internal_schema());
  }
  if (from._internal_startts() != 0) {
    _this->_internal_set_startts(from._internal_startts());
  }
  if (from._internal_timeoutts() != 0) {
    _this->_internal_set_timeoutts(from._internal_timeoutts());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_progress() != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelWatchInfo::CopyFrom(const ChannelWatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.ChannelWatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelWatchInfo::IsInitialized() const {
  return true;
}

void ChannelWatchInfo::InternalSwap(ChannelWatchInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelWatchInfo, _impl_.progress_)
      + sizeof(ChannelWatchInfo::_impl_.progress_)
      - PROTOBUF_FIELD_OFFSET(ChannelWatchInfo, _impl_.vchan_)>(
          reinterpret_cast<char*>(&_impl_.vchan_),
          reinterpret_cast<char*>(&other->_impl_.vchan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelWatchInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[43]);
}

// ===================================================================

class CompactionStateRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CompactionStateRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CompactionStateRequest::_Internal::base(const CompactionStateRequest* msg) {
  return *msg->_impl_.base_;
}
void CompactionStateRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
CompactionStateRequest::CompactionStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.CompactionStateRequest)
}
CompactionStateRequest::CompactionStateRequest(const CompactionStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompactionStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.CompactionStateRequest)
}

inline void CompactionStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CompactionStateRequest::~CompactionStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.CompactionStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompactionStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void CompactionStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompactionStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.CompactionStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompactionStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompactionStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.CompactionStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.CompactionStateRequest)
  return target;
}

size_t CompactionStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.CompactionStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompactionStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompactionStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompactionStateRequest::GetClassData() const { return &_class_data_; }


void CompactionStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompactionStateRequest*>(&to_msg);
  auto& from = static_cast<const CompactionStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.CompactionStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompactionStateRequest::CopyFrom(const CompactionStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.CompactionStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionStateRequest::IsInitialized() const {
  return true;
}

void CompactionStateRequest::InternalSwap(CompactionStateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactionStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[44]);
}

// ===================================================================

class SyncSegmentsRequest::_Internal {
 public:
};

SyncSegmentsRequest::SyncSegmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SyncSegmentsRequest)
}
SyncSegmentsRequest::SyncSegmentsRequest(const SyncSegmentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncSegmentsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.compacted_from_){from._impl_.compacted_from_}
    , /*decltype(_impl_._compacted_from_cached_byte_size_)*/{0}
    , decltype(_impl_.stats_logs_){from._impl_.stats_logs_}
    , decltype(_impl_.planid_){}
    , decltype(_impl_.compacted_to_){}
    , decltype(_impl_.num_of_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.planid_, &from._impl_.planid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_of_rows_) -
    reinterpret_cast<char*>(&_impl_.planid_)) + sizeof(_impl_.num_of_rows_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SyncSegmentsRequest)
}

inline void SyncSegmentsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.compacted_from_){arena}
    , /*decltype(_impl_._compacted_from_cached_byte_size_)*/{0}
    , decltype(_impl_.stats_logs_){arena}
    , decltype(_impl_.planid_){int64_t{0}}
    , decltype(_impl_.compacted_to_){int64_t{0}}
    , decltype(_impl_.num_of_rows_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SyncSegmentsRequest::~SyncSegmentsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SyncSegmentsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncSegmentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.compacted_from_.~RepeatedField();
  _impl_.stats_logs_.~RepeatedPtrField();
}

void SyncSegmentsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncSegmentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SyncSegmentsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compacted_from_.Clear();
  _impl_.stats_logs_.Clear();
  ::memset(&_impl_.planid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_of_rows_) -
      reinterpret_cast<char*>(&_impl_.planid_)) + sizeof(_impl_.num_of_rows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncSegmentsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 planID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.planid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 compacted_to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.compacted_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_of_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_of_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 compacted_from = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_compacted_from(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_compacted_from(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog stats_logs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncSegmentsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SyncSegmentsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 planID = 1;
  if (this->_internal_planid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_planid(), target);
  }

  // int64 compacted_to = 2;
  if (this->_internal_compacted_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_compacted_to(), target);
  }

  // int64 num_of_rows = 3;
  if (this->_internal_num_of_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_num_of_rows(), target);
  }

  // repeated int64 compacted_from = 4;
  {
    int byte_size = _impl_._compacted_from_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_compacted_from(), byte_size, target);
    }
  }

  // repeated .milvus.proto.data.FieldBinlog stats_logs = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SyncSegmentsRequest)
  return target;
}

size_t SyncSegmentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SyncSegmentsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 compacted_from = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.compacted_from_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._compacted_from_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .milvus.proto.data.FieldBinlog stats_logs = 5;
  total_size += 1UL * this->_internal_stats_logs_size();
  for (const auto& msg : this->_impl_.stats_logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 planID = 1;
  if (this->_internal_planid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_planid());
  }

  // int64 compacted_to = 2;
  if (this->_internal_compacted_to() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_compacted_to());
  }

  // int64 num_of_rows = 3;
  if (this->_internal_num_of_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_of_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncSegmentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncSegmentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncSegmentsRequest::GetClassData() const { return &_class_data_; }


void SyncSegmentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncSegmentsRequest*>(&to_msg);
  auto& from = static_cast<const SyncSegmentsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SyncSegmentsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.compacted_from_.MergeFrom(from._impl_.compacted_from_);
  _this->_impl_.stats_logs_.MergeFrom(from._impl_.stats_logs_);
  if (from._internal_planid() != 0) {
    _this->_internal_set_planid(from._internal_planid());
  }
  if (from._internal_compacted_to() != 0) {
    _this->_internal_set_compacted_to(from._internal_compacted_to());
  }
  if (from._internal_num_of_rows() != 0) {
    _this->_internal_set_num_of_rows(from._internal_num_of_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncSegmentsRequest::CopyFrom(const SyncSegmentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SyncSegmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncSegmentsRequest::IsInitialized() const {
  return true;
}

void SyncSegmentsRequest::InternalSwap(SyncSegmentsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.compacted_from_.InternalSwap(&other->_impl_.compacted_from_);
  _impl_.stats_logs_.InternalSwap(&other->_impl_.stats_logs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncSegmentsRequest, _impl_.num_of_rows_)
      + sizeof(SyncSegmentsRequest::_impl_.num_of_rows_)
      - PROTOBUF_FIELD_OFFSET(SyncSegmentsRequest, _impl_.planid_)>(
          reinterpret_cast<char*>(&_impl_.planid_),
          reinterpret_cast<char*>(&other->_impl_.planid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncSegmentsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[45]);
}

// ===================================================================

class CompactionSegmentBinlogs::_Internal {
 public:
};

CompactionSegmentBinlogs::CompactionSegmentBinlogs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.CompactionSegmentBinlogs)
}
CompactionSegmentBinlogs::CompactionSegmentBinlogs(const CompactionSegmentBinlogs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompactionSegmentBinlogs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fieldbinlogs_){from._impl_.fieldbinlogs_}
    , decltype(_impl_.field2statslogpaths_){from._impl_.field2statslogpaths_}
    , decltype(_impl_.deltalogs_){from._impl_.deltalogs_}
    , decltype(_impl_.insert_channel_){}
    , decltype(_impl_.segmentid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.insert_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.insert_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_insert_channel().empty()) {
    _this->_impl_.insert_channel_.Set(from._internal_insert_channel(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.segmentid_ = from._impl_.segmentid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.CompactionSegmentBinlogs)
}

inline void CompactionSegmentBinlogs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fieldbinlogs_){arena}
    , decltype(_impl_.field2statslogpaths_){arena}
    , decltype(_impl_.deltalogs_){arena}
    , decltype(_impl_.insert_channel_){}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.insert_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.insert_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompactionSegmentBinlogs::~CompactionSegmentBinlogs() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.CompactionSegmentBinlogs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompactionSegmentBinlogs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fieldbinlogs_.~RepeatedPtrField();
  _impl_.field2statslogpaths_.~RepeatedPtrField();
  _impl_.deltalogs_.~RepeatedPtrField();
  _impl_.insert_channel_.Destroy();
}

void CompactionSegmentBinlogs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompactionSegmentBinlogs::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.CompactionSegmentBinlogs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fieldbinlogs_.Clear();
  _impl_.field2statslogpaths_.Clear();
  _impl_.deltalogs_.Clear();
  _impl_.insert_channel_.ClearToEmpty();
  _impl_.segmentid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompactionSegmentBinlogs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog fieldBinlogs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldbinlogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field2statslogpaths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog deltalogs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deltalogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string insert_channel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_insert_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.CompactionSegmentBinlogs.insert_channel"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompactionSegmentBinlogs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.CompactionSegmentBinlogs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // repeated .milvus.proto.data.FieldBinlog fieldBinlogs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fieldbinlogs_size()); i < n; i++) {
    const auto& repfield = this->_internal_fieldbinlogs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field2statslogpaths_size()); i < n; i++) {
    const auto& repfield = this->_internal_field2statslogpaths(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deltalogs_size()); i < n; i++) {
    const auto& repfield = this->_internal_deltalogs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string insert_channel = 5;
  if (!this->_internal_insert_channel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insert_channel().data(), static_cast<int>(this->_internal_insert_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.CompactionSegmentBinlogs.insert_channel");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_insert_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.CompactionSegmentBinlogs)
  return target;
}

size_t CompactionSegmentBinlogs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.CompactionSegmentBinlogs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.FieldBinlog fieldBinlogs = 2;
  total_size += 1UL * this->_internal_fieldbinlogs_size();
  for (const auto& msg : this->_impl_.fieldbinlogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 3;
  total_size += 1UL * this->_internal_field2statslogpaths_size();
  for (const auto& msg : this->_impl_.field2statslogpaths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 4;
  total_size += 1UL * this->_internal_deltalogs_size();
  for (const auto& msg : this->_impl_.deltalogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string insert_channel = 5;
  if (!this->_internal_insert_channel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insert_channel());
  }

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompactionSegmentBinlogs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompactionSegmentBinlogs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompactionSegmentBinlogs::GetClassData() const { return &_class_data_; }


void CompactionSegmentBinlogs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompactionSegmentBinlogs*>(&to_msg);
  auto& from = static_cast<const CompactionSegmentBinlogs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.CompactionSegmentBinlogs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fieldbinlogs_.MergeFrom(from._impl_.fieldbinlogs_);
  _this->_impl_.field2statslogpaths_.MergeFrom(from._impl_.field2statslogpaths_);
  _this->_impl_.deltalogs_.MergeFrom(from._impl_.deltalogs_);
  if (!from._internal_insert_channel().empty()) {
    _this->_internal_set_insert_channel(from._internal_insert_channel());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompactionSegmentBinlogs::CopyFrom(const CompactionSegmentBinlogs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.CompactionSegmentBinlogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionSegmentBinlogs::IsInitialized() const {
  return true;
}

void CompactionSegmentBinlogs::InternalSwap(CompactionSegmentBinlogs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fieldbinlogs_.InternalSwap(&other->_impl_.fieldbinlogs_);
  _impl_.field2statslogpaths_.InternalSwap(&other->_impl_.field2statslogpaths_);
  _impl_.deltalogs_.InternalSwap(&other->_impl_.deltalogs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.insert_channel_, lhs_arena,
      &other->_impl_.insert_channel_, rhs_arena
  );
  swap(_impl_.segmentid_, other->_impl_.segmentid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactionSegmentBinlogs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[46]);
}

// ===================================================================

class CompactionPlan::_Internal {
 public:
};

CompactionPlan::CompactionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.CompactionPlan)
}
CompactionPlan::CompactionPlan(const CompactionPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompactionPlan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentbinlogs_){from._impl_.segmentbinlogs_}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.planid_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.timeout_in_seconds_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.timetravel_){}
    , decltype(_impl_.collection_ttl_){}
    , decltype(_impl_.total_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel().empty()) {
    _this->_impl_.channel_.Set(from._internal_channel(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.planid_, &from._impl_.planid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_rows_) -
    reinterpret_cast<char*>(&_impl_.planid_)) + sizeof(_impl_.total_rows_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.CompactionPlan)
}

inline void CompactionPlan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentbinlogs_){arena}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.planid_){int64_t{0}}
    , decltype(_impl_.start_time_){uint64_t{0u}}
    , decltype(_impl_.timeout_in_seconds_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.timetravel_){uint64_t{0u}}
    , decltype(_impl_.collection_ttl_){int64_t{0}}
    , decltype(_impl_.total_rows_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompactionPlan::~CompactionPlan() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.CompactionPlan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompactionPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentbinlogs_.~RepeatedPtrField();
  _impl_.channel_.Destroy();
}

void CompactionPlan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompactionPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.CompactionPlan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segmentbinlogs_.Clear();
  _impl_.channel_.ClearToEmpty();
  ::memset(&_impl_.planid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_rows_) -
      reinterpret_cast<char*>(&_impl_.planid_)) + sizeof(_impl_.total_rows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompactionPlan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 planID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.planid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.CompactionSegmentBinlogs segmentBinlogs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segmentbinlogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timeout_in_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timeout_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.data.CompactionType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::milvus::proto::data::CompactionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 timetravel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.timetravel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string channel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.CompactionPlan.channel"));
        } else
          goto handle_unusual;
        continue;
      // int64 collection_ttl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.collection_ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_rows = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.total_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompactionPlan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.CompactionPlan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 planID = 1;
  if (this->_internal_planid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_planid(), target);
  }

  // repeated .milvus.proto.data.CompactionSegmentBinlogs segmentBinlogs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segmentbinlogs_size()); i < n; i++) {
    const auto& repfield = this->_internal_segmentbinlogs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 start_time = 3;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_start_time(), target);
  }

  // int32 timeout_in_seconds = 4;
  if (this->_internal_timeout_in_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_timeout_in_seconds(), target);
  }

  // .milvus.proto.data.CompactionType type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // uint64 timetravel = 6;
  if (this->_internal_timetravel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_timetravel(), target);
  }

  // string channel = 7;
  if (!this->_internal_channel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel().data(), static_cast<int>(this->_internal_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.CompactionPlan.channel");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_channel(), target);
  }

  // int64 collection_ttl = 8;
  if (this->_internal_collection_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_collection_ttl(), target);
  }

  // int64 total_rows = 9;
  if (this->_internal_total_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_total_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.CompactionPlan)
  return target;
}

size_t CompactionPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.CompactionPlan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.CompactionSegmentBinlogs segmentBinlogs = 2;
  total_size += 1UL * this->_internal_segmentbinlogs_size();
  for (const auto& msg : this->_impl_.segmentbinlogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string channel = 7;
  if (!this->_internal_channel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel());
  }

  // int64 planID = 1;
  if (this->_internal_planid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_planid());
  }

  // uint64 start_time = 3;
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_time());
  }

  // int32 timeout_in_seconds = 4;
  if (this->_internal_timeout_in_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeout_in_seconds());
  }

  // .milvus.proto.data.CompactionType type = 5;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint64 timetravel = 6;
  if (this->_internal_timetravel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timetravel());
  }

  // int64 collection_ttl = 8;
  if (this->_internal_collection_ttl() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collection_ttl());
  }

  // int64 total_rows = 9;
  if (this->_internal_total_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompactionPlan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompactionPlan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompactionPlan::GetClassData() const { return &_class_data_; }


void CompactionPlan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompactionPlan*>(&to_msg);
  auto& from = static_cast<const CompactionPlan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.CompactionPlan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segmentbinlogs_.MergeFrom(from._impl_.segmentbinlogs_);
  if (!from._internal_channel().empty()) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_planid() != 0) {
    _this->_internal_set_planid(from._internal_planid());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_timeout_in_seconds() != 0) {
    _this->_internal_set_timeout_in_seconds(from._internal_timeout_in_seconds());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_timetravel() != 0) {
    _this->_internal_set_timetravel(from._internal_timetravel());
  }
  if (from._internal_collection_ttl() != 0) {
    _this->_internal_set_collection_ttl(from._internal_collection_ttl());
  }
  if (from._internal_total_rows() != 0) {
    _this->_internal_set_total_rows(from._internal_total_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompactionPlan::CopyFrom(const CompactionPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.CompactionPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionPlan::IsInitialized() const {
  return true;
}

void CompactionPlan::InternalSwap(CompactionPlan* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentbinlogs_.InternalSwap(&other->_impl_.segmentbinlogs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_, lhs_arena,
      &other->_impl_.channel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompactionPlan, _impl_.total_rows_)
      + sizeof(CompactionPlan::_impl_.total_rows_)
      - PROTOBUF_FIELD_OFFSET(CompactionPlan, _impl_.planid_)>(
          reinterpret_cast<char*>(&_impl_.planid_),
          reinterpret_cast<char*>(&other->_impl_.planid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactionPlan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[47]);
}

// ===================================================================

class CompactionResult::_Internal {
 public:
};

CompactionResult::CompactionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.CompactionResult)
}
CompactionResult::CompactionResult(const CompactionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompactionResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.insert_logs_){from._impl_.insert_logs_}
    , decltype(_impl_.field2statslogpaths_){from._impl_.field2statslogpaths_}
    , decltype(_impl_.deltalogs_){from._impl_.deltalogs_}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.planid_){}
    , decltype(_impl_.segmentid_){}
    , decltype(_impl_.num_of_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel().empty()) {
    _this->_impl_.channel_.Set(from._internal_channel(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.planid_, &from._impl_.planid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_of_rows_) -
    reinterpret_cast<char*>(&_impl_.planid_)) + sizeof(_impl_.num_of_rows_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.CompactionResult)
}

inline void CompactionResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.insert_logs_){arena}
    , decltype(_impl_.field2statslogpaths_){arena}
    , decltype(_impl_.deltalogs_){arena}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.planid_){int64_t{0}}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.num_of_rows_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompactionResult::~CompactionResult() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.CompactionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompactionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.insert_logs_.~RepeatedPtrField();
  _impl_.field2statslogpaths_.~RepeatedPtrField();
  _impl_.deltalogs_.~RepeatedPtrField();
  _impl_.channel_.Destroy();
}

void CompactionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompactionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.CompactionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.insert_logs_.Clear();
  _impl_.field2statslogpaths_.Clear();
  _impl_.deltalogs_.Clear();
  _impl_.channel_.ClearToEmpty();
  ::memset(&_impl_.planid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_of_rows_) -
      reinterpret_cast<char*>(&_impl_.planid_)) + sizeof(_impl_.num_of_rows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompactionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 planID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.planid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segmentID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_of_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_of_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog insert_logs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insert_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field2statslogpaths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog deltalogs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deltalogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string channel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.CompactionResult.channel"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompactionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.CompactionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 planID = 1;
  if (this->_internal_planid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_planid(), target);
  }

  // int64 segmentID = 2;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_segmentid(), target);
  }

  // int64 num_of_rows = 3;
  if (this->_internal_num_of_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_num_of_rows(), target);
  }

  // repeated .milvus.proto.data.FieldBinlog insert_logs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_insert_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_insert_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field2statslogpaths_size()); i < n; i++) {
    const auto& repfield = this->_internal_field2statslogpaths(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deltalogs_size()); i < n; i++) {
    const auto& repfield = this->_internal_deltalogs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string channel = 7;
  if (!this->_internal_channel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel().data(), static_cast<int>(this->_internal_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.CompactionResult.channel");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.CompactionResult)
  return target;
}

size_t CompactionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.CompactionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.FieldBinlog insert_logs = 4;
  total_size += 1UL * this->_internal_insert_logs_size();
  for (const auto& msg : this->_impl_.insert_logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 5;
  total_size += 1UL * this->_internal_field2statslogpaths_size();
  for (const auto& msg : this->_impl_.field2statslogpaths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 6;
  total_size += 1UL * this->_internal_deltalogs_size();
  for (const auto& msg : this->_impl_.deltalogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string channel = 7;
  if (!this->_internal_channel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel());
  }

  // int64 planID = 1;
  if (this->_internal_planid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_planid());
  }

  // int64 segmentID = 2;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // int64 num_of_rows = 3;
  if (this->_internal_num_of_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_of_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompactionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompactionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompactionResult::GetClassData() const { return &_class_data_; }


void CompactionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompactionResult*>(&to_msg);
  auto& from = static_cast<const CompactionResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.CompactionResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.insert_logs_.MergeFrom(from._impl_.insert_logs_);
  _this->_impl_.field2statslogpaths_.MergeFrom(from._impl_.field2statslogpaths_);
  _this->_impl_.deltalogs_.MergeFrom(from._impl_.deltalogs_);
  if (!from._internal_channel().empty()) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_planid() != 0) {
    _this->_internal_set_planid(from._internal_planid());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_num_of_rows() != 0) {
    _this->_internal_set_num_of_rows(from._internal_num_of_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompactionResult::CopyFrom(const CompactionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.CompactionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionResult::IsInitialized() const {
  return true;
}

void CompactionResult::InternalSwap(CompactionResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.insert_logs_.InternalSwap(&other->_impl_.insert_logs_);
  _impl_.field2statslogpaths_.InternalSwap(&other->_impl_.field2statslogpaths_);
  _impl_.deltalogs_.InternalSwap(&other->_impl_.deltalogs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_, lhs_arena,
      &other->_impl_.channel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompactionResult, _impl_.num_of_rows_)
      + sizeof(CompactionResult::_impl_.num_of_rows_)
      - PROTOBUF_FIELD_OFFSET(CompactionResult, _impl_.planid_)>(
          reinterpret_cast<char*>(&_impl_.planid_),
          reinterpret_cast<char*>(&other->_impl_.planid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[48]);
}

// ===================================================================

class CompactionStateResult::_Internal {
 public:
  static const ::milvus::proto::data::CompactionResult& result(const CompactionStateResult* msg);
};

const ::milvus::proto::data::CompactionResult&
CompactionStateResult::_Internal::result(const CompactionStateResult* msg) {
  return *msg->_impl_.result_;
}
CompactionStateResult::CompactionStateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.CompactionStateResult)
}
CompactionStateResult::CompactionStateResult(const CompactionStateResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompactionStateResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){nullptr}
    , decltype(_impl_.planid_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::milvus::proto::data::CompactionResult(*from._impl_.result_);
  }
  ::memcpy(&_impl_.planid_, &from._impl_.planid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.planid_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.CompactionStateResult)
}

inline void CompactionStateResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){nullptr}
    , decltype(_impl_.planid_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CompactionStateResult::~CompactionStateResult() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.CompactionStateResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompactionStateResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_;
}

void CompactionStateResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompactionStateResult::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.CompactionStateResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  ::memset(&_impl_.planid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.planid_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompactionStateResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 planID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.planid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.CompactionState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::CompactionState>(val));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.data.CompactionResult result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompactionStateResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.CompactionStateResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 planID = 1;
  if (this->_internal_planid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_planid(), target);
  }

  // .milvus.proto.common.CompactionState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .milvus.proto.data.CompactionResult result = 3;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.CompactionStateResult)
  return target;
}

size_t CompactionStateResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.CompactionStateResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.data.CompactionResult result = 3;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  // int64 planID = 1;
  if (this->_internal_planid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_planid());
  }

  // .milvus.proto.common.CompactionState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompactionStateResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompactionStateResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompactionStateResult::GetClassData() const { return &_class_data_; }


void CompactionStateResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompactionStateResult*>(&to_msg);
  auto& from = static_cast<const CompactionStateResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.CompactionStateResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::milvus::proto::data::CompactionResult::MergeFrom(
        from._internal_result());
  }
  if (from._internal_planid() != 0) {
    _this->_internal_set_planid(from._internal_planid());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompactionStateResult::CopyFrom(const CompactionStateResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.CompactionStateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionStateResult::IsInitialized() const {
  return true;
}

void CompactionStateResult::InternalSwap(CompactionStateResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompactionStateResult, _impl_.state_)
      + sizeof(CompactionStateResult::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(CompactionStateResult, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactionStateResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[49]);
}

// ===================================================================

class CompactionStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const CompactionStateResponse* msg);
};

const ::milvus::proto::common::Status&
CompactionStateResponse::_Internal::status(const CompactionStateResponse* msg) {
  return *msg->_impl_.status_;
}
void CompactionStateResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
CompactionStateResponse::CompactionStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.CompactionStateResponse)
}
CompactionStateResponse::CompactionStateResponse(const CompactionStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompactionStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.CompactionStateResponse)
}

inline void CompactionStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CompactionStateResponse::~CompactionStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.CompactionStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompactionStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void CompactionStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompactionStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.CompactionStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompactionStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.CompactionStateResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompactionStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.CompactionStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.CompactionStateResult results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.CompactionStateResponse)
  return target;
}

size_t CompactionStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.CompactionStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.CompactionStateResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompactionStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompactionStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompactionStateResponse::GetClassData() const { return &_class_data_; }


void CompactionStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompactionStateResponse*>(&to_msg);
  auto& from = static_cast<const CompactionStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.CompactionStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompactionStateResponse::CopyFrom(const CompactionStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.CompactionStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionStateResponse::IsInitialized() const {
  return true;
}

void CompactionStateResponse::InternalSwap(CompactionStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactionStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[50]);
}

// ===================================================================

class SegmentFieldBinlogMeta::_Internal {
 public:
};

SegmentFieldBinlogMeta::SegmentFieldBinlogMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SegmentFieldBinlogMeta)
}
SegmentFieldBinlogMeta::SegmentFieldBinlogMeta(const SegmentFieldBinlogMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentFieldBinlogMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.binlog_path_){}
    , decltype(_impl_.fieldid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.binlog_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.binlog_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_binlog_path().empty()) {
    _this->_impl_.binlog_path_.Set(from._internal_binlog_path(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.fieldid_ = from._impl_.fieldid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SegmentFieldBinlogMeta)
}

inline void SegmentFieldBinlogMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.binlog_path_){}
    , decltype(_impl_.fieldid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.binlog_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.binlog_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SegmentFieldBinlogMeta::~SegmentFieldBinlogMeta() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SegmentFieldBinlogMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentFieldBinlogMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.binlog_path_.Destroy();
}

void SegmentFieldBinlogMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentFieldBinlogMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SegmentFieldBinlogMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.binlog_path_.ClearToEmpty();
  _impl_.fieldid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentFieldBinlogMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 fieldID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fieldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string binlog_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_binlog_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.SegmentFieldBinlogMeta.binlog_path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentFieldBinlogMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SegmentFieldBinlogMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fieldID = 1;
  if (this->_internal_fieldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_fieldid(), target);
  }

  // string binlog_path = 2;
  if (!this->_internal_binlog_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_binlog_path().data(), static_cast<int>(this->_internal_binlog_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.SegmentFieldBinlogMeta.binlog_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_binlog_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SegmentFieldBinlogMeta)
  return target;
}

size_t SegmentFieldBinlogMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SegmentFieldBinlogMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string binlog_path = 2;
  if (!this->_internal_binlog_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_binlog_path());
  }

  // int64 fieldID = 1;
  if (this->_internal_fieldid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fieldid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentFieldBinlogMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentFieldBinlogMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentFieldBinlogMeta::GetClassData() const { return &_class_data_; }


void SegmentFieldBinlogMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentFieldBinlogMeta*>(&to_msg);
  auto& from = static_cast<const SegmentFieldBinlogMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SegmentFieldBinlogMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_binlog_path().empty()) {
    _this->_internal_set_binlog_path(from._internal_binlog_path());
  }
  if (from._internal_fieldid() != 0) {
    _this->_internal_set_fieldid(from._internal_fieldid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentFieldBinlogMeta::CopyFrom(const SegmentFieldBinlogMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SegmentFieldBinlogMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentFieldBinlogMeta::IsInitialized() const {
  return true;
}

void SegmentFieldBinlogMeta::InternalSwap(SegmentFieldBinlogMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.binlog_path_, lhs_arena,
      &other->_impl_.binlog_path_, rhs_arena
  );
  swap(_impl_.fieldid_, other->_impl_.fieldid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentFieldBinlogMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[51]);
}

// ===================================================================

class WatchChannelsRequest::_Internal {
 public:
  static const ::milvus::proto::schema::CollectionSchema& schema(const WatchChannelsRequest* msg);
};

const ::milvus::proto::schema::CollectionSchema&
WatchChannelsRequest::_Internal::schema(const WatchChannelsRequest* msg) {
  return *msg->_impl_.schema_;
}
void WatchChannelsRequest::clear_start_positions() {
  _impl_.start_positions_.Clear();
}
void WatchChannelsRequest::clear_schema() {
  if (GetArenaForAllocation() == nullptr && _impl_.schema_ != nullptr) {
    delete _impl_.schema_;
  }
  _impl_.schema_ = nullptr;
}
WatchChannelsRequest::WatchChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.WatchChannelsRequest)
}
WatchChannelsRequest::WatchChannelsRequest(const WatchChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WatchChannelsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channelnames_){from._impl_.channelnames_}
    , decltype(_impl_.start_positions_){from._impl_.start_positions_}
    , decltype(_impl_.schema_){nullptr}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_schema()) {
    _this->_impl_.schema_ = new ::milvus::proto::schema::CollectionSchema(*from._impl_.schema_);
  }
  _this->_impl_.collectionid_ = from._impl_.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.WatchChannelsRequest)
}

inline void WatchChannelsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channelnames_){arena}
    , decltype(_impl_.start_positions_){arena}
    , decltype(_impl_.schema_){nullptr}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WatchChannelsRequest::~WatchChannelsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.WatchChannelsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WatchChannelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channelnames_.~RepeatedPtrField();
  _impl_.start_positions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.schema_;
}

void WatchChannelsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WatchChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.WatchChannelsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channelnames_.Clear();
  _impl_.start_positions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.schema_ != nullptr) {
    delete _impl_.schema_;
  }
  _impl_.schema_ = nullptr;
  _impl_.collectionid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchChannelsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string channelNames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_channelnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.WatchChannelsRequest.channelNames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyDataPair start_positions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_start_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.schema.CollectionSchema schema = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WatchChannelsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.WatchChannelsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // repeated string channelNames = 2;
  for (int i = 0, n = this->_internal_channelnames_size(); i < n; i++) {
    const auto& s = this->_internal_channelnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.WatchChannelsRequest.channelNames");
    target = stream->WriteString(2, s, target);
  }

  // repeated .milvus.proto.common.KeyDataPair start_positions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_start_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_start_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .milvus.proto.schema.CollectionSchema schema = 4;
  if (this->_internal_has_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::schema(this),
        _Internal::schema(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.WatchChannelsRequest)
  return target;
}

size_t WatchChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.WatchChannelsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string channelNames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.channelnames_.size());
  for (int i = 0, n = _impl_.channelnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.channelnames_.Get(i));
  }

  // repeated .milvus.proto.common.KeyDataPair start_positions = 3;
  total_size += 1UL * this->_internal_start_positions_size();
  for (const auto& msg : this->_impl_.start_positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.schema.CollectionSchema schema = 4;
  if (this->_internal_has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schema_);
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchChannelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WatchChannelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchChannelsRequest::GetClassData() const { return &_class_data_; }


void WatchChannelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WatchChannelsRequest*>(&to_msg);
  auto& from = static_cast<const WatchChannelsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.WatchChannelsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channelnames_.MergeFrom(from._impl_.channelnames_);
  _this->_impl_.start_positions_.MergeFrom(from._impl_.start_positions_);
  if (from._internal_has_schema()) {
    _this->_internal_mutable_schema()->::milvus::proto::schema::CollectionSchema::MergeFrom(
        from._internal_schema());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchChannelsRequest::CopyFrom(const WatchChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.WatchChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchChannelsRequest::IsInitialized() const {
  return true;
}

void WatchChannelsRequest::InternalSwap(WatchChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channelnames_.InternalSwap(&other->_impl_.channelnames_);
  _impl_.start_positions_.InternalSwap(&other->_impl_.start_positions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WatchChannelsRequest, _impl_.collectionid_)
      + sizeof(WatchChannelsRequest::_impl_.collectionid_)
      - PROTOBUF_FIELD_OFFSET(WatchChannelsRequest, _impl_.schema_)>(
          reinterpret_cast<char*>(&_impl_.schema_),
          reinterpret_cast<char*>(&other->_impl_.schema_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchChannelsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[52]);
}

// ===================================================================

class WatchChannelsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const WatchChannelsResponse* msg);
};

const ::milvus::proto::common::Status&
WatchChannelsResponse::_Internal::status(const WatchChannelsResponse* msg) {
  return *msg->_impl_.status_;
}
void WatchChannelsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
WatchChannelsResponse::WatchChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.WatchChannelsResponse)
}
WatchChannelsResponse::WatchChannelsResponse(const WatchChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WatchChannelsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.WatchChannelsResponse)
}

inline void WatchChannelsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WatchChannelsResponse::~WatchChannelsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.WatchChannelsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WatchChannelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void WatchChannelsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WatchChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.WatchChannelsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchChannelsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WatchChannelsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.WatchChannelsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.WatchChannelsResponse)
  return target;
}

size_t WatchChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.WatchChannelsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchChannelsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WatchChannelsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchChannelsResponse::GetClassData() const { return &_class_data_; }


void WatchChannelsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WatchChannelsResponse*>(&to_msg);
  auto& from = static_cast<const WatchChannelsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.WatchChannelsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchChannelsResponse::CopyFrom(const WatchChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.WatchChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchChannelsResponse::IsInitialized() const {
  return true;
}

void WatchChannelsResponse::InternalSwap(WatchChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchChannelsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[53]);
}

// ===================================================================

class SetSegmentStateRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SetSegmentStateRequest* msg);
};

const ::milvus::proto::common::MsgBase&
SetSegmentStateRequest::_Internal::base(const SetSegmentStateRequest* msg) {
  return *msg->_impl_.base_;
}
void SetSegmentStateRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
SetSegmentStateRequest::SetSegmentStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SetSegmentStateRequest)
}
SetSegmentStateRequest::SetSegmentStateRequest(const SetSegmentStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetSegmentStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.segment_id_){}
    , decltype(_impl_.new_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.segment_id_, &from._impl_.segment_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_state_) -
    reinterpret_cast<char*>(&_impl_.segment_id_)) + sizeof(_impl_.new_state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SetSegmentStateRequest)
}

inline void SetSegmentStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.segment_id_){int64_t{0}}
    , decltype(_impl_.new_state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetSegmentStateRequest::~SetSegmentStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SetSegmentStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetSegmentStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void SetSegmentStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetSegmentStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SetSegmentStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.segment_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.new_state_) -
      reinterpret_cast<char*>(&_impl_.segment_id_)) + sizeof(_impl_.new_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetSegmentStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.segment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.SegmentState new_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_new_state(static_cast<::milvus::proto::common::SegmentState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetSegmentStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SetSegmentStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 segment_id = 2;
  if (this->_internal_segment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_segment_id(), target);
  }

  // .milvus.proto.common.SegmentState new_state = 3;
  if (this->_internal_new_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_new_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SetSegmentStateRequest)
  return target;
}

size_t SetSegmentStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SetSegmentStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 segment_id = 2;
  if (this->_internal_segment_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segment_id());
  }

  // .milvus.proto.common.SegmentState new_state = 3;
  if (this->_internal_new_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_new_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetSegmentStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetSegmentStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetSegmentStateRequest::GetClassData() const { return &_class_data_; }


void SetSegmentStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetSegmentStateRequest*>(&to_msg);
  auto& from = static_cast<const SetSegmentStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SetSegmentStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_segment_id() != 0) {
    _this->_internal_set_segment_id(from._internal_segment_id());
  }
  if (from._internal_new_state() != 0) {
    _this->_internal_set_new_state(from._internal_new_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetSegmentStateRequest::CopyFrom(const SetSegmentStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SetSegmentStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSegmentStateRequest::IsInitialized() const {
  return true;
}

void SetSegmentStateRequest::InternalSwap(SetSegmentStateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetSegmentStateRequest, _impl_.new_state_)
      + sizeof(SetSegmentStateRequest::_impl_.new_state_)
      - PROTOBUF_FIELD_OFFSET(SetSegmentStateRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSegmentStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[54]);
}

// ===================================================================

class SetSegmentStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const SetSegmentStateResponse* msg);
};

const ::milvus::proto::common::Status&
SetSegmentStateResponse::_Internal::status(const SetSegmentStateResponse* msg) {
  return *msg->_impl_.status_;
}
void SetSegmentStateResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
SetSegmentStateResponse::SetSegmentStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SetSegmentStateResponse)
}
SetSegmentStateResponse::SetSegmentStateResponse(const SetSegmentStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetSegmentStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SetSegmentStateResponse)
}

inline void SetSegmentStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetSegmentStateResponse::~SetSegmentStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SetSegmentStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetSegmentStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SetSegmentStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetSegmentStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SetSegmentStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetSegmentStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetSegmentStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SetSegmentStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SetSegmentStateResponse)
  return target;
}

size_t SetSegmentStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SetSegmentStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetSegmentStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetSegmentStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetSegmentStateResponse::GetClassData() const { return &_class_data_; }


void SetSegmentStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetSegmentStateResponse*>(&to_msg);
  auto& from = static_cast<const SetSegmentStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SetSegmentStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetSegmentStateResponse::CopyFrom(const SetSegmentStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SetSegmentStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSegmentStateResponse::IsInitialized() const {
  return true;
}

void SetSegmentStateResponse::InternalSwap(SetSegmentStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSegmentStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[55]);
}

// ===================================================================

class DropVirtualChannelRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropVirtualChannelRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropVirtualChannelRequest::_Internal::base(const DropVirtualChannelRequest* msg) {
  return *msg->_impl_.base_;
}
void DropVirtualChannelRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
DropVirtualChannelRequest::DropVirtualChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.DropVirtualChannelRequest)
}
DropVirtualChannelRequest::DropVirtualChannelRequest(const DropVirtualChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropVirtualChannelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){from._impl_.segments_}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_name().empty()) {
    _this->_impl_.channel_name_.Set(from._internal_channel_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.DropVirtualChannelRequest)
}

inline void DropVirtualChannelRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){arena}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DropVirtualChannelRequest::~DropVirtualChannelRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.DropVirtualChannelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropVirtualChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segments_.~RepeatedPtrField();
  _impl_.channel_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void DropVirtualChannelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropVirtualChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.DropVirtualChannelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segments_.Clear();
  _impl_.channel_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropVirtualChannelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string channel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.DropVirtualChannelRequest.channel_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.DropVirtualChannelSegment segments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropVirtualChannelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.DropVirtualChannelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string channel_name = 2;
  if (!this->_internal_channel_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.DropVirtualChannelRequest.channel_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel_name(), target);
  }

  // repeated .milvus.proto.data.DropVirtualChannelSegment segments = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.DropVirtualChannelRequest)
  return target;
}

size_t DropVirtualChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.DropVirtualChannelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.DropVirtualChannelSegment segments = 3;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->_impl_.segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string channel_name = 2;
  if (!this->_internal_channel_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropVirtualChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropVirtualChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropVirtualChannelRequest::GetClassData() const { return &_class_data_; }


void DropVirtualChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropVirtualChannelRequest*>(&to_msg);
  auto& from = static_cast<const DropVirtualChannelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.DropVirtualChannelRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segments_.MergeFrom(from._impl_.segments_);
  if (!from._internal_channel_name().empty()) {
    _this->_internal_set_channel_name(from._internal_channel_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropVirtualChannelRequest::CopyFrom(const DropVirtualChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.DropVirtualChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropVirtualChannelRequest::IsInitialized() const {
  return true;
}

void DropVirtualChannelRequest::InternalSwap(DropVirtualChannelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropVirtualChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[56]);
}

// ===================================================================

class DropVirtualChannelSegment::_Internal {
 public:
  static const ::milvus::proto::msg::MsgPosition& startposition(const DropVirtualChannelSegment* msg);
  static const ::milvus::proto::msg::MsgPosition& checkpoint(const DropVirtualChannelSegment* msg);
};

const ::milvus::proto::msg::MsgPosition&
DropVirtualChannelSegment::_Internal::startposition(const DropVirtualChannelSegment* msg) {
  return *msg->_impl_.startposition_;
}
const ::milvus::proto::msg::MsgPosition&
DropVirtualChannelSegment::_Internal::checkpoint(const DropVirtualChannelSegment* msg) {
  return *msg->_impl_.checkpoint_;
}
void DropVirtualChannelSegment::clear_startposition() {
  if (GetArenaForAllocation() == nullptr && _impl_.startposition_ != nullptr) {
    delete _impl_.startposition_;
  }
  _impl_.startposition_ = nullptr;
}
void DropVirtualChannelSegment::clear_checkpoint() {
  if (GetArenaForAllocation() == nullptr && _impl_.checkpoint_ != nullptr) {
    delete _impl_.checkpoint_;
  }
  _impl_.checkpoint_ = nullptr;
}
DropVirtualChannelSegment::DropVirtualChannelSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.DropVirtualChannelSegment)
}
DropVirtualChannelSegment::DropVirtualChannelSegment(const DropVirtualChannelSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropVirtualChannelSegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field2binlogpaths_){from._impl_.field2binlogpaths_}
    , decltype(_impl_.field2statslogpaths_){from._impl_.field2statslogpaths_}
    , decltype(_impl_.deltalogs_){from._impl_.deltalogs_}
    , decltype(_impl_.startposition_){nullptr}
    , decltype(_impl_.checkpoint_){nullptr}
    , decltype(_impl_.segmentid_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.numofrows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_startposition()) {
    _this->_impl_.startposition_ = new ::milvus::proto::msg::MsgPosition(*from._impl_.startposition_);
  }
  if (from._internal_has_checkpoint()) {
    _this->_impl_.checkpoint_ = new ::milvus::proto::msg::MsgPosition(*from._impl_.checkpoint_);
  }
  ::memcpy(&_impl_.segmentid_, &from._impl_.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.numofrows_) -
    reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.numofrows_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.DropVirtualChannelSegment)
}

inline void DropVirtualChannelSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field2binlogpaths_){arena}
    , decltype(_impl_.field2statslogpaths_){arena}
    , decltype(_impl_.deltalogs_){arena}
    , decltype(_impl_.startposition_){nullptr}
    , decltype(_impl_.checkpoint_){nullptr}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.numofrows_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DropVirtualChannelSegment::~DropVirtualChannelSegment() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.DropVirtualChannelSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropVirtualChannelSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field2binlogpaths_.~RepeatedPtrField();
  _impl_.field2statslogpaths_.~RepeatedPtrField();
  _impl_.deltalogs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.startposition_;
  if (this != internal_default_instance()) delete _impl_.checkpoint_;
}

void DropVirtualChannelSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropVirtualChannelSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.DropVirtualChannelSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field2binlogpaths_.Clear();
  _impl_.field2statslogpaths_.Clear();
  _impl_.deltalogs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.startposition_ != nullptr) {
    delete _impl_.startposition_;
  }
  _impl_.startposition_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.checkpoint_ != nullptr) {
    delete _impl_.checkpoint_;
  }
  _impl_.checkpoint_ = nullptr;
  ::memset(&_impl_.segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.numofrows_) -
      reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.numofrows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropVirtualChannelSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog field2BinlogPaths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field2binlogpaths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field2statslogpaths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog deltalogs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deltalogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.msg.MsgPosition startPosition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_startposition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.msg.MsgPosition checkPoint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 numOfRows = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.numofrows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropVirtualChannelSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.DropVirtualChannelSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // repeated .milvus.proto.data.FieldBinlog field2BinlogPaths = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field2binlogpaths_size()); i < n; i++) {
    const auto& repfield = this->_internal_field2binlogpaths(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field2statslogpaths_size()); i < n; i++) {
    const auto& repfield = this->_internal_field2statslogpaths(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deltalogs_size()); i < n; i++) {
    const auto& repfield = this->_internal_deltalogs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .milvus.proto.msg.MsgPosition startPosition = 6;
  if (this->_internal_has_startposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::startposition(this),
        _Internal::startposition(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.msg.MsgPosition checkPoint = 7;
  if (this->_internal_has_checkpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::checkpoint(this),
        _Internal::checkpoint(this).GetCachedSize(), target, stream);
  }

  // int64 numOfRows = 8;
  if (this->_internal_numofrows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_numofrows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.DropVirtualChannelSegment)
  return target;
}

size_t DropVirtualChannelSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.DropVirtualChannelSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.FieldBinlog field2BinlogPaths = 3;
  total_size += 1UL * this->_internal_field2binlogpaths_size();
  for (const auto& msg : this->_impl_.field2binlogpaths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.FieldBinlog field2StatslogPaths = 4;
  total_size += 1UL * this->_internal_field2statslogpaths_size();
  for (const auto& msg : this->_impl_.field2statslogpaths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.data.FieldBinlog deltalogs = 5;
  total_size += 1UL * this->_internal_deltalogs_size();
  for (const auto& msg : this->_impl_.deltalogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.msg.MsgPosition startPosition = 6;
  if (this->_internal_has_startposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.startposition_);
  }

  // .milvus.proto.msg.MsgPosition checkPoint = 7;
  if (this->_internal_has_checkpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.checkpoint_);
  }

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // int64 collectionID = 2;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 numOfRows = 8;
  if (this->_internal_numofrows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_numofrows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropVirtualChannelSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropVirtualChannelSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropVirtualChannelSegment::GetClassData() const { return &_class_data_; }


void DropVirtualChannelSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropVirtualChannelSegment*>(&to_msg);
  auto& from = static_cast<const DropVirtualChannelSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.DropVirtualChannelSegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.field2binlogpaths_.MergeFrom(from._impl_.field2binlogpaths_);
  _this->_impl_.field2statslogpaths_.MergeFrom(from._impl_.field2statslogpaths_);
  _this->_impl_.deltalogs_.MergeFrom(from._impl_.deltalogs_);
  if (from._internal_has_startposition()) {
    _this->_internal_mutable_startposition()->::milvus::proto::msg::MsgPosition::MergeFrom(
        from._internal_startposition());
  }
  if (from._internal_has_checkpoint()) {
    _this->_internal_mutable_checkpoint()->::milvus::proto::msg::MsgPosition::MergeFrom(
        from._internal_checkpoint());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_numofrows() != 0) {
    _this->_internal_set_numofrows(from._internal_numofrows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropVirtualChannelSegment::CopyFrom(const DropVirtualChannelSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.DropVirtualChannelSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropVirtualChannelSegment::IsInitialized() const {
  return true;
}

void DropVirtualChannelSegment::InternalSwap(DropVirtualChannelSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.field2binlogpaths_.InternalSwap(&other->_impl_.field2binlogpaths_);
  _impl_.field2statslogpaths_.InternalSwap(&other->_impl_.field2statslogpaths_);
  _impl_.deltalogs_.InternalSwap(&other->_impl_.deltalogs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropVirtualChannelSegment, _impl_.numofrows_)
      + sizeof(DropVirtualChannelSegment::_impl_.numofrows_)
      - PROTOBUF_FIELD_OFFSET(DropVirtualChannelSegment, _impl_.startposition_)>(
          reinterpret_cast<char*>(&_impl_.startposition_),
          reinterpret_cast<char*>(&other->_impl_.startposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropVirtualChannelSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[57]);
}

// ===================================================================

class DropVirtualChannelResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DropVirtualChannelResponse* msg);
};

const ::milvus::proto::common::Status&
DropVirtualChannelResponse::_Internal::status(const DropVirtualChannelResponse* msg) {
  return *msg->_impl_.status_;
}
void DropVirtualChannelResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
DropVirtualChannelResponse::DropVirtualChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.DropVirtualChannelResponse)
}
DropVirtualChannelResponse::DropVirtualChannelResponse(const DropVirtualChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropVirtualChannelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.DropVirtualChannelResponse)
}

inline void DropVirtualChannelResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DropVirtualChannelResponse::~DropVirtualChannelResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.DropVirtualChannelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropVirtualChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DropVirtualChannelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropVirtualChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.DropVirtualChannelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropVirtualChannelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropVirtualChannelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.DropVirtualChannelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.DropVirtualChannelResponse)
  return target;
}

size_t DropVirtualChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.DropVirtualChannelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropVirtualChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropVirtualChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropVirtualChannelResponse::GetClassData() const { return &_class_data_; }


void DropVirtualChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropVirtualChannelResponse*>(&to_msg);
  auto& from = static_cast<const DropVirtualChannelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.DropVirtualChannelResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropVirtualChannelResponse::CopyFrom(const DropVirtualChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.DropVirtualChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropVirtualChannelResponse::IsInitialized() const {
  return true;
}

void DropVirtualChannelResponse::InternalSwap(DropVirtualChannelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropVirtualChannelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[58]);
}

// ===================================================================

class ImportTask::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ImportTask* msg);
};

const ::milvus::proto::common::Status&
ImportTask::_Internal::status(const ImportTask* msg) {
  return *msg->_impl_.status_;
}
void ImportTask::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void ImportTask::clear_infos() {
  _impl_.infos_.Clear();
}
ImportTask::ImportTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.ImportTask)
}
ImportTask::ImportTask(const ImportTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_names_){from._impl_.channel_names_}
    , decltype(_impl_.files_){from._impl_.files_}
    , decltype(_impl_.infos_){from._impl_.infos_}
    , decltype(_impl_.database_name_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.collection_id_){}
    , decltype(_impl_.partition_id_){}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.row_based_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.database_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_database_name().empty()) {
    _this->_impl_.database_name_.Set(from._internal_database_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.collection_id_, &from._impl_.collection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_based_) -
    reinterpret_cast<char*>(&_impl_.collection_id_)) + sizeof(_impl_.row_based_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.ImportTask)
}

inline void ImportTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_names_){arena}
    , decltype(_impl_.files_){arena}
    , decltype(_impl_.infos_){arena}
    , decltype(_impl_.database_name_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.collection_id_){int64_t{0}}
    , decltype(_impl_.partition_id_){int64_t{0}}
    , decltype(_impl_.task_id_){int64_t{0}}
    , decltype(_impl_.row_based_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.database_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImportTask::~ImportTask() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.ImportTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_names_.~RepeatedPtrField();
  _impl_.files_.~RepeatedPtrField();
  _impl_.infos_.~RepeatedPtrField();
  _impl_.database_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ImportTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportTask::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.ImportTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_names_.Clear();
  _impl_.files_.Clear();
  _impl_.infos_.Clear();
  _impl_.database_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.collection_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.row_based_) -
      reinterpret_cast<char*>(&_impl_.collection_id_)) + sizeof(_impl_.row_based_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collection_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.collection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partition_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partition_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string channel_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_channel_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.ImportTask.channel_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool row_based = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.row_based_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 task_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string files = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_files();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.ImportTask.files"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair infos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string database_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_database_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.ImportTask.database_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.ImportTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int64 collection_id = 2;
  if (this->_internal_collection_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_collection_id(), target);
  }

  // int64 partition_id = 3;
  if (this->_internal_partition_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_partition_id(), target);
  }

  // repeated string channel_names = 4;
  for (int i = 0, n = this->_internal_channel_names_size(); i < n; i++) {
    const auto& s = this->_internal_channel_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.ImportTask.channel_names");
    target = stream->WriteString(4, s, target);
  }

  // bool row_based = 5;
  if (this->_internal_row_based() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_row_based(), target);
  }

  // int64 task_id = 6;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_task_id(), target);
  }

  // repeated string files = 7;
  for (int i = 0, n = this->_internal_files_size(); i < n; i++) {
    const auto& s = this->_internal_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.ImportTask.files");
    target = stream->WriteString(7, s, target);
  }

  // repeated .milvus.proto.common.KeyValuePair infos = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string database_name = 16;
  if (!this->_internal_database_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database_name().data(), static_cast<int>(this->_internal_database_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.ImportTask.database_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_database_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.ImportTask)
  return target;
}

size_t ImportTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.ImportTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string channel_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.channel_names_.size());
  for (int i = 0, n = _impl_.channel_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.channel_names_.Get(i));
  }

  // repeated string files = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.files_.size());
  for (int i = 0, n = _impl_.files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.files_.Get(i));
  }

  // repeated .milvus.proto.common.KeyValuePair infos = 8;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_impl_.infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string database_name = 16;
  if (!this->_internal_database_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database_name());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 collection_id = 2;
  if (this->_internal_collection_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collection_id());
  }

  // int64 partition_id = 3;
  if (this->_internal_partition_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partition_id());
  }

  // int64 task_id = 6;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_task_id());
  }

  // bool row_based = 5;
  if (this->_internal_row_based() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportTask::GetClassData() const { return &_class_data_; }


void ImportTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportTask*>(&to_msg);
  auto& from = static_cast<const ImportTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.ImportTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channel_names_.MergeFrom(from._impl_.channel_names_);
  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  _this->_impl_.infos_.MergeFrom(from._impl_.infos_);
  if (!from._internal_database_name().empty()) {
    _this->_internal_set_database_name(from._internal_database_name());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_collection_id() != 0) {
    _this->_internal_set_collection_id(from._internal_collection_id());
  }
  if (from._internal_partition_id() != 0) {
    _this->_internal_set_partition_id(from._internal_partition_id());
  }
  if (from._internal_task_id() != 0) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_row_based() != 0) {
    _this->_internal_set_row_based(from._internal_row_based());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportTask::CopyFrom(const ImportTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.ImportTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportTask::IsInitialized() const {
  return true;
}

void ImportTask::InternalSwap(ImportTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channel_names_.InternalSwap(&other->_impl_.channel_names_);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_name_, lhs_arena,
      &other->_impl_.database_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImportTask, _impl_.row_based_)
      + sizeof(ImportTask::_impl_.row_based_)
      - PROTOBUF_FIELD_OFFSET(ImportTask, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[59]);
}

// ===================================================================

class ImportTaskState::_Internal {
 public:
};

ImportTaskState::ImportTaskState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.ImportTaskState)
}
ImportTaskState::ImportTaskState(const ImportTaskState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportTaskState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){from._impl_.segments_}
    , /*decltype(_impl_._segments_cached_byte_size_)*/{0}
    , decltype(_impl_.row_ids_){from._impl_.row_ids_}
    , /*decltype(_impl_._row_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.row_count_){}
    , decltype(_impl_.statecode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.row_count_, &from._impl_.row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.statecode_) -
    reinterpret_cast<char*>(&_impl_.row_count_)) + sizeof(_impl_.statecode_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.ImportTaskState)
}

inline void ImportTaskState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segments_){arena}
    , /*decltype(_impl_._segments_cached_byte_size_)*/{0}
    , decltype(_impl_.row_ids_){arena}
    , /*decltype(_impl_._row_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.row_count_){int64_t{0}}
    , decltype(_impl_.statecode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImportTaskState::~ImportTaskState() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.ImportTaskState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportTaskState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segments_.~RepeatedField();
  _impl_.row_ids_.~RepeatedField();
  _impl_.error_message_.Destroy();
}

void ImportTaskState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportTaskState::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.ImportTaskState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segments_.Clear();
  _impl_.row_ids_.Clear();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.statecode_) -
      reinterpret_cast<char*>(&_impl_.row_count_)) + sizeof(_impl_.statecode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportTaskState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.ImportState stateCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statecode(static_cast<::milvus::proto::common::ImportState>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segments(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_segments(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 row_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_row_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_row_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 row_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.ImportTaskState.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportTaskState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.ImportTaskState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.ImportState stateCode = 1;
  if (this->_internal_statecode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_statecode(), target);
  }

  // repeated int64 segments = 2;
  {
    int byte_size = _impl_._segments_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_segments(), byte_size, target);
    }
  }

  // repeated int64 row_ids = 3;
  {
    int byte_size = _impl_._row_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_row_ids(), byte_size, target);
    }
  }

  // int64 row_count = 4;
  if (this->_internal_row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_row_count(), target);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.ImportTaskState.error_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.ImportTaskState)
  return target;
}

size_t ImportTaskState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.ImportTaskState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segments = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segments_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segments_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 row_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.row_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._row_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int64 row_count = 4;
  if (this->_internal_row_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_row_count());
  }

  // .milvus.proto.common.ImportState stateCode = 1;
  if (this->_internal_statecode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_statecode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportTaskState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportTaskState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportTaskState::GetClassData() const { return &_class_data_; }


void ImportTaskState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportTaskState*>(&to_msg);
  auto& from = static_cast<const ImportTaskState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.ImportTaskState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segments_.MergeFrom(from._impl_.segments_);
  _this->_impl_.row_ids_.MergeFrom(from._impl_.row_ids_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_row_count() != 0) {
    _this->_internal_set_row_count(from._internal_row_count());
  }
  if (from._internal_statecode() != 0) {
    _this->_internal_set_statecode(from._internal_statecode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportTaskState::CopyFrom(const ImportTaskState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.ImportTaskState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportTaskState::IsInitialized() const {
  return true;
}

void ImportTaskState::InternalSwap(ImportTaskState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
  _impl_.row_ids_.InternalSwap(&other->_impl_.row_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImportTaskState, _impl_.statecode_)
      + sizeof(ImportTaskState::_impl_.statecode_)
      - PROTOBUF_FIELD_OFFSET(ImportTaskState, _impl_.row_count_)>(
          reinterpret_cast<char*>(&_impl_.row_count_),
          reinterpret_cast<char*>(&other->_impl_.row_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportTaskState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[60]);
}

// ===================================================================

class ImportTaskInfo::_Internal {
 public:
  static const ::milvus::proto::data::ImportTaskState& state(const ImportTaskInfo* msg);
};

const ::milvus::proto::data::ImportTaskState&
ImportTaskInfo::_Internal::state(const ImportTaskInfo* msg) {
  return *msg->_impl_.state_;
}
void ImportTaskInfo::clear_infos() {
  _impl_.infos_.Clear();
}
ImportTaskInfo::ImportTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.ImportTaskInfo)
}
ImportTaskInfo::ImportTaskInfo(const ImportTaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportTaskInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_names_){from._impl_.channel_names_}
    , decltype(_impl_.files_){from._impl_.files_}
    , decltype(_impl_.infos_){from._impl_.infos_}
    , decltype(_impl_.bucket_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.database_name_){}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.datanode_id_){}
    , decltype(_impl_.collection_id_){}
    , decltype(_impl_.partition_id_){}
    , decltype(_impl_.create_ts_){}
    , decltype(_impl_.start_ts_){}
    , decltype(_impl_.row_based_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket().empty()) {
    _this->_impl_.bucket_.Set(from._internal_bucket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_name().empty()) {
    _this->_impl_.collection_name_.Set(from._internal_collection_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition_name().empty()) {
    _this->_impl_.partition_name_.Set(from._internal_partition_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.database_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_database_name().empty()) {
    _this->_impl_.database_name_.Set(from._internal_database_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::milvus::proto::data::ImportTaskState(*from._impl_.state_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_based_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.row_based_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.ImportTaskInfo)
}

inline void ImportTaskInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_names_){arena}
    , decltype(_impl_.files_){arena}
    , decltype(_impl_.infos_){arena}
    , decltype(_impl_.bucket_){}
    , decltype(_impl_.collection_name_){}
    , decltype(_impl_.partition_name_){}
    , decltype(_impl_.database_name_){}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.request_id_){int64_t{0}}
    , decltype(_impl_.datanode_id_){int64_t{0}}
    , decltype(_impl_.collection_id_){int64_t{0}}
    , decltype(_impl_.partition_id_){int64_t{0}}
    , decltype(_impl_.create_ts_){int64_t{0}}
    , decltype(_impl_.start_ts_){int64_t{0}}
    , decltype(_impl_.row_based_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.collection_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.database_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImportTaskInfo::~ImportTaskInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.ImportTaskInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportTaskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_names_.~RepeatedPtrField();
  _impl_.files_.~RepeatedPtrField();
  _impl_.infos_.~RepeatedPtrField();
  _impl_.bucket_.Destroy();
  _impl_.collection_name_.Destroy();
  _impl_.partition_name_.Destroy();
  _impl_.database_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.state_;
}

void ImportTaskInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportTaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.ImportTaskInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_names_.Clear();
  _impl_.files_.Clear();
  _impl_.infos_.Clear();
  _impl_.bucket_.ClearToEmpty();
  _impl_.collection_name_.ClearToEmpty();
  _impl_.partition_name_.ClearToEmpty();
  _impl_.database_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.row_based_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.row_based_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportTaskInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 request_id = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 datanode_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.datanode_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 collection_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.collection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partition_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.partition_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string channel_names = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_channel_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.ImportTaskInfo.channel_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string bucket = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_bucket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.ImportTaskInfo.bucket"));
        } else
          goto handle_unusual;
        continue;
      // bool row_based = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.row_based_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string files = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_files();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.ImportTaskInfo.files"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 create_ts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.create_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.data.ImportTaskState state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collection_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.ImportTaskInfo.collection_name"));
        } else
          goto handle_unusual;
        continue;
      // string partition_name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.ImportTaskInfo.partition_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair infos = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 start_ts = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.start_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string database_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_database_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.ImportTaskInfo.database_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportTaskInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.ImportTaskInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 request_id = 2 [deprecated = true];
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_request_id(), target);
  }

  // int64 datanode_id = 3;
  if (this->_internal_datanode_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_datanode_id(), target);
  }

  // int64 collection_id = 4;
  if (this->_internal_collection_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_collection_id(), target);
  }

  // int64 partition_id = 5;
  if (this->_internal_partition_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_partition_id(), target);
  }

  // repeated string channel_names = 6;
  for (int i = 0, n = this->_internal_channel_names_size(); i < n; i++) {
    const auto& s = this->_internal_channel_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.ImportTaskInfo.channel_names");
    target = stream->WriteString(6, s, target);
  }

  // string bucket = 7;
  if (!this->_internal_bucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.ImportTaskInfo.bucket");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_bucket(), target);
  }

  // bool row_based = 8;
  if (this->_internal_row_based() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_row_based(), target);
  }

  // repeated string files = 9;
  for (int i = 0, n = this->_internal_files_size(); i < n; i++) {
    const auto& s = this->_internal_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.ImportTaskInfo.files");
    target = stream->WriteString(9, s, target);
  }

  // int64 create_ts = 10;
  if (this->_internal_create_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_create_ts(), target);
  }

  // .milvus.proto.data.ImportTaskState state = 11;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  // string collection_name = 12;
  if (!this->_internal_collection_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.ImportTaskInfo.collection_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_collection_name(), target);
  }

  // string partition_name = 13;
  if (!this->_internal_partition_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.ImportTaskInfo.partition_name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_partition_name(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair infos = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 start_ts = 15;
  if (this->_internal_start_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_start_ts(), target);
  }

  // string database_name = 16;
  if (!this->_internal_database_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database_name().data(), static_cast<int>(this->_internal_database_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.ImportTaskInfo.database_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_database_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.ImportTaskInfo)
  return target;
}

size_t ImportTaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.ImportTaskInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string channel_names = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.channel_names_.size());
  for (int i = 0, n = _impl_.channel_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.channel_names_.Get(i));
  }

  // repeated string files = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.files_.size());
  for (int i = 0, n = _impl_.files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.files_.Get(i));
  }

  // repeated .milvus.proto.common.KeyValuePair infos = 14;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_impl_.infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string bucket = 7;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // string collection_name = 12;
  if (!this->_internal_collection_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 13;
  if (!this->_internal_partition_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // string database_name = 16;
  if (!this->_internal_database_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database_name());
  }

  // .milvus.proto.data.ImportTaskState state = 11;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 request_id = 2 [deprecated = true];
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_request_id());
  }

  // int64 datanode_id = 3;
  if (this->_internal_datanode_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datanode_id());
  }

  // int64 collection_id = 4;
  if (this->_internal_collection_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collection_id());
  }

  // int64 partition_id = 5;
  if (this->_internal_partition_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partition_id());
  }

  // int64 create_ts = 10;
  if (this->_internal_create_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_ts());
  }

  // int64 start_ts = 15;
  if (this->_internal_start_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_ts());
  }

  // bool row_based = 8;
  if (this->_internal_row_based() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportTaskInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportTaskInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportTaskInfo::GetClassData() const { return &_class_data_; }


void ImportTaskInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportTaskInfo*>(&to_msg);
  auto& from = static_cast<const ImportTaskInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.ImportTaskInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channel_names_.MergeFrom(from._impl_.channel_names_);
  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  _this->_impl_.infos_.MergeFrom(from._impl_.infos_);
  if (!from._internal_bucket().empty()) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  if (!from._internal_collection_name().empty()) {
    _this->_internal_set_collection_name(from._internal_collection_name());
  }
  if (!from._internal_partition_name().empty()) {
    _this->_internal_set_partition_name(from._internal_partition_name());
  }
  if (!from._internal_database_name().empty()) {
    _this->_internal_set_database_name(from._internal_database_name());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::milvus::proto::data::ImportTaskState::MergeFrom(
        from._internal_state());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_datanode_id() != 0) {
    _this->_internal_set_datanode_id(from._internal_datanode_id());
  }
  if (from._internal_collection_id() != 0) {
    _this->_internal_set_collection_id(from._internal_collection_id());
  }
  if (from._internal_partition_id() != 0) {
    _this->_internal_set_partition_id(from._internal_partition_id());
  }
  if (from._internal_create_ts() != 0) {
    _this->_internal_set_create_ts(from._internal_create_ts());
  }
  if (from._internal_start_ts() != 0) {
    _this->_internal_set_start_ts(from._internal_start_ts());
  }
  if (from._internal_row_based() != 0) {
    _this->_internal_set_row_based(from._internal_row_based());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportTaskInfo::CopyFrom(const ImportTaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.ImportTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportTaskInfo::IsInitialized() const {
  return true;
}

void ImportTaskInfo::InternalSwap(ImportTaskInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channel_names_.InternalSwap(&other->_impl_.channel_names_);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_, lhs_arena,
      &other->_impl_.bucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collection_name_, lhs_arena,
      &other->_impl_.collection_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_name_, lhs_arena,
      &other->_impl_.partition_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_name_, lhs_arena,
      &other->_impl_.database_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImportTaskInfo, _impl_.row_based_)
      + sizeof(ImportTaskInfo::_impl_.row_based_)
      - PROTOBUF_FIELD_OFFSET(ImportTaskInfo, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportTaskInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[61]);
}

// ===================================================================

class ImportTaskResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ImportTaskResponse* msg);
};

const ::milvus::proto::common::Status&
ImportTaskResponse::_Internal::status(const ImportTaskResponse* msg) {
  return *msg->_impl_.status_;
}
void ImportTaskResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ImportTaskResponse::ImportTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.ImportTaskResponse)
}
ImportTaskResponse::ImportTaskResponse(const ImportTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportTaskResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.datanode_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  _this->_impl_.datanode_id_ = from._impl_.datanode_id_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.ImportTaskResponse)
}

inline void ImportTaskResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.datanode_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImportTaskResponse::~ImportTaskResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.ImportTaskResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportTaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ImportTaskResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.ImportTaskResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.datanode_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportTaskResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 datanode_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.datanode_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportTaskResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.ImportTaskResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int64 datanode_id = 2;
  if (this->_internal_datanode_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_datanode_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.ImportTaskResponse)
  return target;
}

size_t ImportTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.ImportTaskResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 datanode_id = 2;
  if (this->_internal_datanode_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datanode_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportTaskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportTaskResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportTaskResponse::GetClassData() const { return &_class_data_; }


void ImportTaskResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportTaskResponse*>(&to_msg);
  auto& from = static_cast<const ImportTaskResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.ImportTaskResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_datanode_id() != 0) {
    _this->_internal_set_datanode_id(from._internal_datanode_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportTaskResponse::CopyFrom(const ImportTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.ImportTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportTaskResponse::IsInitialized() const {
  return true;
}

void ImportTaskResponse::InternalSwap(ImportTaskResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImportTaskResponse, _impl_.datanode_id_)
      + sizeof(ImportTaskResponse::_impl_.datanode_id_)
      - PROTOBUF_FIELD_OFFSET(ImportTaskResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportTaskResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[62]);
}

// ===================================================================

class ImportTaskRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ImportTaskRequest* msg);
  static const ::milvus::proto::data::ImportTask& import_task(const ImportTaskRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ImportTaskRequest::_Internal::base(const ImportTaskRequest* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::data::ImportTask&
ImportTaskRequest::_Internal::import_task(const ImportTaskRequest* msg) {
  return *msg->_impl_.import_task_;
}
void ImportTaskRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ImportTaskRequest::ImportTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.ImportTaskRequest)
}
ImportTaskRequest::ImportTaskRequest(const ImportTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportTaskRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.working_nodes_){from._impl_.working_nodes_}
    , /*decltype(_impl_._working_nodes_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.import_task_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_import_task()) {
    _this->_impl_.import_task_ = new ::milvus::proto::data::ImportTask(*from._impl_.import_task_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.ImportTaskRequest)
}

inline void ImportTaskRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.working_nodes_){arena}
    , /*decltype(_impl_._working_nodes_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.import_task_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImportTaskRequest::~ImportTaskRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.ImportTaskRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.working_nodes_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.import_task_;
}

void ImportTaskRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.ImportTaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.working_nodes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.import_task_ != nullptr) {
    delete _impl_.import_task_;
  }
  _impl_.import_task_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportTaskRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.data.ImportTask import_task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_import_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 working_nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_working_nodes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_working_nodes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportTaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.ImportTaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.data.ImportTask import_task = 2;
  if (this->_internal_has_import_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::import_task(this),
        _Internal::import_task(this).GetCachedSize(), target, stream);
  }

  // repeated int64 working_nodes = 3;
  {
    int byte_size = _impl_._working_nodes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_working_nodes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.ImportTaskRequest)
  return target;
}

size_t ImportTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.ImportTaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 working_nodes = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.working_nodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._working_nodes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.data.ImportTask import_task = 2;
  if (this->_internal_has_import_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.import_task_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportTaskRequest::GetClassData() const { return &_class_data_; }


void ImportTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportTaskRequest*>(&to_msg);
  auto& from = static_cast<const ImportTaskRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.ImportTaskRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.working_nodes_.MergeFrom(from._impl_.working_nodes_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_import_task()) {
    _this->_internal_mutable_import_task()->::milvus::proto::data::ImportTask::MergeFrom(
        from._internal_import_task());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportTaskRequest::CopyFrom(const ImportTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.ImportTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportTaskRequest::IsInitialized() const {
  return true;
}

void ImportTaskRequest::InternalSwap(ImportTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.working_nodes_.InternalSwap(&other->_impl_.working_nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImportTaskRequest, _impl_.import_task_)
      + sizeof(ImportTaskRequest::_impl_.import_task_)
      - PROTOBUF_FIELD_OFFSET(ImportTaskRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportTaskRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[63]);
}

// ===================================================================

class UpdateSegmentStatisticsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const UpdateSegmentStatisticsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
UpdateSegmentStatisticsRequest::_Internal::base(const UpdateSegmentStatisticsRequest* msg) {
  return *msg->_impl_.base_;
}
void UpdateSegmentStatisticsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void UpdateSegmentStatisticsRequest::clear_stats() {
  _impl_.stats_.Clear();
}
UpdateSegmentStatisticsRequest::UpdateSegmentStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.UpdateSegmentStatisticsRequest)
}
UpdateSegmentStatisticsRequest::UpdateSegmentStatisticsRequest(const UpdateSegmentStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateSegmentStatisticsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.UpdateSegmentStatisticsRequest)
}

inline void UpdateSegmentStatisticsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateSegmentStatisticsRequest::~UpdateSegmentStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.UpdateSegmentStatisticsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateSegmentStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void UpdateSegmentStatisticsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateSegmentStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.UpdateSegmentStatisticsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSegmentStatisticsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.SegmentStats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateSegmentStatisticsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.UpdateSegmentStatisticsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.common.SegmentStats stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.UpdateSegmentStatisticsRequest)
  return target;
}

size_t UpdateSegmentStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.UpdateSegmentStatisticsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.SegmentStats stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateSegmentStatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateSegmentStatisticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateSegmentStatisticsRequest::GetClassData() const { return &_class_data_; }


void UpdateSegmentStatisticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateSegmentStatisticsRequest*>(&to_msg);
  auto& from = static_cast<const UpdateSegmentStatisticsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.UpdateSegmentStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateSegmentStatisticsRequest::CopyFrom(const UpdateSegmentStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.UpdateSegmentStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSegmentStatisticsRequest::IsInitialized() const {
  return true;
}

void UpdateSegmentStatisticsRequest::InternalSwap(UpdateSegmentStatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSegmentStatisticsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[64]);
}

// ===================================================================

class UpdateChannelCheckpointRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const UpdateChannelCheckpointRequest* msg);
  static const ::milvus::proto::msg::MsgPosition& position(const UpdateChannelCheckpointRequest* msg);
};

const ::milvus::proto::common::MsgBase&
UpdateChannelCheckpointRequest::_Internal::base(const UpdateChannelCheckpointRequest* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::msg::MsgPosition&
UpdateChannelCheckpointRequest::_Internal::position(const UpdateChannelCheckpointRequest* msg) {
  return *msg->_impl_.position_;
}
void UpdateChannelCheckpointRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void UpdateChannelCheckpointRequest::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
UpdateChannelCheckpointRequest::UpdateChannelCheckpointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.UpdateChannelCheckpointRequest)
}
UpdateChannelCheckpointRequest::UpdateChannelCheckpointRequest(const UpdateChannelCheckpointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateChannelCheckpointRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vchannel_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vchannel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vchannel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vchannel().empty()) {
    _this->_impl_.vchannel_.Set(from._internal_vchannel(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::milvus::proto::msg::MsgPosition(*from._impl_.position_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.UpdateChannelCheckpointRequest)
}

inline void UpdateChannelCheckpointRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vchannel_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vchannel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vchannel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateChannelCheckpointRequest::~UpdateChannelCheckpointRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.UpdateChannelCheckpointRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateChannelCheckpointRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vchannel_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.position_;
}

void UpdateChannelCheckpointRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateChannelCheckpointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.UpdateChannelCheckpointRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vchannel_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateChannelCheckpointRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vChannel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vchannel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.UpdateChannelCheckpointRequest.vChannel"));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.msg.MsgPosition position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateChannelCheckpointRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.UpdateChannelCheckpointRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // string vChannel = 2;
  if (!this->_internal_vchannel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vchannel().data(), static_cast<int>(this->_internal_vchannel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.UpdateChannelCheckpointRequest.vChannel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vchannel(), target);
  }

  // .milvus.proto.msg.MsgPosition position = 3;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.UpdateChannelCheckpointRequest)
  return target;
}

size_t UpdateChannelCheckpointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.UpdateChannelCheckpointRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vChannel = 2;
  if (!this->_internal_vchannel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vchannel());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.msg.MsgPosition position = 3;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateChannelCheckpointRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateChannelCheckpointRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateChannelCheckpointRequest::GetClassData() const { return &_class_data_; }


void UpdateChannelCheckpointRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateChannelCheckpointRequest*>(&to_msg);
  auto& from = static_cast<const UpdateChannelCheckpointRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.UpdateChannelCheckpointRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vchannel().empty()) {
    _this->_internal_set_vchannel(from._internal_vchannel());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::milvus::proto::msg::MsgPosition::MergeFrom(
        from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateChannelCheckpointRequest::CopyFrom(const UpdateChannelCheckpointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.UpdateChannelCheckpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChannelCheckpointRequest::IsInitialized() const {
  return true;
}

void UpdateChannelCheckpointRequest::InternalSwap(UpdateChannelCheckpointRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vchannel_, lhs_arena,
      &other->_impl_.vchannel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateChannelCheckpointRequest, _impl_.position_)
      + sizeof(UpdateChannelCheckpointRequest::_impl_.position_)
      - PROTOBUF_FIELD_OFFSET(UpdateChannelCheckpointRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateChannelCheckpointRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[65]);
}

// ===================================================================

class ResendSegmentStatsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ResendSegmentStatsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ResendSegmentStatsRequest::_Internal::base(const ResendSegmentStatsRequest* msg) {
  return *msg->_impl_.base_;
}
void ResendSegmentStatsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
ResendSegmentStatsRequest::ResendSegmentStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.ResendSegmentStatsRequest)
}
ResendSegmentStatsRequest::ResendSegmentStatsRequest(const ResendSegmentStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResendSegmentStatsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.ResendSegmentStatsRequest)
}

inline void ResendSegmentStatsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResendSegmentStatsRequest::~ResendSegmentStatsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.ResendSegmentStatsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResendSegmentStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ResendSegmentStatsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResendSegmentStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.ResendSegmentStatsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResendSegmentStatsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResendSegmentStatsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.ResendSegmentStatsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.ResendSegmentStatsRequest)
  return target;
}

size_t ResendSegmentStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.ResendSegmentStatsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResendSegmentStatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResendSegmentStatsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResendSegmentStatsRequest::GetClassData() const { return &_class_data_; }


void ResendSegmentStatsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResendSegmentStatsRequest*>(&to_msg);
  auto& from = static_cast<const ResendSegmentStatsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.ResendSegmentStatsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResendSegmentStatsRequest::CopyFrom(const ResendSegmentStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.ResendSegmentStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResendSegmentStatsRequest::IsInitialized() const {
  return true;
}

void ResendSegmentStatsRequest::InternalSwap(ResendSegmentStatsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResendSegmentStatsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[66]);
}

// ===================================================================

class ResendSegmentStatsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ResendSegmentStatsResponse* msg);
};

const ::milvus::proto::common::Status&
ResendSegmentStatsResponse::_Internal::status(const ResendSegmentStatsResponse* msg) {
  return *msg->_impl_.status_;
}
void ResendSegmentStatsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ResendSegmentStatsResponse::ResendSegmentStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.ResendSegmentStatsResponse)
}
ResendSegmentStatsResponse::ResendSegmentStatsResponse(const ResendSegmentStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResendSegmentStatsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seg_resent_){from._impl_.seg_resent_}
    , /*decltype(_impl_._seg_resent_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.ResendSegmentStatsResponse)
}

inline void ResendSegmentStatsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seg_resent_){arena}
    , /*decltype(_impl_._seg_resent_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResendSegmentStatsResponse::~ResendSegmentStatsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.ResendSegmentStatsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResendSegmentStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.seg_resent_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ResendSegmentStatsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResendSegmentStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.ResendSegmentStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seg_resent_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResendSegmentStatsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 seg_resent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_seg_resent(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_seg_resent(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResendSegmentStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.ResendSegmentStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated int64 seg_resent = 2;
  {
    int byte_size = _impl_._seg_resent_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_seg_resent(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.ResendSegmentStatsResponse)
  return target;
}

size_t ResendSegmentStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.ResendSegmentStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 seg_resent = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.seg_resent_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._seg_resent_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResendSegmentStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResendSegmentStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResendSegmentStatsResponse::GetClassData() const { return &_class_data_; }


void ResendSegmentStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResendSegmentStatsResponse*>(&to_msg);
  auto& from = static_cast<const ResendSegmentStatsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.ResendSegmentStatsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.seg_resent_.MergeFrom(from._impl_.seg_resent_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResendSegmentStatsResponse::CopyFrom(const ResendSegmentStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.ResendSegmentStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResendSegmentStatsResponse::IsInitialized() const {
  return true;
}

void ResendSegmentStatsResponse::InternalSwap(ResendSegmentStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.seg_resent_.InternalSwap(&other->_impl_.seg_resent_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResendSegmentStatsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[67]);
}

// ===================================================================

class AddImportSegmentRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const AddImportSegmentRequest* msg);
};

const ::milvus::proto::common::MsgBase&
AddImportSegmentRequest::_Internal::base(const AddImportSegmentRequest* msg) {
  return *msg->_impl_.base_;
}
void AddImportSegmentRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
AddImportSegmentRequest::AddImportSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.AddImportSegmentRequest)
}
AddImportSegmentRequest::AddImportSegmentRequest(const AddImportSegmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddImportSegmentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_log_){from._impl_.stats_log_}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.segment_id_){}
    , decltype(_impl_.collection_id_){}
    , decltype(_impl_.partition_id_){}
    , decltype(_impl_.row_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_name().empty()) {
    _this->_impl_.channel_name_.Set(from._internal_channel_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  ::memcpy(&_impl_.segment_id_, &from._impl_.segment_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_num_) -
    reinterpret_cast<char*>(&_impl_.segment_id_)) + sizeof(_impl_.row_num_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.AddImportSegmentRequest)
}

inline void AddImportSegmentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_log_){arena}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.segment_id_){int64_t{0}}
    , decltype(_impl_.collection_id_){int64_t{0}}
    , decltype(_impl_.partition_id_){int64_t{0}}
    , decltype(_impl_.row_num_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddImportSegmentRequest::~AddImportSegmentRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.AddImportSegmentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddImportSegmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_log_.~RepeatedPtrField();
  _impl_.channel_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void AddImportSegmentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddImportSegmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.AddImportSegmentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_log_.Clear();
  _impl_.channel_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.segment_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.row_num_) -
      reinterpret_cast<char*>(&_impl_.segment_id_)) + sizeof(_impl_.row_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddImportSegmentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.segment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string channel_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.AddImportSegmentRequest.channel_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 collection_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.collection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partition_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.partition_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 row_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.row_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.data.FieldBinlog stats_log = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddImportSegmentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.AddImportSegmentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 segment_id = 2;
  if (this->_internal_segment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_segment_id(), target);
  }

  // string channel_name = 3;
  if (!this->_internal_channel_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.AddImportSegmentRequest.channel_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_channel_name(), target);
  }

  // int64 collection_id = 4;
  if (this->_internal_collection_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_collection_id(), target);
  }

  // int64 partition_id = 5;
  if (this->_internal_partition_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_partition_id(), target);
  }

  // int64 row_num = 6;
  if (this->_internal_row_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_row_num(), target);
  }

  // repeated .milvus.proto.data.FieldBinlog stats_log = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_log_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats_log(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.AddImportSegmentRequest)
  return target;
}

size_t AddImportSegmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.AddImportSegmentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.data.FieldBinlog stats_log = 7;
  total_size += 1UL * this->_internal_stats_log_size();
  for (const auto& msg : this->_impl_.stats_log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string channel_name = 3;
  if (!this->_internal_channel_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // int64 segment_id = 2;
  if (this->_internal_segment_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segment_id());
  }

  // int64 collection_id = 4;
  if (this->_internal_collection_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collection_id());
  }

  // int64 partition_id = 5;
  if (this->_internal_partition_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partition_id());
  }

  // int64 row_num = 6;
  if (this->_internal_row_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_row_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddImportSegmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddImportSegmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddImportSegmentRequest::GetClassData() const { return &_class_data_; }


void AddImportSegmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddImportSegmentRequest*>(&to_msg);
  auto& from = static_cast<const AddImportSegmentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.AddImportSegmentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_log_.MergeFrom(from._impl_.stats_log_);
  if (!from._internal_channel_name().empty()) {
    _this->_internal_set_channel_name(from._internal_channel_name());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_segment_id() != 0) {
    _this->_internal_set_segment_id(from._internal_segment_id());
  }
  if (from._internal_collection_id() != 0) {
    _this->_internal_set_collection_id(from._internal_collection_id());
  }
  if (from._internal_partition_id() != 0) {
    _this->_internal_set_partition_id(from._internal_partition_id());
  }
  if (from._internal_row_num() != 0) {
    _this->_internal_set_row_num(from._internal_row_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddImportSegmentRequest::CopyFrom(const AddImportSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.AddImportSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddImportSegmentRequest::IsInitialized() const {
  return true;
}

void AddImportSegmentRequest::InternalSwap(AddImportSegmentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_log_.InternalSwap(&other->_impl_.stats_log_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddImportSegmentRequest, _impl_.row_num_)
      + sizeof(AddImportSegmentRequest::_impl_.row_num_)
      - PROTOBUF_FIELD_OFFSET(AddImportSegmentRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddImportSegmentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[68]);
}

// ===================================================================

class AddImportSegmentResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const AddImportSegmentResponse* msg);
};

const ::milvus::proto::common::Status&
AddImportSegmentResponse::_Internal::status(const AddImportSegmentResponse* msg) {
  return *msg->_impl_.status_;
}
void AddImportSegmentResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
AddImportSegmentResponse::AddImportSegmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.AddImportSegmentResponse)
}
AddImportSegmentResponse::AddImportSegmentResponse(const AddImportSegmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddImportSegmentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_pos_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_pos_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_pos_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_pos().empty()) {
    _this->_impl_.channel_pos_.Set(from._internal_channel_pos(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.AddImportSegmentResponse)
}

inline void AddImportSegmentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_pos_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_pos_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_pos_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddImportSegmentResponse::~AddImportSegmentResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.AddImportSegmentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddImportSegmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_pos_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void AddImportSegmentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddImportSegmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.AddImportSegmentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_pos_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddImportSegmentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes channel_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_pos();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddImportSegmentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.AddImportSegmentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // bytes channel_pos = 2;
  if (!this->_internal_channel_pos().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_channel_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.AddImportSegmentResponse)
  return target;
}

size_t AddImportSegmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.AddImportSegmentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes channel_pos = 2;
  if (!this->_internal_channel_pos().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_channel_pos());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddImportSegmentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddImportSegmentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddImportSegmentResponse::GetClassData() const { return &_class_data_; }


void AddImportSegmentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddImportSegmentResponse*>(&to_msg);
  auto& from = static_cast<const AddImportSegmentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.AddImportSegmentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_pos().empty()) {
    _this->_internal_set_channel_pos(from._internal_channel_pos());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddImportSegmentResponse::CopyFrom(const AddImportSegmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.AddImportSegmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddImportSegmentResponse::IsInitialized() const {
  return true;
}

void AddImportSegmentResponse::InternalSwap(AddImportSegmentResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_pos_, lhs_arena,
      &other->_impl_.channel_pos_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddImportSegmentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[69]);
}

// ===================================================================

class SaveImportSegmentRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SaveImportSegmentRequest* msg);
  static const ::milvus::proto::data::SaveBinlogPathsRequest& save_binlog_path_req(const SaveImportSegmentRequest* msg);
};

const ::milvus::proto::common::MsgBase&
SaveImportSegmentRequest::_Internal::base(const SaveImportSegmentRequest* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::data::SaveBinlogPathsRequest&
SaveImportSegmentRequest::_Internal::save_binlog_path_req(const SaveImportSegmentRequest* msg) {
  return *msg->_impl_.save_binlog_path_req_;
}
void SaveImportSegmentRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
SaveImportSegmentRequest::SaveImportSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SaveImportSegmentRequest)
}
SaveImportSegmentRequest::SaveImportSegmentRequest(const SaveImportSegmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SaveImportSegmentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_name_){}
    , decltype(_impl_.dml_position_id_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.save_binlog_path_req_){nullptr}
    , decltype(_impl_.segment_id_){}
    , decltype(_impl_.collection_id_){}
    , decltype(_impl_.partition_id_){}
    , decltype(_impl_.row_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_name().empty()) {
    _this->_impl_.channel_name_.Set(from._internal_channel_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dml_position_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dml_position_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dml_position_id().empty()) {
    _this->_impl_.dml_position_id_.Set(from._internal_dml_position_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_save_binlog_path_req()) {
    _this->_impl_.save_binlog_path_req_ = new ::milvus::proto::data::SaveBinlogPathsRequest(*from._impl_.save_binlog_path_req_);
  }
  ::memcpy(&_impl_.segment_id_, &from._impl_.segment_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_num_) -
    reinterpret_cast<char*>(&_impl_.segment_id_)) + sizeof(_impl_.row_num_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SaveImportSegmentRequest)
}

inline void SaveImportSegmentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_name_){}
    , decltype(_impl_.dml_position_id_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.save_binlog_path_req_){nullptr}
    , decltype(_impl_.segment_id_){int64_t{0}}
    , decltype(_impl_.collection_id_){int64_t{0}}
    , decltype(_impl_.partition_id_){int64_t{0}}
    , decltype(_impl_.row_num_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dml_position_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dml_position_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SaveImportSegmentRequest::~SaveImportSegmentRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SaveImportSegmentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SaveImportSegmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_name_.Destroy();
  _impl_.dml_position_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.save_binlog_path_req_;
}

void SaveImportSegmentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SaveImportSegmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SaveImportSegmentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_name_.ClearToEmpty();
  _impl_.dml_position_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.save_binlog_path_req_ != nullptr) {
    delete _impl_.save_binlog_path_req_;
  }
  _impl_.save_binlog_path_req_ = nullptr;
  ::memset(&_impl_.segment_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.row_num_) -
      reinterpret_cast<char*>(&_impl_.segment_id_)) + sizeof(_impl_.row_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveImportSegmentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.segment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string channel_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.data.SaveImportSegmentRequest.channel_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 collection_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.collection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partition_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.partition_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 row_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.row_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.data.SaveBinlogPathsRequest save_binlog_path_req = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_binlog_path_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes dml_position_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_dml_position_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaveImportSegmentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SaveImportSegmentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // int64 segment_id = 2;
  if (this->_internal_segment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_segment_id(), target);
  }

  // string channel_name = 3;
  if (!this->_internal_channel_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.data.SaveImportSegmentRequest.channel_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_channel_name(), target);
  }

  // int64 collection_id = 4;
  if (this->_internal_collection_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_collection_id(), target);
  }

  // int64 partition_id = 5;
  if (this->_internal_partition_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_partition_id(), target);
  }

  // int64 row_num = 6;
  if (this->_internal_row_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_row_num(), target);
  }

  // .milvus.proto.data.SaveBinlogPathsRequest save_binlog_path_req = 7;
  if (this->_internal_has_save_binlog_path_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::save_binlog_path_req(this),
        _Internal::save_binlog_path_req(this).GetCachedSize(), target, stream);
  }

  // bytes dml_position_id = 8;
  if (!this->_internal_dml_position_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_dml_position_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SaveImportSegmentRequest)
  return target;
}

size_t SaveImportSegmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SaveImportSegmentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_name = 3;
  if (!this->_internal_channel_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_name());
  }

  // bytes dml_position_id = 8;
  if (!this->_internal_dml_position_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dml_position_id());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.data.SaveBinlogPathsRequest save_binlog_path_req = 7;
  if (this->_internal_has_save_binlog_path_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.save_binlog_path_req_);
  }

  // int64 segment_id = 2;
  if (this->_internal_segment_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segment_id());
  }

  // int64 collection_id = 4;
  if (this->_internal_collection_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collection_id());
  }

  // int64 partition_id = 5;
  if (this->_internal_partition_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partition_id());
  }

  // int64 row_num = 6;
  if (this->_internal_row_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_row_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveImportSegmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SaveImportSegmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveImportSegmentRequest::GetClassData() const { return &_class_data_; }


void SaveImportSegmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SaveImportSegmentRequest*>(&to_msg);
  auto& from = static_cast<const SaveImportSegmentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SaveImportSegmentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_name().empty()) {
    _this->_internal_set_channel_name(from._internal_channel_name());
  }
  if (!from._internal_dml_position_id().empty()) {
    _this->_internal_set_dml_position_id(from._internal_dml_position_id());
  }
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_save_binlog_path_req()) {
    _this->_internal_mutable_save_binlog_path_req()->::milvus::proto::data::SaveBinlogPathsRequest::MergeFrom(
        from._internal_save_binlog_path_req());
  }
  if (from._internal_segment_id() != 0) {
    _this->_internal_set_segment_id(from._internal_segment_id());
  }
  if (from._internal_collection_id() != 0) {
    _this->_internal_set_collection_id(from._internal_collection_id());
  }
  if (from._internal_partition_id() != 0) {
    _this->_internal_set_partition_id(from._internal_partition_id());
  }
  if (from._internal_row_num() != 0) {
    _this->_internal_set_row_num(from._internal_row_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveImportSegmentRequest::CopyFrom(const SaveImportSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SaveImportSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveImportSegmentRequest::IsInitialized() const {
  return true;
}

void SaveImportSegmentRequest::InternalSwap(SaveImportSegmentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dml_position_id_, lhs_arena,
      &other->_impl_.dml_position_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaveImportSegmentRequest, _impl_.row_num_)
      + sizeof(SaveImportSegmentRequest::_impl_.row_num_)
      - PROTOBUF_FIELD_OFFSET(SaveImportSegmentRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveImportSegmentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[70]);
}

// ===================================================================

class UnsetIsImportingStateRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const UnsetIsImportingStateRequest* msg);
};

const ::milvus::proto::common::MsgBase&
UnsetIsImportingStateRequest::_Internal::base(const UnsetIsImportingStateRequest* msg) {
  return *msg->_impl_.base_;
}
void UnsetIsImportingStateRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
UnsetIsImportingStateRequest::UnsetIsImportingStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.UnsetIsImportingStateRequest)
}
UnsetIsImportingStateRequest::UnsetIsImportingStateRequest(const UnsetIsImportingStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsetIsImportingStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segment_ids_){from._impl_.segment_ids_}
    , /*decltype(_impl_._segment_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.UnsetIsImportingStateRequest)
}

inline void UnsetIsImportingStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segment_ids_){arena}
    , /*decltype(_impl_._segment_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsetIsImportingStateRequest::~UnsetIsImportingStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.UnsetIsImportingStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsetIsImportingStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segment_ids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void UnsetIsImportingStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsetIsImportingStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.UnsetIsImportingStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segment_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetIsImportingStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segment_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segment_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_segment_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsetIsImportingStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.UnsetIsImportingStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // repeated int64 segment_ids = 2;
  {
    int byte_size = _impl_._segment_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_segment_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.UnsetIsImportingStateRequest)
  return target;
}

size_t UnsetIsImportingStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.UnsetIsImportingStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segment_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segment_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segment_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsetIsImportingStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsetIsImportingStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsetIsImportingStateRequest::GetClassData() const { return &_class_data_; }


void UnsetIsImportingStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsetIsImportingStateRequest*>(&to_msg);
  auto& from = static_cast<const UnsetIsImportingStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.UnsetIsImportingStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segment_ids_.MergeFrom(from._impl_.segment_ids_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsetIsImportingStateRequest::CopyFrom(const UnsetIsImportingStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.UnsetIsImportingStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetIsImportingStateRequest::IsInitialized() const {
  return true;
}

void UnsetIsImportingStateRequest::InternalSwap(UnsetIsImportingStateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segment_ids_.InternalSwap(&other->_impl_.segment_ids_);
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetIsImportingStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[71]);
}

// ===================================================================

class MarkSegmentsDroppedRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const MarkSegmentsDroppedRequest* msg);
};

const ::milvus::proto::common::MsgBase&
MarkSegmentsDroppedRequest::_Internal::base(const MarkSegmentsDroppedRequest* msg) {
  return *msg->_impl_.base_;
}
void MarkSegmentsDroppedRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
MarkSegmentsDroppedRequest::MarkSegmentsDroppedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.MarkSegmentsDroppedRequest)
}
MarkSegmentsDroppedRequest::MarkSegmentsDroppedRequest(const MarkSegmentsDroppedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarkSegmentsDroppedRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segment_ids_){from._impl_.segment_ids_}
    , /*decltype(_impl_._segment_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.MarkSegmentsDroppedRequest)
}

inline void MarkSegmentsDroppedRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segment_ids_){arena}
    , /*decltype(_impl_._segment_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MarkSegmentsDroppedRequest::~MarkSegmentsDroppedRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.MarkSegmentsDroppedRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarkSegmentsDroppedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segment_ids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void MarkSegmentsDroppedRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarkSegmentsDroppedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.MarkSegmentsDroppedRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segment_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarkSegmentsDroppedRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segment_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segment_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_segment_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarkSegmentsDroppedRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.MarkSegmentsDroppedRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // repeated int64 segment_ids = 2;
  {
    int byte_size = _impl_._segment_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_segment_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.MarkSegmentsDroppedRequest)
  return target;
}

size_t MarkSegmentsDroppedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.MarkSegmentsDroppedRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segment_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segment_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segment_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarkSegmentsDroppedRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarkSegmentsDroppedRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarkSegmentsDroppedRequest::GetClassData() const { return &_class_data_; }


void MarkSegmentsDroppedRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarkSegmentsDroppedRequest*>(&to_msg);
  auto& from = static_cast<const MarkSegmentsDroppedRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.MarkSegmentsDroppedRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segment_ids_.MergeFrom(from._impl_.segment_ids_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarkSegmentsDroppedRequest::CopyFrom(const MarkSegmentsDroppedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.MarkSegmentsDroppedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkSegmentsDroppedRequest::IsInitialized() const {
  return true;
}

void MarkSegmentsDroppedRequest::InternalSwap(MarkSegmentsDroppedRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segment_ids_.InternalSwap(&other->_impl_.segment_ids_);
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkSegmentsDroppedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[72]);
}

// ===================================================================

class SegmentReferenceLock::_Internal {
 public:
};

SegmentReferenceLock::SegmentReferenceLock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.SegmentReferenceLock)
}
SegmentReferenceLock::SegmentReferenceLock(const SegmentReferenceLock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentReferenceLock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){from._impl_.segmentids_}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.taskid_){}
    , decltype(_impl_.nodeid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.taskid_, &from._impl_.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nodeid_) -
    reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.nodeid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.SegmentReferenceLock)
}

inline void SegmentReferenceLock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){arena}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.taskid_){int64_t{0}}
    , decltype(_impl_.nodeid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SegmentReferenceLock::~SegmentReferenceLock() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.SegmentReferenceLock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentReferenceLock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentids_.~RepeatedField();
}

void SegmentReferenceLock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentReferenceLock::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.SegmentReferenceLock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segmentids_.Clear();
  ::memset(&_impl_.taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nodeid_) -
      reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.nodeid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentReferenceLock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 taskID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 nodeID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segmentIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentReferenceLock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.SegmentReferenceLock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 taskID = 1;
  if (this->_internal_taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_taskid(), target);
  }

  // int64 nodeID = 2;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_nodeid(), target);
  }

  // repeated int64 segmentIDs = 3;
  {
    int byte_size = _impl_._segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_segmentids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.SegmentReferenceLock)
  return target;
}

size_t SegmentReferenceLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.SegmentReferenceLock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 taskID = 1;
  if (this->_internal_taskid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_taskid());
  }

  // int64 nodeID = 2;
  if (this->_internal_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nodeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentReferenceLock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentReferenceLock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentReferenceLock::GetClassData() const { return &_class_data_; }


void SegmentReferenceLock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentReferenceLock*>(&to_msg);
  auto& from = static_cast<const SegmentReferenceLock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.SegmentReferenceLock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segmentids_.MergeFrom(from._impl_.segmentids_);
  if (from._internal_taskid() != 0) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_nodeid() != 0) {
    _this->_internal_set_nodeid(from._internal_nodeid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentReferenceLock::CopyFrom(const SegmentReferenceLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.SegmentReferenceLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentReferenceLock::IsInitialized() const {
  return true;
}

void SegmentReferenceLock::InternalSwap(SegmentReferenceLock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentids_.InternalSwap(&other->_impl_.segmentids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentReferenceLock, _impl_.nodeid_)
      + sizeof(SegmentReferenceLock::_impl_.nodeid_)
      - PROTOBUF_FIELD_OFFSET(SegmentReferenceLock, _impl_.taskid_)>(
          reinterpret_cast<char*>(&_impl_.taskid_),
          reinterpret_cast<char*>(&other->_impl_.taskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentReferenceLock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[73]);
}

// ===================================================================

class AlterCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::schema::CollectionSchema& schema(const AlterCollectionRequest* msg);
};

const ::milvus::proto::schema::CollectionSchema&
AlterCollectionRequest::_Internal::schema(const AlterCollectionRequest* msg) {
  return *msg->_impl_.schema_;
}
void AlterCollectionRequest::clear_schema() {
  if (GetArenaForAllocation() == nullptr && _impl_.schema_ != nullptr) {
    delete _impl_.schema_;
  }
  _impl_.schema_ = nullptr;
}
void AlterCollectionRequest::clear_start_positions() {
  _impl_.start_positions_.Clear();
}
void AlterCollectionRequest::clear_properties() {
  _impl_.properties_.Clear();
}
AlterCollectionRequest::AlterCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.AlterCollectionRequest)
}
AlterCollectionRequest::AlterCollectionRequest(const AlterCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlterCollectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partitionids_){from._impl_.partitionids_}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.start_positions_){from._impl_.start_positions_}
    , decltype(_impl_.properties_){from._impl_.properties_}
    , decltype(_impl_.schema_){nullptr}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_schema()) {
    _this->_impl_.schema_ = new ::milvus::proto::schema::CollectionSchema(*from._impl_.schema_);
  }
  _this->_impl_.collectionid_ = from._impl_.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.AlterCollectionRequest)
}

inline void AlterCollectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partitionids_){arena}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.start_positions_){arena}
    , decltype(_impl_.properties_){arena}
    , decltype(_impl_.schema_){nullptr}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AlterCollectionRequest::~AlterCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.AlterCollectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlterCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partitionids_.~RepeatedField();
  _impl_.start_positions_.~RepeatedPtrField();
  _impl_.properties_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.schema_;
}

void AlterCollectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlterCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.AlterCollectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partitionids_.Clear();
  _impl_.start_positions_.Clear();
  _impl_.properties_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.schema_ != nullptr) {
    delete _impl_.schema_;
  }
  _impl_.schema_ = nullptr;
  _impl_.collectionid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlterCollectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.schema.CollectionSchema schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 partitionIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_partitionids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_partitionids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyDataPair start_positions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_start_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlterCollectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.AlterCollectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // .milvus.proto.schema.CollectionSchema schema = 2;
  if (this->_internal_has_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::schema(this),
        _Internal::schema(this).GetCachedSize(), target, stream);
  }

  // repeated int64 partitionIDs = 3;
  {
    int byte_size = _impl_._partitionids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_partitionids(), byte_size, target);
    }
  }

  // repeated .milvus.proto.common.KeyDataPair start_positions = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_start_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_start_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair properties = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_properties_size()); i < n; i++) {
    const auto& repfield = this->_internal_properties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.AlterCollectionRequest)
  return target;
}

size_t AlterCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.AlterCollectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 partitionIDs = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.partitionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._partitionids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .milvus.proto.common.KeyDataPair start_positions = 4;
  total_size += 1UL * this->_internal_start_positions_size();
  for (const auto& msg : this->_impl_.start_positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.common.KeyValuePair properties = 5;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->_impl_.properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.schema.CollectionSchema schema = 2;
  if (this->_internal_has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schema_);
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlterCollectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlterCollectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlterCollectionRequest::GetClassData() const { return &_class_data_; }


void AlterCollectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlterCollectionRequest*>(&to_msg);
  auto& from = static_cast<const AlterCollectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.AlterCollectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partitionids_.MergeFrom(from._impl_.partitionids_);
  _this->_impl_.start_positions_.MergeFrom(from._impl_.start_positions_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  if (from._internal_has_schema()) {
    _this->_internal_mutable_schema()->::milvus::proto::schema::CollectionSchema::MergeFrom(
        from._internal_schema());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlterCollectionRequest::CopyFrom(const AlterCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.AlterCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterCollectionRequest::IsInitialized() const {
  return true;
}

void AlterCollectionRequest::InternalSwap(AlterCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partitionids_.InternalSwap(&other->_impl_.partitionids_);
  _impl_.start_positions_.InternalSwap(&other->_impl_.start_positions_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlterCollectionRequest, _impl_.collectionid_)
      + sizeof(AlterCollectionRequest::_impl_.collectionid_)
      - PROTOBUF_FIELD_OFFSET(AlterCollectionRequest, _impl_.schema_)>(
          reinterpret_cast<char*>(&_impl_.schema_),
          reinterpret_cast<char*>(&other->_impl_.schema_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlterCollectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[74]);
}

// ===================================================================

class GcConfirmRequest::_Internal {
 public:
};

GcConfirmRequest::GcConfirmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GcConfirmRequest)
}
GcConfirmRequest::GcConfirmRequest(const GcConfirmRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GcConfirmRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_id_){}
    , decltype(_impl_.partition_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.collection_id_, &from._impl_.collection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.partition_id_) -
    reinterpret_cast<char*>(&_impl_.collection_id_)) + sizeof(_impl_.partition_id_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GcConfirmRequest)
}

inline void GcConfirmRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_id_){int64_t{0}}
    , decltype(_impl_.partition_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GcConfirmRequest::~GcConfirmRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GcConfirmRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GcConfirmRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GcConfirmRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GcConfirmRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GcConfirmRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.collection_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.partition_id_) -
      reinterpret_cast<char*>(&_impl_.collection_id_)) + sizeof(_impl_.partition_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GcConfirmRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partition_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.partition_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GcConfirmRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GcConfirmRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collection_id = 1;
  if (this->_internal_collection_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collection_id(), target);
  }

  // int64 partition_id = 2;
  if (this->_internal_partition_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_partition_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GcConfirmRequest)
  return target;
}

size_t GcConfirmRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GcConfirmRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 collection_id = 1;
  if (this->_internal_collection_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collection_id());
  }

  // int64 partition_id = 2;
  if (this->_internal_partition_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partition_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GcConfirmRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GcConfirmRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GcConfirmRequest::GetClassData() const { return &_class_data_; }


void GcConfirmRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GcConfirmRequest*>(&to_msg);
  auto& from = static_cast<const GcConfirmRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GcConfirmRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_collection_id() != 0) {
    _this->_internal_set_collection_id(from._internal_collection_id());
  }
  if (from._internal_partition_id() != 0) {
    _this->_internal_set_partition_id(from._internal_partition_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GcConfirmRequest::CopyFrom(const GcConfirmRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GcConfirmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcConfirmRequest::IsInitialized() const {
  return true;
}

void GcConfirmRequest::InternalSwap(GcConfirmRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GcConfirmRequest, _impl_.partition_id_)
      + sizeof(GcConfirmRequest::_impl_.partition_id_)
      - PROTOBUF_FIELD_OFFSET(GcConfirmRequest, _impl_.collection_id_)>(
          reinterpret_cast<char*>(&_impl_.collection_id_),
          reinterpret_cast<char*>(&other->_impl_.collection_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GcConfirmRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[75]);
}

// ===================================================================

class GcConfirmResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GcConfirmResponse* msg);
};

const ::milvus::proto::common::Status&
GcConfirmResponse::_Internal::status(const GcConfirmResponse* msg) {
  return *msg->_impl_.status_;
}
void GcConfirmResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GcConfirmResponse::GcConfirmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.GcConfirmResponse)
}
GcConfirmResponse::GcConfirmResponse(const GcConfirmResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GcConfirmResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.gc_finished_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  _this->_impl_.gc_finished_ = from._impl_.gc_finished_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.GcConfirmResponse)
}

inline void GcConfirmResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.gc_finished_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GcConfirmResponse::~GcConfirmResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.GcConfirmResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GcConfirmResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GcConfirmResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GcConfirmResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.GcConfirmResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.gc_finished_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GcConfirmResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool gc_finished = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gc_finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GcConfirmResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.GcConfirmResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // bool gc_finished = 2;
  if (this->_internal_gc_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_gc_finished(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.GcConfirmResponse)
  return target;
}

size_t GcConfirmResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.GcConfirmResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // bool gc_finished = 2;
  if (this->_internal_gc_finished() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GcConfirmResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GcConfirmResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GcConfirmResponse::GetClassData() const { return &_class_data_; }


void GcConfirmResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GcConfirmResponse*>(&to_msg);
  auto& from = static_cast<const GcConfirmResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.GcConfirmResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_gc_finished() != 0) {
    _this->_internal_set_gc_finished(from._internal_gc_finished());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GcConfirmResponse::CopyFrom(const GcConfirmResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.GcConfirmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcConfirmResponse::IsInitialized() const {
  return true;
}

void GcConfirmResponse::InternalSwap(GcConfirmResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GcConfirmResponse, _impl_.gc_finished_)
      + sizeof(GcConfirmResponse::_impl_.gc_finished_)
      - PROTOBUF_FIELD_OFFSET(GcConfirmResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GcConfirmResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[76]);
}

// ===================================================================

class ReportDataNodeTtMsgsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ReportDataNodeTtMsgsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ReportDataNodeTtMsgsRequest::_Internal::base(const ReportDataNodeTtMsgsRequest* msg) {
  return *msg->_impl_.base_;
}
void ReportDataNodeTtMsgsRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void ReportDataNodeTtMsgsRequest::clear_msgs() {
  _impl_.msgs_.Clear();
}
ReportDataNodeTtMsgsRequest::ReportDataNodeTtMsgsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.data.ReportDataNodeTtMsgsRequest)
}
ReportDataNodeTtMsgsRequest::ReportDataNodeTtMsgsRequest(const ReportDataNodeTtMsgsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReportDataNodeTtMsgsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msgs_){from._impl_.msgs_}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.data.ReportDataNodeTtMsgsRequest)
}

inline void ReportDataNodeTtMsgsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msgs_){arena}
    , decltype(_impl_.base_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReportDataNodeTtMsgsRequest::~ReportDataNodeTtMsgsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.data.ReportDataNodeTtMsgsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReportDataNodeTtMsgsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msgs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.base_;
}

void ReportDataNodeTtMsgsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReportDataNodeTtMsgsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.data.ReportDataNodeTtMsgsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msgs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportDataNodeTtMsgsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.msg.DataNodeTtMsg msgs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportDataNodeTtMsgsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.data.ReportDataNodeTtMsgsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.msg.DataNodeTtMsg msgs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_msgs_size()); i < n; i++) {
    const auto& repfield = this->_internal_msgs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.data.ReportDataNodeTtMsgsRequest)
  return target;
}

size_t ReportDataNodeTtMsgsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.data.ReportDataNodeTtMsgsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.msg.DataNodeTtMsg msgs = 2;
  total_size += 1UL * this->_internal_msgs_size();
  for (const auto& msg : this->_impl_.msgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportDataNodeTtMsgsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReportDataNodeTtMsgsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportDataNodeTtMsgsRequest::GetClassData() const { return &_class_data_; }


void ReportDataNodeTtMsgsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReportDataNodeTtMsgsRequest*>(&to_msg);
  auto& from = static_cast<const ReportDataNodeTtMsgsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.data.ReportDataNodeTtMsgsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.msgs_.MergeFrom(from._impl_.msgs_);
  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportDataNodeTtMsgsRequest::CopyFrom(const ReportDataNodeTtMsgsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.data.ReportDataNodeTtMsgsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDataNodeTtMsgsRequest::IsInitialized() const {
  return true;
}

void ReportDataNodeTtMsgsRequest::InternalSwap(ReportDataNodeTtMsgsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.msgs_.InternalSwap(&other->_impl_.msgs_);
  swap(_impl_.base_, other->_impl_.base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportDataNodeTtMsgsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fcoord_2eproto_getter, &descriptor_table_data_5fcoord_2eproto_once,
      file_level_metadata_data_5fcoord_2eproto[77]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::milvus::proto::data::Empty*
Arena::CreateMaybeMessage< ::milvus::proto::data::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::FlushRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::FlushRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::FlushRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::FlushResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::FlushResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::FlushResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SegmentIDRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::SegmentIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SegmentIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::AssignSegmentIDRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::AssignSegmentIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::AssignSegmentIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SegmentIDAssignment*
Arena::CreateMaybeMessage< ::milvus::proto::data::SegmentIDAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SegmentIDAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::AssignSegmentIDResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::AssignSegmentIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::AssignSegmentIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetSegmentStatesRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetSegmentStatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetSegmentStatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SegmentStateInfo*
Arena::CreateMaybeMessage< ::milvus::proto::data::SegmentStateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SegmentStateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetSegmentStatesResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetSegmentStatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetSegmentStatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetSegmentInfoRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetSegmentInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetSegmentInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetSegmentInfoResponse_ChannelCheckpointEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetSegmentInfoResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetSegmentInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetSegmentInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetInsertBinlogPathsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetInsertBinlogPathsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetInsertBinlogPathsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetInsertBinlogPathsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetInsertBinlogPathsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetInsertBinlogPathsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetCollectionStatisticsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetCollectionStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetCollectionStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetCollectionStatisticsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetCollectionStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetCollectionStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetPartitionStatisticsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetPartitionStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetPartitionStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetPartitionStatisticsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetPartitionStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetPartitionStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetSegmentInfoChannelRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetSegmentInfoChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetSegmentInfoChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::VchannelInfo*
Arena::CreateMaybeMessage< ::milvus::proto::data::VchannelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::VchannelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::WatchDmChannelsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::WatchDmChannelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::WatchDmChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::FlushSegmentsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::FlushSegmentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::FlushSegmentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SegmentMsg*
Arena::CreateMaybeMessage< ::milvus::proto::data::SegmentMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SegmentMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SegmentInfo*
Arena::CreateMaybeMessage< ::milvus::proto::data::SegmentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SegmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SegmentStartPosition*
Arena::CreateMaybeMessage< ::milvus::proto::data::SegmentStartPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SegmentStartPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SaveBinlogPathsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::SaveBinlogPathsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SaveBinlogPathsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::CheckPoint*
Arena::CreateMaybeMessage< ::milvus::proto::data::CheckPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::CheckPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::DeltaLogInfo*
Arena::CreateMaybeMessage< ::milvus::proto::data::DeltaLogInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::DeltaLogInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::ChannelStatus*
Arena::CreateMaybeMessage< ::milvus::proto::data::ChannelStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::ChannelStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::DataNodeInfo*
Arena::CreateMaybeMessage< ::milvus::proto::data::DataNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::DataNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SegmentBinlogs*
Arena::CreateMaybeMessage< ::milvus::proto::data::SegmentBinlogs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SegmentBinlogs >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::FieldBinlog*
Arena::CreateMaybeMessage< ::milvus::proto::data::FieldBinlog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::FieldBinlog >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::Binlog*
Arena::CreateMaybeMessage< ::milvus::proto::data::Binlog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::Binlog >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetRecoveryInfoResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetRecoveryInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetRecoveryInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetRecoveryInfoRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetRecoveryInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetRecoveryInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetRecoveryInfoResponseV2*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetRecoveryInfoResponseV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetRecoveryInfoResponseV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetRecoveryInfoRequestV2*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetRecoveryInfoRequestV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetRecoveryInfoRequestV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetSegmentsByStatesRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetSegmentsByStatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetSegmentsByStatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetSegmentsByStatesResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetSegmentsByStatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetSegmentsByStatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetFlushedSegmentsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetFlushedSegmentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetFlushedSegmentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GetFlushedSegmentsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::GetFlushedSegmentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GetFlushedSegmentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SegmentFlushCompletedMsg*
Arena::CreateMaybeMessage< ::milvus::proto::data::SegmentFlushCompletedMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SegmentFlushCompletedMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::ChannelWatchInfo*
Arena::CreateMaybeMessage< ::milvus::proto::data::ChannelWatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::ChannelWatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::CompactionStateRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::CompactionStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::CompactionStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SyncSegmentsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::SyncSegmentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SyncSegmentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::CompactionSegmentBinlogs*
Arena::CreateMaybeMessage< ::milvus::proto::data::CompactionSegmentBinlogs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::CompactionSegmentBinlogs >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::CompactionPlan*
Arena::CreateMaybeMessage< ::milvus::proto::data::CompactionPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::CompactionPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::CompactionResult*
Arena::CreateMaybeMessage< ::milvus::proto::data::CompactionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::CompactionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::CompactionStateResult*
Arena::CreateMaybeMessage< ::milvus::proto::data::CompactionStateResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::CompactionStateResult >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::CompactionStateResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::CompactionStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::CompactionStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SegmentFieldBinlogMeta*
Arena::CreateMaybeMessage< ::milvus::proto::data::SegmentFieldBinlogMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SegmentFieldBinlogMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::WatchChannelsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::WatchChannelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::WatchChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::WatchChannelsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::WatchChannelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::WatchChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SetSegmentStateRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::SetSegmentStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SetSegmentStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SetSegmentStateResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::SetSegmentStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SetSegmentStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::DropVirtualChannelRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::DropVirtualChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::DropVirtualChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::DropVirtualChannelSegment*
Arena::CreateMaybeMessage< ::milvus::proto::data::DropVirtualChannelSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::DropVirtualChannelSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::DropVirtualChannelResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::DropVirtualChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::DropVirtualChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::ImportTask*
Arena::CreateMaybeMessage< ::milvus::proto::data::ImportTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::ImportTask >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::ImportTaskState*
Arena::CreateMaybeMessage< ::milvus::proto::data::ImportTaskState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::ImportTaskState >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::ImportTaskInfo*
Arena::CreateMaybeMessage< ::milvus::proto::data::ImportTaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::ImportTaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::ImportTaskResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::ImportTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::ImportTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::ImportTaskRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::ImportTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::ImportTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::UpdateSegmentStatisticsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::UpdateSegmentStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::UpdateSegmentStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::UpdateChannelCheckpointRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::UpdateChannelCheckpointRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::UpdateChannelCheckpointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::ResendSegmentStatsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::ResendSegmentStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::ResendSegmentStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::ResendSegmentStatsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::ResendSegmentStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::ResendSegmentStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::AddImportSegmentRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::AddImportSegmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::AddImportSegmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::AddImportSegmentResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::AddImportSegmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::AddImportSegmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SaveImportSegmentRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::SaveImportSegmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SaveImportSegmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::UnsetIsImportingStateRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::UnsetIsImportingStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::UnsetIsImportingStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::MarkSegmentsDroppedRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::MarkSegmentsDroppedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::MarkSegmentsDroppedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::SegmentReferenceLock*
Arena::CreateMaybeMessage< ::milvus::proto::data::SegmentReferenceLock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::SegmentReferenceLock >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::AlterCollectionRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::AlterCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::AlterCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GcConfirmRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::GcConfirmRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GcConfirmRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::GcConfirmResponse*
Arena::CreateMaybeMessage< ::milvus::proto::data::GcConfirmResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::GcConfirmResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::data::ReportDataNodeTtMsgsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::data::ReportDataNodeTtMsgsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::data::ReportDataNodeTtMsgsRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
