// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index_coord.proto

#include "index_coord.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace milvus {
namespace proto {
namespace index {
PROTOBUF_CONSTEXPR IndexInfo::IndexInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_params_)*/{}
  , /*decltype(_impl_.index_params_)*/{}
  , /*decltype(_impl_.user_index_params_)*/{}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_state_fail_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.fieldid_)*/int64_t{0}
  , /*decltype(_impl_.indexid_)*/int64_t{0}
  , /*decltype(_impl_.indexed_rows_)*/int64_t{0}
  , /*decltype(_impl_.total_rows_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.is_auto_index_)*/false
  , /*decltype(_impl_.pending_index_rows_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexInfoDefaultTypeInternal() {}
  union {
    IndexInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexInfoDefaultTypeInternal _IndexInfo_default_instance_;
PROTOBUF_CONSTEXPR FieldIndex::FieldIndex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_info_)*/nullptr
  , /*decltype(_impl_.create_time_)*/uint64_t{0u}
  , /*decltype(_impl_.deleted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FieldIndexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldIndexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldIndexDefaultTypeInternal() {}
  union {
    FieldIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldIndexDefaultTypeInternal _FieldIndex_default_instance_;
PROTOBUF_CONSTEXPR SegmentIndex::SegmentIndex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_file_keys_)*/{}
  , /*decltype(_impl_.fail_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.partitionid_)*/int64_t{0}
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.num_rows_)*/int64_t{0}
  , /*decltype(_impl_.indexid_)*/int64_t{0}
  , /*decltype(_impl_.buildid_)*/int64_t{0}
  , /*decltype(_impl_.nodeid_)*/int64_t{0}
  , /*decltype(_impl_.index_version_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.deleted_)*/false
  , /*decltype(_impl_.write_handoff_)*/false
  , /*decltype(_impl_.create_time_)*/uint64_t{0u}
  , /*decltype(_impl_.serialize_size_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentIndexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentIndexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentIndexDefaultTypeInternal() {}
  union {
    SegmentIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentIndexDefaultTypeInternal _SegmentIndex_default_instance_;
PROTOBUF_CONSTEXPR RegisterNodeRequest::RegisterNodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.address_)*/nullptr
  , /*decltype(_impl_.nodeid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterNodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterNodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterNodeRequestDefaultTypeInternal() {}
  union {
    RegisterNodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterNodeRequestDefaultTypeInternal _RegisterNodeRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterNodeResponse::RegisterNodeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.init_params_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterNodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterNodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterNodeResponseDefaultTypeInternal() {}
  union {
    RegisterNodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterNodeResponseDefaultTypeInternal _RegisterNodeResponse_default_instance_;
PROTOBUF_CONSTEXPR GetIndexStateRequest::GetIndexStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIndexStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexStateRequestDefaultTypeInternal() {}
  union {
    GetIndexStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexStateRequestDefaultTypeInternal _GetIndexStateRequest_default_instance_;
PROTOBUF_CONSTEXPR GetIndexStateResponse::GetIndexStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fail_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIndexStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexStateResponseDefaultTypeInternal() {}
  union {
    GetIndexStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexStateResponseDefaultTypeInternal _GetIndexStateResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSegmentIndexStateRequest::GetSegmentIndexStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentids_)*/{}
  , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSegmentIndexStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSegmentIndexStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSegmentIndexStateRequestDefaultTypeInternal() {}
  union {
    GetSegmentIndexStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSegmentIndexStateRequestDefaultTypeInternal _GetSegmentIndexStateRequest_default_instance_;
PROTOBUF_CONSTEXPR SegmentIndexState::SegmentIndexState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fail_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentIndexStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentIndexStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentIndexStateDefaultTypeInternal() {}
  union {
    SegmentIndexState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentIndexStateDefaultTypeInternal _SegmentIndexState_default_instance_;
PROTOBUF_CONSTEXPR GetSegmentIndexStateResponse::GetSegmentIndexStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.states_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSegmentIndexStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSegmentIndexStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSegmentIndexStateResponseDefaultTypeInternal() {}
  union {
    GetSegmentIndexStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSegmentIndexStateResponseDefaultTypeInternal _GetSegmentIndexStateResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateIndexRequest::CreateIndexRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_params_)*/{}
  , /*decltype(_impl_.index_params_)*/{}
  , /*decltype(_impl_.user_index_params_)*/{}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.fieldid_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.is_auto_index_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateIndexRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateIndexRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateIndexRequestDefaultTypeInternal() {}
  union {
    CreateIndexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateIndexRequestDefaultTypeInternal _CreateIndexRequest_default_instance_;
PROTOBUF_CONSTEXPR GetIndexInfoRequest::GetIndexInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segmentids_)*/{}
  , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIndexInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexInfoRequestDefaultTypeInternal() {}
  union {
    GetIndexInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexInfoRequestDefaultTypeInternal _GetIndexInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR IndexFilePathInfo::IndexFilePathInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_params_)*/{}
  , /*decltype(_impl_.index_file_paths_)*/{}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.fieldid_)*/int64_t{0}
  , /*decltype(_impl_.indexid_)*/int64_t{0}
  , /*decltype(_impl_.buildid_)*/int64_t{0}
  , /*decltype(_impl_.serialized_size_)*/uint64_t{0u}
  , /*decltype(_impl_.index_version_)*/int64_t{0}
  , /*decltype(_impl_.num_rows_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexFilePathInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexFilePathInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexFilePathInfoDefaultTypeInternal() {}
  union {
    IndexFilePathInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexFilePathInfoDefaultTypeInternal _IndexFilePathInfo_default_instance_;
PROTOBUF_CONSTEXPR SegmentInfo::SegmentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_infos_)*/{}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.segmentid_)*/int64_t{0}
  , /*decltype(_impl_.enable_index_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentInfoDefaultTypeInternal() {}
  union {
    SegmentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentInfoDefaultTypeInternal _SegmentInfo_default_instance_;
PROTOBUF_CONSTEXPR GetIndexInfoResponse_SegmentInfoEntry_DoNotUse::GetIndexInfoResponse_SegmentInfoEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GetIndexInfoResponse_SegmentInfoEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexInfoResponse_SegmentInfoEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexInfoResponse_SegmentInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetIndexInfoResponse_SegmentInfoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexInfoResponse_SegmentInfoEntry_DoNotUseDefaultTypeInternal _GetIndexInfoResponse_SegmentInfoEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetIndexInfoResponse::GetIndexInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segment_info_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIndexInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexInfoResponseDefaultTypeInternal() {}
  union {
    GetIndexInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexInfoResponseDefaultTypeInternal _GetIndexInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR DropIndexRequest::DropIndexRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partitionids_)*/{}
  , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_.drop_all_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropIndexRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropIndexRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropIndexRequestDefaultTypeInternal() {}
  union {
    DropIndexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropIndexRequestDefaultTypeInternal _DropIndexRequest_default_instance_;
PROTOBUF_CONSTEXPR DescribeIndexRequest::DescribeIndexRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeIndexRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeIndexRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeIndexRequestDefaultTypeInternal() {}
  union {
    DescribeIndexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeIndexRequestDefaultTypeInternal _DescribeIndexRequest_default_instance_;
PROTOBUF_CONSTEXPR DescribeIndexResponse::DescribeIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_infos_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeIndexResponseDefaultTypeInternal() {}
  union {
    DescribeIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeIndexResponseDefaultTypeInternal _DescribeIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR GetIndexBuildProgressRequest::GetIndexBuildProgressRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIndexBuildProgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexBuildProgressRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexBuildProgressRequestDefaultTypeInternal() {}
  union {
    GetIndexBuildProgressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexBuildProgressRequestDefaultTypeInternal _GetIndexBuildProgressRequest_default_instance_;
PROTOBUF_CONSTEXPR GetIndexBuildProgressResponse::GetIndexBuildProgressResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.indexed_rows_)*/int64_t{0}
  , /*decltype(_impl_.total_rows_)*/int64_t{0}
  , /*decltype(_impl_.pending_index_rows_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIndexBuildProgressResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexBuildProgressResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexBuildProgressResponseDefaultTypeInternal() {}
  union {
    GetIndexBuildProgressResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexBuildProgressResponseDefaultTypeInternal _GetIndexBuildProgressResponse_default_instance_;
PROTOBUF_CONSTEXPR StorageConfig::StorageConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.access_keyid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secret_access_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bucket_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.root_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iamendpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.storage_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usessl_)*/false
  , /*decltype(_impl_.useiam_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StorageConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StorageConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StorageConfigDefaultTypeInternal() {}
  union {
    StorageConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StorageConfigDefaultTypeInternal _StorageConfig_default_instance_;
PROTOBUF_CONSTEXPR CreateJobRequest::CreateJobRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_paths_)*/{}
  , /*decltype(_impl_.index_params_)*/{}
  , /*decltype(_impl_.type_params_)*/{}
  , /*decltype(_impl_.clusterid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_file_prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.storage_config_)*/nullptr
  , /*decltype(_impl_.buildid_)*/int64_t{0}
  , /*decltype(_impl_.index_version_)*/int64_t{0}
  , /*decltype(_impl_.indexid_)*/int64_t{0}
  , /*decltype(_impl_.num_rows_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateJobRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateJobRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateJobRequestDefaultTypeInternal() {}
  union {
    CreateJobRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateJobRequestDefaultTypeInternal _CreateJobRequest_default_instance_;
PROTOBUF_CONSTEXPR QueryJobsRequest::QueryJobsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buildids_)*/{}
  , /*decltype(_impl_._buildids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.clusterid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryJobsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryJobsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryJobsRequestDefaultTypeInternal() {}
  union {
    QueryJobsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryJobsRequestDefaultTypeInternal _QueryJobsRequest_default_instance_;
PROTOBUF_CONSTEXPR IndexTaskInfo::IndexTaskInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_file_keys_)*/{}
  , /*decltype(_impl_.fail_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buildid_)*/int64_t{0}
  , /*decltype(_impl_.serialized_size_)*/uint64_t{0u}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexTaskInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexTaskInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexTaskInfoDefaultTypeInternal() {}
  union {
    IndexTaskInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexTaskInfoDefaultTypeInternal _IndexTaskInfo_default_instance_;
PROTOBUF_CONSTEXPR QueryJobsResponse::QueryJobsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_infos_)*/{}
  , /*decltype(_impl_.clusterid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryJobsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryJobsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryJobsResponseDefaultTypeInternal() {}
  union {
    QueryJobsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryJobsResponseDefaultTypeInternal _QueryJobsResponse_default_instance_;
PROTOBUF_CONSTEXPR DropJobsRequest::DropJobsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buildids_)*/{}
  , /*decltype(_impl_._buildids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.clusterid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropJobsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropJobsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropJobsRequestDefaultTypeInternal() {}
  union {
    DropJobsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropJobsRequestDefaultTypeInternal _DropJobsRequest_default_instance_;
PROTOBUF_CONSTEXPR JobInfo::JobInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_params_)*/{}
  , /*decltype(_impl_.num_rows_)*/int64_t{0}
  , /*decltype(_impl_.dim_)*/int64_t{0}
  , /*decltype(_impl_.start_time_)*/int64_t{0}
  , /*decltype(_impl_.end_time_)*/int64_t{0}
  , /*decltype(_impl_.podid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JobInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JobInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JobInfoDefaultTypeInternal() {}
  union {
    JobInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JobInfoDefaultTypeInternal _JobInfo_default_instance_;
PROTOBUF_CONSTEXPR GetJobStatsRequest::GetJobStatsRequest(
    ::_pbi::ConstantInitialized) {}
struct GetJobStatsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetJobStatsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetJobStatsRequestDefaultTypeInternal() {}
  union {
    GetJobStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetJobStatsRequestDefaultTypeInternal _GetJobStatsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetJobStatsResponse::GetJobStatsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.job_infos_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.total_job_num_)*/int64_t{0}
  , /*decltype(_impl_.in_progress_job_num_)*/int64_t{0}
  , /*decltype(_impl_.enqueue_job_num_)*/int64_t{0}
  , /*decltype(_impl_.task_slots_)*/int64_t{0}
  , /*decltype(_impl_.enable_disk_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetJobStatsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetJobStatsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetJobStatsResponseDefaultTypeInternal() {}
  union {
    GetJobStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetJobStatsResponseDefaultTypeInternal _GetJobStatsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetIndexStatisticsRequest::GetIndexStatisticsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collectionid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIndexStatisticsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexStatisticsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexStatisticsRequestDefaultTypeInternal() {}
  union {
    GetIndexStatisticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexStatisticsRequestDefaultTypeInternal _GetIndexStatisticsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetIndexStatisticsResponse::GetIndexStatisticsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_infos_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIndexStatisticsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIndexStatisticsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIndexStatisticsResponseDefaultTypeInternal() {}
  union {
    GetIndexStatisticsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIndexStatisticsResponseDefaultTypeInternal _GetIndexStatisticsResponse_default_instance_;
}  // namespace index
}  // namespace proto
}  // namespace milvus
static ::_pb::Metadata file_level_metadata_index_5fcoord_2eproto[32];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_index_5fcoord_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_index_5fcoord_2eproto = nullptr;

const uint32_t TableStruct_index_5fcoord_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexInfo, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexInfo, _impl_.fieldid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexInfo, _impl_.index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexInfo, _impl_.indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexInfo, _impl_.type_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexInfo, _impl_.index_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexInfo, _impl_.indexed_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexInfo, _impl_.total_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexInfo, _impl_.index_state_fail_reason_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexInfo, _impl_.is_auto_index_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexInfo, _impl_.user_index_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexInfo, _impl_.pending_index_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::FieldIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::FieldIndex, _impl_.index_info_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::FieldIndex, _impl_.deleted_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::FieldIndex, _impl_.create_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.num_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.buildid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.nodeid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.index_version_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.fail_reason_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.index_file_keys_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.deleted_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.create_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.serialize_size_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndex, _impl_.write_handoff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::RegisterNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::RegisterNodeRequest, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::RegisterNodeRequest, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::RegisterNodeRequest, _impl_.nodeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::RegisterNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::RegisterNodeResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::RegisterNodeResponse, _impl_.init_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexStateRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexStateRequest, _impl_.index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexStateResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexStateResponse, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexStateResponse, _impl_.fail_reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetSegmentIndexStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetSegmentIndexStateRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetSegmentIndexStateRequest, _impl_.index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetSegmentIndexStateRequest, _impl_.segmentids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndexState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndexState, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndexState, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentIndexState, _impl_.fail_reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetSegmentIndexStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetSegmentIndexStateResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetSegmentIndexStateResponse, _impl_.states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateIndexRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateIndexRequest, _impl_.fieldid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateIndexRequest, _impl_.index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateIndexRequest, _impl_.type_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateIndexRequest, _impl_.index_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateIndexRequest, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateIndexRequest, _impl_.is_auto_index_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateIndexRequest, _impl_.user_index_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexInfoRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexInfoRequest, _impl_.segmentids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexInfoRequest, _impl_.index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexFilePathInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexFilePathInfo, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexFilePathInfo, _impl_.fieldid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexFilePathInfo, _impl_.indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexFilePathInfo, _impl_.buildid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexFilePathInfo, _impl_.index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexFilePathInfo, _impl_.index_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexFilePathInfo, _impl_.index_file_paths_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexFilePathInfo, _impl_.serialized_size_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexFilePathInfo, _impl_.index_version_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexFilePathInfo, _impl_.num_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentInfo, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentInfo, _impl_.segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentInfo, _impl_.enable_index_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::SegmentInfo, _impl_.index_infos_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexInfoResponse_SegmentInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexInfoResponse_SegmentInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexInfoResponse_SegmentInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexInfoResponse_SegmentInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexInfoResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexInfoResponse, _impl_.segment_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::DropIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::DropIndexRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::DropIndexRequest, _impl_.partitionids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::DropIndexRequest, _impl_.index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::DropIndexRequest, _impl_.drop_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::DescribeIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::DescribeIndexRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::DescribeIndexRequest, _impl_.index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::DescribeIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::DescribeIndexResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::DescribeIndexResponse, _impl_.index_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexBuildProgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexBuildProgressRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexBuildProgressRequest, _impl_.index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexBuildProgressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexBuildProgressResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexBuildProgressResponse, _impl_.indexed_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexBuildProgressResponse, _impl_.total_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexBuildProgressResponse, _impl_.pending_index_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::StorageConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::StorageConfig, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::StorageConfig, _impl_.access_keyid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::StorageConfig, _impl_.secret_access_key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::StorageConfig, _impl_.usessl_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::StorageConfig, _impl_.bucket_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::StorageConfig, _impl_.root_path_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::StorageConfig, _impl_.useiam_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::StorageConfig, _impl_.iamendpoint_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::StorageConfig, _impl_.storage_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateJobRequest, _impl_.clusterid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateJobRequest, _impl_.index_file_prefix_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateJobRequest, _impl_.buildid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateJobRequest, _impl_.data_paths_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateJobRequest, _impl_.index_version_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateJobRequest, _impl_.indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateJobRequest, _impl_.index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateJobRequest, _impl_.storage_config_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateJobRequest, _impl_.index_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateJobRequest, _impl_.type_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::CreateJobRequest, _impl_.num_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::QueryJobsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::QueryJobsRequest, _impl_.clusterid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::QueryJobsRequest, _impl_.buildids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexTaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexTaskInfo, _impl_.buildid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexTaskInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexTaskInfo, _impl_.index_file_keys_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexTaskInfo, _impl_.serialized_size_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::IndexTaskInfo, _impl_.fail_reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::QueryJobsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::QueryJobsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::QueryJobsResponse, _impl_.clusterid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::QueryJobsResponse, _impl_.index_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::DropJobsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::DropJobsRequest, _impl_.clusterid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::DropJobsRequest, _impl_.buildids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::JobInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::JobInfo, _impl_.num_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::JobInfo, _impl_.dim_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::JobInfo, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::JobInfo, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::JobInfo, _impl_.index_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::JobInfo, _impl_.podid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetJobStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetJobStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetJobStatsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetJobStatsResponse, _impl_.total_job_num_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetJobStatsResponse, _impl_.in_progress_job_num_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetJobStatsResponse, _impl_.enqueue_job_num_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetJobStatsResponse, _impl_.task_slots_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetJobStatsResponse, _impl_.job_infos_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetJobStatsResponse, _impl_.enable_disk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexStatisticsRequest, _impl_.collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexStatisticsRequest, _impl_.index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexStatisticsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::index::GetIndexStatisticsResponse, _impl_.index_infos_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::milvus::proto::index::IndexInfo)},
  { 19, -1, -1, sizeof(::milvus::proto::index::FieldIndex)},
  { 28, -1, -1, sizeof(::milvus::proto::index::SegmentIndex)},
  { 49, -1, -1, sizeof(::milvus::proto::index::RegisterNodeRequest)},
  { 58, -1, -1, sizeof(::milvus::proto::index::RegisterNodeResponse)},
  { 66, -1, -1, sizeof(::milvus::proto::index::GetIndexStateRequest)},
  { 74, -1, -1, sizeof(::milvus::proto::index::GetIndexStateResponse)},
  { 83, -1, -1, sizeof(::milvus::proto::index::GetSegmentIndexStateRequest)},
  { 92, -1, -1, sizeof(::milvus::proto::index::SegmentIndexState)},
  { 101, -1, -1, sizeof(::milvus::proto::index::GetSegmentIndexStateResponse)},
  { 109, -1, -1, sizeof(::milvus::proto::index::CreateIndexRequest)},
  { 123, -1, -1, sizeof(::milvus::proto::index::GetIndexInfoRequest)},
  { 132, -1, -1, sizeof(::milvus::proto::index::IndexFilePathInfo)},
  { 148, -1, -1, sizeof(::milvus::proto::index::SegmentInfo)},
  { 158, 166, -1, sizeof(::milvus::proto::index::GetIndexInfoResponse_SegmentInfoEntry_DoNotUse)},
  { 168, -1, -1, sizeof(::milvus::proto::index::GetIndexInfoResponse)},
  { 176, -1, -1, sizeof(::milvus::proto::index::DropIndexRequest)},
  { 186, -1, -1, sizeof(::milvus::proto::index::DescribeIndexRequest)},
  { 194, -1, -1, sizeof(::milvus::proto::index::DescribeIndexResponse)},
  { 202, -1, -1, sizeof(::milvus::proto::index::GetIndexBuildProgressRequest)},
  { 210, -1, -1, sizeof(::milvus::proto::index::GetIndexBuildProgressResponse)},
  { 220, -1, -1, sizeof(::milvus::proto::index::StorageConfig)},
  { 235, -1, -1, sizeof(::milvus::proto::index::CreateJobRequest)},
  { 252, -1, -1, sizeof(::milvus::proto::index::QueryJobsRequest)},
  { 260, -1, -1, sizeof(::milvus::proto::index::IndexTaskInfo)},
  { 271, -1, -1, sizeof(::milvus::proto::index::QueryJobsResponse)},
  { 280, -1, -1, sizeof(::milvus::proto::index::DropJobsRequest)},
  { 288, -1, -1, sizeof(::milvus::proto::index::JobInfo)},
  { 300, -1, -1, sizeof(::milvus::proto::index::GetJobStatsRequest)},
  { 306, -1, -1, sizeof(::milvus::proto::index::GetJobStatsResponse)},
  { 319, -1, -1, sizeof(::milvus::proto::index::GetIndexStatisticsRequest)},
  { 327, -1, -1, sizeof(::milvus::proto::index::GetIndexStatisticsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::milvus::proto::index::_IndexInfo_default_instance_._instance,
  &::milvus::proto::index::_FieldIndex_default_instance_._instance,
  &::milvus::proto::index::_SegmentIndex_default_instance_._instance,
  &::milvus::proto::index::_RegisterNodeRequest_default_instance_._instance,
  &::milvus::proto::index::_RegisterNodeResponse_default_instance_._instance,
  &::milvus::proto::index::_GetIndexStateRequest_default_instance_._instance,
  &::milvus::proto::index::_GetIndexStateResponse_default_instance_._instance,
  &::milvus::proto::index::_GetSegmentIndexStateRequest_default_instance_._instance,
  &::milvus::proto::index::_SegmentIndexState_default_instance_._instance,
  &::milvus::proto::index::_GetSegmentIndexStateResponse_default_instance_._instance,
  &::milvus::proto::index::_CreateIndexRequest_default_instance_._instance,
  &::milvus::proto::index::_GetIndexInfoRequest_default_instance_._instance,
  &::milvus::proto::index::_IndexFilePathInfo_default_instance_._instance,
  &::milvus::proto::index::_SegmentInfo_default_instance_._instance,
  &::milvus::proto::index::_GetIndexInfoResponse_SegmentInfoEntry_DoNotUse_default_instance_._instance,
  &::milvus::proto::index::_GetIndexInfoResponse_default_instance_._instance,
  &::milvus::proto::index::_DropIndexRequest_default_instance_._instance,
  &::milvus::proto::index::_DescribeIndexRequest_default_instance_._instance,
  &::milvus::proto::index::_DescribeIndexResponse_default_instance_._instance,
  &::milvus::proto::index::_GetIndexBuildProgressRequest_default_instance_._instance,
  &::milvus::proto::index::_GetIndexBuildProgressResponse_default_instance_._instance,
  &::milvus::proto::index::_StorageConfig_default_instance_._instance,
  &::milvus::proto::index::_CreateJobRequest_default_instance_._instance,
  &::milvus::proto::index::_QueryJobsRequest_default_instance_._instance,
  &::milvus::proto::index::_IndexTaskInfo_default_instance_._instance,
  &::milvus::proto::index::_QueryJobsResponse_default_instance_._instance,
  &::milvus::proto::index::_DropJobsRequest_default_instance_._instance,
  &::milvus::proto::index::_JobInfo_default_instance_._instance,
  &::milvus::proto::index::_GetJobStatsRequest_default_instance_._instance,
  &::milvus::proto::index::_GetJobStatsResponse_default_instance_._instance,
  &::milvus::proto::index::_GetIndexStatisticsRequest_default_instance_._instance,
  &::milvus::proto::index::_GetIndexStatisticsResponse_default_instance_._instance,
};

const char descriptor_table_protodef_index_5fcoord_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021index_coord.proto\022\022milvus.proto.index\032"
  "\014common.proto\032\016internal.proto\032\014milvus.pr"
  "oto\"\264\003\n\tIndexInfo\022\024\n\014collectionID\030\001 \001(\003\022"
  "\017\n\007fieldID\030\002 \001(\003\022\022\n\nindex_name\030\003 \001(\t\022\017\n\007"
  "indexID\030\004 \001(\003\0226\n\013type_params\030\005 \003(\0132!.mil"
  "vus.proto.common.KeyValuePair\0227\n\014index_p"
  "arams\030\006 \003(\0132!.milvus.proto.common.KeyVal"
  "uePair\022\024\n\014indexed_rows\030\007 \001(\003\022\022\n\ntotal_ro"
  "ws\030\010 \001(\003\022.\n\005state\030\t \001(\0162\037.milvus.proto.c"
  "ommon.IndexState\022\037\n\027index_state_fail_rea"
  "son\030\n \001(\t\022\025\n\ris_auto_index\030\013 \001(\010\022<\n\021user"
  "_index_params\030\014 \003(\0132!.milvus.proto.commo"
  "n.KeyValuePair\022\032\n\022pending_index_rows\030\r \001"
  "(\003\"e\n\nFieldIndex\0221\n\nindex_info\030\001 \001(\0132\035.m"
  "ilvus.proto.index.IndexInfo\022\017\n\007deleted\030\002"
  " \001(\010\022\023\n\013create_time\030\003 \001(\004\"\332\002\n\014SegmentInd"
  "ex\022\024\n\014collectionID\030\001 \001(\003\022\023\n\013partitionID\030"
  "\002 \001(\003\022\021\n\tsegmentID\030\003 \001(\003\022\020\n\010num_rows\030\004 \001"
  "(\003\022\017\n\007indexID\030\005 \001(\003\022\017\n\007buildID\030\006 \001(\003\022\016\n\006"
  "nodeID\030\007 \001(\003\022\025\n\rindex_version\030\010 \001(\003\022.\n\005s"
  "tate\030\t \001(\0162\037.milvus.proto.common.IndexSt"
  "ate\022\023\n\013fail_reason\030\n \001(\t\022\027\n\017index_file_k"
  "eys\030\013 \003(\t\022\017\n\007deleted\030\014 \001(\010\022\023\n\013create_tim"
  "e\030\r \001(\004\022\026\n\016serialize_size\030\016 \001(\004\022\025\n\rwrite"
  "_handoff\030\017 \001(\010\"\200\001\n\023RegisterNodeRequest\022*"
  "\n\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBa"
  "se\022-\n\007address\030\002 \001(\0132\034.milvus.proto.commo"
  "n.Address\022\016\n\006nodeID\030\003 \001(\003\"{\n\024RegisterNod"
  "eResponse\022+\n\006status\030\001 \001(\0132\033.milvus.proto"
  ".common.Status\0226\n\013init_params\030\002 \001(\0132!.mi"
  "lvus.proto.internal.InitParams\"@\n\024GetInd"
  "exStateRequest\022\024\n\014collectionID\030\001 \001(\003\022\022\n\n"
  "index_name\030\002 \001(\t\"\211\001\n\025GetIndexStateRespon"
  "se\022+\n\006status\030\001 \001(\0132\033.milvus.proto.common"
  ".Status\022.\n\005state\030\002 \001(\0162\037.milvus.proto.co"
  "mmon.IndexState\022\023\n\013fail_reason\030\003 \001(\t\"[\n\033"
  "GetSegmentIndexStateRequest\022\024\n\014collectio"
  "nID\030\001 \001(\003\022\022\n\nindex_name\030\002 \001(\t\022\022\n\nsegment"
  "IDs\030\003 \003(\003\"k\n\021SegmentIndexState\022\021\n\tsegmen"
  "tID\030\001 \001(\003\022.\n\005state\030\002 \001(\0162\037.milvus.proto."
  "common.IndexState\022\023\n\013fail_reason\030\003 \001(\t\"\202"
  "\001\n\034GetSegmentIndexStateResponse\022+\n\006statu"
  "s\030\001 \001(\0132\033.milvus.proto.common.Status\0225\n\006"
  "states\030\002 \003(\0132%.milvus.proto.index.Segmen"
  "tIndexState\"\250\002\n\022CreateIndexRequest\022\024\n\014co"
  "llectionID\030\001 \001(\003\022\017\n\007fieldID\030\002 \001(\003\022\022\n\nind"
  "ex_name\030\003 \001(\t\0226\n\013type_params\030\004 \003(\0132!.mil"
  "vus.proto.common.KeyValuePair\0227\n\014index_p"
  "arams\030\005 \003(\0132!.milvus.proto.common.KeyVal"
  "uePair\022\021\n\ttimestamp\030\006 \001(\004\022\025\n\ris_auto_ind"
  "ex\030\007 \001(\010\022<\n\021user_index_params\030\010 \003(\0132!.mi"
  "lvus.proto.common.KeyValuePair\"S\n\023GetInd"
  "exInfoRequest\022\024\n\014collectionID\030\001 \001(\003\022\022\n\ns"
  "egmentIDs\030\002 \003(\003\022\022\n\nindex_name\030\003 \001(\t\"\202\002\n\021"
  "IndexFilePathInfo\022\021\n\tsegmentID\030\001 \001(\003\022\017\n\007"
  "fieldID\030\002 \001(\003\022\017\n\007indexID\030\003 \001(\003\022\017\n\007buildI"
  "D\030\004 \001(\003\022\022\n\nindex_name\030\005 \001(\t\0227\n\014index_par"
  "ams\030\006 \003(\0132!.milvus.proto.common.KeyValue"
  "Pair\022\030\n\020index_file_paths\030\007 \003(\t\022\027\n\017serial"
  "ized_size\030\010 \001(\004\022\025\n\rindex_version\030\t \001(\003\022\020"
  "\n\010num_rows\030\n \001(\003\"\210\001\n\013SegmentInfo\022\024\n\014coll"
  "ectionID\030\001 \001(\003\022\021\n\tsegmentID\030\002 \001(\003\022\024\n\014ena"
  "ble_index\030\003 \001(\010\022:\n\013index_infos\030\004 \003(\0132%.m"
  "ilvus.proto.index.IndexFilePathInfo\"\351\001\n\024"
  "GetIndexInfoResponse\022+\n\006status\030\001 \001(\0132\033.m"
  "ilvus.proto.common.Status\022O\n\014segment_inf"
  "o\030\002 \003(\01329.milvus.proto.index.GetIndexInf"
  "oResponse.SegmentInfoEntry\032S\n\020SegmentInf"
  "oEntry\022\013\n\003key\030\001 \001(\003\022.\n\005value\030\002 \001(\0132\037.mil"
  "vus.proto.index.SegmentInfo:\0028\001\"d\n\020DropI"
  "ndexRequest\022\024\n\014collectionID\030\001 \001(\003\022\024\n\014par"
  "titionIDs\030\002 \003(\003\022\022\n\nindex_name\030\003 \001(\t\022\020\n\010d"
  "rop_all\030\004 \001(\010\"@\n\024DescribeIndexRequest\022\024\n"
  "\014collectionID\030\001 \001(\003\022\022\n\nindex_name\030\002 \001(\t\""
  "x\n\025DescribeIndexResponse\022+\n\006status\030\001 \001(\013"
  "2\033.milvus.proto.common.Status\0222\n\013index_i"
  "nfos\030\002 \003(\0132\035.milvus.proto.index.IndexInf"
  "o\"H\n\034GetIndexBuildProgressRequest\022\024\n\014col"
  "lectionID\030\001 \001(\003\022\022\n\nindex_name\030\002 \001(\t\"\222\001\n\035"
  "GetIndexBuildProgressResponse\022+\n\006status\030"
  "\001 \001(\0132\033.milvus.proto.common.Status\022\024\n\014in"
  "dexed_rows\030\002 \001(\003\022\022\n\ntotal_rows\030\003 \001(\003\022\032\n\022"
  "pending_index_rows\030\004 \001(\003\"\304\001\n\rStorageConf"
  "ig\022\017\n\007address\030\001 \001(\t\022\024\n\014access_keyID\030\002 \001("
  "\t\022\031\n\021secret_access_key\030\003 \001(\t\022\016\n\006useSSL\030\004"
  " \001(\010\022\023\n\013bucket_name\030\005 \001(\t\022\021\n\troot_path\030\006"
  " \001(\t\022\016\n\006useIAM\030\007 \001(\010\022\023\n\013IAMEndpoint\030\010 \001("
  "\t\022\024\n\014storage_type\030\t \001(\t\"\337\002\n\020CreateJobReq"
  "uest\022\021\n\tclusterID\030\001 \001(\t\022\031\n\021index_file_pr"
  "efix\030\002 \001(\t\022\017\n\007buildID\030\003 \001(\003\022\022\n\ndata_path"
  "s\030\004 \003(\t\022\025\n\rindex_version\030\005 \001(\003\022\017\n\007indexI"
  "D\030\006 \001(\003\022\022\n\nindex_name\030\007 \001(\t\0229\n\016storage_c"
  "onfig\030\010 \001(\0132!.milvus.proto.index.Storage"
  "Config\0227\n\014index_params\030\t \003(\0132!.milvus.pr"
  "oto.common.KeyValuePair\0226\n\013type_params\030\n"
  " \003(\0132!.milvus.proto.common.KeyValuePair\022"
  "\020\n\010num_rows\030\013 \001(\003\"7\n\020QueryJobsRequest\022\021\n"
  "\tclusterID\030\001 \001(\t\022\020\n\010buildIDs\030\002 \003(\003\"\227\001\n\rI"
  "ndexTaskInfo\022\017\n\007buildID\030\001 \001(\003\022.\n\005state\030\002"
  " \001(\0162\037.milvus.proto.common.IndexState\022\027\n"
  "\017index_file_keys\030\003 \003(\t\022\027\n\017serialized_siz"
  "e\030\004 \001(\004\022\023\n\013fail_reason\030\005 \001(\t\"\213\001\n\021QueryJo"
  "bsResponse\022+\n\006status\030\001 \001(\0132\033.milvus.prot"
  "o.common.Status\022\021\n\tclusterID\030\002 \001(\t\0226\n\013in"
  "dex_infos\030\003 \003(\0132!.milvus.proto.index.Ind"
  "exTaskInfo\"6\n\017DropJobsRequest\022\021\n\tcluster"
  "ID\030\001 \001(\t\022\020\n\010buildIDs\030\002 \003(\003\"\226\001\n\007JobInfo\022\020"
  "\n\010num_rows\030\001 \001(\003\022\013\n\003dim\030\002 \001(\003\022\022\n\nstart_t"
  "ime\030\003 \001(\003\022\020\n\010end_time\030\004 \001(\003\0227\n\014index_par"
  "ams\030\005 \003(\0132!.milvus.proto.common.KeyValue"
  "Pair\022\r\n\005podID\030\006 \001(\003\"\024\n\022GetJobStatsReques"
  "t\"\350\001\n\023GetJobStatsResponse\022+\n\006status\030\001 \001("
  "\0132\033.milvus.proto.common.Status\022\025\n\rtotal_"
  "job_num\030\002 \001(\003\022\033\n\023in_progress_job_num\030\003 \001"
  "(\003\022\027\n\017enqueue_job_num\030\004 \001(\003\022\022\n\ntask_slot"
  "s\030\005 \001(\003\022.\n\tjob_infos\030\006 \003(\0132\033.milvus.prot"
  "o.index.JobInfo\022\023\n\013enable_disk\030\007 \001(\010\"E\n\031"
  "GetIndexStatisticsRequest\022\024\n\014collectionI"
  "D\030\001 \001(\003\022\022\n\nindex_name\030\002 \001(\t\"}\n\032GetIndexS"
  "tatisticsResponse\022+\n\006status\030\001 \001(\0132\033.milv"
  "us.proto.common.Status\0222\n\013index_infos\030\002 "
  "\003(\0132\035.milvus.proto.index.IndexInfo2\201\013\n\nI"
  "ndexCoord\022l\n\022GetComponentStates\022..milvus"
  ".proto.milvus.GetComponentStatesRequest\032"
  "$.milvus.proto.milvus.ComponentStates\"\000\022"
  "q\n\024GetStatisticsChannel\0222.milvus.proto.i"
  "nternal.GetStatisticsChannelRequest\032#.mi"
  "lvus.proto.milvus.StringResponse\"\000\022T\n\013Cr"
  "eateIndex\022&.milvus.proto.index.CreateInd"
  "exRequest\032\033.milvus.proto.common.Status\"\000"
  "\022f\n\rGetIndexState\022(.milvus.proto.index.G"
  "etIndexStateRequest\032).milvus.proto.index"
  ".GetIndexStateResponse\"\000\022{\n\024GetSegmentIn"
  "dexState\022/.milvus.proto.index.GetSegment"
  "IndexStateRequest\0320.milvus.proto.index.G"
  "etSegmentIndexStateResponse\"\000\022d\n\rGetInde"
  "xInfos\022\'.milvus.proto.index.GetIndexInfo"
  "Request\032(.milvus.proto.index.GetIndexInf"
  "oResponse\"\000\022P\n\tDropIndex\022$.milvus.proto."
  "index.DropIndexRequest\032\033.milvus.proto.co"
  "mmon.Status\"\000\022f\n\rDescribeIndex\022(.milvus."
  "proto.index.DescribeIndexRequest\032).milvu"
  "s.proto.index.DescribeIndexResponse\"\000\022u\n"
  "\022GetIndexStatistics\022-.milvus.proto.index"
  ".GetIndexStatisticsRequest\032..milvus.prot"
  "o.index.GetIndexStatisticsResponse\"\000\022~\n\025"
  "GetIndexBuildProgress\0220.milvus.proto.ind"
  "ex.GetIndexBuildProgressRequest\0321.milvus"
  ".proto.index.GetIndexBuildProgressRespon"
  "se\"\000\022{\n\022ShowConfigurations\0220.milvus.prot"
  "o.internal.ShowConfigurationsRequest\0321.m"
  "ilvus.proto.internal.ShowConfigurationsR"
  "esponse\"\000\022_\n\nGetMetrics\022&.milvus.proto.m"
  "ilvus.GetMetricsRequest\032\'.milvus.proto.m"
  "ilvus.GetMetricsResponse\"\000\022b\n\013CheckHealt"
  "h\022\'.milvus.proto.milvus.CheckHealthReque"
  "st\032(.milvus.proto.milvus.CheckHealthResp"
  "onse\"\0002\252\006\n\tIndexNode\022l\n\022GetComponentStat"
  "es\022..milvus.proto.milvus.GetComponentSta"
  "tesRequest\032$.milvus.proto.milvus.Compone"
  "ntStates\"\000\022q\n\024GetStatisticsChannel\0222.mil"
  "vus.proto.internal.GetStatisticsChannelR"
  "equest\032#.milvus.proto.milvus.StringRespo"
  "nse\"\000\022P\n\tCreateJob\022$.milvus.proto.index."
  "CreateJobRequest\032\033.milvus.proto.common.S"
  "tatus\"\000\022Z\n\tQueryJobs\022$.milvus.proto.inde"
  "x.QueryJobsRequest\032%.milvus.proto.index."
  "QueryJobsResponse\"\000\022N\n\010DropJobs\022#.milvus"
  ".proto.index.DropJobsRequest\032\033.milvus.pr"
  "oto.common.Status\"\000\022`\n\013GetJobStats\022&.mil"
  "vus.proto.index.GetJobStatsRequest\032\'.mil"
  "vus.proto.index.GetJobStatsResponse\"\000\022{\n"
  "\022ShowConfigurations\0220.milvus.proto.inter"
  "nal.ShowConfigurationsRequest\0321.milvus.p"
  "roto.internal.ShowConfigurationsResponse"
  "\"\000\022_\n\nGetMetrics\022&.milvus.proto.milvus.G"
  "etMetricsRequest\032\'.milvus.proto.milvus.G"
  "etMetricsResponse\"\000B4Z2github.com/milvus"
  "-io/milvus/internal/proto/indexpbb\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_index_5fcoord_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_internal_2eproto,
  &::descriptor_table_milvus_2eproto,
};
static ::_pbi::once_flag descriptor_table_index_5fcoord_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_index_5fcoord_2eproto = {
    false, false, 7161, descriptor_table_protodef_index_5fcoord_2eproto,
    "index_coord.proto",
    &descriptor_table_index_5fcoord_2eproto_once, descriptor_table_index_5fcoord_2eproto_deps, 3, 32,
    schemas, file_default_instances, TableStruct_index_5fcoord_2eproto::offsets,
    file_level_metadata_index_5fcoord_2eproto, file_level_enum_descriptors_index_5fcoord_2eproto,
    file_level_service_descriptors_index_5fcoord_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_index_5fcoord_2eproto_getter() {
  return &descriptor_table_index_5fcoord_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_index_5fcoord_2eproto(&descriptor_table_index_5fcoord_2eproto);
namespace milvus {
namespace proto {
namespace index {

// ===================================================================

class IndexInfo::_Internal {
 public:
};

void IndexInfo::clear_type_params() {
  _impl_.type_params_.Clear();
}
void IndexInfo::clear_index_params() {
  _impl_.index_params_.Clear();
}
void IndexInfo::clear_user_index_params() {
  _impl_.user_index_params_.Clear();
}
IndexInfo::IndexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.IndexInfo)
}
IndexInfo::IndexInfo(const IndexInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_params_){from._impl_.type_params_}
    , decltype(_impl_.index_params_){from._impl_.index_params_}
    , decltype(_impl_.user_index_params_){from._impl_.user_index_params_}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.index_state_fail_reason_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.fieldid_){}
    , decltype(_impl_.indexid_){}
    , decltype(_impl_.indexed_rows_){}
    , decltype(_impl_.total_rows_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.is_auto_index_){}
    , decltype(_impl_.pending_index_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.index_state_fail_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_state_fail_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_state_fail_reason().empty()) {
    _this->_impl_.index_state_fail_reason_.Set(from._internal_index_state_fail_reason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pending_index_rows_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.pending_index_rows_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.IndexInfo)
}

inline void IndexInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_params_){arena}
    , decltype(_impl_.index_params_){arena}
    , decltype(_impl_.user_index_params_){arena}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.index_state_fail_reason_){}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.fieldid_){int64_t{0}}
    , decltype(_impl_.indexid_){int64_t{0}}
    , decltype(_impl_.indexed_rows_){int64_t{0}}
    , decltype(_impl_.total_rows_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.is_auto_index_){false}
    , decltype(_impl_.pending_index_rows_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_state_fail_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_state_fail_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexInfo::~IndexInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.IndexInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_params_.~RepeatedPtrField();
  _impl_.index_params_.~RepeatedPtrField();
  _impl_.user_index_params_.~RepeatedPtrField();
  _impl_.index_name_.Destroy();
  _impl_.index_state_fail_reason_.Destroy();
}

void IndexInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.IndexInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_params_.Clear();
  _impl_.index_params_.Clear();
  _impl_.user_index_params_.Clear();
  _impl_.index_name_.ClearToEmpty();
  _impl_.index_state_fail_reason_.ClearToEmpty();
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pending_index_rows_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.pending_index_rows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fieldID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.fieldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string index_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.IndexInfo.index_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 indexID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair type_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair index_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 indexed_rows = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.indexed_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_rows = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.total_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.IndexState state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::IndexState>(val));
        } else
          goto handle_unusual;
        continue;
      // string index_state_fail_reason = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_index_state_fail_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.IndexInfo.index_state_fail_reason"));
        } else
          goto handle_unusual;
        continue;
      // bool is_auto_index = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.is_auto_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair user_index_params = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_index_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 pending_index_rows = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.pending_index_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.IndexInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // int64 fieldID = 2;
  if (this->_internal_fieldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_fieldid(), target);
  }

  // string index_name = 3;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.IndexInfo.index_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_index_name(), target);
  }

  // int64 indexID = 4;
  if (this->_internal_indexid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_indexid(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair type_params = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_type_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_type_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 indexed_rows = 7;
  if (this->_internal_indexed_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_indexed_rows(), target);
  }

  // int64 total_rows = 8;
  if (this->_internal_total_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_total_rows(), target);
  }

  // .milvus.proto.common.IndexState state = 9;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_state(), target);
  }

  // string index_state_fail_reason = 10;
  if (!this->_internal_index_state_fail_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_state_fail_reason().data(), static_cast<int>(this->_internal_index_state_fail_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.IndexInfo.index_state_fail_reason");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_index_state_fail_reason(), target);
  }

  // bool is_auto_index = 11;
  if (this->_internal_is_auto_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_auto_index(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair user_index_params = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_index_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_user_index_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 pending_index_rows = 13;
  if (this->_internal_pending_index_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_pending_index_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.IndexInfo)
  return target;
}

size_t IndexInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.IndexInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair type_params = 5;
  total_size += 1UL * this->_internal_type_params_size();
  for (const auto& msg : this->_impl_.type_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 6;
  total_size += 1UL * this->_internal_index_params_size();
  for (const auto& msg : this->_impl_.index_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.common.KeyValuePair user_index_params = 12;
  total_size += 1UL * this->_internal_user_index_params_size();
  for (const auto& msg : this->_impl_.user_index_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string index_name = 3;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // string index_state_fail_reason = 10;
  if (!this->_internal_index_state_fail_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_state_fail_reason());
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 fieldID = 2;
  if (this->_internal_fieldid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fieldid());
  }

  // int64 indexID = 4;
  if (this->_internal_indexid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_indexid());
  }

  // int64 indexed_rows = 7;
  if (this->_internal_indexed_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_indexed_rows());
  }

  // int64 total_rows = 8;
  if (this->_internal_total_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_rows());
  }

  // .milvus.proto.common.IndexState state = 9;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // bool is_auto_index = 11;
  if (this->_internal_is_auto_index() != 0) {
    total_size += 1 + 1;
  }

  // int64 pending_index_rows = 13;
  if (this->_internal_pending_index_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pending_index_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexInfo::GetClassData() const { return &_class_data_; }


void IndexInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexInfo*>(&to_msg);
  auto& from = static_cast<const IndexInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.IndexInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.type_params_.MergeFrom(from._impl_.type_params_);
  _this->_impl_.index_params_.MergeFrom(from._impl_.index_params_);
  _this->_impl_.user_index_params_.MergeFrom(from._impl_.user_index_params_);
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (!from._internal_index_state_fail_reason().empty()) {
    _this->_internal_set_index_state_fail_reason(from._internal_index_state_fail_reason());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_fieldid() != 0) {
    _this->_internal_set_fieldid(from._internal_fieldid());
  }
  if (from._internal_indexid() != 0) {
    _this->_internal_set_indexid(from._internal_indexid());
  }
  if (from._internal_indexed_rows() != 0) {
    _this->_internal_set_indexed_rows(from._internal_indexed_rows());
  }
  if (from._internal_total_rows() != 0) {
    _this->_internal_set_total_rows(from._internal_total_rows());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_is_auto_index() != 0) {
    _this->_internal_set_is_auto_index(from._internal_is_auto_index());
  }
  if (from._internal_pending_index_rows() != 0) {
    _this->_internal_set_pending_index_rows(from._internal_pending_index_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexInfo::CopyFrom(const IndexInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.IndexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexInfo::IsInitialized() const {
  return true;
}

void IndexInfo::InternalSwap(IndexInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.type_params_.InternalSwap(&other->_impl_.type_params_);
  _impl_.index_params_.InternalSwap(&other->_impl_.index_params_);
  _impl_.user_index_params_.InternalSwap(&other->_impl_.user_index_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_state_fail_reason_, lhs_arena,
      &other->_impl_.index_state_fail_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexInfo, _impl_.pending_index_rows_)
      + sizeof(IndexInfo::_impl_.pending_index_rows_)
      - PROTOBUF_FIELD_OFFSET(IndexInfo, _impl_.collectionid_)>(
          reinterpret_cast<char*>(&_impl_.collectionid_),
          reinterpret_cast<char*>(&other->_impl_.collectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[0]);
}

// ===================================================================

class FieldIndex::_Internal {
 public:
  static const ::milvus::proto::index::IndexInfo& index_info(const FieldIndex* msg);
};

const ::milvus::proto::index::IndexInfo&
FieldIndex::_Internal::index_info(const FieldIndex* msg) {
  return *msg->_impl_.index_info_;
}
FieldIndex::FieldIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.FieldIndex)
}
FieldIndex::FieldIndex(const FieldIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FieldIndex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_info_){nullptr}
    , decltype(_impl_.create_time_){}
    , decltype(_impl_.deleted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_index_info()) {
    _this->_impl_.index_info_ = new ::milvus::proto::index::IndexInfo(*from._impl_.index_info_);
  }
  ::memcpy(&_impl_.create_time_, &from._impl_.create_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deleted_) -
    reinterpret_cast<char*>(&_impl_.create_time_)) + sizeof(_impl_.deleted_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.FieldIndex)
}

inline void FieldIndex::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_info_){nullptr}
    , decltype(_impl_.create_time_){uint64_t{0u}}
    , decltype(_impl_.deleted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FieldIndex::~FieldIndex() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.FieldIndex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.index_info_;
}

void FieldIndex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FieldIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.FieldIndex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.index_info_ != nullptr) {
    delete _impl_.index_info_;
  }
  _impl_.index_info_ = nullptr;
  ::memset(&_impl_.create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.deleted_) -
      reinterpret_cast<char*>(&_impl_.create_time_)) + sizeof(_impl_.deleted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldIndex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.index.IndexInfo index_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_index_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool deleted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 create_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldIndex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.FieldIndex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.index.IndexInfo index_info = 1;
  if (this->_internal_has_index_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::index_info(this),
        _Internal::index_info(this).GetCachedSize(), target, stream);
  }

  // bool deleted = 2;
  if (this->_internal_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_deleted(), target);
  }

  // uint64 create_time = 3;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_create_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.FieldIndex)
  return target;
}

size_t FieldIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.FieldIndex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.index.IndexInfo index_info = 1;
  if (this->_internal_has_index_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.index_info_);
  }

  // uint64 create_time = 3;
  if (this->_internal_create_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_create_time());
  }

  // bool deleted = 2;
  if (this->_internal_deleted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldIndex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FieldIndex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldIndex::GetClassData() const { return &_class_data_; }


void FieldIndex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FieldIndex*>(&to_msg);
  auto& from = static_cast<const FieldIndex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.FieldIndex)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_index_info()) {
    _this->_internal_mutable_index_info()->::milvus::proto::index::IndexInfo::MergeFrom(
        from._internal_index_info());
  }
  if (from._internal_create_time() != 0) {
    _this->_internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_deleted() != 0) {
    _this->_internal_set_deleted(from._internal_deleted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldIndex::CopyFrom(const FieldIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.FieldIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldIndex::IsInitialized() const {
  return true;
}

void FieldIndex::InternalSwap(FieldIndex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldIndex, _impl_.deleted_)
      + sizeof(FieldIndex::_impl_.deleted_)
      - PROTOBUF_FIELD_OFFSET(FieldIndex, _impl_.index_info_)>(
          reinterpret_cast<char*>(&_impl_.index_info_),
          reinterpret_cast<char*>(&other->_impl_.index_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldIndex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[1]);
}

// ===================================================================

class SegmentIndex::_Internal {
 public:
};

SegmentIndex::SegmentIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.SegmentIndex)
}
SegmentIndex::SegmentIndex(const SegmentIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentIndex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_file_keys_){from._impl_.index_file_keys_}
    , decltype(_impl_.fail_reason_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.partitionid_){}
    , decltype(_impl_.segmentid_){}
    , decltype(_impl_.num_rows_){}
    , decltype(_impl_.indexid_){}
    , decltype(_impl_.buildid_){}
    , decltype(_impl_.nodeid_){}
    , decltype(_impl_.index_version_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.deleted_){}
    , decltype(_impl_.write_handoff_){}
    , decltype(_impl_.create_time_){}
    , decltype(_impl_.serialize_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fail_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fail_reason().empty()) {
    _this->_impl_.fail_reason_.Set(from._internal_fail_reason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.serialize_size_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.serialize_size_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.SegmentIndex)
}

inline void SegmentIndex::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_file_keys_){arena}
    , decltype(_impl_.fail_reason_){}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.partitionid_){int64_t{0}}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.num_rows_){int64_t{0}}
    , decltype(_impl_.indexid_){int64_t{0}}
    , decltype(_impl_.buildid_){int64_t{0}}
    , decltype(_impl_.nodeid_){int64_t{0}}
    , decltype(_impl_.index_version_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.deleted_){false}
    , decltype(_impl_.write_handoff_){false}
    , decltype(_impl_.create_time_){uint64_t{0u}}
    , decltype(_impl_.serialize_size_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fail_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SegmentIndex::~SegmentIndex() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.SegmentIndex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_file_keys_.~RepeatedPtrField();
  _impl_.fail_reason_.Destroy();
}

void SegmentIndex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.SegmentIndex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_file_keys_.Clear();
  _impl_.fail_reason_.ClearToEmpty();
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.serialize_size_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.serialize_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentIndex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 partitionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segmentID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_rows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 indexID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 buildID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.buildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 nodeID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 index_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.index_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.IndexState state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::IndexState>(val));
        } else
          goto handle_unusual;
        continue;
      // string fail_reason = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_fail_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.SegmentIndex.fail_reason"));
        } else
          goto handle_unusual;
        continue;
      // repeated string index_file_keys = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_index_file_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.SegmentIndex.index_file_keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool deleted = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 create_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 serialize_size = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.serialize_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool write_handoff = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.write_handoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentIndex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.SegmentIndex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 2;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_partitionid(), target);
  }

  // int64 segmentID = 3;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_segmentid(), target);
  }

  // int64 num_rows = 4;
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_num_rows(), target);
  }

  // int64 indexID = 5;
  if (this->_internal_indexid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_indexid(), target);
  }

  // int64 buildID = 6;
  if (this->_internal_buildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_buildid(), target);
  }

  // int64 nodeID = 7;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_nodeid(), target);
  }

  // int64 index_version = 8;
  if (this->_internal_index_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_index_version(), target);
  }

  // .milvus.proto.common.IndexState state = 9;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_state(), target);
  }

  // string fail_reason = 10;
  if (!this->_internal_fail_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fail_reason().data(), static_cast<int>(this->_internal_fail_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.SegmentIndex.fail_reason");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_fail_reason(), target);
  }

  // repeated string index_file_keys = 11;
  for (int i = 0, n = this->_internal_index_file_keys_size(); i < n; i++) {
    const auto& s = this->_internal_index_file_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.SegmentIndex.index_file_keys");
    target = stream->WriteString(11, s, target);
  }

  // bool deleted = 12;
  if (this->_internal_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_deleted(), target);
  }

  // uint64 create_time = 13;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_create_time(), target);
  }

  // uint64 serialize_size = 14;
  if (this->_internal_serialize_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_serialize_size(), target);
  }

  // bool write_handoff = 15;
  if (this->_internal_write_handoff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_write_handoff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.SegmentIndex)
  return target;
}

size_t SegmentIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.SegmentIndex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string index_file_keys = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.index_file_keys_.size());
  for (int i = 0, n = _impl_.index_file_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.index_file_keys_.Get(i));
  }

  // string fail_reason = 10;
  if (!this->_internal_fail_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fail_reason());
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 partitionID = 2;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partitionid());
  }

  // int64 segmentID = 3;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // int64 num_rows = 4;
  if (this->_internal_num_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_rows());
  }

  // int64 indexID = 5;
  if (this->_internal_indexid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_indexid());
  }

  // int64 buildID = 6;
  if (this->_internal_buildid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_buildid());
  }

  // int64 nodeID = 7;
  if (this->_internal_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nodeid());
  }

  // int64 index_version = 8;
  if (this->_internal_index_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index_version());
  }

  // .milvus.proto.common.IndexState state = 9;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // bool deleted = 12;
  if (this->_internal_deleted() != 0) {
    total_size += 1 + 1;
  }

  // bool write_handoff = 15;
  if (this->_internal_write_handoff() != 0) {
    total_size += 1 + 1;
  }

  // uint64 create_time = 13;
  if (this->_internal_create_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_create_time());
  }

  // uint64 serialize_size = 14;
  if (this->_internal_serialize_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_serialize_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentIndex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentIndex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentIndex::GetClassData() const { return &_class_data_; }


void SegmentIndex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentIndex*>(&to_msg);
  auto& from = static_cast<const SegmentIndex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.SegmentIndex)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_file_keys_.MergeFrom(from._impl_.index_file_keys_);
  if (!from._internal_fail_reason().empty()) {
    _this->_internal_set_fail_reason(from._internal_fail_reason());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_num_rows() != 0) {
    _this->_internal_set_num_rows(from._internal_num_rows());
  }
  if (from._internal_indexid() != 0) {
    _this->_internal_set_indexid(from._internal_indexid());
  }
  if (from._internal_buildid() != 0) {
    _this->_internal_set_buildid(from._internal_buildid());
  }
  if (from._internal_nodeid() != 0) {
    _this->_internal_set_nodeid(from._internal_nodeid());
  }
  if (from._internal_index_version() != 0) {
    _this->_internal_set_index_version(from._internal_index_version());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_deleted() != 0) {
    _this->_internal_set_deleted(from._internal_deleted());
  }
  if (from._internal_write_handoff() != 0) {
    _this->_internal_set_write_handoff(from._internal_write_handoff());
  }
  if (from._internal_create_time() != 0) {
    _this->_internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_serialize_size() != 0) {
    _this->_internal_set_serialize_size(from._internal_serialize_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentIndex::CopyFrom(const SegmentIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.SegmentIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentIndex::IsInitialized() const {
  return true;
}

void SegmentIndex::InternalSwap(SegmentIndex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_file_keys_.InternalSwap(&other->_impl_.index_file_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fail_reason_, lhs_arena,
      &other->_impl_.fail_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentIndex, _impl_.serialize_size_)
      + sizeof(SegmentIndex::_impl_.serialize_size_)
      - PROTOBUF_FIELD_OFFSET(SegmentIndex, _impl_.collectionid_)>(
          reinterpret_cast<char*>(&_impl_.collectionid_),
          reinterpret_cast<char*>(&other->_impl_.collectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentIndex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[2]);
}

// ===================================================================

class RegisterNodeRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const RegisterNodeRequest* msg);
  static const ::milvus::proto::common::Address& address(const RegisterNodeRequest* msg);
};

const ::milvus::proto::common::MsgBase&
RegisterNodeRequest::_Internal::base(const RegisterNodeRequest* msg) {
  return *msg->_impl_.base_;
}
const ::milvus::proto::common::Address&
RegisterNodeRequest::_Internal::address(const RegisterNodeRequest* msg) {
  return *msg->_impl_.address_;
}
void RegisterNodeRequest::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void RegisterNodeRequest::clear_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
}
RegisterNodeRequest::RegisterNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.RegisterNodeRequest)
}
RegisterNodeRequest::RegisterNodeRequest(const RegisterNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterNodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.address_){nullptr}
    , decltype(_impl_.nodeid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::milvus::proto::common::MsgBase(*from._impl_.base_);
  }
  if (from._internal_has_address()) {
    _this->_impl_.address_ = new ::milvus::proto::common::Address(*from._impl_.address_);
  }
  _this->_impl_.nodeid_ = from._impl_.nodeid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.RegisterNodeRequest)
}

inline void RegisterNodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.address_){nullptr}
    , decltype(_impl_.nodeid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterNodeRequest::~RegisterNodeRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.RegisterNodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterNodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.address_;
}

void RegisterNodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.RegisterNodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
  _impl_.nodeid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterNodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.Address address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 nodeID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterNodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.RegisterNodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.Address address = 2;
  if (this->_internal_has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  // int64 nodeID = 3;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_nodeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.RegisterNodeRequest)
  return target;
}

size_t RegisterNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.RegisterNodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .milvus.proto.common.Address address = 2;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.address_);
  }

  // int64 nodeID = 3;
  if (this->_internal_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nodeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterNodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterNodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterNodeRequest::GetClassData() const { return &_class_data_; }


void RegisterNodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterNodeRequest*>(&to_msg);
  auto& from = static_cast<const RegisterNodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.RegisterNodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_address()) {
    _this->_internal_mutable_address()->::milvus::proto::common::Address::MergeFrom(
        from._internal_address());
  }
  if (from._internal_nodeid() != 0) {
    _this->_internal_set_nodeid(from._internal_nodeid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterNodeRequest::CopyFrom(const RegisterNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.RegisterNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNodeRequest::IsInitialized() const {
  return true;
}

void RegisterNodeRequest::InternalSwap(RegisterNodeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterNodeRequest, _impl_.nodeid_)
      + sizeof(RegisterNodeRequest::_impl_.nodeid_)
      - PROTOBUF_FIELD_OFFSET(RegisterNodeRequest, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterNodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[3]);
}

// ===================================================================

class RegisterNodeResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const RegisterNodeResponse* msg);
  static const ::milvus::proto::internal::InitParams& init_params(const RegisterNodeResponse* msg);
};

const ::milvus::proto::common::Status&
RegisterNodeResponse::_Internal::status(const RegisterNodeResponse* msg) {
  return *msg->_impl_.status_;
}
const ::milvus::proto::internal::InitParams&
RegisterNodeResponse::_Internal::init_params(const RegisterNodeResponse* msg) {
  return *msg->_impl_.init_params_;
}
void RegisterNodeResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void RegisterNodeResponse::clear_init_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.init_params_ != nullptr) {
    delete _impl_.init_params_;
  }
  _impl_.init_params_ = nullptr;
}
RegisterNodeResponse::RegisterNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.RegisterNodeResponse)
}
RegisterNodeResponse::RegisterNodeResponse(const RegisterNodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterNodeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.init_params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_init_params()) {
    _this->_impl_.init_params_ = new ::milvus::proto::internal::InitParams(*from._impl_.init_params_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.RegisterNodeResponse)
}

inline void RegisterNodeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.init_params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterNodeResponse::~RegisterNodeResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.RegisterNodeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterNodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.init_params_;
}

void RegisterNodeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.RegisterNodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.init_params_ != nullptr) {
    delete _impl_.init_params_;
  }
  _impl_.init_params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterNodeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.internal.InitParams init_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterNodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.RegisterNodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.internal.InitParams init_params = 2;
  if (this->_internal_has_init_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::init_params(this),
        _Internal::init_params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.RegisterNodeResponse)
  return target;
}

size_t RegisterNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.RegisterNodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .milvus.proto.internal.InitParams init_params = 2;
  if (this->_internal_has_init_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.init_params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterNodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterNodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterNodeResponse::GetClassData() const { return &_class_data_; }


void RegisterNodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterNodeResponse*>(&to_msg);
  auto& from = static_cast<const RegisterNodeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.RegisterNodeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_init_params()) {
    _this->_internal_mutable_init_params()->::milvus::proto::internal::InitParams::MergeFrom(
        from._internal_init_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterNodeResponse::CopyFrom(const RegisterNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.RegisterNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNodeResponse::IsInitialized() const {
  return true;
}

void RegisterNodeResponse::InternalSwap(RegisterNodeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterNodeResponse, _impl_.init_params_)
      + sizeof(RegisterNodeResponse::_impl_.init_params_)
      - PROTOBUF_FIELD_OFFSET(RegisterNodeResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterNodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[4]);
}

// ===================================================================

class GetIndexStateRequest::_Internal {
 public:
};

GetIndexStateRequest::GetIndexStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.GetIndexStateRequest)
}
GetIndexStateRequest::GetIndexStateRequest(const GetIndexStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIndexStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.collectionid_ = from._impl_.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.GetIndexStateRequest)
}

inline void GetIndexStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetIndexStateRequest::~GetIndexStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.GetIndexStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIndexStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_name_.Destroy();
}

void GetIndexStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIndexStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.GetIndexStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_name_.ClearToEmpty();
  _impl_.collectionid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string index_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.GetIndexStateRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetIndexStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.GetIndexStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // string index_name = 2;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.GetIndexStateRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.GetIndexStateRequest)
  return target;
}

size_t GetIndexStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.GetIndexStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index_name = 2;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIndexStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIndexStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIndexStateRequest::GetClassData() const { return &_class_data_; }


void GetIndexStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIndexStateRequest*>(&to_msg);
  auto& from = static_cast<const GetIndexStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.GetIndexStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIndexStateRequest::CopyFrom(const GetIndexStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.GetIndexStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexStateRequest::IsInitialized() const {
  return true;
}

void GetIndexStateRequest::InternalSwap(GetIndexStateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  swap(_impl_.collectionid_, other->_impl_.collectionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[5]);
}

// ===================================================================

class GetIndexStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetIndexStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetIndexStateResponse::_Internal::status(const GetIndexStateResponse* msg) {
  return *msg->_impl_.status_;
}
void GetIndexStateResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetIndexStateResponse::GetIndexStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.GetIndexStateResponse)
}
GetIndexStateResponse::GetIndexStateResponse(const GetIndexStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIndexStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fail_reason_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fail_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fail_reason().empty()) {
    _this->_impl_.fail_reason_.Set(from._internal_fail_reason(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.GetIndexStateResponse)
}

inline void GetIndexStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fail_reason_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fail_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetIndexStateResponse::~GetIndexStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.GetIndexStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIndexStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fail_reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetIndexStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIndexStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.GetIndexStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fail_reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.IndexState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::IndexState>(val));
        } else
          goto handle_unusual;
        continue;
      // string fail_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fail_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.GetIndexStateResponse.fail_reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetIndexStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.GetIndexStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .milvus.proto.common.IndexState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // string fail_reason = 3;
  if (!this->_internal_fail_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fail_reason().data(), static_cast<int>(this->_internal_fail_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.GetIndexStateResponse.fail_reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fail_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.GetIndexStateResponse)
  return target;
}

size_t GetIndexStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.GetIndexStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fail_reason = 3;
  if (!this->_internal_fail_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fail_reason());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .milvus.proto.common.IndexState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIndexStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIndexStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIndexStateResponse::GetClassData() const { return &_class_data_; }


void GetIndexStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIndexStateResponse*>(&to_msg);
  auto& from = static_cast<const GetIndexStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.GetIndexStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fail_reason().empty()) {
    _this->_internal_set_fail_reason(from._internal_fail_reason());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIndexStateResponse::CopyFrom(const GetIndexStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.GetIndexStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexStateResponse::IsInitialized() const {
  return true;
}

void GetIndexStateResponse::InternalSwap(GetIndexStateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fail_reason_, lhs_arena,
      &other->_impl_.fail_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetIndexStateResponse, _impl_.state_)
      + sizeof(GetIndexStateResponse::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(GetIndexStateResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[6]);
}

// ===================================================================

class GetSegmentIndexStateRequest::_Internal {
 public:
};

GetSegmentIndexStateRequest::GetSegmentIndexStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.GetSegmentIndexStateRequest)
}
GetSegmentIndexStateRequest::GetSegmentIndexStateRequest(const GetSegmentIndexStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSegmentIndexStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){from._impl_.segmentids_}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.collectionid_ = from._impl_.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.GetSegmentIndexStateRequest)
}

inline void GetSegmentIndexStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){arena}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSegmentIndexStateRequest::~GetSegmentIndexStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.GetSegmentIndexStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSegmentIndexStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentids_.~RepeatedField();
  _impl_.index_name_.Destroy();
}

void GetSegmentIndexStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSegmentIndexStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.GetSegmentIndexStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segmentids_.Clear();
  _impl_.index_name_.ClearToEmpty();
  _impl_.collectionid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSegmentIndexStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string index_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.GetSegmentIndexStateRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segmentIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSegmentIndexStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.GetSegmentIndexStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // string index_name = 2;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.GetSegmentIndexStateRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index_name(), target);
  }

  // repeated int64 segmentIDs = 3;
  {
    int byte_size = _impl_._segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_segmentids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.GetSegmentIndexStateRequest)
  return target;
}

size_t GetSegmentIndexStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.GetSegmentIndexStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string index_name = 2;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSegmentIndexStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSegmentIndexStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSegmentIndexStateRequest::GetClassData() const { return &_class_data_; }


void GetSegmentIndexStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSegmentIndexStateRequest*>(&to_msg);
  auto& from = static_cast<const GetSegmentIndexStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.GetSegmentIndexStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segmentids_.MergeFrom(from._impl_.segmentids_);
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSegmentIndexStateRequest::CopyFrom(const GetSegmentIndexStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.GetSegmentIndexStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentIndexStateRequest::IsInitialized() const {
  return true;
}

void GetSegmentIndexStateRequest::InternalSwap(GetSegmentIndexStateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentids_.InternalSwap(&other->_impl_.segmentids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  swap(_impl_.collectionid_, other->_impl_.collectionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSegmentIndexStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[7]);
}

// ===================================================================

class SegmentIndexState::_Internal {
 public:
};

SegmentIndexState::SegmentIndexState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.SegmentIndexState)
}
SegmentIndexState::SegmentIndexState(const SegmentIndexState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentIndexState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fail_reason_){}
    , decltype(_impl_.segmentid_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fail_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fail_reason().empty()) {
    _this->_impl_.fail_reason_.Set(from._internal_fail_reason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.segmentid_, &from._impl_.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.SegmentIndexState)
}

inline void SegmentIndexState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fail_reason_){}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fail_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SegmentIndexState::~SegmentIndexState() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.SegmentIndexState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentIndexState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fail_reason_.Destroy();
}

void SegmentIndexState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentIndexState::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.SegmentIndexState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fail_reason_.ClearToEmpty();
  ::memset(&_impl_.segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentIndexState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.IndexState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::IndexState>(val));
        } else
          goto handle_unusual;
        continue;
      // string fail_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fail_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.SegmentIndexState.fail_reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentIndexState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.SegmentIndexState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // .milvus.proto.common.IndexState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // string fail_reason = 3;
  if (!this->_internal_fail_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fail_reason().data(), static_cast<int>(this->_internal_fail_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.SegmentIndexState.fail_reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fail_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.SegmentIndexState)
  return target;
}

size_t SegmentIndexState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.SegmentIndexState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fail_reason = 3;
  if (!this->_internal_fail_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fail_reason());
  }

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // .milvus.proto.common.IndexState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentIndexState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentIndexState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentIndexState::GetClassData() const { return &_class_data_; }


void SegmentIndexState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentIndexState*>(&to_msg);
  auto& from = static_cast<const SegmentIndexState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.SegmentIndexState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fail_reason().empty()) {
    _this->_internal_set_fail_reason(from._internal_fail_reason());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentIndexState::CopyFrom(const SegmentIndexState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.SegmentIndexState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentIndexState::IsInitialized() const {
  return true;
}

void SegmentIndexState::InternalSwap(SegmentIndexState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fail_reason_, lhs_arena,
      &other->_impl_.fail_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentIndexState, _impl_.state_)
      + sizeof(SegmentIndexState::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(SegmentIndexState, _impl_.segmentid_)>(
          reinterpret_cast<char*>(&_impl_.segmentid_),
          reinterpret_cast<char*>(&other->_impl_.segmentid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentIndexState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[8]);
}

// ===================================================================

class GetSegmentIndexStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetSegmentIndexStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetSegmentIndexStateResponse::_Internal::status(const GetSegmentIndexStateResponse* msg) {
  return *msg->_impl_.status_;
}
void GetSegmentIndexStateResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetSegmentIndexStateResponse::GetSegmentIndexStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.GetSegmentIndexStateResponse)
}
GetSegmentIndexStateResponse::GetSegmentIndexStateResponse(const GetSegmentIndexStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSegmentIndexStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){from._impl_.states_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.GetSegmentIndexStateResponse)
}

inline void GetSegmentIndexStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSegmentIndexStateResponse::~GetSegmentIndexStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.GetSegmentIndexStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSegmentIndexStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.states_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetSegmentIndexStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSegmentIndexStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.GetSegmentIndexStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.states_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSegmentIndexStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.index.SegmentIndexState states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSegmentIndexStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.GetSegmentIndexStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.index.SegmentIndexState states = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.GetSegmentIndexStateResponse)
  return target;
}

size_t GetSegmentIndexStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.GetSegmentIndexStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.index.SegmentIndexState states = 2;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->_impl_.states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSegmentIndexStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSegmentIndexStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSegmentIndexStateResponse::GetClassData() const { return &_class_data_; }


void GetSegmentIndexStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSegmentIndexStateResponse*>(&to_msg);
  auto& from = static_cast<const GetSegmentIndexStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.GetSegmentIndexStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.states_.MergeFrom(from._impl_.states_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSegmentIndexStateResponse::CopyFrom(const GetSegmentIndexStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.GetSegmentIndexStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentIndexStateResponse::IsInitialized() const {
  return true;
}

void GetSegmentIndexStateResponse::InternalSwap(GetSegmentIndexStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSegmentIndexStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[9]);
}

// ===================================================================

class CreateIndexRequest::_Internal {
 public:
};

void CreateIndexRequest::clear_type_params() {
  _impl_.type_params_.Clear();
}
void CreateIndexRequest::clear_index_params() {
  _impl_.index_params_.Clear();
}
void CreateIndexRequest::clear_user_index_params() {
  _impl_.user_index_params_.Clear();
}
CreateIndexRequest::CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.CreateIndexRequest)
}
CreateIndexRequest::CreateIndexRequest(const CreateIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateIndexRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_params_){from._impl_.type_params_}
    , decltype(_impl_.index_params_){from._impl_.index_params_}
    , decltype(_impl_.user_index_params_){from._impl_.user_index_params_}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.fieldid_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.is_auto_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_auto_index_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.is_auto_index_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.CreateIndexRequest)
}

inline void CreateIndexRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_params_){arena}
    , decltype(_impl_.index_params_){arena}
    , decltype(_impl_.user_index_params_){arena}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.fieldid_){int64_t{0}}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.is_auto_index_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateIndexRequest::~CreateIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.CreateIndexRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_params_.~RepeatedPtrField();
  _impl_.index_params_.~RepeatedPtrField();
  _impl_.user_index_params_.~RepeatedPtrField();
  _impl_.index_name_.Destroy();
}

void CreateIndexRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.CreateIndexRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_params_.Clear();
  _impl_.index_params_.Clear();
  _impl_.user_index_params_.Clear();
  _impl_.index_name_.ClearToEmpty();
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_auto_index_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.is_auto_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateIndexRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fieldID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.fieldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string index_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.CreateIndexRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair type_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair index_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_auto_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_auto_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair user_index_params = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_index_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateIndexRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.CreateIndexRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // int64 fieldID = 2;
  if (this->_internal_fieldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_fieldid(), target);
  }

  // string index_name = 3;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.CreateIndexRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_index_name(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair type_params = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_type_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_type_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_timestamp(), target);
  }

  // bool is_auto_index = 7;
  if (this->_internal_is_auto_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_auto_index(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair user_index_params = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_index_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_user_index_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.CreateIndexRequest)
  return target;
}

size_t CreateIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.CreateIndexRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair type_params = 4;
  total_size += 1UL * this->_internal_type_params_size();
  for (const auto& msg : this->_impl_.type_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 5;
  total_size += 1UL * this->_internal_index_params_size();
  for (const auto& msg : this->_impl_.index_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.common.KeyValuePair user_index_params = 8;
  total_size += 1UL * this->_internal_user_index_params_size();
  for (const auto& msg : this->_impl_.user_index_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string index_name = 3;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 fieldID = 2;
  if (this->_internal_fieldid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fieldid());
  }

  // uint64 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // bool is_auto_index = 7;
  if (this->_internal_is_auto_index() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateIndexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateIndexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateIndexRequest::GetClassData() const { return &_class_data_; }


void CreateIndexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateIndexRequest*>(&to_msg);
  auto& from = static_cast<const CreateIndexRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.CreateIndexRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.type_params_.MergeFrom(from._impl_.type_params_);
  _this->_impl_.index_params_.MergeFrom(from._impl_.index_params_);
  _this->_impl_.user_index_params_.MergeFrom(from._impl_.user_index_params_);
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_fieldid() != 0) {
    _this->_internal_set_fieldid(from._internal_fieldid());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_is_auto_index() != 0) {
    _this->_internal_set_is_auto_index(from._internal_is_auto_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateIndexRequest::CopyFrom(const CreateIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.CreateIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIndexRequest::IsInitialized() const {
  return true;
}

void CreateIndexRequest::InternalSwap(CreateIndexRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.type_params_.InternalSwap(&other->_impl_.type_params_);
  _impl_.index_params_.InternalSwap(&other->_impl_.index_params_);
  _impl_.user_index_params_.InternalSwap(&other->_impl_.user_index_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateIndexRequest, _impl_.is_auto_index_)
      + sizeof(CreateIndexRequest::_impl_.is_auto_index_)
      - PROTOBUF_FIELD_OFFSET(CreateIndexRequest, _impl_.collectionid_)>(
          reinterpret_cast<char*>(&_impl_.collectionid_),
          reinterpret_cast<char*>(&other->_impl_.collectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateIndexRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[10]);
}

// ===================================================================

class GetIndexInfoRequest::_Internal {
 public:
};

GetIndexInfoRequest::GetIndexInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.GetIndexInfoRequest)
}
GetIndexInfoRequest::GetIndexInfoRequest(const GetIndexInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIndexInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){from._impl_.segmentids_}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.collectionid_ = from._impl_.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.GetIndexInfoRequest)
}

inline void GetIndexInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentids_){arena}
    , /*decltype(_impl_._segmentids_cached_byte_size_)*/{0}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetIndexInfoRequest::~GetIndexInfoRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.GetIndexInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIndexInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentids_.~RepeatedField();
  _impl_.index_name_.Destroy();
}

void GetIndexInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIndexInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.GetIndexInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segmentids_.Clear();
  _impl_.index_name_.ClearToEmpty();
  _impl_.collectionid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 segmentIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string index_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.GetIndexInfoRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetIndexInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.GetIndexInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // repeated int64 segmentIDs = 2;
  {
    int byte_size = _impl_._segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_segmentids(), byte_size, target);
    }
  }

  // string index_name = 3;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.GetIndexInfoRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.GetIndexInfoRequest)
  return target;
}

size_t GetIndexInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.GetIndexInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string index_name = 3;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIndexInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIndexInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIndexInfoRequest::GetClassData() const { return &_class_data_; }


void GetIndexInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIndexInfoRequest*>(&to_msg);
  auto& from = static_cast<const GetIndexInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.GetIndexInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segmentids_.MergeFrom(from._impl_.segmentids_);
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIndexInfoRequest::CopyFrom(const GetIndexInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.GetIndexInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexInfoRequest::IsInitialized() const {
  return true;
}

void GetIndexInfoRequest::InternalSwap(GetIndexInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentids_.InternalSwap(&other->_impl_.segmentids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  swap(_impl_.collectionid_, other->_impl_.collectionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[11]);
}

// ===================================================================

class IndexFilePathInfo::_Internal {
 public:
};

void IndexFilePathInfo::clear_index_params() {
  _impl_.index_params_.Clear();
}
IndexFilePathInfo::IndexFilePathInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.IndexFilePathInfo)
}
IndexFilePathInfo::IndexFilePathInfo(const IndexFilePathInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexFilePathInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_params_){from._impl_.index_params_}
    , decltype(_impl_.index_file_paths_){from._impl_.index_file_paths_}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.segmentid_){}
    , decltype(_impl_.fieldid_){}
    , decltype(_impl_.indexid_){}
    , decltype(_impl_.buildid_){}
    , decltype(_impl_.serialized_size_){}
    , decltype(_impl_.index_version_){}
    , decltype(_impl_.num_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.segmentid_, &from._impl_.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_rows_) -
    reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.num_rows_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.IndexFilePathInfo)
}

inline void IndexFilePathInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_params_){arena}
    , decltype(_impl_.index_file_paths_){arena}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.fieldid_){int64_t{0}}
    , decltype(_impl_.indexid_){int64_t{0}}
    , decltype(_impl_.buildid_){int64_t{0}}
    , decltype(_impl_.serialized_size_){uint64_t{0u}}
    , decltype(_impl_.index_version_){int64_t{0}}
    , decltype(_impl_.num_rows_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexFilePathInfo::~IndexFilePathInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.IndexFilePathInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexFilePathInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_params_.~RepeatedPtrField();
  _impl_.index_file_paths_.~RepeatedPtrField();
  _impl_.index_name_.Destroy();
}

void IndexFilePathInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexFilePathInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.IndexFilePathInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_params_.Clear();
  _impl_.index_file_paths_.Clear();
  _impl_.index_name_.ClearToEmpty();
  ::memset(&_impl_.segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_rows_) -
      reinterpret_cast<char*>(&_impl_.segmentid_)) + sizeof(_impl_.num_rows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexFilePathInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fieldID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.fieldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 indexID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 buildID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.buildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string index_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.IndexFilePathInfo.index_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair index_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string index_file_paths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_index_file_paths();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.IndexFilePathInfo.index_file_paths"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 serialized_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.serialized_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 index_version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.index_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_rows = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexFilePathInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.IndexFilePathInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // int64 fieldID = 2;
  if (this->_internal_fieldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_fieldid(), target);
  }

  // int64 indexID = 3;
  if (this->_internal_indexid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_indexid(), target);
  }

  // int64 buildID = 4;
  if (this->_internal_buildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_buildid(), target);
  }

  // string index_name = 5;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.IndexFilePathInfo.index_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_index_name(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string index_file_paths = 7;
  for (int i = 0, n = this->_internal_index_file_paths_size(); i < n; i++) {
    const auto& s = this->_internal_index_file_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.IndexFilePathInfo.index_file_paths");
    target = stream->WriteString(7, s, target);
  }

  // uint64 serialized_size = 8;
  if (this->_internal_serialized_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_serialized_size(), target);
  }

  // int64 index_version = 9;
  if (this->_internal_index_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_index_version(), target);
  }

  // int64 num_rows = 10;
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.IndexFilePathInfo)
  return target;
}

size_t IndexFilePathInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.IndexFilePathInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair index_params = 6;
  total_size += 1UL * this->_internal_index_params_size();
  for (const auto& msg : this->_impl_.index_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string index_file_paths = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.index_file_paths_.size());
  for (int i = 0, n = _impl_.index_file_paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.index_file_paths_.Get(i));
  }

  // string index_name = 5;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // int64 segmentID = 1;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // int64 fieldID = 2;
  if (this->_internal_fieldid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fieldid());
  }

  // int64 indexID = 3;
  if (this->_internal_indexid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_indexid());
  }

  // int64 buildID = 4;
  if (this->_internal_buildid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_buildid());
  }

  // uint64 serialized_size = 8;
  if (this->_internal_serialized_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_serialized_size());
  }

  // int64 index_version = 9;
  if (this->_internal_index_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index_version());
  }

  // int64 num_rows = 10;
  if (this->_internal_num_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexFilePathInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexFilePathInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexFilePathInfo::GetClassData() const { return &_class_data_; }


void IndexFilePathInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexFilePathInfo*>(&to_msg);
  auto& from = static_cast<const IndexFilePathInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.IndexFilePathInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_params_.MergeFrom(from._impl_.index_params_);
  _this->_impl_.index_file_paths_.MergeFrom(from._impl_.index_file_paths_);
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_fieldid() != 0) {
    _this->_internal_set_fieldid(from._internal_fieldid());
  }
  if (from._internal_indexid() != 0) {
    _this->_internal_set_indexid(from._internal_indexid());
  }
  if (from._internal_buildid() != 0) {
    _this->_internal_set_buildid(from._internal_buildid());
  }
  if (from._internal_serialized_size() != 0) {
    _this->_internal_set_serialized_size(from._internal_serialized_size());
  }
  if (from._internal_index_version() != 0) {
    _this->_internal_set_index_version(from._internal_index_version());
  }
  if (from._internal_num_rows() != 0) {
    _this->_internal_set_num_rows(from._internal_num_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexFilePathInfo::CopyFrom(const IndexFilePathInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.IndexFilePathInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexFilePathInfo::IsInitialized() const {
  return true;
}

void IndexFilePathInfo::InternalSwap(IndexFilePathInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_params_.InternalSwap(&other->_impl_.index_params_);
  _impl_.index_file_paths_.InternalSwap(&other->_impl_.index_file_paths_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexFilePathInfo, _impl_.num_rows_)
      + sizeof(IndexFilePathInfo::_impl_.num_rows_)
      - PROTOBUF_FIELD_OFFSET(IndexFilePathInfo, _impl_.segmentid_)>(
          reinterpret_cast<char*>(&_impl_.segmentid_),
          reinterpret_cast<char*>(&other->_impl_.segmentid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexFilePathInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[12]);
}

// ===================================================================

class SegmentInfo::_Internal {
 public:
};

SegmentInfo::SegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.SegmentInfo)
}
SegmentInfo::SegmentInfo(const SegmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SegmentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_infos_){from._impl_.index_infos_}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.segmentid_){}
    , decltype(_impl_.enable_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_index_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.enable_index_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.SegmentInfo)
}

inline void SegmentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_infos_){arena}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.segmentid_){int64_t{0}}
    , decltype(_impl_.enable_index_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SegmentInfo::~SegmentInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.SegmentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_infos_.~RepeatedPtrField();
}

void SegmentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SegmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.SegmentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_infos_.Clear();
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enable_index_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.enable_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segmentID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.enable_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.index.IndexFilePathInfo index_infos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.SegmentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // int64 segmentID = 2;
  if (this->_internal_segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_segmentid(), target);
  }

  // bool enable_index = 3;
  if (this->_internal_enable_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_index(), target);
  }

  // repeated .milvus.proto.index.IndexFilePathInfo index_infos = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.SegmentInfo)
  return target;
}

size_t SegmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.SegmentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.index.IndexFilePathInfo index_infos = 4;
  total_size += 1UL * this->_internal_index_infos_size();
  for (const auto& msg : this->_impl_.index_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // int64 segmentID = 2;
  if (this->_internal_segmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segmentid());
  }

  // bool enable_index = 3;
  if (this->_internal_enable_index() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SegmentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SegmentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SegmentInfo::GetClassData() const { return &_class_data_; }


void SegmentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SegmentInfo*>(&to_msg);
  auto& from = static_cast<const SegmentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.SegmentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_infos_.MergeFrom(from._impl_.index_infos_);
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_segmentid() != 0) {
    _this->_internal_set_segmentid(from._internal_segmentid());
  }
  if (from._internal_enable_index() != 0) {
    _this->_internal_set_enable_index(from._internal_enable_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentInfo::CopyFrom(const SegmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.SegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentInfo::IsInitialized() const {
  return true;
}

void SegmentInfo::InternalSwap(SegmentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_infos_.InternalSwap(&other->_impl_.index_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentInfo, _impl_.enable_index_)
      + sizeof(SegmentInfo::_impl_.enable_index_)
      - PROTOBUF_FIELD_OFFSET(SegmentInfo, _impl_.collectionid_)>(
          reinterpret_cast<char*>(&_impl_.collectionid_),
          reinterpret_cast<char*>(&other->_impl_.collectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[13]);
}

// ===================================================================

GetIndexInfoResponse_SegmentInfoEntry_DoNotUse::GetIndexInfoResponse_SegmentInfoEntry_DoNotUse() {}
GetIndexInfoResponse_SegmentInfoEntry_DoNotUse::GetIndexInfoResponse_SegmentInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetIndexInfoResponse_SegmentInfoEntry_DoNotUse::MergeFrom(const GetIndexInfoResponse_SegmentInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetIndexInfoResponse_SegmentInfoEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[14]);
}

// ===================================================================

class GetIndexInfoResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetIndexInfoResponse* msg);
};

const ::milvus::proto::common::Status&
GetIndexInfoResponse::_Internal::status(const GetIndexInfoResponse* msg) {
  return *msg->_impl_.status_;
}
void GetIndexInfoResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetIndexInfoResponse::GetIndexInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GetIndexInfoResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.GetIndexInfoResponse)
}
GetIndexInfoResponse::GetIndexInfoResponse(const GetIndexInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIndexInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.segment_info_)*/{}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.segment_info_.MergeFrom(from._impl_.segment_info_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.GetIndexInfoResponse)
}

inline void GetIndexInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.segment_info_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetIndexInfoResponse::~GetIndexInfoResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.GetIndexInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GetIndexInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segment_info_.Destruct();
  _impl_.segment_info_.~MapField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetIndexInfoResponse::ArenaDtor(void* object) {
  GetIndexInfoResponse* _this = reinterpret_cast< GetIndexInfoResponse* >(object);
  _this->_impl_.segment_info_.Destruct();
}
void GetIndexInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIndexInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.GetIndexInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segment_info_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int64, .milvus.proto.index.SegmentInfo> segment_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.segment_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetIndexInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.GetIndexInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // map<int64, .milvus.proto.index.SegmentInfo> segment_info = 2;
  if (!this->_internal_segment_info().empty()) {
    using MapType = ::_pb::Map<int64_t, ::milvus::proto::index::SegmentInfo>;
    using WireHelper = GetIndexInfoResponse_SegmentInfoEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_segment_info();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.GetIndexInfoResponse)
  return target;
}

size_t GetIndexInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.GetIndexInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .milvus.proto.index.SegmentInfo> segment_info = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_segment_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::milvus::proto::index::SegmentInfo >::const_iterator
      it = this->_internal_segment_info().begin();
      it != this->_internal_segment_info().end(); ++it) {
    total_size += GetIndexInfoResponse_SegmentInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIndexInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIndexInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIndexInfoResponse::GetClassData() const { return &_class_data_; }


void GetIndexInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIndexInfoResponse*>(&to_msg);
  auto& from = static_cast<const GetIndexInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.GetIndexInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.segment_info_.MergeFrom(from._impl_.segment_info_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIndexInfoResponse::CopyFrom(const GetIndexInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.GetIndexInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexInfoResponse::IsInitialized() const {
  return true;
}

void GetIndexInfoResponse::InternalSwap(GetIndexInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segment_info_.InternalSwap(&other->_impl_.segment_info_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[15]);
}

// ===================================================================

class DropIndexRequest::_Internal {
 public:
};

DropIndexRequest::DropIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.DropIndexRequest)
}
DropIndexRequest::DropIndexRequest(const DropIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropIndexRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partitionids_){from._impl_.partitionids_}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){}
    , decltype(_impl_.drop_all_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.collectionid_, &from._impl_.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.drop_all_) -
    reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.drop_all_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.DropIndexRequest)
}

inline void DropIndexRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partitionids_){arena}
    , /*decltype(_impl_._partitionids_cached_byte_size_)*/{0}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , decltype(_impl_.drop_all_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DropIndexRequest::~DropIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.DropIndexRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partitionids_.~RepeatedField();
  _impl_.index_name_.Destroy();
}

void DropIndexRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.DropIndexRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partitionids_.Clear();
  _impl_.index_name_.ClearToEmpty();
  ::memset(&_impl_.collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.drop_all_) -
      reinterpret_cast<char*>(&_impl_.collectionid_)) + sizeof(_impl_.drop_all_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropIndexRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 partitionIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_partitionids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_partitionids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string index_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.DropIndexRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      // bool drop_all = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.drop_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropIndexRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.DropIndexRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // repeated int64 partitionIDs = 2;
  {
    int byte_size = _impl_._partitionids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_partitionids(), byte_size, target);
    }
  }

  // string index_name = 3;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.DropIndexRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_index_name(), target);
  }

  // bool drop_all = 4;
  if (this->_internal_drop_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_drop_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.DropIndexRequest)
  return target;
}

size_t DropIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.DropIndexRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 partitionIDs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.partitionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._partitionids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string index_name = 3;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  // bool drop_all = 4;
  if (this->_internal_drop_all() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropIndexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropIndexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropIndexRequest::GetClassData() const { return &_class_data_; }


void DropIndexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropIndexRequest*>(&to_msg);
  auto& from = static_cast<const DropIndexRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.DropIndexRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partitionids_.MergeFrom(from._impl_.partitionids_);
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  if (from._internal_drop_all() != 0) {
    _this->_internal_set_drop_all(from._internal_drop_all());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropIndexRequest::CopyFrom(const DropIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.DropIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropIndexRequest::IsInitialized() const {
  return true;
}

void DropIndexRequest::InternalSwap(DropIndexRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partitionids_.InternalSwap(&other->_impl_.partitionids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropIndexRequest, _impl_.drop_all_)
      + sizeof(DropIndexRequest::_impl_.drop_all_)
      - PROTOBUF_FIELD_OFFSET(DropIndexRequest, _impl_.collectionid_)>(
          reinterpret_cast<char*>(&_impl_.collectionid_),
          reinterpret_cast<char*>(&other->_impl_.collectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropIndexRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[16]);
}

// ===================================================================

class DescribeIndexRequest::_Internal {
 public:
};

DescribeIndexRequest::DescribeIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.DescribeIndexRequest)
}
DescribeIndexRequest::DescribeIndexRequest(const DescribeIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeIndexRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.collectionid_ = from._impl_.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.DescribeIndexRequest)
}

inline void DescribeIndexRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DescribeIndexRequest::~DescribeIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.DescribeIndexRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_name_.Destroy();
}

void DescribeIndexRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.DescribeIndexRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_name_.ClearToEmpty();
  _impl_.collectionid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeIndexRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string index_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.DescribeIndexRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DescribeIndexRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.DescribeIndexRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // string index_name = 2;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.DescribeIndexRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.DescribeIndexRequest)
  return target;
}

size_t DescribeIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.DescribeIndexRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index_name = 2;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeIndexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeIndexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeIndexRequest::GetClassData() const { return &_class_data_; }


void DescribeIndexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeIndexRequest*>(&to_msg);
  auto& from = static_cast<const DescribeIndexRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.DescribeIndexRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeIndexRequest::CopyFrom(const DescribeIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.DescribeIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeIndexRequest::IsInitialized() const {
  return true;
}

void DescribeIndexRequest::InternalSwap(DescribeIndexRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  swap(_impl_.collectionid_, other->_impl_.collectionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeIndexRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[17]);
}

// ===================================================================

class DescribeIndexResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeIndexResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeIndexResponse::_Internal::status(const DescribeIndexResponse* msg) {
  return *msg->_impl_.status_;
}
void DescribeIndexResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
DescribeIndexResponse::DescribeIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.DescribeIndexResponse)
}
DescribeIndexResponse::DescribeIndexResponse(const DescribeIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DescribeIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_infos_){from._impl_.index_infos_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.DescribeIndexResponse)
}

inline void DescribeIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_infos_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DescribeIndexResponse::~DescribeIndexResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.DescribeIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DescribeIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_infos_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DescribeIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DescribeIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.DescribeIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_infos_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.index.IndexInfo index_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DescribeIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.DescribeIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.index.IndexInfo index_infos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.DescribeIndexResponse)
  return target;
}

size_t DescribeIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.DescribeIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.index.IndexInfo index_infos = 2;
  total_size += 1UL * this->_internal_index_infos_size();
  for (const auto& msg : this->_impl_.index_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DescribeIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeIndexResponse::GetClassData() const { return &_class_data_; }


void DescribeIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DescribeIndexResponse*>(&to_msg);
  auto& from = static_cast<const DescribeIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.DescribeIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_infos_.MergeFrom(from._impl_.index_infos_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeIndexResponse::CopyFrom(const DescribeIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.DescribeIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeIndexResponse::IsInitialized() const {
  return true;
}

void DescribeIndexResponse::InternalSwap(DescribeIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_infos_.InternalSwap(&other->_impl_.index_infos_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[18]);
}

// ===================================================================

class GetIndexBuildProgressRequest::_Internal {
 public:
};

GetIndexBuildProgressRequest::GetIndexBuildProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.GetIndexBuildProgressRequest)
}
GetIndexBuildProgressRequest::GetIndexBuildProgressRequest(const GetIndexBuildProgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIndexBuildProgressRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.collectionid_ = from._impl_.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.GetIndexBuildProgressRequest)
}

inline void GetIndexBuildProgressRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetIndexBuildProgressRequest::~GetIndexBuildProgressRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.GetIndexBuildProgressRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIndexBuildProgressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_name_.Destroy();
}

void GetIndexBuildProgressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIndexBuildProgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.GetIndexBuildProgressRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_name_.ClearToEmpty();
  _impl_.collectionid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexBuildProgressRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string index_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.GetIndexBuildProgressRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetIndexBuildProgressRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.GetIndexBuildProgressRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // string index_name = 2;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.GetIndexBuildProgressRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.GetIndexBuildProgressRequest)
  return target;
}

size_t GetIndexBuildProgressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.GetIndexBuildProgressRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index_name = 2;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIndexBuildProgressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIndexBuildProgressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIndexBuildProgressRequest::GetClassData() const { return &_class_data_; }


void GetIndexBuildProgressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIndexBuildProgressRequest*>(&to_msg);
  auto& from = static_cast<const GetIndexBuildProgressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.GetIndexBuildProgressRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIndexBuildProgressRequest::CopyFrom(const GetIndexBuildProgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.GetIndexBuildProgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexBuildProgressRequest::IsInitialized() const {
  return true;
}

void GetIndexBuildProgressRequest::InternalSwap(GetIndexBuildProgressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  swap(_impl_.collectionid_, other->_impl_.collectionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexBuildProgressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[19]);
}

// ===================================================================

class GetIndexBuildProgressResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetIndexBuildProgressResponse* msg);
};

const ::milvus::proto::common::Status&
GetIndexBuildProgressResponse::_Internal::status(const GetIndexBuildProgressResponse* msg) {
  return *msg->_impl_.status_;
}
void GetIndexBuildProgressResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetIndexBuildProgressResponse::GetIndexBuildProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.GetIndexBuildProgressResponse)
}
GetIndexBuildProgressResponse::GetIndexBuildProgressResponse(const GetIndexBuildProgressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIndexBuildProgressResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.indexed_rows_){}
    , decltype(_impl_.total_rows_){}
    , decltype(_impl_.pending_index_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.indexed_rows_, &from._impl_.indexed_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pending_index_rows_) -
    reinterpret_cast<char*>(&_impl_.indexed_rows_)) + sizeof(_impl_.pending_index_rows_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.GetIndexBuildProgressResponse)
}

inline void GetIndexBuildProgressResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.indexed_rows_){int64_t{0}}
    , decltype(_impl_.total_rows_){int64_t{0}}
    , decltype(_impl_.pending_index_rows_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetIndexBuildProgressResponse::~GetIndexBuildProgressResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.GetIndexBuildProgressResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIndexBuildProgressResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetIndexBuildProgressResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIndexBuildProgressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.GetIndexBuildProgressResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.indexed_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pending_index_rows_) -
      reinterpret_cast<char*>(&_impl_.indexed_rows_)) + sizeof(_impl_.pending_index_rows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexBuildProgressResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 indexed_rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.indexed_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 pending_index_rows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.pending_index_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetIndexBuildProgressResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.GetIndexBuildProgressResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int64 indexed_rows = 2;
  if (this->_internal_indexed_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_indexed_rows(), target);
  }

  // int64 total_rows = 3;
  if (this->_internal_total_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_rows(), target);
  }

  // int64 pending_index_rows = 4;
  if (this->_internal_pending_index_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_pending_index_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.GetIndexBuildProgressResponse)
  return target;
}

size_t GetIndexBuildProgressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.GetIndexBuildProgressResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 indexed_rows = 2;
  if (this->_internal_indexed_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_indexed_rows());
  }

  // int64 total_rows = 3;
  if (this->_internal_total_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_rows());
  }

  // int64 pending_index_rows = 4;
  if (this->_internal_pending_index_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pending_index_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIndexBuildProgressResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIndexBuildProgressResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIndexBuildProgressResponse::GetClassData() const { return &_class_data_; }


void GetIndexBuildProgressResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIndexBuildProgressResponse*>(&to_msg);
  auto& from = static_cast<const GetIndexBuildProgressResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.GetIndexBuildProgressResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_indexed_rows() != 0) {
    _this->_internal_set_indexed_rows(from._internal_indexed_rows());
  }
  if (from._internal_total_rows() != 0) {
    _this->_internal_set_total_rows(from._internal_total_rows());
  }
  if (from._internal_pending_index_rows() != 0) {
    _this->_internal_set_pending_index_rows(from._internal_pending_index_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIndexBuildProgressResponse::CopyFrom(const GetIndexBuildProgressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.GetIndexBuildProgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexBuildProgressResponse::IsInitialized() const {
  return true;
}

void GetIndexBuildProgressResponse::InternalSwap(GetIndexBuildProgressResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetIndexBuildProgressResponse, _impl_.pending_index_rows_)
      + sizeof(GetIndexBuildProgressResponse::_impl_.pending_index_rows_)
      - PROTOBUF_FIELD_OFFSET(GetIndexBuildProgressResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexBuildProgressResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[20]);
}

// ===================================================================

class StorageConfig::_Internal {
 public:
};

StorageConfig::StorageConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.StorageConfig)
}
StorageConfig::StorageConfig(const StorageConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StorageConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.access_keyid_){}
    , decltype(_impl_.secret_access_key_){}
    , decltype(_impl_.bucket_name_){}
    , decltype(_impl_.root_path_){}
    , decltype(_impl_.iamendpoint_){}
    , decltype(_impl_.storage_type_){}
    , decltype(_impl_.usessl_){}
    , decltype(_impl_.useiam_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.access_keyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_keyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_access_keyid().empty()) {
    _this->_impl_.access_keyid_.Set(from._internal_access_keyid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secret_access_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_access_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret_access_key().empty()) {
    _this->_impl_.secret_access_key_.Set(from._internal_secret_access_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bucket_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket_name().empty()) {
    _this->_impl_.bucket_name_.Set(from._internal_bucket_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.root_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_root_path().empty()) {
    _this->_impl_.root_path_.Set(from._internal_root_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.iamendpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iamendpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iamendpoint().empty()) {
    _this->_impl_.iamendpoint_.Set(from._internal_iamendpoint(), 
      _this->GetArenaForAllocation());
  }
  _impl_.storage_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.storage_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_storage_type().empty()) {
    _this->_impl_.storage_type_.Set(from._internal_storage_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.usessl_, &from._impl_.usessl_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.useiam_) -
    reinterpret_cast<char*>(&_impl_.usessl_)) + sizeof(_impl_.useiam_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.StorageConfig)
}

inline void StorageConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.access_keyid_){}
    , decltype(_impl_.secret_access_key_){}
    , decltype(_impl_.bucket_name_){}
    , decltype(_impl_.root_path_){}
    , decltype(_impl_.iamendpoint_){}
    , decltype(_impl_.storage_type_){}
    , decltype(_impl_.usessl_){false}
    , decltype(_impl_.useiam_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.access_keyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_keyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secret_access_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_access_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bucket_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.root_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iamendpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iamendpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.storage_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.storage_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StorageConfig::~StorageConfig() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.StorageConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StorageConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.access_keyid_.Destroy();
  _impl_.secret_access_key_.Destroy();
  _impl_.bucket_name_.Destroy();
  _impl_.root_path_.Destroy();
  _impl_.iamendpoint_.Destroy();
  _impl_.storage_type_.Destroy();
}

void StorageConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StorageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.StorageConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.access_keyid_.ClearToEmpty();
  _impl_.secret_access_key_.ClearToEmpty();
  _impl_.bucket_name_.ClearToEmpty();
  _impl_.root_path_.ClearToEmpty();
  _impl_.iamendpoint_.ClearToEmpty();
  _impl_.storage_type_.ClearToEmpty();
  ::memset(&_impl_.usessl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.useiam_) -
      reinterpret_cast<char*>(&_impl_.usessl_)) + sizeof(_impl_.useiam_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.StorageConfig.address"));
        } else
          goto handle_unusual;
        continue;
      // string access_keyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_access_keyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.StorageConfig.access_keyID"));
        } else
          goto handle_unusual;
        continue;
      // string secret_access_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_secret_access_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.StorageConfig.secret_access_key"));
        } else
          goto handle_unusual;
        continue;
      // bool useSSL = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.usessl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bucket_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bucket_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.StorageConfig.bucket_name"));
        } else
          goto handle_unusual;
        continue;
      // string root_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_root_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.StorageConfig.root_path"));
        } else
          goto handle_unusual;
        continue;
      // bool useIAM = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.useiam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string IAMEndpoint = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_iamendpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.StorageConfig.IAMEndpoint"));
        } else
          goto handle_unusual;
        continue;
      // string storage_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_storage_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.StorageConfig.storage_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StorageConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.StorageConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.StorageConfig.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string access_keyID = 2;
  if (!this->_internal_access_keyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_keyid().data(), static_cast<int>(this->_internal_access_keyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.StorageConfig.access_keyID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_access_keyid(), target);
  }

  // string secret_access_key = 3;
  if (!this->_internal_secret_access_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret_access_key().data(), static_cast<int>(this->_internal_secret_access_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.StorageConfig.secret_access_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_secret_access_key(), target);
  }

  // bool useSSL = 4;
  if (this->_internal_usessl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_usessl(), target);
  }

  // string bucket_name = 5;
  if (!this->_internal_bucket_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket_name().data(), static_cast<int>(this->_internal_bucket_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.StorageConfig.bucket_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bucket_name(), target);
  }

  // string root_path = 6;
  if (!this->_internal_root_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_root_path().data(), static_cast<int>(this->_internal_root_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.StorageConfig.root_path");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_root_path(), target);
  }

  // bool useIAM = 7;
  if (this->_internal_useiam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_useiam(), target);
  }

  // string IAMEndpoint = 8;
  if (!this->_internal_iamendpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iamendpoint().data(), static_cast<int>(this->_internal_iamendpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.StorageConfig.IAMEndpoint");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_iamendpoint(), target);
  }

  // string storage_type = 9;
  if (!this->_internal_storage_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_storage_type().data(), static_cast<int>(this->_internal_storage_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.StorageConfig.storage_type");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_storage_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.StorageConfig)
  return target;
}

size_t StorageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.StorageConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string access_keyID = 2;
  if (!this->_internal_access_keyid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_keyid());
  }

  // string secret_access_key = 3;
  if (!this->_internal_secret_access_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret_access_key());
  }

  // string bucket_name = 5;
  if (!this->_internal_bucket_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket_name());
  }

  // string root_path = 6;
  if (!this->_internal_root_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_root_path());
  }

  // string IAMEndpoint = 8;
  if (!this->_internal_iamendpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iamendpoint());
  }

  // string storage_type = 9;
  if (!this->_internal_storage_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storage_type());
  }

  // bool useSSL = 4;
  if (this->_internal_usessl() != 0) {
    total_size += 1 + 1;
  }

  // bool useIAM = 7;
  if (this->_internal_useiam() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StorageConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StorageConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StorageConfig::GetClassData() const { return &_class_data_; }


void StorageConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StorageConfig*>(&to_msg);
  auto& from = static_cast<const StorageConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.StorageConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_access_keyid().empty()) {
    _this->_internal_set_access_keyid(from._internal_access_keyid());
  }
  if (!from._internal_secret_access_key().empty()) {
    _this->_internal_set_secret_access_key(from._internal_secret_access_key());
  }
  if (!from._internal_bucket_name().empty()) {
    _this->_internal_set_bucket_name(from._internal_bucket_name());
  }
  if (!from._internal_root_path().empty()) {
    _this->_internal_set_root_path(from._internal_root_path());
  }
  if (!from._internal_iamendpoint().empty()) {
    _this->_internal_set_iamendpoint(from._internal_iamendpoint());
  }
  if (!from._internal_storage_type().empty()) {
    _this->_internal_set_storage_type(from._internal_storage_type());
  }
  if (from._internal_usessl() != 0) {
    _this->_internal_set_usessl(from._internal_usessl());
  }
  if (from._internal_useiam() != 0) {
    _this->_internal_set_useiam(from._internal_useiam());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StorageConfig::CopyFrom(const StorageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.StorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageConfig::IsInitialized() const {
  return true;
}

void StorageConfig::InternalSwap(StorageConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.access_keyid_, lhs_arena,
      &other->_impl_.access_keyid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secret_access_key_, lhs_arena,
      &other->_impl_.secret_access_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_name_, lhs_arena,
      &other->_impl_.bucket_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.root_path_, lhs_arena,
      &other->_impl_.root_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iamendpoint_, lhs_arena,
      &other->_impl_.iamendpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.storage_type_, lhs_arena,
      &other->_impl_.storage_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StorageConfig, _impl_.useiam_)
      + sizeof(StorageConfig::_impl_.useiam_)
      - PROTOBUF_FIELD_OFFSET(StorageConfig, _impl_.usessl_)>(
          reinterpret_cast<char*>(&_impl_.usessl_),
          reinterpret_cast<char*>(&other->_impl_.usessl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[21]);
}

// ===================================================================

class CreateJobRequest::_Internal {
 public:
  static const ::milvus::proto::index::StorageConfig& storage_config(const CreateJobRequest* msg);
};

const ::milvus::proto::index::StorageConfig&
CreateJobRequest::_Internal::storage_config(const CreateJobRequest* msg) {
  return *msg->_impl_.storage_config_;
}
void CreateJobRequest::clear_index_params() {
  _impl_.index_params_.Clear();
}
void CreateJobRequest::clear_type_params() {
  _impl_.type_params_.Clear();
}
CreateJobRequest::CreateJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.CreateJobRequest)
}
CreateJobRequest::CreateJobRequest(const CreateJobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateJobRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_paths_){from._impl_.data_paths_}
    , decltype(_impl_.index_params_){from._impl_.index_params_}
    , decltype(_impl_.type_params_){from._impl_.type_params_}
    , decltype(_impl_.clusterid_){}
    , decltype(_impl_.index_file_prefix_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.storage_config_){nullptr}
    , decltype(_impl_.buildid_){}
    , decltype(_impl_.index_version_){}
    , decltype(_impl_.indexid_){}
    , decltype(_impl_.num_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clusterid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clusterid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clusterid().empty()) {
    _this->_impl_.clusterid_.Set(from._internal_clusterid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.index_file_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_file_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_file_prefix().empty()) {
    _this->_impl_.index_file_prefix_.Set(from._internal_index_file_prefix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_storage_config()) {
    _this->_impl_.storage_config_ = new ::milvus::proto::index::StorageConfig(*from._impl_.storage_config_);
  }
  ::memcpy(&_impl_.buildid_, &from._impl_.buildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_rows_) -
    reinterpret_cast<char*>(&_impl_.buildid_)) + sizeof(_impl_.num_rows_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.CreateJobRequest)
}

inline void CreateJobRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_paths_){arena}
    , decltype(_impl_.index_params_){arena}
    , decltype(_impl_.type_params_){arena}
    , decltype(_impl_.clusterid_){}
    , decltype(_impl_.index_file_prefix_){}
    , decltype(_impl_.index_name_){}
    , decltype(_impl_.storage_config_){nullptr}
    , decltype(_impl_.buildid_){int64_t{0}}
    , decltype(_impl_.index_version_){int64_t{0}}
    , decltype(_impl_.indexid_){int64_t{0}}
    , decltype(_impl_.num_rows_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clusterid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clusterid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_file_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_file_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateJobRequest::~CreateJobRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.CreateJobRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateJobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_paths_.~RepeatedPtrField();
  _impl_.index_params_.~RepeatedPtrField();
  _impl_.type_params_.~RepeatedPtrField();
  _impl_.clusterid_.Destroy();
  _impl_.index_file_prefix_.Destroy();
  _impl_.index_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.storage_config_;
}

void CreateJobRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.CreateJobRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_paths_.Clear();
  _impl_.index_params_.Clear();
  _impl_.type_params_.Clear();
  _impl_.clusterid_.ClearToEmpty();
  _impl_.index_file_prefix_.ClearToEmpty();
  _impl_.index_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.storage_config_ != nullptr) {
    delete _impl_.storage_config_;
  }
  _impl_.storage_config_ = nullptr;
  ::memset(&_impl_.buildid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_rows_) -
      reinterpret_cast<char*>(&_impl_.buildid_)) + sizeof(_impl_.num_rows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateJobRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clusterID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clusterid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.CreateJobRequest.clusterID"));
        } else
          goto handle_unusual;
        continue;
      // string index_file_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index_file_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.CreateJobRequest.index_file_prefix"));
        } else
          goto handle_unusual;
        continue;
      // int64 buildID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.buildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string data_paths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data_paths();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.CreateJobRequest.data_paths"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 index_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.index_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 indexID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string index_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.CreateJobRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.index.StorageConfig storage_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair index_params = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair type_params = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 num_rows = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateJobRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.CreateJobRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clusterID = 1;
  if (!this->_internal_clusterid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clusterid().data(), static_cast<int>(this->_internal_clusterid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.CreateJobRequest.clusterID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clusterid(), target);
  }

  // string index_file_prefix = 2;
  if (!this->_internal_index_file_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_file_prefix().data(), static_cast<int>(this->_internal_index_file_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.CreateJobRequest.index_file_prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index_file_prefix(), target);
  }

  // int64 buildID = 3;
  if (this->_internal_buildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_buildid(), target);
  }

  // repeated string data_paths = 4;
  for (int i = 0, n = this->_internal_data_paths_size(); i < n; i++) {
    const auto& s = this->_internal_data_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.CreateJobRequest.data_paths");
    target = stream->WriteString(4, s, target);
  }

  // int64 index_version = 5;
  if (this->_internal_index_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_index_version(), target);
  }

  // int64 indexID = 6;
  if (this->_internal_indexid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_indexid(), target);
  }

  // string index_name = 7;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.CreateJobRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_index_name(), target);
  }

  // .milvus.proto.index.StorageConfig storage_config = 8;
  if (this->_internal_has_storage_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::storage_config(this),
        _Internal::storage_config(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair type_params = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_type_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_type_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 num_rows = 11;
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.CreateJobRequest)
  return target;
}

size_t CreateJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.CreateJobRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data_paths = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.data_paths_.size());
  for (int i = 0, n = _impl_.data_paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.data_paths_.Get(i));
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 9;
  total_size += 1UL * this->_internal_index_params_size();
  for (const auto& msg : this->_impl_.index_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.common.KeyValuePair type_params = 10;
  total_size += 1UL * this->_internal_type_params_size();
  for (const auto& msg : this->_impl_.type_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string clusterID = 1;
  if (!this->_internal_clusterid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clusterid());
  }

  // string index_file_prefix = 2;
  if (!this->_internal_index_file_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_file_prefix());
  }

  // string index_name = 7;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.index.StorageConfig storage_config = 8;
  if (this->_internal_has_storage_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.storage_config_);
  }

  // int64 buildID = 3;
  if (this->_internal_buildid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_buildid());
  }

  // int64 index_version = 5;
  if (this->_internal_index_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index_version());
  }

  // int64 indexID = 6;
  if (this->_internal_indexid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_indexid());
  }

  // int64 num_rows = 11;
  if (this->_internal_num_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateJobRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateJobRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateJobRequest::GetClassData() const { return &_class_data_; }


void CreateJobRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateJobRequest*>(&to_msg);
  auto& from = static_cast<const CreateJobRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.CreateJobRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_paths_.MergeFrom(from._impl_.data_paths_);
  _this->_impl_.index_params_.MergeFrom(from._impl_.index_params_);
  _this->_impl_.type_params_.MergeFrom(from._impl_.type_params_);
  if (!from._internal_clusterid().empty()) {
    _this->_internal_set_clusterid(from._internal_clusterid());
  }
  if (!from._internal_index_file_prefix().empty()) {
    _this->_internal_set_index_file_prefix(from._internal_index_file_prefix());
  }
  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_has_storage_config()) {
    _this->_internal_mutable_storage_config()->::milvus::proto::index::StorageConfig::MergeFrom(
        from._internal_storage_config());
  }
  if (from._internal_buildid() != 0) {
    _this->_internal_set_buildid(from._internal_buildid());
  }
  if (from._internal_index_version() != 0) {
    _this->_internal_set_index_version(from._internal_index_version());
  }
  if (from._internal_indexid() != 0) {
    _this->_internal_set_indexid(from._internal_indexid());
  }
  if (from._internal_num_rows() != 0) {
    _this->_internal_set_num_rows(from._internal_num_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateJobRequest::CopyFrom(const CreateJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.CreateJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateJobRequest::IsInitialized() const {
  return true;
}

void CreateJobRequest::InternalSwap(CreateJobRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_paths_.InternalSwap(&other->_impl_.data_paths_);
  _impl_.index_params_.InternalSwap(&other->_impl_.index_params_);
  _impl_.type_params_.InternalSwap(&other->_impl_.type_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clusterid_, lhs_arena,
      &other->_impl_.clusterid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_file_prefix_, lhs_arena,
      &other->_impl_.index_file_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateJobRequest, _impl_.num_rows_)
      + sizeof(CreateJobRequest::_impl_.num_rows_)
      - PROTOBUF_FIELD_OFFSET(CreateJobRequest, _impl_.storage_config_)>(
          reinterpret_cast<char*>(&_impl_.storage_config_),
          reinterpret_cast<char*>(&other->_impl_.storage_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateJobRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[22]);
}

// ===================================================================

class QueryJobsRequest::_Internal {
 public:
};

QueryJobsRequest::QueryJobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.QueryJobsRequest)
}
QueryJobsRequest::QueryJobsRequest(const QueryJobsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryJobsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buildids_){from._impl_.buildids_}
    , /*decltype(_impl_._buildids_cached_byte_size_)*/{0}
    , decltype(_impl_.clusterid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clusterid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clusterid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clusterid().empty()) {
    _this->_impl_.clusterid_.Set(from._internal_clusterid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.QueryJobsRequest)
}

inline void QueryJobsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buildids_){arena}
    , /*decltype(_impl_._buildids_cached_byte_size_)*/{0}
    , decltype(_impl_.clusterid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clusterid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clusterid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryJobsRequest::~QueryJobsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.QueryJobsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryJobsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buildids_.~RepeatedField();
  _impl_.clusterid_.Destroy();
}

void QueryJobsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryJobsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.QueryJobsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buildids_.Clear();
  _impl_.clusterid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryJobsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clusterID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clusterid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.QueryJobsRequest.clusterID"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 buildIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_buildids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_buildids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryJobsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.QueryJobsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clusterID = 1;
  if (!this->_internal_clusterid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clusterid().data(), static_cast<int>(this->_internal_clusterid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.QueryJobsRequest.clusterID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clusterid(), target);
  }

  // repeated int64 buildIDs = 2;
  {
    int byte_size = _impl_._buildids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_buildids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.QueryJobsRequest)
  return target;
}

size_t QueryJobsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.QueryJobsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 buildIDs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.buildids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._buildids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string clusterID = 1;
  if (!this->_internal_clusterid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clusterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryJobsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryJobsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryJobsRequest::GetClassData() const { return &_class_data_; }


void QueryJobsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryJobsRequest*>(&to_msg);
  auto& from = static_cast<const QueryJobsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.QueryJobsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buildids_.MergeFrom(from._impl_.buildids_);
  if (!from._internal_clusterid().empty()) {
    _this->_internal_set_clusterid(from._internal_clusterid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryJobsRequest::CopyFrom(const QueryJobsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.QueryJobsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryJobsRequest::IsInitialized() const {
  return true;
}

void QueryJobsRequest::InternalSwap(QueryJobsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buildids_.InternalSwap(&other->_impl_.buildids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clusterid_, lhs_arena,
      &other->_impl_.clusterid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryJobsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[23]);
}

// ===================================================================

class IndexTaskInfo::_Internal {
 public:
};

IndexTaskInfo::IndexTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.IndexTaskInfo)
}
IndexTaskInfo::IndexTaskInfo(const IndexTaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexTaskInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_file_keys_){from._impl_.index_file_keys_}
    , decltype(_impl_.fail_reason_){}
    , decltype(_impl_.buildid_){}
    , decltype(_impl_.serialized_size_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fail_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fail_reason().empty()) {
    _this->_impl_.fail_reason_.Set(from._internal_fail_reason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.buildid_, &from._impl_.buildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.buildid_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.IndexTaskInfo)
}

inline void IndexTaskInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_file_keys_){arena}
    , decltype(_impl_.fail_reason_){}
    , decltype(_impl_.buildid_){int64_t{0}}
    , decltype(_impl_.serialized_size_){uint64_t{0u}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fail_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fail_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexTaskInfo::~IndexTaskInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.IndexTaskInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexTaskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_file_keys_.~RepeatedPtrField();
  _impl_.fail_reason_.Destroy();
}

void IndexTaskInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexTaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.IndexTaskInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_file_keys_.Clear();
  _impl_.fail_reason_.ClearToEmpty();
  ::memset(&_impl_.buildid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.buildid_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexTaskInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 buildID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.buildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .milvus.proto.common.IndexState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::IndexState>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string index_file_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_index_file_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.IndexTaskInfo.index_file_keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 serialized_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.serialized_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fail_reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_fail_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.IndexTaskInfo.fail_reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexTaskInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.IndexTaskInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 buildID = 1;
  if (this->_internal_buildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_buildid(), target);
  }

  // .milvus.proto.common.IndexState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // repeated string index_file_keys = 3;
  for (int i = 0, n = this->_internal_index_file_keys_size(); i < n; i++) {
    const auto& s = this->_internal_index_file_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.IndexTaskInfo.index_file_keys");
    target = stream->WriteString(3, s, target);
  }

  // uint64 serialized_size = 4;
  if (this->_internal_serialized_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_serialized_size(), target);
  }

  // string fail_reason = 5;
  if (!this->_internal_fail_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fail_reason().data(), static_cast<int>(this->_internal_fail_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.IndexTaskInfo.fail_reason");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_fail_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.IndexTaskInfo)
  return target;
}

size_t IndexTaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.IndexTaskInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string index_file_keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.index_file_keys_.size());
  for (int i = 0, n = _impl_.index_file_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.index_file_keys_.Get(i));
  }

  // string fail_reason = 5;
  if (!this->_internal_fail_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fail_reason());
  }

  // int64 buildID = 1;
  if (this->_internal_buildid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_buildid());
  }

  // uint64 serialized_size = 4;
  if (this->_internal_serialized_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_serialized_size());
  }

  // .milvus.proto.common.IndexState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexTaskInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexTaskInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexTaskInfo::GetClassData() const { return &_class_data_; }


void IndexTaskInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexTaskInfo*>(&to_msg);
  auto& from = static_cast<const IndexTaskInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.IndexTaskInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_file_keys_.MergeFrom(from._impl_.index_file_keys_);
  if (!from._internal_fail_reason().empty()) {
    _this->_internal_set_fail_reason(from._internal_fail_reason());
  }
  if (from._internal_buildid() != 0) {
    _this->_internal_set_buildid(from._internal_buildid());
  }
  if (from._internal_serialized_size() != 0) {
    _this->_internal_set_serialized_size(from._internal_serialized_size());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexTaskInfo::CopyFrom(const IndexTaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.IndexTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexTaskInfo::IsInitialized() const {
  return true;
}

void IndexTaskInfo::InternalSwap(IndexTaskInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_file_keys_.InternalSwap(&other->_impl_.index_file_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fail_reason_, lhs_arena,
      &other->_impl_.fail_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexTaskInfo, _impl_.state_)
      + sizeof(IndexTaskInfo::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(IndexTaskInfo, _impl_.buildid_)>(
          reinterpret_cast<char*>(&_impl_.buildid_),
          reinterpret_cast<char*>(&other->_impl_.buildid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexTaskInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[24]);
}

// ===================================================================

class QueryJobsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const QueryJobsResponse* msg);
};

const ::milvus::proto::common::Status&
QueryJobsResponse::_Internal::status(const QueryJobsResponse* msg) {
  return *msg->_impl_.status_;
}
void QueryJobsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
QueryJobsResponse::QueryJobsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.QueryJobsResponse)
}
QueryJobsResponse::QueryJobsResponse(const QueryJobsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryJobsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_infos_){from._impl_.index_infos_}
    , decltype(_impl_.clusterid_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clusterid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clusterid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clusterid().empty()) {
    _this->_impl_.clusterid_.Set(from._internal_clusterid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.QueryJobsResponse)
}

inline void QueryJobsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_infos_){arena}
    , decltype(_impl_.clusterid_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clusterid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clusterid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryJobsResponse::~QueryJobsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.QueryJobsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryJobsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_infos_.~RepeatedPtrField();
  _impl_.clusterid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void QueryJobsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryJobsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.QueryJobsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_infos_.Clear();
  _impl_.clusterid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryJobsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clusterID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clusterid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.QueryJobsResponse.clusterID"));
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.index.IndexTaskInfo index_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryJobsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.QueryJobsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string clusterID = 2;
  if (!this->_internal_clusterid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clusterid().data(), static_cast<int>(this->_internal_clusterid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.QueryJobsResponse.clusterID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clusterid(), target);
  }

  // repeated .milvus.proto.index.IndexTaskInfo index_infos = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.QueryJobsResponse)
  return target;
}

size_t QueryJobsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.QueryJobsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.index.IndexTaskInfo index_infos = 3;
  total_size += 1UL * this->_internal_index_infos_size();
  for (const auto& msg : this->_impl_.index_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string clusterID = 2;
  if (!this->_internal_clusterid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clusterid());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryJobsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryJobsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryJobsResponse::GetClassData() const { return &_class_data_; }


void QueryJobsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryJobsResponse*>(&to_msg);
  auto& from = static_cast<const QueryJobsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.QueryJobsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_infos_.MergeFrom(from._impl_.index_infos_);
  if (!from._internal_clusterid().empty()) {
    _this->_internal_set_clusterid(from._internal_clusterid());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryJobsResponse::CopyFrom(const QueryJobsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.QueryJobsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryJobsResponse::IsInitialized() const {
  return true;
}

void QueryJobsResponse::InternalSwap(QueryJobsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_infos_.InternalSwap(&other->_impl_.index_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clusterid_, lhs_arena,
      &other->_impl_.clusterid_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryJobsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[25]);
}

// ===================================================================

class DropJobsRequest::_Internal {
 public:
};

DropJobsRequest::DropJobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.DropJobsRequest)
}
DropJobsRequest::DropJobsRequest(const DropJobsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropJobsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buildids_){from._impl_.buildids_}
    , /*decltype(_impl_._buildids_cached_byte_size_)*/{0}
    , decltype(_impl_.clusterid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clusterid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clusterid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clusterid().empty()) {
    _this->_impl_.clusterid_.Set(from._internal_clusterid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.DropJobsRequest)
}

inline void DropJobsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buildids_){arena}
    , /*decltype(_impl_._buildids_cached_byte_size_)*/{0}
    , decltype(_impl_.clusterid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clusterid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clusterid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DropJobsRequest::~DropJobsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.DropJobsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropJobsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buildids_.~RepeatedField();
  _impl_.clusterid_.Destroy();
}

void DropJobsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropJobsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.DropJobsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buildids_.Clear();
  _impl_.clusterid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropJobsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clusterID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clusterid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.DropJobsRequest.clusterID"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 buildIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_buildids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_buildids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropJobsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.DropJobsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clusterID = 1;
  if (!this->_internal_clusterid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clusterid().data(), static_cast<int>(this->_internal_clusterid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.DropJobsRequest.clusterID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clusterid(), target);
  }

  // repeated int64 buildIDs = 2;
  {
    int byte_size = _impl_._buildids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_buildids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.DropJobsRequest)
  return target;
}

size_t DropJobsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.DropJobsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 buildIDs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.buildids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._buildids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string clusterID = 1;
  if (!this->_internal_clusterid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clusterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropJobsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropJobsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropJobsRequest::GetClassData() const { return &_class_data_; }


void DropJobsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropJobsRequest*>(&to_msg);
  auto& from = static_cast<const DropJobsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.DropJobsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buildids_.MergeFrom(from._impl_.buildids_);
  if (!from._internal_clusterid().empty()) {
    _this->_internal_set_clusterid(from._internal_clusterid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropJobsRequest::CopyFrom(const DropJobsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.DropJobsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropJobsRequest::IsInitialized() const {
  return true;
}

void DropJobsRequest::InternalSwap(DropJobsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buildids_.InternalSwap(&other->_impl_.buildids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clusterid_, lhs_arena,
      &other->_impl_.clusterid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DropJobsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[26]);
}

// ===================================================================

class JobInfo::_Internal {
 public:
};

void JobInfo::clear_index_params() {
  _impl_.index_params_.Clear();
}
JobInfo::JobInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.JobInfo)
}
JobInfo::JobInfo(const JobInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JobInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_params_){from._impl_.index_params_}
    , decltype(_impl_.num_rows_){}
    , decltype(_impl_.dim_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}
    , decltype(_impl_.podid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_rows_, &from._impl_.num_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.podid_) -
    reinterpret_cast<char*>(&_impl_.num_rows_)) + sizeof(_impl_.podid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.JobInfo)
}

inline void JobInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_params_){arena}
    , decltype(_impl_.num_rows_){int64_t{0}}
    , decltype(_impl_.dim_){int64_t{0}}
    , decltype(_impl_.start_time_){int64_t{0}}
    , decltype(_impl_.end_time_){int64_t{0}}
    , decltype(_impl_.podid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JobInfo::~JobInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.JobInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JobInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_params_.~RepeatedPtrField();
}

void JobInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JobInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.JobInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_params_.Clear();
  ::memset(&_impl_.num_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.podid_) -
      reinterpret_cast<char*>(&_impl_.num_rows_)) + sizeof(_impl_.podid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 num_rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair index_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 podID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.podid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JobInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.JobInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_rows = 1;
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_num_rows(), target);
  }

  // int64 dim = 2;
  if (this->_internal_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_dim(), target);
  }

  // int64 start_time = 3;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_start_time(), target);
  }

  // int64 end_time = 4;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_end_time(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 podID = 6;
  if (this->_internal_podid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_podid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.JobInfo)
  return target;
}

size_t JobInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.JobInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair index_params = 5;
  total_size += 1UL * this->_internal_index_params_size();
  for (const auto& msg : this->_impl_.index_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 num_rows = 1;
  if (this->_internal_num_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_rows());
  }

  // int64 dim = 2;
  if (this->_internal_dim() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dim());
  }

  // int64 start_time = 3;
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_time());
  }

  // int64 end_time = 4;
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_time());
  }

  // int64 podID = 6;
  if (this->_internal_podid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_podid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JobInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JobInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JobInfo::GetClassData() const { return &_class_data_; }


void JobInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JobInfo*>(&to_msg);
  auto& from = static_cast<const JobInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.JobInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_params_.MergeFrom(from._impl_.index_params_);
  if (from._internal_num_rows() != 0) {
    _this->_internal_set_num_rows(from._internal_num_rows());
  }
  if (from._internal_dim() != 0) {
    _this->_internal_set_dim(from._internal_dim());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_podid() != 0) {
    _this->_internal_set_podid(from._internal_podid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JobInfo::CopyFrom(const JobInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.JobInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobInfo::IsInitialized() const {
  return true;
}

void JobInfo::InternalSwap(JobInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_params_.InternalSwap(&other->_impl_.index_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JobInfo, _impl_.podid_)
      + sizeof(JobInfo::_impl_.podid_)
      - PROTOBUF_FIELD_OFFSET(JobInfo, _impl_.num_rows_)>(
          reinterpret_cast<char*>(&_impl_.num_rows_),
          reinterpret_cast<char*>(&other->_impl_.num_rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JobInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[27]);
}

// ===================================================================

class GetJobStatsRequest::_Internal {
 public:
};

GetJobStatsRequest::GetJobStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.GetJobStatsRequest)
}
GetJobStatsRequest::GetJobStatsRequest(const GetJobStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetJobStatsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.GetJobStatsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetJobStatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetJobStatsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetJobStatsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[28]);
}

// ===================================================================

class GetJobStatsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetJobStatsResponse* msg);
};

const ::milvus::proto::common::Status&
GetJobStatsResponse::_Internal::status(const GetJobStatsResponse* msg) {
  return *msg->_impl_.status_;
}
void GetJobStatsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetJobStatsResponse::GetJobStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.GetJobStatsResponse)
}
GetJobStatsResponse::GetJobStatsResponse(const GetJobStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetJobStatsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.job_infos_){from._impl_.job_infos_}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.total_job_num_){}
    , decltype(_impl_.in_progress_job_num_){}
    , decltype(_impl_.enqueue_job_num_){}
    , decltype(_impl_.task_slots_){}
    , decltype(_impl_.enable_disk_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.total_job_num_, &from._impl_.total_job_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_disk_) -
    reinterpret_cast<char*>(&_impl_.total_job_num_)) + sizeof(_impl_.enable_disk_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.GetJobStatsResponse)
}

inline void GetJobStatsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.job_infos_){arena}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.total_job_num_){int64_t{0}}
    , decltype(_impl_.in_progress_job_num_){int64_t{0}}
    , decltype(_impl_.enqueue_job_num_){int64_t{0}}
    , decltype(_impl_.task_slots_){int64_t{0}}
    , decltype(_impl_.enable_disk_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetJobStatsResponse::~GetJobStatsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.GetJobStatsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetJobStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.job_infos_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetJobStatsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetJobStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.GetJobStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.job_infos_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.total_job_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enable_disk_) -
      reinterpret_cast<char*>(&_impl_.total_job_num_)) + sizeof(_impl_.enable_disk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetJobStatsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_job_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_job_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 in_progress_job_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.in_progress_job_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 enqueue_job_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.enqueue_job_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 task_slots = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.task_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.index.JobInfo job_infos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_job_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool enable_disk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.enable_disk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetJobStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.GetJobStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int64 total_job_num = 2;
  if (this->_internal_total_job_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_total_job_num(), target);
  }

  // int64 in_progress_job_num = 3;
  if (this->_internal_in_progress_job_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_in_progress_job_num(), target);
  }

  // int64 enqueue_job_num = 4;
  if (this->_internal_enqueue_job_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_enqueue_job_num(), target);
  }

  // int64 task_slots = 5;
  if (this->_internal_task_slots() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_task_slots(), target);
  }

  // repeated .milvus.proto.index.JobInfo job_infos = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_job_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_job_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool enable_disk = 7;
  if (this->_internal_enable_disk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_enable_disk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.GetJobStatsResponse)
  return target;
}

size_t GetJobStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.GetJobStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.index.JobInfo job_infos = 6;
  total_size += 1UL * this->_internal_job_infos_size();
  for (const auto& msg : this->_impl_.job_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int64 total_job_num = 2;
  if (this->_internal_total_job_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_job_num());
  }

  // int64 in_progress_job_num = 3;
  if (this->_internal_in_progress_job_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_in_progress_job_num());
  }

  // int64 enqueue_job_num = 4;
  if (this->_internal_enqueue_job_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_enqueue_job_num());
  }

  // int64 task_slots = 5;
  if (this->_internal_task_slots() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_task_slots());
  }

  // bool enable_disk = 7;
  if (this->_internal_enable_disk() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetJobStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetJobStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetJobStatsResponse::GetClassData() const { return &_class_data_; }


void GetJobStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetJobStatsResponse*>(&to_msg);
  auto& from = static_cast<const GetJobStatsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.GetJobStatsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.job_infos_.MergeFrom(from._impl_.job_infos_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_total_job_num() != 0) {
    _this->_internal_set_total_job_num(from._internal_total_job_num());
  }
  if (from._internal_in_progress_job_num() != 0) {
    _this->_internal_set_in_progress_job_num(from._internal_in_progress_job_num());
  }
  if (from._internal_enqueue_job_num() != 0) {
    _this->_internal_set_enqueue_job_num(from._internal_enqueue_job_num());
  }
  if (from._internal_task_slots() != 0) {
    _this->_internal_set_task_slots(from._internal_task_slots());
  }
  if (from._internal_enable_disk() != 0) {
    _this->_internal_set_enable_disk(from._internal_enable_disk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetJobStatsResponse::CopyFrom(const GetJobStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.GetJobStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetJobStatsResponse::IsInitialized() const {
  return true;
}

void GetJobStatsResponse::InternalSwap(GetJobStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.job_infos_.InternalSwap(&other->_impl_.job_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetJobStatsResponse, _impl_.enable_disk_)
      + sizeof(GetJobStatsResponse::_impl_.enable_disk_)
      - PROTOBUF_FIELD_OFFSET(GetJobStatsResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetJobStatsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[29]);
}

// ===================================================================

class GetIndexStatisticsRequest::_Internal {
 public:
};

GetIndexStatisticsRequest::GetIndexStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.GetIndexStatisticsRequest)
}
GetIndexStatisticsRequest::GetIndexStatisticsRequest(const GetIndexStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIndexStatisticsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    _this->_impl_.index_name_.Set(from._internal_index_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.collectionid_ = from._impl_.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.GetIndexStatisticsRequest)
}

inline void GetIndexStatisticsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_name_){}
    , decltype(_impl_.collectionid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetIndexStatisticsRequest::~GetIndexStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.GetIndexStatisticsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIndexStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_name_.Destroy();
}

void GetIndexStatisticsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIndexStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.GetIndexStatisticsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_name_.ClearToEmpty();
  _impl_.collectionid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexStatisticsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string index_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "milvus.proto.index.GetIndexStatisticsRequest.index_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetIndexStatisticsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.GetIndexStatisticsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // string index_name = 2;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.index.GetIndexStatisticsRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.GetIndexStatisticsRequest)
  return target;
}

size_t GetIndexStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.GetIndexStatisticsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index_name = 2;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // int64 collectionID = 1;
  if (this->_internal_collectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIndexStatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIndexStatisticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIndexStatisticsRequest::GetClassData() const { return &_class_data_; }


void GetIndexStatisticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIndexStatisticsRequest*>(&to_msg);
  auto& from = static_cast<const GetIndexStatisticsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.GetIndexStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_index_name().empty()) {
    _this->_internal_set_index_name(from._internal_index_name());
  }
  if (from._internal_collectionid() != 0) {
    _this->_internal_set_collectionid(from._internal_collectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIndexStatisticsRequest::CopyFrom(const GetIndexStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.GetIndexStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexStatisticsRequest::IsInitialized() const {
  return true;
}

void GetIndexStatisticsRequest::InternalSwap(GetIndexStatisticsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_name_, lhs_arena,
      &other->_impl_.index_name_, rhs_arena
  );
  swap(_impl_.collectionid_, other->_impl_.collectionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexStatisticsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[30]);
}

// ===================================================================

class GetIndexStatisticsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetIndexStatisticsResponse* msg);
};

const ::milvus::proto::common::Status&
GetIndexStatisticsResponse::_Internal::status(const GetIndexStatisticsResponse* msg) {
  return *msg->_impl_.status_;
}
void GetIndexStatisticsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetIndexStatisticsResponse::GetIndexStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.index.GetIndexStatisticsResponse)
}
GetIndexStatisticsResponse::GetIndexStatisticsResponse(const GetIndexStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIndexStatisticsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_infos_){from._impl_.index_infos_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::milvus::proto::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.index.GetIndexStatisticsResponse)
}

inline void GetIndexStatisticsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_infos_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetIndexStatisticsResponse::~GetIndexStatisticsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.index.GetIndexStatisticsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIndexStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_infos_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetIndexStatisticsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIndexStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.index.GetIndexStatisticsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_infos_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexStatisticsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .milvus.proto.index.IndexInfo index_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetIndexStatisticsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.index.GetIndexStatisticsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .milvus.proto.index.IndexInfo index_infos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_index_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.index.GetIndexStatisticsResponse)
  return target;
}

size_t GetIndexStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.index.GetIndexStatisticsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.index.IndexInfo index_infos = 2;
  total_size += 1UL * this->_internal_index_infos_size();
  for (const auto& msg : this->_impl_.index_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIndexStatisticsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIndexStatisticsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIndexStatisticsResponse::GetClassData() const { return &_class_data_; }


void GetIndexStatisticsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIndexStatisticsResponse*>(&to_msg);
  auto& from = static_cast<const GetIndexStatisticsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.index.GetIndexStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_infos_.MergeFrom(from._impl_.index_infos_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIndexStatisticsResponse::CopyFrom(const GetIndexStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.index.GetIndexStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexStatisticsResponse::IsInitialized() const {
  return true;
}

void GetIndexStatisticsResponse::InternalSwap(GetIndexStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_infos_.InternalSwap(&other->_impl_.index_infos_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexStatisticsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_index_5fcoord_2eproto_getter, &descriptor_table_index_5fcoord_2eproto_once,
      file_level_metadata_index_5fcoord_2eproto[31]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace index
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::milvus::proto::index::IndexInfo*
Arena::CreateMaybeMessage< ::milvus::proto::index::IndexInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::IndexInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::FieldIndex*
Arena::CreateMaybeMessage< ::milvus::proto::index::FieldIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::FieldIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::SegmentIndex*
Arena::CreateMaybeMessage< ::milvus::proto::index::SegmentIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::SegmentIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::RegisterNodeRequest*
Arena::CreateMaybeMessage< ::milvus::proto::index::RegisterNodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::RegisterNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::RegisterNodeResponse*
Arena::CreateMaybeMessage< ::milvus::proto::index::RegisterNodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::RegisterNodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::GetIndexStateRequest*
Arena::CreateMaybeMessage< ::milvus::proto::index::GetIndexStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::GetIndexStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::GetIndexStateResponse*
Arena::CreateMaybeMessage< ::milvus::proto::index::GetIndexStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::GetIndexStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::GetSegmentIndexStateRequest*
Arena::CreateMaybeMessage< ::milvus::proto::index::GetSegmentIndexStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::GetSegmentIndexStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::SegmentIndexState*
Arena::CreateMaybeMessage< ::milvus::proto::index::SegmentIndexState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::SegmentIndexState >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::GetSegmentIndexStateResponse*
Arena::CreateMaybeMessage< ::milvus::proto::index::GetSegmentIndexStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::GetSegmentIndexStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::CreateIndexRequest*
Arena::CreateMaybeMessage< ::milvus::proto::index::CreateIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::CreateIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::GetIndexInfoRequest*
Arena::CreateMaybeMessage< ::milvus::proto::index::GetIndexInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::GetIndexInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::IndexFilePathInfo*
Arena::CreateMaybeMessage< ::milvus::proto::index::IndexFilePathInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::IndexFilePathInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::SegmentInfo*
Arena::CreateMaybeMessage< ::milvus::proto::index::SegmentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::SegmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::GetIndexInfoResponse_SegmentInfoEntry_DoNotUse*
Arena::CreateMaybeMessage< ::milvus::proto::index::GetIndexInfoResponse_SegmentInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::GetIndexInfoResponse_SegmentInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::GetIndexInfoResponse*
Arena::CreateMaybeMessage< ::milvus::proto::index::GetIndexInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::GetIndexInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::DropIndexRequest*
Arena::CreateMaybeMessage< ::milvus::proto::index::DropIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::DropIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::DescribeIndexRequest*
Arena::CreateMaybeMessage< ::milvus::proto::index::DescribeIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::DescribeIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::DescribeIndexResponse*
Arena::CreateMaybeMessage< ::milvus::proto::index::DescribeIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::DescribeIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::GetIndexBuildProgressRequest*
Arena::CreateMaybeMessage< ::milvus::proto::index::GetIndexBuildProgressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::GetIndexBuildProgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::GetIndexBuildProgressResponse*
Arena::CreateMaybeMessage< ::milvus::proto::index::GetIndexBuildProgressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::GetIndexBuildProgressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::StorageConfig*
Arena::CreateMaybeMessage< ::milvus::proto::index::StorageConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::StorageConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::CreateJobRequest*
Arena::CreateMaybeMessage< ::milvus::proto::index::CreateJobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::CreateJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::QueryJobsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::index::QueryJobsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::QueryJobsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::IndexTaskInfo*
Arena::CreateMaybeMessage< ::milvus::proto::index::IndexTaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::IndexTaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::QueryJobsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::index::QueryJobsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::QueryJobsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::DropJobsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::index::DropJobsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::DropJobsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::JobInfo*
Arena::CreateMaybeMessage< ::milvus::proto::index::JobInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::JobInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::GetJobStatsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::index::GetJobStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::GetJobStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::GetJobStatsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::index::GetJobStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::GetJobStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::GetIndexStatisticsRequest*
Arena::CreateMaybeMessage< ::milvus::proto::index::GetIndexStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::GetIndexStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::index::GetIndexStatisticsResponse*
Arena::CreateMaybeMessage< ::milvus::proto::index::GetIndexStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::index::GetIndexStatisticsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
