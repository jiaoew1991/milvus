// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "schema.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace milvus {
namespace proto {
namespace msg {
class CreateCollectionRequest;
struct CreateCollectionRequestDefaultTypeInternal;
extern CreateCollectionRequestDefaultTypeInternal _CreateCollectionRequest_default_instance_;
class CreatePartitionRequest;
struct CreatePartitionRequestDefaultTypeInternal;
extern CreatePartitionRequestDefaultTypeInternal _CreatePartitionRequest_default_instance_;
class DataNodeTtMsg;
struct DataNodeTtMsgDefaultTypeInternal;
extern DataNodeTtMsgDefaultTypeInternal _DataNodeTtMsg_default_instance_;
class DeleteRequest;
struct DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DropCollectionRequest;
struct DropCollectionRequestDefaultTypeInternal;
extern DropCollectionRequestDefaultTypeInternal _DropCollectionRequest_default_instance_;
class DropPartitionRequest;
struct DropPartitionRequestDefaultTypeInternal;
extern DropPartitionRequestDefaultTypeInternal _DropPartitionRequest_default_instance_;
class InsertRequest;
struct InsertRequestDefaultTypeInternal;
extern InsertRequestDefaultTypeInternal _InsertRequest_default_instance_;
class MsgPosition;
struct MsgPositionDefaultTypeInternal;
extern MsgPositionDefaultTypeInternal _MsgPosition_default_instance_;
class TimeTickMsg;
struct TimeTickMsgDefaultTypeInternal;
extern TimeTickMsgDefaultTypeInternal _TimeTickMsg_default_instance_;
}  // namespace msg
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> ::milvus::proto::msg::CreateCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::msg::CreateCollectionRequest>(Arena*);
template<> ::milvus::proto::msg::CreatePartitionRequest* Arena::CreateMaybeMessage<::milvus::proto::msg::CreatePartitionRequest>(Arena*);
template<> ::milvus::proto::msg::DataNodeTtMsg* Arena::CreateMaybeMessage<::milvus::proto::msg::DataNodeTtMsg>(Arena*);
template<> ::milvus::proto::msg::DeleteRequest* Arena::CreateMaybeMessage<::milvus::proto::msg::DeleteRequest>(Arena*);
template<> ::milvus::proto::msg::DropCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::msg::DropCollectionRequest>(Arena*);
template<> ::milvus::proto::msg::DropPartitionRequest* Arena::CreateMaybeMessage<::milvus::proto::msg::DropPartitionRequest>(Arena*);
template<> ::milvus::proto::msg::InsertRequest* Arena::CreateMaybeMessage<::milvus::proto::msg::InsertRequest>(Arena*);
template<> ::milvus::proto::msg::MsgPosition* Arena::CreateMaybeMessage<::milvus::proto::msg::MsgPosition>(Arena*);
template<> ::milvus::proto::msg::TimeTickMsg* Arena::CreateMaybeMessage<::milvus::proto::msg::TimeTickMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace milvus {
namespace proto {
namespace msg {

enum InsertDataVersion : int {
  RowBased = 0,
  ColumnBased = 1,
  InsertDataVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InsertDataVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InsertDataVersion_IsValid(int value);
constexpr InsertDataVersion InsertDataVersion_MIN = RowBased;
constexpr InsertDataVersion InsertDataVersion_MAX = ColumnBased;
constexpr int InsertDataVersion_ARRAYSIZE = InsertDataVersion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsertDataVersion_descriptor();
template<typename T>
inline const std::string& InsertDataVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InsertDataVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InsertDataVersion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InsertDataVersion_descriptor(), enum_t_value);
}
inline bool InsertDataVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InsertDataVersion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InsertDataVersion>(
    InsertDataVersion_descriptor(), name, value);
}
// ===================================================================

class InsertRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.InsertRequest) */ {
 public:
  inline InsertRequest() : InsertRequest(nullptr) {}
  ~InsertRequest() override;
  explicit PROTOBUF_CONSTEXPR InsertRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertRequest(const InsertRequest& from);
  InsertRequest(InsertRequest&& from) noexcept
    : InsertRequest() {
    *this = ::std::move(from);
  }

  inline InsertRequest& operator=(const InsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertRequest& operator=(InsertRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertRequest* internal_default_instance() {
    return reinterpret_cast<const InsertRequest*>(
               &_InsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InsertRequest& a, InsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InsertRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InsertRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InsertRequest& from) {
    InsertRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.InsertRequest";
  }
  protected:
  explicit InsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampsFieldNumber = 10,
    kRowIDsFieldNumber = 11,
    kRowDataFieldNumber = 12,
    kFieldsDataFieldNumber = 13,
    kShardNameFieldNumber = 2,
    kDbNameFieldNumber = 3,
    kCollectionNameFieldNumber = 4,
    kPartitionNameFieldNumber = 5,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 6,
    kCollectionIDFieldNumber = 7,
    kPartitionIDFieldNumber = 8,
    kSegmentIDFieldNumber = 9,
    kNumRowsFieldNumber = 14,
    kVersionFieldNumber = 15,
  };
  // repeated uint64 timestamps = 10;
  int timestamps_size() const;
  private:
  int _internal_timestamps_size() const;
  public:
  void clear_timestamps();
  private:
  uint64_t _internal_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_timestamps() const;
  void _internal_add_timestamps(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_timestamps();
  public:
  uint64_t timestamps(int index) const;
  void set_timestamps(int index, uint64_t value);
  void add_timestamps(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_timestamps();

  // repeated int64 rowIDs = 11;
  int rowids_size() const;
  private:
  int _internal_rowids_size() const;
  public:
  void clear_rowids();
  private:
  int64_t _internal_rowids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_rowids() const;
  void _internal_add_rowids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_rowids();
  public:
  int64_t rowids(int index) const;
  void set_rowids(int index, int64_t value);
  void add_rowids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      rowids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_rowids();

  // repeated .milvus.proto.common.Blob row_data = 12;
  int row_data_size() const;
  private:
  int _internal_row_data_size() const;
  public:
  void clear_row_data();
  ::milvus::proto::common::Blob* mutable_row_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::Blob >*
      mutable_row_data();
  private:
  const ::milvus::proto::common::Blob& _internal_row_data(int index) const;
  ::milvus::proto::common::Blob* _internal_add_row_data();
  public:
  const ::milvus::proto::common::Blob& row_data(int index) const;
  ::milvus::proto::common::Blob* add_row_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::Blob >&
      row_data() const;

  // repeated .milvus.proto.schema.FieldData fields_data = 13;
  int fields_data_size() const;
  private:
  int _internal_fields_data_size() const;
  public:
  void clear_fields_data();
  ::milvus::proto::schema::FieldData* mutable_fields_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
      mutable_fields_data();
  private:
  const ::milvus::proto::schema::FieldData& _internal_fields_data(int index) const;
  ::milvus::proto::schema::FieldData* _internal_add_fields_data();
  public:
  const ::milvus::proto::schema::FieldData& fields_data(int index) const;
  ::milvus::proto::schema::FieldData* add_fields_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
      fields_data() const;

  // string shardName = 2;
  void clear_shardname();
  const std::string& shardname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shardname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shardname();
  PROTOBUF_NODISCARD std::string* release_shardname();
  void set_allocated_shardname(std::string* shardname);
  private:
  const std::string& _internal_shardname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shardname(const std::string& value);
  std::string* _internal_mutable_shardname();
  public:

  // string db_name = 3;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 4;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 5;
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 6;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 7;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 partitionID = 8;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // int64 segmentID = 9;
  void clear_segmentid();
  int64_t segmentid() const;
  void set_segmentid(int64_t value);
  private:
  int64_t _internal_segmentid() const;
  void _internal_set_segmentid(int64_t value);
  public:

  // uint64 num_rows = 14;
  void clear_num_rows();
  uint64_t num_rows() const;
  void set_num_rows(uint64_t value);
  private:
  uint64_t _internal_num_rows() const;
  void _internal_set_num_rows(uint64_t value);
  public:

  // .milvus.proto.msg.InsertDataVersion version = 15;
  void clear_version();
  ::milvus::proto::msg::InsertDataVersion version() const;
  void set_version(::milvus::proto::msg::InsertDataVersion value);
  private:
  ::milvus::proto::msg::InsertDataVersion _internal_version() const;
  void _internal_set_version(::milvus::proto::msg::InsertDataVersion value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.InsertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > timestamps_;
    mutable std::atomic<int> _timestamps_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > rowids_;
    mutable std::atomic<int> _rowids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::Blob > row_data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData > fields_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shardname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t dbid_;
    int64_t collectionid_;
    int64_t partitionid_;
    int64_t segmentid_;
    uint64_t num_rows_;
    int version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.DeleteRequest) */ {
 public:
  inline DeleteRequest() : DeleteRequest(nullptr) {}
  ~DeleteRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRequest(const DeleteRequest& from);
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteRequest& from) {
    DeleteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.DeleteRequest";
  }
  protected:
  explicit DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInt64PrimaryKeysFieldNumber = 9,
    kTimestampsFieldNumber = 10,
    kShardNameFieldNumber = 2,
    kDbNameFieldNumber = 3,
    kCollectionNameFieldNumber = 4,
    kPartitionNameFieldNumber = 5,
    kBaseFieldNumber = 1,
    kPrimaryKeysFieldNumber = 12,
    kDbIDFieldNumber = 6,
    kCollectionIDFieldNumber = 7,
    kPartitionIDFieldNumber = 8,
    kNumRowsFieldNumber = 11,
  };
  // repeated int64 int64_primary_keys = 9;
  int int64_primary_keys_size() const;
  private:
  int _internal_int64_primary_keys_size() const;
  public:
  void clear_int64_primary_keys();
  private:
  int64_t _internal_int64_primary_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_int64_primary_keys() const;
  void _internal_add_int64_primary_keys(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_int64_primary_keys();
  public:
  int64_t int64_primary_keys(int index) const;
  void set_int64_primary_keys(int index, int64_t value);
  void add_int64_primary_keys(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      int64_primary_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_int64_primary_keys();

  // repeated uint64 timestamps = 10;
  int timestamps_size() const;
  private:
  int _internal_timestamps_size() const;
  public:
  void clear_timestamps();
  private:
  uint64_t _internal_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_timestamps() const;
  void _internal_add_timestamps(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_timestamps();
  public:
  uint64_t timestamps(int index) const;
  void set_timestamps(int index, uint64_t value);
  void add_timestamps(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_timestamps();

  // string shardName = 2;
  void clear_shardname();
  const std::string& shardname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shardname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shardname();
  PROTOBUF_NODISCARD std::string* release_shardname();
  void set_allocated_shardname(std::string* shardname);
  private:
  const std::string& _internal_shardname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shardname(const std::string& value);
  std::string* _internal_mutable_shardname();
  public:

  // string db_name = 3;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 4;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 5;
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.schema.IDs primary_keys = 12;
  bool has_primary_keys() const;
  private:
  bool _internal_has_primary_keys() const;
  public:
  void clear_primary_keys();
  const ::milvus::proto::schema::IDs& primary_keys() const;
  PROTOBUF_NODISCARD ::milvus::proto::schema::IDs* release_primary_keys();
  ::milvus::proto::schema::IDs* mutable_primary_keys();
  void set_allocated_primary_keys(::milvus::proto::schema::IDs* primary_keys);
  private:
  const ::milvus::proto::schema::IDs& _internal_primary_keys() const;
  ::milvus::proto::schema::IDs* _internal_mutable_primary_keys();
  public:
  void unsafe_arena_set_allocated_primary_keys(
      ::milvus::proto::schema::IDs* primary_keys);
  ::milvus::proto::schema::IDs* unsafe_arena_release_primary_keys();

  // int64 dbID = 6;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 7;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 partitionID = 8;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // int64 num_rows = 11;
  void clear_num_rows();
  int64_t num_rows() const;
  void set_num_rows(int64_t value);
  private:
  int64_t _internal_num_rows() const;
  void _internal_set_num_rows(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.DeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > int64_primary_keys_;
    mutable std::atomic<int> _int64_primary_keys_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > timestamps_;
    mutable std::atomic<int> _timestamps_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shardname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
    ::milvus::proto::common::MsgBase* base_;
    ::milvus::proto::schema::IDs* primary_keys_;
    int64_t dbid_;
    int64_t collectionid_;
    int64_t partitionid_;
    int64_t num_rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MsgPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.MsgPosition) */ {
 public:
  inline MsgPosition() : MsgPosition(nullptr) {}
  ~MsgPosition() override;
  explicit PROTOBUF_CONSTEXPR MsgPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgPosition(const MsgPosition& from);
  MsgPosition(MsgPosition&& from) noexcept
    : MsgPosition() {
    *this = ::std::move(from);
  }

  inline MsgPosition& operator=(const MsgPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPosition& operator=(MsgPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgPosition* internal_default_instance() {
    return reinterpret_cast<const MsgPosition*>(
               &_MsgPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgPosition& a, MsgPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgPosition& from) {
    MsgPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.MsgPosition";
  }
  protected:
  explicit MsgPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kMsgIDFieldNumber = 2,
    kMsgGroupFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // string channel_name = 1;
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_NODISCARD std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // bytes msgID = 2;
  void clear_msgid();
  const std::string& msgid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgid();
  PROTOBUF_NODISCARD std::string* release_msgid();
  void set_allocated_msgid(std::string* msgid);
  private:
  const std::string& _internal_msgid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgid(const std::string& value);
  std::string* _internal_mutable_msgid();
  public:

  // string msgGroup = 3;
  void clear_msggroup();
  const std::string& msggroup() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msggroup(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msggroup();
  PROTOBUF_NODISCARD std::string* release_msggroup();
  void set_allocated_msggroup(std::string* msggroup);
  private:
  const std::string& _internal_msggroup() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msggroup(const std::string& value);
  std::string* _internal_mutable_msggroup();
  public:

  // uint64 timestamp = 4;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.MsgPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msggroup_;
    uint64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreateCollectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.CreateCollectionRequest) */ {
 public:
  inline CreateCollectionRequest() : CreateCollectionRequest(nullptr) {}
  ~CreateCollectionRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateCollectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCollectionRequest(const CreateCollectionRequest& from);
  CreateCollectionRequest(CreateCollectionRequest&& from) noexcept
    : CreateCollectionRequest() {
    *this = ::std::move(from);
  }

  inline CreateCollectionRequest& operator=(const CreateCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCollectionRequest& operator=(CreateCollectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCollectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCollectionRequest*>(
               &_CreateCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateCollectionRequest& a, CreateCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCollectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCollectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCollectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateCollectionRequest& from) {
    CreateCollectionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCollectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.CreateCollectionRequest";
  }
  protected:
  explicit CreateCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNamesFieldNumber = 9,
    kPhysicalChannelNamesFieldNumber = 10,
    kPartitionIDsFieldNumber = 11,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kSchemaFieldNumber = 8,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 5,
    kCollectionIDFieldNumber = 6,
    kPartitionIDFieldNumber = 7,
  };
  // repeated string virtualChannelNames = 9;
  int virtualchannelnames_size() const;
  private:
  int _internal_virtualchannelnames_size() const;
  public:
  void clear_virtualchannelnames();
  const std::string& virtualchannelnames(int index) const;
  std::string* mutable_virtualchannelnames(int index);
  void set_virtualchannelnames(int index, const std::string& value);
  void set_virtualchannelnames(int index, std::string&& value);
  void set_virtualchannelnames(int index, const char* value);
  void set_virtualchannelnames(int index, const char* value, size_t size);
  std::string* add_virtualchannelnames();
  void add_virtualchannelnames(const std::string& value);
  void add_virtualchannelnames(std::string&& value);
  void add_virtualchannelnames(const char* value);
  void add_virtualchannelnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& virtualchannelnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_virtualchannelnames();
  private:
  const std::string& _internal_virtualchannelnames(int index) const;
  std::string* _internal_add_virtualchannelnames();
  public:

  // repeated string physicalChannelNames = 10;
  int physicalchannelnames_size() const;
  private:
  int _internal_physicalchannelnames_size() const;
  public:
  void clear_physicalchannelnames();
  const std::string& physicalchannelnames(int index) const;
  std::string* mutable_physicalchannelnames(int index);
  void set_physicalchannelnames(int index, const std::string& value);
  void set_physicalchannelnames(int index, std::string&& value);
  void set_physicalchannelnames(int index, const char* value);
  void set_physicalchannelnames(int index, const char* value, size_t size);
  std::string* add_physicalchannelnames();
  void add_physicalchannelnames(const std::string& value);
  void add_physicalchannelnames(std::string&& value);
  void add_physicalchannelnames(const char* value);
  void add_physicalchannelnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& physicalchannelnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_physicalchannelnames();
  private:
  const std::string& _internal_physicalchannelnames(int index) const;
  std::string* _internal_add_physicalchannelnames();
  public:

  // repeated int64 partitionIDs = 11;
  int partitionids_size() const;
  private:
  int _internal_partitionids_size() const;
  public:
  void clear_partitionids();
  private:
  int64_t _internal_partitionids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_partitionids() const;
  void _internal_add_partitionids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_partitionids();
  public:
  int64_t partitionids(int index) const;
  void set_partitionids(int index, int64_t value);
  void add_partitionids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      partitionids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_partitionids();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collectionName = 3;
  void clear_collectionname();
  const std::string& collectionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collectionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collectionname();
  PROTOBUF_NODISCARD std::string* release_collectionname();
  void set_allocated_collectionname(std::string* collectionname);
  private:
  const std::string& _internal_collectionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collectionname(const std::string& value);
  std::string* _internal_mutable_collectionname();
  public:

  // string partitionName = 4;
  void clear_partitionname();
  const std::string& partitionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partitionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partitionname();
  PROTOBUF_NODISCARD std::string* release_partitionname();
  void set_allocated_partitionname(std::string* partitionname);
  private:
  const std::string& _internal_partitionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partitionname(const std::string& value);
  std::string* _internal_mutable_partitionname();
  public:

  // bytes schema = 8;
  void clear_schema();
  const std::string& schema() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema();
  PROTOBUF_NODISCARD std::string* release_schema();
  void set_allocated_schema(std::string* schema);
  private:
  const std::string& _internal_schema() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema(const std::string& value);
  std::string* _internal_mutable_schema();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 5;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 6;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 partitionID = 7;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.CreateCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> virtualchannelnames_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> physicalchannelnames_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > partitionids_;
    mutable std::atomic<int> _partitionids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectionname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partitionname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t dbid_;
    int64_t collectionid_;
    int64_t partitionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DropCollectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.DropCollectionRequest) */ {
 public:
  inline DropCollectionRequest() : DropCollectionRequest(nullptr) {}
  ~DropCollectionRequest() override;
  explicit PROTOBUF_CONSTEXPR DropCollectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropCollectionRequest(const DropCollectionRequest& from);
  DropCollectionRequest(DropCollectionRequest&& from) noexcept
    : DropCollectionRequest() {
    *this = ::std::move(from);
  }

  inline DropCollectionRequest& operator=(const DropCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropCollectionRequest& operator=(DropCollectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropCollectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const DropCollectionRequest*>(
               &_DropCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DropCollectionRequest& a, DropCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropCollectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropCollectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropCollectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropCollectionRequest& from) {
    DropCollectionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropCollectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.DropCollectionRequest";
  }
  protected:
  explicit DropCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 4,
    kCollectionIDFieldNumber = 5,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collectionName = 3;
  void clear_collectionname();
  const std::string& collectionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collectionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collectionname();
  PROTOBUF_NODISCARD std::string* release_collectionname();
  void set_allocated_collectionname(std::string* collectionname);
  private:
  const std::string& _internal_collectionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collectionname(const std::string& value);
  std::string* _internal_mutable_collectionname();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 4;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 5;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.DropCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectionname_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t dbid_;
    int64_t collectionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreatePartitionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.CreatePartitionRequest) */ {
 public:
  inline CreatePartitionRequest() : CreatePartitionRequest(nullptr) {}
  ~CreatePartitionRequest() override;
  explicit PROTOBUF_CONSTEXPR CreatePartitionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreatePartitionRequest(const CreatePartitionRequest& from);
  CreatePartitionRequest(CreatePartitionRequest&& from) noexcept
    : CreatePartitionRequest() {
    *this = ::std::move(from);
  }

  inline CreatePartitionRequest& operator=(const CreatePartitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePartitionRequest& operator=(CreatePartitionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePartitionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePartitionRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePartitionRequest*>(
               &_CreatePartitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreatePartitionRequest& a, CreatePartitionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePartitionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePartitionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePartitionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatePartitionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreatePartitionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreatePartitionRequest& from) {
    CreatePartitionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePartitionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.CreatePartitionRequest";
  }
  protected:
  explicit CreatePartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 5,
    kCollectionIDFieldNumber = 6,
    kPartitionIDFieldNumber = 7,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 5;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 6;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 partitionID = 7;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.CreatePartitionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t dbid_;
    int64_t collectionid_;
    int64_t partitionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DropPartitionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.DropPartitionRequest) */ {
 public:
  inline DropPartitionRequest() : DropPartitionRequest(nullptr) {}
  ~DropPartitionRequest() override;
  explicit PROTOBUF_CONSTEXPR DropPartitionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropPartitionRequest(const DropPartitionRequest& from);
  DropPartitionRequest(DropPartitionRequest&& from) noexcept
    : DropPartitionRequest() {
    *this = ::std::move(from);
  }

  inline DropPartitionRequest& operator=(const DropPartitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropPartitionRequest& operator=(DropPartitionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropPartitionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropPartitionRequest* internal_default_instance() {
    return reinterpret_cast<const DropPartitionRequest*>(
               &_DropPartitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DropPartitionRequest& a, DropPartitionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropPartitionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropPartitionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropPartitionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropPartitionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropPartitionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropPartitionRequest& from) {
    DropPartitionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropPartitionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.DropPartitionRequest";
  }
  protected:
  explicit DropPartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 5,
    kCollectionIDFieldNumber = 6,
    kPartitionIDFieldNumber = 7,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_name();
  PROTOBUF_NODISCARD std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 5;
  void clear_dbid();
  int64_t dbid() const;
  void set_dbid(int64_t value);
  private:
  int64_t _internal_dbid() const;
  void _internal_set_dbid(int64_t value);
  public:

  // int64 collectionID = 6;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // int64 partitionID = 7;
  void clear_partitionid();
  int64_t partitionid() const;
  void set_partitionid(int64_t value);
  private:
  int64_t _internal_partitionid() const;
  void _internal_set_partitionid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.DropPartitionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
    ::milvus::proto::common::MsgBase* base_;
    int64_t dbid_;
    int64_t collectionid_;
    int64_t partitionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class TimeTickMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.TimeTickMsg) */ {
 public:
  inline TimeTickMsg() : TimeTickMsg(nullptr) {}
  ~TimeTickMsg() override;
  explicit PROTOBUF_CONSTEXPR TimeTickMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeTickMsg(const TimeTickMsg& from);
  TimeTickMsg(TimeTickMsg&& from) noexcept
    : TimeTickMsg() {
    *this = ::std::move(from);
  }

  inline TimeTickMsg& operator=(const TimeTickMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeTickMsg& operator=(TimeTickMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeTickMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeTickMsg* internal_default_instance() {
    return reinterpret_cast<const TimeTickMsg*>(
               &_TimeTickMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TimeTickMsg& a, TimeTickMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeTickMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeTickMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeTickMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeTickMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeTickMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeTickMsg& from) {
    TimeTickMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeTickMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.TimeTickMsg";
  }
  protected:
  explicit TimeTickMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.TimeTickMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::milvus::proto::common::MsgBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DataNodeTtMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.DataNodeTtMsg) */ {
 public:
  inline DataNodeTtMsg() : DataNodeTtMsg(nullptr) {}
  ~DataNodeTtMsg() override;
  explicit PROTOBUF_CONSTEXPR DataNodeTtMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataNodeTtMsg(const DataNodeTtMsg& from);
  DataNodeTtMsg(DataNodeTtMsg&& from) noexcept
    : DataNodeTtMsg() {
    *this = ::std::move(from);
  }

  inline DataNodeTtMsg& operator=(const DataNodeTtMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataNodeTtMsg& operator=(DataNodeTtMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataNodeTtMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataNodeTtMsg* internal_default_instance() {
    return reinterpret_cast<const DataNodeTtMsg*>(
               &_DataNodeTtMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DataNodeTtMsg& a, DataNodeTtMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(DataNodeTtMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataNodeTtMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataNodeTtMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataNodeTtMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataNodeTtMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataNodeTtMsg& from) {
    DataNodeTtMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataNodeTtMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.DataNodeTtMsg";
  }
  protected:
  explicit DataNodeTtMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsStatsFieldNumber = 4,
    kChannelNameFieldNumber = 2,
    kBaseFieldNumber = 1,
    kTimestampFieldNumber = 3,
  };
  // repeated .milvus.proto.common.SegmentStats segments_stats = 4;
  int segments_stats_size() const;
  private:
  int _internal_segments_stats_size() const;
  public:
  void clear_segments_stats();
  ::milvus::proto::common::SegmentStats* mutable_segments_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats >*
      mutable_segments_stats();
  private:
  const ::milvus::proto::common::SegmentStats& _internal_segments_stats(int index) const;
  ::milvus::proto::common::SegmentStats* _internal_add_segments_stats();
  public:
  const ::milvus::proto::common::SegmentStats& segments_stats(int index) const;
  ::milvus::proto::common::SegmentStats* add_segments_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats >&
      segments_stats() const;

  // string channel_name = 2;
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_NODISCARD std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_NODISCARD ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // uint64 timestamp = 3;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.DataNodeTtMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats > segments_stats_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
    ::milvus::proto::common::MsgBase* base_;
    uint64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InsertRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool InsertRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool InsertRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& InsertRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& InsertRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.base)
  return _internal_base();
}
inline void InsertRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.InsertRequest.base)
}
inline ::milvus::proto::common::MsgBase* InsertRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* InsertRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.InsertRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* InsertRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* InsertRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.InsertRequest.base)
  return _msg;
}
inline void InsertRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.InsertRequest.base)
}

// string shardName = 2;
inline void InsertRequest::clear_shardname() {
  _impl_.shardname_.ClearToEmpty();
}
inline const std::string& InsertRequest::shardname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.shardName)
  return _internal_shardname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InsertRequest::set_shardname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.shardname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.shardName)
}
inline std::string* InsertRequest::mutable_shardname() {
  std::string* _s = _internal_mutable_shardname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.InsertRequest.shardName)
  return _s;
}
inline const std::string& InsertRequest::_internal_shardname() const {
  return _impl_.shardname_.Get();
}
inline void InsertRequest::_internal_set_shardname(const std::string& value) {
  
  _impl_.shardname_.Set(value, GetArenaForAllocation());
}
inline std::string* InsertRequest::_internal_mutable_shardname() {
  
  return _impl_.shardname_.Mutable(GetArenaForAllocation());
}
inline std::string* InsertRequest::release_shardname() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.InsertRequest.shardName)
  return _impl_.shardname_.Release();
}
inline void InsertRequest::set_allocated_shardname(std::string* shardname) {
  if (shardname != nullptr) {
    
  } else {
    
  }
  _impl_.shardname_.SetAllocated(shardname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shardname_.IsDefault()) {
    _impl_.shardname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.InsertRequest.shardName)
}

// string db_name = 3;
inline void InsertRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& InsertRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InsertRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.db_name)
}
inline std::string* InsertRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.InsertRequest.db_name)
  return _s;
}
inline const std::string& InsertRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void InsertRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* InsertRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* InsertRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.InsertRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void InsertRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.InsertRequest.db_name)
}

// string collection_name = 4;
inline void InsertRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& InsertRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InsertRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.collection_name)
}
inline std::string* InsertRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.InsertRequest.collection_name)
  return _s;
}
inline const std::string& InsertRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void InsertRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* InsertRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* InsertRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.InsertRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void InsertRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.InsertRequest.collection_name)
}

// string partition_name = 5;
inline void InsertRequest::clear_partition_name() {
  _impl_.partition_name_.ClearToEmpty();
}
inline const std::string& InsertRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InsertRequest::set_partition_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.partition_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.partition_name)
}
inline std::string* InsertRequest::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.InsertRequest.partition_name)
  return _s;
}
inline const std::string& InsertRequest::_internal_partition_name() const {
  return _impl_.partition_name_.Get();
}
inline void InsertRequest::_internal_set_partition_name(const std::string& value) {
  
  _impl_.partition_name_.Set(value, GetArenaForAllocation());
}
inline std::string* InsertRequest::_internal_mutable_partition_name() {
  
  return _impl_.partition_name_.Mutable(GetArenaForAllocation());
}
inline std::string* InsertRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.InsertRequest.partition_name)
  return _impl_.partition_name_.Release();
}
inline void InsertRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  _impl_.partition_name_.SetAllocated(partition_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partition_name_.IsDefault()) {
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.InsertRequest.partition_name)
}

// int64 dbID = 6;
inline void InsertRequest::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t InsertRequest::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t InsertRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.dbID)
  return _internal_dbid();
}
inline void InsertRequest::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void InsertRequest::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.dbID)
}

// int64 collectionID = 7;
inline void InsertRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t InsertRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t InsertRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.collectionID)
  return _internal_collectionid();
}
inline void InsertRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void InsertRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.collectionID)
}

// int64 partitionID = 8;
inline void InsertRequest::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t InsertRequest::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t InsertRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.partitionID)
  return _internal_partitionid();
}
inline void InsertRequest::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void InsertRequest::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.partitionID)
}

// int64 segmentID = 9;
inline void InsertRequest::clear_segmentid() {
  _impl_.segmentid_ = int64_t{0};
}
inline int64_t InsertRequest::_internal_segmentid() const {
  return _impl_.segmentid_;
}
inline int64_t InsertRequest::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.segmentID)
  return _internal_segmentid();
}
inline void InsertRequest::_internal_set_segmentid(int64_t value) {
  
  _impl_.segmentid_ = value;
}
inline void InsertRequest::set_segmentid(int64_t value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.segmentID)
}

// repeated uint64 timestamps = 10;
inline int InsertRequest::_internal_timestamps_size() const {
  return _impl_.timestamps_.size();
}
inline int InsertRequest::timestamps_size() const {
  return _internal_timestamps_size();
}
inline void InsertRequest::clear_timestamps() {
  _impl_.timestamps_.Clear();
}
inline uint64_t InsertRequest::_internal_timestamps(int index) const {
  return _impl_.timestamps_.Get(index);
}
inline uint64_t InsertRequest::timestamps(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.timestamps)
  return _internal_timestamps(index);
}
inline void InsertRequest::set_timestamps(int index, uint64_t value) {
  _impl_.timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.timestamps)
}
inline void InsertRequest::_internal_add_timestamps(uint64_t value) {
  _impl_.timestamps_.Add(value);
}
inline void InsertRequest::add_timestamps(uint64_t value) {
  _internal_add_timestamps(value);
  // @@protoc_insertion_point(field_add:milvus.proto.msg.InsertRequest.timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
InsertRequest::_internal_timestamps() const {
  return _impl_.timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
InsertRequest::timestamps() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.InsertRequest.timestamps)
  return _internal_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
InsertRequest::_internal_mutable_timestamps() {
  return &_impl_.timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
InsertRequest::mutable_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.InsertRequest.timestamps)
  return _internal_mutable_timestamps();
}

// repeated int64 rowIDs = 11;
inline int InsertRequest::_internal_rowids_size() const {
  return _impl_.rowids_.size();
}
inline int InsertRequest::rowids_size() const {
  return _internal_rowids_size();
}
inline void InsertRequest::clear_rowids() {
  _impl_.rowids_.Clear();
}
inline int64_t InsertRequest::_internal_rowids(int index) const {
  return _impl_.rowids_.Get(index);
}
inline int64_t InsertRequest::rowids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.rowIDs)
  return _internal_rowids(index);
}
inline void InsertRequest::set_rowids(int index, int64_t value) {
  _impl_.rowids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.rowIDs)
}
inline void InsertRequest::_internal_add_rowids(int64_t value) {
  _impl_.rowids_.Add(value);
}
inline void InsertRequest::add_rowids(int64_t value) {
  _internal_add_rowids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.msg.InsertRequest.rowIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
InsertRequest::_internal_rowids() const {
  return _impl_.rowids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
InsertRequest::rowids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.InsertRequest.rowIDs)
  return _internal_rowids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
InsertRequest::_internal_mutable_rowids() {
  return &_impl_.rowids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
InsertRequest::mutable_rowids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.InsertRequest.rowIDs)
  return _internal_mutable_rowids();
}

// repeated .milvus.proto.common.Blob row_data = 12;
inline int InsertRequest::_internal_row_data_size() const {
  return _impl_.row_data_.size();
}
inline int InsertRequest::row_data_size() const {
  return _internal_row_data_size();
}
inline ::milvus::proto::common::Blob* InsertRequest::mutable_row_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.InsertRequest.row_data)
  return _impl_.row_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::Blob >*
InsertRequest::mutable_row_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.InsertRequest.row_data)
  return &_impl_.row_data_;
}
inline const ::milvus::proto::common::Blob& InsertRequest::_internal_row_data(int index) const {
  return _impl_.row_data_.Get(index);
}
inline const ::milvus::proto::common::Blob& InsertRequest::row_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.row_data)
  return _internal_row_data(index);
}
inline ::milvus::proto::common::Blob* InsertRequest::_internal_add_row_data() {
  return _impl_.row_data_.Add();
}
inline ::milvus::proto::common::Blob* InsertRequest::add_row_data() {
  ::milvus::proto::common::Blob* _add = _internal_add_row_data();
  // @@protoc_insertion_point(field_add:milvus.proto.msg.InsertRequest.row_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::Blob >&
InsertRequest::row_data() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.InsertRequest.row_data)
  return _impl_.row_data_;
}

// repeated .milvus.proto.schema.FieldData fields_data = 13;
inline int InsertRequest::_internal_fields_data_size() const {
  return _impl_.fields_data_.size();
}
inline int InsertRequest::fields_data_size() const {
  return _internal_fields_data_size();
}
inline ::milvus::proto::schema::FieldData* InsertRequest::mutable_fields_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.InsertRequest.fields_data)
  return _impl_.fields_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
InsertRequest::mutable_fields_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.InsertRequest.fields_data)
  return &_impl_.fields_data_;
}
inline const ::milvus::proto::schema::FieldData& InsertRequest::_internal_fields_data(int index) const {
  return _impl_.fields_data_.Get(index);
}
inline const ::milvus::proto::schema::FieldData& InsertRequest::fields_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.fields_data)
  return _internal_fields_data(index);
}
inline ::milvus::proto::schema::FieldData* InsertRequest::_internal_add_fields_data() {
  return _impl_.fields_data_.Add();
}
inline ::milvus::proto::schema::FieldData* InsertRequest::add_fields_data() {
  ::milvus::proto::schema::FieldData* _add = _internal_add_fields_data();
  // @@protoc_insertion_point(field_add:milvus.proto.msg.InsertRequest.fields_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
InsertRequest::fields_data() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.InsertRequest.fields_data)
  return _impl_.fields_data_;
}

// uint64 num_rows = 14;
inline void InsertRequest::clear_num_rows() {
  _impl_.num_rows_ = uint64_t{0u};
}
inline uint64_t InsertRequest::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline uint64_t InsertRequest::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.num_rows)
  return _internal_num_rows();
}
inline void InsertRequest::_internal_set_num_rows(uint64_t value) {
  
  _impl_.num_rows_ = value;
}
inline void InsertRequest::set_num_rows(uint64_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.num_rows)
}

// .milvus.proto.msg.InsertDataVersion version = 15;
inline void InsertRequest::clear_version() {
  _impl_.version_ = 0;
}
inline ::milvus::proto::msg::InsertDataVersion InsertRequest::_internal_version() const {
  return static_cast< ::milvus::proto::msg::InsertDataVersion >(_impl_.version_);
}
inline ::milvus::proto::msg::InsertDataVersion InsertRequest::version() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.version)
  return _internal_version();
}
inline void InsertRequest::_internal_set_version(::milvus::proto::msg::InsertDataVersion value) {
  
  _impl_.version_ = value;
}
inline void InsertRequest::set_version(::milvus::proto::msg::InsertDataVersion value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.version)
}

// -------------------------------------------------------------------

// DeleteRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DeleteRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DeleteRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DeleteRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DeleteRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.base)
  return _internal_base();
}
inline void DeleteRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DeleteRequest.base)
}
inline ::milvus::proto::common::MsgBase* DeleteRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DeleteRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DeleteRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DeleteRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DeleteRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DeleteRequest.base)
  return _msg;
}
inline void DeleteRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DeleteRequest.base)
}

// string shardName = 2;
inline void DeleteRequest::clear_shardname() {
  _impl_.shardname_.ClearToEmpty();
}
inline const std::string& DeleteRequest::shardname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.shardName)
  return _internal_shardname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRequest::set_shardname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.shardname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.shardName)
}
inline std::string* DeleteRequest::mutable_shardname() {
  std::string* _s = _internal_mutable_shardname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DeleteRequest.shardName)
  return _s;
}
inline const std::string& DeleteRequest::_internal_shardname() const {
  return _impl_.shardname_.Get();
}
inline void DeleteRequest::_internal_set_shardname(const std::string& value) {
  
  _impl_.shardname_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRequest::_internal_mutable_shardname() {
  
  return _impl_.shardname_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRequest::release_shardname() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DeleteRequest.shardName)
  return _impl_.shardname_.Release();
}
inline void DeleteRequest::set_allocated_shardname(std::string* shardname) {
  if (shardname != nullptr) {
    
  } else {
    
  }
  _impl_.shardname_.SetAllocated(shardname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shardname_.IsDefault()) {
    _impl_.shardname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DeleteRequest.shardName)
}

// string db_name = 3;
inline void DeleteRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DeleteRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.db_name)
}
inline std::string* DeleteRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DeleteRequest.db_name)
  return _s;
}
inline const std::string& DeleteRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DeleteRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DeleteRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void DeleteRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DeleteRequest.db_name)
}

// string collection_name = 4;
inline void DeleteRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& DeleteRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.collection_name)
}
inline std::string* DeleteRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DeleteRequest.collection_name)
  return _s;
}
inline const std::string& DeleteRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void DeleteRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DeleteRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void DeleteRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DeleteRequest.collection_name)
}

// string partition_name = 5;
inline void DeleteRequest::clear_partition_name() {
  _impl_.partition_name_.ClearToEmpty();
}
inline const std::string& DeleteRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRequest::set_partition_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.partition_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.partition_name)
}
inline std::string* DeleteRequest::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DeleteRequest.partition_name)
  return _s;
}
inline const std::string& DeleteRequest::_internal_partition_name() const {
  return _impl_.partition_name_.Get();
}
inline void DeleteRequest::_internal_set_partition_name(const std::string& value) {
  
  _impl_.partition_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRequest::_internal_mutable_partition_name() {
  
  return _impl_.partition_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DeleteRequest.partition_name)
  return _impl_.partition_name_.Release();
}
inline void DeleteRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  _impl_.partition_name_.SetAllocated(partition_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partition_name_.IsDefault()) {
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DeleteRequest.partition_name)
}

// int64 dbID = 6;
inline void DeleteRequest::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t DeleteRequest::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t DeleteRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.dbID)
  return _internal_dbid();
}
inline void DeleteRequest::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void DeleteRequest::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.dbID)
}

// int64 collectionID = 7;
inline void DeleteRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t DeleteRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t DeleteRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.collectionID)
  return _internal_collectionid();
}
inline void DeleteRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void DeleteRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.collectionID)
}

// int64 partitionID = 8;
inline void DeleteRequest::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t DeleteRequest::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t DeleteRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.partitionID)
  return _internal_partitionid();
}
inline void DeleteRequest::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void DeleteRequest::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.partitionID)
}

// repeated int64 int64_primary_keys = 9;
inline int DeleteRequest::_internal_int64_primary_keys_size() const {
  return _impl_.int64_primary_keys_.size();
}
inline int DeleteRequest::int64_primary_keys_size() const {
  return _internal_int64_primary_keys_size();
}
inline void DeleteRequest::clear_int64_primary_keys() {
  _impl_.int64_primary_keys_.Clear();
}
inline int64_t DeleteRequest::_internal_int64_primary_keys(int index) const {
  return _impl_.int64_primary_keys_.Get(index);
}
inline int64_t DeleteRequest::int64_primary_keys(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.int64_primary_keys)
  return _internal_int64_primary_keys(index);
}
inline void DeleteRequest::set_int64_primary_keys(int index, int64_t value) {
  _impl_.int64_primary_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.int64_primary_keys)
}
inline void DeleteRequest::_internal_add_int64_primary_keys(int64_t value) {
  _impl_.int64_primary_keys_.Add(value);
}
inline void DeleteRequest::add_int64_primary_keys(int64_t value) {
  _internal_add_int64_primary_keys(value);
  // @@protoc_insertion_point(field_add:milvus.proto.msg.DeleteRequest.int64_primary_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DeleteRequest::_internal_int64_primary_keys() const {
  return _impl_.int64_primary_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DeleteRequest::int64_primary_keys() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.DeleteRequest.int64_primary_keys)
  return _internal_int64_primary_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DeleteRequest::_internal_mutable_int64_primary_keys() {
  return &_impl_.int64_primary_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DeleteRequest::mutable_int64_primary_keys() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.DeleteRequest.int64_primary_keys)
  return _internal_mutable_int64_primary_keys();
}

// repeated uint64 timestamps = 10;
inline int DeleteRequest::_internal_timestamps_size() const {
  return _impl_.timestamps_.size();
}
inline int DeleteRequest::timestamps_size() const {
  return _internal_timestamps_size();
}
inline void DeleteRequest::clear_timestamps() {
  _impl_.timestamps_.Clear();
}
inline uint64_t DeleteRequest::_internal_timestamps(int index) const {
  return _impl_.timestamps_.Get(index);
}
inline uint64_t DeleteRequest::timestamps(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.timestamps)
  return _internal_timestamps(index);
}
inline void DeleteRequest::set_timestamps(int index, uint64_t value) {
  _impl_.timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.timestamps)
}
inline void DeleteRequest::_internal_add_timestamps(uint64_t value) {
  _impl_.timestamps_.Add(value);
}
inline void DeleteRequest::add_timestamps(uint64_t value) {
  _internal_add_timestamps(value);
  // @@protoc_insertion_point(field_add:milvus.proto.msg.DeleteRequest.timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
DeleteRequest::_internal_timestamps() const {
  return _impl_.timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
DeleteRequest::timestamps() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.DeleteRequest.timestamps)
  return _internal_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
DeleteRequest::_internal_mutable_timestamps() {
  return &_impl_.timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
DeleteRequest::mutable_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.DeleteRequest.timestamps)
  return _internal_mutable_timestamps();
}

// int64 num_rows = 11;
inline void DeleteRequest::clear_num_rows() {
  _impl_.num_rows_ = int64_t{0};
}
inline int64_t DeleteRequest::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline int64_t DeleteRequest::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.num_rows)
  return _internal_num_rows();
}
inline void DeleteRequest::_internal_set_num_rows(int64_t value) {
  
  _impl_.num_rows_ = value;
}
inline void DeleteRequest::set_num_rows(int64_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.num_rows)
}

// .milvus.proto.schema.IDs primary_keys = 12;
inline bool DeleteRequest::_internal_has_primary_keys() const {
  return this != internal_default_instance() && _impl_.primary_keys_ != nullptr;
}
inline bool DeleteRequest::has_primary_keys() const {
  return _internal_has_primary_keys();
}
inline const ::milvus::proto::schema::IDs& DeleteRequest::_internal_primary_keys() const {
  const ::milvus::proto::schema::IDs* p = _impl_.primary_keys_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::schema::IDs&>(
      ::milvus::proto::schema::_IDs_default_instance_);
}
inline const ::milvus::proto::schema::IDs& DeleteRequest::primary_keys() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.primary_keys)
  return _internal_primary_keys();
}
inline void DeleteRequest::unsafe_arena_set_allocated_primary_keys(
    ::milvus::proto::schema::IDs* primary_keys) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.primary_keys_);
  }
  _impl_.primary_keys_ = primary_keys;
  if (primary_keys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DeleteRequest.primary_keys)
}
inline ::milvus::proto::schema::IDs* DeleteRequest::release_primary_keys() {
  
  ::milvus::proto::schema::IDs* temp = _impl_.primary_keys_;
  _impl_.primary_keys_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::schema::IDs* DeleteRequest::unsafe_arena_release_primary_keys() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DeleteRequest.primary_keys)
  
  ::milvus::proto::schema::IDs* temp = _impl_.primary_keys_;
  _impl_.primary_keys_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::IDs* DeleteRequest::_internal_mutable_primary_keys() {
  
  if (_impl_.primary_keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::IDs>(GetArenaForAllocation());
    _impl_.primary_keys_ = p;
  }
  return _impl_.primary_keys_;
}
inline ::milvus::proto::schema::IDs* DeleteRequest::mutable_primary_keys() {
  ::milvus::proto::schema::IDs* _msg = _internal_mutable_primary_keys();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DeleteRequest.primary_keys)
  return _msg;
}
inline void DeleteRequest::set_allocated_primary_keys(::milvus::proto::schema::IDs* primary_keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.primary_keys_);
  }
  if (primary_keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_keys));
    if (message_arena != submessage_arena) {
      primary_keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primary_keys, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.primary_keys_ = primary_keys;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DeleteRequest.primary_keys)
}

// -------------------------------------------------------------------

// MsgPosition

// string channel_name = 1;
inline void MsgPosition::clear_channel_name() {
  _impl_.channel_name_.ClearToEmpty();
}
inline const std::string& MsgPosition::channel_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.MsgPosition.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgPosition::set_channel_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.MsgPosition.channel_name)
}
inline std::string* MsgPosition::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.MsgPosition.channel_name)
  return _s;
}
inline const std::string& MsgPosition::_internal_channel_name() const {
  return _impl_.channel_name_.Get();
}
inline void MsgPosition::_internal_set_channel_name(const std::string& value) {
  
  _impl_.channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgPosition::_internal_mutable_channel_name() {
  
  return _impl_.channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgPosition::release_channel_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.MsgPosition.channel_name)
  return _impl_.channel_name_.Release();
}
inline void MsgPosition::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  _impl_.channel_name_.SetAllocated(channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.MsgPosition.channel_name)
}

// bytes msgID = 2;
inline void MsgPosition::clear_msgid() {
  _impl_.msgid_.ClearToEmpty();
}
inline const std::string& MsgPosition::msgid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.MsgPosition.msgID)
  return _internal_msgid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgPosition::set_msgid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.MsgPosition.msgID)
}
inline std::string* MsgPosition::mutable_msgid() {
  std::string* _s = _internal_mutable_msgid();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.MsgPosition.msgID)
  return _s;
}
inline const std::string& MsgPosition::_internal_msgid() const {
  return _impl_.msgid_.Get();
}
inline void MsgPosition::_internal_set_msgid(const std::string& value) {
  
  _impl_.msgid_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgPosition::_internal_mutable_msgid() {
  
  return _impl_.msgid_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgPosition::release_msgid() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.MsgPosition.msgID)
  return _impl_.msgid_.Release();
}
inline void MsgPosition::set_allocated_msgid(std::string* msgid) {
  if (msgid != nullptr) {
    
  } else {
    
  }
  _impl_.msgid_.SetAllocated(msgid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgid_.IsDefault()) {
    _impl_.msgid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.MsgPosition.msgID)
}

// string msgGroup = 3;
inline void MsgPosition::clear_msggroup() {
  _impl_.msggroup_.ClearToEmpty();
}
inline const std::string& MsgPosition::msggroup() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.MsgPosition.msgGroup)
  return _internal_msggroup();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgPosition::set_msggroup(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msggroup_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.MsgPosition.msgGroup)
}
inline std::string* MsgPosition::mutable_msggroup() {
  std::string* _s = _internal_mutable_msggroup();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.MsgPosition.msgGroup)
  return _s;
}
inline const std::string& MsgPosition::_internal_msggroup() const {
  return _impl_.msggroup_.Get();
}
inline void MsgPosition::_internal_set_msggroup(const std::string& value) {
  
  _impl_.msggroup_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgPosition::_internal_mutable_msggroup() {
  
  return _impl_.msggroup_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgPosition::release_msggroup() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.MsgPosition.msgGroup)
  return _impl_.msggroup_.Release();
}
inline void MsgPosition::set_allocated_msggroup(std::string* msggroup) {
  if (msggroup != nullptr) {
    
  } else {
    
  }
  _impl_.msggroup_.SetAllocated(msggroup, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msggroup_.IsDefault()) {
    _impl_.msggroup_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.MsgPosition.msgGroup)
}

// uint64 timestamp = 4;
inline void MsgPosition::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t MsgPosition::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t MsgPosition::timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.MsgPosition.timestamp)
  return _internal_timestamp();
}
inline void MsgPosition::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void MsgPosition::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.MsgPosition.timestamp)
}

// -------------------------------------------------------------------

// CreateCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreateCollectionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool CreateCollectionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CreateCollectionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CreateCollectionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.base)
  return _internal_base();
}
inline void CreateCollectionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.CreateCollectionRequest.base)
}
inline ::milvus::proto::common::MsgBase* CreateCollectionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateCollectionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreateCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateCollectionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* CreateCollectionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreateCollectionRequest.base)
  return _msg;
}
inline void CreateCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreateCollectionRequest.base)
}

// string db_name = 2;
inline void CreateCollectionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& CreateCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCollectionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.db_name)
}
inline std::string* CreateCollectionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreateCollectionRequest.db_name)
  return _s;
}
inline const std::string& CreateCollectionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void CreateCollectionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCollectionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreateCollectionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void CreateCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreateCollectionRequest.db_name)
}

// string collectionName = 3;
inline void CreateCollectionRequest::clear_collectionname() {
  _impl_.collectionname_.ClearToEmpty();
}
inline const std::string& CreateCollectionRequest::collectionname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.collectionName)
  return _internal_collectionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCollectionRequest::set_collectionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collectionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.collectionName)
}
inline std::string* CreateCollectionRequest::mutable_collectionname() {
  std::string* _s = _internal_mutable_collectionname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreateCollectionRequest.collectionName)
  return _s;
}
inline const std::string& CreateCollectionRequest::_internal_collectionname() const {
  return _impl_.collectionname_.Get();
}
inline void CreateCollectionRequest::_internal_set_collectionname(const std::string& value) {
  
  _impl_.collectionname_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCollectionRequest::_internal_mutable_collectionname() {
  
  return _impl_.collectionname_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCollectionRequest::release_collectionname() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreateCollectionRequest.collectionName)
  return _impl_.collectionname_.Release();
}
inline void CreateCollectionRequest::set_allocated_collectionname(std::string* collectionname) {
  if (collectionname != nullptr) {
    
  } else {
    
  }
  _impl_.collectionname_.SetAllocated(collectionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collectionname_.IsDefault()) {
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreateCollectionRequest.collectionName)
}

// string partitionName = 4;
inline void CreateCollectionRequest::clear_partitionname() {
  _impl_.partitionname_.ClearToEmpty();
}
inline const std::string& CreateCollectionRequest::partitionname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.partitionName)
  return _internal_partitionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCollectionRequest::set_partitionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.partitionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.partitionName)
}
inline std::string* CreateCollectionRequest::mutable_partitionname() {
  std::string* _s = _internal_mutable_partitionname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreateCollectionRequest.partitionName)
  return _s;
}
inline const std::string& CreateCollectionRequest::_internal_partitionname() const {
  return _impl_.partitionname_.Get();
}
inline void CreateCollectionRequest::_internal_set_partitionname(const std::string& value) {
  
  _impl_.partitionname_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCollectionRequest::_internal_mutable_partitionname() {
  
  return _impl_.partitionname_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCollectionRequest::release_partitionname() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreateCollectionRequest.partitionName)
  return _impl_.partitionname_.Release();
}
inline void CreateCollectionRequest::set_allocated_partitionname(std::string* partitionname) {
  if (partitionname != nullptr) {
    
  } else {
    
  }
  _impl_.partitionname_.SetAllocated(partitionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partitionname_.IsDefault()) {
    _impl_.partitionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreateCollectionRequest.partitionName)
}

// int64 dbID = 5;
inline void CreateCollectionRequest::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t CreateCollectionRequest::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t CreateCollectionRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.dbID)
  return _internal_dbid();
}
inline void CreateCollectionRequest::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void CreateCollectionRequest::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.dbID)
}

// int64 collectionID = 6;
inline void CreateCollectionRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t CreateCollectionRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t CreateCollectionRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.collectionID)
  return _internal_collectionid();
}
inline void CreateCollectionRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void CreateCollectionRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.collectionID)
}

// int64 partitionID = 7;
inline void CreateCollectionRequest::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t CreateCollectionRequest::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t CreateCollectionRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.partitionID)
  return _internal_partitionid();
}
inline void CreateCollectionRequest::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void CreateCollectionRequest::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.partitionID)
}

// bytes schema = 8;
inline void CreateCollectionRequest::clear_schema() {
  _impl_.schema_.ClearToEmpty();
}
inline const std::string& CreateCollectionRequest::schema() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.schema)
  return _internal_schema();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCollectionRequest::set_schema(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schema_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.schema)
}
inline std::string* CreateCollectionRequest::mutable_schema() {
  std::string* _s = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreateCollectionRequest.schema)
  return _s;
}
inline const std::string& CreateCollectionRequest::_internal_schema() const {
  return _impl_.schema_.Get();
}
inline void CreateCollectionRequest::_internal_set_schema(const std::string& value) {
  
  _impl_.schema_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCollectionRequest::_internal_mutable_schema() {
  
  return _impl_.schema_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCollectionRequest::release_schema() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreateCollectionRequest.schema)
  return _impl_.schema_.Release();
}
inline void CreateCollectionRequest::set_allocated_schema(std::string* schema) {
  if (schema != nullptr) {
    
  } else {
    
  }
  _impl_.schema_.SetAllocated(schema, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_.IsDefault()) {
    _impl_.schema_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreateCollectionRequest.schema)
}

// repeated string virtualChannelNames = 9;
inline int CreateCollectionRequest::_internal_virtualchannelnames_size() const {
  return _impl_.virtualchannelnames_.size();
}
inline int CreateCollectionRequest::virtualchannelnames_size() const {
  return _internal_virtualchannelnames_size();
}
inline void CreateCollectionRequest::clear_virtualchannelnames() {
  _impl_.virtualchannelnames_.Clear();
}
inline std::string* CreateCollectionRequest::add_virtualchannelnames() {
  std::string* _s = _internal_add_virtualchannelnames();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
  return _s;
}
inline const std::string& CreateCollectionRequest::_internal_virtualchannelnames(int index) const {
  return _impl_.virtualchannelnames_.Get(index);
}
inline const std::string& CreateCollectionRequest::virtualchannelnames(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
  return _internal_virtualchannelnames(index);
}
inline std::string* CreateCollectionRequest::mutable_virtualchannelnames(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
  return _impl_.virtualchannelnames_.Mutable(index);
}
inline void CreateCollectionRequest::set_virtualchannelnames(int index, const std::string& value) {
  _impl_.virtualchannelnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
}
inline void CreateCollectionRequest::set_virtualchannelnames(int index, std::string&& value) {
  _impl_.virtualchannelnames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
}
inline void CreateCollectionRequest::set_virtualchannelnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.virtualchannelnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
}
inline void CreateCollectionRequest::set_virtualchannelnames(int index, const char* value, size_t size) {
  _impl_.virtualchannelnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
}
inline std::string* CreateCollectionRequest::_internal_add_virtualchannelnames() {
  return _impl_.virtualchannelnames_.Add();
}
inline void CreateCollectionRequest::add_virtualchannelnames(const std::string& value) {
  _impl_.virtualchannelnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
}
inline void CreateCollectionRequest::add_virtualchannelnames(std::string&& value) {
  _impl_.virtualchannelnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
}
inline void CreateCollectionRequest::add_virtualchannelnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.virtualchannelnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
}
inline void CreateCollectionRequest::add_virtualchannelnames(const char* value, size_t size) {
  _impl_.virtualchannelnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateCollectionRequest::virtualchannelnames() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
  return _impl_.virtualchannelnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateCollectionRequest::mutable_virtualchannelnames() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
  return &_impl_.virtualchannelnames_;
}

// repeated string physicalChannelNames = 10;
inline int CreateCollectionRequest::_internal_physicalchannelnames_size() const {
  return _impl_.physicalchannelnames_.size();
}
inline int CreateCollectionRequest::physicalchannelnames_size() const {
  return _internal_physicalchannelnames_size();
}
inline void CreateCollectionRequest::clear_physicalchannelnames() {
  _impl_.physicalchannelnames_.Clear();
}
inline std::string* CreateCollectionRequest::add_physicalchannelnames() {
  std::string* _s = _internal_add_physicalchannelnames();
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
  return _s;
}
inline const std::string& CreateCollectionRequest::_internal_physicalchannelnames(int index) const {
  return _impl_.physicalchannelnames_.Get(index);
}
inline const std::string& CreateCollectionRequest::physicalchannelnames(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
  return _internal_physicalchannelnames(index);
}
inline std::string* CreateCollectionRequest::mutable_physicalchannelnames(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
  return _impl_.physicalchannelnames_.Mutable(index);
}
inline void CreateCollectionRequest::set_physicalchannelnames(int index, const std::string& value) {
  _impl_.physicalchannelnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
}
inline void CreateCollectionRequest::set_physicalchannelnames(int index, std::string&& value) {
  _impl_.physicalchannelnames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
}
inline void CreateCollectionRequest::set_physicalchannelnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.physicalchannelnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
}
inline void CreateCollectionRequest::set_physicalchannelnames(int index, const char* value, size_t size) {
  _impl_.physicalchannelnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
}
inline std::string* CreateCollectionRequest::_internal_add_physicalchannelnames() {
  return _impl_.physicalchannelnames_.Add();
}
inline void CreateCollectionRequest::add_physicalchannelnames(const std::string& value) {
  _impl_.physicalchannelnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
}
inline void CreateCollectionRequest::add_physicalchannelnames(std::string&& value) {
  _impl_.physicalchannelnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
}
inline void CreateCollectionRequest::add_physicalchannelnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.physicalchannelnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
}
inline void CreateCollectionRequest::add_physicalchannelnames(const char* value, size_t size) {
  _impl_.physicalchannelnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateCollectionRequest::physicalchannelnames() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
  return _impl_.physicalchannelnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateCollectionRequest::mutable_physicalchannelnames() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
  return &_impl_.physicalchannelnames_;
}

// repeated int64 partitionIDs = 11;
inline int CreateCollectionRequest::_internal_partitionids_size() const {
  return _impl_.partitionids_.size();
}
inline int CreateCollectionRequest::partitionids_size() const {
  return _internal_partitionids_size();
}
inline void CreateCollectionRequest::clear_partitionids() {
  _impl_.partitionids_.Clear();
}
inline int64_t CreateCollectionRequest::_internal_partitionids(int index) const {
  return _impl_.partitionids_.Get(index);
}
inline int64_t CreateCollectionRequest::partitionids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.partitionIDs)
  return _internal_partitionids(index);
}
inline void CreateCollectionRequest::set_partitionids(int index, int64_t value) {
  _impl_.partitionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.partitionIDs)
}
inline void CreateCollectionRequest::_internal_add_partitionids(int64_t value) {
  _impl_.partitionids_.Add(value);
}
inline void CreateCollectionRequest::add_partitionids(int64_t value) {
  _internal_add_partitionids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.msg.CreateCollectionRequest.partitionIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
CreateCollectionRequest::_internal_partitionids() const {
  return _impl_.partitionids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
CreateCollectionRequest::partitionids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.CreateCollectionRequest.partitionIDs)
  return _internal_partitionids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
CreateCollectionRequest::_internal_mutable_partitionids() {
  return &_impl_.partitionids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
CreateCollectionRequest::mutable_partitionids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.CreateCollectionRequest.partitionIDs)
  return _internal_mutable_partitionids();
}

// -------------------------------------------------------------------

// DropCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropCollectionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DropCollectionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DropCollectionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DropCollectionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropCollectionRequest.base)
  return _internal_base();
}
inline void DropCollectionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DropCollectionRequest.base)
}
inline ::milvus::proto::common::MsgBase* DropCollectionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropCollectionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DropCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropCollectionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DropCollectionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DropCollectionRequest.base)
  return _msg;
}
inline void DropCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DropCollectionRequest.base)
}

// string db_name = 2;
inline void DropCollectionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DropCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropCollectionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropCollectionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropCollectionRequest.db_name)
}
inline std::string* DropCollectionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DropCollectionRequest.db_name)
  return _s;
}
inline const std::string& DropCollectionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DropCollectionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropCollectionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DropCollectionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void DropCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DropCollectionRequest.db_name)
}

// string collectionName = 3;
inline void DropCollectionRequest::clear_collectionname() {
  _impl_.collectionname_.ClearToEmpty();
}
inline const std::string& DropCollectionRequest::collectionname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropCollectionRequest.collectionName)
  return _internal_collectionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropCollectionRequest::set_collectionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collectionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropCollectionRequest.collectionName)
}
inline std::string* DropCollectionRequest::mutable_collectionname() {
  std::string* _s = _internal_mutable_collectionname();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DropCollectionRequest.collectionName)
  return _s;
}
inline const std::string& DropCollectionRequest::_internal_collectionname() const {
  return _impl_.collectionname_.Get();
}
inline void DropCollectionRequest::_internal_set_collectionname(const std::string& value) {
  
  _impl_.collectionname_.Set(value, GetArenaForAllocation());
}
inline std::string* DropCollectionRequest::_internal_mutable_collectionname() {
  
  return _impl_.collectionname_.Mutable(GetArenaForAllocation());
}
inline std::string* DropCollectionRequest::release_collectionname() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DropCollectionRequest.collectionName)
  return _impl_.collectionname_.Release();
}
inline void DropCollectionRequest::set_allocated_collectionname(std::string* collectionname) {
  if (collectionname != nullptr) {
    
  } else {
    
  }
  _impl_.collectionname_.SetAllocated(collectionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collectionname_.IsDefault()) {
    _impl_.collectionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DropCollectionRequest.collectionName)
}

// int64 dbID = 4;
inline void DropCollectionRequest::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t DropCollectionRequest::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t DropCollectionRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropCollectionRequest.dbID)
  return _internal_dbid();
}
inline void DropCollectionRequest::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void DropCollectionRequest::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropCollectionRequest.dbID)
}

// int64 collectionID = 5;
inline void DropCollectionRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t DropCollectionRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t DropCollectionRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropCollectionRequest.collectionID)
  return _internal_collectionid();
}
inline void DropCollectionRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void DropCollectionRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropCollectionRequest.collectionID)
}

// -------------------------------------------------------------------

// CreatePartitionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreatePartitionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool CreatePartitionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CreatePartitionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CreatePartitionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreatePartitionRequest.base)
  return _internal_base();
}
inline void CreatePartitionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.CreatePartitionRequest.base)
}
inline ::milvus::proto::common::MsgBase* CreatePartitionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreatePartitionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreatePartitionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreatePartitionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* CreatePartitionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreatePartitionRequest.base)
  return _msg;
}
inline void CreatePartitionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreatePartitionRequest.base)
}

// string db_name = 2;
inline void CreatePartitionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& CreatePartitionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreatePartitionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePartitionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreatePartitionRequest.db_name)
}
inline std::string* CreatePartitionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreatePartitionRequest.db_name)
  return _s;
}
inline const std::string& CreatePartitionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void CreatePartitionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePartitionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePartitionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreatePartitionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void CreatePartitionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreatePartitionRequest.db_name)
}

// string collection_name = 3;
inline void CreatePartitionRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& CreatePartitionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreatePartitionRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePartitionRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreatePartitionRequest.collection_name)
}
inline std::string* CreatePartitionRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreatePartitionRequest.collection_name)
  return _s;
}
inline const std::string& CreatePartitionRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void CreatePartitionRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePartitionRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePartitionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreatePartitionRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void CreatePartitionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreatePartitionRequest.collection_name)
}

// string partition_name = 4;
inline void CreatePartitionRequest::clear_partition_name() {
  _impl_.partition_name_.ClearToEmpty();
}
inline const std::string& CreatePartitionRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreatePartitionRequest.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePartitionRequest::set_partition_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.partition_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreatePartitionRequest.partition_name)
}
inline std::string* CreatePartitionRequest::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreatePartitionRequest.partition_name)
  return _s;
}
inline const std::string& CreatePartitionRequest::_internal_partition_name() const {
  return _impl_.partition_name_.Get();
}
inline void CreatePartitionRequest::_internal_set_partition_name(const std::string& value) {
  
  _impl_.partition_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePartitionRequest::_internal_mutable_partition_name() {
  
  return _impl_.partition_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePartitionRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreatePartitionRequest.partition_name)
  return _impl_.partition_name_.Release();
}
inline void CreatePartitionRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  _impl_.partition_name_.SetAllocated(partition_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partition_name_.IsDefault()) {
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreatePartitionRequest.partition_name)
}

// int64 dbID = 5;
inline void CreatePartitionRequest::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t CreatePartitionRequest::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t CreatePartitionRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreatePartitionRequest.dbID)
  return _internal_dbid();
}
inline void CreatePartitionRequest::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void CreatePartitionRequest::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreatePartitionRequest.dbID)
}

// int64 collectionID = 6;
inline void CreatePartitionRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t CreatePartitionRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t CreatePartitionRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreatePartitionRequest.collectionID)
  return _internal_collectionid();
}
inline void CreatePartitionRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void CreatePartitionRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreatePartitionRequest.collectionID)
}

// int64 partitionID = 7;
inline void CreatePartitionRequest::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t CreatePartitionRequest::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t CreatePartitionRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreatePartitionRequest.partitionID)
  return _internal_partitionid();
}
inline void CreatePartitionRequest::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void CreatePartitionRequest::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreatePartitionRequest.partitionID)
}

// -------------------------------------------------------------------

// DropPartitionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropPartitionRequest::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DropPartitionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DropPartitionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DropPartitionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropPartitionRequest.base)
  return _internal_base();
}
inline void DropPartitionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DropPartitionRequest.base)
}
inline ::milvus::proto::common::MsgBase* DropPartitionRequest::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropPartitionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DropPartitionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropPartitionRequest::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DropPartitionRequest::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DropPartitionRequest.base)
  return _msg;
}
inline void DropPartitionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DropPartitionRequest.base)
}

// string db_name = 2;
inline void DropPartitionRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& DropPartitionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropPartitionRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropPartitionRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropPartitionRequest.db_name)
}
inline std::string* DropPartitionRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DropPartitionRequest.db_name)
  return _s;
}
inline const std::string& DropPartitionRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void DropPartitionRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropPartitionRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropPartitionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DropPartitionRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void DropPartitionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DropPartitionRequest.db_name)
}

// string collection_name = 3;
inline void DropPartitionRequest::clear_collection_name() {
  _impl_.collection_name_.ClearToEmpty();
}
inline const std::string& DropPartitionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropPartitionRequest.collection_name)
  return _internal_collection_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropPartitionRequest::set_collection_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collection_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropPartitionRequest.collection_name)
}
inline std::string* DropPartitionRequest::mutable_collection_name() {
  std::string* _s = _internal_mutable_collection_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DropPartitionRequest.collection_name)
  return _s;
}
inline const std::string& DropPartitionRequest::_internal_collection_name() const {
  return _impl_.collection_name_.Get();
}
inline void DropPartitionRequest::_internal_set_collection_name(const std::string& value) {
  
  _impl_.collection_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropPartitionRequest::_internal_mutable_collection_name() {
  
  return _impl_.collection_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropPartitionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DropPartitionRequest.collection_name)
  return _impl_.collection_name_.Release();
}
inline void DropPartitionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  _impl_.collection_name_.SetAllocated(collection_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collection_name_.IsDefault()) {
    _impl_.collection_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DropPartitionRequest.collection_name)
}

// string partition_name = 4;
inline void DropPartitionRequest::clear_partition_name() {
  _impl_.partition_name_.ClearToEmpty();
}
inline const std::string& DropPartitionRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropPartitionRequest.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropPartitionRequest::set_partition_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.partition_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropPartitionRequest.partition_name)
}
inline std::string* DropPartitionRequest::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DropPartitionRequest.partition_name)
  return _s;
}
inline const std::string& DropPartitionRequest::_internal_partition_name() const {
  return _impl_.partition_name_.Get();
}
inline void DropPartitionRequest::_internal_set_partition_name(const std::string& value) {
  
  _impl_.partition_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DropPartitionRequest::_internal_mutable_partition_name() {
  
  return _impl_.partition_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DropPartitionRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DropPartitionRequest.partition_name)
  return _impl_.partition_name_.Release();
}
inline void DropPartitionRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  _impl_.partition_name_.SetAllocated(partition_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partition_name_.IsDefault()) {
    _impl_.partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DropPartitionRequest.partition_name)
}

// int64 dbID = 5;
inline void DropPartitionRequest::clear_dbid() {
  _impl_.dbid_ = int64_t{0};
}
inline int64_t DropPartitionRequest::_internal_dbid() const {
  return _impl_.dbid_;
}
inline int64_t DropPartitionRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropPartitionRequest.dbID)
  return _internal_dbid();
}
inline void DropPartitionRequest::_internal_set_dbid(int64_t value) {
  
  _impl_.dbid_ = value;
}
inline void DropPartitionRequest::set_dbid(int64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropPartitionRequest.dbID)
}

// int64 collectionID = 6;
inline void DropPartitionRequest::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t DropPartitionRequest::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t DropPartitionRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropPartitionRequest.collectionID)
  return _internal_collectionid();
}
inline void DropPartitionRequest::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void DropPartitionRequest::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropPartitionRequest.collectionID)
}

// int64 partitionID = 7;
inline void DropPartitionRequest::clear_partitionid() {
  _impl_.partitionid_ = int64_t{0};
}
inline int64_t DropPartitionRequest::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline int64_t DropPartitionRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropPartitionRequest.partitionID)
  return _internal_partitionid();
}
inline void DropPartitionRequest::_internal_set_partitionid(int64_t value) {
  
  _impl_.partitionid_ = value;
}
inline void DropPartitionRequest::set_partitionid(int64_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropPartitionRequest.partitionID)
}

// -------------------------------------------------------------------

// TimeTickMsg

// .milvus.proto.common.MsgBase base = 1;
inline bool TimeTickMsg::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool TimeTickMsg::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& TimeTickMsg::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& TimeTickMsg::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.TimeTickMsg.base)
  return _internal_base();
}
inline void TimeTickMsg::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.TimeTickMsg.base)
}
inline ::milvus::proto::common::MsgBase* TimeTickMsg::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* TimeTickMsg::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.TimeTickMsg.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* TimeTickMsg::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* TimeTickMsg::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.TimeTickMsg.base)
  return _msg;
}
inline void TimeTickMsg::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.TimeTickMsg.base)
}

// -------------------------------------------------------------------

// DataNodeTtMsg

// .milvus.proto.common.MsgBase base = 1;
inline bool DataNodeTtMsg::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DataNodeTtMsg::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DataNodeTtMsg::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DataNodeTtMsg::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DataNodeTtMsg.base)
  return _internal_base();
}
inline void DataNodeTtMsg::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DataNodeTtMsg.base)
}
inline ::milvus::proto::common::MsgBase* DataNodeTtMsg::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::common::MsgBase* DataNodeTtMsg::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DataNodeTtMsg.base)
  
  ::milvus::proto::common::MsgBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DataNodeTtMsg::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::milvus::proto::common::MsgBase* DataNodeTtMsg::mutable_base() {
  ::milvus::proto::common::MsgBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DataNodeTtMsg.base)
  return _msg;
}
inline void DataNodeTtMsg::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DataNodeTtMsg.base)
}

// string channel_name = 2;
inline void DataNodeTtMsg::clear_channel_name() {
  _impl_.channel_name_.ClearToEmpty();
}
inline const std::string& DataNodeTtMsg::channel_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DataNodeTtMsg.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataNodeTtMsg::set_channel_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DataNodeTtMsg.channel_name)
}
inline std::string* DataNodeTtMsg::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DataNodeTtMsg.channel_name)
  return _s;
}
inline const std::string& DataNodeTtMsg::_internal_channel_name() const {
  return _impl_.channel_name_.Get();
}
inline void DataNodeTtMsg::_internal_set_channel_name(const std::string& value) {
  
  _impl_.channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DataNodeTtMsg::_internal_mutable_channel_name() {
  
  return _impl_.channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DataNodeTtMsg::release_channel_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DataNodeTtMsg.channel_name)
  return _impl_.channel_name_.Release();
}
inline void DataNodeTtMsg::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  _impl_.channel_name_.SetAllocated(channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DataNodeTtMsg.channel_name)
}

// uint64 timestamp = 3;
inline void DataNodeTtMsg::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t DataNodeTtMsg::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t DataNodeTtMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DataNodeTtMsg.timestamp)
  return _internal_timestamp();
}
inline void DataNodeTtMsg::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void DataNodeTtMsg::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DataNodeTtMsg.timestamp)
}

// repeated .milvus.proto.common.SegmentStats segments_stats = 4;
inline int DataNodeTtMsg::_internal_segments_stats_size() const {
  return _impl_.segments_stats_.size();
}
inline int DataNodeTtMsg::segments_stats_size() const {
  return _internal_segments_stats_size();
}
inline ::milvus::proto::common::SegmentStats* DataNodeTtMsg::mutable_segments_stats(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DataNodeTtMsg.segments_stats)
  return _impl_.segments_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats >*
DataNodeTtMsg::mutable_segments_stats() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.DataNodeTtMsg.segments_stats)
  return &_impl_.segments_stats_;
}
inline const ::milvus::proto::common::SegmentStats& DataNodeTtMsg::_internal_segments_stats(int index) const {
  return _impl_.segments_stats_.Get(index);
}
inline const ::milvus::proto::common::SegmentStats& DataNodeTtMsg::segments_stats(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DataNodeTtMsg.segments_stats)
  return _internal_segments_stats(index);
}
inline ::milvus::proto::common::SegmentStats* DataNodeTtMsg::_internal_add_segments_stats() {
  return _impl_.segments_stats_.Add();
}
inline ::milvus::proto::common::SegmentStats* DataNodeTtMsg::add_segments_stats() {
  ::milvus::proto::common::SegmentStats* _add = _internal_add_segments_stats();
  // @@protoc_insertion_point(field_add:milvus.proto.msg.DataNodeTtMsg.segments_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats >&
DataNodeTtMsg::segments_stats() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.DataNodeTtMsg.segments_stats)
  return _impl_.segments_stats_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace proto
}  // namespace milvus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::milvus::proto::msg::InsertDataVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::msg::InsertDataVersion>() {
  return ::milvus::proto::msg::InsertDataVersion_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
